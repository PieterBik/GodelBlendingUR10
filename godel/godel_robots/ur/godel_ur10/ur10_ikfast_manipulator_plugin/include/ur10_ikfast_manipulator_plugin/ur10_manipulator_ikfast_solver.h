//
// Created by pieter on 14-12-17.
//

/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-12-14 13:47:18.848459
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
while(x < 0) {
x += y;
}
return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
while(x < 0) {
x += y;
}
return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
if( isnan(fy) ) {
IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
return float(IKPI_2);
}
else if( isnan(fx) ) {
return 0;
}
return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
if( isnan(fy) ) {
IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
return IKPI_2;
}
else if( isnan(fx) ) {
return 0;
}
return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
T value;
bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
CheckValue<T> ret;
ret.valid = false;
ret.value = 0;
if( !isnan(fy) && !isnan(fx) ) {
if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
ret.value = IKatan2Simple(fy,fx);
ret.valid = true;
}
}
return ret;
}

inline float IKsign(float f) {
if( f > 0 ) {
return float(1);
}
else if( f < 0 ) {
return float(-1);
}
return 0;
}

inline double IKsign(double f) {
if( f > 0 ) {
return 1.0;
}
else if( f < 0 ) {
return -1.0;
}
return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
CheckValue<T> ret;
ret.valid = true;
if( n == 0 ) {
ret.value = 1.0;
return ret;
}
else if( n == 1 )
{
ret.value = f;
return ret;
}
else if( n < 0 )
{
if( f == 0 )
{
ret.valid = false;
ret.value = (T)1.0e30;
return ret;
}
if( n == -1 ) {
ret.value = T(1.0)/f;
return ret;
}
}

int num = n > 0 ? n : -n;
if( num == 2 ) {
ret.value = f*f;
}
else if( num == 3 ) {
ret.value = f*f*f;
}
else {
ret.value = 1.0;
while(num>0) {
if( num & 1 ) {
ret.value *= f;
}
num >>= 1;
f *= f;
}
}

if( n < 0 ) {
ret.value = T(1.0)/ret.value;
}
return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[5]);
x8=IKcos(j[4]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1157)*x4);
x13=((0.5723)*x2);
x14=((0.1157)*x1);
x15=((1.0)*x10);
x16=((1.0)*x6);
x17=((1.0)*x8);
x18=((0.0922)*x5);
x19=((0.5723)*x1);
x20=((1.0)*x4);
x21=((1.0)*x5);
x22=((1.0)*x2);
x23=((0.0922)*x6);
x24=((1.0)*x1);
x25=(x0*x3);
x26=(x11*x8);
x27=(x0*x4);
x28=(x0*x1);
x29=(x0*x2);
x30=(x11*x2);
x31=(x3*x4);
x32=(x11*x3);
x33=(x11*x15);
x34=(x24*x3);
x35=(x24*x25);
x36=(x24*x32);
x37=(((x1*x2))+x31);
x38=((((-1.0)*x2*x20))+x34);
x39=(x37*x5);
x40=(x38*x6);
x41=((((-1.0)*x35))+((x2*x27)));
x42=((((-1.0)*x36))+((x30*x4)));
x43=(((x22*x28))+((x20*x25)));
x44=(((x20*x32))+((x1*x11*x22)));
x45=(x42*x5);
x46=(x44*x6);
x47=(((x6*(((((-1.0)*x1*x22))+(((-1.0)*x20*x3))))))+((x38*x5)));
x48=(((x41*x5))+((x43*x6)));
x49=(x46+x45);
x50=((((-1.0)*x21*x43))+((x16*(((((-1.0)*x35))+((x20*x29)))))));
x51=((((-1.0)*x21*x44))+((x16*(((((-1.0)*x36))+((x20*x30)))))));
eerot[0]=(((x50*x7))+((x9*(((((-1.0)*x17*x48))+x33)))));
eerot[1]=(((x50*x9))+((x7*(((((-1.0)*x33))+((x48*x8)))))));
eerot[2]=(((x10*x48))+x26);
eetrans[0]=((((-1.0)*x19*x25))+(((0.0922)*x26))+((x10*((((x23*x43))+((x18*x41))))))+((x6*(((((-1.0)*x12*x29))+((x14*x25))))))+(((-0.612)*x28))+(((0.163941)*x11))+((x13*x27))+((x5*((((x14*x29))+((x12*x25)))))));
eerot[3]=(((x9*(((((-1.0)*x0*x15))+(((-1.0)*x17*x49))))))+((x51*x7)));
eerot[4]=(((x7*((((x0*x10))+((x49*x8))))))+((x51*x9)));
eerot[5]=(((x10*x49))+(((-1.0)*x0*x17)));
eetrans[1]=((((-0.0922)*x0*x8))+(((-0.612)*x1*x11))+(((-0.163941)*x0))+((x6*(((((-1.0)*x12*x30))+((x14*x32))))))+((x11*x13*x4))+(((-1.0)*x19*x32))+((x5*((((x14*x30))+((x12*x32))))))+((x10*((((x23*x44))+((x18*x42)))))));
eerot[6]=(((x47*x7))+((x8*x9*((x39+x40)))));
eerot[7]=(((x7*x8*(((((-1.0)*x39))+(((-1.0)*x40))))))+((x47*x9)));
eerot[8]=(x10*(((((-1.0)*x16*x38))+(((-1.0)*x21*x37)))));
eetrans[2]=((0.1273)+(((-0.612)*x4))+((x5*(((((-1.0)*x14*x3))+((x12*x2))))))+((x10*(((((-1.0)*x18*x37))+(((-1.0)*x23*x38))))))+((x6*((((x14*x2))+((x12*x3))))))+(((-0.5723)*x31))+(((-1.0)*x1*x13)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=((-1.0)*r02);
new_px=((((0.0922)*r02))+(((-1.0)*px)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=((-1.0)*r12);
new_py=((((-1.0)*py))+(((0.0922)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1273)+(((-0.0922)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.2314)*npx);
IkReal x56=((0.2314)*npy);
IkReal x57=((0.1157)*r22);
IkReal x58=((0.1157)*r21);
IkReal x59=((-0.1157)*r20);
IkReal x60=((-1.0)*r20);
IkReal x61=((-1.0)*rxp0_2);
IkReal x62=((-0.1157)*r21);
IkReal x63=((-1.0)*r21);
IkReal x64=((-1.0)*rxp1_2);
IkReal x65=((-1.0)*npx);
IkReal x66=((-1.0)*r22);
IkReal x67=((-1.0)*npz);
matrixinvcoeffs[0]=x59;
matrixinvcoeffs[1]=x55;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x60;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x61;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x59;
matrixinvcoeffs[19]=x55;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x60;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=x56;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=x56;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x66;
matrixinvcoeffs[76]=x57;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x57;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x62;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x58;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x60;
matrixinvcoeffs[133]=x65;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1157)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x60;
matrixinvcoeffs[151]=x65;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x59;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x66;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x57;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x66;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1157)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x63;
matrixinvcoeffs[204]=x58;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x58;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x65;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x59;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x60;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x59;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x61;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=pz*pz;
IkReal x69=pp*pp;
IkReal x70=((0.2314)*pz);
IkReal x71=(pp*r21);
IkReal x72=((0.2314)*rxp0_2);
IkReal x73=((0.01338649)*r22);
IkReal x74=(gclwh9_0*pz);
IkReal x75=(gclwh4_3*r22);
IkReal x76=(pp*r20);
IkReal x77=((0.327882)*gclwh14_14);
IkReal x78=(npy*pz);
IkReal x79=((0.01338649)*r21);
IkReal x80=((0.26486044)*rxp0_2);
IkReal x81=((0.00219459455709)*r21);
IkReal x82=(npz*pz);
IkReal x83=(pp*r22);
IkReal x84=(gclwh15_1*r20);
IkReal x85=(gclwh14_8*r20);
IkReal x86=(gclwh13_9*r21);
IkReal x87=((0.27404702)*rxp2_2);
IkReal x88=((0.02677298)*r22);
IkReal x89=((2.0)*gclwh11_10);
IkReal x90=((0.26486044)*rxp2_2);
IkReal x91=(gclwh14_2*pz);
IkReal x92=(gclwh11_0*pz);
IkReal x93=((1.0)*pz);
IkReal x94=(gclwh5_15*rxp2_2);
IkReal x95=((0.00219459455709)*r20);
IkReal x96=((2.0)*gclwh4_11);
IkReal x97=((0.000201684224787892)*r20);
IkReal x98=((4.7372)*npx);
IkReal x99=(gclwh13_1*r21);
IkReal x100=((0.2314)*rxp2_2);
IkReal x101=(gclwh11_13*r22);
IkReal x102=((0.01338649)*r20);
IkReal x103=(npx*pz);
IkReal x104=((0.327882)*gclwh15_15);
IkReal x105=((0.327675509152703)*rxp0_2);
IkReal x106=((0.9256)*rxp2_2);
IkReal x107=((0.0379359474)*rxp1_2);
IkReal x108=(gclwh4_14*rxp2_2);
IkReal x109=(gclwh13_0*rxp1_2);
IkReal x110=(gclwh12_8*r21);
IkReal x111=(gclwh6_2*r21);
IkReal x112=(gclwh14_11*rxp0_2);
IkReal x113=((0.1517437896)*rxp1_2);
IkReal x114=((0.031707240214)*r22);
IkReal x115=((0.015322176454)*r22);
IkReal x116=((0.015322176454)*r20);
IkReal x117=((0.001062887306)*r22);
IkReal x118=((2.0)*gclwh9_10);
IkReal x119=(gclwh12_3*rxp1_2);
IkReal x120=((0.2832336)*rxp2_2);
IkReal x121=((0.02677298)*r20);
IkReal x122=(gclwh6_12*r21);
IkReal x123=(gclwh12_3*r21);
IkReal x124=(gclwh15_9*r20);
IkReal x125=((0.05354596)*r20);
IkReal x126=((0.02677298)*r21);
IkReal x127=((0.0379359474)*rxp0_2);
IkReal x128=(gclwh5_0*rxp2_2);
IkReal x129=((0.00918658)*rxp2_2);
IkReal x130=(gclwh4_3*rxp2_2);
IkReal x131=((0.031707240214)*r21);
IkReal x132=((2.0)*gclwh10_11);
IkReal x133=((4.0)*gclwh8_11);
IkReal x134=((2.0)*pp);
IkReal x135=((4.0)*gclwh11_10);
IkReal x136=(gclwh13_9*rxp1_2);
IkReal x137=((0.00918658)*rxp0_2);
IkReal x138=((0.015853620107)*r22);
IkReal x139=(gclwh7_13*r21);
IkReal x140=(gclwh1_2*pz);
IkReal x141=((2.0)*gclwh7_10);
IkReal x142=((0.030644352908)*r20);
IkReal x143=((0.2314)*rxp1_2);
IkReal x144=(gclwh5_1*rxp2_2);
IkReal x145=(gclwh12_2*rxp1_2);
IkReal x146=(gclwh15_0*pz);
IkReal x147=(gclwh15_9*rxp0_2);
IkReal x148=(gclwh4_2*rxp2_2);
IkReal x149=(gclwh5_9*r22);
IkReal x150=(gclwh12_8*rxp1_2);
IkReal x151=((0.4628)*rxp1_2);
IkReal x152=(gclwh7_13*rxp1_2);
IkReal x153=((0.26486044)*rxp1_2);
IkReal x154=(gclwh6_2*rxp1_2);
IkReal x155=((0.05354596)*r21);
IkReal x156=(gclwh8_2*pz);
IkReal x157=((0.05354596)*r22);
IkReal x158=((4.0)*gclwh9_10);
IkReal x159=(gclwh5_0*pz);
IkReal x160=((0.54809404)*rxp0_2);
IkReal x161=(gclwh4_2*pz);
IkReal x162=((0.015322176454)*r21);
IkReal x163=(gclwh9_0*r20);
IkReal x164=(gclwh15_15*rxp0_2);
IkReal x165=((4.0)*gclwh7_10);
IkReal x166=(gclwh10_2*pz);
IkReal x167=((0.327882)*gclwh12_14);
IkReal x168=(gclwh10_12*r22);
IkReal x169=(gclwh13_1*rxp1_2);
IkReal x170=((0.4628)*rxp0_2);
IkReal x171=(gclwh13_0*pz);
IkReal x172=((0.0189560282044839)*r20);
IkReal x173=((0.031707240214)*r20);
IkReal x174=(gclwh8_12*r20);
IkReal x175=((2.0)*gclwh6_11);
IkReal x176=((2.2892)*npx);
IkReal x177=(gclwh2_1*r21);
IkReal x178=((2.0)*gclwh12_11);
IkReal x179=((0.00438918911418)*r21);
IkReal x180=(gclwh14_14*rxp0_2);
IkReal x181=((0.27404702)*rxp0_2);
IkReal x182=((0.327882)*gclwh5_15);
IkReal x183=((0.0379359474)*rxp2_2);
IkReal x184=((2.0)*gclwh8_11);
IkReal x185=((4.0)*gclwh10_11);
IkReal x186=(gclwh3_3*r21);
IkReal x187=(gclwh9_13*r20);
IkReal x188=(gclwh5_1*r22);
IkReal x189=((0.00438918911418)*r22);
IkReal x190=((2.0)*gclwh5_10);
IkReal x191=(gclwh6_12*rxp1_2);
IkReal x192=((2.0)*gclwh15_10);
IkReal x193=((0.0758718948)*rxp1_2);
IkReal x194=((0.327882)*gclwh4_14);
IkReal x195=((0.00438918911418)*r20);
IkReal x196=((0.4628)*rxp2_2);
IkReal x197=((4.0)*gclwh6_11);
IkReal x198=((0.327882)*gclwh13_15);
IkReal x199=((0.01837316)*rxp0_2);
IkReal x200=((0.9256)*rxp1_2);
IkReal x201=((2.0)*gclwh13_10);
IkReal x202=((0.0034863305927034)*rxp0_2);
IkReal x203=((0.00219459455709)*r22);
IkReal x204=(gclwh14_8*rxp0_2);
IkReal x205=(gclwh4_8*r22);
IkReal x206=((0.02677298)*rxp2_2);
IkReal x207=((2.0)*gclwh14_11);
IkReal x208=(gclwh14_14*x127);
IkReal x209=(gclwh6_5*x81);
IkReal x210=(gclwh10_5*x203);
IkReal x211=(gclwh12_14*x107);
IkReal x212=(gclwh8_5*x95);
IkReal x213=((0.0379359474)*x108);
IkReal x214=(gclwh4_11*x100);
IkReal x215=(gclwh12_11*x143);
IkReal x216=(gclwh6_11*x79);
IkReal x217=(gclwh4_8*x206);
IkReal x218=((0.02677298)*x150);
IkReal x219=(gclwh14_11*x72);
IkReal x220=(gclwh10_11*x73);
IkReal x221=(gclwh8_11*x102);
IkReal x222=((0.02677298)*x204);
IkReal x223=(gclwh11_10*x73);
IkReal x224=(gclwh9_10*x102);
IkReal x225=((0.02677298)*x136);
IkReal x226=(gclwh15_10*x72);
IkReal x227=(gclwh5_9*x206);
IkReal x228=(gclwh5_10*x100);
IkReal x229=(gclwh13_10*x143);
IkReal x230=((0.02677298)*x147);
IkReal x231=(gclwh7_10*x79);
IkReal x232=(gclwh15_15*x127);
IkReal x233=(gclwh7_7*x81);
IkReal x234=(gclwh9_7*x95);
IkReal x235=((0.0379359474)*x94);
IkReal x236=(gclwh13_15*x107);
IkReal x237=(gclwh11_7*x203);
IkReal x238=(gclwh8_5*x127);
IkReal x239=(gclwh14_14*x95);
IkReal x240=(gclwh10_5*x183);
IkReal x241=(gclwh4_14*x203);
IkReal x242=(gclwh6_5*x107);
IkReal x243=(gclwh12_14*x81);
IkReal x244=(gclwh4_11*x73);
IkReal x245=(gclwh12_11*x79);
IkReal x246=((0.001548816893)*x110);
IkReal x247=(gclwh8_11*x72);
IkReal x248=((0.001548816893)*x205);
IkReal x249=(gclwh10_11*x100);
IkReal x250=(gclwh14_11*x102);
IkReal x251=(gclwh6_11*x143);
IkReal x252=((0.001548816893)*x85);
IkReal x253=(gclwh5_10*x73);
IkReal x254=((0.001548816893)*x124);
IkReal x255=(gclwh9_10*x72);
IkReal x256=(gclwh11_10*x100);
IkReal x257=(gclwh13_10*x79);
IkReal x258=((0.001548816893)*x149);
IkReal x259=((0.001548816893)*x86);
IkReal x260=(gclwh7_10*x143);
IkReal x261=(gclwh15_10*x102);
IkReal x262=(gclwh7_7*x107);
IkReal x263=(gclwh5_15*x203);
IkReal x264=(gclwh13_15*x81);
IkReal x265=(gclwh9_7*x127);
IkReal x266=(gclwh11_7*x183);
IkReal x267=(gclwh15_15*x95);
IkReal x268=((0.4628)*x112);
IkReal x269=(gclwh10_11*x88);
IkReal x270=(gclwh8_11*x121);
IkReal x271=((0.0758718948)*x180);
IkReal x272=((0.0758718948)*x108);
IkReal x273=(gclwh12_14*x193);
IkReal x274=(gclwh4_11*x196);
IkReal x275=(gclwh6_11*x126);
IkReal x276=(gclwh12_11*x151);
IkReal x277=(gclwh13_15*x193);
IkReal x278=((0.0758718948)*x94);
IkReal x279=((0.0758718948)*x164);
IkReal x280=(gclwh15_10*x170);
IkReal x281=(gclwh11_10*x88);
IkReal x282=(gclwh9_10*x121);
IkReal x283=(gclwh13_10*x151);
IkReal x284=(gclwh7_10*x126);
IkReal x285=(gclwh5_10*x196);
IkReal x286=(gclwh6_11*x151);
IkReal x287=(gclwh14_11*x121);
IkReal x288=(gclwh14_14*x195);
IkReal x289=(gclwh4_14*x189);
IkReal x290=(gclwh12_14*x179);
IkReal x291=(pp*x143);
IkReal x292=((2.0)*x68);
IkReal x293=((1.0)*x69);
IkReal x294=(r20*x69);
IkReal x295=((0.163941)*gclwh6_5*x71);
IkReal x296=((0.327882)*gclwh10_5*x82);
IkReal x297=((0.327882)*gclwh8_5*x103);
IkReal x298=((0.163941)*gclwh10_5*x83);
IkReal x299=((0.327882)*gclwh6_5*x78);
IkReal x300=((0.163941)*gclwh8_5*x76);
IkReal x301=(gclwh14_2*rxp0_2*x70);
IkReal x302=((0.2314)*pp*x119);
IkReal x303=(x166*x73);
IkReal x304=(x132*x82);
IkReal x305=(x103*x184);
IkReal x306=(x166*x83);
IkReal x307=(gclwh4_3*pp*x100);
IkReal x308=(x156*x76);
IkReal x309=(x102*x156);
IkReal x310=(x175*x78);
IkReal x311=(gclwh14_3*pp*x72);
IkReal x312=(x148*x70);
IkReal x313=(x145*x70);
IkReal x314=(gclwh6_2*pz*x79);
IkReal x315=(x73*x92);
IkReal x316=(gclwh13_1*x291);
IkReal x317=(gclwh15_0*rxp0_2*x70);
IkReal x318=(gclwh5_1*pp*x100);
IkReal x319=(x102*x74);
IkReal x320=(x83*x92);
IkReal x321=(x141*x78);
IkReal x322=(x74*x76);
IkReal x323=(gclwh7_0*pz*x79);
IkReal x324=(x82*x89);
IkReal x325=(x109*x70);
IkReal x326=(x103*x118);
IkReal x327=(gclwh15_1*pp*x72);
IkReal x328=(x128*x70);
IkReal x329=((0.327882)*gclwh11_7*x82);
IkReal x330=((0.163941)*gclwh7_7*x71);
IkReal x331=((0.327882)*gclwh9_7*x103);
IkReal x332=((0.163941)*gclwh11_7*x83);
IkReal x333=((0.327882)*gclwh7_7*x78);
IkReal x334=((0.163941)*gclwh9_7*x76);
IkReal x335=((0.163941)*gclwh14_14*x76);
IkReal x336=(x167*x78);
IkReal x337=(x194*x82);
IkReal x338=((0.163941)*gclwh12_14*x71);
IkReal x339=((0.163941)*gclwh4_14*x83);
IkReal x340=(x103*x77);
IkReal x341=(x76*x91);
IkReal x342=((0.1157)*gclwh4_8*x83);
IkReal x343=(x154*x70);
IkReal x344=(x123*x69);
IkReal x345=(x102*x140);
IkReal x346=((0.1157)*gclwh12_8*x71);
IkReal x347=(x102*x91);
IkReal x348=(gclwh14_8*npx*x70);
IkReal x349=(x186*x69);
IkReal x350=(gclwh1_3*x294);
IkReal x351=(x103*x207);
IkReal x352=(gclwh3_2*pz*x79);
IkReal x353=(x69*x75);
IkReal x354=(gclwh12_2*pz*x79);
IkReal x355=(x82*x96);
IkReal x356=(gclwh12_8*npy*x70);
IkReal x357=(gclwh10_2*rxp2_2*x70);
IkReal x358=(x161*x73);
IkReal x359=(gclwh4_8*npz*x70);
IkReal x360=(x178*x78);
IkReal x361=((0.1157)*gclwh14_8*x76);
IkReal x362=(gclwh8_2*rxp0_2*x70);
IkReal x363=(gclwh2_0*pz*x79);
IkReal x364=(x69*x84);
IkReal x365=(gclwh11_0*rxp2_2*x70);
IkReal x366=(x159*x83);
IkReal x367=(x171*x71);
IkReal x368=(gclwh0_0*pz*x102);
IkReal x369=(gclwh5_9*npz*x70);
IkReal x370=(x159*x73);
IkReal x371=(x171*x79);
IkReal x372=(gclwh13_9*npy*x70);
IkReal x373=((0.1157)*gclwh15_9*x76);
IkReal x374=(x103*x192);
IkReal x375=(gclwh9_0*rxp0_2*x70);
IkReal x376=(x177*x69);
IkReal x377=(gclwh0_1*x294);
IkReal x378=((0.1157)*gclwh5_9*x83);
IkReal x379=(x190*x82);
IkReal x380=((0.1157)*gclwh13_9*x71);
IkReal x381=(x201*x78);
IkReal x382=(gclwh7_0*rxp1_2*x70);
IkReal x383=(gclwh15_9*npx*x70);
IkReal x384=(x102*x146);
IkReal x385=((0.163941)*gclwh13_15*x71);
IkReal x386=((0.163941)*gclwh5_15*x83);
IkReal x387=(x103*x104);
IkReal x388=(x198*x78);
IkReal x389=((0.163941)*gclwh15_15*x76);
IkReal x390=(x182*x82);
IkReal x391=(x184*x76);
IkReal x392=(x132*x83);
IkReal x393=(x197*x78);
IkReal x394=(x103*x133);
IkReal x395=(x175*x71);
IkReal x396=(x185*x82);
IkReal x397=(x83*x89);
IkReal x398=(x165*x78);
IkReal x399=(x118*x76);
IkReal x400=(x141*x71);
IkReal x401=(x103*x158);
IkReal x402=(x135*x82);
IkReal x403=(x207*x76);
IkReal x404=((4.0)*gclwh12_11*x78);
IkReal x405=((4.0)*gclwh4_11*x82);
IkReal x406=(x76*x77);
IkReal x407=((0.655764)*gclwh12_14*x78);
IkReal x408=((0.655764)*gclwh4_14*x82);
IkReal x409=((0.655764)*gclwh14_14*x103);
IkReal x410=(x167*x71);
IkReal x411=(x194*x83);
IkReal x412=(gclwh6_2*npy*x292);
IkReal x413=(gclwh6_2*x71*x93);
IkReal x414=(gclwh10_2*npz*x292);
IkReal x415=(gclwh8_2*npx*x292);
IkReal x416=(gclwh7_0*npy*x292);
IkReal x417=(gclwh9_0*npx*x292);
IkReal x418=(gclwh11_0*npz*x292);
IkReal x419=(gclwh7_0*x71*x93);
IkReal x420=(gclwh12_2*npy*x292);
IkReal x421=(gclwh3_2*npy*x292);
IkReal x422=(gclwh1_2*npx*x292);
IkReal x423=(gclwh14_3*x103*x134);
IkReal x424=(gclwh4_2*npz*x292);
IkReal x425=(gclwh4_3*x134*x82);
IkReal x426=(gclwh12_2*x71*x93);
IkReal x427=(gclwh1_2*x76*x93);
IkReal x428=(gclwh3_3*x134*x78);
IkReal x429=(gclwh4_2*x83*x93);
IkReal x430=(gclwh1_3*x103*x134);
IkReal x431=(gclwh3_2*x71*x93);
IkReal x432=(gclwh12_3*x134*x78);
IkReal x433=(gclwh14_2*npx*x292);
IkReal x434=(gclwh14_3*r20*x293);
IkReal x435=(gclwh0_0*npx*x292);
IkReal x436=(gclwh2_0*npy*x292);
IkReal x437=(gclwh5_1*x134*x82);
IkReal x438=(gclwh13_1*x134*x78);
IkReal x439=(gclwh15_0*npx*x292);
IkReal x440=(gclwh2_1*x134*x78);
IkReal x441=(gclwh0_1*x103*x134);
IkReal x442=(gclwh5_0*npz*x292);
IkReal x443=(gclwh13_0*npy*x292);
IkReal x444=(gclwh0_0*x76*x93);
IkReal x445=(gclwh15_0*x76*x93);
IkReal x446=(gclwh2_0*x71*x93);
IkReal x447=(x293*x99);
IkReal x448=(x188*x293);
IkReal x449=(gclwh15_1*x103*x134);
IkReal x450=(x236+x235);
IkReal x451=(x265+x266);
IkReal x452=(x272+x273);
IkReal x453=(x277+x278);
IkReal x454=(x211+x213);
IkReal x455=(x238+x240);
IkReal x456=(x310+x219+x221+x220);
IkReal x457=(x321+x223+x224+x226);
IkReal x458=(x355+x360+x250+x251);
IkReal x459=(x381+x379+x261+x260);
IkReal x460=(x331+x330+x329+x233);
IkReal x461=(x388+x389+x390+x267);
IkReal x462=(x209+x295+x296+x297);
IkReal x463=(x288+x407+x406+x408);
IkReal x464=(x337+x336+x335+x239);
IkReal x465=(x351+x247+x245+x244+x249);
IkReal x466=(x374+x255+x256+x257+x253);
IkReal x467=(x324+x326+x229+x228+x231);
IkReal x468=(x304+x305+x214+x215+x216);
IkReal x469=(x386+x387+x385+x264+x263);
IkReal x470=(x333+x332+x334+x237+x234);
IkReal x471=(x300+x210+x212+x298+x299);
IkReal x472=(x287+x286+x403+x405+x404);
IkReal x473=(x290+x289+x409+x410+x411);
IkReal x474=(x339+x338+x340+x243+x241);
IkReal x475=(x395+x394+x396+x276+x274+x275);
IkReal x476=(x285+x284+x283+x401+x400+x402);
IkReal x477=(x397+x399+x398+x282+x281+x280);
IkReal x478=(x391+x393+x392+x269+x268+x270);
IkReal x479=(((gclwh10_11*x196))+(((4.0)*gclwh14_11*x103))+((gclwh4_11*x88))+((x178*x71))+((x83*x96))+((gclwh8_11*x170))+((gclwh12_11*x126)));
IkReal x480=(x325+x327+x323+x328+x230+x417+x418+x419);
IkReal x481=(x314+x311+x313+x312+x222+x413+x414+x415);
IkReal x482=(x308+x309+x306+x307+x302+x303+x301+x217+x218+x412);
IkReal x483=(x320+x322+x319+x318+x315+x317+x316+x225+x227+x416);
IkReal x484=(x384+x382+x383+x380+x378+x258+x259+x449+x448+x445+x444+x447+x446+x441+x440+x443+x442);
IkReal x485=(x350+x353+x352+x342+x343+x341+x346+x347+x344+x345+x348+x349+x246+x248+x424+x423+x422+x421+x420+x70);
IkReal x486=(x354+x357+x356+x359+x358+x361+x362+x252+x429+x428+x427+x426+x425+x430+x431+x432+x433+x434);
IkReal x487=(x377+x376+x375+x373+x372+x371+x370+x368+x369+x363+x364+x365+x366+x367+x254+x438+x439+x435+x436+x437+x70);
op[0]=((((-1.0)*gclwh10_12*x138))+(((-1.1843)*gclwh10_12*x83))+(((-0.27404702)*x150))+(((-1.0)*x471))+(((0.015853620107)*x122))+(((-1.0)*gclwh4_8*x87))+(((-1.0)*x208))+(((2.3686)*gclwh8_12*x103))+x454+x462+(((-2.3686)*gclwh6_12*x78))+(((-1.1843)*gclwh8_12*x76))+(((1.1843)*gclwh6_12*x71))+((gclwh14_8*x181))+(((2.3686)*gclwh10_12*x82))+(((-0.015853620107)*x174)));
op[1]=((((-1.0)*x481))+(((-0.327675509152703)*x119))+((gclwh14_3*x105))+(((-0.327675509152703)*x130))+(((-1.0)*x468))+x482+x456+(((-1.0)*gclwh6_11*x71))+((gclwh8_11*x76))+((gclwh10_11*x83)));
op[2]=((-0.3752937372)+(((-1.0)*x475))+x478);
op[3]=((((-2.2892)*gclwh8_2*x103))+(((-1.1446)*gclwh6_2*x71))+(((-1.0)*gclwh4_2*x90))+((gclwh8_2*x116))+(((0.2832336)*x150))+(((1.1446)*gclwh8_2*x76))+(((-0.015322176454)*x111))+(((2.2892)*gclwh6_2*x78))+(((-1.0)*x452))+x271+(((-0.26486044)*x145))+((gclwh14_2*x80))+(((-2.2892)*gclwh10_2*x82))+(((1.1446)*gclwh10_2*x83))+((gclwh10_2*x115))+((gclwh4_8*x120))+(((-0.2832336)*x204)));
op[4]=((((-1.0)*gclwh14_8*x137))+(((-0.0397)*gclwh8_12*x76))+(((0.0397)*gclwh6_12*x71))+(((0.0794)*gclwh8_12*x103))+(((0.000531443653)*x122))+(((0.00918658)*x150))+(((-0.000531443653)*x174))+(((-0.000531443653)*x168))+(((-1.0)*x471))+(((-1.0)*x454))+(((-0.0794)*gclwh6_12*x78))+x208+(((-0.0397)*gclwh10_12*x83))+x462+((gclwh4_8*x129))+(((0.0794)*gclwh10_12*x82)));
op[5]=(((gclwh6_11*x71))+(((-1.0)*x481))+(((-1.0)*gclwh10_11*x83))+(((-1.0)*x456))+x482+x468+((gclwh14_3*x202))+(((-0.0034863305927034)*x119))+(((-0.0034863305927034)*x130))+(((-1.0)*gclwh8_11*x76)));
op[6]=(((gclwh7_10*x71))+(((-1.0)*x480))+((gclwh15_1*x105))+(((-0.327675509152703)*x144))+(((-1.0)*x457))+x483+x467+(((-0.327675509152703)*x169))+(((-1.0)*gclwh9_10*x76))+(((-1.0)*gclwh11_10*x83)));
op[7]=((((-1.1843)*gclwh9_13*x76))+(((-0.015853620107)*x101))+(((0.015853620107)*x139))+(((-1.0)*x470))+(((-1.0)*gclwh5_9*x87))+(((-1.0)*x232))+(((0.27404702)*x147))+x450+x460+(((2.3686)*gclwh11_13*x82))+(((-0.015853620107)*x187))+(((-1.1843)*gclwh11_13*x83))+(((1.1843)*gclwh7_13*x71))+(((-0.27404702)*x136))+(((-2.3686)*gclwh7_13*x78))+(((2.3686)*gclwh9_13*x103)));
op[8]=((((-1.1446)*gclwh7_0*x71))+(((1.1446)*gclwh11_0*x83))+(((-1.0)*gclwh5_9*x120))+((gclwh15_0*x80))+(((0.2832336)*x147))+((gclwh11_0*x115))+(((-0.2832336)*x136))+(((-1.0)*gclwh7_0*x162))+x453+(((-1.0)*x279))+(((-1.0)*x176*x74))+((gclwh9_0*x116))+(((1.1446)*gclwh9_0*x76))+(((-2.2892)*gclwh11_0*x82))+(((-1.0)*gclwh5_0*x90))+(((2.2892)*gclwh7_0*x78))+(((-0.26486044)*x109)));
op[9]=((-0.3752937372)+(((-1.0)*x476))+x477);
op[10]=((((-1.0)*x480))+(((-1.0)*x467))+(((-1.0)*gclwh7_10*x71))+(((-0.0034863305927034)*x144))+x483+x457+((gclwh15_1*x202))+((gclwh11_10*x83))+(((-0.0034863305927034)*x169))+((gclwh9_10*x76)));
op[11]=((((0.0794)*gclwh9_13*x103))+(((-0.0794)*gclwh7_13*x78))+(((0.0397)*gclwh7_13*x71))+((gclwh5_9*x129))+(((0.000531443653)*x139))+(((-1.0)*x470))+(((0.00918658)*x136))+(((-0.000531443653)*x101))+(((-0.000531443653)*x187))+(((-1.0)*x450))+x232+(((-0.0397)*gclwh11_13*x83))+(((0.0794)*gclwh11_13*x82))+x460+(((-1.0)*gclwh15_9*x137))+(((-0.0397)*gclwh9_13*x76)));
op[12]=((((2.3686)*gclwh12_8*x78))+(((-0.015853620107)*x110))+(((-1.1843)*gclwh12_8*x71))+(((0.015853620107)*x85))+(((-0.27404702)*x191))+(((-1.0)*x464))+(((-1.0)*gclwh4_8*x138))+((gclwh10_12*x87))+((gclwh8_12*x181))+x455+x474+(((-1.0)*x242))+(((-1.1843)*gclwh4_8*x83))+(((2.3686)*gclwh4_8*x82))+(((-2.3686)*gclwh14_8*x103))+(((1.1843)*gclwh14_8*x76)));
op[13]=((-1.429443141481)+(((-0.0189560282044839)*x75))+(((0.0189560282044839)*x186))+(((-1.429443141481)*gclwh1_3*x76))+(((-1.0)*x486))+(((-1.0)*gclwh4_11*x83))+(((-2.832113302962)*gclwh14_3*x103))+(((2.832113302962)*gclwh4_3*x82))+(((1.402670161481)*gclwh14_3*x76))+(((-1.0)*x465))+(((2.832113302962)*gclwh1_3*x103))+(((2.832113302962)*gclwh3_3*x78))+(((-1.0)*gclwh12_11*x71))+x485+x458+(((-1.402670161481)*gclwh12_3*x71))+((gclwh14_11*x76))+((gclwh1_3*x172))+(((-1.429443141481)*gclwh3_3*x71))+(((-0.0189560282044839)*x123))+((gclwh14_3*x172))+(((2.832113302962)*gclwh12_3*x78))+(((-1.402670161481)*pp*x75)));
op[14]=((-0.147786722962)+(((-1.0)*x479))+x472);
op[15]=((((-2.448)*gclwh12_8*x78))+(((2.2892)*gclwh4_2*x82))+(((-1.0)*gclwh12_2*x162))+(((0.01638506376)*x205))+(((-1.1446)*gclwh4_2*x83))+(((-1.0)*gclwh8_2*x80))+(((-1.0)*gclwh4_2*x115))+(((-0.01638506376)*x85))+(((1.1446)*gclwh14_2*x76))+((gclwh14_2*x116))+(((-1.0)*x473))+(((-2.448)*gclwh4_8*x82))+(((-1.0)*gclwh10_2*x90))+(((1.224)*gclwh4_8*x83))+x463+(((2.2892)*gclwh1_2*x103))+(((2.448)*gclwh14_8*x103))+(((-1.1446)*gclwh12_2*x71))+(((2.2892)*gclwh3_2*x78))+((gclwh1_2*x116))+(((2.2892)*gclwh12_2*x78))+(((-1.224)*gclwh14_8*x76))+(((-1.0)*x176*x91))+(((1.224)*gclwh12_8*x71))+((gclwh3_2*x162))+((gclwh6_2*x153))+(((-1.1446)*gclwh3_2*x71))+(((0.01638506376)*x110))+(((-1.1446)*gclwh1_2*x76)));
op[16]=(((gclwh8_12*x137))+(((0.0397)*gclwh12_8*x71))+(((-0.0794)*gclwh12_8*x78))+(((0.0794)*gclwh14_8*x103))+((gclwh10_12*x129))+(((-1.0)*x474))+(((0.000531443653)*x205))+(((0.000531443653)*x110))+x455+x464+(((-0.0397)*gclwh14_8*x76))+(((-1.0)*x242))+(((-0.000531443653)*x85))+(((-0.0794)*gclwh4_8*x82))+(((-0.00918658)*x191))+(((0.0397)*gclwh4_8*x83)));
op[17]=((0.028452741481)+(((-0.028452741481)*gclwh1_3*x76))+(((-0.000201684224787892)*x123))+(((-1.0)*x486))+(((0.000201684224787892)*x186))+((gclwh12_11*x71))+(((0.030132502962)*gclwh12_3*x78))+((gclwh4_11*x83))+(((-0.030132502962)*gclwh14_3*x103))+(((-1.0)*x458))+(((-0.001679761481)*gclwh12_3*x71))+x485+x465+(((0.030132502962)*gclwh3_3*x78))+(((0.001679761481)*gclwh14_3*x76))+((gclwh1_3*x97))+((gclwh14_3*x97))+(((-0.028452741481)*gclwh3_3*x71))+(((-0.001679761481)*pp*x75))+(((-0.000201684224787892)*x75))+(((-1.0)*gclwh14_11*x76))+(((0.030132502962)*gclwh4_3*x82))+(((0.030132502962)*gclwh1_3*x103)));
op[18]=((1.429443141481)+(((-1.0)*gclwh13_10*x71))+(((-1.402670161481)*gclwh15_1*x76))+(((0.0189560282044839)*x188))+(((-0.0189560282044839)*x84))+(((0.0189560282044839)*x177))+(((-1.0)*gclwh5_10*x83))+(((-1.0)*x484))+(((1.402670161481)*gclwh5_1*x83))+(((2.832113302962)*gclwh15_1*x103))+(((-1.429443141481)*gclwh2_1*x71))+(((2.832113302962)*gclwh2_1*x78))+(((-1.0)*x466))+(((-1.429443141481)*gclwh0_1*x76))+x487+x459+(((2.832113302962)*gclwh0_1*x103))+(((-2.832113302962)*gclwh13_1*x78))+(((1.402670161481)*gclwh13_1*x71))+((gclwh15_10*x76))+((gclwh0_1*x172))+(((0.0189560282044839)*x99))+(((-2.832113302962)*gclwh5_1*x82)));
op[19]=((((1.1843)*gclwh13_9*x71))+(((-0.015853620107)*x124))+(((2.3686)*gclwh15_9*x103))+(((-1.1843)*gclwh15_9*x76))+((gclwh5_9*x138))+(((0.015853620107)*x86))+(((1.1843)*gclwh5_9*x83))+(((-1.0)*x469))+(((-1.0)*gclwh11_13*x87))+(((-2.3686)*gclwh5_9*x82))+(((-1.0)*gclwh9_13*x181))+(((0.27404702)*x152))+(((-1.0)*x451))+x262+x461+(((-2.3686)*gclwh13_9*x78)));
op[20]=((((-1.1446)*gclwh0_0*x76))+((gclwh0_0*x116))+(((1.224)*gclwh5_9*x83))+((gclwh13_0*x162))+((gclwh2_0*x162))+(((0.01638506376)*x149))+(((1.224)*gclwh13_9*x71))+(((-2.448)*gclwh13_9*x78))+(((2.2892)*gclwh2_0*x78))+(((-0.01638506376)*x124))+(((-2.448)*gclwh5_9*x82))+(((-1.0)*gclwh15_0*x116))+(((0.01638506376)*x86))+(((-0.655764)*gclwh15_15*x103))+(((-1.224)*gclwh15_9*x76))+(((2.2892)*gclwh15_0*x103))+(((-1.1446)*gclwh2_0*x71))+(((1.1446)*gclwh13_0*x71))+((x104*x76))+(((2.2892)*gclwh0_0*x103))+(((-1.0)*gclwh13_15*x179))+(((1.1446)*gclwh5_0*x83))+(((-1.0)*gclwh7_0*x153))+((gclwh11_0*x90))+(((-2.2892)*gclwh13_0*x78))+(((-1.1446)*gclwh15_0*x76))+(((0.655764)*gclwh5_15*x82))+(((2.448)*gclwh15_9*x103))+(((-1.0)*x198*x71))+((gclwh15_15*x195))+(((0.655764)*gclwh13_15*x78))+((gclwh9_0*x80))+(((-1.0)*gclwh5_15*x189))+(((-2.2892)*gclwh5_0*x82))+((gclwh5_0*x115))+(((-1.0)*x182*x83)));
op[21]=((-0.147786722962)+(((-4.0)*gclwh5_10*x82))+((gclwh5_10*x88))+((gclwh11_10*x196))+((x190*x83))+((gclwh9_10*x170))+(((-1.0)*x192*x76))+(((-4.0)*gclwh13_10*x78))+((gclwh13_10*x126))+(((4.0)*gclwh15_10*x103))+(((-1.0)*gclwh7_10*x151))+(((-1.0)*gclwh15_10*x121))+((x201*x71)));
op[22]=((-0.028452741481)+(((-0.030132502962)*gclwh5_1*x82))+((gclwh5_10*x83))+(((0.000201684224787892)*x177))+(((-1.0)*x484))+((gclwh13_10*x71))+(((0.000201684224787892)*x188))+((gclwh0_1*x97))+(((0.000201684224787892)*x99))+(((-1.0)*x459))+(((0.030132502962)*gclwh2_1*x78))+(((-0.001679761481)*gclwh15_1*x76))+x487+x466+(((0.030132502962)*gclwh15_1*x103))+(((-0.028452741481)*gclwh0_1*x76))+(((-0.000201684224787892)*x84))+(((-0.028452741481)*gclwh2_1*x71))+(((0.001679761481)*gclwh13_1*x71))+(((0.001679761481)*gclwh5_1*x83))+(((0.030132502962)*gclwh0_1*x103))+(((-1.0)*gclwh15_10*x76))+(((-0.030132502962)*gclwh13_1*x78)));
op[23]=((((-1.0)*gclwh11_13*x129))+(((-0.000531443653)*x149))+(((0.000531443653)*x124))+(((-0.0794)*gclwh15_9*x103))+(((0.00918658)*x152))+(((-0.0397)*gclwh13_9*x71))+(((-1.0)*x461))+(((0.0794)*gclwh5_9*x82))+(((-1.0)*x451))+x262+x469+(((-1.0)*gclwh9_13*x137))+(((0.0794)*gclwh13_9*x78))+(((-0.000531443653)*x86))+(((0.0397)*gclwh15_9*x76))+(((-0.0397)*gclwh5_9*x83)));
op[24]=((-0.7766213052)+(((-1.0)*x475))+x478);
op[25]=(((gclwh8_2*x173))+(((-0.031707240214)*x111))+(((2.3686)*gclwh10_2*x83))+(((-1.0)*x452))+x271+(((4.7372)*gclwh6_2*x78))+(((-1.0)*x156*x98))+(((-2.3686)*gclwh6_2*x71))+((gclwh14_2*x160))+(((2.3686)*gclwh8_2*x76))+(((-4.7372)*gclwh10_2*x82))+(((-0.54809404)*x148))+(((-0.54809404)*x145))+((gclwh10_2*x114)));
op[26]=((((2.2892)*gclwh8_12*x76))+(((0.030644352908)*x168))+(((2.2892)*gclwh10_12*x83))+(((-0.030644352908)*x122))+(((0.1517437896)*x180))+(((-1.0)*gclwh12_14*x113))+(((-4.5784)*gclwh8_12*x103))+(((-4.5784)*gclwh10_12*x82))+(((-0.1517437896)*x108))+((gclwh8_12*x142))+(((-2.2892)*gclwh6_12*x71))+(((4.5784)*gclwh6_12*x78)));
op[27]=((((-1.0)*gclwh8_11*x125))+((gclwh4_11*x106))+(((-0.9256)*x112))+((x197*x71))+(((-1.0)*gclwh10_11*x157))+((gclwh12_11*x200))+(((8.0)*gclwh10_11*x82))+(((-1.0)*x133*x76))+(((-8.0)*gclwh6_11*x78))+(((-1.0)*x185*x83))+(((8.0)*gclwh8_11*x103))+((gclwh6_11*x155)));
op[28]=((-0.0260338308)+(((-1.0)*x478))+x475);
op[29]=((((0.0794)*gclwh10_2*x83))+(((0.0794)*gclwh8_2*x76))+(((0.1588)*gclwh6_2*x78))+(((-0.01837316)*x148))+(((-0.01837316)*x145))+(((-0.0794)*gclwh6_2*x71))+x452+(((-0.1588)*gclwh10_2*x82))+(((-1.0)*x271))+(((0.001062887306)*gclwh8_2*r20))+(((-0.1588)*gclwh8_2*x103))+(((-0.001062887306)*x111))+((gclwh14_2*x199))+((gclwh10_2*x117)));
op[30]=((((-0.54809404)*x109))+(((-1.0)*gclwh7_0*x131))+(((2.3686)*gclwh11_0*x83))+(((-4.7372)*gclwh11_0*x82))+(((-0.54809404)*x128))+(((-2.3686)*gclwh7_0*x71))+((gclwh11_0*x114))+(((2.3686)*gclwh9_0*x76))+(((-1.0)*x74*x98))+((gclwh15_0*x160))+x453+(((-1.0)*x279))+(((4.7372)*gclwh7_0*x78))+(((0.031707240214)*x163)));
op[31]=((-0.7766213052)+(((-1.0)*x476))+x477);
op[32]=(((x135*x83))+((x158*x76))+(((-8.0)*gclwh9_10*x103))+((gclwh11_10*x157))+(((-1.0)*gclwh13_10*x200))+(((8.0)*gclwh7_10*x78))+(((-1.0)*gclwh7_10*x155))+(((-1.0)*x165*x71))+(((-8.0)*gclwh11_10*x82))+(((0.9256)*gclwh15_10*rxp0_2))+((gclwh9_10*x125))+(((-1.0)*gclwh5_10*x106)));
op[33]=((((-1.0)*gclwh13_15*x113))+(((-0.1517437896)*x94))+(((0.030644352908)*x101))+(((-0.030644352908)*x139))+(((2.2892)*gclwh9_13*x76))+(((0.1517437896)*x164))+(((-4.5784)*gclwh11_13*x82))+((gclwh9_13*x142))+(((-4.5784)*gclwh9_13*x103))+(((-2.2892)*gclwh7_13*x71))+(((2.2892)*gclwh11_13*x83))+(((4.5784)*gclwh7_13*x78)));
op[34]=((((-0.01837316)*x109))+(((-0.0794)*gclwh7_0*x71))+(((-0.001062887306)*gclwh7_0*r21))+(((-0.1588)*npx*x74))+(((0.0794)*gclwh9_0*x76))+(((-0.1588)*gclwh11_0*x82))+((gclwh11_0*x117))+((gclwh15_0*x199))+(((0.0794)*gclwh11_0*x83))+(((-1.0)*x453))+x279+(((0.1588)*gclwh7_0*x78))+(((0.001062887306)*x163))+(((-0.01837316)*x128)));
op[35]=((-0.0260338308)+(((-1.0)*x477))+x476);
op[36]=((2.751379677038)+(((-1.0)*x479))+x472);
op[37]=((((4.7372)*gclwh12_2*x78))+(((4.7372)*gclwh4_2*x82))+((gclwh1_2*x173))+(((-2.3686)*gclwh1_2*x76))+((gclwh3_2*x131))+(((-1.0)*gclwh4_2*x114))+(((-1.0)*gclwh12_2*x131))+(((-1.0)*x91*x98))+(((-1.0)*x473))+(((-2.3686)*gclwh4_2*x83))+(((0.54809404)*x154))+((x140*x98))+x463+(((4.7372)*gclwh3_2*x78))+(((2.3686)*gclwh14_2*x76))+(((-2.3686)*gclwh3_2*x71))+((gclwh14_2*x173))+(((-2.3686)*gclwh12_2*x71))+(((-0.54809404)*gclwh10_2*rxp2_2))+(((-1.0)*gclwh8_2*x160)));
IkReal x488=pz*pz;
IkReal x489=pp*pp;
IkReal x490=((0.2314)*pz);
IkReal x491=(pp*r21);
IkReal x492=((0.2314)*rxp0_2);
IkReal x493=((0.01338649)*r22);
IkReal x494=(gclwh9_0*pz);
IkReal x495=(gclwh4_3*r22);
IkReal x496=(pp*r20);
IkReal x497=((0.327882)*gclwh14_14);
IkReal x498=(npy*pz);
IkReal x499=((0.655764)*gclwh12_14);
IkReal x500=((0.01338649)*r21);
IkReal x501=((4.0)*gclwh12_11);
IkReal x502=((0.26486044)*rxp0_2);
IkReal x503=((0.01837316)*rxp1_2);
IkReal x504=((0.00219459455709)*r21);
IkReal x505=(npz*pz);
IkReal x506=(gclwh15_1*r20);
IkReal x507=(gclwh14_8*r20);
IkReal x508=(gclwh13_9*r21);
IkReal x509=(pp*r22);
IkReal x510=((0.27404702)*rxp2_2);
IkReal x511=(npx*pz);
IkReal x512=((0.02677298)*r22);
IkReal x513=((2.0)*gclwh11_10);
IkReal x514=((0.26486044)*rxp2_2);
IkReal x515=(gclwh14_2*pz);
IkReal x516=(gclwh11_0*pz);
IkReal x517=((0.001062887306)*r20);
IkReal x518=((0.0379359474)*rxp1_2);
IkReal x519=((0.00219459455709)*r20);
IkReal x520=((2.0)*gclwh4_11);
IkReal x521=((0.000201684224787892)*r20);
IkReal x522=(gclwh13_1*r21);
IkReal x523=((0.2314)*rxp2_2);
IkReal x524=(gclwh11_13*r22);
IkReal x525=((0.01338649)*r20);
IkReal x526=((0.327882)*gclwh15_15);
IkReal x527=(gclwh12_8*r21);
IkReal x528=((0.655764)*gclwh14_14);
IkReal x529=(gclwh2_0*pz);
IkReal x530=((0.655764)*gclwh5_15);
IkReal x531=((0.015322176454)*r22);
IkReal x532=(gclwh15_0*r20);
IkReal x533=((2.0)*gclwh9_10);
IkReal x534=(gclwh12_3*rxp1_2);
IkReal x535=((2.0)*gclwh15_10);
IkReal x536=(gclwh15_10*r20);
IkReal x537=((4.0)*gclwh14_11);
IkReal x538=(gclwh12_3*r21);
IkReal x539=((0.655764)*gclwh15_15);
IkReal x540=((0.02677298)*r21);
IkReal x541=((0.0379359474)*rxp0_2);
IkReal x542=(gclwh11_13*rxp2_2);
IkReal x543=((0.05354596)*r22);
IkReal x544=(gclwh4_3*rxp2_2);
IkReal x545=(gclwh12_14*r21);
IkReal x546=((2.0)*gclwh10_11);
IkReal x547=((2.0)*pp);
IkReal x548=(gclwh13_9*rxp1_2);
IkReal x549=((0.0758718948)*rxp2_2);
IkReal x550=(gclwh14_8*rxp0_2);
IkReal x551=((0.015853620107)*r22);
IkReal x552=((0.001062887306)*r22);
IkReal x553=(gclwh7_13*r21);
IkReal x554=(gclwh1_2*pz);
IkReal x555=((2.0)*gclwh7_10);
IkReal x556=((1.0)*pz);
IkReal x557=((0.2314)*rxp1_2);
IkReal x558=(gclwh13_0*pz);
IkReal x559=((4.0)*gclwh15_10);
IkReal x560=(gclwh5_1*rxp2_2);
IkReal x561=(gclwh12_2*pz);
IkReal x562=(gclwh15_0*pz);
IkReal x563=((0.9256)*rxp0_2);
IkReal x564=(gclwh15_9*rxp0_2);
IkReal x565=((0.0189560282044839)*r21);
IkReal x566=(gclwh5_9*r22);
IkReal x567=(gclwh12_8*rxp1_2);
IkReal x568=((0.4628)*rxp1_2);
IkReal x569=(gclwh7_13*rxp1_2);
IkReal x570=((0.327882)*gclwh5_15);
IkReal x571=((0.26486044)*rxp1_2);
IkReal x572=(gclwh6_2*pz);
IkReal x573=(gclwh8_2*pz);
IkReal x574=(gclwh5_0*pz);
IkReal x575=((0.015322176454)*r20);
IkReal x576=(gclwh4_2*pz);
IkReal x577=(gclwh6_12*r21);
IkReal x578=(gclwh11_0*rxp2_2);
IkReal x579=((0.00918658)*rxp2_2);
IkReal x580=(gclwh13_0*r21);
IkReal x581=((0.0758718948)*rxp0_2);
IkReal x582=(gclwh10_2*pz);
IkReal x583=((0.001062887306)*r21);
IkReal x584=((0.015322176454)*r21);
IkReal x585=(gclwh10_11*rxp2_2);
IkReal x586=((0.327882)*gclwh12_14);
IkReal x587=((4.0)*gclwh4_11);
IkReal x588=(gclwh13_1*rxp1_2);
IkReal x589=((0.327675509152703)*rxp0_2);
IkReal x590=((0.4628)*rxp0_2);
IkReal x591=((0.0189560282044839)*r20);
IkReal x592=(gclwh8_12*r20);
IkReal x593=((2.0)*gclwh6_11);
IkReal x594=(gclwh8_12*rxp0_2);
IkReal x595=((2.0)*gclwh12_11);
IkReal x596=((0.9256)*rxp1_2);
IkReal x597=(gclwh9_13*rxp0_2);
IkReal x598=((0.0379359474)*rxp2_2);
IkReal x599=(gclwh5_15*r22);
IkReal x600=((0.05354596)*r21);
IkReal x601=((0.655764)*gclwh13_15);
IkReal x602=(gclwh13_15*r21);
IkReal x603=((0.02677298)*r20);
IkReal x604=((2.0)*gclwh8_11);
IkReal x605=((0.000201684224787892)*r21);
IkReal x606=((0.000531443653)*r20);
IkReal x607=((4.0)*gclwh5_10);
IkReal x608=(gclwh5_1*r22);
IkReal x609=((2.0)*gclwh5_10);
IkReal x610=(gclwh6_12*rxp1_2);
IkReal x611=((0.2832336)*rxp2_2);
IkReal x612=((4.0)*gclwh13_10);
IkReal x613=((0.0758718948)*rxp1_2);
IkReal x614=((0.327882)*gclwh4_14);
IkReal x615=((0.00438918911418)*r20);
IkReal x616=((0.4628)*rxp2_2);
IkReal x617=((0.000531443653)*r22);
IkReal x618=((0.327882)*gclwh13_15);
IkReal x619=((2.0)*gclwh13_10);
IkReal x620=(gclwh4_14*r22);
IkReal x621=(gclwh15_9*r20);
IkReal x622=((0.0034863305927034)*rxp0_2);
IkReal x623=((0.00219459455709)*r22);
IkReal x624=((0.655764)*gclwh4_14);
IkReal x625=(gclwh7_0*pz);
IkReal x626=((0.00877837822836)*r20);
IkReal x627=((0.01837316)*rxp0_2);
IkReal x628=(gclwh4_8*r22);
IkReal x629=((0.02677298)*rxp2_2);
IkReal x630=((2.0)*gclwh14_11);
IkReal x631=((0.00438918911418)*x602);
IkReal x632=((0.00438918911418)*x599);
IkReal x633=(gclwh15_15*x615);
IkReal x634=((0.02677298)*x536);
IkReal x635=(gclwh7_10*x568);
IkReal x636=(gclwh11_10*x616);
IkReal x637=(gclwh9_10*x590);
IkReal x638=(gclwh13_10*x540);
IkReal x639=(gclwh5_10*x512);
IkReal x640=(gclwh12_14*x518);
IkReal x641=(gclwh6_5*x504);
IkReal x642=(gclwh4_14*x598);
IkReal x643=(gclwh10_5*x623);
IkReal x644=(gclwh14_14*x541);
IkReal x645=(gclwh8_5*x519);
IkReal x646=(gclwh14_11*x492);
IkReal x647=(gclwh10_11*x493);
IkReal x648=(gclwh4_8*x629);
IkReal x649=(gclwh8_11*x525);
IkReal x650=((0.02677298)*x567);
IkReal x651=(gclwh4_11*x523);
IkReal x652=(gclwh12_11*x557);
IkReal x653=(gclwh6_11*x500);
IkReal x654=((0.02677298)*x550);
IkReal x655=(gclwh5_10*x523);
IkReal x656=(gclwh13_10*x557);
IkReal x657=((0.02677298)*x548);
IkReal x658=(gclwh5_9*x629);
IkReal x659=(gclwh7_10*x500);
IkReal x660=(gclwh11_10*x493);
IkReal x661=(gclwh9_10*x525);
IkReal x662=(gclwh15_10*x492);
IkReal x663=((0.02677298)*x564);
IkReal x664=(gclwh5_15*x598);
IkReal x665=(gclwh13_15*x518);
IkReal x666=(gclwh7_7*x504);
IkReal x667=(gclwh9_7*x519);
IkReal x668=(gclwh11_7*x623);
IkReal x669=(gclwh15_15*x541);
IkReal x670=(gclwh4_11*x512);
IkReal x671=((0.4628)*x585);
IkReal x672=(gclwh8_11*x590);
IkReal x673=(gclwh12_11*x540);
IkReal x674=((0.00438918911418)*x620);
IkReal x675=((0.00438918911418)*x545);
IkReal x676=(gclwh14_14*x615);
IkReal x677=(gclwh8_5*x541);
IkReal x678=((0.00219459455709)*x620);
IkReal x679=(gclwh12_14*x504);
IkReal x680=(gclwh10_5*x598);
IkReal x681=(gclwh14_14*x519);
IkReal x682=(gclwh6_5*x518);
IkReal x683=(gclwh14_11*x525);
IkReal x684=((0.001548816893)*x527);
IkReal x685=(gclwh6_11*x557);
IkReal x686=((0.001548816893)*x628);
IkReal x687=(gclwh4_11*x493);
IkReal x688=(gclwh12_11*x500);
IkReal x689=(gclwh8_11*x492);
IkReal x690=(gclwh10_11*x523);
IkReal x691=((0.001548816893)*x507);
IkReal x692=((0.001548816893)*x621);
IkReal x693=(gclwh7_10*x557);
IkReal x694=(gclwh15_10*x525);
IkReal x695=((0.001548816893)*x566);
IkReal x696=(gclwh5_10*x493);
IkReal x697=((0.001548816893)*x508);
IkReal x698=(gclwh9_10*x492);
IkReal x699=(gclwh11_10*x523);
IkReal x700=(gclwh13_10*x500);
IkReal x701=(gclwh7_7*x518);
IkReal x702=(gclwh15_15*x519);
IkReal x703=(gclwh9_7*x541);
IkReal x704=(gclwh11_7*x598);
IkReal x705=((0.00219459455709)*x599);
IkReal x706=(gclwh13_15*x504);
IkReal x707=(pp*x557);
IkReal x708=((2.0)*x488);
IkReal x709=((1.0)*x489);
IkReal x710=(r20*x489);
IkReal x711=(r21*x489);
IkReal x712=(x511*x539);
IkReal x713=(x509*x570);
IkReal x714=(x491*x618);
IkReal x715=(x496*x526);
IkReal x716=(x505*x530);
IkReal x717=(x498*x601);
IkReal x718=(x496*x535);
IkReal x719=(x505*x607);
IkReal x720=(x498*x612);
IkReal x721=(x491*x619);
IkReal x722=(x511*x559);
IkReal x723=(x509*x609);
IkReal x724=((0.163941)*gclwh6_5*x491);
IkReal x725=((0.327882)*gclwh10_5*x505);
IkReal x726=((0.327882)*gclwh8_5*x511);
IkReal x727=((0.163941)*gclwh10_5*x509);
IkReal x728=((0.327882)*gclwh6_5*x498);
IkReal x729=((0.163941)*gclwh8_5*x496);
IkReal x730=(gclwh14_2*rxp0_2*x490);
IkReal x731=((0.2314)*pp*x534);
IkReal x732=(x493*x582);
IkReal x733=(x498*x593);
IkReal x734=(x509*x582);
IkReal x735=(gclwh4_3*pp*x523);
IkReal x736=(x496*x573);
IkReal x737=(x525*x573);
IkReal x738=(x505*x546);
IkReal x739=(gclwh14_3*pp*x492);
IkReal x740=(gclwh4_2*rxp2_2*x490);
IkReal x741=(gclwh12_2*rxp1_2*x490);
IkReal x742=(x511*x604);
IkReal x743=(x500*x572);
IkReal x744=(x493*x516);
IkReal x745=(gclwh13_1*x707);
IkReal x746=(x505*x513);
IkReal x747=(x511*x533);
IkReal x748=(gclwh15_0*rxp0_2*x490);
IkReal x749=(gclwh5_1*pp*x523);
IkReal x750=(x494*x525);
IkReal x751=(x509*x516);
IkReal x752=(x494*x496);
IkReal x753=(x500*x625);
IkReal x754=(gclwh13_0*rxp1_2*x490);
IkReal x755=(gclwh15_1*pp*x492);
IkReal x756=(gclwh5_0*rxp2_2*x490);
IkReal x757=(x498*x555);
IkReal x758=((0.327882)*gclwh11_7*x505);
IkReal x759=((0.163941)*gclwh7_7*x491);
IkReal x760=((0.327882)*gclwh9_7*x511);
IkReal x761=((0.163941)*gclwh11_7*x509);
IkReal x762=((0.327882)*gclwh7_7*x498);
IkReal x763=((0.163941)*gclwh9_7*x496);
IkReal x764=(x509*x520);
IkReal x765=(x491*x595);
IkReal x766=(x511*x537);
IkReal x767=(x511*x528);
IkReal x768=(x491*x586);
IkReal x769=(x509*x614);
IkReal x770=(x496*x497);
IkReal x771=(x498*x499);
IkReal x772=(x505*x624);
IkReal x773=((0.163941)*gclwh12_14*x491);
IkReal x774=((0.163941)*gclwh4_14*x509);
IkReal x775=(x497*x511);
IkReal x776=((0.163941)*gclwh14_14*x496);
IkReal x777=(x498*x586);
IkReal x778=(x505*x614);
IkReal x779=(x496*x515);
IkReal x780=((0.1157)*gclwh4_8*x509);
IkReal x781=(gclwh6_2*rxp1_2*x490);
IkReal x782=(x489*x538);
IkReal x783=(x525*x554);
IkReal x784=((0.1157)*gclwh12_8*x491);
IkReal x785=(x505*x520);
IkReal x786=(x515*x525);
IkReal x787=(gclwh14_8*npx*x490);
IkReal x788=(gclwh3_3*x711);
IkReal x789=(gclwh1_3*x710);
IkReal x790=(gclwh3_2*pz*x500);
IkReal x791=(x489*x495);
IkReal x792=(x498*x595);
IkReal x793=(x500*x561);
IkReal x794=(gclwh12_8*npy*x490);
IkReal x795=(gclwh10_2*rxp2_2*x490);
IkReal x796=(x511*x630);
IkReal x797=(x493*x576);
IkReal x798=(gclwh4_8*npz*x490);
IkReal x799=((0.1157)*gclwh14_8*x496);
IkReal x800=(gclwh8_2*rxp0_2*x490);
IkReal x801=(x500*x529);
IkReal x802=(x489*x506);
IkReal x803=(x490*x578);
IkReal x804=(x509*x574);
IkReal x805=(x491*x558);
IkReal x806=(gclwh0_0*pz*x525);
IkReal x807=(gclwh5_9*npz*x490);
IkReal x808=(x493*x574);
IkReal x809=(x500*x558);
IkReal x810=(gclwh13_9*npy*x490);
IkReal x811=((0.1157)*gclwh15_9*x496);
IkReal x812=(gclwh9_0*rxp0_2*x490);
IkReal x813=(gclwh2_1*x711);
IkReal x814=(x505*x609);
IkReal x815=(x498*x619);
IkReal x816=(gclwh0_1*x710);
IkReal x817=((0.1157)*gclwh5_9*x509);
IkReal x818=(x511*x535);
IkReal x819=((0.1157)*gclwh13_9*x491);
IkReal x820=(gclwh7_0*rxp1_2*x490);
IkReal x821=(gclwh15_9*npx*x490);
IkReal x822=(x525*x562);
IkReal x823=(x498*x618);
IkReal x824=((0.163941)*gclwh15_15*x496);
IkReal x825=(x505*x570);
IkReal x826=((0.163941)*gclwh13_15*x491);
IkReal x827=((0.163941)*gclwh5_15*x509);
IkReal x828=(x511*x526);
IkReal x829=(gclwh6_2*npy*x708);
IkReal x830=(gclwh6_2*x491*x556);
IkReal x831=(gclwh10_2*npz*x708);
IkReal x832=(gclwh8_2*npx*x708);
IkReal x833=(gclwh7_0*npy*x708);
IkReal x834=(gclwh9_0*npx*x708);
IkReal x835=(gclwh11_0*npz*x708);
IkReal x836=(gclwh7_0*x491*x556);
IkReal x837=(gclwh12_2*npy*x708);
IkReal x838=(gclwh3_2*npy*x708);
IkReal x839=(gclwh1_2*npx*x708);
IkReal x840=(gclwh14_3*x511*x547);
IkReal x841=(gclwh4_2*npz*x708);
IkReal x842=(gclwh4_3*x505*x547);
IkReal x843=(gclwh12_2*x491*x556);
IkReal x844=((1.0)*x496*x554);
IkReal x845=(gclwh3_3*x498*x547);
IkReal x846=(gclwh4_2*x509*x556);
IkReal x847=(gclwh1_3*x511*x547);
IkReal x848=(gclwh3_2*x491*x556);
IkReal x849=(gclwh12_3*x498*x547);
IkReal x850=(gclwh14_2*npx*x708);
IkReal x851=(gclwh14_3*r20*x709);
IkReal x852=(gclwh0_0*npx*x708);
IkReal x853=(gclwh2_0*npy*x708);
IkReal x854=(gclwh5_1*x505*x547);
IkReal x855=(gclwh13_1*x498*x547);
IkReal x856=(gclwh15_0*npx*x708);
IkReal x857=(gclwh2_1*x498*x547);
IkReal x858=(gclwh0_1*x511*x547);
IkReal x859=(gclwh5_0*npz*x708);
IkReal x860=(gclwh13_0*npy*x708);
IkReal x861=(gclwh0_0*x496*x556);
IkReal x862=(gclwh15_0*x496*x556);
IkReal x863=((1.0)*x491*x529);
IkReal x864=(x522*x709);
IkReal x865=(x608*x709);
IkReal x866=(gclwh15_1*x511*x547);
IkReal x867=(x665+x664);
IkReal x868=(x703+x704);
IkReal x869=(x642+x640);
IkReal x870=(x677+x680);
IkReal x871=(x661+x660+x662+x757);
IkReal x872=(x647+x646+x649+x733);
IkReal x873=(x683+x685+x792+x785);
IkReal x874=(x694+x693+x814+x815);
IkReal x875=(x666+x759+x758+x760);
IkReal x876=(x633+x715+x717+x716);
IkReal x877=(x702+x823+x825+x824);
IkReal x878=(x681+x777+x776+x778);
IkReal x879=(x676+x772+x771+x770);
IkReal x880=(x641+x724+x725+x726);
IkReal x881=(x689+x688+x687+x690+x796);
IkReal x882=(x696+x698+x699+x700+x818);
IkReal x883=(x655+x656+x659+x746+x747);
IkReal x884=(x651+x652+x653+x738+x742);
IkReal x885=(((x505*x587))+((gclwh6_11*x568))+((x498*x501))+((x496*x630))+((gclwh14_11*x603)));
IkReal x886=(x668+x667+x761+x762+x763);
IkReal x887=(x632+x631+x713+x712+x714);
IkReal x888=(x706+x705+x828+x827+x826);
IkReal x889=(x645+x643+x727+x728+x729);
IkReal x890=(x674+x675+x768+x769+x767);
IkReal x891=(x634+x635+x719+x718+x720);
IkReal x892=(x678+x679+x773+x775+x774);
IkReal x893=(x636+x637+x638+x639+x721+x722+x723);
IkReal x894=(x672+x673+x670+x671+x764+x765+x766);
IkReal x895=(x663+x755+x754+x756+x753+x834+x835+x836);
IkReal x896=(x654+x739+x743+x740+x741+x830+x831+x832);
IkReal x897=(x657+x658+x751+x750+x752+x744+x745+x748+x749+x833);
IkReal x898=(x648+x650+x737+x736+x735+x734+x732+x731+x730+x829);
IkReal x899=(x695+x697+x857+x858+x859+x866+x865+x864+x863+x862+x861+x860+x819+x817+x822+x821+x820);
IkReal x900=(x490+x686+x684+x779+x791+x790+x782+x783+x780+x781+x786+x787+x784+x788+x789+x837+x838+x839+x841+x840);
IkReal x901=(x691+x793+x795+x794+x797+x799+x798+x850+x851+x843+x842+x845+x844+x847+x846+x849+x848+x800);
IkReal x902=(x490+x692+x852+x853+x856+x854+x855+x816+x812+x813+x810+x811+x809+x808+x805+x804+x807+x806+x801+x803+x802);
op[38]=((((1.311528)*gclwh4_14*x505))+(((0.52972088)*x610))+(((1.311528)*gclwh12_14*x498))+(((-0.00877837822836)*x620))+(((-1.0)*x491*x499))+(((-0.52972088)*x594))+((x496*x528))+(((-0.52972088)*gclwh10_12*rxp2_2))+((gclwh14_14*x626))+(((-1.0)*x509*x624))+(((-0.00877837822836)*x545))+(((-1.311528)*gclwh14_14*x511)));
op[39]=((-0.080560234076)+((x509*x587))+(((8.0)*gclwh14_11*x511))+(((-0.05354596)*gclwh14_11*r20))+((gclwh12_11*x600))+(((-8.0)*gclwh12_11*x498))+(((-1.0)*gclwh6_11*x596))+((x491*x501))+(((-8.0)*gclwh4_11*x505))+((gclwh8_11*x563))+((gclwh4_11*x543))+(((-1.0)*x496*x537))+(((0.9256)*x585)));
op[40]=((0.050601122962)+(((-1.0)*x885))+x894);
op[41]=((((-0.0794)*gclwh1_2*x496))+(((0.1588)*gclwh12_2*x498))+(((0.0794)*gclwh14_2*x496))+(((-1.0)*gclwh8_2*x627))+(((-0.0794)*gclwh4_2*x509))+(((0.1588)*gclwh4_2*x505))+(((-0.0794)*gclwh3_2*x491))+((gclwh6_2*x503))+(((-1.0)*gclwh12_2*x583))+((gclwh14_2*x517))+((gclwh1_2*x517))+(((0.1588)*gclwh3_2*x498))+(((-0.01837316)*gclwh10_2*rxp2_2))+(((-1.0)*gclwh4_2*x552))+(((0.1588)*gclwh1_2*x511))+x890+(((-0.0794)*gclwh12_2*x491))+((gclwh3_2*x583))+(((-0.1588)*gclwh14_2*x511))+(((-1.0)*x879)));
op[42]=((((0.54809404)*x578))+(((4.7372)*gclwh15_0*x511))+(((0.031707240214)*gclwh0_0*r20))+(((-4.7372)*gclwh13_0*x498))+(((2.3686)*gclwh13_0*x491))+(((-2.3686)*gclwh0_0*x496))+(((-2.3686)*gclwh15_0*x496))+(((2.3686)*gclwh5_0*x509))+(((0.54809404)*gclwh9_0*rxp0_2))+(((0.031707240214)*x580))+(((-0.031707240214)*x532))+(((-1.0)*x887))+(((4.7372)*gclwh2_0*x498))+(((-4.7372)*gclwh5_0*x505))+(((4.7372)*gclwh0_0*x511))+(((-2.3686)*gclwh2_0*x491))+(((0.031707240214)*gclwh5_0*r22))+(((0.031707240214)*gclwh2_0*r21))+x876+(((-0.54809404)*gclwh7_0*rxp1_2)));
op[43]=((2.751379677038)+(((-1.0)*x891))+x893);
op[44]=((0.080560234076)+(((-0.05354596)*x536))+(((-8.0)*gclwh5_10*x505))+((x491*x612))+((gclwh5_10*x543))+((gclwh9_10*x563))+(((-1.0)*gclwh7_10*x596))+(((-1.0)*x496*x559))+((gclwh13_10*x600))+(((-8.0)*gclwh13_10*x498))+(((8.0)*gclwh15_10*x511))+((x509*x607))+(((0.9256)*gclwh11_10*rxp2_2)));
op[45]=((((-0.52972088)*x569))+(((0.00877837822836)*x599))+(((-1.311528)*gclwh13_15*x498))+(((-1.311528)*gclwh5_15*x505))+((x491*x601))+(((1.311528)*gclwh15_15*x511))+(((0.00877837822836)*x602))+(((0.52972088)*x597))+(((-1.0)*gclwh15_15*x626))+((x509*x530))+(((-1.0)*x496*x539))+(((0.52972088)*x542)));
op[46]=((((-0.1588)*gclwh13_0*x498))+(((0.001062887306)*x580))+(((-1.0)*gclwh15_0*x517))+((gclwh0_0*x517))+(((-0.0794)*gclwh15_0*x496))+(((0.0794)*gclwh13_0*x491))+(((-0.0794)*gclwh2_0*x491))+(((0.1588)*gclwh0_0*x511))+(((-1.0)*gclwh7_0*x503))+((gclwh2_0*x583))+((gclwh5_0*x552))+((gclwh9_0*x627))+(((0.1588)*gclwh2_0*x498))+(((0.01837316)*x578))+(((0.0794)*gclwh5_0*x509))+x887+(((-0.1588)*gclwh5_0*x505))+(((-0.0794)*gclwh0_0*x496))+(((0.1588)*gclwh15_0*x511))+(((-1.0)*x876)));
op[47]=((0.050601122962)+(((-1.0)*x893))+x891);
op[48]=((((1.1843)*gclwh10_12*x509))+(((-0.27404702)*x567))+(((-2.3686)*gclwh10_12*x505))+(((-1.0)*x869))+(((1.1843)*gclwh8_12*x496))+(((0.27404702)*x550))+((gclwh10_12*x551))+(((-1.0)*gclwh4_8*x510))+(((2.3686)*gclwh6_12*x498))+(((-1.0)*x889))+(((-1.1843)*gclwh6_12*x491))+x644+(((-0.015853620107)*x577))+x880+(((0.015853620107)*x592))+(((-2.3686)*gclwh8_12*x511)));
op[49]=((((-1.0)*gclwh10_11*x509))+(((-1.0)*x896))+(((-1.0)*gclwh8_11*x496))+((gclwh6_11*x491))+(((-0.327675509152703)*x534))+x884+x898+(((-0.327675509152703)*x544))+((gclwh14_3*x589))+(((-1.0)*x872)));
op[50]=((0.3752937372)+((x491*x593))+((gclwh6_11*x540))+(((-1.0)*gclwh10_11*x512))+(((-1.0)*x496*x604))+(((-4.0)*gclwh6_11*x498))+(((4.0)*gclwh10_11*x505))+((gclwh12_11*x568))+(((-1.0)*x509*x546))+(((-1.0)*gclwh8_11*x603))+((gclwh4_11*x616))+(((-1.0)*gclwh14_11*x590))+(((4.0)*gclwh8_11*x511)));
op[51]=((((1.1446)*gclwh6_2*x491))+(((-1.0)*gclwh14_2*x502))+(((-1.0)*gclwh14_14*x581))+(((-1.1446)*gclwh8_2*x496))+(((-1.0)*gclwh8_2*x575))+(((-1.0)*gclwh10_2*x531))+((gclwh4_8*x611))+(((-0.2832336)*x550))+(((-2.2892)*gclwh6_2*x498))+(((0.2832336)*x567))+((gclwh4_2*x514))+((gclwh4_14*x549))+(((2.2892)*gclwh8_2*x511))+((gclwh6_2*x584))+((gclwh12_14*x613))+((gclwh12_2*x571))+(((2.2892)*gclwh10_2*x505))+(((-1.1446)*gclwh10_2*x509)));
op[52]=((((0.00918658)*x567))+(((-0.0794)*gclwh8_12*x511))+(((-0.0397)*gclwh6_12*x491))+(((0.0397)*gclwh8_12*x496))+(((0.0397)*gclwh10_12*x509))+((gclwh4_8*x579))+(((-1.0)*x889))+(((-0.00918658)*x550))+(((-0.000531443653)*x577))+(((-1.0)*x644))+x869+x880+(((0.0794)*gclwh6_12*x498))+(((-0.0794)*gclwh10_12*x505))+(((0.000531443653)*x592))+((gclwh10_12*x617)));
op[53]=((((-1.0)*x896))+((gclwh10_11*x509))+(((-0.0034863305927034)*x544))+(((-1.0)*x884))+(((-0.0034863305927034)*x534))+x872+x898+(((-1.0)*gclwh6_11*x491))+((gclwh14_3*x622))+((gclwh8_11*x496)));
op[54]=(((gclwh11_10*x509))+((gclwh9_10*x496))+((gclwh15_1*x589))+(((-0.327675509152703)*x560))+(((-1.0)*x895))+(((-1.0)*x883))+(((-1.0)*gclwh7_10*x491))+x871+x897+(((-0.327675509152703)*x588)));
op[55]=((((2.3686)*gclwh7_13*x498))+(((-1.0)*x867))+(((-2.3686)*gclwh11_13*x505))+(((-1.0)*gclwh5_9*x510))+(((1.1843)*gclwh11_13*x509))+(((-0.27404702)*x548))+(((0.015853620107)*gclwh9_13*r20))+(((-0.015853620107)*x553))+(((-1.0)*x886))+(((-2.3686)*gclwh9_13*x511))+(((0.015853620107)*x524))+x669+(((-1.1843)*gclwh7_13*x491))+(((0.27404702)*x564))+x875+(((1.1843)*gclwh9_13*x496)));
op[56]=((((-1.0)*gclwh13_15*x613))+(((-2.2892)*gclwh7_0*x498))+((gclwh13_0*x571))+(((-1.0)*gclwh5_15*x549))+((gclwh5_0*x514))+(((-0.2832336)*x548))+(((2.2892)*gclwh11_0*x505))+(((-1.0)*gclwh9_0*x575))+(((0.2832336)*x564))+(((-1.1446)*gclwh11_0*x509))+(((2.2892)*npx*x494))+(((-1.0)*gclwh5_9*x611))+((gclwh15_15*x581))+(((-1.0)*gclwh11_0*x531))+((gclwh7_0*x584))+(((-1.1446)*gclwh9_0*x496))+(((-1.0)*gclwh15_0*x502))+(((1.1446)*gclwh7_0*x491)));
op[57]=((0.3752937372)+(((-1.0)*gclwh9_10*x603))+(((4.0)*gclwh11_10*x505))+(((-1.0)*gclwh15_10*x590))+(((-1.0)*gclwh11_10*x512))+(((4.0)*gclwh9_10*x511))+(((-4.0)*gclwh7_10*x498))+((x491*x555))+((gclwh7_10*x540))+((gclwh13_10*x568))+((gclwh5_10*x616))+(((-1.0)*x496*x533))+(((-1.0)*x509*x513)));
op[58]=((((-0.0034863305927034)*x560))+(((-1.0)*gclwh11_10*x509))+((gclwh15_1*x622))+(((-1.0)*x895))+(((-1.0)*gclwh9_10*x496))+(((-0.0034863305927034)*x588))+x883+x897+((gclwh7_10*x491))+(((-1.0)*x871)));
op[59]=((((-0.00918658)*x564))+(((-0.0794)*gclwh11_13*x505))+(((0.0794)*gclwh7_13*x498))+(((-0.000531443653)*x553))+(((-1.0)*x886))+(((0.000531443653)*x524))+(((-1.0)*x669))+(((0.00918658)*x548))+(((0.0397)*gclwh11_13*x509))+x867+x875+(((0.0397)*gclwh9_13*x496))+((gclwh9_13*x606))+(((-0.0397)*gclwh7_13*x491))+(((-0.0794)*gclwh9_13*x511))+((gclwh5_9*x579)));
op[60]=((((2.3686)*gclwh4_8*x505))+(((-1.0)*gclwh10_12*x510))+(((-1.1843)*gclwh4_8*x509))+(((0.27404702)*x610))+(((0.015853620107)*x507))+(((-1.0)*x682))+(((-1.0)*gclwh4_8*x551))+(((-1.0)*x892))+(((-0.015853620107)*x527))+(((-0.27404702)*x594))+(((-1.1843)*gclwh12_8*x491))+(((1.1843)*gclwh14_8*x496))+x878+x870+(((-2.3686)*gclwh14_8*x511))+(((2.3686)*gclwh12_8*x498)));
op[61]=((1.429443141481)+(((-1.429443141481)*gclwh1_3*x496))+(((-0.0189560282044839)*x538))+((gclwh3_3*x565))+(((2.832113302962)*gclwh3_3*x498))+(((-1.0)*x901))+(((-1.402670161481)*gclwh12_3*x491))+((gclwh12_11*x491))+((gclwh14_3*x591))+(((-0.0189560282044839)*x495))+(((2.832113302962)*gclwh12_3*x498))+(((-2.832113302962)*gclwh14_3*x511))+((gclwh1_3*x591))+(((1.402670161481)*gclwh14_3*x496))+(((2.832113302962)*gclwh1_3*x511))+(((-1.0)*gclwh14_11*x496))+(((-1.402670161481)*pp*x495))+(((2.832113302962)*gclwh4_3*x505))+x881+x900+((gclwh4_11*x509))+(((-1.429443141481)*gclwh3_3*x491))+(((-1.0)*x873)));
op[62]=((0.147786722962)+(((-1.0)*x885))+x894);
op[63]=((((1.1446)*gclwh4_2*x509))+(((-2.2892)*gclwh1_2*x511))+(((1.1446)*gclwh3_2*x491))+(((-2.448)*gclwh12_8*x498))+(((0.01638506376)*x527))+(((-1.0)*gclwh14_2*x575))+(((-1.0)*gclwh3_2*x584))+(((-1.0)*gclwh1_2*x575))+(((1.224)*gclwh4_8*x509))+(((1.1446)*gclwh1_2*x496))+(((2.448)*gclwh14_8*x511))+(((0.01638506376)*x628))+(((-2.2892)*gclwh3_2*x498))+(((1.1446)*gclwh12_2*x491))+(((2.2892)*gclwh14_2*x511))+(((-2.2892)*gclwh4_2*x505))+(((-1.224)*gclwh14_8*x496))+((gclwh12_2*x584))+(((-2.448)*gclwh4_8*x505))+x890+(((-1.1446)*gclwh14_2*x496))+(((1.224)*gclwh12_8*x491))+((gclwh4_2*x531))+((gclwh8_2*x502))+((gclwh10_2*x514))+(((-1.0)*gclwh6_2*x571))+(((-2.2892)*gclwh12_2*x498))+(((-1.0)*x879))+(((-0.01638506376)*x507)));
op[64]=((((0.0794)*gclwh14_8*x511))+(((-0.000531443653)*x507))+(((-1.0)*gclwh10_12*x579))+(((-0.0794)*gclwh4_8*x505))+(((-1.0)*x682))+(((0.0397)*gclwh12_8*x491))+((gclwh4_8*x617))+(((0.0397)*gclwh4_8*x509))+(((0.00918658)*x610))+(((-0.0794)*gclwh12_8*x498))+(((0.000531443653)*x527))+(((-0.00918658)*x594))+(((-0.0397)*gclwh14_8*x496))+x870+x892+(((-1.0)*x878)));
op[65]=((-0.028452741481)+((gclwh1_3*x521))+((gclwh14_11*x496))+(((-0.001679761481)*pp*x495))+(((-0.001679761481)*gclwh12_3*x491))+(((0.030132502962)*gclwh4_3*x505))+(((-1.0)*x901))+(((-1.0)*x881))+(((-1.0)*gclwh4_11*x509))+((gclwh14_3*x521))+(((-0.028452741481)*gclwh1_3*x496))+(((0.001679761481)*gclwh14_3*x496))+(((-0.030132502962)*gclwh14_3*x511))+(((0.030132502962)*gclwh1_3*x511))+((gclwh3_3*x605))+(((-0.000201684224787892)*x495))+(((-0.028452741481)*gclwh3_3*x491))+(((-0.000201684224787892)*x538))+(((0.030132502962)*gclwh12_3*x498))+(((0.030132502962)*gclwh3_3*x498))+x873+x900+(((-1.0)*gclwh12_11*x491)));
op[66]=((-1.429443141481)+(((-0.0189560282044839)*x506))+(((0.0189560282044839)*x608))+(((-2.832113302962)*gclwh5_1*x505))+((gclwh2_1*x565))+(((-1.429443141481)*gclwh0_1*x496))+(((-1.0)*x899))+(((-1.0)*gclwh15_10*x496))+((gclwh5_10*x509))+(((1.402670161481)*gclwh5_1*x509))+((gclwh13_10*x491))+(((2.832113302962)*gclwh2_1*x498))+x882+(((2.832113302962)*gclwh0_1*x511))+((gclwh0_1*x591))+(((1.402670161481)*gclwh13_1*x491))+x902+(((0.0189560282044839)*x522))+(((2.832113302962)*gclwh15_1*x511))+(((-1.429443141481)*gclwh2_1*x491))+(((-1.402670161481)*gclwh15_1*x496))+(((-1.0)*x874))+(((-2.832113302962)*gclwh13_1*x498)));
op[67]=((((-0.27404702)*x569))+(((-1.0)*x868))+(((1.1843)*gclwh13_9*x491))+(((0.015853620107)*x508))+(((2.3686)*gclwh15_9*x511))+((gclwh11_13*x510))+(((-1.1843)*gclwh15_9*x496))+((gclwh5_9*x551))+(((1.1843)*gclwh5_9*x509))+(((0.27404702)*x597))+x701+(((-2.3686)*gclwh5_9*x505))+x888+(((-0.015853620107)*x621))+(((-2.3686)*gclwh13_9*x498))+(((-1.0)*x877)));
op[68]=((((-1.1446)*gclwh13_0*x491))+(((0.015322176454)*x532))+(((2.2892)*gclwh13_0*x498))+(((1.224)*gclwh13_9*x491))+(((-2.448)*gclwh13_9*x498))+(((-1.0)*gclwh11_0*x514))+(((-0.01638506376)*x621))+(((1.1446)*gclwh15_0*x496))+(((1.224)*gclwh5_9*x509))+(((-2.2892)*gclwh0_0*x511))+(((-1.224)*gclwh15_9*x496))+(((-2.448)*gclwh5_9*x505))+(((-1.0)*gclwh5_0*x531))+(((-0.015322176454)*x580))+(((0.01638506376)*x508))+(((-1.0)*gclwh9_0*x502))+(((0.01638506376)*x566))+(((1.1446)*gclwh0_0*x496))+((gclwh7_0*x571))+x887+(((-2.2892)*gclwh2_0*x498))+(((2.448)*gclwh15_9*x511))+(((-2.2892)*gclwh15_0*x511))+(((1.1446)*gclwh2_0*x491))+(((-1.0)*gclwh0_0*x575))+(((2.2892)*gclwh5_0*x505))+(((-1.1446)*gclwh5_0*x509))+(((-1.0)*x876))+(((-1.0)*gclwh2_0*x584)));
op[69]=((0.147786722962)+(((-1.0)*x893))+x891);
op[70]=((0.028452741481)+(((0.000201684224787892)*x522))+(((0.001679761481)*gclwh13_1*x491))+(((0.001679761481)*gclwh5_1*x509))+(((-1.0)*gclwh13_10*x491))+((gclwh15_10*x496))+(((0.030132502962)*gclwh2_1*x498))+(((0.000201684224787892)*x608))+(((-1.0)*gclwh5_10*x509))+((gclwh2_1*x605))+(((-0.000201684224787892)*x506))+(((-1.0)*x899))+(((-1.0)*x882))+(((-0.028452741481)*gclwh2_1*x491))+(((0.030132502962)*gclwh15_1*x511))+(((-0.001679761481)*gclwh15_1*x496))+(((0.030132502962)*gclwh0_1*x511))+(((-0.030132502962)*gclwh5_1*x505))+x874+(((-0.030132502962)*gclwh13_1*x498))+x902+((gclwh0_1*x521))+(((-0.028452741481)*gclwh0_1*x496)));
op[71]=((((-0.00918658)*x569))+(((-0.0397)*gclwh5_9*x509))+(((-1.0)*x868))+(((0.0794)*gclwh13_9*x498))+(((-0.000531443653)*x508))+((gclwh15_9*x606))+(((0.0397)*gclwh15_9*x496))+(((-1.0)*x888))+(((0.00918658)*x542))+(((-0.0794)*gclwh15_9*x511))+x701+x877+(((-0.0397)*gclwh13_9*x491))+(((0.0794)*gclwh5_9*x505))+(((0.00918658)*x597))+(((-0.000531443653)*x566)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x903=htj1*htj1;
CheckValue<IkReal> x904=IKPowWithIntegerCheck(((1.0)+x903),-1);
if(!x904.valid){
continue;
}
cj1array[numsolutions]=((x904.value)*(((1.0)+(((-1.0)*x903)))));
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x905.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x905.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x906=htj2*htj2;
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+x906),-1);
if(!x907.valid){
continue;
}
cj2array[numsolutions]=((x907.value)*(((1.0)+(((-1.0)*x906)))));
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x908.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x908.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x909=htj3*htj3;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+x909),-1);
if(!x910.valid){
continue;
}
cj3array[numsolutions]=((x910.value)*(((1.0)+(((-1.0)*x909)))));
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x911.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x911.value));
}
if( j1array[numsolutions] > IKPI )
{
j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
{
if( !j1valid[ij1] )
{
continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break;
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
using std::complex;
if( rawcoeffs[0] == 0 ) {
// solve with one reduced degree
polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
return;
}
IKFAST_ASSERT(rawcoeffs[0] != 0);
const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
complex<IkReal> coeffs[3];
const int maxsteps = 110;
for(int i = 0; i < 3; ++i) {
coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
}
complex<IkReal> roots[3];
IkReal err[3];
roots[0] = complex<IkReal>(1,0);
roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
err[0] = 1.0;
err[1] = 1.0;
for(int i = 2; i < 3; ++i) {
roots[i] = roots[i-1]*roots[1];
err[i] = 1.0;
}
for(int step = 0; step < maxsteps; ++step) {
bool changed = false;
for(int i = 0; i < 3; ++i) {
if ( err[i] >= tol ) {
changed = true;
// evaluate
complex<IkReal> x = roots[i] + coeffs[0];
for(int j = 1; j < 3; ++j) {
x = roots[i] * x + coeffs[j];
}
for(int j = 0; j < 3; ++j) {
if( i != j ) {
if( roots[i] != roots[j] ) {
x /= (roots[i] - roots[j]);
}
}
}
roots[i] -= x;
err[i] = abs(x);
}
}
if( !changed ) {
break;
}
}

numroots = 0;
bool visited[3] = {false};
for(int i = 0; i < 3; ++i) {
if( !visited[i] ) {
// might be a multiple root, in which case it will have more error than the other roots
// find any neighboring roots, and take the average
complex<IkReal> newroot=roots[i];
int n = 1;
for(int j = i+1; j < 3; ++j) {
// care about error in real much more than imaginary
if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
newroot += roots[j];
n += 1;
visited[j] = true;
}
}
if( n > 1 ) {
newroot /= n;
}
// there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
if( IKabs(imag(newroot)) < tolsqrt ) {
rawroots[numroots++] = real(newroot);
}
}
}
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
if( det < 0 ) {
numroots=0;
}
else if( det == 0 ) {
rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
numroots = 1;
}
else {
det = IKsqrt(det);
rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
numroots = 2;
}
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
using std::complex;
if( rawcoeffs[0] == 0 ) {
// solve with one reduced degree
polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
return;
}
IKFAST_ASSERT(rawcoeffs[0] != 0);
const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
complex<IkReal> coeffs[5];
const int maxsteps = 110;
for(int i = 0; i < 5; ++i) {
coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
}
complex<IkReal> roots[5];
IkReal err[5];
roots[0] = complex<IkReal>(1,0);
roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
err[0] = 1.0;
err[1] = 1.0;
for(int i = 2; i < 5; ++i) {
roots[i] = roots[i-1]*roots[1];
err[i] = 1.0;
}
for(int step = 0; step < maxsteps; ++step) {
bool changed = false;
for(int i = 0; i < 5; ++i) {
if ( err[i] >= tol ) {
changed = true;
// evaluate
complex<IkReal> x = roots[i] + coeffs[0];
for(int j = 1; j < 5; ++j) {
x = roots[i] * x + coeffs[j];
}
for(int j = 0; j < 5; ++j) {
if( i != j ) {
if( roots[i] != roots[j] ) {
x /= (roots[i] - roots[j]);
}
}
}
roots[i] -= x;
err[i] = abs(x);
}
}
if( !changed ) {
break;
}
}

numroots = 0;
bool visited[5] = {false};
for(int i = 0; i < 5; ++i) {
if( !visited[i] ) {
// might be a multiple root, in which case it will have more error than the other roots
// find any neighboring roots, and take the average
complex<IkReal> newroot=roots[i];
int n = 1;
for(int j = i+1; j < 5; ++j) {
// care about error in real much more than imaginary
if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
newroot += roots[j];
n += 1;
visited[j] = true;
}
}
if( n > 1 ) {
newroot /= n;
}
// there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
if( IKabs(imag(newroot)) < tolsqrt ) {
rawroots[numroots++] = real(newroot);
}
}
}
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
using std::complex;
if( rawcoeffs[0] == 0 ) {
// solve with one reduced degree
polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
return;
}
IKFAST_ASSERT(rawcoeffs[0] != 0);
const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
complex<IkReal> coeffs[4];
const int maxsteps = 110;
for(int i = 0; i < 4; ++i) {
coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
}
complex<IkReal> roots[4];
IkReal err[4];
roots[0] = complex<IkReal>(1,0);
roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
err[0] = 1.0;
err[1] = 1.0;
for(int i = 2; i < 4; ++i) {
roots[i] = roots[i-1]*roots[1];
err[i] = 1.0;
}
for(int step = 0; step < maxsteps; ++step) {
bool changed = false;
for(int i = 0; i < 4; ++i) {
if ( err[i] >= tol ) {
changed = true;
// evaluate
complex<IkReal> x = roots[i] + coeffs[0];
for(int j = 1; j < 4; ++j) {
x = roots[i] * x + coeffs[j];
}
for(int j = 0; j < 4; ++j) {
if( i != j ) {
if( roots[i] != roots[j] ) {
x /= (roots[i] - roots[j]);
}
}
}
roots[i] -= x;
err[i] = abs(x);
}
}
if( !changed ) {
break;
}
}

numroots = 0;
bool visited[4] = {false};
for(int i = 0; i < 4; ++i) {
if( !visited[i] ) {
// might be a multiple root, in which case it will have more error than the other roots
// find any neighboring roots, and take the average
complex<IkReal> newroot=roots[i];
int n = 1;
for(int j = i+1; j < 4; ++j) {
// care about error in real much more than imaginary
if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
newroot += roots[j];
n += 1;
visited[j] = true;
}
}
if( n > 1 ) {
newroot /= n;
}
// there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
if( IKabs(imag(newroot)) < tolsqrt ) {
rawroots[numroots++] = real(newroot);
}
}
}
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
using std::complex;
if( rawcoeffs[0] == 0 ) {
// solve with one reduced degree
polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
return;
}
IKFAST_ASSERT(rawcoeffs[0] != 0);
const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
complex<IkReal> coeffs[6];
const int maxsteps = 110;
for(int i = 0; i < 6; ++i) {
coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
}
complex<IkReal> roots[6];
IkReal err[6];
roots[0] = complex<IkReal>(1,0);
roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
err[0] = 1.0;
err[1] = 1.0;
for(int i = 2; i < 6; ++i) {
roots[i] = roots[i-1]*roots[1];
err[i] = 1.0;
}
for(int step = 0; step < maxsteps; ++step) {
bool changed = false;
for(int i = 0; i < 6; ++i) {
if ( err[i] >= tol ) {
changed = true;
// evaluate
complex<IkReal> x = roots[i] + coeffs[0];
for(int j = 1; j < 6; ++j) {
x = roots[i] * x + coeffs[j];
}
for(int j = 0; j < 6; ++j) {
if( i != j ) {
if( roots[i] != roots[j] ) {
x /= (roots[i] - roots[j]);
}
}
}
roots[i] -= x;
err[i] = abs(x);
}
}
if( !changed ) {
break;
}
}

numroots = 0;
bool visited[6] = {false};
for(int i = 0; i < 6; ++i) {
if( !visited[i] ) {
// might be a multiple root, in which case it will have more error than the other roots
// find any neighboring roots, and take the average
complex<IkReal> newroot=roots[i];
int n = 1;
for(int j = i+1; j < 6; ++j) {
// care about error in real much more than imaginary
if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
newroot += roots[j];
n += 1;
visited[j] = true;
}
}
if( n > 1 ) {
newroot /= n;
}
// there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
if( IKabs(imag(newroot)) < tolsqrt ) {
rawroots[numroots++] = real(newroot);
}
}
}
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x912=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x912);
rxp1_0=(pz*r11);
rxp1_1=(r01*x912);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x913=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x913);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(r22,-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915=IKPowWithIntegerCheck(sj3,-1);
if(!x915.valid){
continue;
}
sj4array[0]=((x914.value)*(x915.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x916=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x916);
IkReal x917=((16.0)*sj4);
IkReal x918=(cj1*cj2);
IkReal x919=((4.0)*sj3);
IkReal x920=((8.0)*sj4);
IkReal x921=((4.0)*cj4);
IkReal x922=(sj1*sj2);
IkReal x923=((4.0)*sj4);
IkReal x924=(cj3*r02);
IkReal x925=((16.0)*sj3);
IkReal x926=((8.0)*sj3);
IkReal x927=((12.0)*cj4);
IkReal x928=((12.0)*sj4);
IkReal x929=(cj3*r12);
IkReal x930=(r11*x919);
IkReal x931=(r01*x919);
IkReal x932=(r01*x922);
IkReal x933=(cj3*cj4*r01);
IkReal x934=(cj3*cj4*r11);
IkReal x935=(cj3*r10*x921);
IkReal x936=(x928*x929);
IkReal x937=(cj3*r00*x921);
IkReal x938=(x924*x928);
IkReal x939=(r00*x922*x923);
IkReal x940=(r02*x922*x927);
IkReal x941=(r00*x918*x923);
IkReal x942=(r02*x918*x927);
IkReal x943=(r10*x922*x923);
IkReal x944=(r12*x918*x927);
IkReal x945=(r12*x922*x927);
IkReal x946=(r10*x918*x923);
IkReal x947=(x930+x941);
IkReal x948=(x931+x943);
IkReal x949=(x939+x935);
IkReal x950=(x936+x942);
IkReal x951=(x937+x946);
IkReal x952=(x938+x945);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x948+x944)))))+(((0.5)*(IKabs(((((-1.0)*x947))+(((-1.0)*x950))+x949+x940)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x950))+x940+x947)))))+(((0.5)*(IKabs((((r01*x917*x918))+(((-1.0)*r10*x925))+(((-16.0)*x934))+(((-1.0)*x917*x932)))))))+(((0.5)*(IKabs((((r11*x917*x922))+(((-1.0)*r11*x917*x918))+(((-16.0)*x933))+(((-1.0)*r00*x925)))))))+(((0.5)*(IKabs(((((-1.0)*x948))+(((-1.0)*x952))+x951+x944)))))+(((0.5)*(IKabs((((r12*x918*x921))+(((-1.0)*x951))+(((-1.0)*r12*x921*x922))+x948+(((-1.0)*x923*x924)))))))+(IKabs(((((-1.0)*r11*x918*x920))+((r11*x920*x922))+(((-8.0)*x933))+(((-1.0)*r00*x926)))))+(IKabs((((r01*x918*x920))+(((-1.0)*r10*x926))+(((-8.0)*x934))+(((-1.0)*x920*x932)))))+(((0.5)*(IKabs(((((-1.0)*x949))+((r02*x921*x922))+(((-1.0)*r02*x918*x921))+x947+(((-1.0)*x923*x929))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x953=(r10*sj3);
IkReal x954=(r01*sj4);
IkReal x955=(cj1*cj2);
IkReal x956=(cj3*cj4);
IkReal x957=(sj1*sj2);
IkReal x958=(cj4*r02);
IkReal x959=((4.0)*r11*sj3);
IkReal x960=(cj3*r12*sj4);
IkReal x961=((4.0)*r00*sj4);
IkReal x962=((4.0)*r10*x956);
IkReal x963=((12.0)*x960);
IkReal x964=((4.0)*x960);
IkReal x965=(x955*x961);
IkReal x966=(x957*x961);
IkReal x967=((12.0)*x957*x958);
IkReal x968=((12.0)*x955*x958);
IkReal x969=((4.0)*x957*x958);
IkReal x970=((4.0)*x955*x958);
IkReal x971=(x965+x959);
IkReal x972=(x962+x966);
IkReal x973=(x970+x964);
IkReal x974=(x963+x968);
IkReal x975=((((-8.0)*x953))+(((-8.0)*x954*x957))+(((8.0)*x954*x955))+(((-8.0)*r11*x956)));
op[0]=(x971+x969+(((-1.0)*x972))+(((-1.0)*x973)));
op[1]=x975;
op[2]=(x971+x967+(((-1.0)*x974))+(((-1.0)*x972)));
op[3]=((((-16.0)*r11*x956))+(((16.0)*x954*x955))+(((-16.0)*x953))+(((-16.0)*x954*x957)));
op[4]=(x972+x967+(((-1.0)*x974))+(((-1.0)*x971)));
op[5]=x975;
op[6]=(x972+x969+(((-1.0)*x973))+(((-1.0)*x971)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x976=(cj1*cj2);
IkReal x977=((4.0)*cj4);
IkReal x978=(sj1*sj2);
IkReal x979=((4.0)*sj4);
IkReal x980=(r00*sj3);
IkReal x981=(cj3*r02);
IkReal x982=((4.0)*r01*sj3);
IkReal x983=((16.0)*r11*sj4);
IkReal x984=(cj3*cj4*r01);
IkReal x985=((12.0)*cj4*r12);
IkReal x986=((8.0)*r11*sj4);
IkReal x987=(cj3*r00*x977);
IkReal x988=((12.0)*sj4*x981);
IkReal x989=(x979*x981);
IkReal x990=(r10*x976*x979);
IkReal x991=(r10*x978*x979);
IkReal x992=(x976*x985);
IkReal x993=(x978*x985);
IkReal x994=(r12*x976*x977);
IkReal x995=(r12*x977*x978);
IkReal x996=(x991+x982);
IkReal x997=(x990+x987);
IkReal x998=(x995+x989);
IkReal x999=(x993+x988);
IkReal x1000=((((-8.0)*x980))+(((-8.0)*x984))+(((-1.0)*x976*x986))+((x978*x986)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x996))+(((-1.0)*x999))+x992+x997))))+((x1000*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x997))+(((-1.0)*x999))+x992+x996))))+(((-1.0)*x996))+(((-1.0)*x998))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x997))+(((-1.0)*x998))+x996+x994))))+((htj5*x1000))+x997+x994+(((htj5*htj5*htj5)*(((((-16.0)*x980))+(((-16.0)*x984))+(((-1.0)*x976*x983))+((x978*x983)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1001=(cj5*sj4);
IkReal x1002=(sj4*sj5);
if( IKabs((((r01*x1002))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1002))+((cj4*r12))+((r10*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1002))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1001))))+IKsqr(((((-1.0)*r11*x1002))+((cj4*r12))+((r10*x1001))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((r01*x1002))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1001))), ((((-1.0)*r11*x1002))+((cj4*r12))+((r10*x1001))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1003=IKcos(j0);
IkReal x1004=IKsin(j0);
IkReal x1005=(cj5*r01);
IkReal x1006=((1.0)*sj3);
IkReal x1007=(r12*sj4);
IkReal x1008=((1.0)*cj3);
IkReal x1009=(r11*sj5);
IkReal x1010=(cj3*cj4);
IkReal x1011=(r02*sj4);
IkReal x1012=(r01*sj5);
IkReal x1013=(r10*sj5);
IkReal x1014=(cj5*r11);
IkReal x1015=(r00*sj5);
IkReal x1016=((1.0)*cj2);
IkReal x1017=((0.5723)*sj2);
IkReal x1018=((1.0)*cj4);
IkReal x1019=((0.5723)*cj2);
IkReal x1020=(cj4*cj5*r00);
IkReal x1021=((1.0)*cj1*sj2);
IkReal x1022=(cj4*cj5*r10);
IkReal x1023=(sj1*x1003);
IkReal x1024=(cj1*x1004);
IkReal x1025=((1.0)*cj5*sj4);
IkReal x1026=(cj1*x1003);
IkReal x1027=(sj1*x1004);
evalcond[0]=(((sj4*x1009))+x1003+(((-1.0)*r10*x1025))+(((-1.0)*r12*x1018)));
evalcond[1]=((((-1.0)*x1004))+((sj4*x1012))+(((-1.0)*r02*x1018))+(((-1.0)*r00*x1025)));
evalcond[2]=((((-0.163941)*x1004))+(((0.612)*x1026))+(((-1.0)*px))+((x1019*x1026))+(((-0.1157)*x1005))+(((-0.1157)*x1015))+(((-1.0)*x1017*x1023)));
evalcond[3]=((((0.163941)*x1003))+(((0.612)*x1024))+(((-1.0)*py))+((x1019*x1024))+(((-0.1157)*x1013))+(((-0.1157)*x1014))+(((-1.0)*x1017*x1027)));
evalcond[4]=(((cj3*x1011))+((sj3*x1005))+(((-1.0)*x1008*x1020))+((sj3*x1015))+(((-1.0)*x1016*x1026))+((x1010*x1012))+((sj2*x1023)));
evalcond[5]=(((cj3*x1007))+((x1009*x1010))+(((-1.0)*x1008*x1022))+((sj3*x1014))+((sj3*x1013))+(((-1.0)*x1016*x1024))+((sj2*x1027)));
evalcond[6]=(((cj3*x1005))+((cj3*x1015))+(((-1.0)*x1006*x1011))+(((-1.0)*x1003*x1021))+(((-1.0)*x1016*x1023))+((sj3*x1020))+(((-1.0)*cj4*x1006*x1012)));
evalcond[7]=((((-1.0)*x1004*x1021))+(((-1.0)*cj4*x1006*x1009))+((cj3*x1014))+((cj3*x1013))+(((-1.0)*x1006*x1007))+(((-1.0)*x1016*x1027))+((sj3*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(cj3,-1);
if(!x1028.valid){
continue;
}
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(r22,-1);
if(!x1029.valid){
continue;
}
sj4array[0]=((-1.0)*(x1028.value)*(x1029.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1030=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1030);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1030);
IkReal x1031=((16.0)*sj4);
IkReal x1032=(cj1*cj2);
IkReal x1033=((4.0)*sj3);
IkReal x1034=((8.0)*sj4);
IkReal x1035=((4.0)*cj4);
IkReal x1036=(sj1*sj2);
IkReal x1037=((4.0)*sj4);
IkReal x1038=(cj3*r02);
IkReal x1039=((16.0)*sj3);
IkReal x1040=((8.0)*sj3);
IkReal x1041=((12.0)*cj4);
IkReal x1042=((12.0)*sj4);
IkReal x1043=(cj3*r12);
IkReal x1044=(r11*x1033);
IkReal x1045=(r01*x1033);
IkReal x1046=(r01*x1036);
IkReal x1047=(cj3*cj4*r01);
IkReal x1048=(cj3*cj4*r11);
IkReal x1049=(cj3*r10*x1035);
IkReal x1050=(x1042*x1043);
IkReal x1051=(cj3*r00*x1035);
IkReal x1052=(x1038*x1042);
IkReal x1053=(r00*x1036*x1037);
IkReal x1054=(r02*x1036*x1041);
IkReal x1055=(r00*x1032*x1037);
IkReal x1056=(r02*x1032*x1041);
IkReal x1057=(r10*x1036*x1037);
IkReal x1058=(r12*x1032*x1041);
IkReal x1059=(r12*x1036*x1041);
IkReal x1060=(r10*x1032*x1037);
IkReal x1061=(x1055+x1044);
IkReal x1062=(x1057+x1045);
IkReal x1063=(x1053+x1049);
IkReal x1064=(x1050+x1056);
IkReal x1065=(x1051+x1060);
IkReal x1066=(x1052+x1059);
j5eval[0]=((((0.5)*(IKabs((x1054+x1063+(((-1.0)*x1061))+(((-1.0)*x1064)))))))+(IKabs(((((-1.0)*r00*x1040))+(((-8.0)*x1047))+((r11*x1034*x1036))+(((-1.0)*r11*x1032*x1034)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1039))+(((-1.0)*x1031*x1046))+((r01*x1031*x1032))+(((-16.0)*x1048)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x1031*x1032))+((r11*x1031*x1036))+(((-16.0)*x1047))+(((-1.0)*r00*x1039)))))))+(((0.5)*(IKabs(((((-1.0)*x1037*x1038))+x1062+(((-1.0)*r12*x1035*x1036))+((r12*x1032*x1035))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1054+x1061+(((-1.0)*x1064))+(((-1.0)*x1063)))))))+(((0.5)*(IKabs((x1058+x1062+(((-1.0)*x1066))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1061+((r02*x1035*x1036))+(((-1.0)*x1037*x1043))+(((-1.0)*r02*x1032*x1035))+(((-1.0)*x1063)))))))+(IKabs(((((-8.0)*x1048))+(((-1.0)*r10*x1040))+(((-1.0)*x1034*x1046))+((r01*x1032*x1034)))))+(((0.5)*(IKabs((x1058+x1065+(((-1.0)*x1066))+(((-1.0)*x1062))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1067=(r10*sj3);
IkReal x1068=(r01*sj4);
IkReal x1069=(cj1*cj2);
IkReal x1070=(cj3*cj4);
IkReal x1071=(sj1*sj2);
IkReal x1072=(cj4*r02);
IkReal x1073=((4.0)*r11*sj3);
IkReal x1074=(cj3*r12*sj4);
IkReal x1075=((4.0)*r00*sj4);
IkReal x1076=((4.0)*r10*x1070);
IkReal x1077=((12.0)*x1074);
IkReal x1078=((4.0)*x1074);
IkReal x1079=(x1069*x1075);
IkReal x1080=(x1071*x1075);
IkReal x1081=((12.0)*x1071*x1072);
IkReal x1082=((12.0)*x1069*x1072);
IkReal x1083=((4.0)*x1071*x1072);
IkReal x1084=((4.0)*x1069*x1072);
IkReal x1085=(x1079+x1073);
IkReal x1086=(x1076+x1080);
IkReal x1087=(x1078+x1084);
IkReal x1088=(x1077+x1082);
IkReal x1089=((((-8.0)*x1068*x1071))+(((8.0)*x1068*x1069))+(((-8.0)*x1067))+(((-8.0)*r11*x1070)));
op[0]=(x1085+x1083+(((-1.0)*x1086))+(((-1.0)*x1087)));
op[1]=x1089;
op[2]=(x1085+x1081+(((-1.0)*x1086))+(((-1.0)*x1088)));
op[3]=((((16.0)*x1068*x1069))+(((-16.0)*x1068*x1071))+(((-16.0)*r11*x1070))+(((-16.0)*x1067)));
op[4]=(x1086+x1081+(((-1.0)*x1085))+(((-1.0)*x1088)));
op[5]=x1089;
op[6]=(x1086+x1083+(((-1.0)*x1085))+(((-1.0)*x1087)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1090=(cj1*cj2);
IkReal x1091=((4.0)*cj4);
IkReal x1092=(sj1*sj2);
IkReal x1093=((4.0)*sj4);
IkReal x1094=(r00*sj3);
IkReal x1095=(cj3*r02);
IkReal x1096=((4.0)*r01*sj3);
IkReal x1097=((16.0)*r11*sj4);
IkReal x1098=(cj3*cj4*r01);
IkReal x1099=((12.0)*cj4*r12);
IkReal x1100=((8.0)*r11*sj4);
IkReal x1101=(cj3*r00*x1091);
IkReal x1102=((12.0)*sj4*x1095);
IkReal x1103=(x1093*x1095);
IkReal x1104=(r10*x1090*x1093);
IkReal x1105=(r10*x1092*x1093);
IkReal x1106=(x1090*x1099);
IkReal x1107=(x1092*x1099);
IkReal x1108=(r12*x1090*x1091);
IkReal x1109=(r12*x1091*x1092);
IkReal x1110=(x1105+x1096);
IkReal x1111=(x1104+x1101);
IkReal x1112=(x1103+x1109);
IkReal x1113=(x1107+x1102);
IkReal x1114=(((x1092*x1100))+(((-1.0)*x1090*x1100))+(((-8.0)*x1098))+(((-8.0)*x1094)));
j5evalpoly[0]=(x1108+x1111+(((htj5*htj5*htj5)*(((((-1.0)*x1090*x1097))+(((-16.0)*x1094))+(((-16.0)*x1098))+((x1092*x1097))))))+(((htj5*htj5*htj5*htj5)*((x1106+x1110+(((-1.0)*x1113))+(((-1.0)*x1111))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1108+x1110+(((-1.0)*x1112))+(((-1.0)*x1111))))))+(((htj5*htj5)*((x1106+x1111+(((-1.0)*x1113))+(((-1.0)*x1110))))))+(((-1.0)*x1112))+(((-1.0)*x1110))+((x1114*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1114)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1115=(cj5*sj4);
IkReal x1116=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1116))+(((-1.0)*r00*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1116))+((cj4*r12))+((r10*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1116))+(((-1.0)*r00*x1115))))+IKsqr(((((-1.0)*r11*x1116))+((cj4*r12))+((r10*x1115))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1116))+(((-1.0)*r00*x1115))), ((((-1.0)*r11*x1116))+((cj4*r12))+((r10*x1115))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1117=IKcos(j0);
IkReal x1118=IKsin(j0);
IkReal x1119=(cj5*r01);
IkReal x1120=((1.0)*sj3);
IkReal x1121=(r12*sj4);
IkReal x1122=((1.0)*cj3);
IkReal x1123=(r11*sj5);
IkReal x1124=(cj3*cj4);
IkReal x1125=(r02*sj4);
IkReal x1126=(r01*sj5);
IkReal x1127=(r10*sj5);
IkReal x1128=(cj5*r11);
IkReal x1129=(r00*sj5);
IkReal x1130=((1.0)*cj2);
IkReal x1131=((0.5723)*sj2);
IkReal x1132=((1.0)*cj4);
IkReal x1133=((0.5723)*cj2);
IkReal x1134=(cj4*cj5*r00);
IkReal x1135=((1.0)*cj1*sj2);
IkReal x1136=(cj4*cj5*r10);
IkReal x1137=(sj1*x1117);
IkReal x1138=(cj1*x1118);
IkReal x1139=((1.0)*cj5*sj4);
IkReal x1140=(cj1*x1117);
IkReal x1141=(sj1*x1118);
evalcond[0]=(x1117+(((-1.0)*r12*x1132))+(((-1.0)*r10*x1139))+((sj4*x1123)));
evalcond[1]=(((sj4*x1126))+(((-1.0)*x1118))+(((-1.0)*r02*x1132))+(((-1.0)*r00*x1139)));
evalcond[2]=((((0.612)*x1140))+(((-0.163941)*x1118))+(((-1.0)*x1131*x1137))+(((-1.0)*px))+(((-0.1157)*x1119))+((x1133*x1140))+(((-0.1157)*x1129)));
evalcond[3]=((((-1.0)*py))+(((0.163941)*x1117))+(((-1.0)*x1131*x1141))+(((-0.1157)*x1128))+(((-0.1157)*x1127))+(((0.612)*x1138))+((x1133*x1138)));
evalcond[4]=(((sj3*x1119))+(((-1.0)*x1122*x1134))+((x1124*x1126))+((sj2*x1137))+((sj3*x1129))+(((-1.0)*x1130*x1140))+((cj3*x1125)));
evalcond[5]=((((-1.0)*x1122*x1136))+(((-1.0)*x1130*x1138))+((sj2*x1141))+((sj3*x1128))+((sj3*x1127))+((x1123*x1124))+((cj3*x1121)));
evalcond[6]=((((-1.0)*x1117*x1135))+(((-1.0)*x1130*x1137))+(((-1.0)*x1120*x1125))+((sj3*x1134))+((cj3*x1119))+((cj3*x1129))+(((-1.0)*cj4*x1120*x1126)));
evalcond[7]=((((-1.0)*x1130*x1141))+(((-1.0)*x1118*x1135))+(((-1.0)*x1120*x1121))+((sj3*x1136))+((cj3*x1127))+((cj3*x1128))+(((-1.0)*cj4*x1120*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(r22,-1);
if(!x1145.valid){
continue;
}
sj4array[0]=((-1.0)*(x1145.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
IkReal x1147=x1148.value;
j5array[0]=((-1.0)*x1147);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1147)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1149=(cj5*sj4);
IkReal x1150=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1149))+((r01*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1150))+((r10*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1149))+((r01*x1150))))+IKsqr(((((-1.0)*r11*x1150))+((r10*x1149))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1149))+((r01*x1150))), ((((-1.0)*r11*x1150))+((r10*x1149))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1151=IKcos(j0);
IkReal x1152=IKsin(j0);
IkReal x1153=(cj5*r01);
IkReal x1154=(sj4*sj5);
IkReal x1155=((0.1157)*sj5);
IkReal x1156=((0.612)*cj1);
IkReal x1157=(cj5*r11);
IkReal x1158=((1.0)*cj1*sj2);
IkReal x1159=((1.0)*cj2*sj1);
IkReal x1160=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1160))+x1151+((r11*x1154)));
evalcond[1]=((((-1.0)*x1152))+(((-1.0)*r00*x1160))+((r01*x1154)));
evalcond[2]=(((r00*sj5))+x1153+(((-1.0)*x1151*x1159))+(((-1.0)*x1151*x1158)));
evalcond[3]=(x1157+((r10*sj5))+(((-1.0)*x1152*x1159))+(((-1.0)*x1152*x1158)));
evalcond[4]=((((-1.0)*r00*x1155))+(((-1.0)*px))+(((-0.163941)*x1152))+((x1151*x1156))+(((-0.1157)*x1153)));
evalcond[5]=((((0.163941)*x1151))+((x1152*x1156))+(((-1.0)*py))+(((-1.0)*r10*x1155))+(((-0.1157)*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(r22,-1);
if(!x1162.valid){
continue;
}
sj4array[0]=((x1162.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
IkReal x1164=x1165.value;
j5array[0]=((-1.0)*x1164);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1164)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1166=(cj5*sj4);
IkReal x1167=(sj4*sj5);
if( IKabs((((r01*x1167))+(((-1.0)*r00*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1166))+(((-1.0)*r11*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1167))+(((-1.0)*r00*x1166))))+IKsqr((((r10*x1166))+(((-1.0)*r11*x1167))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((r01*x1167))+(((-1.0)*r00*x1166))), (((r10*x1166))+(((-1.0)*r11*x1167))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1168=IKcos(j0);
IkReal x1169=IKsin(j0);
IkReal x1170=(cj5*r01);
IkReal x1171=(sj4*sj5);
IkReal x1172=((1.0)*sj5);
IkReal x1173=((1.0)*cj5);
IkReal x1174=((0.1157)*sj5);
IkReal x1175=((0.612)*cj1);
IkReal x1176=((1.0)*cj1*sj2);
IkReal x1177=((1.0)*cj2*sj1);
evalcond[0]=(x1168+(((-1.0)*r10*sj4*x1173))+((r11*x1171)));
evalcond[1]=((((-1.0)*r00*sj4*x1173))+((r01*x1171))+(((-1.0)*x1169)));
evalcond[2]=(((x1168*x1175))+(((-0.163941)*x1169))+(((-0.1157)*x1170))+(((-1.0)*px))+(((-1.0)*r00*x1174)));
evalcond[3]=((((-1.0)*py))+(((0.163941)*x1168))+(((-0.1157)*cj5*r11))+(((-1.0)*r10*x1174))+((x1169*x1175)));
evalcond[4]=((((-1.0)*x1168*x1177))+(((-1.0)*x1168*x1176))+(((-1.0)*r00*x1172))+(((-1.0)*x1170)));
evalcond[5]=((((-1.0)*r11*x1173))+(((-1.0)*x1169*x1176))+(((-1.0)*x1169*x1177))+(((-1.0)*r10*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1178=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1178);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1178);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1179=IKPowWithIntegerCheck(r22,-1);
if(!x1179.valid){
continue;
}
sj4array[0]=((x1179.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
IkReal x1181=x1182.value;
j5array[0]=((-1.0)*x1181);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1181)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1183=(cj5*sj4);
IkReal x1184=(sj4*sj5);
if( IKabs((((r01*x1184))+(((-1.0)*r00*x1183)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1183))+(((-1.0)*r11*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1184))+(((-1.0)*r00*x1183))))+IKsqr((((r10*x1183))+(((-1.0)*r11*x1184))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((r01*x1184))+(((-1.0)*r00*x1183))), (((r10*x1183))+(((-1.0)*r11*x1184))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1185=IKcos(j0);
IkReal x1186=IKsin(j0);
IkReal x1187=(cj5*r01);
IkReal x1188=(sj4*sj5);
IkReal x1189=((0.1157)*sj5);
IkReal x1190=(cj5*r11);
IkReal x1191=((1.0)*x1186);
IkReal x1192=(cj1*x1186);
IkReal x1193=((1.0)*cj5*sj4);
IkReal x1194=(sj1*sj2*x1185);
IkReal x1195=(cj1*cj2*x1185);
IkReal x1196=(sj1*sj2*x1186);
evalcond[0]=(x1185+(((-1.0)*r10*x1193))+((r11*x1188)));
evalcond[1]=((((-1.0)*r00*x1193))+((r01*x1188))+(((-1.0)*x1191)));
evalcond[2]=(((r00*sj5))+x1187+x1194+(((-1.0)*x1195)));
evalcond[3]=(x1190+x1196+((r10*sj5))+(((-1.0)*cj1*cj2*x1191)));
evalcond[4]=((((-0.5723)*x1194))+(((0.612)*cj1*x1185))+(((-0.163941)*x1186))+(((0.5723)*x1195))+(((-1.0)*px))+(((-0.1157)*x1187))+(((-1.0)*r00*x1189)));
evalcond[5]=((((-0.5723)*x1196))+(((0.163941)*x1185))+(((-0.1157)*x1190))+(((-1.0)*r10*x1189))+(((-1.0)*py))+(((0.5723)*cj2*x1192))+(((0.612)*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1197=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1197);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(r22,-1);
if(!x1198.valid){
continue;
}
sj4array[0]=((-1.0)*(x1198.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
IkReal x1200=x1201.value;
j5array[0]=((-1.0)*x1200);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1200)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=(cj5*sj4);
IkReal x1203=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1202))+((r01*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1202))+(((-1.0)*r11*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1202))+((r01*x1203))))+IKsqr((((r10*x1202))+(((-1.0)*r11*x1203))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1202))+((r01*x1203))), (((r10*x1202))+(((-1.0)*r11*x1203))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j0);
IkReal x1205=IKsin(j0);
IkReal x1206=(cj5*r01);
IkReal x1207=(sj4*sj5);
IkReal x1208=((1.0)*cj5);
IkReal x1209=(r10*sj5);
IkReal x1210=(r00*sj5);
IkReal x1211=(cj1*x1205);
IkReal x1212=(sj1*sj2*x1204);
IkReal x1213=(cj1*cj2*x1204);
IkReal x1214=(sj1*sj2*x1205);
evalcond[0]=(x1204+(((-1.0)*r10*sj4*x1208))+((r11*x1207)));
evalcond[1]=((((-1.0)*r00*sj4*x1208))+(((-1.0)*x1205))+((r01*x1207)));
evalcond[2]=(x1212+(((-1.0)*x1206))+(((-1.0)*x1213))+(((-1.0)*x1210)));
evalcond[3]=(x1214+(((-1.0)*cj2*x1211))+(((-1.0)*x1209))+(((-1.0)*r11*x1208)));
evalcond[4]=((((0.612)*cj1*x1204))+(((-0.1157)*x1206))+(((-0.1157)*x1210))+(((-0.5723)*x1212))+(((-1.0)*px))+(((0.5723)*x1213))+(((-0.163941)*x1205)));
evalcond[5]=((((-0.1157)*x1209))+(((0.612)*x1211))+(((-0.5723)*x1214))+(((0.163941)*x1204))+(((-1.0)*py))+(((0.5723)*cj2*x1211))+(((-0.1157)*cj5*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(r22,-1);
if(!x1215.valid){
continue;
}
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(sj3,-1);
if(!x1216.valid){
continue;
}
sj4array[0]=((x1215.value)*(x1216.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1217=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1217);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1217);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1218=((4.0)*r01);
IkReal x1219=((16.0)*r00);
IkReal x1220=(cj3*sj2);
IkReal x1221=((8.0)*r00);
IkReal x1222=(cj2*cj3);
IkReal x1223=(cj4*r01);
IkReal x1224=((16.0)*cj1);
IkReal x1225=((8.0)*sj1);
IkReal x1226=((16.0)*sj1);
IkReal x1227=((8.0)*cj1);
IkReal x1228=(sj2*sj3);
IkReal x1229=(cj2*sj3);
IkReal x1230=(sj1*x1229);
IkReal x1231=((4.0)*cj4*r00);
IkReal x1232=(((sj1*x1218*x1220))+((cj1*x1218*x1228))+((x1218*x1230))+((sj1*x1228*x1231)));
IkReal x1233=(((cj1*x1229*x1231))+((cj1*x1218*x1222))+((sj1*x1222*x1231))+((cj1*x1220*x1231)));
IkReal x1234=(x1233+(((-1.0)*x1232)));
IkReal x1235=((((-1.0)*cj1*x1221*x1222))+((x1222*x1223*x1225))+(((-1.0)*x1223*x1225*x1228))+((x1223*x1227*x1229))+((x1220*x1223*x1227))+((x1221*x1230))+((cj1*x1221*x1228))+((sj1*x1220*x1221)));
IkReal x1236=(x1232+(((-1.0)*x1233)));
op[0]=x1234;
op[1]=x1235;
op[2]=x1234;
op[3]=(((x1222*x1223*x1226))+((x1219*x1230))+((x1220*x1223*x1224))+((sj1*x1219*x1220))+((x1223*x1224*x1229))+(((-1.0)*cj1*x1219*x1222))+((cj1*x1219*x1228))+(((-1.0)*x1223*x1226*x1228)));
op[4]=x1236;
op[5]=x1235;
op[6]=x1236;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1237=(cj5*sj4);
IkReal x1238=(sj4*sj5);
if( IKabs((((r01*x1238))+(((-1.0)*r00*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1238))+((r10*x1237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1238))+(((-1.0)*r00*x1237))))+IKsqr(((((-1.0)*r11*x1238))+((r10*x1237))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((r01*x1238))+(((-1.0)*r00*x1237))), ((((-1.0)*r11*x1238))+((r10*x1237))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1239=IKcos(j0);
IkReal x1240=IKsin(j0);
IkReal x1241=(cj5*r01);
IkReal x1242=((1.0)*cj3);
IkReal x1243=(r11*sj5);
IkReal x1244=(r01*sj5);
IkReal x1245=(r10*sj5);
IkReal x1246=(cj5*r11);
IkReal x1247=(cj3*cj4);
IkReal x1248=(r00*sj5);
IkReal x1249=((1.0)*cj2);
IkReal x1250=((0.5723)*cj2);
IkReal x1251=((0.5723)*sj2);
IkReal x1252=(cj4*cj5*r00);
IkReal x1253=((1.0)*cj1*sj2);
IkReal x1254=(cj4*cj5*r10);
IkReal x1255=((1.0)*cj4*sj3);
IkReal x1256=(sj1*x1239);
IkReal x1257=(cj1*x1240);
IkReal x1258=((1.0)*cj5*sj4);
IkReal x1259=(cj1*x1239);
IkReal x1260=(sj1*x1240);
evalcond[0]=(x1239+((sj4*x1243))+(((-1.0)*r10*x1258)));
evalcond[1]=((((-1.0)*x1240))+(((-1.0)*r00*x1258))+((sj4*x1244)));
evalcond[2]=((((-1.0)*x1249*x1259))+(((-1.0)*x1242*x1252))+((sj3*x1248))+((sj3*x1241))+((x1244*x1247))+((sj2*x1256)));
evalcond[3]=((((-1.0)*x1249*x1257))+(((-1.0)*x1242*x1254))+((sj3*x1246))+((sj3*x1245))+((x1243*x1247))+((sj2*x1260)));
evalcond[4]=((((-1.0)*x1249*x1256))+(((-1.0)*x1239*x1253))+(((-1.0)*x1244*x1255))+((sj3*x1252))+((cj3*x1241))+((cj3*x1248)));
evalcond[5]=((((-1.0)*x1249*x1260))+((sj3*x1254))+(((-1.0)*x1243*x1255))+((cj3*x1245))+((cj3*x1246))+(((-1.0)*x1240*x1253)));
evalcond[6]=((((0.612)*x1259))+(((-0.163941)*x1240))+(((-0.1157)*x1248))+(((-0.1157)*x1241))+(((-1.0)*px))+((x1250*x1259))+(((-1.0)*x1251*x1256)));
evalcond[7]=((((0.612)*x1257))+(((-0.1157)*x1246))+(((-0.1157)*x1245))+(((-1.0)*py))+((x1250*x1257))+(((-1.0)*x1251*x1260))+(((0.163941)*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(cj3,-1);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(r22,-1);
if(!x1262.valid){
continue;
}
sj4array[0]=((-1.0)*(x1261.value)*(x1262.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKasin(sj4array[0]);
cj4array[0] = IKcos(j4array[0]);
sj4array[1] = sj4array[0];
j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1263=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1263);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1263);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1264=((4.0)*r01);
IkReal x1265=((16.0)*r00);
IkReal x1266=(cj3*sj2);
IkReal x1267=((8.0)*r00);
IkReal x1268=(cj2*cj3);
IkReal x1269=(cj4*r01);
IkReal x1270=((16.0)*cj1);
IkReal x1271=((8.0)*sj1);
IkReal x1272=((16.0)*sj1);
IkReal x1273=((8.0)*cj1);
IkReal x1274=(sj2*sj3);
IkReal x1275=(cj2*sj3);
IkReal x1276=(sj1*x1275);
IkReal x1277=((4.0)*cj4*r00);
IkReal x1278=(((sj1*x1264*x1266))+((x1264*x1276))+((cj1*x1264*x1274))+((sj1*x1274*x1277)));
IkReal x1279=(((cj1*x1266*x1277))+((cj1*x1275*x1277))+((cj1*x1264*x1268))+((sj1*x1268*x1277)));
IkReal x1280=(x1279+(((-1.0)*x1278)));
IkReal x1281=(((cj1*x1267*x1274))+((x1267*x1276))+((x1266*x1269*x1273))+((x1269*x1273*x1275))+(((-1.0)*cj1*x1267*x1268))+((x1268*x1269*x1271))+(((-1.0)*x1269*x1271*x1274))+((sj1*x1266*x1267)));
IkReal x1282=(x1278+(((-1.0)*x1279)));
op[0]=x1280;
op[1]=x1281;
op[2]=x1280;
op[3]=((((-1.0)*x1269*x1272*x1274))+((x1265*x1276))+(((-1.0)*cj1*x1265*x1268))+((sj1*x1265*x1266))+((cj1*x1265*x1274))+((x1266*x1269*x1270))+((x1268*x1269*x1272))+((x1269*x1270*x1275)));
op[4]=x1282;
op[5]=x1281;
op[6]=x1282;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1283=(cj5*sj4);
IkReal x1284=(sj4*sj5);
if( IKabs((((r01*x1284))+(((-1.0)*r00*x1283)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1283))+(((-1.0)*r11*x1284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1284))+(((-1.0)*r00*x1283))))+IKsqr((((r10*x1283))+(((-1.0)*r11*x1284))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((r01*x1284))+(((-1.0)*r00*x1283))), (((r10*x1283))+(((-1.0)*r11*x1284))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1285=IKcos(j0);
IkReal x1286=IKsin(j0);
IkReal x1287=(cj5*r01);
IkReal x1288=((1.0)*cj3);
IkReal x1289=(r11*sj5);
IkReal x1290=(r01*sj5);
IkReal x1291=(r10*sj5);
IkReal x1292=(cj5*r11);
IkReal x1293=(cj3*cj4);
IkReal x1294=(r00*sj5);
IkReal x1295=((1.0)*cj2);
IkReal x1296=((0.5723)*cj2);
IkReal x1297=((0.5723)*sj2);
IkReal x1298=(cj4*cj5*r00);
IkReal x1299=((1.0)*cj1*sj2);
IkReal x1300=(cj4*cj5*r10);
IkReal x1301=((1.0)*cj4*sj3);
IkReal x1302=(sj1*x1285);
IkReal x1303=(cj1*x1286);
IkReal x1304=((1.0)*cj5*sj4);
IkReal x1305=(cj1*x1285);
IkReal x1306=(sj1*x1286);
evalcond[0]=(x1285+((sj4*x1289))+(((-1.0)*r10*x1304)));
evalcond[1]=((((-1.0)*x1286))+(((-1.0)*r00*x1304))+((sj4*x1290)));
evalcond[2]=(((sj2*x1302))+((sj3*x1294))+(((-1.0)*x1288*x1298))+((x1290*x1293))+((sj3*x1287))+(((-1.0)*x1295*x1305)));
evalcond[3]=(((sj2*x1306))+((sj3*x1291))+((sj3*x1292))+(((-1.0)*x1288*x1300))+(((-1.0)*x1295*x1303))+((x1289*x1293)));
evalcond[4]=(((cj3*x1294))+((sj3*x1298))+(((-1.0)*x1295*x1302))+((cj3*x1287))+(((-1.0)*x1285*x1299))+(((-1.0)*x1290*x1301)));
evalcond[5]=((((-1.0)*x1286*x1299))+((cj3*x1292))+((cj3*x1291))+((sj3*x1300))+(((-1.0)*x1295*x1306))+(((-1.0)*x1289*x1301)));
evalcond[6]=((((0.612)*x1305))+(((-0.163941)*x1286))+(((-0.1157)*x1287))+(((-1.0)*x1297*x1302))+(((-1.0)*px))+((x1296*x1305))+(((-0.1157)*x1294)));
evalcond[7]=((((0.612)*x1303))+(((-1.0)*x1297*x1306))+(((-1.0)*py))+(((0.163941)*x1285))+((x1296*x1303))+(((-0.1157)*x1291))+(((-0.1157)*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal(((-0.1157)*r21)),IkReal(((-0.1157)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
IkReal x1307=((1.0)*(x1309.value));
if((((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21)))))),-1);
if(!x1310.valid){
continue;
}
if( (((-1.0)*(x1310.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1310.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
continue;
IkReal x1308=((-1.0)*(IKasin(((-1.0)*(x1310.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1))))))));
j5array[0]=((((-1.0)*x1307))+(((-1.0)*x1308)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1307))+(((1.0)*x1308)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1311=cj5*cj5;
IkReal x1312=r21*r21;
IkReal x1313=(sj3*x1311);
IkReal x1314=(((sj3*(r22*r22)))+((sj3*x1312))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1313*(r20*r20)))+(((-1.0)*x1312*x1313)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1315=cj5*cj5;
IkReal x1316=r21*r21;
IkReal x1317=((1.0)*cj3);
IkReal x1318=(cj3*x1315);
IkReal x1319=(((x1316*x1318))+(((-1.0)*x1317*(r22*r22)))+(((-1.0)*x1315*x1317*(r20*r20)))+(((-1.0)*x1316*x1317))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1319;
j4eval[1]=IKsign(x1319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1320=cj1*cj1;
IkReal x1321=cj2*cj2;
IkReal x1322=(cj1*sj1*sj2);
IkReal x1323=(cj2*x1320);
IkReal x1324=(x1320*x1321);
j0eval[0]=((7.53782945427275)+x1320+(((-6.96618904215118)*x1321))+(((13.9323780843024)*x1324))+(((14.8988561726246)*x1323))+(((-14.8988561726246)*x1322))+(((-13.9323780843024)*cj2*x1322)));
j0eval[1]=IKsign(((354403941481.0)+(((655054580000.0)*x1324))+(((-327527290000.0)*x1321))+(((700495200000.0)*x1323))+(((-700495200000.0)*x1322))+(((-655054580000.0)*cj2*x1322))+(((47016710000.0)*x1320))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1325=((1.0)*cj5);
IkReal x1326=((1.0)*sj5);
IkReal x1327=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1327;
j0eval[1]=((IKabs(((((-1.0)*r11*x1325))+(((-1.0)*r10*x1326)))))+(IKabs(((((-1.0)*r01*x1325))+(((-1.0)*r00*x1326))))));
j0eval[2]=IKsign(x1327);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1328=cj5*cj5;
IkReal x1329=r21*r21;
IkReal x1330=(sj1*sj2);
IkReal x1331=(r21*sj5);
IkReal x1332=(cj5*r20);
IkReal x1333=(cj1*cj2);
IkReal x1334=(x1329+(r22*r22)+(((-2.0)*x1331*x1332))+((x1328*(r20*r20)))+(((-1.0)*x1328*x1329)));
j4eval[0]=x1334;
j4eval[1]=IKsign(x1334);
j4eval[2]=((IKabs(((((-1.0)*x1330*x1332))+((x1330*x1331))+(((-1.0)*x1331*x1333))+((x1332*x1333)))))+(IKabs(((((-1.0)*r22*x1333))+((r22*x1330))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1335=IKsin(j0);
IkReal x1336=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x1335))+(((0.612)*x1336)));
evalcond[1]=((((0.163941)*x1336))+(((-1.0)*py))+(((0.612)*x1335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1337=((1.0)*cj5);
IkReal x1338=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1337)));
j4eval[0]=x1338;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1337)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1339=((1.0)*cj5);
IkReal x1340=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1339)));
j4eval[0]=x1340;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1339))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1341=cj5*cj5;
IkReal x1342=((1.0)*sj5);
IkReal x1343=(cj5*r20);
IkReal x1344=(r11*r21);
IkReal x1345=(x1344+(((-1.0)*r11*x1342*x1343))+(((-1.0)*cj5*r10*r21*x1342))+(((-1.0)*x1341*x1344))+((r12*r22))+((r10*r20*x1341)));
j4eval[0]=x1345;
j4eval[1]=IKsign(x1345);
j4eval[2]=((IKabs((((cj0*x1343))+(((-1.0)*cj0*r21*x1342)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1346=cj5*cj5;
IkReal x1347=((1.0)*sj5);
IkReal x1348=(cj5*r20);
IkReal x1349=(r11*r21);
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal((((cj0*x1348))+(((-1.0)*cj0*r21*x1347)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351=IKPowWithIntegerCheck(IKsign((x1349+(((-1.0)*cj5*r10*r21*x1347))+(((-1.0)*x1346*x1349))+((r12*r22))+((r10*r20*x1346))+(((-1.0)*r11*x1347*x1348)))),-1);
if(!x1351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1350.value)+(((1.5707963267949)*(x1351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1352=IKsin(j4);
IkReal x1353=IKcos(j4);
IkReal x1354=((1.0)*sj0);
IkReal x1355=(cj5*r00);
IkReal x1356=(r11*sj5);
IkReal x1357=(cj5*r10);
IkReal x1358=(r21*sj5);
IkReal x1359=(cj5*r20);
IkReal x1360=(r01*sj5);
IkReal x1361=((1.0)*x1353);
IkReal x1362=((1.0)*x1352);
evalcond[0]=((((-1.0)*x1359*x1362))+(((-1.0)*r22*x1361))+((x1352*x1358)));
evalcond[1]=((((-1.0)*r22*x1362))+((x1353*x1359))+(((-1.0)*x1358*x1361)));
evalcond[2]=((((-1.0)*r12*x1361))+cj0+(((-1.0)*x1357*x1362))+((x1352*x1356)));
evalcond[3]=((((-1.0)*x1354))+(((-1.0)*r02*x1361))+(((-1.0)*x1355*x1362))+((x1352*x1360)));
evalcond[4]=((((-1.0)*r02*x1362))+((x1353*x1355))+(((-1.0)*x1360*x1361))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1354))+(((-1.0)*r12*x1362))+(((-1.0)*x1356*x1361))+((x1353*x1357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1363=((1.0)*cj5);
CheckValue<IkReal> x1364 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1364.valid){
continue;
}
CheckValue<IkReal> x1365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1363))+(((-1.0)*r10*sj5)))),-1);
if(!x1365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1364.value)+(((1.5707963267949)*(x1365.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1366=IKsin(j4);
IkReal x1367=IKcos(j4);
IkReal x1368=((1.0)*sj0);
IkReal x1369=(cj5*r00);
IkReal x1370=(r11*sj5);
IkReal x1371=(cj5*r10);
IkReal x1372=(r21*sj5);
IkReal x1373=(cj5*r20);
IkReal x1374=(r01*sj5);
IkReal x1375=((1.0)*x1367);
IkReal x1376=((1.0)*x1366);
evalcond[0]=(((x1366*x1372))+(((-1.0)*r22*x1375))+(((-1.0)*x1373*x1376)));
evalcond[1]=((((-1.0)*r22*x1376))+((x1367*x1373))+(((-1.0)*x1372*x1375)));
evalcond[2]=(cj0+(((-1.0)*x1371*x1376))+((x1366*x1370))+(((-1.0)*r12*x1375)));
evalcond[3]=(((x1366*x1374))+(((-1.0)*r02*x1375))+(((-1.0)*x1369*x1376))+(((-1.0)*x1368)));
evalcond[4]=(((x1367*x1369))+(((-1.0)*r02*x1376))+(((-1.0)*x1374*x1375))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1370*x1375))+((x1367*x1371))+(((-1.0)*r12*x1376))+(((-1.0)*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1377=((1.0)*cj5);
CheckValue<IkReal> x1378 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1377)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1378.valid){
continue;
}
CheckValue<IkReal> x1379=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1377))+(((-1.0)*r00*sj5)))),-1);
if(!x1379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1378.value)+(((1.5707963267949)*(x1379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1380=IKsin(j4);
IkReal x1381=IKcos(j4);
IkReal x1382=((1.0)*sj0);
IkReal x1383=(cj5*r00);
IkReal x1384=(r11*sj5);
IkReal x1385=(cj5*r10);
IkReal x1386=(r21*sj5);
IkReal x1387=(cj5*r20);
IkReal x1388=(r01*sj5);
IkReal x1389=((1.0)*x1381);
IkReal x1390=((1.0)*x1380);
evalcond[0]=(((x1380*x1386))+(((-1.0)*r22*x1389))+(((-1.0)*x1387*x1390)));
evalcond[1]=(((x1381*x1387))+(((-1.0)*r22*x1390))+(((-1.0)*x1386*x1389)));
evalcond[2]=((((-1.0)*r12*x1389))+(((-1.0)*x1385*x1390))+((x1380*x1384))+cj0);
evalcond[3]=((((-1.0)*x1382))+((x1380*x1388))+(((-1.0)*r02*x1389))+(((-1.0)*x1383*x1390)));
evalcond[4]=(((x1381*x1383))+(((-1.0)*r02*x1390))+(((-1.0)*x1388*x1389))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1382))+((x1381*x1385))+(((-1.0)*r12*x1390))+(((-1.0)*x1384*x1389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1391=IKsin(j0);
IkReal x1392=IKcos(j0);
evalcond[0]=((((-0.163941)*x1391))+(((-1.0)*px))+(((0.612)*x1392)));
evalcond[1]=((((0.163941)*x1392))+(((-1.0)*py))+(((0.612)*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1393=((1.0)*cj5);
IkReal x1394=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1393)));
j4eval[0]=x1394;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1393))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1395=cj5*cj5;
IkReal x1396=((1.0)*r21);
IkReal x1397=(cj5*sj5);
IkReal x1398=((1.0)*r20);
IkReal x1399=((((-1.0)*r01*x1395*x1396))+((r01*r21))+(((-1.0)*r01*x1397*x1398))+(((-1.0)*r00*x1396*x1397))+((r02*r22))+((r00*r20*x1395)));
j4eval[0]=x1399;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1398))))));
j4eval[2]=IKsign(x1399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1400=cj5*cj5;
IkReal x1401=(r21*sj5);
IkReal x1402=(r11*r21);
IkReal x1403=((1.0)*cj5*r20);
IkReal x1404=((((-1.0)*cj5*r10*x1401))+(((-1.0)*r11*sj5*x1403))+((r10*r20*x1400))+((r12*r22))+(((-1.0)*x1400*x1402))+x1402);
j4eval[0]=x1404;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1403))+((sj0*x1401))))));
j4eval[2]=IKsign(x1404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1405=cj5*cj5;
IkReal x1406=(r21*sj5);
IkReal x1407=(r11*r21);
IkReal x1408=((1.0)*cj5*r20);
CheckValue<IkReal> x1409 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1408))+((sj0*x1406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1409.valid){
continue;
}
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1405*x1407))+(((-1.0)*cj5*r10*x1406))+(((-1.0)*r11*sj5*x1408))+((r10*r20*x1405))+((r12*r22))+x1407)),-1);
if(!x1410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1409.value)+(((1.5707963267949)*(x1410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1411=IKsin(j4);
IkReal x1412=IKcos(j4);
IkReal x1413=(r11*sj5);
IkReal x1414=(cj5*r00);
IkReal x1415=(cj5*r10);
IkReal x1416=(r21*sj5);
IkReal x1417=(cj5*r20);
IkReal x1418=(r01*sj5);
IkReal x1419=((1.0)*x1412);
IkReal x1420=((1.0)*x1411);
evalcond[0]=((((-1.0)*r22*x1419))+(((-1.0)*x1417*x1420))+((x1411*x1416)));
evalcond[1]=(((x1412*x1417))+(((-1.0)*x1416*x1419))+(((-1.0)*r22*x1420)));
evalcond[2]=((((-1.0)*x1415*x1420))+cj0+((x1411*x1413))+(((-1.0)*r12*x1419)));
evalcond[3]=(cj0+((x1412*x1414))+(((-1.0)*x1418*x1419))+(((-1.0)*r02*x1420)));
evalcond[4]=(sj0+((x1412*x1415))+(((-1.0)*x1413*x1419))+(((-1.0)*r12*x1420)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1419))+((x1411*x1418))+(((-1.0)*x1414*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1421=cj5*cj5;
IkReal x1422=((1.0)*r21);
IkReal x1423=(cj5*sj5);
IkReal x1424=((1.0)*r20);
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1421*x1422))+((r00*r20*x1421))+((r01*r21))+(((-1.0)*r00*x1422*x1423))+((r02*r22))+(((-1.0)*r01*x1423*x1424)))),-1);
if(!x1425.valid){
continue;
}
CheckValue<IkReal> x1426 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1425.value)))+(x1426.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1427=IKsin(j4);
IkReal x1428=IKcos(j4);
IkReal x1429=(r11*sj5);
IkReal x1430=(cj5*r00);
IkReal x1431=(cj5*r10);
IkReal x1432=(r21*sj5);
IkReal x1433=(cj5*r20);
IkReal x1434=(r01*sj5);
IkReal x1435=((1.0)*x1428);
IkReal x1436=((1.0)*x1427);
evalcond[0]=((((-1.0)*r22*x1435))+((x1427*x1432))+(((-1.0)*x1433*x1436)));
evalcond[1]=(((x1428*x1433))+(((-1.0)*r22*x1436))+(((-1.0)*x1432*x1435)));
evalcond[2]=((((-1.0)*r12*x1435))+cj0+(((-1.0)*x1431*x1436))+((x1427*x1429)));
evalcond[3]=(((x1428*x1430))+cj0+(((-1.0)*x1434*x1435))+(((-1.0)*r02*x1436)));
evalcond[4]=(((x1428*x1431))+(((-1.0)*r12*x1436))+sj0+(((-1.0)*x1429*x1435)));
evalcond[5]=((((-1.0)*sj0))+((x1427*x1434))+(((-1.0)*r02*x1435))+(((-1.0)*x1430*x1436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1437=((1.0)*cj5);
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1437)))),-1);
if(!x1439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1438.value)+(((1.5707963267949)*(x1439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1440=IKsin(j4);
IkReal x1441=IKcos(j4);
IkReal x1442=(r11*sj5);
IkReal x1443=(cj5*r00);
IkReal x1444=(cj5*r10);
IkReal x1445=(r21*sj5);
IkReal x1446=(cj5*r20);
IkReal x1447=(r01*sj5);
IkReal x1448=((1.0)*x1441);
IkReal x1449=((1.0)*x1440);
evalcond[0]=((((-1.0)*x1446*x1449))+(((-1.0)*r22*x1448))+((x1440*x1445)));
evalcond[1]=((((-1.0)*r22*x1449))+(((-1.0)*x1445*x1448))+((x1441*x1446)));
evalcond[2]=(cj0+((x1440*x1442))+(((-1.0)*r12*x1448))+(((-1.0)*x1444*x1449)));
evalcond[3]=(cj0+((x1441*x1443))+(((-1.0)*x1447*x1448))+(((-1.0)*r02*x1449)));
evalcond[4]=(sj0+((x1441*x1444))+(((-1.0)*r12*x1449))+(((-1.0)*x1442*x1448)));
evalcond[5]=((((-1.0)*sj0))+((x1440*x1447))+(((-1.0)*r02*x1448))+(((-1.0)*x1443*x1449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1450=((1.0)*cj5);
IkReal x1451=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1450)));
j4eval[0]=x1451;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1450))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1452=((1.0)*cj5);
IkReal x1453=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1452)));
j4eval[0]=x1453;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1452))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1454=cj5*cj5;
IkReal x1455=((1.0)*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(r11*r21);
IkReal x1458=(((r10*r20*x1454))+((r12*r22))+(((-1.0)*x1454*x1457))+(((-1.0)*r11*x1455*x1456))+x1457+(((-1.0)*cj5*r10*r21*x1455)));
j4eval[0]=x1458;
j4eval[1]=IKsign(x1458);
j4eval[2]=((IKabs((((cj0*x1456))+(((-1.0)*cj0*r21*x1455)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1459=cj5*cj5;
IkReal x1460=((1.0)*sj5);
IkReal x1461=(cj5*r20);
IkReal x1462=(r11*r21);
CheckValue<IkReal> x1463 = IKatan2WithCheck(IkReal((((cj0*x1461))+(((-1.0)*cj0*r21*x1460)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign((((r10*r20*x1459))+(((-1.0)*r11*x1460*x1461))+(((-1.0)*cj5*r10*r21*x1460))+((r12*r22))+x1462+(((-1.0)*x1459*x1462)))),-1);
if(!x1464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1463.value)+(((1.5707963267949)*(x1464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1465=IKsin(j4);
IkReal x1466=IKcos(j4);
IkReal x1467=((1.0)*sj0);
IkReal x1468=(cj5*r00);
IkReal x1469=(r11*sj5);
IkReal x1470=(cj5*r10);
IkReal x1471=(r21*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r01*sj5);
IkReal x1474=((1.0)*x1466);
IkReal x1475=((1.0)*x1465);
evalcond[0]=((((-1.0)*r22*x1474))+((x1465*x1471))+(((-1.0)*x1472*x1475)));
evalcond[1]=((((-1.0)*r22*x1475))+((x1466*x1472))+(((-1.0)*x1471*x1474)));
evalcond[2]=((((-1.0)*x1470*x1475))+cj0+((x1465*x1469))+(((-1.0)*r12*x1474)));
evalcond[3]=((((-1.0)*x1467))+(((-1.0)*x1468*x1475))+((x1465*x1473))+(((-1.0)*r02*x1474)));
evalcond[4]=(((x1466*x1468))+(((-1.0)*r02*x1475))+(((-1.0)*cj0))+(((-1.0)*x1473*x1474)));
evalcond[5]=(((x1466*x1470))+(((-1.0)*x1467))+(((-1.0)*r12*x1475))+(((-1.0)*x1469*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=((1.0)*cj5);
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1476))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1476)))),-1);
if(!x1478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1477.value)+(((1.5707963267949)*(x1478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1479=IKsin(j4);
IkReal x1480=IKcos(j4);
IkReal x1481=((1.0)*sj0);
IkReal x1482=(cj5*r00);
IkReal x1483=(r11*sj5);
IkReal x1484=(cj5*r10);
IkReal x1485=(r21*sj5);
IkReal x1486=(cj5*r20);
IkReal x1487=(r01*sj5);
IkReal x1488=((1.0)*x1480);
IkReal x1489=((1.0)*x1479);
evalcond[0]=((((-1.0)*x1486*x1489))+(((-1.0)*r22*x1488))+((x1479*x1485)));
evalcond[1]=(((x1480*x1486))+(((-1.0)*x1485*x1488))+(((-1.0)*r22*x1489)));
evalcond[2]=(cj0+(((-1.0)*r12*x1488))+(((-1.0)*x1484*x1489))+((x1479*x1483)));
evalcond[3]=((((-1.0)*x1482*x1489))+(((-1.0)*x1481))+(((-1.0)*r02*x1488))+((x1479*x1487)));
evalcond[4]=((((-1.0)*x1487*x1488))+((x1480*x1482))+(((-1.0)*r02*x1489))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1489))+(((-1.0)*x1481))+((x1480*x1484))+(((-1.0)*x1483*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1490=((1.0)*cj5);
CheckValue<IkReal> x1491 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1490))+(((-1.0)*r00*sj5)))),-1);
if(!x1492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1491.value)+(((1.5707963267949)*(x1492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1493=IKsin(j4);
IkReal x1494=IKcos(j4);
IkReal x1495=((1.0)*sj0);
IkReal x1496=(cj5*r00);
IkReal x1497=(r11*sj5);
IkReal x1498=(cj5*r10);
IkReal x1499=(r21*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r01*sj5);
IkReal x1502=((1.0)*x1494);
IkReal x1503=((1.0)*x1493);
evalcond[0]=((((-1.0)*r22*x1502))+((x1493*x1499))+(((-1.0)*x1500*x1503)));
evalcond[1]=((((-1.0)*x1499*x1502))+((x1494*x1500))+(((-1.0)*r22*x1503)));
evalcond[2]=((((-1.0)*x1498*x1503))+cj0+((x1493*x1497))+(((-1.0)*r12*x1502)));
evalcond[3]=((((-1.0)*x1495))+(((-1.0)*r02*x1502))+(((-1.0)*x1496*x1503))+((x1493*x1501)));
evalcond[4]=(((x1494*x1496))+(((-1.0)*x1501*x1502))+(((-1.0)*r02*x1503))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1495))+((x1494*x1498))+(((-1.0)*x1497*x1502))+(((-1.0)*r12*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1504=((1.0)*cj5);
IkReal x1505=((((-1.0)*r01*x1504))+(((-1.0)*r00*sj5)));
j4eval[0]=x1505;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1504))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1506=cj5*cj5;
IkReal x1507=((1.0)*r21);
IkReal x1508=(cj5*sj5);
IkReal x1509=((1.0)*r20);
IkReal x1510=(((r01*r21))+((r00*r20*x1506))+(((-1.0)*r01*x1506*x1507))+((r02*r22))+(((-1.0)*r00*x1507*x1508))+(((-1.0)*r01*x1508*x1509)));
j4eval[0]=x1510;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1509)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1511=cj5*cj5;
IkReal x1512=(r21*sj5);
IkReal x1513=(r11*r21);
IkReal x1514=((1.0)*cj5*r20);
IkReal x1515=((((-1.0)*x1511*x1513))+((r12*r22))+(((-1.0)*r11*sj5*x1514))+x1513+((r10*r20*x1511))+(((-1.0)*cj5*r10*x1512)));
j4eval[0]=x1515;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1514))+((sj0*x1512))))));
j4eval[2]=IKsign(x1515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1516=cj5*cj5;
IkReal x1517=(r21*sj5);
IkReal x1518=(r11*r21);
IkReal x1519=((1.0)*cj5*r20);
CheckValue<IkReal> x1520 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1519))+((sj0*x1517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1520.valid){
continue;
}
CheckValue<IkReal> x1521=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1516*x1518))+((r12*r22))+(((-1.0)*r11*sj5*x1519))+x1518+((r10*r20*x1516))+(((-1.0)*cj5*r10*x1517)))),-1);
if(!x1521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1520.value)+(((1.5707963267949)*(x1521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1522=IKsin(j4);
IkReal x1523=IKcos(j4);
IkReal x1524=(r11*sj5);
IkReal x1525=(cj5*r00);
IkReal x1526=(cj5*r10);
IkReal x1527=(r21*sj5);
IkReal x1528=(cj5*r20);
IkReal x1529=(r01*sj5);
IkReal x1530=((1.0)*x1523);
IkReal x1531=((1.0)*x1522);
evalcond[0]=(((x1522*x1527))+(((-1.0)*r22*x1530))+(((-1.0)*x1528*x1531)));
evalcond[1]=((((-1.0)*r22*x1531))+((x1523*x1528))+(((-1.0)*x1527*x1530)));
evalcond[2]=((((-1.0)*r12*x1530))+cj0+((x1522*x1524))+(((-1.0)*x1526*x1531)));
evalcond[3]=((((-1.0)*x1529*x1530))+cj0+((x1523*x1525))+(((-1.0)*r02*x1531)));
evalcond[4]=((((-1.0)*x1524*x1530))+sj0+(((-1.0)*r12*x1531))+((x1523*x1526)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1525*x1531))+((x1522*x1529))+(((-1.0)*r02*x1530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1532=cj5*cj5;
IkReal x1533=((1.0)*r21);
IkReal x1534=(cj5*sj5);
IkReal x1535=((1.0)*r20);
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1532*x1533))+((r01*r21))+(((-1.0)*r01*x1534*x1535))+((r02*r22))+(((-1.0)*r00*x1533*x1534))+((r00*r20*x1532)))),-1);
if(!x1536.valid){
continue;
}
CheckValue<IkReal> x1537 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1536.value)))+(x1537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1538=IKsin(j4);
IkReal x1539=IKcos(j4);
IkReal x1540=(r11*sj5);
IkReal x1541=(cj5*r00);
IkReal x1542=(cj5*r10);
IkReal x1543=(r21*sj5);
IkReal x1544=(cj5*r20);
IkReal x1545=(r01*sj5);
IkReal x1546=((1.0)*x1539);
IkReal x1547=((1.0)*x1538);
evalcond[0]=(((x1538*x1543))+(((-1.0)*r22*x1546))+(((-1.0)*x1544*x1547)));
evalcond[1]=((((-1.0)*x1543*x1546))+((x1539*x1544))+(((-1.0)*r22*x1547)));
evalcond[2]=(((x1538*x1540))+cj0+(((-1.0)*x1542*x1547))+(((-1.0)*r12*x1546)));
evalcond[3]=((((-1.0)*r02*x1547))+cj0+((x1539*x1541))+(((-1.0)*x1545*x1546)));
evalcond[4]=(sj0+((x1539*x1542))+(((-1.0)*x1540*x1546))+(((-1.0)*r12*x1547)));
evalcond[5]=((((-1.0)*sj0))+((x1538*x1545))+(((-1.0)*r02*x1546))+(((-1.0)*x1541*x1547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1548=((1.0)*cj5);
CheckValue<IkReal> x1549 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1548)))),-1);
if(!x1550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1549.value)+(((1.5707963267949)*(x1550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1551=IKsin(j4);
IkReal x1552=IKcos(j4);
IkReal x1553=(r11*sj5);
IkReal x1554=(cj5*r00);
IkReal x1555=(cj5*r10);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=(r01*sj5);
IkReal x1559=((1.0)*x1552);
IkReal x1560=((1.0)*x1551);
evalcond[0]=(((x1551*x1556))+(((-1.0)*r22*x1559))+(((-1.0)*x1557*x1560)));
evalcond[1]=(((x1552*x1557))+(((-1.0)*r22*x1560))+(((-1.0)*x1556*x1559)));
evalcond[2]=(((x1551*x1553))+cj0+(((-1.0)*x1555*x1560))+(((-1.0)*r12*x1559)));
evalcond[3]=((((-1.0)*x1558*x1559))+(((-1.0)*r02*x1560))+cj0+((x1552*x1554)));
evalcond[4]=(sj0+((x1552*x1555))+(((-1.0)*x1553*x1559))+(((-1.0)*r12*x1560)));
evalcond[5]=(((x1551*x1558))+(((-1.0)*sj0))+(((-1.0)*r02*x1559))+(((-1.0)*x1554*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1561=IKcos(j0);
IkReal x1562=IKsin(j0);
evalcond[0]=((((-0.163941)*x1562))+(((-0.612)*x1561))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x1561))+(((-0.612)*x1562))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1563=((1.0)*cj5);
IkReal x1564=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1563)));
j4eval[0]=x1564;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1563)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1565=cj5*cj5;
IkReal x1566=((1.0)*r21);
IkReal x1567=(cj5*sj5);
IkReal x1568=((1.0)*r20);
IkReal x1569=((((-1.0)*r00*x1566*x1567))+(((-1.0)*r01*x1565*x1566))+((r01*r21))+((r00*r20*x1565))+((r02*r22))+(((-1.0)*r01*x1567*x1568)));
j4eval[0]=x1569;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1568))))));
j4eval[2]=IKsign(x1569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1570=cj5*cj5;
IkReal x1571=(r21*sj5);
IkReal x1572=(r11*r21);
IkReal x1573=((1.0)*cj5*r20);
IkReal x1574=((((-1.0)*cj5*r10*x1571))+(((-1.0)*x1570*x1572))+(((-1.0)*r11*sj5*x1573))+((r12*r22))+x1572+((r10*r20*x1570)));
j4eval[0]=x1574;
j4eval[1]=((IKabs((((sj0*x1571))+(((-1.0)*sj0*x1573)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1575=cj5*cj5;
IkReal x1576=(r21*sj5);
IkReal x1577=(r11*r21);
IkReal x1578=((1.0)*cj5*r20);
CheckValue<IkReal> x1579=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1576))+(((-1.0)*r11*sj5*x1578))+((r12*r22))+x1577+(((-1.0)*x1575*x1577))+((r10*r20*x1575)))),-1);
if(!x1579.valid){
continue;
}
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1576))+(((-1.0)*sj0*x1578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1579.value)))+(x1580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1581=IKsin(j4);
IkReal x1582=IKcos(j4);
IkReal x1583=(r11*sj5);
IkReal x1584=(cj5*r00);
IkReal x1585=(cj5*r10);
IkReal x1586=(r21*sj5);
IkReal x1587=(cj5*r20);
IkReal x1588=(r01*sj5);
IkReal x1589=((1.0)*x1582);
IkReal x1590=((1.0)*x1581);
evalcond[0]=((((-1.0)*r22*x1589))+((x1581*x1586))+(((-1.0)*x1587*x1590)));
evalcond[1]=(((x1582*x1587))+(((-1.0)*r22*x1590))+(((-1.0)*x1586*x1589)));
evalcond[2]=((((-1.0)*x1585*x1590))+cj0+(((-1.0)*r12*x1589))+((x1581*x1583)));
evalcond[3]=(cj0+(((-1.0)*r02*x1590))+((x1582*x1584))+(((-1.0)*x1588*x1589)));
evalcond[4]=(sj0+((x1582*x1585))+(((-1.0)*r12*x1590))+(((-1.0)*x1583*x1589)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1589))+(((-1.0)*x1584*x1590))+((x1581*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1591=cj5*cj5;
IkReal x1592=((1.0)*r21);
IkReal x1593=(cj5*sj5);
IkReal x1594=((1.0)*r20);
CheckValue<IkReal> x1595=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1593*x1594))+(((-1.0)*r00*x1592*x1593))+((r00*r20*x1591))+((r02*r22))+(((-1.0)*r01*x1591*x1592)))),-1);
if(!x1595.valid){
continue;
}
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1594)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1595.value)))+(x1596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1597=IKsin(j4);
IkReal x1598=IKcos(j4);
IkReal x1599=(r11*sj5);
IkReal x1600=(cj5*r00);
IkReal x1601=(cj5*r10);
IkReal x1602=(r21*sj5);
IkReal x1603=(cj5*r20);
IkReal x1604=(r01*sj5);
IkReal x1605=((1.0)*x1598);
IkReal x1606=((1.0)*x1597);
evalcond[0]=((((-1.0)*r22*x1605))+(((-1.0)*x1603*x1606))+((x1597*x1602)));
evalcond[1]=((((-1.0)*r22*x1606))+((x1598*x1603))+(((-1.0)*x1602*x1605)));
evalcond[2]=(cj0+(((-1.0)*x1601*x1606))+((x1597*x1599))+(((-1.0)*r12*x1605)));
evalcond[3]=(cj0+((x1598*x1600))+(((-1.0)*r02*x1606))+(((-1.0)*x1604*x1605)));
evalcond[4]=(sj0+(((-1.0)*x1599*x1605))+((x1598*x1601))+(((-1.0)*r12*x1606)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1600*x1606))+(((-1.0)*r02*x1605))+((x1597*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1607=((1.0)*cj5);
CheckValue<IkReal> x1608 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1607))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1607)))),-1);
if(!x1609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1608.value)+(((1.5707963267949)*(x1609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1610=IKsin(j4);
IkReal x1611=IKcos(j4);
IkReal x1612=(r11*sj5);
IkReal x1613=(cj5*r00);
IkReal x1614=(cj5*r10);
IkReal x1615=(r21*sj5);
IkReal x1616=(cj5*r20);
IkReal x1617=(r01*sj5);
IkReal x1618=((1.0)*x1611);
IkReal x1619=((1.0)*x1610);
evalcond[0]=((((-1.0)*x1616*x1619))+(((-1.0)*r22*x1618))+((x1610*x1615)));
evalcond[1]=((((-1.0)*r22*x1619))+((x1611*x1616))+(((-1.0)*x1615*x1618)));
evalcond[2]=((((-1.0)*r12*x1618))+cj0+(((-1.0)*x1614*x1619))+((x1610*x1612)));
evalcond[3]=(cj0+(((-1.0)*r02*x1619))+(((-1.0)*x1617*x1618))+((x1611*x1613)));
evalcond[4]=((((-1.0)*r12*x1619))+sj0+(((-1.0)*x1612*x1618))+((x1611*x1614)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1618))+(((-1.0)*x1613*x1619))+((x1610*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1620=IKcos(j0);
IkReal x1621=IKsin(j0);
evalcond[0]=((((-0.163941)*x1621))+(((-0.612)*x1620))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x1620))+(((-0.612)*x1621))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1622=((1.0)*cj5);
IkReal x1623=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1622)));
j4eval[0]=x1623;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1622)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1624=((1.0)*cj5);
IkReal x1625=((((-1.0)*r11*x1624))+(((-1.0)*r10*sj5)));
j4eval[0]=x1625;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1624))))));
j4eval[2]=IKsign(x1625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1626=cj5*cj5;
IkReal x1627=((1.0)*sj5);
IkReal x1628=(cj5*r20);
IkReal x1629=(r11*r21);
IkReal x1630=(x1629+(((-1.0)*x1626*x1629))+((r10*r20*x1626))+((r12*r22))+(((-1.0)*r11*x1627*x1628))+(((-1.0)*cj5*r10*r21*x1627)));
j4eval[0]=x1630;
j4eval[1]=IKsign(x1630);
j4eval[2]=((IKabs((((cj0*x1628))+(((-1.0)*cj0*r21*x1627)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1631=cj5*cj5;
IkReal x1632=((1.0)*sj5);
IkReal x1633=(cj5*r20);
IkReal x1634=(r11*r21);
CheckValue<IkReal> x1635=IKPowWithIntegerCheck(IKsign((x1634+(((-1.0)*cj5*r10*r21*x1632))+((r12*r22))+((r10*r20*x1631))+(((-1.0)*r11*x1632*x1633))+(((-1.0)*x1631*x1634)))),-1);
if(!x1635.valid){
continue;
}
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1632))+((cj0*x1633)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1635.value)))+(x1636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1637=IKsin(j4);
IkReal x1638=IKcos(j4);
IkReal x1639=((1.0)*sj0);
IkReal x1640=(cj5*r00);
IkReal x1641=(r11*sj5);
IkReal x1642=(cj5*r10);
IkReal x1643=(r21*sj5);
IkReal x1644=(cj5*r20);
IkReal x1645=(r01*sj5);
IkReal x1646=((1.0)*x1638);
IkReal x1647=((1.0)*x1637);
evalcond[0]=(((x1637*x1643))+(((-1.0)*r22*x1646))+(((-1.0)*x1644*x1647)));
evalcond[1]=((((-1.0)*r22*x1647))+(((-1.0)*x1643*x1646))+((x1638*x1644)));
evalcond[2]=(((x1637*x1641))+cj0+(((-1.0)*r12*x1646))+(((-1.0)*x1642*x1647)));
evalcond[3]=(((x1637*x1645))+(((-1.0)*x1639))+(((-1.0)*x1640*x1647))+(((-1.0)*r02*x1646)));
evalcond[4]=((((-1.0)*x1645*x1646))+(((-1.0)*r02*x1647))+(((-1.0)*cj0))+((x1638*x1640)));
evalcond[5]=((((-1.0)*x1641*x1646))+(((-1.0)*r12*x1647))+(((-1.0)*x1639))+((x1638*x1642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1648=((1.0)*cj5);
CheckValue<IkReal> x1649 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1648))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1649.valid){
continue;
}
CheckValue<IkReal> x1650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1648)))),-1);
if(!x1650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1649.value)+(((1.5707963267949)*(x1650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1651=IKsin(j4);
IkReal x1652=IKcos(j4);
IkReal x1653=((1.0)*sj0);
IkReal x1654=(cj5*r00);
IkReal x1655=(r11*sj5);
IkReal x1656=(cj5*r10);
IkReal x1657=(r21*sj5);
IkReal x1658=(cj5*r20);
IkReal x1659=(r01*sj5);
IkReal x1660=((1.0)*x1652);
IkReal x1661=((1.0)*x1651);
evalcond[0]=((((-1.0)*r22*x1660))+((x1651*x1657))+(((-1.0)*x1658*x1661)));
evalcond[1]=((((-1.0)*r22*x1661))+(((-1.0)*x1657*x1660))+((x1652*x1658)));
evalcond[2]=((((-1.0)*x1656*x1661))+cj0+(((-1.0)*r12*x1660))+((x1651*x1655)));
evalcond[3]=((((-1.0)*x1654*x1661))+(((-1.0)*x1653))+((x1651*x1659))+(((-1.0)*r02*x1660)));
evalcond[4]=((((-1.0)*r02*x1661))+(((-1.0)*cj0))+((x1652*x1654))+(((-1.0)*x1659*x1660)));
evalcond[5]=((((-1.0)*r12*x1661))+(((-1.0)*x1655*x1660))+(((-1.0)*x1653))+((x1652*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1662=((1.0)*cj5);
CheckValue<IkReal> x1663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1662))+(((-1.0)*r00*sj5)))),-1);
if(!x1663.valid){
continue;
}
CheckValue<IkReal> x1664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1663.value)))+(x1664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j4);
IkReal x1666=IKcos(j4);
IkReal x1667=((1.0)*sj0);
IkReal x1668=(cj5*r00);
IkReal x1669=(r11*sj5);
IkReal x1670=(cj5*r10);
IkReal x1671=(r21*sj5);
IkReal x1672=(cj5*r20);
IkReal x1673=(r01*sj5);
IkReal x1674=((1.0)*x1666);
IkReal x1675=((1.0)*x1665);
evalcond[0]=((((-1.0)*x1672*x1675))+((x1665*x1671))+(((-1.0)*r22*x1674)));
evalcond[1]=(((x1666*x1672))+(((-1.0)*x1671*x1674))+(((-1.0)*r22*x1675)));
evalcond[2]=(cj0+(((-1.0)*r12*x1674))+(((-1.0)*x1670*x1675))+((x1665*x1669)));
evalcond[3]=(((x1665*x1673))+(((-1.0)*x1668*x1675))+(((-1.0)*r02*x1674))+(((-1.0)*x1667)));
evalcond[4]=((((-1.0)*x1673*x1674))+(((-1.0)*r02*x1675))+((x1666*x1668))+(((-1.0)*cj0)));
evalcond[5]=(((x1666*x1670))+(((-1.0)*x1669*x1674))+(((-1.0)*r12*x1675))+(((-1.0)*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1676=((1.0)*cj5);
IkReal x1677=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1676)));
j4eval[0]=x1677;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1676)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1678=cj5*cj5;
IkReal x1679=((1.0)*r21);
IkReal x1680=(cj5*sj5);
IkReal x1681=((1.0)*r20);
IkReal x1682=(((r01*r21))+(((-1.0)*r00*x1679*x1680))+(((-1.0)*r01*x1680*x1681))+(((-1.0)*r01*x1678*x1679))+((r02*r22))+((r00*r20*x1678)));
j4eval[0]=x1682;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1681)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1683=cj5*cj5;
IkReal x1684=(r21*sj5);
IkReal x1685=(r11*r21);
IkReal x1686=((1.0)*cj5*r20);
IkReal x1687=((((-1.0)*cj5*r10*x1684))+(((-1.0)*r11*sj5*x1686))+x1685+((r12*r22))+(((-1.0)*x1683*x1685))+((r10*r20*x1683)));
j4eval[0]=x1687;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1686))+((sj0*x1684))))));
j4eval[2]=IKsign(x1687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1688=cj5*cj5;
IkReal x1689=(r21*sj5);
IkReal x1690=(r11*r21);
IkReal x1691=((1.0)*cj5*r20);
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1691))+((sj0*x1689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1689))+x1690+((r12*r22))+(((-1.0)*r11*sj5*x1691))+(((-1.0)*x1688*x1690))+((r10*r20*x1688)))),-1);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1692.value)+(((1.5707963267949)*(x1693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=(r11*sj5);
IkReal x1697=(cj5*r00);
IkReal x1698=(cj5*r10);
IkReal x1699=(r21*sj5);
IkReal x1700=(cj5*r20);
IkReal x1701=(r01*sj5);
IkReal x1702=((1.0)*x1695);
IkReal x1703=((1.0)*x1694);
evalcond[0]=((((-1.0)*x1700*x1703))+(((-1.0)*r22*x1702))+((x1694*x1699)));
evalcond[1]=((((-1.0)*x1699*x1702))+(((-1.0)*r22*x1703))+((x1695*x1700)));
evalcond[2]=((((-1.0)*x1698*x1703))+cj0+((x1694*x1696))+(((-1.0)*r12*x1702)));
evalcond[3]=(cj0+((x1695*x1697))+(((-1.0)*r02*x1703))+(((-1.0)*x1701*x1702)));
evalcond[4]=(sj0+((x1695*x1698))+(((-1.0)*x1696*x1702))+(((-1.0)*r12*x1703)));
evalcond[5]=((((-1.0)*sj0))+((x1694*x1701))+(((-1.0)*r02*x1702))+(((-1.0)*x1697*x1703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1704=cj5*cj5;
IkReal x1705=((1.0)*r21);
IkReal x1706=(cj5*sj5);
IkReal x1707=((1.0)*r20);
CheckValue<IkReal> x1708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1708.valid){
continue;
}
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1706*x1707))+((r01*r21))+((r00*r20*x1704))+(((-1.0)*r00*x1705*x1706))+((r02*r22))+(((-1.0)*r01*x1704*x1705)))),-1);
if(!x1709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1708.value)+(((1.5707963267949)*(x1709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1710=IKsin(j4);
IkReal x1711=IKcos(j4);
IkReal x1712=(r11*sj5);
IkReal x1713=(cj5*r00);
IkReal x1714=(cj5*r10);
IkReal x1715=(r21*sj5);
IkReal x1716=(cj5*r20);
IkReal x1717=(r01*sj5);
IkReal x1718=((1.0)*x1711);
IkReal x1719=((1.0)*x1710);
evalcond[0]=(((x1710*x1715))+(((-1.0)*x1716*x1719))+(((-1.0)*r22*x1718)));
evalcond[1]=(((x1711*x1716))+(((-1.0)*r22*x1719))+(((-1.0)*x1715*x1718)));
evalcond[2]=((((-1.0)*x1714*x1719))+((x1710*x1712))+cj0+(((-1.0)*r12*x1718)));
evalcond[3]=(cj0+(((-1.0)*r02*x1719))+((x1711*x1713))+(((-1.0)*x1717*x1718)));
evalcond[4]=(sj0+(((-1.0)*x1712*x1718))+((x1711*x1714))+(((-1.0)*r12*x1719)));
evalcond[5]=(((x1710*x1717))+(((-1.0)*sj0))+(((-1.0)*x1713*x1719))+(((-1.0)*r02*x1718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1720=((1.0)*cj5);
CheckValue<IkReal> x1721 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1721.valid){
continue;
}
CheckValue<IkReal> x1722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1720))+(((-1.0)*r00*sj5)))),-1);
if(!x1722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1721.value)+(((1.5707963267949)*(x1722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1723=IKsin(j4);
IkReal x1724=IKcos(j4);
IkReal x1725=(r11*sj5);
IkReal x1726=(cj5*r00);
IkReal x1727=(cj5*r10);
IkReal x1728=(r21*sj5);
IkReal x1729=(cj5*r20);
IkReal x1730=(r01*sj5);
IkReal x1731=((1.0)*x1724);
IkReal x1732=((1.0)*x1723);
evalcond[0]=(((x1723*x1728))+(((-1.0)*x1729*x1732))+(((-1.0)*r22*x1731)));
evalcond[1]=(((x1724*x1729))+(((-1.0)*x1728*x1731))+(((-1.0)*r22*x1732)));
evalcond[2]=(((x1723*x1725))+cj0+(((-1.0)*r12*x1731))+(((-1.0)*x1727*x1732)));
evalcond[3]=(((x1724*x1726))+cj0+(((-1.0)*x1730*x1731))+(((-1.0)*r02*x1732)));
evalcond[4]=(sj0+((x1724*x1727))+(((-1.0)*r12*x1732))+(((-1.0)*x1725*x1731)));
evalcond[5]=(((x1723*x1730))+(((-1.0)*sj0))+(((-1.0)*x1726*x1732))+(((-1.0)*r02*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1733=((1.0)*cj5);
IkReal x1734=((((-1.0)*r01*x1733))+(((-1.0)*r00*sj5)));
j4eval[0]=x1734;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1733)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1735=((1.0)*cj5);
IkReal x1736=((((-1.0)*r11*x1735))+(((-1.0)*r10*sj5)));
j4eval[0]=x1736;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1735)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1737=cj5*cj5;
IkReal x1738=((1.0)*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r11*r21);
IkReal x1741=((((-1.0)*cj5*r10*r21*x1738))+x1740+((r12*r22))+(((-1.0)*r11*x1738*x1739))+(((-1.0)*x1737*x1740))+((r10*r20*x1737)));
j4eval[0]=x1741;
j4eval[1]=IKsign(x1741);
j4eval[2]=((IKabs((((cj0*x1739))+(((-1.0)*cj0*r21*x1738)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1742=cj5*cj5;
IkReal x1743=((1.0)*sj5);
IkReal x1744=(cj5*r20);
IkReal x1745=(r11*r21);
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(IKsign((((r10*r20*x1742))+(((-1.0)*cj5*r10*r21*x1743))+x1745+((r12*r22))+(((-1.0)*x1742*x1745))+(((-1.0)*r11*x1743*x1744)))),-1);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1743))+((cj0*x1744)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1746.value)))+(x1747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1748=IKsin(j4);
IkReal x1749=IKcos(j4);
IkReal x1750=((1.0)*sj0);
IkReal x1751=(cj5*r00);
IkReal x1752=(r11*sj5);
IkReal x1753=(cj5*r10);
IkReal x1754=(r21*sj5);
IkReal x1755=(cj5*r20);
IkReal x1756=(r01*sj5);
IkReal x1757=((1.0)*x1749);
IkReal x1758=((1.0)*x1748);
evalcond[0]=((((-1.0)*r22*x1757))+((x1748*x1754))+(((-1.0)*x1755*x1758)));
evalcond[1]=(((x1749*x1755))+(((-1.0)*r22*x1758))+(((-1.0)*x1754*x1757)));
evalcond[2]=((((-1.0)*r12*x1757))+cj0+((x1748*x1752))+(((-1.0)*x1753*x1758)));
evalcond[3]=((((-1.0)*x1751*x1758))+(((-1.0)*x1750))+((x1748*x1756))+(((-1.0)*r02*x1757)));
evalcond[4]=((((-1.0)*x1756*x1757))+((x1749*x1751))+(((-1.0)*r02*x1758))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1758))+((x1749*x1753))+(((-1.0)*x1750))+(((-1.0)*x1752*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1759=((1.0)*cj5);
CheckValue<IkReal> x1760=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1759))+(((-1.0)*r10*sj5)))),-1);
if(!x1760.valid){
continue;
}
CheckValue<IkReal> x1761 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1759))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1760.value)))+(x1761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1762=IKsin(j4);
IkReal x1763=IKcos(j4);
IkReal x1764=((1.0)*sj0);
IkReal x1765=(cj5*r00);
IkReal x1766=(r11*sj5);
IkReal x1767=(cj5*r10);
IkReal x1768=(r21*sj5);
IkReal x1769=(cj5*r20);
IkReal x1770=(r01*sj5);
IkReal x1771=((1.0)*x1763);
IkReal x1772=((1.0)*x1762);
evalcond[0]=(((x1762*x1768))+(((-1.0)*r22*x1771))+(((-1.0)*x1769*x1772)));
evalcond[1]=((((-1.0)*r22*x1772))+(((-1.0)*x1768*x1771))+((x1763*x1769)));
evalcond[2]=(cj0+(((-1.0)*x1767*x1772))+((x1762*x1766))+(((-1.0)*r12*x1771)));
evalcond[3]=((((-1.0)*x1764))+(((-1.0)*r02*x1771))+((x1762*x1770))+(((-1.0)*x1765*x1772)));
evalcond[4]=((((-1.0)*r02*x1772))+(((-1.0)*x1770*x1771))+(((-1.0)*cj0))+((x1763*x1765)));
evalcond[5]=((((-1.0)*x1764))+(((-1.0)*x1766*x1771))+(((-1.0)*r12*x1772))+((x1763*x1767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1773=((1.0)*cj5);
CheckValue<IkReal> x1774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1773)))),-1);
if(!x1774.valid){
continue;
}
CheckValue<IkReal> x1775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1774.value)))+(x1775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1776=IKsin(j4);
IkReal x1777=IKcos(j4);
IkReal x1778=((1.0)*sj0);
IkReal x1779=(cj5*r00);
IkReal x1780=(r11*sj5);
IkReal x1781=(cj5*r10);
IkReal x1782=(r21*sj5);
IkReal x1783=(cj5*r20);
IkReal x1784=(r01*sj5);
IkReal x1785=((1.0)*x1777);
IkReal x1786=((1.0)*x1776);
evalcond[0]=((((-1.0)*x1783*x1786))+(((-1.0)*r22*x1785))+((x1776*x1782)));
evalcond[1]=((((-1.0)*r22*x1786))+((x1777*x1783))+(((-1.0)*x1782*x1785)));
evalcond[2]=(cj0+(((-1.0)*r12*x1785))+((x1776*x1780))+(((-1.0)*x1781*x1786)));
evalcond[3]=((((-1.0)*x1778))+(((-1.0)*x1779*x1786))+((x1776*x1784))+(((-1.0)*r02*x1785)));
evalcond[4]=((((-1.0)*x1784*x1785))+((x1777*x1779))+(((-1.0)*r02*x1786))+(((-1.0)*cj0)));
evalcond[5]=(((x1777*x1781))+(((-1.0)*r12*x1786))+(((-1.0)*x1778))+(((-1.0)*x1780*x1785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1787=(sj1*sj2);
IkReal x1788=(r00*sj5);
IkReal x1789=((612000.0)*cj1);
IkReal x1790=(cj1*cj2);
IkReal x1791=(cj5*r01);
IkReal x1792=((1000000.0)*px);
CheckValue<IkReal> x1793=IKPowWithIntegerCheck(((((163941.0)*x1787))+(((-163941.0)*x1790))),-1);
if(!x1793.valid){
continue;
}
CheckValue<IkReal> x1794=IKPowWithIntegerCheck((x1787+(((-1.0)*x1790))),-1);
if(!x1794.valid){
continue;
}
if( IKabs(((x1793.value)*(((((-1.0)*x1787*x1792))+(((-456600.0)*x1790*x1791))+(((-1.0)*x1789*x1791))+(((-1.0)*x1788*x1789))+(((-456600.0)*x1788*x1790))+(((456600.0)*x1787*x1791))+((x1790*x1792))+(((456600.0)*x1787*x1788)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1794.value)*(((((-1.0)*x1788))+(((-1.0)*x1791)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1793.value)*(((((-1.0)*x1787*x1792))+(((-456600.0)*x1790*x1791))+(((-1.0)*x1789*x1791))+(((-1.0)*x1788*x1789))+(((-456600.0)*x1788*x1790))+(((456600.0)*x1787*x1791))+((x1790*x1792))+(((456600.0)*x1787*x1788))))))+IKsqr(((x1794.value)*(((((-1.0)*x1788))+(((-1.0)*x1791))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((x1793.value)*(((((-1.0)*x1787*x1792))+(((-456600.0)*x1790*x1791))+(((-1.0)*x1789*x1791))+(((-1.0)*x1788*x1789))+(((-456600.0)*x1788*x1790))+(((456600.0)*x1787*x1791))+((x1790*x1792))+(((456600.0)*x1787*x1788))))), ((x1794.value)*(((((-1.0)*x1788))+(((-1.0)*x1791))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1795=IKcos(j0);
IkReal x1796=IKsin(j0);
IkReal x1797=(cj5*r01);
IkReal x1798=(sj1*sj2);
IkReal x1799=((0.1157)*sj5);
IkReal x1800=(cj5*r11);
IkReal x1801=(cj1*cj2);
IkReal x1802=((0.5723)*x1796);
IkReal x1803=(cj1*x1796);
IkReal x1804=((0.5723)*x1795);
evalcond[0]=((((-1.0)*x1795*x1801))+((r00*sj5))+x1797+((x1795*x1798)));
evalcond[1]=(((r10*sj5))+((x1796*x1798))+(((-1.0)*x1796*x1801))+x1800);
evalcond[2]=(((x1801*x1804))+(((-1.0)*r00*x1799))+(((-1.0)*x1798*x1804))+(((-0.1157)*x1797))+(((-1.0)*px))+(((0.612)*cj1*x1795))+(((-0.163941)*x1796)));
evalcond[3]=((((-1.0)*r10*x1799))+((x1801*x1802))+(((0.612)*x1803))+(((-1.0)*x1798*x1802))+(((-1.0)*py))+(((0.163941)*x1795))+(((-0.1157)*x1800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1805=((1.0)*cj5);
IkReal x1806=((((-1.0)*r01*x1805))+(((-1.0)*r00*sj5)));
j4eval[0]=x1806;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1805)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1807=((1.0)*cj5);
IkReal x1808=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1807)));
j4eval[0]=x1808;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1807))))));
j4eval[2]=IKsign(x1808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1809=((1.0)*sj0);
IkReal x1810=((1.0)*cj0);
IkReal x1811=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1811;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1809))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1810)))))+(IKabs(((((-1.0)*r02*x1810))+(((-1.0)*r12*x1809))))));
j4eval[2]=IKsign(x1811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1812=((-1.0)*r20);
IkReal x1814 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1814)==0){
continue;
}
IkReal x1813=pow(x1814,-0.5);
CheckValue<IkReal> x1815 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1812),IKFAST_ATAN2_MAGTHRESH);
if(!x1815.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1815.value));
IkReal gconst79=(r21*x1813);
IkReal gconst80=(x1812*x1813);
CheckValue<IkReal> x1816 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1816.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1816.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1817=((-1.0)*r20);
IkReal x1818=x1813;
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1817),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
IkReal x1819=((-1.0)*(x1820.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1819;
IkReal gconst78=x1819;
IkReal gconst79=(r21*x1818);
IkReal gconst80=(x1817*x1818);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1821=((-1.0)*r20);
IkReal x1822=x1813;
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1821),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
IkReal x1823=((-1.0)*(x1824.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1823;
IkReal gconst78=x1823;
IkReal gconst79=(r21*x1822);
IkReal gconst80=(x1821*x1822);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1825=((-1.0)*r20);
IkReal x1826=x1813;
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1825),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
IkReal x1827=((-1.0)*(x1828.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1827;
IkReal gconst78=x1827;
IkReal gconst79=(r21*x1826);
IkReal gconst80=(x1825*x1826);
IkReal x1829=r22*r22;
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1829))),-1);
if(!x1832.valid){
continue;
}
IkReal x1830=x1832.value;
IkReal x1831=((((2.0)*x1830*(r20*r20)*(r21*r21)))+x1829+((x1830*(r21*r21*r21*r21)))+((x1830*(r20*r20*r20*r20))));
j4eval[0]=x1831;
j4eval[1]=IKsign(x1831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1833=(sj1*sj2);
IkReal x1834=(gconst80*r20);
IkReal x1835=(gconst79*r21);
IkReal x1836=(cj1*cj2);
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(IKsign(((x1835*x1835)+(x1834*x1834)+(r22*r22)+(((-2.0)*x1834*x1835)))),-1);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1836))+((r22*x1833)))),IkReal(((((-1.0)*x1833*x1834))+((x1833*x1835))+(((-1.0)*x1835*x1836))+((x1834*x1836)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1837.value)))+(x1838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1839=IKsin(j4);
IkReal x1840=IKcos(j4);
IkReal x1841=(gconst79*r01);
IkReal x1842=(gconst79*r21);
IkReal x1843=((1.0)*cj2);
IkReal x1844=(gconst79*r11);
IkReal x1845=((1.0)*sj0);
IkReal x1846=(cj1*sj2);
IkReal x1847=((1.0)*x1840);
IkReal x1848=(gconst80*x1840);
IkReal x1849=((1.0)*x1839);
IkReal x1850=(gconst80*x1849);
evalcond[0]=((((-1.0)*r22*x1847))+((x1839*x1842))+(((-1.0)*r20*x1850)));
evalcond[1]=(cj0+((x1839*x1844))+(((-1.0)*r12*x1847))+(((-1.0)*r10*x1850)));
evalcond[2]=((((-1.0)*x1845))+(((-1.0)*r02*x1847))+(((-1.0)*r00*x1850))+((x1839*x1841)));
evalcond[3]=((((-1.0)*x1842*x1847))+(((-1.0)*r22*x1849))+((sj1*sj2))+(((-1.0)*cj1*x1843))+((r20*x1848)));
evalcond[4]=((((-1.0)*x1841*x1847))+(((-1.0)*r02*x1849))+(((-1.0)*cj0*x1846))+(((-1.0)*cj0*sj1*x1843))+((r00*x1848)));
evalcond[5]=((((-1.0)*sj0*sj1*x1843))+((r10*x1848))+(((-1.0)*r12*x1849))+(((-1.0)*x1845*x1846))+(((-1.0)*x1844*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1851=((1.0)*gconst80);
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
CheckValue<IkReal> x1853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1851))+(((-1.0)*gconst79*r10)))),-1);
if(!x1853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1852.value)+(((1.5707963267949)*(x1853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1854=IKsin(j4);
IkReal x1855=IKcos(j4);
IkReal x1856=(gconst79*r01);
IkReal x1857=(gconst79*r21);
IkReal x1858=((1.0)*cj2);
IkReal x1859=(gconst79*r11);
IkReal x1860=((1.0)*sj0);
IkReal x1861=(cj1*sj2);
IkReal x1862=((1.0)*x1855);
IkReal x1863=(gconst80*x1855);
IkReal x1864=((1.0)*x1854);
IkReal x1865=(gconst80*x1864);
evalcond[0]=(((x1854*x1857))+(((-1.0)*r20*x1865))+(((-1.0)*r22*x1862)));
evalcond[1]=(cj0+((x1854*x1859))+(((-1.0)*r12*x1862))+(((-1.0)*r10*x1865)));
evalcond[2]=((((-1.0)*r02*x1862))+((x1854*x1856))+(((-1.0)*r00*x1865))+(((-1.0)*x1860)));
evalcond[3]=(((sj1*sj2))+((r20*x1863))+(((-1.0)*r22*x1864))+(((-1.0)*x1857*x1862))+(((-1.0)*cj1*x1858)));
evalcond[4]=((((-1.0)*x1856*x1862))+(((-1.0)*r02*x1864))+(((-1.0)*cj0*x1861))+(((-1.0)*cj0*sj1*x1858))+((r00*x1863)));
evalcond[5]=((((-1.0)*sj0*sj1*x1858))+(((-1.0)*x1860*x1861))+(((-1.0)*r12*x1864))+((r10*x1863))+(((-1.0)*x1859*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1866=((1.0)*gconst80);
CheckValue<IkReal> x1867 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1867.valid){
continue;
}
CheckValue<IkReal> x1868=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1866)))),-1);
if(!x1868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1867.value)+(((1.5707963267949)*(x1868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1869=IKsin(j4);
IkReal x1870=IKcos(j4);
IkReal x1871=(gconst79*r01);
IkReal x1872=(gconst79*r21);
IkReal x1873=((1.0)*cj2);
IkReal x1874=(gconst79*r11);
IkReal x1875=((1.0)*sj0);
IkReal x1876=(cj1*sj2);
IkReal x1877=((1.0)*x1870);
IkReal x1878=(gconst80*x1870);
IkReal x1879=((1.0)*x1869);
IkReal x1880=(gconst80*x1879);
evalcond[0]=((((-1.0)*r22*x1877))+((x1869*x1872))+(((-1.0)*r20*x1880)));
evalcond[1]=(cj0+(((-1.0)*r10*x1880))+(((-1.0)*r12*x1877))+((x1869*x1874)));
evalcond[2]=((((-1.0)*x1875))+(((-1.0)*r02*x1877))+(((-1.0)*r00*x1880))+((x1869*x1871)));
evalcond[3]=((((-1.0)*x1872*x1877))+(((-1.0)*r22*x1879))+((sj1*sj2))+((r20*x1878))+(((-1.0)*cj1*x1873)));
evalcond[4]=((((-1.0)*cj0*x1876))+(((-1.0)*r02*x1879))+(((-1.0)*cj0*sj1*x1873))+((r00*x1878))+(((-1.0)*x1871*x1877)));
evalcond[5]=((((-1.0)*x1874*x1877))+(((-1.0)*sj0*sj1*x1873))+(((-1.0)*r12*x1879))+((r10*x1878))+(((-1.0)*x1875*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1881=((-1.0)*r21);
IkReal x1883 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1883)==0){
continue;
}
IkReal x1882=pow(x1883,-0.5);
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal(x1881),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1884.value))));
IkReal gconst82=(x1881*x1882);
IkReal gconst83=((1.0)*r20*x1882);
CheckValue<IkReal> x1885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1885.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1885.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1886=((-1.0)*r21);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(x1886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
IkReal x1887=((1.0)*(x1889.value));
IkReal x1888=x1882;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1887)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1887)));
IkReal gconst82=(x1886*x1888);
IkReal gconst83=((1.0)*r20*x1888);
IkReal x1890=r22*r22;
IkReal x1891=((1.0)*x1890);
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(((-1.0)+x1890),-1);
if(!x1895.valid){
continue;
}
IkReal x1892=x1895.value;
if((((1.0)+(((-1.0)*x1891)))) < -0.00001)
continue;
IkReal x1893=IKsqrt(((1.0)+(((-1.0)*x1891))));
IkReal x1894=(cj0*x1892*x1893);
j4eval[0]=((IKabs(((((-1.0)*x1891*x1894))+x1894)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1896=((-1.0)*r21);
CheckValue<IkReal> x1899 = IKatan2WithCheck(IkReal(x1896),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1899.valid){
continue;
}
IkReal x1897=((1.0)*(x1899.value));
IkReal x1898=x1882;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1897)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1897)));
IkReal gconst82=(x1896*x1898);
IkReal gconst83=((1.0)*r20*x1898);
IkReal x1900=r22*r22;
IkReal x1901=((1.0)*x1900);
CheckValue<IkReal> x1905=IKPowWithIntegerCheck(((-1.0)+x1900),-1);
if(!x1905.valid){
continue;
}
IkReal x1902=x1905.value;
if((((1.0)+(((-1.0)*x1901)))) < -0.00001)
continue;
IkReal x1903=IKsqrt(((1.0)+(((-1.0)*x1901))));
IkReal x1904=(sj0*x1902*x1903);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1901*x1904))+x1904))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1906=((-1.0)*r21);
CheckValue<IkReal> x1909 = IKatan2WithCheck(IkReal(x1906),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1909.valid){
continue;
}
IkReal x1907=((1.0)*(x1909.value));
IkReal x1908=x1882;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1907)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1907)));
IkReal gconst82=(x1906*x1908);
IkReal gconst83=((1.0)*r20*x1908);
IkReal x1910=r22*r22;
IkReal x1911=(r12*sj0);
IkReal x1912=(cj0*r02);
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(((-1.0)+x1910),-1);
if(!x1916.valid){
continue;
}
IkReal x1913=x1916.value;
if((((1.0)+(((-1.0)*x1910)))) < -0.00001)
continue;
IkReal x1914=IKsqrt(((1.0)+(((-1.0)*x1910))));
IkReal x1915=(r22*x1913*x1914);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1911))+(((-1.0)*x1912)))))+(IKabs((((x1912*x1915))+((x1911*x1915))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1917=((1.0)*sj0);
IkReal x1918=((1.0)*cj0);
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1919.valid){
continue;
}
CheckValue<IkReal> x1920 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1918))+(((-1.0)*r12*x1917)))),IkReal(((((-1.0)*gconst82*r11*x1917))+(((-1.0)*gconst82*r01*x1918))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1919.value)))+(x1920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1921=IKsin(j4);
IkReal x1922=IKcos(j4);
IkReal x1923=(gconst82*r11);
IkReal x1924=((1.0)*cj2);
IkReal x1925=((1.0)*sj0);
IkReal x1926=(cj1*sj2);
IkReal x1927=((1.0)*x1922);
IkReal x1928=(gconst83*x1922);
IkReal x1929=(gconst82*x1921);
IkReal x1930=((1.0)*x1921);
evalcond[0]=((((-1.0)*r22*x1927))+(((-1.0)*gconst83*r20*x1930))+((r21*x1929)));
evalcond[1]=((((-1.0)*r12*x1927))+((x1921*x1923))+cj0+(((-1.0)*gconst83*r10*x1930)));
evalcond[2]=(((r01*x1929))+(((-1.0)*gconst83*r00*x1930))+(((-1.0)*x1925))+(((-1.0)*r02*x1927)));
evalcond[3]=((((-1.0)*cj1*x1924))+((sj1*sj2))+(((-1.0)*r22*x1930))+((r20*x1928))+(((-1.0)*gconst82*r21*x1927)));
evalcond[4]=(((r00*x1928))+(((-1.0)*cj0*x1926))+(((-1.0)*cj0*sj1*x1924))+(((-1.0)*gconst82*r01*x1927))+(((-1.0)*r02*x1930)));
evalcond[5]=((((-1.0)*sj0*sj1*x1924))+(((-1.0)*r12*x1930))+(((-1.0)*x1925*x1926))+((r10*x1928))+(((-1.0)*x1923*x1927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1931=((1.0)*gconst83);
CheckValue<IkReal> x1932 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1932.valid){
continue;
}
CheckValue<IkReal> x1933=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1931)))),-1);
if(!x1933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1932.value)+(((1.5707963267949)*(x1933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1934=IKsin(j4);
IkReal x1935=IKcos(j4);
IkReal x1936=(gconst82*r11);
IkReal x1937=((1.0)*cj2);
IkReal x1938=((1.0)*sj0);
IkReal x1939=(cj1*sj2);
IkReal x1940=((1.0)*x1935);
IkReal x1941=(gconst83*x1935);
IkReal x1942=(gconst82*x1934);
IkReal x1943=((1.0)*x1934);
evalcond[0]=((((-1.0)*r22*x1940))+(((-1.0)*gconst83*r20*x1943))+((r21*x1942)));
evalcond[1]=(cj0+((x1934*x1936))+(((-1.0)*gconst83*r10*x1943))+(((-1.0)*r12*x1940)));
evalcond[2]=((((-1.0)*r02*x1940))+((r01*x1942))+(((-1.0)*gconst83*r00*x1943))+(((-1.0)*x1938)));
evalcond[3]=((((-1.0)*r22*x1943))+((r20*x1941))+(((-1.0)*cj1*x1937))+(((-1.0)*gconst82*r21*x1940))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r02*x1943))+(((-1.0)*gconst82*r01*x1940))+(((-1.0)*cj0*x1939))+((r00*x1941))+(((-1.0)*cj0*sj1*x1937)));
evalcond[5]=(((r10*x1941))+(((-1.0)*r12*x1943))+(((-1.0)*x1938*x1939))+(((-1.0)*x1936*x1940))+(((-1.0)*sj0*sj1*x1937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1944=((1.0)*gconst83);
CheckValue<IkReal> x1945=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1944)))),-1);
if(!x1945.valid){
continue;
}
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1944))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1945.value)))+(x1946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1947=IKsin(j4);
IkReal x1948=IKcos(j4);
IkReal x1949=(gconst82*r11);
IkReal x1950=((1.0)*cj2);
IkReal x1951=((1.0)*sj0);
IkReal x1952=(cj1*sj2);
IkReal x1953=((1.0)*x1948);
IkReal x1954=(gconst83*x1948);
IkReal x1955=(gconst82*x1947);
IkReal x1956=((1.0)*x1947);
evalcond[0]=((((-1.0)*r22*x1953))+((r21*x1955))+(((-1.0)*gconst83*r20*x1956)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1956))+(((-1.0)*r12*x1953))+((x1947*x1949)));
evalcond[2]=((((-1.0)*x1951))+(((-1.0)*r02*x1953))+((r01*x1955))+(((-1.0)*gconst83*r00*x1956)));
evalcond[3]=((((-1.0)*r22*x1956))+((r20*x1954))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1953))+(((-1.0)*cj1*x1950)));
evalcond[4]=((((-1.0)*cj0*sj1*x1950))+(((-1.0)*cj0*x1952))+(((-1.0)*r02*x1956))+(((-1.0)*gconst82*r01*x1953))+((r00*x1954)));
evalcond[5]=((((-1.0)*x1949*x1953))+((r10*x1954))+(((-1.0)*x1951*x1952))+(((-1.0)*r12*x1956))+(((-1.0)*sj0*sj1*x1950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1957=((-1.0)*r10);
IkReal x1959 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1959)==0){
continue;
}
IkReal x1958=pow(x1959,-0.5);
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1957),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1960.value));
IkReal gconst85=(r11*x1958);
IkReal gconst86=(x1957*x1958);
CheckValue<IkReal> x1961 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1961.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1961.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1962=((-1.0)*r10);
IkReal x1963=x1958;
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1962),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
IkReal x1964=((-1.0)*(x1965.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1964;
IkReal gconst84=x1964;
IkReal gconst85=(r11*x1963);
IkReal gconst86=(x1962*x1963);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1966=((1.0)*sj0);
IkReal x1967=((1.0)*gconst85);
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1967)))),-1);
if(!x1968.valid){
continue;
}
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1966)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1967))+(((-1.0)*gconst85*r11*x1966))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1968.value)))+(x1969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1970=IKsin(j4);
IkReal x1971=IKcos(j4);
IkReal x1972=(gconst85*r21);
IkReal x1973=(gconst86*r00);
IkReal x1974=(gconst86*r10);
IkReal x1975=((1.0)*cj2);
IkReal x1976=(gconst85*r11);
IkReal x1977=(gconst85*r01);
IkReal x1978=((1.0)*sj0);
IkReal x1979=(gconst86*r20);
IkReal x1980=(cj1*sj2);
IkReal x1981=((1.0)*x1971);
IkReal x1982=((1.0)*x1970);
evalcond[0]=((((-1.0)*x1979*x1982))+((x1970*x1972))+(((-1.0)*r22*x1981)));
evalcond[1]=(cj0+((x1970*x1976))+(((-1.0)*x1974*x1982))+(((-1.0)*r12*x1981)));
evalcond[2]=((((-1.0)*r02*x1981))+(((-1.0)*x1973*x1982))+((x1970*x1977))+(((-1.0)*x1978)));
evalcond[3]=(((x1971*x1979))+(((-1.0)*x1972*x1981))+((sj1*sj2))+(((-1.0)*cj1*x1975))+(((-1.0)*r22*x1982)));
evalcond[4]=((((-1.0)*cj0*sj1*x1975))+(((-1.0)*r02*x1982))+((x1971*x1973))+(((-1.0)*x1977*x1981))+(((-1.0)*cj0*x1980)));
evalcond[5]=((((-1.0)*x1976*x1981))+(((-1.0)*sj0*sj1*x1975))+((x1971*x1974))+(((-1.0)*r12*x1982))+(((-1.0)*x1978*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1983=((1.0)*gconst86);
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x1983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x1983)))),-1);
if(!x1985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1984.value)+(((1.5707963267949)*(x1985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1986=IKsin(j4);
IkReal x1987=IKcos(j4);
IkReal x1988=(gconst85*r21);
IkReal x1989=(gconst86*r00);
IkReal x1990=(gconst86*r10);
IkReal x1991=((1.0)*cj2);
IkReal x1992=(gconst85*r11);
IkReal x1993=(gconst85*r01);
IkReal x1994=((1.0)*sj0);
IkReal x1995=(gconst86*r20);
IkReal x1996=(cj1*sj2);
IkReal x1997=((1.0)*x1987);
IkReal x1998=((1.0)*x1986);
evalcond[0]=((((-1.0)*x1995*x1998))+(((-1.0)*r22*x1997))+((x1986*x1988)));
evalcond[1]=(cj0+((x1986*x1992))+(((-1.0)*x1990*x1998))+(((-1.0)*r12*x1997)));
evalcond[2]=(((x1986*x1993))+(((-1.0)*r02*x1997))+(((-1.0)*x1989*x1998))+(((-1.0)*x1994)));
evalcond[3]=(((sj1*sj2))+((x1987*x1995))+(((-1.0)*r22*x1998))+(((-1.0)*cj1*x1991))+(((-1.0)*x1988*x1997)));
evalcond[4]=((((-1.0)*x1993*x1997))+((x1987*x1989))+(((-1.0)*cj0*x1996))+(((-1.0)*cj0*sj1*x1991))+(((-1.0)*r02*x1998)));
evalcond[5]=((((-1.0)*sj0*sj1*x1991))+(((-1.0)*x1992*x1997))+(((-1.0)*x1994*x1996))+((x1987*x1990))+(((-1.0)*r12*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1999=((-1.0)*r11);
IkReal x2001 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2001)==0){
continue;
}
IkReal x2000=pow(x2001,-0.5);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(x1999),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2002.value))));
IkReal gconst88=(x1999*x2000);
IkReal gconst89=((1.0)*r10*x2000);
CheckValue<IkReal> x2003 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2003.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2003.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2004=((-1.0)*r11);
CheckValue<IkReal> x2007 = IKatan2WithCheck(IkReal(x2004),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2007.valid){
continue;
}
IkReal x2005=((1.0)*(x2007.value));
IkReal x2006=x2000;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2005)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2005)));
IkReal gconst88=(x2004*x2006);
IkReal gconst89=((1.0)*r10*x2006);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2008=((-1.0)*r11);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal(x2008),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
IkReal x2009=((1.0)*(x2011.value));
IkReal x2010=x2000;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2009)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2009)));
IkReal gconst88=(x2008*x2010);
IkReal gconst89=((1.0)*r10*x2010);
IkReal x2012=r12*r12;
IkReal x2013=((1.0)*sj0);
IkReal x2014=(cj0*r02);
IkReal x2015=x2000;
j4eval[0]=((IKabs(((((-1.0)*x2013*x2015))+((r12*x2014*x2015))+((sj0*x2012*x2015)))))+(IKabs(((((-1.0)*r12*x2013))+(((-1.0)*x2014))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2016=((-1.0)*r11);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(x2016),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
IkReal x2017=((1.0)*(x2019.value));
IkReal x2018=x2000;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2017)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2017)));
IkReal gconst88=(x2016*x2018);
IkReal gconst89=((1.0)*r10*x2018);
IkReal x2020=r12*r12;
IkReal x2021=(cj1*cj2*r22);
IkReal x2022=(r22*sj1*sj2);
CheckValue<IkReal> x2026=IKPowWithIntegerCheck(((-1.0)+x2020),-1);
if(!x2026.valid){
continue;
}
IkReal x2023=x2026.value;
if((((1.0)+(((-1.0)*x2020)))) < -0.00001)
continue;
IkReal x2024=IKsqrt(((1.0)+(((-1.0)*x2020))));
IkReal x2025=(r12*x2023*x2024);
j4eval[0]=((IKabs(((((-1.0)*x2022*x2025))+((x2021*x2025)))))+(IKabs((x2022+(((-1.0)*x2021))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2027=(cj1*cj2);
IkReal x2028=(gconst89*r20);
IkReal x2029=(gconst88*r21);
IkReal x2030=(sj1*sj2);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal((((r22*x2030))+(((-1.0)*r22*x2027)))),IkReal(((((-1.0)*x2027*x2029))+(((-1.0)*x2028*x2030))+((x2029*x2030))+((x2027*x2028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
CheckValue<IkReal> x2032=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2028*x2029))+(x2028*x2028)+(x2029*x2029))),-1);
if(!x2032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2031.value)+(((1.5707963267949)*(x2032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2033=IKsin(j4);
IkReal x2034=IKcos(j4);
IkReal x2035=((1.0)*sj0);
IkReal x2036=((1.0)*cj2);
IkReal x2037=(gconst89*r20);
IkReal x2038=(gconst89*r10);
IkReal x2039=(gconst89*r00);
IkReal x2040=(cj1*sj2);
IkReal x2041=((1.0)*x2034);
IkReal x2042=((1.0)*x2033);
IkReal x2043=(gconst88*x2033);
evalcond[0]=(((r21*x2043))+(((-1.0)*r22*x2041))+(((-1.0)*x2037*x2042)));
evalcond[1]=(cj0+((r11*x2043))+(((-1.0)*x2038*x2042))+(((-1.0)*r12*x2041)));
evalcond[2]=((((-1.0)*r02*x2041))+(((-1.0)*x2039*x2042))+(((-1.0)*x2035))+((r01*x2043)));
evalcond[3]=(((x2034*x2037))+(((-1.0)*r22*x2042))+(((-1.0)*cj1*x2036))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2041)));
evalcond[4]=((((-1.0)*cj0*x2040))+((x2034*x2039))+(((-1.0)*r02*x2042))+(((-1.0)*gconst88*r01*x2041))+(((-1.0)*cj0*sj1*x2036)));
evalcond[5]=(((x2034*x2038))+(((-1.0)*cj2*sj1*x2035))+(((-1.0)*x2035*x2040))+(((-1.0)*gconst88*r11*x2041))+(((-1.0)*r12*x2042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2044=((1.0)*sj0);
IkReal x2045=((1.0)*cj0);
CheckValue<IkReal> x2046 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2045))+(((-1.0)*r12*x2044)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2045))+(((-1.0)*gconst88*r11*x2044))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2046.valid){
continue;
}
CheckValue<IkReal> x2047=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2046.value)+(((1.5707963267949)*(x2047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2048=IKsin(j4);
IkReal x2049=IKcos(j4);
IkReal x2050=((1.0)*sj0);
IkReal x2051=((1.0)*cj2);
IkReal x2052=(gconst89*r20);
IkReal x2053=(gconst89*r10);
IkReal x2054=(gconst89*r00);
IkReal x2055=(cj1*sj2);
IkReal x2056=((1.0)*x2049);
IkReal x2057=((1.0)*x2048);
IkReal x2058=(gconst88*x2048);
evalcond[0]=((((-1.0)*r22*x2056))+(((-1.0)*x2052*x2057))+((r21*x2058)));
evalcond[1]=(((r11*x2058))+cj0+(((-1.0)*r12*x2056))+(((-1.0)*x2053*x2057)));
evalcond[2]=((((-1.0)*x2054*x2057))+((r01*x2058))+(((-1.0)*r02*x2056))+(((-1.0)*x2050)));
evalcond[3]=(((x2049*x2052))+(((-1.0)*cj1*x2051))+(((-1.0)*r22*x2057))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2056)));
evalcond[4]=((((-1.0)*gconst88*r01*x2056))+((x2049*x2054))+(((-1.0)*r02*x2057))+(((-1.0)*cj0*x2055))+(((-1.0)*cj0*sj1*x2051)));
evalcond[5]=(((x2049*x2053))+(((-1.0)*cj2*sj1*x2050))+(((-1.0)*r12*x2057))+(((-1.0)*gconst88*r11*x2056))+(((-1.0)*x2050*x2055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2059=((1.0)*gconst89);
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2059))+(((-1.0)*gconst88*r00)))),-1);
if(!x2060.valid){
continue;
}
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2059))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2060.value)))+(x2061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2062=IKsin(j4);
IkReal x2063=IKcos(j4);
IkReal x2064=((1.0)*sj0);
IkReal x2065=((1.0)*cj2);
IkReal x2066=(gconst89*r20);
IkReal x2067=(gconst89*r10);
IkReal x2068=(gconst89*r00);
IkReal x2069=(cj1*sj2);
IkReal x2070=((1.0)*x2063);
IkReal x2071=((1.0)*x2062);
IkReal x2072=(gconst88*x2062);
evalcond[0]=((((-1.0)*r22*x2070))+(((-1.0)*x2066*x2071))+((r21*x2072)));
evalcond[1]=(cj0+(((-1.0)*r12*x2070))+((r11*x2072))+(((-1.0)*x2067*x2071)));
evalcond[2]=((((-1.0)*r02*x2070))+(((-1.0)*x2064))+((r01*x2072))+(((-1.0)*x2068*x2071)));
evalcond[3]=((((-1.0)*gconst88*r21*x2070))+(((-1.0)*r22*x2071))+((sj1*sj2))+(((-1.0)*cj1*x2065))+((x2063*x2066)));
evalcond[4]=((((-1.0)*cj0*x2069))+(((-1.0)*r02*x2071))+(((-1.0)*cj0*sj1*x2065))+((x2063*x2068))+(((-1.0)*gconst88*r01*x2070)));
evalcond[5]=((((-1.0)*r12*x2071))+(((-1.0)*x2064*x2069))+(((-1.0)*gconst88*r11*x2070))+((x2063*x2067))+(((-1.0)*cj2*sj1*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2073=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2073;
j4eval[1]=IKsign(x2073);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2074=((1.0)*cj5);
IkReal x2075=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2074)));
j4eval[0]=x2075;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2074)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2076=cj5*cj5;
IkReal x2077=r11*r11;
IkReal x2078=(r11*sj5);
IkReal x2079=(cj5*r10);
IkReal x2080=((r12*r12)+x2077+(((-1.0)*x2076*x2077))+((x2076*(r10*r10)))+(((-2.0)*x2078*x2079)));
j4eval[0]=x2080;
j4eval[1]=IKsign(x2080);
j4eval[2]=((IKabs(r12))+(IKabs((x2079+(((-1.0)*x2078))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2081=cj5*cj5;
IkReal x2082=r11*r11;
IkReal x2083=(cj5*r10);
IkReal x2084=(r11*sj5);
CheckValue<IkReal> x2085 = IKatan2WithCheck(IkReal(((((-1.0)*x2084))+x2083)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2085.valid){
continue;
}
CheckValue<IkReal> x2086=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x2081*x2082))+x2082+((x2081*(r10*r10)))+(((-2.0)*x2083*x2084)))),-1);
if(!x2086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2085.value)+(((1.5707963267949)*(x2086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2087=IKsin(j4);
IkReal x2088=IKcos(j4);
IkReal x2089=(cj5*r10);
IkReal x2090=(r01*sj5);
IkReal x2091=((1.0)*cj2);
IkReal x2092=(cj5*r00);
IkReal x2093=(cj5*r20);
IkReal x2094=((1.0)*x2088);
IkReal x2095=((1.0)*x2087);
IkReal x2096=(sj5*x2087);
evalcond[0]=((((-1.0)*x2093*x2095))+((r21*x2096))+(((-1.0)*r22*x2094)));
evalcond[1]=(((x2087*x2090))+(((-1.0)*x2092*x2095))+(((-1.0)*r02*x2094)));
evalcond[2]=((((-1.0)*r11*sj5*x2094))+((x2088*x2089))+(((-1.0)*r12*x2095)));
evalcond[3]=((1.0)+(((-1.0)*x2089*x2095))+(((-1.0)*r12*x2094))+((r11*x2096)));
evalcond[4]=(((x2088*x2093))+(((-1.0)*r21*sj5*x2094))+((sj1*sj2))+(((-1.0)*cj1*x2091))+(((-1.0)*r22*x2095)));
evalcond[5]=((((-1.0)*x2090*x2094))+((x2088*x2092))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2095))+(((-1.0)*sj1*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2097=((1.0)*cj5);
CheckValue<IkReal> x2098=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2097)))),-1);
if(!x2098.valid){
continue;
}
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2097))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2098.value)))+(x2099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2100=IKsin(j4);
IkReal x2101=IKcos(j4);
IkReal x2102=(cj5*r10);
IkReal x2103=(r01*sj5);
IkReal x2104=((1.0)*cj2);
IkReal x2105=(cj5*r00);
IkReal x2106=(cj5*r20);
IkReal x2107=((1.0)*x2101);
IkReal x2108=((1.0)*x2100);
IkReal x2109=(sj5*x2100);
evalcond[0]=((((-1.0)*r22*x2107))+((r21*x2109))+(((-1.0)*x2106*x2108)));
evalcond[1]=((((-1.0)*r02*x2107))+(((-1.0)*x2105*x2108))+((x2100*x2103)));
evalcond[2]=((((-1.0)*r12*x2108))+((x2101*x2102))+(((-1.0)*r11*sj5*x2107)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2107))+(((-1.0)*x2102*x2108))+((r11*x2109)));
evalcond[4]=((((-1.0)*r22*x2108))+(((-1.0)*cj1*x2104))+((sj1*sj2))+((x2101*x2106))+(((-1.0)*r21*sj5*x2107)));
evalcond[5]=((((-1.0)*r02*x2108))+(((-1.0)*x2103*x2107))+(((-1.0)*sj1*x2104))+(((-1.0)*cj1*sj2))+((x2101*x2105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2110.valid){
continue;
}
CheckValue<IkReal> x2111 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2110.value)))+(x2111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2112=IKsin(j4);
IkReal x2113=IKcos(j4);
IkReal x2114=(cj5*r10);
IkReal x2115=(r01*sj5);
IkReal x2116=((1.0)*cj2);
IkReal x2117=(cj5*r00);
IkReal x2118=(cj5*r20);
IkReal x2119=((1.0)*x2113);
IkReal x2120=((1.0)*x2112);
IkReal x2121=(sj5*x2112);
evalcond[0]=((((-1.0)*x2118*x2120))+((r21*x2121))+(((-1.0)*r22*x2119)));
evalcond[1]=((((-1.0)*x2117*x2120))+(((-1.0)*r02*x2119))+((x2112*x2115)));
evalcond[2]=((((-1.0)*r11*sj5*x2119))+(((-1.0)*r12*x2120))+((x2113*x2114)));
evalcond[3]=((1.0)+((r11*x2121))+(((-1.0)*x2114*x2120))+(((-1.0)*r12*x2119)));
evalcond[4]=((((-1.0)*r21*sj5*x2119))+(((-1.0)*r22*x2120))+((sj1*sj2))+(((-1.0)*cj1*x2116))+((x2113*x2118)));
evalcond[5]=((((-1.0)*sj1*x2116))+(((-1.0)*r02*x2120))+(((-1.0)*cj1*sj2))+((x2113*x2117))+(((-1.0)*x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2122=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2122;
j4eval[1]=IKsign(x2122);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2123=((1.0)*cj5);
IkReal x2124=((((-1.0)*r21*x2123))+(((-1.0)*r20*sj5)));
j4eval[0]=x2124;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2123))))));
j4eval[2]=IKsign(x2124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2125=cj5*cj5;
IkReal x2126=r11*r11;
IkReal x2127=(cj5*r10);
IkReal x2128=(r11*sj5);
IkReal x2129=(((x2125*x2126))+(((2.0)*x2127*x2128))+(((-1.0)*x2126))+(((-1.0)*(r12*r12)))+(((-1.0)*x2125*(r10*r10))));
j4eval[0]=x2129;
j4eval[1]=((IKabs(r12))+(IKabs((x2127+(((-1.0)*x2128))))));
j4eval[2]=IKsign(x2129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2130=cj5*cj5;
IkReal x2131=r11*r11;
IkReal x2132=(cj5*r10);
IkReal x2133=(r11*sj5);
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal((x2132+(((-1.0)*x2133)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*x2131))+(((2.0)*x2132*x2133))+(((-1.0)*x2130*(r10*r10)))+((x2130*x2131)))),-1);
if(!x2135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2134.value)+(((1.5707963267949)*(x2135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j4);
IkReal x2137=IKcos(j4);
IkReal x2138=(cj5*r10);
IkReal x2139=(r01*sj5);
IkReal x2140=(cj5*r00);
IkReal x2141=(cj5*r20);
IkReal x2142=((1.0)*x2137);
IkReal x2143=((1.0)*x2136);
IkReal x2144=(sj5*x2136);
evalcond[0]=((((-1.0)*r22*x2142))+((r21*x2144))+(((-1.0)*x2141*x2143)));
evalcond[1]=(((x2136*x2139))+(((-1.0)*r02*x2142))+(((-1.0)*x2140*x2143)));
evalcond[2]=((((-1.0)*r11*sj5*x2142))+(((-1.0)*r12*x2143))+((x2137*x2138)));
evalcond[3]=((-1.0)+(((-1.0)*x2138*x2143))+((r11*x2144))+(((-1.0)*r12*x2142)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2143))+((cj1*sj2))+((x2137*x2140))+(((-1.0)*x2139*x2142)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2137*x2141))+(((-1.0)*r22*x2143))+(((-1.0)*r21*sj5*x2142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2145=((1.0)*cj5);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2145))+(((-1.0)*r20*sj5)))),-1);
if(!x2147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2146.value)+(((1.5707963267949)*(x2147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2148=IKsin(j4);
IkReal x2149=IKcos(j4);
IkReal x2150=(cj5*r10);
IkReal x2151=(r01*sj5);
IkReal x2152=(cj5*r00);
IkReal x2153=(cj5*r20);
IkReal x2154=((1.0)*x2149);
IkReal x2155=((1.0)*x2148);
IkReal x2156=(sj5*x2148);
evalcond[0]=((((-1.0)*x2153*x2155))+(((-1.0)*r22*x2154))+((r21*x2156)));
evalcond[1]=((((-1.0)*r02*x2154))+(((-1.0)*x2152*x2155))+((x2148*x2151)));
evalcond[2]=(((x2149*x2150))+(((-1.0)*r11*sj5*x2154))+(((-1.0)*r12*x2155)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2154))+(((-1.0)*x2150*x2155))+((r11*x2156)));
evalcond[4]=(((cj2*sj1))+((x2149*x2152))+((cj1*sj2))+(((-1.0)*r02*x2155))+(((-1.0)*x2151*x2154)));
evalcond[5]=(((x2149*x2153))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2155))+(((-1.0)*r21*sj5*x2154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2157 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2157.valid){
continue;
}
CheckValue<IkReal> x2158=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2157.value)+(((1.5707963267949)*(x2158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2159=IKsin(j4);
IkReal x2160=IKcos(j4);
IkReal x2161=(cj5*r10);
IkReal x2162=(r01*sj5);
IkReal x2163=(cj5*r00);
IkReal x2164=(cj5*r20);
IkReal x2165=((1.0)*x2160);
IkReal x2166=((1.0)*x2159);
IkReal x2167=(sj5*x2159);
evalcond[0]=(((r21*x2167))+(((-1.0)*x2164*x2166))+(((-1.0)*r22*x2165)));
evalcond[1]=((((-1.0)*x2163*x2166))+((x2159*x2162))+(((-1.0)*r02*x2165)));
evalcond[2]=((((-1.0)*r11*sj5*x2165))+(((-1.0)*r12*x2166))+((x2160*x2161)));
evalcond[3]=((-1.0)+(((-1.0)*x2161*x2166))+(((-1.0)*r12*x2165))+((r11*x2167)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2160*x2163))+(((-1.0)*r02*x2166))+(((-1.0)*x2162*x2165)));
evalcond[5]=((((-1.0)*r21*sj5*x2165))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2166))+((x2160*x2164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2168=((-1.0)*r00);
IkReal x2170 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2170)==0){
continue;
}
IkReal x2169=pow(x2170,-0.5);
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2168),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2171.value));
IkReal gconst91=(r01*x2169);
IkReal gconst92=(x2168*x2169);
CheckValue<IkReal> x2172 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2172.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2172.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2173=((-1.0)*r00);
IkReal x2174=x2169;
CheckValue<IkReal> x2176 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2173),IKFAST_ATAN2_MAGTHRESH);
if(!x2176.valid){
continue;
}
IkReal x2175=((-1.0)*(x2176.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2175;
IkReal gconst90=x2175;
IkReal gconst91=(r01*x2174);
IkReal gconst92=(x2173*x2174);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2177=((1.0)*sj0);
IkReal x2178=((1.0)*cj0);
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2179.valid){
continue;
}
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2178))+(((-1.0)*r12*x2177)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2178))+(((-1.0)*gconst91*r11*x2177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2179.value)))+(x2180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2181=IKsin(j4);
IkReal x2182=IKcos(j4);
IkReal x2183=((1.0)*cj2);
IkReal x2184=(gconst92*r00);
IkReal x2185=(gconst92*r20);
IkReal x2186=((1.0)*sj0);
IkReal x2187=(gconst92*r10);
IkReal x2188=(cj1*sj2);
IkReal x2189=((1.0)*x2182);
IkReal x2190=(gconst91*x2181);
IkReal x2191=((1.0)*x2181);
evalcond[0]=((((-1.0)*x2185*x2191))+(((-1.0)*r22*x2189))+((r21*x2190)));
evalcond[1]=(cj0+(((-1.0)*x2187*x2191))+((r11*x2190))+(((-1.0)*r12*x2189)));
evalcond[2]=((((-1.0)*r02*x2189))+(((-1.0)*x2186))+(((-1.0)*x2184*x2191))+((r01*x2190)));
evalcond[3]=(((x2182*x2185))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2189))+(((-1.0)*r22*x2191))+(((-1.0)*cj1*x2183)));
evalcond[4]=(((x2182*x2184))+(((-1.0)*cj0*sj1*x2183))+(((-1.0)*cj0*x2188))+(((-1.0)*r02*x2191))+(((-1.0)*gconst91*r01*x2189)));
evalcond[5]=((((-1.0)*sj0*sj1*x2183))+((x2182*x2187))+(((-1.0)*x2186*x2188))+(((-1.0)*r12*x2191))+(((-1.0)*gconst91*r11*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2192=((1.0)*gconst92);
CheckValue<IkReal> x2193=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2192)))),-1);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2192))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2193.value)))+(x2194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2195=IKsin(j4);
IkReal x2196=IKcos(j4);
IkReal x2197=((1.0)*cj2);
IkReal x2198=(gconst92*r00);
IkReal x2199=(gconst92*r20);
IkReal x2200=((1.0)*sj0);
IkReal x2201=(gconst92*r10);
IkReal x2202=(cj1*sj2);
IkReal x2203=((1.0)*x2196);
IkReal x2204=(gconst91*x2195);
IkReal x2205=((1.0)*x2195);
evalcond[0]=((((-1.0)*r22*x2203))+(((-1.0)*x2199*x2205))+((r21*x2204)));
evalcond[1]=(cj0+(((-1.0)*r12*x2203))+((r11*x2204))+(((-1.0)*x2201*x2205)));
evalcond[2]=(((r01*x2204))+(((-1.0)*x2200))+(((-1.0)*x2198*x2205))+(((-1.0)*r02*x2203)));
evalcond[3]=(((x2196*x2199))+(((-1.0)*r22*x2205))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2203))+(((-1.0)*cj1*x2197)));
evalcond[4]=(((x2196*x2198))+(((-1.0)*gconst91*r01*x2203))+(((-1.0)*cj0*sj1*x2197))+(((-1.0)*r02*x2205))+(((-1.0)*cj0*x2202)));
evalcond[5]=((((-1.0)*r12*x2205))+(((-1.0)*sj0*sj1*x2197))+(((-1.0)*gconst91*r11*x2203))+(((-1.0)*x2200*x2202))+((x2196*x2201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2206=((-1.0)*r01);
IkReal x2208 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2208)==0){
continue;
}
IkReal x2207=pow(x2208,-0.5);
CheckValue<IkReal> x2209 = IKatan2WithCheck(IkReal(x2206),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2209.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2209.value))));
IkReal gconst94=(x2206*x2207);
IkReal gconst95=((1.0)*r00*x2207);
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2210.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2211=((-1.0)*r01);
CheckValue<IkReal> x2214 = IKatan2WithCheck(IkReal(x2211),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2214.valid){
continue;
}
IkReal x2212=((1.0)*(x2214.value));
IkReal x2213=x2207;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2212)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2212)));
IkReal gconst94=(x2211*x2213);
IkReal gconst95=((1.0)*r00*x2213);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2215=((-1.0)*r01);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(x2215),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
IkReal x2216=((1.0)*(x2218.value));
IkReal x2217=x2207;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2216)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2216)));
IkReal gconst94=(x2215*x2217);
IkReal gconst95=((1.0)*r00*x2217);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2219=((-1.0)*r01);
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(x2219),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal x2220=((1.0)*(x2222.value));
IkReal x2221=x2207;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2220)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2220)));
IkReal gconst94=(x2219*x2221);
IkReal gconst95=((1.0)*r00*x2221);
IkReal x2223=r02*r02;
IkReal x2224=(r12*sj0);
IkReal x2225=((1.0)*cj0);
IkReal x2226=x2207;
j4eval[0]=((IKabs(((((-1.0)*x2225*x2226))+((r02*x2224*x2226))+((cj0*x2223*x2226)))))+(IKabs(((((-1.0)*r02*x2225))+(((-1.0)*x2224))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2227=((1.0)*sj0);
IkReal x2228=((1.0)*cj0);
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2228))+(((-1.0)*r12*x2227)))),IkReal(((((-1.0)*gconst94*r11*x2227))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2228))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
CheckValue<IkReal> x2230=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2229.value)+(((1.5707963267949)*(x2230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2231=IKsin(j4);
IkReal x2232=IKcos(j4);
IkReal x2233=(gconst94*r11);
IkReal x2234=((1.0)*cj2);
IkReal x2235=(gconst94*r21);
IkReal x2236=((1.0)*sj0);
IkReal x2237=(gconst94*r01);
IkReal x2238=(cj1*sj2);
IkReal x2239=((1.0)*x2232);
IkReal x2240=(gconst95*x2232);
IkReal x2241=((1.0)*x2231);
IkReal x2242=(gconst95*x2241);
evalcond[0]=((((-1.0)*r22*x2239))+((x2231*x2235))+(((-1.0)*r20*x2242)));
evalcond[1]=(cj0+(((-1.0)*r10*x2242))+(((-1.0)*r12*x2239))+((x2231*x2233)));
evalcond[2]=((((-1.0)*r02*x2239))+(((-1.0)*r00*x2242))+(((-1.0)*x2236))+((x2231*x2237)));
evalcond[3]=((((-1.0)*cj1*x2234))+(((-1.0)*x2235*x2239))+(((-1.0)*r22*x2241))+((sj1*sj2))+((r20*x2240)));
evalcond[4]=((((-1.0)*x2237*x2239))+(((-1.0)*r02*x2241))+(((-1.0)*cj0*x2238))+((r00*x2240))+(((-1.0)*cj0*sj1*x2234)));
evalcond[5]=(((r10*x2240))+(((-1.0)*sj0*sj1*x2234))+(((-1.0)*x2236*x2238))+(((-1.0)*r12*x2241))+(((-1.0)*x2233*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2243=((1.0)*gconst95);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2243)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
CheckValue<IkReal> x2245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2243)))),-1);
if(!x2245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2244.value)+(((1.5707963267949)*(x2245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2246=IKsin(j4);
IkReal x2247=IKcos(j4);
IkReal x2248=(gconst94*r11);
IkReal x2249=((1.0)*cj2);
IkReal x2250=(gconst94*r21);
IkReal x2251=((1.0)*sj0);
IkReal x2252=(gconst94*r01);
IkReal x2253=(cj1*sj2);
IkReal x2254=((1.0)*x2247);
IkReal x2255=(gconst95*x2247);
IkReal x2256=((1.0)*x2246);
IkReal x2257=(gconst95*x2256);
evalcond[0]=(((x2246*x2250))+(((-1.0)*r22*x2254))+(((-1.0)*r20*x2257)));
evalcond[1]=(cj0+((x2246*x2248))+(((-1.0)*r12*x2254))+(((-1.0)*r10*x2257)));
evalcond[2]=(((x2246*x2252))+(((-1.0)*r02*x2254))+(((-1.0)*x2251))+(((-1.0)*r00*x2257)));
evalcond[3]=((((-1.0)*r22*x2256))+((sj1*sj2))+((r20*x2255))+(((-1.0)*cj1*x2249))+(((-1.0)*x2250*x2254)));
evalcond[4]=((((-1.0)*r02*x2256))+(((-1.0)*x2252*x2254))+(((-1.0)*cj0*x2253))+((r00*x2255))+(((-1.0)*cj0*sj1*x2249)));
evalcond[5]=(((r10*x2255))+(((-1.0)*sj0*sj1*x2249))+(((-1.0)*r12*x2256))+(((-1.0)*x2248*x2254))+(((-1.0)*x2251*x2253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2258=((1.0)*gconst95);
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2258)))),-1);
if(!x2259.valid){
continue;
}
CheckValue<IkReal> x2260 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2258))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2259.value)))+(x2260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2261=IKsin(j4);
IkReal x2262=IKcos(j4);
IkReal x2263=(gconst94*r11);
IkReal x2264=((1.0)*cj2);
IkReal x2265=(gconst94*r21);
IkReal x2266=((1.0)*sj0);
IkReal x2267=(gconst94*r01);
IkReal x2268=(cj1*sj2);
IkReal x2269=((1.0)*x2262);
IkReal x2270=(gconst95*x2262);
IkReal x2271=((1.0)*x2261);
IkReal x2272=(gconst95*x2271);
evalcond[0]=((((-1.0)*r20*x2272))+((x2261*x2265))+(((-1.0)*r22*x2269)));
evalcond[1]=(cj0+((x2261*x2263))+(((-1.0)*r10*x2272))+(((-1.0)*r12*x2269)));
evalcond[2]=((((-1.0)*r00*x2272))+((x2261*x2267))+(((-1.0)*r02*x2269))+(((-1.0)*x2266)));
evalcond[3]=((((-1.0)*cj1*x2264))+((sj1*sj2))+(((-1.0)*r22*x2271))+((r20*x2270))+(((-1.0)*x2265*x2269)));
evalcond[4]=(((r00*x2270))+(((-1.0)*cj0*sj1*x2264))+(((-1.0)*r02*x2271))+(((-1.0)*cj0*x2268))+(((-1.0)*x2267*x2269)));
evalcond[5]=((((-1.0)*x2263*x2269))+(((-1.0)*sj0*sj1*x2264))+((r10*x2270))+(((-1.0)*r12*x2271))+(((-1.0)*x2266*x2268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2273=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2273;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2274=((1.0)*cj5);
IkReal x2275=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2274)));
j4eval[0]=x2275;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2274))))));
j4eval[2]=IKsign(x2275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2276=cj5*cj5;
IkReal x2277=r01*r01;
IkReal x2278=(r01*sj5);
IkReal x2279=(cj5*r00);
IkReal x2280=((((2.0)*x2278*x2279))+(((-1.0)*(r02*r02)))+((x2276*x2277))+(((-1.0)*x2276*(r00*r00)))+(((-1.0)*x2277)));
j4eval[0]=x2280;
j4eval[1]=IKsign(x2280);
j4eval[2]=((IKabs((x2279+(((-1.0)*x2278)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2281=cj5*cj5;
IkReal x2282=r01*r01;
IkReal x2283=(r01*sj5);
IkReal x2284=(cj5*r00);
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(IKsign(((((2.0)*x2283*x2284))+((x2281*x2282))+(((-1.0)*(r02*r02)))+(((-1.0)*x2282))+(((-1.0)*x2281*(r00*r00))))),-1);
if(!x2285.valid){
continue;
}
CheckValue<IkReal> x2286 = IKatan2WithCheck(IkReal((x2284+(((-1.0)*x2283)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2285.value)))+(x2286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2287=IKsin(j4);
IkReal x2288=IKcos(j4);
IkReal x2289=(cj5*r10);
IkReal x2290=(r01*sj5);
IkReal x2291=((1.0)*cj2);
IkReal x2292=(cj5*r00);
IkReal x2293=(cj5*r20);
IkReal x2294=((1.0)*x2288);
IkReal x2295=((1.0)*x2287);
IkReal x2296=(sj5*x2287);
evalcond[0]=((((-1.0)*x2293*x2295))+((r21*x2296))+(((-1.0)*r22*x2294)));
evalcond[1]=((((-1.0)*x2289*x2295))+(((-1.0)*r12*x2294))+((r11*x2296)));
evalcond[2]=((((-1.0)*r02*x2295))+(((-1.0)*x2290*x2294))+((x2288*x2292)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2294))+(((-1.0)*x2292*x2295))+((x2287*x2290)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2294))+(((-1.0)*cj1*x2291))+(((-1.0)*r22*x2295))+((x2288*x2293)));
evalcond[5]=((((-1.0)*r11*sj5*x2294))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2295))+(((-1.0)*sj1*x2291))+((x2288*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2297=((1.0)*cj5);
CheckValue<IkReal> x2298=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2297)))),-1);
if(!x2298.valid){
continue;
}
CheckValue<IkReal> x2299 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2298.value)))+(x2299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2300=IKsin(j4);
IkReal x2301=IKcos(j4);
IkReal x2302=(cj5*r10);
IkReal x2303=(r01*sj5);
IkReal x2304=((1.0)*cj2);
IkReal x2305=(cj5*r00);
IkReal x2306=(cj5*r20);
IkReal x2307=((1.0)*x2301);
IkReal x2308=((1.0)*x2300);
IkReal x2309=(sj5*x2300);
evalcond[0]=((((-1.0)*x2306*x2308))+(((-1.0)*r22*x2307))+((r21*x2309)));
evalcond[1]=(((r11*x2309))+(((-1.0)*x2302*x2308))+(((-1.0)*r12*x2307)));
evalcond[2]=((((-1.0)*x2303*x2307))+((x2301*x2305))+(((-1.0)*r02*x2308)));
evalcond[3]=((-1.0)+((x2300*x2303))+(((-1.0)*x2305*x2308))+(((-1.0)*r02*x2307)));
evalcond[4]=((((-1.0)*r22*x2308))+((sj1*sj2))+(((-1.0)*r21*sj5*x2307))+((x2301*x2306))+(((-1.0)*cj1*x2304)));
evalcond[5]=((((-1.0)*sj1*x2304))+(((-1.0)*r11*sj5*x2307))+(((-1.0)*cj1*sj2))+((x2301*x2302))+(((-1.0)*r12*x2308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2310.valid){
continue;
}
CheckValue<IkReal> x2311 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2310.value)))+(x2311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2312=IKsin(j4);
IkReal x2313=IKcos(j4);
IkReal x2314=(cj5*r10);
IkReal x2315=(r01*sj5);
IkReal x2316=((1.0)*cj2);
IkReal x2317=(cj5*r00);
IkReal x2318=(cj5*r20);
IkReal x2319=((1.0)*x2313);
IkReal x2320=((1.0)*x2312);
IkReal x2321=(sj5*x2312);
evalcond[0]=((((-1.0)*r22*x2319))+(((-1.0)*x2318*x2320))+((r21*x2321)));
evalcond[1]=(((r11*x2321))+(((-1.0)*r12*x2319))+(((-1.0)*x2314*x2320)));
evalcond[2]=((((-1.0)*x2315*x2319))+(((-1.0)*r02*x2320))+((x2313*x2317)));
evalcond[3]=((-1.0)+((x2312*x2315))+(((-1.0)*x2317*x2320))+(((-1.0)*r02*x2319)));
evalcond[4]=((((-1.0)*r22*x2320))+((sj1*sj2))+(((-1.0)*cj1*x2316))+(((-1.0)*r21*sj5*x2319))+((x2313*x2318)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2319))+(((-1.0)*r12*x2320))+(((-1.0)*sj1*x2316))+((x2313*x2314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2322=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2322;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2322);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2323=((1.0)*cj5);
IkReal x2324=((((-1.0)*r20*sj5))+(((-1.0)*r21*x2323)));
j4eval[0]=x2324;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2323))))));
j4eval[2]=IKsign(x2324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2325=cj5*cj5;
IkReal x2326=r01*r01;
IkReal x2327=(cj5*r00);
IkReal x2328=(r01*sj5);
IkReal x2329=((((-2.0)*x2327*x2328))+x2326+(((-1.0)*x2325*x2326))+((x2325*(r00*r00)))+(r02*r02));
j4eval[0]=x2329;
j4eval[1]=((IKabs(r02))+(IKabs((x2327+(((-1.0)*x2328))))));
j4eval[2]=IKsign(x2329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2330=cj5*cj5;
IkReal x2331=r01*r01;
IkReal x2332=(r01*sj5);
IkReal x2333=(cj5*r00);
CheckValue<IkReal> x2334=IKPowWithIntegerCheck(IKsign((((x2330*(r00*r00)))+x2331+(((-1.0)*x2330*x2331))+(r02*r02)+(((-2.0)*x2332*x2333)))),-1);
if(!x2334.valid){
continue;
}
CheckValue<IkReal> x2335 = IKatan2WithCheck(IkReal((x2333+(((-1.0)*x2332)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2334.value)))+(x2335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2336=IKsin(j4);
IkReal x2337=IKcos(j4);
IkReal x2338=(cj5*r10);
IkReal x2339=(r01*sj5);
IkReal x2340=(cj5*r00);
IkReal x2341=(cj5*r20);
IkReal x2342=((1.0)*x2337);
IkReal x2343=((1.0)*x2336);
IkReal x2344=(sj5*x2336);
evalcond[0]=((((-1.0)*x2341*x2343))+(((-1.0)*r22*x2342))+((r21*x2344)));
evalcond[1]=(((r11*x2344))+(((-1.0)*r12*x2342))+(((-1.0)*x2338*x2343)));
evalcond[2]=((((-1.0)*x2339*x2342))+(((-1.0)*r02*x2343))+((x2337*x2340)));
evalcond[3]=((1.0)+(((-1.0)*x2340*x2343))+((x2336*x2339))+(((-1.0)*r02*x2342)));
evalcond[4]=(((cj2*sj1))+((x2337*x2338))+((cj1*sj2))+(((-1.0)*r11*sj5*x2342))+(((-1.0)*r12*x2343)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2343))+((x2337*x2341))+(((-1.0)*r21*sj5*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2345=((1.0)*cj5);
CheckValue<IkReal> x2346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2345))+(((-1.0)*r20*sj5)))),-1);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2346.value)))+(x2347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2348=IKsin(j4);
IkReal x2349=IKcos(j4);
IkReal x2350=(cj5*r10);
IkReal x2351=(r01*sj5);
IkReal x2352=(cj5*r00);
IkReal x2353=(cj5*r20);
IkReal x2354=((1.0)*x2349);
IkReal x2355=((1.0)*x2348);
IkReal x2356=(sj5*x2348);
evalcond[0]=((((-1.0)*x2353*x2355))+(((-1.0)*r22*x2354))+((r21*x2356)));
evalcond[1]=(((r11*x2356))+(((-1.0)*x2350*x2355))+(((-1.0)*r12*x2354)));
evalcond[2]=((((-1.0)*r02*x2355))+((x2349*x2352))+(((-1.0)*x2351*x2354)));
evalcond[3]=((1.0)+((x2348*x2351))+(((-1.0)*x2352*x2355))+(((-1.0)*r02*x2354)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2354))+((cj1*sj2))+((x2349*x2350))+(((-1.0)*r12*x2355)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2355))+((x2349*x2353))+(((-1.0)*r21*sj5*x2354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2357 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2357.valid){
continue;
}
CheckValue<IkReal> x2358=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2357.value)+(((1.5707963267949)*(x2358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2359=IKsin(j4);
IkReal x2360=IKcos(j4);
IkReal x2361=(cj5*r10);
IkReal x2362=(r01*sj5);
IkReal x2363=(cj5*r00);
IkReal x2364=(cj5*r20);
IkReal x2365=((1.0)*x2360);
IkReal x2366=((1.0)*x2359);
IkReal x2367=(sj5*x2359);
evalcond[0]=((((-1.0)*x2364*x2366))+(((-1.0)*r22*x2365))+((r21*x2367)));
evalcond[1]=(((r11*x2367))+(((-1.0)*x2361*x2366))+(((-1.0)*r12*x2365)));
evalcond[2]=(((x2360*x2363))+(((-1.0)*x2362*x2365))+(((-1.0)*r02*x2366)));
evalcond[3]=((1.0)+((x2359*x2362))+(((-1.0)*x2363*x2366))+(((-1.0)*r02*x2365)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2365))+((cj1*sj2))+((x2360*x2361))+(((-1.0)*r12*x2366)));
evalcond[5]=((((-1.0)*r21*sj5*x2365))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2360*x2364))+(((-1.0)*r22*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2368=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2368);
rxp1_1=(px*r21);
rxp1_2=(r11*x2368);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2369=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2369);
rxp1_1=(px*r21);
rxp1_2=(r11*x2369);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2370=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2370);
rxp1_1=(px*r21);
rxp1_2=(r11*x2370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2373=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2373.valid){
continue;
}
IkReal x2371=x2373.value;
IkReal x2372=(sj0*x2371);
cj4array[0]=(((cj2*sj1*x2372))+((cj1*sj2*x2372)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2374=IKsin(j4);
IkReal x2375=IKcos(j4);
IkReal x2376=(cj5*r20);
IkReal x2377=(r21*sj5);
IkReal x2378=((1.0)*x2374);
IkReal x2379=((1.0)*x2375);
evalcond[0]=((-1.0)*r02*x2374);
evalcond[1]=((((-1.0)*r02*x2379))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2376*x2378))+((x2374*x2377)));
evalcond[3]=(((r11*sj5*x2374))+(((-1.0)*cj5*r10*x2378)));
evalcond[4]=(((x2375*x2376))+(((-1.0)*x2377*x2379))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2381=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2381.valid){
continue;
}
IkReal x2380=x2381.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2380))+((cj1*cj2*x2380)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2382=IKsin(j4);
IkReal x2383=IKcos(j4);
IkReal x2384=(r11*sj5);
IkReal x2385=((1.0)*sj0);
IkReal x2386=((1.0)*x2383);
IkReal x2387=((1.0)*cj5*x2382);
evalcond[0]=((-1.0)*r02*x2382);
evalcond[1]=((((-1.0)*r02*x2386))+(((-1.0)*x2385)));
evalcond[2]=(((r21*sj5*x2382))+(((-1.0)*r20*x2387)));
evalcond[3]=((((-1.0)*r10*x2387))+((x2382*x2384)));
evalcond[4]=((((-1.0)*cj1*sj2*x2385))+(((-1.0)*cj2*sj1*x2385))+((cj5*r10*x2383))+(((-1.0)*x2384*x2386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(r02,-1);
if(!x2388.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2388.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2389=IKsin(j4);
IkReal x2390=IKcos(j4);
IkReal x2391=((1.0)*sj0);
IkReal x2392=(cj5*x2390);
IkReal x2393=(sj5*x2389);
IkReal x2394=((1.0)*sj5*x2390);
IkReal x2395=((1.0)*cj5*x2389);
evalcond[0]=((-1.0)*r02*x2389);
evalcond[1]=((((-1.0)*r20*x2395))+((r21*x2393)));
evalcond[2]=((((-1.0)*r10*x2395))+((r11*x2393)));
evalcond[3]=(((r20*x2392))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2394)));
evalcond[4]=((((-1.0)*cj1*sj2*x2391))+(((-1.0)*cj2*sj1*x2391))+((r10*x2392))+(((-1.0)*r11*x2394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2396=((1.0)*sj0);
IkReal x2397=((1.0)*cj0);
CheckValue<IkReal> x2398 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2397))+(((-1.0)*r12*x2396)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2397))+(((-1.0)*r11*sj5*x2396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2398.value)+(((1.5707963267949)*(x2399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2400=IKsin(j4);
IkReal x2401=IKcos(j4);
IkReal x2402=(cj5*r10);
IkReal x2403=(r01*sj5);
IkReal x2404=((1.0)*cj2);
IkReal x2405=(cj5*r00);
IkReal x2406=((1.0)*sj0);
IkReal x2407=(cj5*r20);
IkReal x2408=(cj1*sj2);
IkReal x2409=((1.0)*x2401);
IkReal x2410=((1.0)*x2400);
IkReal x2411=(sj5*x2400);
evalcond[0]=(((r21*x2411))+(((-1.0)*x2407*x2410))+(((-1.0)*r22*x2409)));
evalcond[1]=((((-1.0)*x2402*x2410))+((r11*x2411))+cj0+(((-1.0)*r12*x2409)));
evalcond[2]=((((-1.0)*x2406))+(((-1.0)*r02*x2409))+(((-1.0)*x2405*x2410))+((x2400*x2403)));
evalcond[3]=((((-1.0)*r21*sj5*x2409))+((x2401*x2407))+((sj1*sj2))+(((-1.0)*cj1*x2404))+(((-1.0)*r22*x2410)));
evalcond[4]=((((-1.0)*x2403*x2409))+((x2401*x2405))+(((-1.0)*r02*x2410))+(((-1.0)*cj0*sj1*x2404))+(((-1.0)*cj0*x2408)));
evalcond[5]=((((-1.0)*sj0*sj1*x2404))+(((-1.0)*r12*x2410))+((x2401*x2402))+(((-1.0)*x2406*x2408))+(((-1.0)*r11*sj5*x2409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2412=((1.0)*cj5);
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2412)))),-1);
if(!x2413.valid){
continue;
}
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2413.value)))+(x2414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2415=IKsin(j4);
IkReal x2416=IKcos(j4);
IkReal x2417=(cj5*r10);
IkReal x2418=(r01*sj5);
IkReal x2419=((1.0)*cj2);
IkReal x2420=(cj5*r00);
IkReal x2421=((1.0)*sj0);
IkReal x2422=(cj5*r20);
IkReal x2423=(cj1*sj2);
IkReal x2424=((1.0)*x2416);
IkReal x2425=((1.0)*x2415);
IkReal x2426=(sj5*x2415);
evalcond[0]=(((r21*x2426))+(((-1.0)*x2422*x2425))+(((-1.0)*r22*x2424)));
evalcond[1]=(cj0+(((-1.0)*r12*x2424))+((r11*x2426))+(((-1.0)*x2417*x2425)));
evalcond[2]=((((-1.0)*r02*x2424))+((x2415*x2418))+(((-1.0)*x2420*x2425))+(((-1.0)*x2421)));
evalcond[3]=(((x2416*x2422))+((sj1*sj2))+(((-1.0)*r22*x2425))+(((-1.0)*cj1*x2419))+(((-1.0)*r21*sj5*x2424)));
evalcond[4]=((((-1.0)*r02*x2425))+((x2416*x2420))+(((-1.0)*cj0*sj1*x2419))+(((-1.0)*cj0*x2423))+(((-1.0)*x2418*x2424)));
evalcond[5]=((((-1.0)*r11*sj5*x2424))+(((-1.0)*r12*x2425))+(((-1.0)*x2421*x2423))+((x2416*x2417))+(((-1.0)*sj0*sj1*x2419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2427=((1.0)*cj5);
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2427))+(((-1.0)*r00*sj5)))),-1);
if(!x2428.valid){
continue;
}
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2427))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2428.value)))+(x2429.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2430=IKsin(j4);
IkReal x2431=IKcos(j4);
IkReal x2432=(cj5*r10);
IkReal x2433=(r01*sj5);
IkReal x2434=((1.0)*cj2);
IkReal x2435=(cj5*r00);
IkReal x2436=((1.0)*sj0);
IkReal x2437=(cj5*r20);
IkReal x2438=(cj1*sj2);
IkReal x2439=((1.0)*x2431);
IkReal x2440=((1.0)*x2430);
IkReal x2441=(sj5*x2430);
evalcond[0]=((((-1.0)*r22*x2439))+(((-1.0)*x2437*x2440))+((r21*x2441)));
evalcond[1]=(cj0+((r11*x2441))+(((-1.0)*r12*x2439))+(((-1.0)*x2432*x2440)));
evalcond[2]=((((-1.0)*x2436))+(((-1.0)*x2435*x2440))+(((-1.0)*r02*x2439))+((x2430*x2433)));
evalcond[3]=((((-1.0)*r21*sj5*x2439))+((sj1*sj2))+((x2431*x2437))+(((-1.0)*cj1*x2434))+(((-1.0)*r22*x2440)));
evalcond[4]=((((-1.0)*cj0*x2438))+(((-1.0)*x2433*x2439))+((x2431*x2435))+(((-1.0)*cj0*sj1*x2434))+(((-1.0)*r02*x2440)));
evalcond[5]=((((-1.0)*sj0*sj1*x2434))+((x2431*x2432))+(((-1.0)*r12*x2440))+(((-1.0)*x2436*x2438))+(((-1.0)*r11*sj5*x2439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2442=cj5*cj5;
IkReal x2443=r21*r21;
IkReal x2444=(sj1*sj2);
IkReal x2445=(r21*sj5);
IkReal x2446=(cj1*cj2);
IkReal x2447=(cj5*r20);
CheckValue<IkReal> x2448 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2446))+((r22*x2444)))),IkReal((((x2446*x2447))+(((-1.0)*x2444*x2447))+(((-1.0)*x2445*x2446))+((x2444*x2445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2448.valid){
continue;
}
CheckValue<IkReal> x2449=IKPowWithIntegerCheck(IKsign((x2443+(((-2.0)*x2445*x2447))+(r22*r22)+(((-1.0)*x2442*x2443))+((x2442*(r20*r20))))),-1);
if(!x2449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2448.value)+(((1.5707963267949)*(x2449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2450=IKsin(j4);
IkReal x2451=IKcos(j4);
IkReal x2452=(r21*sj5);
IkReal x2453=(cj5*r20);
IkReal x2454=((1.0)*x2451);
IkReal x2455=((1.0)*x2450);
evalcond[0]=((((-1.0)*x2453*x2455))+((x2450*x2452))+(((-1.0)*r22*x2454)));
evalcond[1]=((((-1.0)*x2452*x2454))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2455))+((x2451*x2453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2456=(cj5*sj4);
IkReal x2457=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2457))+(((-1.0)*r00*x2456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2457))+((r10*x2456))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2457))+(((-1.0)*r00*x2456))))+IKsqr(((((-1.0)*r11*x2457))+((r10*x2456))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2457))+(((-1.0)*r00*x2456))), ((((-1.0)*r11*x2457))+((r10*x2456))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2458=IKcos(j0);
IkReal x2459=IKsin(j0);
IkReal x2460=(cj4*cj5);
IkReal x2461=(cj5*r01);
IkReal x2462=(r11*sj5);
IkReal x2463=((0.1157)*sj5);
IkReal x2464=((1.0)*sj4);
IkReal x2465=((1.0)*cj2);
IkReal x2466=((0.5723)*sj2);
IkReal x2467=(cj5*r11);
IkReal x2468=((1.0)*cj4);
IkReal x2469=((0.5723)*cj2);
IkReal x2470=(r01*sj5);
IkReal x2471=((1.0)*cj1*sj2);
IkReal x2472=(sj1*x2458);
IkReal x2473=(cj1*x2458);
IkReal x2474=(cj1*x2459);
IkReal x2475=(sj1*x2459);
evalcond[0]=(x2458+(((-1.0)*r12*x2468))+(((-1.0)*cj5*r10*x2464))+((sj4*x2462)));
evalcond[1]=(((sj4*x2470))+(((-1.0)*cj5*r00*x2464))+(((-1.0)*x2459))+(((-1.0)*r02*x2468)));
evalcond[2]=(((r00*sj5))+x2461+((sj2*x2472))+(((-1.0)*x2465*x2473)));
evalcond[3]=(x2467+((r10*sj5))+((sj2*x2475))+(((-1.0)*x2465*x2474)));
evalcond[4]=((((-1.0)*x2468*x2470))+(((-1.0)*x2458*x2471))+(((-1.0)*r02*x2464))+(((-1.0)*x2465*x2472))+((r00*x2460)));
evalcond[5]=((((-1.0)*r12*x2464))+(((-1.0)*x2459*x2471))+(((-1.0)*x2465*x2475))+((r10*x2460))+(((-1.0)*x2462*x2468)));
evalcond[6]=((((-1.0)*r00*x2463))+(((-0.1157)*x2461))+(((-1.0)*px))+(((0.612)*x2473))+(((-1.0)*x2466*x2472))+(((-0.163941)*x2459))+((x2469*x2473)));
evalcond[7]=((((-0.1157)*x2467))+(((0.163941)*x2458))+(((-1.0)*py))+(((0.612)*x2474))+(((-1.0)*x2466*x2475))+(((-1.0)*r10*x2463))+((x2469*x2474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2476=((1.0)*cj5);
IkReal x2477=((1.0)*sj5);
CheckValue<IkReal> x2478=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2478.valid){
continue;
}
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2476))+(((-1.0)*r10*x2477)))),IkReal(((((-1.0)*r01*x2476))+(((-1.0)*r00*x2477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2478.value)))+(x2479.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2480=IKcos(j0);
IkReal x2481=IKsin(j0);
IkReal x2482=(cj5*r01);
IkReal x2483=(sj1*sj2);
IkReal x2484=((0.1157)*sj5);
IkReal x2485=(cj5*r11);
IkReal x2486=(cj1*cj2);
IkReal x2487=((0.5723)*x2481);
IkReal x2488=(cj1*x2481);
IkReal x2489=((0.5723)*x2480);
evalcond[0]=((((-1.0)*x2480*x2486))+((r00*sj5))+x2482+((x2480*x2483)));
evalcond[1]=(x2485+((r10*sj5))+((x2481*x2483))+(((-1.0)*x2481*x2486)));
evalcond[2]=((((-0.1157)*x2482))+(((-0.163941)*x2481))+(((-1.0)*r00*x2484))+(((-1.0)*px))+((x2486*x2489))+(((0.612)*cj1*x2480))+(((-1.0)*x2483*x2489)));
evalcond[3]=((((-0.1157)*x2485))+(((-1.0)*r10*x2484))+(((0.612)*x2488))+(((-1.0)*py))+((x2486*x2487))+(((-1.0)*x2483*x2487))+(((0.163941)*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2490=((1.0)*cj5);
IkReal x2491=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2490)));
j4eval[0]=x2491;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2490)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2492=((1.0)*cj5);
IkReal x2493=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2492)));
j4eval[0]=x2493;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2492))))));
j4eval[2]=IKsign(x2493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2494=((1.0)*sj0);
IkReal x2495=((1.0)*cj0);
IkReal x2496=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2496;
j4eval[1]=((IKabs(((((-1.0)*r02*x2495))+(((-1.0)*r12*x2494)))))+(IKabs(((((-1.0)*r01*sj5*x2495))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2494))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x2496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2497=((-1.0)*r20);
IkReal x2499 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2499)==0){
continue;
}
IkReal x2498=pow(x2499,-0.5);
CheckValue<IkReal> x2500 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2497),IKFAST_ATAN2_MAGTHRESH);
if(!x2500.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2500.value));
IkReal gconst79=(r21*x2498);
IkReal gconst80=(x2497*x2498);
CheckValue<IkReal> x2501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2501.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2501.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2502=((-1.0)*r20);
IkReal x2503=x2498;
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2502),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
IkReal x2504=((-1.0)*(x2505.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2504;
IkReal gconst78=x2504;
IkReal gconst79=(r21*x2503);
IkReal gconst80=(x2502*x2503);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2506=((-1.0)*r20);
IkReal x2507=x2498;
CheckValue<IkReal> x2509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2506),IKFAST_ATAN2_MAGTHRESH);
if(!x2509.valid){
continue;
}
IkReal x2508=((-1.0)*(x2509.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2508;
IkReal gconst78=x2508;
IkReal gconst79=(r21*x2507);
IkReal gconst80=(x2506*x2507);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2510=((-1.0)*r20);
IkReal x2511=x2498;
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2510),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
IkReal x2512=((-1.0)*(x2513.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2512;
IkReal gconst78=x2512;
IkReal gconst79=(r21*x2511);
IkReal gconst80=(x2510*x2511);
IkReal x2514=r22*r22;
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2514))),-1);
if(!x2517.valid){
continue;
}
IkReal x2515=x2517.value;
IkReal x2516=((((2.0)*x2515*(r20*r20)*(r21*r21)))+x2514+((x2515*(r20*r20*r20*r20)))+((x2515*(r21*r21*r21*r21))));
j4eval[0]=x2516;
j4eval[1]=IKsign(x2516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2518=(sj1*sj2);
IkReal x2519=(gconst80*r20);
IkReal x2520=(gconst79*r21);
IkReal x2521=(cj1*cj2);
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2521))+((r22*x2518)))),IkReal((((x2519*x2521))+(((-1.0)*x2520*x2521))+((x2518*x2520))+(((-1.0)*x2518*x2519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523=IKPowWithIntegerCheck(IKsign(((x2519*x2519)+(r22*r22)+(x2520*x2520)+(((-2.0)*x2519*x2520)))),-1);
if(!x2523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2522.value)+(((1.5707963267949)*(x2523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2524=IKsin(j4);
IkReal x2525=IKcos(j4);
IkReal x2526=(gconst79*r01);
IkReal x2527=(gconst79*r21);
IkReal x2528=((1.0)*cj2);
IkReal x2529=(gconst79*r11);
IkReal x2530=((1.0)*sj0);
IkReal x2531=(cj1*sj2);
IkReal x2532=((1.0)*x2525);
IkReal x2533=(gconst80*x2525);
IkReal x2534=((1.0)*x2524);
IkReal x2535=(gconst80*x2534);
evalcond[0]=((((-1.0)*r20*x2535))+(((-1.0)*r22*x2532))+((x2524*x2527)));
evalcond[1]=(cj0+(((-1.0)*r10*x2535))+(((-1.0)*r12*x2532))+((x2524*x2529)));
evalcond[2]=((((-1.0)*r00*x2535))+(((-1.0)*r02*x2532))+(((-1.0)*x2530))+((x2524*x2526)));
evalcond[3]=(((r20*x2533))+((sj1*sj2))+(((-1.0)*x2527*x2532))+(((-1.0)*cj1*x2528))+(((-1.0)*r22*x2534)));
evalcond[4]=((((-1.0)*cj0*sj1*x2528))+(((-1.0)*r02*x2534))+(((-1.0)*x2526*x2532))+((r00*x2533))+(((-1.0)*cj0*x2531)));
evalcond[5]=(((r10*x2533))+(((-1.0)*x2530*x2531))+(((-1.0)*r12*x2534))+(((-1.0)*sj0*sj1*x2528))+(((-1.0)*x2529*x2532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2536=((1.0)*gconst80);
CheckValue<IkReal> x2537=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2536)))),-1);
if(!x2537.valid){
continue;
}
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2536))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2537.value)))+(x2538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2539=IKsin(j4);
IkReal x2540=IKcos(j4);
IkReal x2541=(gconst79*r01);
IkReal x2542=(gconst79*r21);
IkReal x2543=((1.0)*cj2);
IkReal x2544=(gconst79*r11);
IkReal x2545=((1.0)*sj0);
IkReal x2546=(cj1*sj2);
IkReal x2547=((1.0)*x2540);
IkReal x2548=(gconst80*x2540);
IkReal x2549=((1.0)*x2539);
IkReal x2550=(gconst80*x2549);
evalcond[0]=(((x2539*x2542))+(((-1.0)*r20*x2550))+(((-1.0)*r22*x2547)));
evalcond[1]=((((-1.0)*r12*x2547))+cj0+((x2539*x2544))+(((-1.0)*r10*x2550)));
evalcond[2]=(((x2539*x2541))+(((-1.0)*r00*x2550))+(((-1.0)*x2545))+(((-1.0)*r02*x2547)));
evalcond[3]=((((-1.0)*x2542*x2547))+((sj1*sj2))+((r20*x2548))+(((-1.0)*cj1*x2543))+(((-1.0)*r22*x2549)));
evalcond[4]=((((-1.0)*x2541*x2547))+((r00*x2548))+(((-1.0)*cj0*x2546))+(((-1.0)*r02*x2549))+(((-1.0)*cj0*sj1*x2543)));
evalcond[5]=((((-1.0)*r12*x2549))+(((-1.0)*x2545*x2546))+(((-1.0)*x2544*x2547))+(((-1.0)*sj0*sj1*x2543))+((r10*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2551=((1.0)*gconst80);
CheckValue<IkReal> x2552 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2552.valid){
continue;
}
CheckValue<IkReal> x2553=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2551)))),-1);
if(!x2553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2552.value)+(((1.5707963267949)*(x2553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2554=IKsin(j4);
IkReal x2555=IKcos(j4);
IkReal x2556=(gconst79*r01);
IkReal x2557=(gconst79*r21);
IkReal x2558=((1.0)*cj2);
IkReal x2559=(gconst79*r11);
IkReal x2560=((1.0)*sj0);
IkReal x2561=(cj1*sj2);
IkReal x2562=((1.0)*x2555);
IkReal x2563=(gconst80*x2555);
IkReal x2564=((1.0)*x2554);
IkReal x2565=(gconst80*x2564);
evalcond[0]=((((-1.0)*r22*x2562))+(((-1.0)*r20*x2565))+((x2554*x2557)));
evalcond[1]=(cj0+((x2554*x2559))+(((-1.0)*r12*x2562))+(((-1.0)*r10*x2565)));
evalcond[2]=((((-1.0)*r00*x2565))+(((-1.0)*r02*x2562))+(((-1.0)*x2560))+((x2554*x2556)));
evalcond[3]=((((-1.0)*r22*x2564))+(((-1.0)*x2557*x2562))+((sj1*sj2))+((r20*x2563))+(((-1.0)*cj1*x2558)));
evalcond[4]=((((-1.0)*cj0*x2561))+((r00*x2563))+(((-1.0)*cj0*sj1*x2558))+(((-1.0)*x2556*x2562))+(((-1.0)*r02*x2564)));
evalcond[5]=(((r10*x2563))+(((-1.0)*x2560*x2561))+(((-1.0)*x2559*x2562))+(((-1.0)*sj0*sj1*x2558))+(((-1.0)*r12*x2564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2566=((-1.0)*r21);
IkReal x2568 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2568)==0){
continue;
}
IkReal x2567=pow(x2568,-0.5);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal(x2566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2569.value))));
IkReal gconst82=(x2566*x2567);
IkReal gconst83=((1.0)*r20*x2567);
CheckValue<IkReal> x2570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2570.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2570.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2571=((-1.0)*r21);
CheckValue<IkReal> x2574 = IKatan2WithCheck(IkReal(x2571),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2574.valid){
continue;
}
IkReal x2572=((1.0)*(x2574.value));
IkReal x2573=x2567;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2572)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2572)));
IkReal gconst82=(x2571*x2573);
IkReal gconst83=((1.0)*r20*x2573);
IkReal x2575=r22*r22;
IkReal x2576=((1.0)*x2575);
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(((-1.0)+x2575),-1);
if(!x2580.valid){
continue;
}
IkReal x2577=x2580.value;
if((((1.0)+(((-1.0)*x2576)))) < -0.00001)
continue;
IkReal x2578=IKsqrt(((1.0)+(((-1.0)*x2576))));
IkReal x2579=(cj0*x2577*x2578);
j4eval[0]=((IKabs((x2579+(((-1.0)*x2576*x2579)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2581=((-1.0)*r21);
CheckValue<IkReal> x2584 = IKatan2WithCheck(IkReal(x2581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2584.valid){
continue;
}
IkReal x2582=((1.0)*(x2584.value));
IkReal x2583=x2567;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2582)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2582)));
IkReal gconst82=(x2581*x2583);
IkReal gconst83=((1.0)*r20*x2583);
IkReal x2585=r22*r22;
IkReal x2586=((1.0)*x2585);
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(((-1.0)+x2585),-1);
if(!x2590.valid){
continue;
}
IkReal x2587=x2590.value;
if((((1.0)+(((-1.0)*x2586)))) < -0.00001)
continue;
IkReal x2588=IKsqrt(((1.0)+(((-1.0)*x2586))));
IkReal x2589=(sj0*x2587*x2588);
j4eval[0]=((IKabs((x2589+(((-1.0)*x2586*x2589)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2591=((-1.0)*r21);
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(x2591),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
IkReal x2592=((1.0)*(x2594.value));
IkReal x2593=x2567;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2592)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2592)));
IkReal gconst82=(x2591*x2593);
IkReal gconst83=((1.0)*r20*x2593);
IkReal x2595=r22*r22;
IkReal x2596=(r12*sj0);
IkReal x2597=(cj0*r02);
CheckValue<IkReal> x2601=IKPowWithIntegerCheck(((-1.0)+x2595),-1);
if(!x2601.valid){
continue;
}
IkReal x2598=x2601.value;
if((((1.0)+(((-1.0)*x2595)))) < -0.00001)
continue;
IkReal x2599=IKsqrt(((1.0)+(((-1.0)*x2595))));
IkReal x2600=(r22*x2598*x2599);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2596*x2600))+((x2597*x2600)))))+(IKabs(((((-1.0)*x2596))+(((-1.0)*x2597))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2602=((1.0)*sj0);
IkReal x2603=((1.0)*cj0);
CheckValue<IkReal> x2604=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2604.valid){
continue;
}
CheckValue<IkReal> x2605 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2602))+(((-1.0)*r02*x2603)))),IkReal(((((-1.0)*gconst82*r01*x2603))+(((-1.0)*gconst82*r11*x2602))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2604.value)))+(x2605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2606=IKsin(j4);
IkReal x2607=IKcos(j4);
IkReal x2608=(gconst82*r11);
IkReal x2609=((1.0)*cj2);
IkReal x2610=((1.0)*sj0);
IkReal x2611=(cj1*sj2);
IkReal x2612=((1.0)*x2607);
IkReal x2613=(gconst83*x2607);
IkReal x2614=(gconst82*x2606);
IkReal x2615=((1.0)*x2606);
evalcond[0]=((((-1.0)*gconst83*r20*x2615))+(((-1.0)*r22*x2612))+((r21*x2614)));
evalcond[1]=(cj0+(((-1.0)*r12*x2612))+((x2606*x2608))+(((-1.0)*gconst83*r10*x2615)));
evalcond[2]=(((r01*x2614))+(((-1.0)*gconst83*r00*x2615))+(((-1.0)*r02*x2612))+(((-1.0)*x2610)));
evalcond[3]=(((r20*x2613))+(((-1.0)*gconst82*r21*x2612))+((sj1*sj2))+(((-1.0)*r22*x2615))+(((-1.0)*cj1*x2609)));
evalcond[4]=(((r00*x2613))+(((-1.0)*gconst82*r01*x2612))+(((-1.0)*cj0*x2611))+(((-1.0)*r02*x2615))+(((-1.0)*cj0*sj1*x2609)));
evalcond[5]=((((-1.0)*x2610*x2611))+(((-1.0)*x2608*x2612))+(((-1.0)*r12*x2615))+((r10*x2613))+(((-1.0)*sj0*sj1*x2609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2616=((1.0)*gconst83);
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2616))+(((-1.0)*gconst82*r10)))),-1);
if(!x2617.valid){
continue;
}
CheckValue<IkReal> x2618 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2616))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2617.value)))+(x2618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2619=IKsin(j4);
IkReal x2620=IKcos(j4);
IkReal x2621=(gconst82*r11);
IkReal x2622=((1.0)*cj2);
IkReal x2623=((1.0)*sj0);
IkReal x2624=(cj1*sj2);
IkReal x2625=((1.0)*x2620);
IkReal x2626=(gconst83*x2620);
IkReal x2627=(gconst82*x2619);
IkReal x2628=((1.0)*x2619);
evalcond[0]=((((-1.0)*gconst83*r20*x2628))+(((-1.0)*r22*x2625))+((r21*x2627)));
evalcond[1]=((((-1.0)*gconst83*r10*x2628))+((x2619*x2621))+cj0+(((-1.0)*r12*x2625)));
evalcond[2]=(((r01*x2627))+(((-1.0)*gconst83*r00*x2628))+(((-1.0)*r02*x2625))+(((-1.0)*x2623)));
evalcond[3]=(((r20*x2626))+(((-1.0)*gconst82*r21*x2625))+((sj1*sj2))+(((-1.0)*r22*x2628))+(((-1.0)*cj1*x2622)));
evalcond[4]=(((r00*x2626))+(((-1.0)*gconst82*r01*x2625))+(((-1.0)*cj0*x2624))+(((-1.0)*r02*x2628))+(((-1.0)*cj0*sj1*x2622)));
evalcond[5]=((((-1.0)*x2623*x2624))+(((-1.0)*r12*x2628))+(((-1.0)*sj0*sj1*x2622))+((r10*x2626))+(((-1.0)*x2621*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2629=((1.0)*gconst83);
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2629))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
CheckValue<IkReal> x2631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2629))+(((-1.0)*gconst82*r00)))),-1);
if(!x2631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2630.value)+(((1.5707963267949)*(x2631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2632=IKsin(j4);
IkReal x2633=IKcos(j4);
IkReal x2634=(gconst82*r11);
IkReal x2635=((1.0)*cj2);
IkReal x2636=((1.0)*sj0);
IkReal x2637=(cj1*sj2);
IkReal x2638=((1.0)*x2633);
IkReal x2639=(gconst83*x2633);
IkReal x2640=(gconst82*x2632);
IkReal x2641=((1.0)*x2632);
evalcond[0]=((((-1.0)*gconst83*r20*x2641))+((r21*x2640))+(((-1.0)*r22*x2638)));
evalcond[1]=(cj0+((x2632*x2634))+(((-1.0)*gconst83*r10*x2641))+(((-1.0)*r12*x2638)));
evalcond[2]=((((-1.0)*r02*x2638))+(((-1.0)*x2636))+((r01*x2640))+(((-1.0)*gconst83*r00*x2641)));
evalcond[3]=((((-1.0)*r22*x2641))+(((-1.0)*cj1*x2635))+((sj1*sj2))+((r20*x2639))+(((-1.0)*gconst82*r21*x2638)));
evalcond[4]=((((-1.0)*cj0*sj1*x2635))+(((-1.0)*r02*x2641))+(((-1.0)*gconst82*r01*x2638))+((r00*x2639))+(((-1.0)*cj0*x2637)));
evalcond[5]=((((-1.0)*sj0*sj1*x2635))+(((-1.0)*r12*x2641))+((r10*x2639))+(((-1.0)*x2634*x2638))+(((-1.0)*x2636*x2637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2642=((-1.0)*r10);
IkReal x2644 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2644)==0){
continue;
}
IkReal x2643=pow(x2644,-0.5);
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2642),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2645.value));
IkReal gconst85=(r11*x2643);
IkReal gconst86=(x2642*x2643);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2646.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2647=((-1.0)*r10);
IkReal x2648=x2643;
CheckValue<IkReal> x2650 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2647),IKFAST_ATAN2_MAGTHRESH);
if(!x2650.valid){
continue;
}
IkReal x2649=((-1.0)*(x2650.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2649;
IkReal gconst84=x2649;
IkReal gconst85=(r11*x2648);
IkReal gconst86=(x2647*x2648);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2651=((1.0)*sj0);
IkReal x2652=((1.0)*gconst85);
CheckValue<IkReal> x2653=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2652)))),-1);
if(!x2653.valid){
continue;
}
CheckValue<IkReal> x2654 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2651))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2651))+(((-1.0)*cj0*r01*x2652))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2653.value)))+(x2654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2655=IKsin(j4);
IkReal x2656=IKcos(j4);
IkReal x2657=(gconst85*r21);
IkReal x2658=(gconst86*r00);
IkReal x2659=(gconst86*r10);
IkReal x2660=((1.0)*cj2);
IkReal x2661=(gconst85*r11);
IkReal x2662=(gconst85*r01);
IkReal x2663=((1.0)*sj0);
IkReal x2664=(gconst86*r20);
IkReal x2665=(cj1*sj2);
IkReal x2666=((1.0)*x2656);
IkReal x2667=((1.0)*x2655);
evalcond[0]=(((x2655*x2657))+(((-1.0)*x2664*x2667))+(((-1.0)*r22*x2666)));
evalcond[1]=((((-1.0)*r12*x2666))+cj0+((x2655*x2661))+(((-1.0)*x2659*x2667)));
evalcond[2]=(((x2655*x2662))+(((-1.0)*r02*x2666))+(((-1.0)*x2663))+(((-1.0)*x2658*x2667)));
evalcond[3]=(((x2656*x2664))+((sj1*sj2))+(((-1.0)*cj1*x2660))+(((-1.0)*x2657*x2666))+(((-1.0)*r22*x2667)));
evalcond[4]=((((-1.0)*cj0*x2665))+((x2656*x2658))+(((-1.0)*cj0*sj1*x2660))+(((-1.0)*x2662*x2666))+(((-1.0)*r02*x2667)));
evalcond[5]=((((-1.0)*r12*x2667))+((x2656*x2659))+(((-1.0)*sj0*sj1*x2660))+(((-1.0)*x2663*x2665))+(((-1.0)*x2661*x2666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2668=((1.0)*gconst86);
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
CheckValue<IkReal> x2670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2668))+(((-1.0)*gconst85*r00)))),-1);
if(!x2670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2669.value)+(((1.5707963267949)*(x2670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2671=IKsin(j4);
IkReal x2672=IKcos(j4);
IkReal x2673=(gconst85*r21);
IkReal x2674=(gconst86*r00);
IkReal x2675=(gconst86*r10);
IkReal x2676=((1.0)*cj2);
IkReal x2677=(gconst85*r11);
IkReal x2678=(gconst85*r01);
IkReal x2679=((1.0)*sj0);
IkReal x2680=(gconst86*r20);
IkReal x2681=(cj1*sj2);
IkReal x2682=((1.0)*x2672);
IkReal x2683=((1.0)*x2671);
evalcond[0]=((((-1.0)*x2680*x2683))+(((-1.0)*r22*x2682))+((x2671*x2673)));
evalcond[1]=((((-1.0)*r12*x2682))+cj0+(((-1.0)*x2675*x2683))+((x2671*x2677)));
evalcond[2]=((((-1.0)*r02*x2682))+(((-1.0)*x2679))+((x2671*x2678))+(((-1.0)*x2674*x2683)));
evalcond[3]=(((x2672*x2680))+(((-1.0)*cj1*x2676))+((sj1*sj2))+(((-1.0)*r22*x2683))+(((-1.0)*x2673*x2682)));
evalcond[4]=((((-1.0)*cj0*x2681))+(((-1.0)*r02*x2683))+((x2672*x2674))+(((-1.0)*cj0*sj1*x2676))+(((-1.0)*x2678*x2682)));
evalcond[5]=((((-1.0)*r12*x2683))+((x2672*x2675))+(((-1.0)*sj0*sj1*x2676))+(((-1.0)*x2679*x2681))+(((-1.0)*x2677*x2682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2684=((-1.0)*r11);
IkReal x2686 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2686)==0){
continue;
}
IkReal x2685=pow(x2686,-0.5);
CheckValue<IkReal> x2687 = IKatan2WithCheck(IkReal(x2684),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2687.value))));
IkReal gconst88=(x2684*x2685);
IkReal gconst89=((1.0)*r10*x2685);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2688.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2689=((-1.0)*r11);
CheckValue<IkReal> x2692 = IKatan2WithCheck(IkReal(x2689),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2692.valid){
continue;
}
IkReal x2690=((1.0)*(x2692.value));
IkReal x2691=x2685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2690)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2690)));
IkReal gconst88=(x2689*x2691);
IkReal gconst89=((1.0)*r10*x2691);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2693=((-1.0)*r11);
CheckValue<IkReal> x2696 = IKatan2WithCheck(IkReal(x2693),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2696.valid){
continue;
}
IkReal x2694=((1.0)*(x2696.value));
IkReal x2695=x2685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2694)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2694)));
IkReal gconst88=(x2693*x2695);
IkReal gconst89=((1.0)*r10*x2695);
IkReal x2697=r12*r12;
IkReal x2698=((1.0)*sj0);
IkReal x2699=(cj0*r02);
IkReal x2700=x2685;
j4eval[0]=((IKabs((((r12*x2699*x2700))+((sj0*x2697*x2700))+(((-1.0)*x2698*x2700)))))+(IKabs(((((-1.0)*r12*x2698))+(((-1.0)*x2699))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2701=((-1.0)*r11);
CheckValue<IkReal> x2704 = IKatan2WithCheck(IkReal(x2701),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2704.valid){
continue;
}
IkReal x2702=((1.0)*(x2704.value));
IkReal x2703=x2685;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2702)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2702)));
IkReal gconst88=(x2701*x2703);
IkReal gconst89=((1.0)*r10*x2703);
IkReal x2705=r12*r12;
IkReal x2706=(cj1*cj2*r22);
IkReal x2707=(r22*sj1*sj2);
CheckValue<IkReal> x2711=IKPowWithIntegerCheck(((-1.0)+x2705),-1);
if(!x2711.valid){
continue;
}
IkReal x2708=x2711.value;
if((((1.0)+(((-1.0)*x2705)))) < -0.00001)
continue;
IkReal x2709=IKsqrt(((1.0)+(((-1.0)*x2705))));
IkReal x2710=(r12*x2708*x2709);
j4eval[0]=((IKabs((((x2706*x2710))+(((-1.0)*x2707*x2710)))))+(IKabs((x2707+(((-1.0)*x2706))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2712=(cj1*cj2);
IkReal x2713=(gconst89*r20);
IkReal x2714=(gconst88*r21);
IkReal x2715=(sj1*sj2);
CheckValue<IkReal> x2716=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2713*x2713)+(x2714*x2714)+(((-2.0)*x2713*x2714)))),-1);
if(!x2716.valid){
continue;
}
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal((((r22*x2715))+(((-1.0)*r22*x2712)))),IkReal((((x2712*x2713))+(((-1.0)*x2713*x2715))+(((-1.0)*x2712*x2714))+((x2714*x2715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2716.value)))+(x2717.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2718=IKsin(j4);
IkReal x2719=IKcos(j4);
IkReal x2720=((1.0)*sj0);
IkReal x2721=((1.0)*cj2);
IkReal x2722=(gconst89*r20);
IkReal x2723=(gconst89*r10);
IkReal x2724=(gconst89*r00);
IkReal x2725=(cj1*sj2);
IkReal x2726=((1.0)*x2719);
IkReal x2727=((1.0)*x2718);
IkReal x2728=(gconst88*x2718);
evalcond[0]=((((-1.0)*x2722*x2727))+((r21*x2728))+(((-1.0)*r22*x2726)));
evalcond[1]=(cj0+(((-1.0)*r12*x2726))+(((-1.0)*x2723*x2727))+((r11*x2728)));
evalcond[2]=((((-1.0)*x2724*x2727))+((r01*x2728))+(((-1.0)*x2720))+(((-1.0)*r02*x2726)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2727))+(((-1.0)*gconst88*r21*x2726))+((x2719*x2722))+(((-1.0)*cj1*x2721)));
evalcond[4]=(((x2719*x2724))+(((-1.0)*cj0*x2725))+(((-1.0)*gconst88*r01*x2726))+(((-1.0)*r02*x2727))+(((-1.0)*cj0*sj1*x2721)));
evalcond[5]=((((-1.0)*cj2*sj1*x2720))+(((-1.0)*gconst88*r11*x2726))+(((-1.0)*x2720*x2725))+(((-1.0)*r12*x2727))+((x2719*x2723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2729=((1.0)*sj0);
IkReal x2730=((1.0)*cj0);
CheckValue<IkReal> x2731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2731.valid){
continue;
}
CheckValue<IkReal> x2732 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2729))+(((-1.0)*r02*x2730)))),IkReal(((((-1.0)*gconst88*r11*x2729))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2730))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2731.value)))+(x2732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2733=IKsin(j4);
IkReal x2734=IKcos(j4);
IkReal x2735=((1.0)*sj0);
IkReal x2736=((1.0)*cj2);
IkReal x2737=(gconst89*r20);
IkReal x2738=(gconst89*r10);
IkReal x2739=(gconst89*r00);
IkReal x2740=(cj1*sj2);
IkReal x2741=((1.0)*x2734);
IkReal x2742=((1.0)*x2733);
IkReal x2743=(gconst88*x2733);
evalcond[0]=(((r21*x2743))+(((-1.0)*x2737*x2742))+(((-1.0)*r22*x2741)));
evalcond[1]=(((r11*x2743))+cj0+(((-1.0)*x2738*x2742))+(((-1.0)*r12*x2741)));
evalcond[2]=((((-1.0)*x2739*x2742))+((r01*x2743))+(((-1.0)*x2735))+(((-1.0)*r02*x2741)));
evalcond[3]=((((-1.0)*gconst88*r21*x2741))+((sj1*sj2))+((x2734*x2737))+(((-1.0)*cj1*x2736))+(((-1.0)*r22*x2742)));
evalcond[4]=((((-1.0)*cj0*sj1*x2736))+((x2734*x2739))+(((-1.0)*cj0*x2740))+(((-1.0)*r02*x2742))+(((-1.0)*gconst88*r01*x2741)));
evalcond[5]=((((-1.0)*cj2*sj1*x2735))+(((-1.0)*gconst88*r11*x2741))+((x2734*x2738))+(((-1.0)*x2735*x2740))+(((-1.0)*r12*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2744=((1.0)*gconst89);
CheckValue<IkReal> x2745 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2744))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2745.valid){
continue;
}
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2744))+(((-1.0)*gconst88*r00)))),-1);
if(!x2746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2745.value)+(((1.5707963267949)*(x2746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2747=IKsin(j4);
IkReal x2748=IKcos(j4);
IkReal x2749=((1.0)*sj0);
IkReal x2750=((1.0)*cj2);
IkReal x2751=(gconst89*r20);
IkReal x2752=(gconst89*r10);
IkReal x2753=(gconst89*r00);
IkReal x2754=(cj1*sj2);
IkReal x2755=((1.0)*x2748);
IkReal x2756=((1.0)*x2747);
IkReal x2757=(gconst88*x2747);
evalcond[0]=((((-1.0)*r22*x2755))+((r21*x2757))+(((-1.0)*x2751*x2756)));
evalcond[1]=(((r11*x2757))+(((-1.0)*x2752*x2756))+cj0+(((-1.0)*r12*x2755)));
evalcond[2]=((((-1.0)*x2753*x2756))+((r01*x2757))+(((-1.0)*x2749))+(((-1.0)*r02*x2755)));
evalcond[3]=((((-1.0)*r22*x2756))+(((-1.0)*gconst88*r21*x2755))+((sj1*sj2))+(((-1.0)*cj1*x2750))+((x2748*x2751)));
evalcond[4]=((((-1.0)*gconst88*r01*x2755))+(((-1.0)*cj0*x2754))+((x2748*x2753))+(((-1.0)*cj0*sj1*x2750))+(((-1.0)*r02*x2756)));
evalcond[5]=((((-1.0)*gconst88*r11*x2755))+(((-1.0)*cj2*sj1*x2749))+(((-1.0)*r12*x2756))+((x2748*x2752))+(((-1.0)*x2749*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2758=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2758;
j4eval[1]=IKsign(x2758);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2759=((1.0)*cj5);
IkReal x2760=((((-1.0)*r01*x2759))+(((-1.0)*r00*sj5)));
j4eval[0]=x2760;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2759))))));
j4eval[2]=IKsign(x2760);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2761=cj5*cj5;
IkReal x2762=r11*r11;
IkReal x2763=(r11*sj5);
IkReal x2764=(cj5*r10);
IkReal x2765=(x2762+(r12*r12)+((x2761*(r10*r10)))+(((-1.0)*x2761*x2762))+(((-2.0)*x2763*x2764)));
j4eval[0]=x2765;
j4eval[1]=IKsign(x2765);
j4eval[2]=((IKabs(r12))+(IKabs((x2764+(((-1.0)*x2763))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2766=cj5*cj5;
IkReal x2767=r11*r11;
IkReal x2768=(cj5*r10);
IkReal x2769=(r11*sj5);
CheckValue<IkReal> x2770 = IKatan2WithCheck(IkReal((x2768+(((-1.0)*x2769)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2770.valid){
continue;
}
CheckValue<IkReal> x2771=IKPowWithIntegerCheck(IKsign((x2767+((x2766*(r10*r10)))+(r12*r12)+(((-2.0)*x2768*x2769))+(((-1.0)*x2766*x2767)))),-1);
if(!x2771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2770.value)+(((1.5707963267949)*(x2771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2772=IKsin(j4);
IkReal x2773=IKcos(j4);
IkReal x2774=(cj5*r10);
IkReal x2775=(r01*sj5);
IkReal x2776=((1.0)*cj2);
IkReal x2777=(cj5*r00);
IkReal x2778=(cj5*r20);
IkReal x2779=((1.0)*x2773);
IkReal x2780=((1.0)*x2772);
IkReal x2781=(sj5*x2772);
evalcond[0]=(((r21*x2781))+(((-1.0)*x2778*x2780))+(((-1.0)*r22*x2779)));
evalcond[1]=((((-1.0)*r02*x2779))+(((-1.0)*x2777*x2780))+((x2772*x2775)));
evalcond[2]=((((-1.0)*r12*x2780))+(((-1.0)*r11*sj5*x2779))+((x2773*x2774)));
evalcond[3]=((1.0)+(((-1.0)*x2774*x2780))+(((-1.0)*r12*x2779))+((r11*x2781)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x2780))+(((-1.0)*cj1*x2776))+(((-1.0)*r21*sj5*x2779))+((x2773*x2778)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2775*x2779))+(((-1.0)*sj1*x2776))+((x2773*x2777))+(((-1.0)*r02*x2780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2782=((1.0)*cj5);
CheckValue<IkReal> x2783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2782)))),-1);
if(!x2783.valid){
continue;
}
CheckValue<IkReal> x2784 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2782))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2783.value)))+(x2784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2785=IKsin(j4);
IkReal x2786=IKcos(j4);
IkReal x2787=(cj5*r10);
IkReal x2788=(r01*sj5);
IkReal x2789=((1.0)*cj2);
IkReal x2790=(cj5*r00);
IkReal x2791=(cj5*r20);
IkReal x2792=((1.0)*x2786);
IkReal x2793=((1.0)*x2785);
IkReal x2794=(sj5*x2785);
evalcond[0]=(((r21*x2794))+(((-1.0)*x2791*x2793))+(((-1.0)*r22*x2792)));
evalcond[1]=((((-1.0)*x2790*x2793))+((x2785*x2788))+(((-1.0)*r02*x2792)));
evalcond[2]=((((-1.0)*r11*sj5*x2792))+(((-1.0)*r12*x2793))+((x2786*x2787)));
evalcond[3]=((1.0)+(((-1.0)*x2787*x2793))+((r11*x2794))+(((-1.0)*r12*x2792)));
evalcond[4]=((((-1.0)*cj1*x2789))+((x2786*x2791))+(((-1.0)*r21*sj5*x2792))+((sj1*sj2))+(((-1.0)*r22*x2793)));
evalcond[5]=(((x2786*x2790))+(((-1.0)*sj1*x2789))+(((-1.0)*cj1*sj2))+(((-1.0)*x2788*x2792))+(((-1.0)*r02*x2793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2795=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2795.valid){
continue;
}
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2795.value)))+(x2796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2797=IKsin(j4);
IkReal x2798=IKcos(j4);
IkReal x2799=(cj5*r10);
IkReal x2800=(r01*sj5);
IkReal x2801=((1.0)*cj2);
IkReal x2802=(cj5*r00);
IkReal x2803=(cj5*r20);
IkReal x2804=((1.0)*x2798);
IkReal x2805=((1.0)*x2797);
IkReal x2806=(sj5*x2797);
evalcond[0]=((((-1.0)*x2803*x2805))+(((-1.0)*r22*x2804))+((r21*x2806)));
evalcond[1]=(((x2797*x2800))+(((-1.0)*x2802*x2805))+(((-1.0)*r02*x2804)));
evalcond[2]=((((-1.0)*r12*x2805))+(((-1.0)*r11*sj5*x2804))+((x2798*x2799)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2804))+(((-1.0)*x2799*x2805))+((r11*x2806)));
evalcond[4]=((((-1.0)*r21*sj5*x2804))+(((-1.0)*cj1*x2801))+((x2798*x2803))+((sj1*sj2))+(((-1.0)*r22*x2805)));
evalcond[5]=((((-1.0)*sj1*x2801))+(((-1.0)*x2800*x2804))+((x2798*x2802))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2807=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2807;
j4eval[1]=IKsign(x2807);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2808=((1.0)*cj5);
IkReal x2809=((((-1.0)*r21*x2808))+(((-1.0)*r20*sj5)));
j4eval[0]=x2809;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2808))))));
j4eval[2]=IKsign(x2809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2810=cj5*cj5;
IkReal x2811=r11*r11;
IkReal x2812=(cj5*r10);
IkReal x2813=(r11*sj5);
IkReal x2814=(((x2810*x2811))+(((-1.0)*x2811))+(((2.0)*x2812*x2813))+(((-1.0)*(r12*r12)))+(((-1.0)*x2810*(r10*r10))));
j4eval[0]=x2814;
j4eval[1]=((IKabs(((((-1.0)*x2813))+x2812)))+(IKabs(r12)));
j4eval[2]=IKsign(x2814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2815=cj5*cj5;
IkReal x2816=r11*r11;
IkReal x2817=(cj5*r10);
IkReal x2818=(r11*sj5);
CheckValue<IkReal> x2819=IKPowWithIntegerCheck(IKsign(((((2.0)*x2817*x2818))+(((-1.0)*x2816))+((x2815*x2816))+(((-1.0)*(r12*r12)))+(((-1.0)*x2815*(r10*r10))))),-1);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820 = IKatan2WithCheck(IkReal(((((-1.0)*x2818))+x2817)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2819.value)))+(x2820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2821=IKsin(j4);
IkReal x2822=IKcos(j4);
IkReal x2823=(cj5*r10);
IkReal x2824=(r01*sj5);
IkReal x2825=(cj5*r00);
IkReal x2826=(cj5*r20);
IkReal x2827=((1.0)*x2822);
IkReal x2828=((1.0)*x2821);
IkReal x2829=(sj5*x2821);
evalcond[0]=((((-1.0)*x2826*x2828))+((r21*x2829))+(((-1.0)*r22*x2827)));
evalcond[1]=(((x2821*x2824))+(((-1.0)*r02*x2827))+(((-1.0)*x2825*x2828)));
evalcond[2]=(((x2822*x2823))+(((-1.0)*r12*x2828))+(((-1.0)*r11*sj5*x2827)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2827))+((r11*x2829))+(((-1.0)*x2823*x2828)));
evalcond[4]=(((cj2*sj1))+((x2822*x2825))+(((-1.0)*x2824*x2827))+((cj1*sj2))+(((-1.0)*r02*x2828)));
evalcond[5]=(((x2822*x2826))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2828))+(((-1.0)*r21*sj5*x2827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2830=((1.0)*cj5);
CheckValue<IkReal> x2831 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2830))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2831.valid){
continue;
}
CheckValue<IkReal> x2832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2830))+(((-1.0)*r20*sj5)))),-1);
if(!x2832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2831.value)+(((1.5707963267949)*(x2832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2833=IKsin(j4);
IkReal x2834=IKcos(j4);
IkReal x2835=(cj5*r10);
IkReal x2836=(r01*sj5);
IkReal x2837=(cj5*r00);
IkReal x2838=(cj5*r20);
IkReal x2839=((1.0)*x2834);
IkReal x2840=((1.0)*x2833);
IkReal x2841=(sj5*x2833);
evalcond[0]=(((r21*x2841))+(((-1.0)*r22*x2839))+(((-1.0)*x2838*x2840)));
evalcond[1]=((((-1.0)*x2837*x2840))+((x2833*x2836))+(((-1.0)*r02*x2839)));
evalcond[2]=(((x2834*x2835))+(((-1.0)*r12*x2840))+(((-1.0)*r11*sj5*x2839)));
evalcond[3]=((-1.0)+((r11*x2841))+(((-1.0)*r12*x2839))+(((-1.0)*x2835*x2840)));
evalcond[4]=(((cj2*sj1))+((x2834*x2837))+((cj1*sj2))+(((-1.0)*x2836*x2839))+(((-1.0)*r02*x2840)));
evalcond[5]=(((x2834*x2838))+(((-1.0)*r21*sj5*x2839))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2842 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2842.valid){
continue;
}
CheckValue<IkReal> x2843=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2842.value)+(((1.5707963267949)*(x2843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2844=IKsin(j4);
IkReal x2845=IKcos(j4);
IkReal x2846=(cj5*r10);
IkReal x2847=(r01*sj5);
IkReal x2848=(cj5*r00);
IkReal x2849=(cj5*r20);
IkReal x2850=((1.0)*x2845);
IkReal x2851=((1.0)*x2844);
IkReal x2852=(sj5*x2844);
evalcond[0]=(((r21*x2852))+(((-1.0)*x2849*x2851))+(((-1.0)*r22*x2850)));
evalcond[1]=(((x2844*x2847))+(((-1.0)*r02*x2850))+(((-1.0)*x2848*x2851)));
evalcond[2]=((((-1.0)*r11*sj5*x2850))+(((-1.0)*r12*x2851))+((x2845*x2846)));
evalcond[3]=((-1.0)+((r11*x2852))+(((-1.0)*r12*x2850))+(((-1.0)*x2846*x2851)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2851))+((x2845*x2848))+(((-1.0)*x2847*x2850)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2845*x2849))+(((-1.0)*r22*x2851))+(((-1.0)*r21*sj5*x2850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2853=((-1.0)*r00);
IkReal x2855 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2855)==0){
continue;
}
IkReal x2854=pow(x2855,-0.5);
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2853),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2856.value));
IkReal gconst91=(r01*x2854);
IkReal gconst92=(x2853*x2854);
CheckValue<IkReal> x2857 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2857.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2857.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2858=((-1.0)*r00);
IkReal x2859=x2854;
CheckValue<IkReal> x2861 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2858),IKFAST_ATAN2_MAGTHRESH);
if(!x2861.valid){
continue;
}
IkReal x2860=((-1.0)*(x2861.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2860;
IkReal gconst90=x2860;
IkReal gconst91=(r01*x2859);
IkReal gconst92=(x2858*x2859);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2862=((1.0)*sj0);
IkReal x2863=((1.0)*cj0);
CheckValue<IkReal> x2864=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2864.valid){
continue;
}
CheckValue<IkReal> x2865 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2863))+(((-1.0)*r12*x2862)))),IkReal(((((-1.0)*gconst91*r11*x2862))+(((-1.0)*gconst91*r01*x2863))+((cj0*gconst92*r00))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2864.value)))+(x2865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2866=IKsin(j4);
IkReal x2867=IKcos(j4);
IkReal x2868=((1.0)*cj2);
IkReal x2869=(gconst92*r00);
IkReal x2870=(gconst92*r20);
IkReal x2871=((1.0)*sj0);
IkReal x2872=(gconst92*r10);
IkReal x2873=(cj1*sj2);
IkReal x2874=((1.0)*x2867);
IkReal x2875=(gconst91*x2866);
IkReal x2876=((1.0)*x2866);
evalcond[0]=((((-1.0)*r22*x2874))+(((-1.0)*x2870*x2876))+((r21*x2875)));
evalcond[1]=(cj0+(((-1.0)*x2872*x2876))+((r11*x2875))+(((-1.0)*r12*x2874)));
evalcond[2]=((((-1.0)*r02*x2874))+((r01*x2875))+(((-1.0)*x2871))+(((-1.0)*x2869*x2876)));
evalcond[3]=((((-1.0)*cj1*x2868))+(((-1.0)*r22*x2876))+((sj1*sj2))+((x2867*x2870))+(((-1.0)*gconst91*r21*x2874)));
evalcond[4]=((((-1.0)*r02*x2876))+(((-1.0)*cj0*x2873))+((x2867*x2869))+(((-1.0)*cj0*sj1*x2868))+(((-1.0)*gconst91*r01*x2874)));
evalcond[5]=((((-1.0)*sj0*sj1*x2868))+(((-1.0)*gconst91*r11*x2874))+(((-1.0)*x2871*x2873))+((x2867*x2872))+(((-1.0)*r12*x2876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2877=((1.0)*gconst92);
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2877)))),-1);
if(!x2878.valid){
continue;
}
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2878.value)))+(x2879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2880=IKsin(j4);
IkReal x2881=IKcos(j4);
IkReal x2882=((1.0)*cj2);
IkReal x2883=(gconst92*r00);
IkReal x2884=(gconst92*r20);
IkReal x2885=((1.0)*sj0);
IkReal x2886=(gconst92*r10);
IkReal x2887=(cj1*sj2);
IkReal x2888=((1.0)*x2881);
IkReal x2889=(gconst91*x2880);
IkReal x2890=((1.0)*x2880);
evalcond[0]=((((-1.0)*r22*x2888))+((r21*x2889))+(((-1.0)*x2884*x2890)));
evalcond[1]=(cj0+((r11*x2889))+(((-1.0)*x2886*x2890))+(((-1.0)*r12*x2888)));
evalcond[2]=((((-1.0)*x2883*x2890))+(((-1.0)*r02*x2888))+((r01*x2889))+(((-1.0)*x2885)));
evalcond[3]=((((-1.0)*r22*x2890))+(((-1.0)*gconst91*r21*x2888))+((sj1*sj2))+((x2881*x2884))+(((-1.0)*cj1*x2882)));
evalcond[4]=((((-1.0)*r02*x2890))+(((-1.0)*cj0*sj1*x2882))+(((-1.0)*cj0*x2887))+(((-1.0)*gconst91*r01*x2888))+((x2881*x2883)));
evalcond[5]=((((-1.0)*sj0*sj1*x2882))+(((-1.0)*gconst91*r11*x2888))+(((-1.0)*x2885*x2887))+((x2881*x2886))+(((-1.0)*r12*x2890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2891=((-1.0)*r01);
IkReal x2893 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2893)==0){
continue;
}
IkReal x2892=pow(x2893,-0.5);
CheckValue<IkReal> x2894 = IKatan2WithCheck(IkReal(x2891),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2894.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2894.value))));
IkReal gconst94=(x2891*x2892);
IkReal gconst95=((1.0)*r00*x2892);
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2895.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2896=((-1.0)*r01);
CheckValue<IkReal> x2899 = IKatan2WithCheck(IkReal(x2896),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2899.valid){
continue;
}
IkReal x2897=((1.0)*(x2899.value));
IkReal x2898=x2892;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2897)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2897)));
IkReal gconst94=(x2896*x2898);
IkReal gconst95=((1.0)*r00*x2898);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2900=((-1.0)*r01);
CheckValue<IkReal> x2903 = IKatan2WithCheck(IkReal(x2900),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2903.valid){
continue;
}
IkReal x2901=((1.0)*(x2903.value));
IkReal x2902=x2892;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2901)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2901)));
IkReal gconst94=(x2900*x2902);
IkReal gconst95=((1.0)*r00*x2902);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2904=((-1.0)*r01);
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(x2904),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
IkReal x2905=((1.0)*(x2907.value));
IkReal x2906=x2892;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2905)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2905)));
IkReal gconst94=(x2904*x2906);
IkReal gconst95=((1.0)*r00*x2906);
IkReal x2908=r02*r02;
IkReal x2909=(r12*sj0);
IkReal x2910=((1.0)*cj0);
IkReal x2911=x2892;
j4eval[0]=((IKabs((((r02*x2909*x2911))+((cj0*x2908*x2911))+(((-1.0)*x2910*x2911)))))+(IKabs(((((-1.0)*r02*x2910))+(((-1.0)*x2909))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2912=((1.0)*sj0);
IkReal x2913=((1.0)*cj0);
CheckValue<IkReal> x2914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2914.valid){
continue;
}
CheckValue<IkReal> x2915 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2912))+(((-1.0)*r02*x2913)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2913))+(((-1.0)*gconst94*r11*x2912))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2914.value)))+(x2915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2916=IKsin(j4);
IkReal x2917=IKcos(j4);
IkReal x2918=(gconst94*r11);
IkReal x2919=((1.0)*cj2);
IkReal x2920=(gconst94*r21);
IkReal x2921=((1.0)*sj0);
IkReal x2922=(gconst94*r01);
IkReal x2923=(cj1*sj2);
IkReal x2924=((1.0)*x2917);
IkReal x2925=(gconst95*x2917);
IkReal x2926=((1.0)*x2916);
IkReal x2927=(gconst95*x2926);
evalcond[0]=(((x2916*x2920))+(((-1.0)*r20*x2927))+(((-1.0)*r22*x2924)));
evalcond[1]=(cj0+(((-1.0)*r10*x2927))+((x2916*x2918))+(((-1.0)*r12*x2924)));
evalcond[2]=(((x2916*x2922))+(((-1.0)*r02*x2924))+(((-1.0)*x2921))+(((-1.0)*r00*x2927)));
evalcond[3]=((((-1.0)*x2920*x2924))+((sj1*sj2))+(((-1.0)*cj1*x2919))+((r20*x2925))+(((-1.0)*r22*x2926)));
evalcond[4]=((((-1.0)*cj0*sj1*x2919))+(((-1.0)*r02*x2926))+(((-1.0)*cj0*x2923))+((r00*x2925))+(((-1.0)*x2922*x2924)));
evalcond[5]=(((r10*x2925))+(((-1.0)*x2921*x2923))+(((-1.0)*x2918*x2924))+(((-1.0)*r12*x2926))+(((-1.0)*sj0*sj1*x2919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2928=((1.0)*gconst95);
CheckValue<IkReal> x2929 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2929.valid){
continue;
}
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2928)))),-1);
if(!x2930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2929.value)+(((1.5707963267949)*(x2930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2931=IKsin(j4);
IkReal x2932=IKcos(j4);
IkReal x2933=(gconst94*r11);
IkReal x2934=((1.0)*cj2);
IkReal x2935=(gconst94*r21);
IkReal x2936=((1.0)*sj0);
IkReal x2937=(gconst94*r01);
IkReal x2938=(cj1*sj2);
IkReal x2939=((1.0)*x2932);
IkReal x2940=(gconst95*x2932);
IkReal x2941=((1.0)*x2931);
IkReal x2942=(gconst95*x2941);
evalcond[0]=((((-1.0)*r20*x2942))+(((-1.0)*r22*x2939))+((x2931*x2935)));
evalcond[1]=(cj0+(((-1.0)*r10*x2942))+(((-1.0)*r12*x2939))+((x2931*x2933)));
evalcond[2]=((((-1.0)*x2936))+(((-1.0)*r00*x2942))+(((-1.0)*r02*x2939))+((x2931*x2937)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2935*x2939))+(((-1.0)*cj1*x2934))+(((-1.0)*r22*x2941))+((r20*x2940)));
evalcond[4]=((((-1.0)*cj0*x2938))+(((-1.0)*r02*x2941))+((r00*x2940))+(((-1.0)*cj0*sj1*x2934))+(((-1.0)*x2937*x2939)));
evalcond[5]=((((-1.0)*r12*x2941))+(((-1.0)*x2933*x2939))+((r10*x2940))+(((-1.0)*sj0*sj1*x2934))+(((-1.0)*x2936*x2938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2943=((1.0)*gconst95);
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2943)))),-1);
if(!x2944.valid){
continue;
}
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2943)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2944.value)))+(x2945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2946=IKsin(j4);
IkReal x2947=IKcos(j4);
IkReal x2948=(gconst94*r11);
IkReal x2949=((1.0)*cj2);
IkReal x2950=(gconst94*r21);
IkReal x2951=((1.0)*sj0);
IkReal x2952=(gconst94*r01);
IkReal x2953=(cj1*sj2);
IkReal x2954=((1.0)*x2947);
IkReal x2955=(gconst95*x2947);
IkReal x2956=((1.0)*x2946);
IkReal x2957=(gconst95*x2956);
evalcond[0]=(((x2946*x2950))+(((-1.0)*r20*x2957))+(((-1.0)*r22*x2954)));
evalcond[1]=(((x2946*x2948))+(((-1.0)*r10*x2957))+cj0+(((-1.0)*r12*x2954)));
evalcond[2]=((((-1.0)*r02*x2954))+((x2946*x2952))+(((-1.0)*x2951))+(((-1.0)*r00*x2957)));
evalcond[3]=(((sj1*sj2))+((r20*x2955))+(((-1.0)*cj1*x2949))+(((-1.0)*r22*x2956))+(((-1.0)*x2950*x2954)));
evalcond[4]=((((-1.0)*r02*x2956))+(((-1.0)*x2952*x2954))+(((-1.0)*cj0*x2953))+((r00*x2955))+(((-1.0)*cj0*sj1*x2949)));
evalcond[5]=((((-1.0)*x2948*x2954))+((r10*x2955))+(((-1.0)*x2951*x2953))+(((-1.0)*r12*x2956))+(((-1.0)*sj0*sj1*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2958=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2958;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2959=((1.0)*cj5);
IkReal x2960=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2959)));
j4eval[0]=x2960;
j4eval[1]=((IKabs(((((-1.0)*r20*x2959))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2961=cj5*cj5;
IkReal x2962=r01*r01;
IkReal x2963=(r01*sj5);
IkReal x2964=(cj5*r00);
IkReal x2965=((((-1.0)*x2962))+(((-1.0)*(r02*r02)))+((x2961*x2962))+(((2.0)*x2963*x2964))+(((-1.0)*x2961*(r00*r00))));
j4eval[0]=x2965;
j4eval[1]=IKsign(x2965);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2963))+x2964))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2966=cj5*cj5;
IkReal x2967=r01*r01;
IkReal x2968=(r01*sj5);
IkReal x2969=(cj5*r00);
CheckValue<IkReal> x2970 = IKatan2WithCheck(IkReal(((((-1.0)*x2968))+x2969)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2970.valid){
continue;
}
CheckValue<IkReal> x2971=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2967))+(((2.0)*x2968*x2969))+(((-1.0)*(r02*r02)))+((x2966*x2967))+(((-1.0)*x2966*(r00*r00))))),-1);
if(!x2971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2970.value)+(((1.5707963267949)*(x2971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2972=IKsin(j4);
IkReal x2973=IKcos(j4);
IkReal x2974=(cj5*r10);
IkReal x2975=(r01*sj5);
IkReal x2976=((1.0)*cj2);
IkReal x2977=(cj5*r00);
IkReal x2978=(cj5*r20);
IkReal x2979=((1.0)*x2973);
IkReal x2980=((1.0)*x2972);
IkReal x2981=(sj5*x2972);
evalcond[0]=((((-1.0)*x2978*x2980))+(((-1.0)*r22*x2979))+((r21*x2981)));
evalcond[1]=(((r11*x2981))+(((-1.0)*r12*x2979))+(((-1.0)*x2974*x2980)));
evalcond[2]=((((-1.0)*x2975*x2979))+(((-1.0)*r02*x2980))+((x2973*x2977)));
evalcond[3]=((-1.0)+(((-1.0)*x2977*x2980))+(((-1.0)*r02*x2979))+((x2972*x2975)));
evalcond[4]=((((-1.0)*r21*sj5*x2979))+((sj1*sj2))+(((-1.0)*r22*x2980))+(((-1.0)*cj1*x2976))+((x2973*x2978)));
evalcond[5]=((((-1.0)*r12*x2980))+(((-1.0)*r11*sj5*x2979))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2976))+((x2973*x2974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2982=((1.0)*cj5);
CheckValue<IkReal> x2983 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2982)))),-1);
if(!x2984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2983.value)+(((1.5707963267949)*(x2984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2985=IKsin(j4);
IkReal x2986=IKcos(j4);
IkReal x2987=(cj5*r10);
IkReal x2988=(r01*sj5);
IkReal x2989=((1.0)*cj2);
IkReal x2990=(cj5*r00);
IkReal x2991=(cj5*r20);
IkReal x2992=((1.0)*x2986);
IkReal x2993=((1.0)*x2985);
IkReal x2994=(sj5*x2985);
evalcond[0]=((((-1.0)*r22*x2992))+(((-1.0)*x2991*x2993))+((r21*x2994)));
evalcond[1]=((((-1.0)*x2987*x2993))+(((-1.0)*r12*x2992))+((r11*x2994)));
evalcond[2]=(((x2986*x2990))+(((-1.0)*x2988*x2992))+(((-1.0)*r02*x2993)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2992))+(((-1.0)*x2990*x2993))+((x2985*x2988)));
evalcond[4]=((((-1.0)*r22*x2993))+(((-1.0)*cj1*x2989))+((sj1*sj2))+((x2986*x2991))+(((-1.0)*r21*sj5*x2992)));
evalcond[5]=(((x2986*x2987))+(((-1.0)*r12*x2993))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2989))+(((-1.0)*r11*sj5*x2992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2995=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2995.value)))+(x2996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2997=IKsin(j4);
IkReal x2998=IKcos(j4);
IkReal x2999=(cj5*r10);
IkReal x3000=(r01*sj5);
IkReal x3001=((1.0)*cj2);
IkReal x3002=(cj5*r00);
IkReal x3003=(cj5*r20);
IkReal x3004=((1.0)*x2998);
IkReal x3005=((1.0)*x2997);
IkReal x3006=(sj5*x2997);
evalcond[0]=((((-1.0)*r22*x3004))+(((-1.0)*x3003*x3005))+((r21*x3006)));
evalcond[1]=((((-1.0)*r12*x3004))+((r11*x3006))+(((-1.0)*x2999*x3005)));
evalcond[2]=((((-1.0)*r02*x3005))+((x2998*x3002))+(((-1.0)*x3000*x3004)));
evalcond[3]=((-1.0)+(((-1.0)*x3002*x3005))+(((-1.0)*r02*x3004))+((x2997*x3000)));
evalcond[4]=((((-1.0)*r22*x3005))+(((-1.0)*r21*sj5*x3004))+((x2998*x3003))+((sj1*sj2))+(((-1.0)*cj1*x3001)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3004))+((x2998*x2999))+(((-1.0)*r12*x3005))+(((-1.0)*sj1*x3001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3007=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3007;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3008=((1.0)*cj5);
IkReal x3009=((((-1.0)*r21*x3008))+(((-1.0)*r20*sj5)));
j4eval[0]=x3009;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3008))+((r11*sj5))))));
j4eval[2]=IKsign(x3009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3010=cj5*cj5;
IkReal x3011=r01*r01;
IkReal x3012=(cj5*r00);
IkReal x3013=(r01*sj5);
IkReal x3014=(x3011+(((-1.0)*x3010*x3011))+(((-2.0)*x3012*x3013))+(r02*r02)+((x3010*(r00*r00))));
j4eval[0]=x3014;
j4eval[1]=((IKabs(r02))+(IKabs((x3012+(((-1.0)*x3013))))));
j4eval[2]=IKsign(x3014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3015=cj5*cj5;
IkReal x3016=r01*r01;
IkReal x3017=(r01*sj5);
IkReal x3018=(cj5*r00);
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(IKsign((x3016+((x3015*(r00*r00)))+(((-1.0)*x3015*x3016))+(r02*r02)+(((-2.0)*x3017*x3018)))),-1);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020 = IKatan2WithCheck(IkReal((x3018+(((-1.0)*x3017)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3019.value)))+(x3020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3021=IKsin(j4);
IkReal x3022=IKcos(j4);
IkReal x3023=(cj5*r10);
IkReal x3024=(r01*sj5);
IkReal x3025=(cj5*r00);
IkReal x3026=(cj5*r20);
IkReal x3027=((1.0)*x3022);
IkReal x3028=((1.0)*x3021);
IkReal x3029=(sj5*x3021);
evalcond[0]=((((-1.0)*x3026*x3028))+((r21*x3029))+(((-1.0)*r22*x3027)));
evalcond[1]=((((-1.0)*r12*x3027))+((r11*x3029))+(((-1.0)*x3023*x3028)));
evalcond[2]=((((-1.0)*x3024*x3027))+(((-1.0)*r02*x3028))+((x3022*x3025)));
evalcond[3]=((1.0)+((x3021*x3024))+(((-1.0)*x3025*x3028))+(((-1.0)*r02*x3027)));
evalcond[4]=((((-1.0)*r12*x3028))+((cj2*sj1))+(((-1.0)*r11*sj5*x3027))+((cj1*sj2))+((x3022*x3023)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3028))+((x3022*x3026))+(((-1.0)*r21*sj5*x3027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3030=((1.0)*cj5);
CheckValue<IkReal> x3031 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3031.valid){
continue;
}
CheckValue<IkReal> x3032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3030))+(((-1.0)*r20*sj5)))),-1);
if(!x3032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3031.value)+(((1.5707963267949)*(x3032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3033=IKsin(j4);
IkReal x3034=IKcos(j4);
IkReal x3035=(cj5*r10);
IkReal x3036=(r01*sj5);
IkReal x3037=(cj5*r00);
IkReal x3038=(cj5*r20);
IkReal x3039=((1.0)*x3034);
IkReal x3040=((1.0)*x3033);
IkReal x3041=(sj5*x3033);
evalcond[0]=(((r21*x3041))+(((-1.0)*x3038*x3040))+(((-1.0)*r22*x3039)));
evalcond[1]=((((-1.0)*r12*x3039))+(((-1.0)*x3035*x3040))+((r11*x3041)));
evalcond[2]=(((x3034*x3037))+(((-1.0)*x3036*x3039))+(((-1.0)*r02*x3040)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3039))+((x3033*x3036))+(((-1.0)*x3037*x3040)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3040))+((x3034*x3035))+((cj1*sj2))+(((-1.0)*r11*sj5*x3039)));
evalcond[5]=(((x3034*x3038))+(((-1.0)*r21*sj5*x3039))+(((-1.0)*r22*x3040))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3042 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3042.valid){
continue;
}
CheckValue<IkReal> x3043=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3042.value)+(((1.5707963267949)*(x3043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3044=IKsin(j4);
IkReal x3045=IKcos(j4);
IkReal x3046=(cj5*r10);
IkReal x3047=(r01*sj5);
IkReal x3048=(cj5*r00);
IkReal x3049=(cj5*r20);
IkReal x3050=((1.0)*x3045);
IkReal x3051=((1.0)*x3044);
IkReal x3052=(sj5*x3044);
evalcond[0]=(((r21*x3052))+(((-1.0)*r22*x3050))+(((-1.0)*x3049*x3051)));
evalcond[1]=(((r11*x3052))+(((-1.0)*x3046*x3051))+(((-1.0)*r12*x3050)));
evalcond[2]=((((-1.0)*x3047*x3050))+(((-1.0)*r02*x3051))+((x3045*x3048)));
evalcond[3]=((1.0)+(((-1.0)*x3048*x3051))+(((-1.0)*r02*x3050))+((x3044*x3047)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3045*x3046))+(((-1.0)*r12*x3051))+(((-1.0)*r11*sj5*x3050)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3050))+((x3045*x3049))+(((-1.0)*r22*x3051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3053=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3053);
rxp1_1=(px*r21);
rxp1_2=(r11*x3053);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3054=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3054);
rxp1_1=(px*r21);
rxp1_2=(r11*x3054);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3055=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3055);
rxp1_1=(px*r21);
rxp1_2=(r11*x3055);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3058=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3058.valid){
continue;
}
IkReal x3056=x3058.value;
IkReal x3057=(sj0*x3056);
cj4array[0]=(((cj1*sj2*x3057))+((cj2*sj1*x3057)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3059=IKsin(j4);
IkReal x3060=IKcos(j4);
IkReal x3061=(cj5*r20);
IkReal x3062=(r21*sj5);
IkReal x3063=((1.0)*x3059);
IkReal x3064=((1.0)*x3060);
evalcond[0]=((-1.0)*r02*x3059);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3064)));
evalcond[2]=((((-1.0)*x3061*x3063))+((x3059*x3062)));
evalcond[3]=((((-1.0)*cj5*r10*x3063))+((r11*sj5*x3059)));
evalcond[4]=((((-1.0)*x3062*x3064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3060*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3066=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3066.valid){
continue;
}
IkReal x3065=x3066.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3065))+((cj1*cj2*x3065)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3067=IKsin(j4);
IkReal x3068=IKcos(j4);
IkReal x3069=(r11*sj5);
IkReal x3070=((1.0)*sj0);
IkReal x3071=((1.0)*x3068);
IkReal x3072=((1.0)*cj5*x3067);
evalcond[0]=((-1.0)*r02*x3067);
evalcond[1]=((((-1.0)*r02*x3071))+(((-1.0)*x3070)));
evalcond[2]=(((r21*sj5*x3067))+(((-1.0)*r20*x3072)));
evalcond[3]=((((-1.0)*r10*x3072))+((x3067*x3069)));
evalcond[4]=((((-1.0)*cj1*sj2*x3070))+(((-1.0)*x3069*x3071))+(((-1.0)*cj2*sj1*x3070))+((cj5*r10*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3073=IKPowWithIntegerCheck(r02,-1);
if(!x3073.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3073.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3074=IKsin(j4);
IkReal x3075=IKcos(j4);
IkReal x3076=((1.0)*sj0);
IkReal x3077=(cj5*x3075);
IkReal x3078=(sj5*x3074);
IkReal x3079=((1.0)*sj5*x3075);
IkReal x3080=((1.0)*cj5*x3074);
evalcond[0]=((-1.0)*r02*x3074);
evalcond[1]=((((-1.0)*r20*x3080))+((r21*x3078)));
evalcond[2]=(((r11*x3078))+(((-1.0)*r10*x3080)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3077))+(((-1.0)*r21*x3079)));
evalcond[4]=(((r10*x3077))+(((-1.0)*r11*x3079))+(((-1.0)*cj1*sj2*x3076))+(((-1.0)*cj2*sj1*x3076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3081=((1.0)*sj0);
IkReal x3082=((1.0)*cj0);
CheckValue<IkReal> x3083 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3082))+(((-1.0)*r12*x3081)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3082))+(((-1.0)*r11*sj5*x3081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3083.valid){
continue;
}
CheckValue<IkReal> x3084=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3083.value)+(((1.5707963267949)*(x3084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3085=IKsin(j4);
IkReal x3086=IKcos(j4);
IkReal x3087=(cj5*r10);
IkReal x3088=(r01*sj5);
IkReal x3089=((1.0)*cj2);
IkReal x3090=(cj5*r00);
IkReal x3091=((1.0)*sj0);
IkReal x3092=(cj5*r20);
IkReal x3093=(cj1*sj2);
IkReal x3094=((1.0)*x3086);
IkReal x3095=((1.0)*x3085);
IkReal x3096=(sj5*x3085);
evalcond[0]=((((-1.0)*r22*x3094))+((r21*x3096))+(((-1.0)*x3092*x3095)));
evalcond[1]=((((-1.0)*r12*x3094))+cj0+(((-1.0)*x3087*x3095))+((r11*x3096)));
evalcond[2]=((((-1.0)*r02*x3094))+(((-1.0)*x3091))+((x3085*x3088))+(((-1.0)*x3090*x3095)));
evalcond[3]=((((-1.0)*r22*x3095))+(((-1.0)*cj1*x3089))+((x3086*x3092))+((sj1*sj2))+(((-1.0)*r21*sj5*x3094)));
evalcond[4]=((((-1.0)*r02*x3095))+(((-1.0)*cj0*sj1*x3089))+((x3086*x3090))+(((-1.0)*x3088*x3094))+(((-1.0)*cj0*x3093)));
evalcond[5]=((((-1.0)*r12*x3095))+(((-1.0)*r11*sj5*x3094))+(((-1.0)*sj0*sj1*x3089))+(((-1.0)*x3091*x3093))+((x3086*x3087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3097=((1.0)*cj5);
CheckValue<IkReal> x3098 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3098.valid){
continue;
}
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3097))+(((-1.0)*r10*sj5)))),-1);
if(!x3099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3098.value)+(((1.5707963267949)*(x3099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3100=IKsin(j4);
IkReal x3101=IKcos(j4);
IkReal x3102=(cj5*r10);
IkReal x3103=(r01*sj5);
IkReal x3104=((1.0)*cj2);
IkReal x3105=(cj5*r00);
IkReal x3106=((1.0)*sj0);
IkReal x3107=(cj5*r20);
IkReal x3108=(cj1*sj2);
IkReal x3109=((1.0)*x3101);
IkReal x3110=((1.0)*x3100);
IkReal x3111=(sj5*x3100);
evalcond[0]=(((r21*x3111))+(((-1.0)*r22*x3109))+(((-1.0)*x3107*x3110)));
evalcond[1]=(cj0+(((-1.0)*x3102*x3110))+(((-1.0)*r12*x3109))+((r11*x3111)));
evalcond[2]=((((-1.0)*x3106))+(((-1.0)*x3105*x3110))+(((-1.0)*r02*x3109))+((x3100*x3103)));
evalcond[3]=((((-1.0)*cj1*x3104))+((sj1*sj2))+(((-1.0)*r22*x3110))+((x3101*x3107))+(((-1.0)*r21*sj5*x3109)));
evalcond[4]=((((-1.0)*x3103*x3109))+(((-1.0)*r02*x3110))+((x3101*x3105))+(((-1.0)*cj0*x3108))+(((-1.0)*cj0*sj1*x3104)));
evalcond[5]=((((-1.0)*r12*x3110))+(((-1.0)*sj0*sj1*x3104))+(((-1.0)*x3106*x3108))+(((-1.0)*r11*sj5*x3109))+((x3101*x3102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3112=((1.0)*cj5);
CheckValue<IkReal> x3113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
CheckValue<IkReal> x3114=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3112)))),-1);
if(!x3114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3113.value)+(((1.5707963267949)*(x3114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3115=IKsin(j4);
IkReal x3116=IKcos(j4);
IkReal x3117=(cj5*r10);
IkReal x3118=(r01*sj5);
IkReal x3119=((1.0)*cj2);
IkReal x3120=(cj5*r00);
IkReal x3121=((1.0)*sj0);
IkReal x3122=(cj5*r20);
IkReal x3123=(cj1*sj2);
IkReal x3124=((1.0)*x3116);
IkReal x3125=((1.0)*x3115);
IkReal x3126=(sj5*x3115);
evalcond[0]=(((r21*x3126))+(((-1.0)*x3122*x3125))+(((-1.0)*r22*x3124)));
evalcond[1]=(cj0+(((-1.0)*x3117*x3125))+(((-1.0)*r12*x3124))+((r11*x3126)));
evalcond[2]=((((-1.0)*r02*x3124))+(((-1.0)*x3120*x3125))+(((-1.0)*x3121))+((x3115*x3118)));
evalcond[3]=(((x3116*x3122))+(((-1.0)*r21*sj5*x3124))+(((-1.0)*cj1*x3119))+((sj1*sj2))+(((-1.0)*r22*x3125)));
evalcond[4]=(((x3116*x3120))+(((-1.0)*r02*x3125))+(((-1.0)*cj0*x3123))+(((-1.0)*cj0*sj1*x3119))+(((-1.0)*x3118*x3124)));
evalcond[5]=((((-1.0)*sj0*sj1*x3119))+(((-1.0)*r12*x3125))+(((-1.0)*x3121*x3123))+(((-1.0)*r11*sj5*x3124))+((x3116*x3117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3127=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3127;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3127);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3128=r21*r21;
IkReal x3129=cj5*cj5;
IkReal x3130=(sj1*sj2);
IkReal x3131=(r21*sj5);
IkReal x3132=(cj5*r20);
IkReal x3133=(cj1*cj2);
IkReal x3134=((((-1.0)*x3128))+(((-1.0)*x3129*(r20*r20)))+(((-1.0)*(r22*r22)))+((x3128*x3129))+(((2.0)*x3131*x3132)));
j4eval[0]=x3134;
j4eval[1]=((IKabs((((x3130*x3131))+((x3132*x3133))+(((-1.0)*x3131*x3133))+(((-1.0)*x3130*x3132)))))+(IKabs((((r22*x3130))+(((-1.0)*r22*x3133))))));
j4eval[2]=IKsign(x3134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3135=IKsin(j0);
IkReal x3136=IKcos(j0);
evalcond[0]=((((0.612)*x3136))+(((-0.163941)*x3135))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x3136))+(((0.612)*x3135))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3137=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3137;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3138=((1.0)*cj5);
IkReal x3139=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3138)));
j4eval[0]=x3139;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3138))))));
j4eval[2]=IKsign(x3139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3140=((1.0)*cj5);
IkReal x3141=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3140)));
j4eval[0]=x3141;
j4eval[1]=IKsign(x3141);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3140)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3142=((1.0)*cj5);
CheckValue<IkReal> x3143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3142)))),-1);
if(!x3143.valid){
continue;
}
CheckValue<IkReal> x3144 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3142)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3143.value)))+(x3144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3145=IKcos(j4);
IkReal x3146=IKsin(j4);
IkReal x3147=((1.0)*sj0);
IkReal x3148=(cj5*r00);
IkReal x3149=(cj5*r10);
IkReal x3150=(cj5*r20);
IkReal x3151=((1.0)*x3145);
IkReal x3152=((1.0)*x3146);
IkReal x3153=(sj5*x3145);
IkReal x3154=(sj5*x3146);
evalcond[0]=((((-1.0)*x3150*x3151))+((r22*x3146))+((r21*x3153)));
evalcond[1]=((((-1.0)*r22*x3151))+(((-1.0)*x3150*x3152))+((r21*x3154)));
evalcond[2]=(cj0+((r11*x3154))+(((-1.0)*x3149*x3152))+(((-1.0)*r12*x3151)));
evalcond[3]=((((-1.0)*x3148*x3151))+((r02*x3146))+((r01*x3153))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3147))+((r12*x3146))+((r11*x3153))+(((-1.0)*x3149*x3151)));
evalcond[5]=((((-1.0)*x3148*x3152))+(((-1.0)*x3147))+((r01*x3154))+(((-1.0)*r02*x3151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3155=((1.0)*cj5);
CheckValue<IkReal> x3156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3155)))),-1);
if(!x3156.valid){
continue;
}
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3156.value)))+(x3157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3158=IKcos(j4);
IkReal x3159=IKsin(j4);
IkReal x3160=((1.0)*sj0);
IkReal x3161=(cj5*r00);
IkReal x3162=(cj5*r10);
IkReal x3163=(cj5*r20);
IkReal x3164=((1.0)*x3158);
IkReal x3165=((1.0)*x3159);
IkReal x3166=(sj5*x3158);
IkReal x3167=(sj5*x3159);
evalcond[0]=(((r22*x3159))+(((-1.0)*x3163*x3164))+((r21*x3166)));
evalcond[1]=((((-1.0)*x3163*x3165))+((r21*x3167))+(((-1.0)*r22*x3164)));
evalcond[2]=((((-1.0)*r12*x3164))+(((-1.0)*x3162*x3165))+cj0+((r11*x3167)));
evalcond[3]=((((-1.0)*x3161*x3164))+((r02*x3159))+((r01*x3166))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3162*x3164))+((r11*x3166))+((r12*x3159))+(((-1.0)*x3160)));
evalcond[5]=((((-1.0)*x3161*x3165))+((r01*x3167))+(((-1.0)*r02*x3164))+(((-1.0)*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3168 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3168.valid){
continue;
}
CheckValue<IkReal> x3169=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3168.value)+(((1.5707963267949)*(x3169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3170=IKcos(j4);
IkReal x3171=IKsin(j4);
IkReal x3172=((1.0)*sj0);
IkReal x3173=(cj5*r00);
IkReal x3174=(cj5*r10);
IkReal x3175=(cj5*r20);
IkReal x3176=((1.0)*x3170);
IkReal x3177=((1.0)*x3171);
IkReal x3178=(sj5*x3170);
IkReal x3179=(sj5*x3171);
evalcond[0]=(((r22*x3171))+((r21*x3178))+(((-1.0)*x3175*x3176)));
evalcond[1]=(((r21*x3179))+(((-1.0)*r22*x3176))+(((-1.0)*x3175*x3177)));
evalcond[2]=(((r11*x3179))+(((-1.0)*x3174*x3177))+cj0+(((-1.0)*r12*x3176)));
evalcond[3]=(((r02*x3171))+(((-1.0)*x3173*x3176))+((r01*x3178))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3178))+(((-1.0)*x3174*x3176))+(((-1.0)*x3172))+((r12*x3171)));
evalcond[5]=((((-1.0)*x3172))+(((-1.0)*x3173*x3177))+((r01*x3179))+(((-1.0)*r02*x3176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3180=IKsin(j0);
IkReal x3181=IKcos(j0);
evalcond[0]=((((0.612)*x3181))+(((-0.163941)*x3180))+(((-1.0)*px)));
evalcond[1]=((((0.612)*x3180))+(((0.163941)*x3181))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3182=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3182;
j4eval[1]=IKsign(x3182);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3183=((1.0)*cj5);
IkReal x3184=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3183)));
j4eval[0]=x3184;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3183))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3185=cj5*cj5;
IkReal x3186=((1.0)*r20);
IkReal x3187=(r01*r21);
IkReal x3188=(r21*sj5);
IkReal x3189=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3185*x3186))+((x3185*x3187))+((cj5*r00*x3188))+(((-1.0)*x3187)));
j4eval[0]=x3189;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3188))+(((-1.0)*cj0*cj5*x3186))))));
j4eval[2]=IKsign(x3189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3190=cj5*cj5;
IkReal x3191=((1.0)*r20);
IkReal x3192=(r01*r21);
IkReal x3193=(r21*sj5);
CheckValue<IkReal> x3194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3193))+(((-1.0)*cj0*cj5*x3191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3194.valid){
continue;
}
CheckValue<IkReal> x3195=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3193))+((x3190*x3192))+(((-1.0)*x3192))+(((-1.0)*r00*x3190*x3191)))),-1);
if(!x3195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3194.value)+(((1.5707963267949)*(x3195.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3196=IKcos(j4);
IkReal x3197=IKsin(j4);
IkReal x3198=(cj5*r00);
IkReal x3199=(cj5*r10);
IkReal x3200=(cj5*r20);
IkReal x3201=((1.0)*x3196);
IkReal x3202=((1.0)*x3197);
IkReal x3203=(sj5*x3196);
IkReal x3204=(sj5*x3197);
evalcond[0]=((((-1.0)*x3200*x3201))+((r22*x3197))+((r21*x3203)));
evalcond[1]=((((-1.0)*x3200*x3202))+(((-1.0)*r22*x3201))+((r21*x3204)));
evalcond[2]=(cj0+((r01*x3203))+((r02*x3197))+(((-1.0)*x3198*x3201)));
evalcond[3]=(sj0+(((-1.0)*x3199*x3201))+((r11*x3203))+((r12*x3197)));
evalcond[4]=(cj0+(((-1.0)*x3199*x3202))+((r11*x3204))+(((-1.0)*r12*x3201)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3201))+((r01*x3204))+(((-1.0)*x3198*x3202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3205=((1.0)*cj5);
CheckValue<IkReal> x3206=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3205)))),-1);
if(!x3206.valid){
continue;
}
CheckValue<IkReal> x3207 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3205)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3206.value)))+(x3207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3208=IKcos(j4);
IkReal x3209=IKsin(j4);
IkReal x3210=(cj5*r00);
IkReal x3211=(cj5*r10);
IkReal x3212=(cj5*r20);
IkReal x3213=((1.0)*x3208);
IkReal x3214=((1.0)*x3209);
IkReal x3215=(sj5*x3208);
IkReal x3216=(sj5*x3209);
evalcond[0]=(((r22*x3209))+(((-1.0)*x3212*x3213))+((r21*x3215)));
evalcond[1]=((((-1.0)*x3212*x3214))+((r21*x3216))+(((-1.0)*r22*x3213)));
evalcond[2]=(cj0+((r01*x3215))+(((-1.0)*x3210*x3213))+((r02*x3209)));
evalcond[3]=((((-1.0)*x3211*x3213))+sj0+((r12*x3209))+((r11*x3215)));
evalcond[4]=((((-1.0)*x3211*x3214))+cj0+((r11*x3216))+(((-1.0)*r12*x3213)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3216))+(((-1.0)*x3210*x3214))+(((-1.0)*r02*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3217 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3217.valid){
continue;
}
CheckValue<IkReal> x3218=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3217.value)+(((1.5707963267949)*(x3218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3219=IKcos(j4);
IkReal x3220=IKsin(j4);
IkReal x3221=(cj5*r00);
IkReal x3222=(cj5*r10);
IkReal x3223=(cj5*r20);
IkReal x3224=((1.0)*x3219);
IkReal x3225=((1.0)*x3220);
IkReal x3226=(sj5*x3219);
IkReal x3227=(sj5*x3220);
evalcond[0]=(((r21*x3226))+((r22*x3220))+(((-1.0)*x3223*x3224)));
evalcond[1]=(((r21*x3227))+(((-1.0)*r22*x3224))+(((-1.0)*x3223*x3225)));
evalcond[2]=(cj0+((r02*x3220))+((r01*x3226))+(((-1.0)*x3221*x3224)));
evalcond[3]=(((r12*x3220))+sj0+((r11*x3226))+(((-1.0)*x3222*x3224)));
evalcond[4]=(cj0+((r11*x3227))+(((-1.0)*x3222*x3225))+(((-1.0)*r12*x3224)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3224))+((r01*x3227))+(((-1.0)*x3221*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3228=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3228;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3229=((1.0)*cj5);
IkReal x3230=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3229)));
j4eval[0]=x3230;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3229)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3231=((1.0)*cj5);
IkReal x3232=((((-1.0)*r01*x3231))+(((-1.0)*r00*sj5)));
j4eval[0]=x3232;
j4eval[1]=IKsign(x3232);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3231))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3233=((1.0)*cj5);
CheckValue<IkReal> x3234 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3233)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3234.valid){
continue;
}
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3233))+(((-1.0)*r00*sj5)))),-1);
if(!x3235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3234.value)+(((1.5707963267949)*(x3235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3236=IKcos(j4);
IkReal x3237=IKsin(j4);
IkReal x3238=((1.0)*sj0);
IkReal x3239=(cj5*r00);
IkReal x3240=(cj5*r10);
IkReal x3241=(cj5*r20);
IkReal x3242=((1.0)*x3236);
IkReal x3243=((1.0)*x3237);
IkReal x3244=(sj5*x3236);
IkReal x3245=(sj5*x3237);
evalcond[0]=(((r21*x3244))+((r22*x3237))+(((-1.0)*x3241*x3242)));
evalcond[1]=(((r21*x3245))+(((-1.0)*x3241*x3243))+(((-1.0)*r22*x3242)));
evalcond[2]=(cj0+(((-1.0)*x3240*x3243))+(((-1.0)*r12*x3242))+((r11*x3245)));
evalcond[3]=(((r01*x3244))+(((-1.0)*x3239*x3242))+((r02*x3237))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3240*x3242))+((r12*x3237))+(((-1.0)*x3238))+((r11*x3244)));
evalcond[5]=(((r01*x3245))+(((-1.0)*x3239*x3243))+(((-1.0)*x3238))+(((-1.0)*r02*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3246=((1.0)*cj5);
CheckValue<IkReal> x3247 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3247.valid){
continue;
}
CheckValue<IkReal> x3248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3246))+(((-1.0)*r00*sj5)))),-1);
if(!x3248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3247.value)+(((1.5707963267949)*(x3248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3249=IKcos(j4);
IkReal x3250=IKsin(j4);
IkReal x3251=((1.0)*sj0);
IkReal x3252=(cj5*r00);
IkReal x3253=(cj5*r10);
IkReal x3254=(cj5*r20);
IkReal x3255=((1.0)*x3249);
IkReal x3256=((1.0)*x3250);
IkReal x3257=(sj5*x3249);
IkReal x3258=(sj5*x3250);
evalcond[0]=((((-1.0)*x3254*x3255))+((r21*x3257))+((r22*x3250)));
evalcond[1]=((((-1.0)*x3254*x3256))+((r21*x3258))+(((-1.0)*r22*x3255)));
evalcond[2]=(cj0+((r11*x3258))+(((-1.0)*x3253*x3256))+(((-1.0)*r12*x3255)));
evalcond[3]=(((r02*x3250))+((r01*x3257))+(((-1.0)*x3252*x3255))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3250))+((r11*x3257))+(((-1.0)*x3253*x3255))+(((-1.0)*x3251)));
evalcond[5]=((((-1.0)*r02*x3255))+((r01*x3258))+(((-1.0)*x3252*x3256))+(((-1.0)*x3251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3259 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3259.valid){
continue;
}
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3259.value)+(((1.5707963267949)*(x3260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3261=IKcos(j4);
IkReal x3262=IKsin(j4);
IkReal x3263=((1.0)*sj0);
IkReal x3264=(cj5*r00);
IkReal x3265=(cj5*r10);
IkReal x3266=(cj5*r20);
IkReal x3267=((1.0)*x3261);
IkReal x3268=((1.0)*x3262);
IkReal x3269=(sj5*x3261);
IkReal x3270=(sj5*x3262);
evalcond[0]=(((r21*x3269))+(((-1.0)*x3266*x3267))+((r22*x3262)));
evalcond[1]=(((r21*x3270))+(((-1.0)*x3266*x3268))+(((-1.0)*r22*x3267)));
evalcond[2]=(cj0+(((-1.0)*r12*x3267))+(((-1.0)*x3265*x3268))+((r11*x3270)));
evalcond[3]=(((r01*x3269))+(((-1.0)*x3264*x3267))+((r02*x3262))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3263))+(((-1.0)*x3265*x3267))+((r11*x3269))+((r12*x3262)));
evalcond[5]=(((r01*x3270))+(((-1.0)*x3263))+(((-1.0)*x3264*x3268))+(((-1.0)*r02*x3267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3271=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3271;
j4eval[1]=IKsign(x3271);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3272=((1.0)*cj5);
IkReal x3273=((((-1.0)*r11*x3272))+(((-1.0)*r10*sj5)));
j4eval[0]=x3273;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3272)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3274=cj5*cj5;
IkReal x3275=((1.0)*r20);
IkReal x3276=(r01*r21);
IkReal x3277=(r21*sj5);
IkReal x3278=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3276))+(((-1.0)*r00*x3274*x3275))+((x3274*x3276))+((cj5*r00*x3277)));
j4eval[0]=x3278;
j4eval[1]=((IKabs((((cj0*x3277))+(((-1.0)*cj0*cj5*x3275)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3279=cj5*cj5;
IkReal x3280=((1.0)*r20);
IkReal x3281=(r01*r21);
IkReal x3282=(r21*sj5);
CheckValue<IkReal> x3283 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3280))+((cj0*x3282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3283.valid){
continue;
}
CheckValue<IkReal> x3284=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3279*x3281))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3279*x3280))+((cj5*r00*x3282))+(((-1.0)*x3281)))),-1);
if(!x3284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3283.value)+(((1.5707963267949)*(x3284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3285=IKcos(j4);
IkReal x3286=IKsin(j4);
IkReal x3287=(cj5*r00);
IkReal x3288=(cj5*r10);
IkReal x3289=(cj5*r20);
IkReal x3290=((1.0)*x3285);
IkReal x3291=((1.0)*x3286);
IkReal x3292=(sj5*x3285);
IkReal x3293=(sj5*x3286);
evalcond[0]=(((r22*x3286))+((r21*x3292))+(((-1.0)*x3289*x3290)));
evalcond[1]=((((-1.0)*r22*x3290))+((r21*x3293))+(((-1.0)*x3289*x3291)));
evalcond[2]=(((r01*x3292))+cj0+((r02*x3286))+(((-1.0)*x3287*x3290)));
evalcond[3]=(sj0+(((-1.0)*x3288*x3290))+((r11*x3292))+((r12*x3286)));
evalcond[4]=((((-1.0)*r12*x3290))+cj0+(((-1.0)*x3288*x3291))+((r11*x3293)));
evalcond[5]=(((r01*x3293))+(((-1.0)*sj0))+(((-1.0)*x3287*x3291))+(((-1.0)*r02*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3294=((1.0)*cj5);
CheckValue<IkReal> x3295 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3294))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
CheckValue<IkReal> x3296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3294))+(((-1.0)*r10*sj5)))),-1);
if(!x3296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3295.value)+(((1.5707963267949)*(x3296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3297=IKcos(j4);
IkReal x3298=IKsin(j4);
IkReal x3299=(cj5*r00);
IkReal x3300=(cj5*r10);
IkReal x3301=(cj5*r20);
IkReal x3302=((1.0)*x3297);
IkReal x3303=((1.0)*x3298);
IkReal x3304=(sj5*x3297);
IkReal x3305=(sj5*x3298);
evalcond[0]=(((r21*x3304))+((r22*x3298))+(((-1.0)*x3301*x3302)));
evalcond[1]=(((r21*x3305))+(((-1.0)*r22*x3302))+(((-1.0)*x3301*x3303)));
evalcond[2]=(cj0+((r02*x3298))+((r01*x3304))+(((-1.0)*x3299*x3302)));
evalcond[3]=(sj0+((r11*x3304))+((r12*x3298))+(((-1.0)*x3300*x3302)));
evalcond[4]=(cj0+((r11*x3305))+(((-1.0)*r12*x3302))+(((-1.0)*x3300*x3303)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3302))+((r01*x3305))+(((-1.0)*x3299*x3303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3306 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3306.valid){
continue;
}
CheckValue<IkReal> x3307=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3306.value)+(((1.5707963267949)*(x3307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3308=IKcos(j4);
IkReal x3309=IKsin(j4);
IkReal x3310=(cj5*r00);
IkReal x3311=(cj5*r10);
IkReal x3312=(cj5*r20);
IkReal x3313=((1.0)*x3308);
IkReal x3314=((1.0)*x3309);
IkReal x3315=(sj5*x3308);
IkReal x3316=(sj5*x3309);
evalcond[0]=(((r21*x3315))+((r22*x3309))+(((-1.0)*x3312*x3313)));
evalcond[1]=(((r21*x3316))+(((-1.0)*r22*x3313))+(((-1.0)*x3312*x3314)));
evalcond[2]=(cj0+((r02*x3309))+(((-1.0)*x3310*x3313))+((r01*x3315)));
evalcond[3]=(sj0+((r11*x3315))+((r12*x3309))+(((-1.0)*x3311*x3313)));
evalcond[4]=(cj0+((r11*x3316))+(((-1.0)*x3311*x3314))+(((-1.0)*r12*x3313)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3313))+(((-1.0)*x3310*x3314))+((r01*x3316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3317=IKcos(j0);
IkReal x3318=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x3318))+(((-0.612)*x3317)));
evalcond[1]=((((-1.0)*py))+(((-0.612)*x3318))+(((0.163941)*x3317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3319=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3319;
j4eval[1]=IKsign(x3319);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3320=((1.0)*cj5);
IkReal x3321=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3320)));
j4eval[0]=x3321;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3320)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3322=cj5*cj5;
IkReal x3323=((1.0)*r20);
IkReal x3324=(r01*r21);
IkReal x3325=(r21*sj5);
IkReal x3326=(((cj5*r01*r20*sj5))+(((-1.0)*x3324))+(((-1.0)*r00*x3322*x3323))+(((-1.0)*r02*r22))+((cj5*r00*x3325))+((x3322*x3324)));
j4eval[0]=x3326;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3323))+((cj0*x3325)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3327=cj5*cj5;
IkReal x3328=((1.0)*r20);
IkReal x3329=(r01*r21);
IkReal x3330=(r21*sj5);
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3328))+((cj0*x3330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
CheckValue<IkReal> x3332=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3329))+(((-1.0)*r02*r22))+((cj5*r00*x3330))+(((-1.0)*r00*x3327*x3328))+((x3327*x3329)))),-1);
if(!x3332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3331.value)+(((1.5707963267949)*(x3332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3333=IKcos(j4);
IkReal x3334=IKsin(j4);
IkReal x3335=(cj5*r00);
IkReal x3336=(cj5*r10);
IkReal x3337=(cj5*r20);
IkReal x3338=((1.0)*x3333);
IkReal x3339=((1.0)*x3334);
IkReal x3340=(sj5*x3333);
IkReal x3341=(sj5*x3334);
evalcond[0]=((((-1.0)*x3337*x3338))+((r21*x3340))+((r22*x3334)));
evalcond[1]=((((-1.0)*r22*x3338))+(((-1.0)*x3337*x3339))+((r21*x3341)));
evalcond[2]=(cj0+((r02*x3334))+(((-1.0)*x3335*x3338))+((r01*x3340)));
evalcond[3]=(sj0+((r12*x3334))+(((-1.0)*x3336*x3338))+((r11*x3340)));
evalcond[4]=(cj0+(((-1.0)*x3336*x3339))+((r11*x3341))+(((-1.0)*r12*x3338)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3338))+(((-1.0)*x3335*x3339))+((r01*x3341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3342=((1.0)*cj5);
CheckValue<IkReal> x3343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3342)))),-1);
if(!x3343.valid){
continue;
}
CheckValue<IkReal> x3344 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3342)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3343.value)))+(x3344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3345=IKcos(j4);
IkReal x3346=IKsin(j4);
IkReal x3347=(cj5*r00);
IkReal x3348=(cj5*r10);
IkReal x3349=(cj5*r20);
IkReal x3350=((1.0)*x3345);
IkReal x3351=((1.0)*x3346);
IkReal x3352=(sj5*x3345);
IkReal x3353=(sj5*x3346);
evalcond[0]=((((-1.0)*x3349*x3350))+((r22*x3346))+((r21*x3352)));
evalcond[1]=((((-1.0)*x3349*x3351))+((r21*x3353))+(((-1.0)*r22*x3350)));
evalcond[2]=(cj0+((r01*x3352))+((r02*x3346))+(((-1.0)*x3347*x3350)));
evalcond[3]=((((-1.0)*x3348*x3350))+sj0+((r11*x3352))+((r12*x3346)));
evalcond[4]=((((-1.0)*x3348*x3351))+cj0+((r11*x3353))+(((-1.0)*r12*x3350)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3350))+((r01*x3353))+(((-1.0)*x3347*x3351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3354 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3354.valid){
continue;
}
CheckValue<IkReal> x3355=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3354.value)+(((1.5707963267949)*(x3355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3356=IKcos(j4);
IkReal x3357=IKsin(j4);
IkReal x3358=(cj5*r00);
IkReal x3359=(cj5*r10);
IkReal x3360=(cj5*r20);
IkReal x3361=((1.0)*x3356);
IkReal x3362=((1.0)*x3357);
IkReal x3363=(sj5*x3356);
IkReal x3364=(sj5*x3357);
evalcond[0]=((((-1.0)*x3360*x3361))+((r21*x3363))+((r22*x3357)));
evalcond[1]=((((-1.0)*x3360*x3362))+((r21*x3364))+(((-1.0)*r22*x3361)));
evalcond[2]=(cj0+((r01*x3363))+((r02*x3357))+(((-1.0)*x3358*x3361)));
evalcond[3]=((((-1.0)*x3359*x3361))+((r12*x3357))+sj0+((r11*x3363)));
evalcond[4]=((((-1.0)*x3359*x3362))+(((-1.0)*r12*x3361))+cj0+((r11*x3364)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3364))+(((-1.0)*r02*x3361))+(((-1.0)*x3358*x3362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3365=IKcos(j0);
IkReal x3366=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.612)*x3365))+(((-0.163941)*x3366)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x3365))+(((-0.612)*x3366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3367=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3367;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3368=((1.0)*cj5);
IkReal x3369=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3368)));
j4eval[0]=x3369;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3368)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3370=((1.0)*cj5);
IkReal x3371=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3370)));
j4eval[0]=x3371;
j4eval[1]=IKsign(x3371);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3370))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3372=((1.0)*cj5);
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3372)))),-1);
if(!x3373.valid){
continue;
}
CheckValue<IkReal> x3374 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3372))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3373.value)))+(x3374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3375=IKcos(j4);
IkReal x3376=IKsin(j4);
IkReal x3377=((1.0)*sj0);
IkReal x3378=(cj5*r00);
IkReal x3379=(cj5*r10);
IkReal x3380=(cj5*r20);
IkReal x3381=((1.0)*x3375);
IkReal x3382=((1.0)*x3376);
IkReal x3383=(sj5*x3375);
IkReal x3384=(sj5*x3376);
evalcond[0]=(((r22*x3376))+(((-1.0)*x3380*x3381))+((r21*x3383)));
evalcond[1]=((((-1.0)*r22*x3381))+(((-1.0)*x3380*x3382))+((r21*x3384)));
evalcond[2]=(cj0+(((-1.0)*x3379*x3382))+((r11*x3384))+(((-1.0)*r12*x3381)));
evalcond[3]=(((r01*x3383))+(((-1.0)*x3378*x3381))+((r02*x3376))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3376))+(((-1.0)*x3377))+(((-1.0)*x3379*x3381))+((r11*x3383)));
evalcond[5]=(((r01*x3384))+(((-1.0)*x3378*x3382))+(((-1.0)*x3377))+(((-1.0)*r02*x3381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3385=((1.0)*cj5);
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3385)))),-1);
if(!x3386.valid){
continue;
}
CheckValue<IkReal> x3387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3386.value)))+(x3387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3388=IKcos(j4);
IkReal x3389=IKsin(j4);
IkReal x3390=((1.0)*sj0);
IkReal x3391=(cj5*r00);
IkReal x3392=(cj5*r10);
IkReal x3393=(cj5*r20);
IkReal x3394=((1.0)*x3388);
IkReal x3395=((1.0)*x3389);
IkReal x3396=(sj5*x3388);
IkReal x3397=(sj5*x3389);
evalcond[0]=(((r21*x3396))+((r22*x3389))+(((-1.0)*x3393*x3394)));
evalcond[1]=((((-1.0)*r22*x3394))+((r21*x3397))+(((-1.0)*x3393*x3395)));
evalcond[2]=((((-1.0)*x3392*x3395))+cj0+((r11*x3397))+(((-1.0)*r12*x3394)));
evalcond[3]=(((r01*x3396))+((r02*x3389))+(((-1.0)*x3391*x3394))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3392*x3394))+((r11*x3396))+(((-1.0)*x3390))+((r12*x3389)));
evalcond[5]=(((r01*x3397))+(((-1.0)*r02*x3394))+(((-1.0)*x3390))+(((-1.0)*x3391*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3398 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3398.valid){
continue;
}
CheckValue<IkReal> x3399=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3398.value)+(((1.5707963267949)*(x3399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3400=IKcos(j4);
IkReal x3401=IKsin(j4);
IkReal x3402=((1.0)*sj0);
IkReal x3403=(cj5*r00);
IkReal x3404=(cj5*r10);
IkReal x3405=(cj5*r20);
IkReal x3406=((1.0)*x3400);
IkReal x3407=((1.0)*x3401);
IkReal x3408=(sj5*x3400);
IkReal x3409=(sj5*x3401);
evalcond[0]=(((r22*x3401))+(((-1.0)*x3405*x3406))+((r21*x3408)));
evalcond[1]=((((-1.0)*x3405*x3407))+((r21*x3409))+(((-1.0)*r22*x3406)));
evalcond[2]=(cj0+(((-1.0)*x3404*x3407))+((r11*x3409))+(((-1.0)*r12*x3406)));
evalcond[3]=(((r02*x3401))+((r01*x3408))+(((-1.0)*x3403*x3406))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3404*x3406))+((r11*x3408))+((r12*x3401))+(((-1.0)*x3402)));
evalcond[5]=((((-1.0)*r02*x3406))+((r01*x3409))+(((-1.0)*x3403*x3407))+(((-1.0)*x3402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3410=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3410;
j4eval[1]=IKsign(x3410);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3411=((1.0)*cj5);
IkReal x3412=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3411)));
j4eval[0]=x3412;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3411)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3413=cj5*cj5;
IkReal x3414=((1.0)*r20);
IkReal x3415=(r01*r21);
IkReal x3416=(r21*sj5);
IkReal x3417=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3415))+(((-1.0)*r00*x3413*x3414))+((x3413*x3415))+((cj5*r00*x3416)));
j4eval[0]=x3417;
j4eval[1]=((IKabs((((cj0*x3416))+(((-1.0)*cj0*cj5*x3414)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3418=cj5*cj5;
IkReal x3419=((1.0)*r20);
IkReal x3420=(r01*r21);
IkReal x3421=(r21*sj5);
CheckValue<IkReal> x3422 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3419))+((cj0*x3421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3422.valid){
continue;
}
CheckValue<IkReal> x3423=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3418*x3420))+((cj5*r00*x3421))+(((-1.0)*r00*x3418*x3419))+(((-1.0)*x3420)))),-1);
if(!x3423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3422.value)+(((1.5707963267949)*(x3423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3424=IKcos(j4);
IkReal x3425=IKsin(j4);
IkReal x3426=(cj5*r00);
IkReal x3427=(cj5*r10);
IkReal x3428=(cj5*r20);
IkReal x3429=((1.0)*x3424);
IkReal x3430=((1.0)*x3425);
IkReal x3431=(sj5*x3424);
IkReal x3432=(sj5*x3425);
evalcond[0]=(((r21*x3431))+((r22*x3425))+(((-1.0)*x3428*x3429)));
evalcond[1]=((((-1.0)*x3428*x3430))+(((-1.0)*r22*x3429))+((r21*x3432)));
evalcond[2]=(((r01*x3431))+cj0+(((-1.0)*x3426*x3429))+((r02*x3425)));
evalcond[3]=((((-1.0)*x3427*x3429))+sj0+((r12*x3425))+((r11*x3431)));
evalcond[4]=((((-1.0)*x3427*x3430))+(((-1.0)*r12*x3429))+cj0+((r11*x3432)));
evalcond[5]=(((r01*x3432))+(((-1.0)*sj0))+(((-1.0)*x3426*x3430))+(((-1.0)*r02*x3429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3433=((1.0)*cj5);
CheckValue<IkReal> x3434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3433)))),-1);
if(!x3434.valid){
continue;
}
CheckValue<IkReal> x3435 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3433)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3434.value)))+(x3435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3436=IKcos(j4);
IkReal x3437=IKsin(j4);
IkReal x3438=(cj5*r00);
IkReal x3439=(cj5*r10);
IkReal x3440=(cj5*r20);
IkReal x3441=((1.0)*x3436);
IkReal x3442=((1.0)*x3437);
IkReal x3443=(sj5*x3436);
IkReal x3444=(sj5*x3437);
evalcond[0]=(((r21*x3443))+((r22*x3437))+(((-1.0)*x3440*x3441)));
evalcond[1]=(((r21*x3444))+(((-1.0)*r22*x3441))+(((-1.0)*x3440*x3442)));
evalcond[2]=(cj0+(((-1.0)*x3438*x3441))+((r01*x3443))+((r02*x3437)));
evalcond[3]=(((r11*x3443))+sj0+(((-1.0)*x3439*x3441))+((r12*x3437)));
evalcond[4]=(((r11*x3444))+cj0+(((-1.0)*x3439*x3442))+(((-1.0)*r12*x3441)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3438*x3442))+(((-1.0)*r02*x3441))+((r01*x3444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
CheckValue<IkReal> x3446=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3445.value)+(((1.5707963267949)*(x3446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3447=IKcos(j4);
IkReal x3448=IKsin(j4);
IkReal x3449=(cj5*r00);
IkReal x3450=(cj5*r10);
IkReal x3451=(cj5*r20);
IkReal x3452=((1.0)*x3447);
IkReal x3453=((1.0)*x3448);
IkReal x3454=(sj5*x3447);
IkReal x3455=(sj5*x3448);
evalcond[0]=((((-1.0)*x3451*x3452))+((r21*x3454))+((r22*x3448)));
evalcond[1]=((((-1.0)*x3451*x3453))+((r21*x3455))+(((-1.0)*r22*x3452)));
evalcond[2]=(cj0+((r02*x3448))+(((-1.0)*x3449*x3452))+((r01*x3454)));
evalcond[3]=(sj0+((r12*x3448))+(((-1.0)*x3450*x3452))+((r11*x3454)));
evalcond[4]=(cj0+(((-1.0)*r12*x3452))+(((-1.0)*x3450*x3453))+((r11*x3455)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3452))+(((-1.0)*x3449*x3453))+((r01*x3455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3456=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3456;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3457=((1.0)*cj5);
IkReal x3458=((((-1.0)*r01*x3457))+(((-1.0)*r00*sj5)));
j4eval[0]=x3458;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3457))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3459=((1.0)*cj5);
IkReal x3460=((((-1.0)*r01*x3459))+(((-1.0)*r00*sj5)));
j4eval[0]=x3460;
j4eval[1]=IKsign(x3460);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3459))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3461=((1.0)*cj5);
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3461))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3461)))),-1);
if(!x3463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3462.value)+(((1.5707963267949)*(x3463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3464=IKcos(j4);
IkReal x3465=IKsin(j4);
IkReal x3466=((1.0)*sj0);
IkReal x3467=(cj5*r00);
IkReal x3468=(cj5*r10);
IkReal x3469=(cj5*r20);
IkReal x3470=((1.0)*x3464);
IkReal x3471=((1.0)*x3465);
IkReal x3472=(sj5*x3464);
IkReal x3473=(sj5*x3465);
evalcond[0]=((((-1.0)*x3469*x3470))+((r21*x3472))+((r22*x3465)));
evalcond[1]=((((-1.0)*x3469*x3471))+(((-1.0)*r22*x3470))+((r21*x3473)));
evalcond[2]=(cj0+(((-1.0)*r12*x3470))+((r11*x3473))+(((-1.0)*x3468*x3471)));
evalcond[3]=((((-1.0)*x3467*x3470))+((r01*x3472))+((r02*x3465))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3465))+((r11*x3472))+(((-1.0)*x3468*x3470))+(((-1.0)*x3466)));
evalcond[5]=((((-1.0)*x3467*x3471))+(((-1.0)*r02*x3470))+((r01*x3473))+(((-1.0)*x3466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3474=((1.0)*cj5);
CheckValue<IkReal> x3475 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3475.valid){
continue;
}
CheckValue<IkReal> x3476=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3474)))),-1);
if(!x3476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3475.value)+(((1.5707963267949)*(x3476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3477=IKcos(j4);
IkReal x3478=IKsin(j4);
IkReal x3479=((1.0)*sj0);
IkReal x3480=(cj5*r00);
IkReal x3481=(cj5*r10);
IkReal x3482=(cj5*r20);
IkReal x3483=((1.0)*x3477);
IkReal x3484=((1.0)*x3478);
IkReal x3485=(sj5*x3477);
IkReal x3486=(sj5*x3478);
evalcond[0]=((((-1.0)*x3482*x3483))+((r21*x3485))+((r22*x3478)));
evalcond[1]=((((-1.0)*x3482*x3484))+(((-1.0)*r22*x3483))+((r21*x3486)));
evalcond[2]=(cj0+(((-1.0)*x3481*x3484))+(((-1.0)*r12*x3483))+((r11*x3486)));
evalcond[3]=(((r01*x3485))+((r02*x3478))+(((-1.0)*cj0))+(((-1.0)*x3480*x3483)));
evalcond[4]=((((-1.0)*x3481*x3483))+((r12*x3478))+((r11*x3485))+(((-1.0)*x3479)));
evalcond[5]=((((-1.0)*r02*x3483))+((r01*x3486))+(((-1.0)*x3479))+(((-1.0)*x3480*x3484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3487 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3487.valid){
continue;
}
CheckValue<IkReal> x3488=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3487.value)+(((1.5707963267949)*(x3488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3489=IKcos(j4);
IkReal x3490=IKsin(j4);
IkReal x3491=((1.0)*sj0);
IkReal x3492=(cj5*r00);
IkReal x3493=(cj5*r10);
IkReal x3494=(cj5*r20);
IkReal x3495=((1.0)*x3489);
IkReal x3496=((1.0)*x3490);
IkReal x3497=(sj5*x3489);
IkReal x3498=(sj5*x3490);
evalcond[0]=((((-1.0)*x3494*x3495))+((r22*x3490))+((r21*x3497)));
evalcond[1]=((((-1.0)*x3494*x3496))+(((-1.0)*r22*x3495))+((r21*x3498)));
evalcond[2]=((((-1.0)*r12*x3495))+cj0+(((-1.0)*x3493*x3496))+((r11*x3498)));
evalcond[3]=(((r01*x3497))+(((-1.0)*x3492*x3495))+((r02*x3490))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3491))+(((-1.0)*x3493*x3495))+((r11*x3497))+((r12*x3490)));
evalcond[5]=((((-1.0)*r02*x3495))+((r01*x3498))+(((-1.0)*x3491))+(((-1.0)*x3492*x3496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3499=(r00*sj5);
IkReal x3500=((612000.0)*cj1);
IkReal x3501=(cj5*r01);
IkReal x3502=(sj1*sj2);
IkReal x3503=(cj1*cj2);
IkReal x3504=((1000000.0)*px);
CheckValue<IkReal> x3505=IKPowWithIntegerCheck(((((-163941.0)*x3503))+(((163941.0)*x3502))),-1);
if(!x3505.valid){
continue;
}
CheckValue<IkReal> x3506=IKPowWithIntegerCheck((x3502+(((-1.0)*x3503))),-1);
if(!x3506.valid){
continue;
}
if( IKabs(((x3505.value)*(((((688000.0)*x3501*x3503))+((x3500*x3501))+(((-688000.0)*x3501*x3502))+(((-688000.0)*x3499*x3502))+(((-1.0)*x3502*x3504))+((x3499*x3500))+((x3503*x3504))+(((688000.0)*x3499*x3503)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3506.value)*((x3501+x3499)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3505.value)*(((((688000.0)*x3501*x3503))+((x3500*x3501))+(((-688000.0)*x3501*x3502))+(((-688000.0)*x3499*x3502))+(((-1.0)*x3502*x3504))+((x3499*x3500))+((x3503*x3504))+(((688000.0)*x3499*x3503))))))+IKsqr(((x3506.value)*((x3501+x3499))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((x3505.value)*(((((688000.0)*x3501*x3503))+((x3500*x3501))+(((-688000.0)*x3501*x3502))+(((-688000.0)*x3499*x3502))+(((-1.0)*x3502*x3504))+((x3499*x3500))+((x3503*x3504))+(((688000.0)*x3499*x3503))))), ((x3506.value)*((x3501+x3499))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3507=IKcos(j0);
IkReal x3508=IKsin(j0);
IkReal x3509=(cj5*r01);
IkReal x3510=(sj1*sj2);
IkReal x3511=(cj5*r11);
IkReal x3512=(r10*sj5);
IkReal x3513=(r00*sj5);
IkReal x3514=(cj1*cj2);
IkReal x3515=((0.5723)*x3508);
IkReal x3516=(cj1*x3508);
IkReal x3517=((0.5723)*x3507);
evalcond[0]=(((x3507*x3510))+(((-1.0)*x3507*x3514))+(((-1.0)*x3509))+(((-1.0)*x3513)));
evalcond[1]=(((x3508*x3510))+(((-1.0)*x3508*x3514))+(((-1.0)*x3511))+(((-1.0)*x3512)));
evalcond[2]=((((0.612)*cj1*x3507))+(((-0.1157)*x3513))+(((-0.1157)*x3509))+(((-1.0)*x3510*x3517))+(((-0.163941)*x3508))+(((-1.0)*px))+((x3514*x3517)));
evalcond[3]=((((-0.1157)*x3511))+(((-0.1157)*x3512))+(((-1.0)*x3510*x3515))+(((-1.0)*py))+(((0.612)*x3516))+((x3514*x3515))+(((0.163941)*x3507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3518=((1.0)*cj5);
IkReal x3519=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3518)));
j4eval[0]=x3519;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3518))))));
j4eval[2]=IKsign(x3519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3520=((1.0)*cj5);
IkReal x3521=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3520)));
j4eval[0]=x3521;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3520)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3522=((1.0)*sj0);
IkReal x3523=((1.0)*cj0);
IkReal x3524=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3524;
j4eval[1]=((IKabs(((((-1.0)*r02*x3523))+(((-1.0)*r12*x3522)))))+(IKabs(((((-1.0)*r11*sj5*x3522))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3523))))));
j4eval[2]=IKsign(x3524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3525=((-1.0)*r20);
IkReal x3527 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3527)==0){
continue;
}
IkReal x3526=pow(x3527,-0.5);
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3525),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3528.value));
IkReal gconst97=(r21*x3526);
IkReal gconst98=(x3525*x3526);
CheckValue<IkReal> x3529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3529.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3529.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3530=((-1.0)*r20);
IkReal x3531=x3526;
CheckValue<IkReal> x3533 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3530),IKFAST_ATAN2_MAGTHRESH);
if(!x3533.valid){
continue;
}
IkReal x3532=((-1.0)*(x3533.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3532;
IkReal gconst96=x3532;
IkReal gconst97=(r21*x3531);
IkReal gconst98=(x3530*x3531);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3534=((-1.0)*r20);
IkReal x3535=x3526;
CheckValue<IkReal> x3537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3534),IKFAST_ATAN2_MAGTHRESH);
if(!x3537.valid){
continue;
}
IkReal x3536=((-1.0)*(x3537.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3536;
IkReal gconst96=x3536;
IkReal gconst97=(r21*x3535);
IkReal gconst98=(x3534*x3535);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3538=((-1.0)*r20);
IkReal x3539=x3526;
CheckValue<IkReal> x3541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3538),IKFAST_ATAN2_MAGTHRESH);
if(!x3541.valid){
continue;
}
IkReal x3540=((-1.0)*(x3541.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3540;
IkReal gconst96=x3540;
IkReal gconst97=(r21*x3539);
IkReal gconst98=(x3538*x3539);
IkReal x3542=((1.0)*(r22*r22));
CheckValue<IkReal> x3546=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3542))),-1);
if(!x3546.valid){
continue;
}
IkReal x3543=x3546.value;
IkReal x3544=((1.0)*x3543);
IkReal x3545=((((-1.0)*x3544*(r21*r21*r21*r21)))+(((-2.0)*x3543*(r20*r20)*(r21*r21)))+(((-1.0)*x3544*(r20*r20*r20*r20)))+(((-1.0)*x3542)));
j4eval[0]=x3545;
j4eval[1]=IKsign(x3545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3547=(cj1*cj2);
IkReal x3548=(gconst98*r20);
IkReal x3549=(sj1*sj2);
IkReal x3550=(gconst97*r21);
CheckValue<IkReal> x3551=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3550*x3550)))+(((2.0)*x3548*x3550))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3548*x3548))))),-1);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552 = IKatan2WithCheck(IkReal((((r22*x3549))+(((-1.0)*r22*x3547)))),IkReal(((((-1.0)*x3547*x3550))+((x3547*x3548))+(((-1.0)*x3548*x3549))+((x3549*x3550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3551.value)))+(x3552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3553=IKsin(j4);
IkReal x3554=IKcos(j4);
IkReal x3555=(gconst98*r10);
IkReal x3556=(gconst97*r21);
IkReal x3557=(gconst98*r20);
IkReal x3558=((1.0)*cj2);
IkReal x3559=((1.0)*sj0);
IkReal x3560=(gconst98*r00);
IkReal x3561=(cj1*sj2);
IkReal x3562=((1.0)*x3554);
IkReal x3563=((1.0)*x3553);
IkReal x3564=(gconst97*x3553);
IkReal x3565=(gconst97*x3554);
evalcond[0]=((((-1.0)*r22*x3562))+((x3553*x3556))+(((-1.0)*x3557*x3563)));
evalcond[1]=(cj0+(((-1.0)*x3555*x3563))+(((-1.0)*r12*x3562))+((r11*x3564)));
evalcond[2]=((((-1.0)*r02*x3562))+(((-1.0)*x3560*x3563))+((r01*x3564))+(((-1.0)*x3559)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3558))+((r22*x3553))+(((-1.0)*x3557*x3562))+((x3554*x3556)));
evalcond[4]=((((-1.0)*x3560*x3562))+((r01*x3565))+(((-1.0)*cj0*sj1*x3558))+(((-1.0)*cj0*x3561))+((r02*x3553)));
evalcond[5]=((((-1.0)*x3555*x3562))+((r12*x3553))+(((-1.0)*x3559*x3561))+(((-1.0)*sj0*sj1*x3558))+((r11*x3565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3566=((1.0)*gconst98);
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3566))+(((-1.0)*gconst97*r10)))),-1);
if(!x3567.valid){
continue;
}
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3567.value)))+(x3568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3569=IKsin(j4);
IkReal x3570=IKcos(j4);
IkReal x3571=(gconst98*r10);
IkReal x3572=(gconst97*r21);
IkReal x3573=(gconst98*r20);
IkReal x3574=((1.0)*cj2);
IkReal x3575=((1.0)*sj0);
IkReal x3576=(gconst98*r00);
IkReal x3577=(cj1*sj2);
IkReal x3578=((1.0)*x3570);
IkReal x3579=((1.0)*x3569);
IkReal x3580=(gconst97*x3569);
IkReal x3581=(gconst97*x3570);
evalcond[0]=((((-1.0)*x3573*x3579))+((x3569*x3572))+(((-1.0)*r22*x3578)));
evalcond[1]=(cj0+((r11*x3580))+(((-1.0)*x3571*x3579))+(((-1.0)*r12*x3578)));
evalcond[2]=((((-1.0)*x3575))+(((-1.0)*x3576*x3579))+((r01*x3580))+(((-1.0)*r02*x3578)));
evalcond[3]=(((x3570*x3572))+((sj1*sj2))+(((-1.0)*x3573*x3578))+((r22*x3569))+(((-1.0)*cj1*x3574)));
evalcond[4]=((((-1.0)*x3576*x3578))+(((-1.0)*cj0*x3577))+((r01*x3581))+((r02*x3569))+(((-1.0)*cj0*sj1*x3574)));
evalcond[5]=((((-1.0)*sj0*sj1*x3574))+(((-1.0)*x3575*x3577))+((r11*x3581))+(((-1.0)*x3571*x3578))+((r12*x3569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3582=((1.0)*gconst98);
CheckValue<IkReal> x3583 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3583.valid){
continue;
}
CheckValue<IkReal> x3584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x3582)))),-1);
if(!x3584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3583.value)+(((1.5707963267949)*(x3584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3585=IKsin(j4);
IkReal x3586=IKcos(j4);
IkReal x3587=(gconst98*r10);
IkReal x3588=(gconst97*r21);
IkReal x3589=(gconst98*r20);
IkReal x3590=((1.0)*cj2);
IkReal x3591=((1.0)*sj0);
IkReal x3592=(gconst98*r00);
IkReal x3593=(cj1*sj2);
IkReal x3594=((1.0)*x3586);
IkReal x3595=((1.0)*x3585);
IkReal x3596=(gconst97*x3585);
IkReal x3597=(gconst97*x3586);
evalcond[0]=((((-1.0)*x3589*x3595))+((x3585*x3588))+(((-1.0)*r22*x3594)));
evalcond[1]=((((-1.0)*x3587*x3595))+cj0+((r11*x3596))+(((-1.0)*r12*x3594)));
evalcond[2]=((((-1.0)*r02*x3594))+((r01*x3596))+(((-1.0)*x3592*x3595))+(((-1.0)*x3591)));
evalcond[3]=((((-1.0)*cj1*x3590))+(((-1.0)*x3589*x3594))+((x3586*x3588))+((sj1*sj2))+((r22*x3585)));
evalcond[4]=(((r02*x3585))+(((-1.0)*cj0*x3593))+((r01*x3597))+(((-1.0)*x3592*x3594))+(((-1.0)*cj0*sj1*x3590)));
evalcond[5]=((((-1.0)*x3587*x3594))+((r12*x3585))+((r11*x3597))+(((-1.0)*x3591*x3593))+(((-1.0)*sj0*sj1*x3590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3598=((-1.0)*r21);
IkReal x3600 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3600)==0){
continue;
}
IkReal x3599=pow(x3600,-0.5);
CheckValue<IkReal> x3601 = IKatan2WithCheck(IkReal(x3598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3601.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3601.value))));
IkReal gconst100=(x3598*x3599);
IkReal gconst101=((1.0)*r20*x3599);
CheckValue<IkReal> x3602 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3602.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3602.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3603=((-1.0)*r21);
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(x3603),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
IkReal x3604=((1.0)*(x3606.value));
IkReal x3605=x3599;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3604)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3604)));
IkReal gconst100=(x3603*x3605);
IkReal gconst101=((1.0)*r20*x3605);
IkReal x3607=r22*r22;
IkReal x3608=((1.0)*x3607);
CheckValue<IkReal> x3612=IKPowWithIntegerCheck(((-1.0)+x3607),-1);
if(!x3612.valid){
continue;
}
IkReal x3609=x3612.value;
if((((1.0)+(((-1.0)*x3608)))) < -0.00001)
continue;
IkReal x3610=IKsqrt(((1.0)+(((-1.0)*x3608))));
IkReal x3611=(cj0*x3609*x3610);
j4eval[0]=((IKabs((x3611+(((-1.0)*x3608*x3611)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3613=((-1.0)*r21);
CheckValue<IkReal> x3616 = IKatan2WithCheck(IkReal(x3613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3616.valid){
continue;
}
IkReal x3614=((1.0)*(x3616.value));
IkReal x3615=x3599;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3614)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3614)));
IkReal gconst100=(x3613*x3615);
IkReal gconst101=((1.0)*r20*x3615);
IkReal x3617=r22*r22;
IkReal x3618=((1.0)*x3617);
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(((-1.0)+x3617),-1);
if(!x3622.valid){
continue;
}
IkReal x3619=x3622.value;
if((((1.0)+(((-1.0)*x3618)))) < -0.00001)
continue;
IkReal x3620=IKsqrt(((1.0)+(((-1.0)*x3618))));
IkReal x3621=(sj0*x3619*x3620);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3621+(((-1.0)*x3618*x3621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3623=((-1.0)*r21);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(x3623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
IkReal x3624=((1.0)*(x3626.value));
IkReal x3625=x3599;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3624)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3624)));
IkReal gconst100=(x3623*x3625);
IkReal gconst101=((1.0)*r20*x3625);
IkReal x3627=r22*r22;
IkReal x3628=(r12*sj0);
IkReal x3629=(cj0*r02);
CheckValue<IkReal> x3633=IKPowWithIntegerCheck(((-1.0)+x3627),-1);
if(!x3633.valid){
continue;
}
IkReal x3630=x3633.value;
if((((1.0)+(((-1.0)*x3627)))) < -0.00001)
continue;
IkReal x3631=IKsqrt(((1.0)+(((-1.0)*x3627))));
IkReal x3632=(r22*x3630*x3631);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3628*x3632))+((x3629*x3632)))))+(IKabs(((((-1.0)*x3629))+(((-1.0)*x3628))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3634=((1.0)*sj0);
IkReal x3635=((1.0)*gconst100);
CheckValue<IkReal> x3636 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3634))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3634))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3636.valid){
continue;
}
CheckValue<IkReal> x3637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x3635)))),-1);
if(!x3637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3636.value)+(((1.5707963267949)*(x3637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3638=IKsin(j4);
IkReal x3639=IKcos(j4);
IkReal x3640=(gconst101*r20);
IkReal x3641=(gconst101*r10);
IkReal x3642=((1.0)*cj2);
IkReal x3643=(gconst101*r00);
IkReal x3644=((1.0)*sj0);
IkReal x3645=(cj1*sj2);
IkReal x3646=((1.0)*x3639);
IkReal x3647=((1.0)*x3638);
IkReal x3648=(gconst100*x3638);
IkReal x3649=(gconst100*x3639);
evalcond[0]=((((-1.0)*x3640*x3647))+((r21*x3648))+(((-1.0)*r22*x3646)));
evalcond[1]=(((r11*x3648))+cj0+(((-1.0)*r12*x3646))+(((-1.0)*x3641*x3647)));
evalcond[2]=(((r01*x3648))+(((-1.0)*x3643*x3647))+(((-1.0)*r02*x3646))+(((-1.0)*x3644)));
evalcond[3]=((((-1.0)*x3640*x3646))+((r22*x3638))+((sj1*sj2))+((r21*x3649))+(((-1.0)*cj1*x3642)));
evalcond[4]=(((r02*x3638))+((r01*x3649))+(((-1.0)*x3643*x3646))+(((-1.0)*cj0*x3645))+(((-1.0)*cj0*sj1*x3642)));
evalcond[5]=(((r12*x3638))+((r11*x3649))+(((-1.0)*x3644*x3645))+(((-1.0)*x3641*x3646))+(((-1.0)*sj0*sj1*x3642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3650=((1.0)*gconst101);
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3650)))),-1);
if(!x3651.valid){
continue;
}
CheckValue<IkReal> x3652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3650))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3651.value)))+(x3652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3653=IKsin(j4);
IkReal x3654=IKcos(j4);
IkReal x3655=(gconst101*r20);
IkReal x3656=(gconst101*r10);
IkReal x3657=((1.0)*cj2);
IkReal x3658=(gconst101*r00);
IkReal x3659=((1.0)*sj0);
IkReal x3660=(cj1*sj2);
IkReal x3661=((1.0)*x3654);
IkReal x3662=((1.0)*x3653);
IkReal x3663=(gconst100*x3653);
IkReal x3664=(gconst100*x3654);
evalcond[0]=((((-1.0)*x3655*x3662))+(((-1.0)*r22*x3661))+((r21*x3663)));
evalcond[1]=(cj0+((r11*x3663))+(((-1.0)*x3656*x3662))+(((-1.0)*r12*x3661)));
evalcond[2]=((((-1.0)*r02*x3661))+((r01*x3663))+(((-1.0)*x3658*x3662))+(((-1.0)*x3659)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3657))+(((-1.0)*x3655*x3661))+((r21*x3664))+((r22*x3653)));
evalcond[4]=(((r01*x3664))+(((-1.0)*cj0*x3660))+(((-1.0)*x3658*x3661))+((r02*x3653))+(((-1.0)*cj0*sj1*x3657)));
evalcond[5]=((((-1.0)*sj0*sj1*x3657))+((r12*x3653))+((r11*x3664))+(((-1.0)*x3659*x3660))+(((-1.0)*x3656*x3661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3665=((1.0)*gconst101);
CheckValue<IkReal> x3666 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3666.valid){
continue;
}
CheckValue<IkReal> x3667=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3665)))),-1);
if(!x3667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3666.value)+(((1.5707963267949)*(x3667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3668=IKsin(j4);
IkReal x3669=IKcos(j4);
IkReal x3670=(gconst101*r20);
IkReal x3671=(gconst101*r10);
IkReal x3672=((1.0)*cj2);
IkReal x3673=(gconst101*r00);
IkReal x3674=((1.0)*sj0);
IkReal x3675=(cj1*sj2);
IkReal x3676=((1.0)*x3669);
IkReal x3677=((1.0)*x3668);
IkReal x3678=(gconst100*x3668);
IkReal x3679=(gconst100*x3669);
evalcond[0]=((((-1.0)*x3670*x3677))+((r21*x3678))+(((-1.0)*r22*x3676)));
evalcond[1]=((((-1.0)*x3671*x3677))+cj0+((r11*x3678))+(((-1.0)*r12*x3676)));
evalcond[2]=(((r01*x3678))+(((-1.0)*x3673*x3677))+(((-1.0)*r02*x3676))+(((-1.0)*x3674)));
evalcond[3]=(((r22*x3668))+(((-1.0)*x3670*x3676))+((sj1*sj2))+((r21*x3679))+(((-1.0)*cj1*x3672)));
evalcond[4]=(((r01*x3679))+(((-1.0)*cj0*x3675))+(((-1.0)*x3673*x3676))+((r02*x3668))+(((-1.0)*cj0*sj1*x3672)));
evalcond[5]=((((-1.0)*x3671*x3676))+((r11*x3679))+((r12*x3668))+(((-1.0)*sj0*sj1*x3672))+(((-1.0)*x3674*x3675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3680=((-1.0)*r10);
IkReal x3682 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3682)==0){
continue;
}
IkReal x3681=pow(x3682,-0.5);
CheckValue<IkReal> x3683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3680),IKFAST_ATAN2_MAGTHRESH);
if(!x3683.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3683.value));
IkReal gconst103=(r11*x3681);
IkReal gconst104=(x3680*x3681);
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3684.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3685=((-1.0)*r10);
IkReal x3686=x3681;
CheckValue<IkReal> x3688 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3685),IKFAST_ATAN2_MAGTHRESH);
if(!x3688.valid){
continue;
}
IkReal x3687=((-1.0)*(x3688.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3687;
IkReal gconst102=x3687;
IkReal gconst103=(r11*x3686);
IkReal gconst104=(x3685*x3686);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3689=((1.0)*sj0);
IkReal x3690=((1.0)*gconst103);
CheckValue<IkReal> x3691 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3689)))),IkReal(((((-1.0)*cj0*r01*x3690))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3689))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3690))+(((-1.0)*gconst104*r21)))),-1);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3691.value)+(((1.5707963267949)*(x3692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=IKcos(j4);
IkReal x3695=(gconst103*r11);
IkReal x3696=((1.0)*cj2);
IkReal x3697=((1.0)*sj0);
IkReal x3698=(cj1*sj2);
IkReal x3699=((1.0)*x3694);
IkReal x3700=(gconst103*x3694);
IkReal x3701=(gconst103*x3693);
IkReal x3702=((1.0)*gconst104*x3693);
evalcond[0]=((((-1.0)*r22*x3699))+((r21*x3701))+(((-1.0)*r20*x3702)));
evalcond[1]=(cj0+(((-1.0)*r10*x3702))+(((-1.0)*r12*x3699))+((x3693*x3695)));
evalcond[2]=((((-1.0)*r00*x3702))+((r01*x3701))+(((-1.0)*r02*x3699))+(((-1.0)*x3697)));
evalcond[3]=((((-1.0)*gconst104*r20*x3699))+(((-1.0)*cj1*x3696))+((sj1*sj2))+((r21*x3700))+((r22*x3693)));
evalcond[4]=((((-1.0)*cj0*x3698))+((r01*x3700))+((r02*x3693))+(((-1.0)*cj0*sj1*x3696))+(((-1.0)*gconst104*r00*x3699)));
evalcond[5]=(((x3694*x3695))+(((-1.0)*gconst104*r10*x3699))+(((-1.0)*x3697*x3698))+(((-1.0)*sj0*sj1*x3696))+((r12*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3703=((1.0)*gconst104);
CheckValue<IkReal> x3704=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3703))+(((-1.0)*gconst103*r00)))),-1);
if(!x3704.valid){
continue;
}
CheckValue<IkReal> x3705 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3703))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3704.value)))+(x3705.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3706=IKsin(j4);
IkReal x3707=IKcos(j4);
IkReal x3708=(gconst103*r11);
IkReal x3709=((1.0)*cj2);
IkReal x3710=((1.0)*sj0);
IkReal x3711=(cj1*sj2);
IkReal x3712=((1.0)*x3707);
IkReal x3713=(gconst103*x3707);
IkReal x3714=(gconst103*x3706);
IkReal x3715=((1.0)*gconst104*x3706);
evalcond[0]=((((-1.0)*r20*x3715))+((r21*x3714))+(((-1.0)*r22*x3712)));
evalcond[1]=(cj0+(((-1.0)*r10*x3715))+(((-1.0)*r12*x3712))+((x3706*x3708)));
evalcond[2]=((((-1.0)*r00*x3715))+(((-1.0)*r02*x3712))+(((-1.0)*x3710))+((r01*x3714)));
evalcond[3]=((((-1.0)*gconst104*r20*x3712))+(((-1.0)*cj1*x3709))+((sj1*sj2))+((r21*x3713))+((r22*x3706)));
evalcond[4]=((((-1.0)*cj0*sj1*x3709))+(((-1.0)*cj0*x3711))+((r01*x3713))+(((-1.0)*gconst104*r00*x3712))+((r02*x3706)));
evalcond[5]=(((r12*x3706))+(((-1.0)*x3710*x3711))+((x3707*x3708))+(((-1.0)*sj0*sj1*x3709))+(((-1.0)*gconst104*r10*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3716=((-1.0)*r11);
IkReal x3718 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3718)==0){
continue;
}
IkReal x3717=pow(x3718,-0.5);
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(x3716),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3719.value))));
IkReal gconst106=(x3716*x3717);
IkReal gconst107=((1.0)*r10*x3717);
CheckValue<IkReal> x3720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3720.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3720.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3721=((-1.0)*r11);
CheckValue<IkReal> x3724 = IKatan2WithCheck(IkReal(x3721),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3724.valid){
continue;
}
IkReal x3722=((1.0)*(x3724.value));
IkReal x3723=x3717;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3722)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3722)));
IkReal gconst106=(x3721*x3723);
IkReal gconst107=((1.0)*r10*x3723);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3725=((-1.0)*r11);
CheckValue<IkReal> x3728 = IKatan2WithCheck(IkReal(x3725),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3728.valid){
continue;
}
IkReal x3726=((1.0)*(x3728.value));
IkReal x3727=x3717;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3726)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3726)));
IkReal gconst106=(x3725*x3727);
IkReal gconst107=((1.0)*r10*x3727);
IkReal x3729=r12*r12;
IkReal x3730=((1.0)*sj0);
IkReal x3731=(cj0*r02);
IkReal x3732=x3717;
j4eval[0]=((IKabs(((((-1.0)*r12*x3730))+(((-1.0)*x3731)))))+(IKabs(((((-1.0)*x3730*x3732))+((sj0*x3729*x3732))+((r12*x3731*x3732))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3733=((-1.0)*r11);
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal(x3733),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
IkReal x3734=((1.0)*(x3736.value));
IkReal x3735=x3717;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3734)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3734)));
IkReal gconst106=(x3733*x3735);
IkReal gconst107=((1.0)*r10*x3735);
IkReal x3737=r12*r12;
IkReal x3738=((1.0)+(((-1.0)*x3737)));
IkReal x3739=(r22*sj1*sj2);
IkReal x3740=(cj1*cj2*r22);
CheckValue<IkReal> x3747=IKPowWithIntegerCheck(x3738,-1);
if(!x3747.valid){
continue;
}
IkReal x3741=x3747.value;
CheckValue<IkReal> x3748=IKPowWithIntegerCheck(((-1.0)+x3737),-1);
if(!x3748.valid){
continue;
}
IkReal x3742=x3748.value;
IkReal x3743=((1.0)*x3741);
if((x3738) < -0.00001)
continue;
IkReal x3744=IKsqrt(x3738);
IkReal x3745=(r12*x3742*x3744);
IkReal x3746=((((-2.0)*r10*r11*r20*r21*x3741))+(((-1.0)*x3743*(r11*r11)*(r21*r21)))+(((-1.0)*x3743*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3746;
j4eval[1]=((IKabs((((x3740*x3745))+(((-1.0)*x3739*x3745)))))+(IKabs((x3739+(((-1.0)*x3740))))));
j4eval[2]=IKsign(x3746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3749=(sj1*sj2);
IkReal x3750=(gconst106*r21);
IkReal x3751=(gconst107*r20);
IkReal x3752=(cj1*cj2);
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal((((r22*x3749))+(((-1.0)*r22*x3752)))),IkReal((((x3751*x3752))+((x3749*x3750))+(((-1.0)*x3749*x3751))+(((-1.0)*x3750*x3752)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
CheckValue<IkReal> x3754=IKPowWithIntegerCheck(IKsign(((((2.0)*x3750*x3751))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3751*x3751)))+(((-1.0)*(x3750*x3750))))),-1);
if(!x3754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3753.value)+(((1.5707963267949)*(x3754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3755=IKsin(j4);
IkReal x3756=IKcos(j4);
IkReal x3757=(gconst107*r10);
IkReal x3758=(gconst107*r00);
IkReal x3759=((1.0)*cj2);
IkReal x3760=(gconst107*r20);
IkReal x3761=((1.0)*sj0);
IkReal x3762=(cj1*sj2);
IkReal x3763=((1.0)*x3756);
IkReal x3764=(gconst106*x3756);
IkReal x3765=(gconst106*x3755);
IkReal x3766=((1.0)*x3755);
evalcond[0]=(((r21*x3765))+(((-1.0)*r22*x3763))+(((-1.0)*x3760*x3766)));
evalcond[1]=((((-1.0)*x3757*x3766))+cj0+((r11*x3765))+(((-1.0)*r12*x3763)));
evalcond[2]=((((-1.0)*r02*x3763))+(((-1.0)*x3761))+((r01*x3765))+(((-1.0)*x3758*x3766)));
evalcond[3]=((((-1.0)*cj1*x3759))+((r21*x3764))+((sj1*sj2))+((r22*x3755))+(((-1.0)*x3760*x3763)));
evalcond[4]=(((r02*x3755))+(((-1.0)*cj0*sj1*x3759))+(((-1.0)*cj0*x3762))+((r01*x3764))+(((-1.0)*x3758*x3763)));
evalcond[5]=((((-1.0)*x3761*x3762))+(((-1.0)*x3757*x3763))+(((-1.0)*sj0*sj1*x3759))+((r12*x3755))+((r11*x3764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3767=((1.0)*sj0);
IkReal x3768=((1.0)*gconst106);
CheckValue<IkReal> x3769 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3767)))),IkReal(((((-1.0)*cj0*r01*x3768))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3767))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3769.valid){
continue;
}
CheckValue<IkReal> x3770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3768))+(((-1.0)*gconst107*r21)))),-1);
if(!x3770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3769.value)+(((1.5707963267949)*(x3770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3771=IKsin(j4);
IkReal x3772=IKcos(j4);
IkReal x3773=(gconst107*r10);
IkReal x3774=(gconst107*r00);
IkReal x3775=((1.0)*cj2);
IkReal x3776=(gconst107*r20);
IkReal x3777=((1.0)*sj0);
IkReal x3778=(cj1*sj2);
IkReal x3779=((1.0)*x3772);
IkReal x3780=(gconst106*x3772);
IkReal x3781=(gconst106*x3771);
IkReal x3782=((1.0)*x3771);
evalcond[0]=(((r21*x3781))+(((-1.0)*r22*x3779))+(((-1.0)*x3776*x3782)));
evalcond[1]=(cj0+(((-1.0)*x3773*x3782))+((r11*x3781))+(((-1.0)*r12*x3779)));
evalcond[2]=(((r01*x3781))+(((-1.0)*r02*x3779))+(((-1.0)*x3774*x3782))+(((-1.0)*x3777)));
evalcond[3]=(((r22*x3771))+((r21*x3780))+((sj1*sj2))+(((-1.0)*x3776*x3779))+(((-1.0)*cj1*x3775)));
evalcond[4]=(((r02*x3771))+(((-1.0)*cj0*sj1*x3775))+((r01*x3780))+(((-1.0)*x3774*x3779))+(((-1.0)*cj0*x3778)));
evalcond[5]=((((-1.0)*x3777*x3778))+(((-1.0)*x3773*x3779))+((r12*x3771))+(((-1.0)*sj0*sj1*x3775))+((r11*x3780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3783=((1.0)*gconst107);
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3783)))),-1);
if(!x3784.valid){
continue;
}
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3783))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3784.value)))+(x3785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3786=IKsin(j4);
IkReal x3787=IKcos(j4);
IkReal x3788=(gconst107*r10);
IkReal x3789=(gconst107*r00);
IkReal x3790=((1.0)*cj2);
IkReal x3791=(gconst107*r20);
IkReal x3792=((1.0)*sj0);
IkReal x3793=(cj1*sj2);
IkReal x3794=((1.0)*x3787);
IkReal x3795=(gconst106*x3787);
IkReal x3796=(gconst106*x3786);
IkReal x3797=((1.0)*x3786);
evalcond[0]=(((r21*x3796))+(((-1.0)*x3791*x3797))+(((-1.0)*r22*x3794)));
evalcond[1]=((((-1.0)*r12*x3794))+cj0+((r11*x3796))+(((-1.0)*x3788*x3797)));
evalcond[2]=((((-1.0)*x3792))+(((-1.0)*r02*x3794))+(((-1.0)*x3789*x3797))+((r01*x3796)));
evalcond[3]=(((r21*x3795))+((r22*x3786))+(((-1.0)*x3791*x3794))+((sj1*sj2))+(((-1.0)*cj1*x3790)));
evalcond[4]=(((r02*x3786))+(((-1.0)*cj0*sj1*x3790))+(((-1.0)*x3789*x3794))+(((-1.0)*cj0*x3793))+((r01*x3795)));
evalcond[5]=((((-1.0)*sj0*sj1*x3790))+((r12*x3786))+((r11*x3795))+(((-1.0)*x3792*x3793))+(((-1.0)*x3788*x3794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3798=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3798;
j4eval[1]=IKsign(x3798);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3799=((1.0)*cj5);
IkReal x3800=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3799)));
j4eval[0]=x3800;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x3799)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3801=(sj1*sj2);
IkReal x3802=(cj5*r10);
IkReal x3803=(r11*sj5);
IkReal x3804=(cj1*cj2);
IkReal x3805=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3805;
j4eval[1]=((IKabs(((((-1.0)*r12*x3801))+((r12*x3804)))))+(IKabs(((((-1.0)*x3803*x3804))+((x3802*x3804))+((x3801*x3803))+(((-1.0)*x3801*x3802))))));
j4eval[2]=IKsign(x3805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3806=(sj1*sj2);
IkReal x3807=(cj5*r10);
IkReal x3808=(r11*sj5);
IkReal x3809=(cj1*cj2);
CheckValue<IkReal> x3810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811 = IKatan2WithCheck(IkReal((((x3807*x3809))+((x3806*x3808))+(((-1.0)*x3808*x3809))+(((-1.0)*x3806*x3807)))),IkReal(((((-1.0)*r12*x3806))+((r12*x3809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3810.value)))+(x3811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKcos(j4);
IkReal x3813=IKsin(j4);
IkReal x3814=(cj5*r00);
IkReal x3815=(cj5*r10);
IkReal x3816=(r21*sj5);
IkReal x3817=((1.0)*cj2);
IkReal x3818=(cj5*r20);
IkReal x3819=((1.0)*x3812);
IkReal x3820=((1.0)*x3813);
IkReal x3821=(sj5*x3813);
IkReal x3822=(sj5*x3812);
evalcond[0]=(((r12*x3813))+(((-1.0)*x3815*x3819))+((r11*x3822)));
evalcond[1]=((((-1.0)*r22*x3819))+((x3813*x3816))+(((-1.0)*x3818*x3820)));
evalcond[2]=((((-1.0)*r02*x3819))+(((-1.0)*x3814*x3820))+((r01*x3821)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3819))+(((-1.0)*x3815*x3820))+((r11*x3821)));
evalcond[4]=((((-1.0)*cj1*x3817))+((sj1*sj2))+((r22*x3813))+(((-1.0)*x3818*x3819))+((x3812*x3816)));
evalcond[5]=((((-1.0)*sj1*x3817))+(((-1.0)*x3814*x3819))+(((-1.0)*cj1*sj2))+((r02*x3813))+((r01*x3822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3823=((1.0)*cj5);
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3823))+(((-1.0)*r00*sj5)))),-1);
if(!x3824.valid){
continue;
}
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3824.value)))+(x3825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3826=IKcos(j4);
IkReal x3827=IKsin(j4);
IkReal x3828=(cj5*r00);
IkReal x3829=(cj5*r10);
IkReal x3830=(r21*sj5);
IkReal x3831=((1.0)*cj2);
IkReal x3832=(cj5*r20);
IkReal x3833=((1.0)*x3826);
IkReal x3834=((1.0)*x3827);
IkReal x3835=(sj5*x3827);
IkReal x3836=(sj5*x3826);
evalcond[0]=(((r12*x3827))+(((-1.0)*x3829*x3833))+((r11*x3836)));
evalcond[1]=((((-1.0)*x3832*x3834))+((x3827*x3830))+(((-1.0)*r22*x3833)));
evalcond[2]=((((-1.0)*x3828*x3834))+((r01*x3835))+(((-1.0)*r02*x3833)));
evalcond[3]=((1.0)+(((-1.0)*x3829*x3834))+(((-1.0)*r12*x3833))+((r11*x3835)));
evalcond[4]=((((-1.0)*x3832*x3833))+((sj1*sj2))+((x3826*x3830))+((r22*x3827))+(((-1.0)*cj1*x3831)));
evalcond[5]=((((-1.0)*x3828*x3833))+((r01*x3836))+(((-1.0)*cj1*sj2))+((r02*x3827))+(((-1.0)*sj1*x3831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3837=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3837.valid){
continue;
}
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3837.value)))+(x3838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3839=IKcos(j4);
IkReal x3840=IKsin(j4);
IkReal x3841=(cj5*r00);
IkReal x3842=(cj5*r10);
IkReal x3843=(r21*sj5);
IkReal x3844=((1.0)*cj2);
IkReal x3845=(cj5*r20);
IkReal x3846=((1.0)*x3839);
IkReal x3847=((1.0)*x3840);
IkReal x3848=(sj5*x3840);
IkReal x3849=(sj5*x3839);
evalcond[0]=(((r12*x3840))+(((-1.0)*x3842*x3846))+((r11*x3849)));
evalcond[1]=((((-1.0)*x3845*x3847))+((x3840*x3843))+(((-1.0)*r22*x3846)));
evalcond[2]=((((-1.0)*r02*x3846))+(((-1.0)*x3841*x3847))+((r01*x3848)));
evalcond[3]=((1.0)+(((-1.0)*x3842*x3847))+(((-1.0)*r12*x3846))+((r11*x3848)));
evalcond[4]=((((-1.0)*x3845*x3846))+((x3839*x3843))+((sj1*sj2))+(((-1.0)*cj1*x3844))+((r22*x3840)));
evalcond[5]=((((-1.0)*sj1*x3844))+(((-1.0)*cj1*sj2))+(((-1.0)*x3841*x3846))+((r01*x3849))+((r02*x3840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3850=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3850;
j4eval[1]=IKsign(x3850);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3851=((1.0)*cj5);
IkReal x3852=((((-1.0)*r21*x3851))+(((-1.0)*r20*sj5)));
j4eval[0]=x3852;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3851))))));
j4eval[2]=IKsign(x3852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3853=cj5*cj5;
IkReal x3854=r11*r11;
IkReal x3855=(r11*sj5);
IkReal x3856=(cj5*r10);
IkReal x3857=((r12*r12)+(((-2.0)*x3855*x3856))+((x3853*(r10*r10)))+(((-1.0)*x3853*x3854))+x3854);
j4eval[0]=x3857;
j4eval[1]=IKsign(x3857);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3856))+x3855))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3858=cj5*cj5;
IkReal x3859=r11*r11;
IkReal x3860=(cj5*r10);
IkReal x3861=(r11*sj5);
CheckValue<IkReal> x3862 = IKatan2WithCheck(IkReal(((((-1.0)*x3860))+x3861)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3862.valid){
continue;
}
CheckValue<IkReal> x3863=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3860*x3861))+(((-1.0)*x3858*x3859))+x3859+((x3858*(r10*r10))))),-1);
if(!x3863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3862.value)+(((1.5707963267949)*(x3863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3864=IKcos(j4);
IkReal x3865=IKsin(j4);
IkReal x3866=(cj5*r00);
IkReal x3867=(cj5*r10);
IkReal x3868=(r21*sj5);
IkReal x3869=(cj5*r20);
IkReal x3870=((1.0)*x3864);
IkReal x3871=((1.0)*x3865);
IkReal x3872=(sj5*x3865);
IkReal x3873=(sj5*x3864);
evalcond[0]=((((-1.0)*x3867*x3870))+((r11*x3873))+((r12*x3865)));
evalcond[1]=(((x3865*x3868))+(((-1.0)*x3869*x3871))+(((-1.0)*r22*x3870)));
evalcond[2]=((((-1.0)*x3866*x3871))+((r01*x3872))+(((-1.0)*r02*x3870)));
evalcond[3]=((-1.0)+(((-1.0)*x3867*x3871))+(((-1.0)*r12*x3870))+((r11*x3872)));
evalcond[4]=(((cj2*sj1))+((r02*x3865))+(((-1.0)*x3866*x3870))+((r01*x3873))+((cj1*sj2)));
evalcond[5]=(((x3864*x3868))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3869*x3870))+((r22*x3865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3874=((1.0)*cj5);
CheckValue<IkReal> x3875 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3875.valid){
continue;
}
CheckValue<IkReal> x3876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3874))+(((-1.0)*r20*sj5)))),-1);
if(!x3876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3875.value)+(((1.5707963267949)*(x3876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3877=IKcos(j4);
IkReal x3878=IKsin(j4);
IkReal x3879=(cj5*r00);
IkReal x3880=(cj5*r10);
IkReal x3881=(r21*sj5);
IkReal x3882=(cj5*r20);
IkReal x3883=((1.0)*x3877);
IkReal x3884=((1.0)*x3878);
IkReal x3885=(sj5*x3878);
IkReal x3886=(sj5*x3877);
evalcond[0]=((((-1.0)*x3880*x3883))+((r11*x3886))+((r12*x3878)));
evalcond[1]=(((x3878*x3881))+(((-1.0)*r22*x3883))+(((-1.0)*x3882*x3884)));
evalcond[2]=((((-1.0)*x3879*x3884))+(((-1.0)*r02*x3883))+((r01*x3885)));
evalcond[3]=((-1.0)+(((-1.0)*x3880*x3884))+((r11*x3885))+(((-1.0)*r12*x3883)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3879*x3883))+((cj1*sj2))+((r01*x3886))+((r02*x3878)));
evalcond[5]=(((x3877*x3881))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3878))+(((-1.0)*x3882*x3883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3887 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3887.valid){
continue;
}
CheckValue<IkReal> x3888=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3887.value)+(((1.5707963267949)*(x3888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3889=IKcos(j4);
IkReal x3890=IKsin(j4);
IkReal x3891=(cj5*r00);
IkReal x3892=(cj5*r10);
IkReal x3893=(r21*sj5);
IkReal x3894=(cj5*r20);
IkReal x3895=((1.0)*x3889);
IkReal x3896=((1.0)*x3890);
IkReal x3897=(sj5*x3890);
IkReal x3898=(sj5*x3889);
evalcond[0]=((((-1.0)*x3892*x3895))+((r11*x3898))+((r12*x3890)));
evalcond[1]=(((x3890*x3893))+(((-1.0)*r22*x3895))+(((-1.0)*x3894*x3896)));
evalcond[2]=(((r01*x3897))+(((-1.0)*x3891*x3896))+(((-1.0)*r02*x3895)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3895))+(((-1.0)*x3892*x3896))+((r11*x3897)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3898))+(((-1.0)*x3891*x3895))+((r02*x3890)));
evalcond[5]=(((x3889*x3893))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3894*x3895))+((r22*x3890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3899=((-1.0)*r00);
IkReal x3901 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3901)==0){
continue;
}
IkReal x3900=pow(x3901,-0.5);
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3899),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3902.value));
IkReal gconst109=(r01*x3900);
IkReal gconst110=(x3899*x3900);
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3903.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3904=((-1.0)*r00);
IkReal x3905=x3900;
CheckValue<IkReal> x3907 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3904),IKFAST_ATAN2_MAGTHRESH);
if(!x3907.valid){
continue;
}
IkReal x3906=((-1.0)*(x3907.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3906;
IkReal gconst108=x3906;
IkReal gconst109=(r01*x3905);
IkReal gconst110=(x3904*x3905);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3908=((1.0)*sj0);
IkReal x3909=((1.0)*gconst109);
CheckValue<IkReal> x3910 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3908))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3909))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3910.valid){
continue;
}
CheckValue<IkReal> x3911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst110*r21))+(((-1.0)*r20*x3909)))),-1);
if(!x3911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3910.value)+(((1.5707963267949)*(x3911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3912=IKsin(j4);
IkReal x3913=IKcos(j4);
IkReal x3914=(gconst109*r21);
IkReal x3915=((1.0)*cj2);
IkReal x3916=((1.0)*sj0);
IkReal x3917=(cj1*sj2);
IkReal x3918=((1.0)*x3913);
IkReal x3919=(gconst109*x3912);
IkReal x3920=(gconst109*x3913);
IkReal x3921=((1.0)*gconst110*x3912);
evalcond[0]=((((-1.0)*r22*x3918))+(((-1.0)*r20*x3921))+((x3912*x3914)));
evalcond[1]=((((-1.0)*r10*x3921))+cj0+((r11*x3919))+(((-1.0)*r12*x3918)));
evalcond[2]=((((-1.0)*x3916))+(((-1.0)*r02*x3918))+((r01*x3919))+(((-1.0)*r00*x3921)));
evalcond[3]=((((-1.0)*gconst110*r20*x3918))+((sj1*sj2))+((x3913*x3914))+(((-1.0)*cj1*x3915))+((r22*x3912)));
evalcond[4]=((((-1.0)*gconst110*r00*x3918))+(((-1.0)*cj0*sj1*x3915))+((r02*x3912))+((r01*x3920))+(((-1.0)*cj0*x3917)));
evalcond[5]=(((r11*x3920))+(((-1.0)*x3916*x3917))+((r12*x3912))+(((-1.0)*gconst110*r10*x3918))+(((-1.0)*sj0*sj1*x3915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3922=((1.0)*gconst110);
CheckValue<IkReal> x3923 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3922))+(((-1.0)*gconst109*r10)))),-1);
if(!x3924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3923.value)+(((1.5707963267949)*(x3924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3925=IKsin(j4);
IkReal x3926=IKcos(j4);
IkReal x3927=(gconst109*r21);
IkReal x3928=((1.0)*cj2);
IkReal x3929=((1.0)*sj0);
IkReal x3930=(cj1*sj2);
IkReal x3931=((1.0)*x3926);
IkReal x3932=(gconst109*x3925);
IkReal x3933=(gconst109*x3926);
IkReal x3934=((1.0)*gconst110*x3925);
evalcond[0]=((((-1.0)*r22*x3931))+(((-1.0)*r20*x3934))+((x3925*x3927)));
evalcond[1]=(cj0+(((-1.0)*r12*x3931))+(((-1.0)*r10*x3934))+((r11*x3932)));
evalcond[2]=(((r01*x3932))+(((-1.0)*x3929))+(((-1.0)*r00*x3934))+(((-1.0)*r02*x3931)));
evalcond[3]=((((-1.0)*cj1*x3928))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3931))+((r22*x3925))+((x3926*x3927)));
evalcond[4]=(((r01*x3933))+(((-1.0)*cj0*x3930))+((r02*x3925))+(((-1.0)*gconst110*r00*x3931))+(((-1.0)*cj0*sj1*x3928)));
evalcond[5]=((((-1.0)*x3929*x3930))+((r12*x3925))+(((-1.0)*sj0*sj1*x3928))+(((-1.0)*gconst110*r10*x3931))+((r11*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3935=((-1.0)*r01);
IkReal x3937 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3937)==0){
continue;
}
IkReal x3936=pow(x3937,-0.5);
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(x3935),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3938.value))));
IkReal gconst112=(x3935*x3936);
IkReal gconst113=((1.0)*r00*x3936);
CheckValue<IkReal> x3939 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3939.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3939.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3940=((-1.0)*r01);
CheckValue<IkReal> x3943 = IKatan2WithCheck(IkReal(x3940),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3943.valid){
continue;
}
IkReal x3941=((1.0)*(x3943.value));
IkReal x3942=x3936;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3941)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3941)));
IkReal gconst112=(x3940*x3942);
IkReal gconst113=((1.0)*r00*x3942);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3944=((-1.0)*r01);
CheckValue<IkReal> x3947 = IKatan2WithCheck(IkReal(x3944),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3947.valid){
continue;
}
IkReal x3945=((1.0)*(x3947.value));
IkReal x3946=x3936;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3945)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3945)));
IkReal gconst112=(x3944*x3946);
IkReal gconst113=((1.0)*r00*x3946);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3948=((-1.0)*r01);
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal(x3948),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
IkReal x3949=((1.0)*(x3951.value));
IkReal x3950=x3936;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3949)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3949)));
IkReal gconst112=(x3948*x3950);
IkReal gconst113=((1.0)*r00*x3950);
IkReal x3952=r02*r02;
IkReal x3953=(r12*sj0);
IkReal x3954=((1.0)*cj0);
IkReal x3955=x3936;
j4eval[0]=((IKabs(((((-1.0)*x3954*x3955))+((r02*x3953*x3955))+((cj0*x3952*x3955)))))+(IKabs(((((-1.0)*x3953))+(((-1.0)*r02*x3954))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3956=((1.0)*sj0);
IkReal x3957=((1.0)*gconst112);
CheckValue<IkReal> x3958 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3956)))),IkReal(((((-1.0)*cj0*r01*x3957))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3958.valid){
continue;
}
CheckValue<IkReal> x3959=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3957)))),-1);
if(!x3959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3958.value)+(((1.5707963267949)*(x3959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3960=IKsin(j4);
IkReal x3961=IKcos(j4);
IkReal x3962=(gconst113*r20);
IkReal x3963=(gconst112*r21);
IkReal x3964=((1.0)*cj2);
IkReal x3965=(gconst113*r00);
IkReal x3966=(gconst113*r10);
IkReal x3967=((1.0)*sj0);
IkReal x3968=(cj1*sj2);
IkReal x3969=((1.0)*x3961);
IkReal x3970=((1.0)*x3960);
IkReal x3971=(gconst112*x3961);
IkReal x3972=(gconst112*x3960);
evalcond[0]=((((-1.0)*x3962*x3970))+((x3960*x3963))+(((-1.0)*r22*x3969)));
evalcond[1]=(cj0+((r11*x3972))+(((-1.0)*x3966*x3970))+(((-1.0)*r12*x3969)));
evalcond[2]=((((-1.0)*x3967))+(((-1.0)*r02*x3969))+(((-1.0)*x3965*x3970))+((r01*x3972)));
evalcond[3]=((((-1.0)*x3962*x3969))+((r22*x3960))+((sj1*sj2))+((x3961*x3963))+(((-1.0)*cj1*x3964)));
evalcond[4]=((((-1.0)*cj0*x3968))+((r02*x3960))+(((-1.0)*x3965*x3969))+(((-1.0)*cj0*sj1*x3964))+((r01*x3971)));
evalcond[5]=(((r11*x3971))+((r12*x3960))+(((-1.0)*x3966*x3969))+(((-1.0)*x3967*x3968))+(((-1.0)*sj0*sj1*x3964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3973=((1.0)*gconst113);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
CheckValue<IkReal> x3975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x3973)))),-1);
if(!x3975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3974.value)+(((1.5707963267949)*(x3975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3976=IKsin(j4);
IkReal x3977=IKcos(j4);
IkReal x3978=(gconst113*r20);
IkReal x3979=(gconst112*r21);
IkReal x3980=((1.0)*cj2);
IkReal x3981=(gconst113*r00);
IkReal x3982=(gconst113*r10);
IkReal x3983=((1.0)*sj0);
IkReal x3984=(cj1*sj2);
IkReal x3985=((1.0)*x3977);
IkReal x3986=((1.0)*x3976);
IkReal x3987=(gconst112*x3977);
IkReal x3988=(gconst112*x3976);
evalcond[0]=(((x3976*x3979))+(((-1.0)*r22*x3985))+(((-1.0)*x3978*x3986)));
evalcond[1]=((((-1.0)*r12*x3985))+((r11*x3988))+cj0+(((-1.0)*x3982*x3986)));
evalcond[2]=((((-1.0)*x3981*x3986))+((r01*x3988))+(((-1.0)*x3983))+(((-1.0)*r02*x3985)));
evalcond[3]=(((x3977*x3979))+((sj1*sj2))+((r22*x3976))+(((-1.0)*x3978*x3985))+(((-1.0)*cj1*x3980)));
evalcond[4]=((((-1.0)*cj0*sj1*x3980))+((r02*x3976))+(((-1.0)*x3981*x3985))+((r01*x3987))+(((-1.0)*cj0*x3984)));
evalcond[5]=(((r11*x3987))+(((-1.0)*x3982*x3985))+((r12*x3976))+(((-1.0)*x3983*x3984))+(((-1.0)*sj0*sj1*x3980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3989=((1.0)*gconst113);
CheckValue<IkReal> x3990 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x3989)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3990.valid){
continue;
}
CheckValue<IkReal> x3991=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x3989)))),-1);
if(!x3991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3990.value)+(((1.5707963267949)*(x3991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3992=IKsin(j4);
IkReal x3993=IKcos(j4);
IkReal x3994=(gconst113*r20);
IkReal x3995=(gconst112*r21);
IkReal x3996=((1.0)*cj2);
IkReal x3997=(gconst113*r00);
IkReal x3998=(gconst113*r10);
IkReal x3999=((1.0)*sj0);
IkReal x4000=(cj1*sj2);
IkReal x4001=((1.0)*x3993);
IkReal x4002=((1.0)*x3992);
IkReal x4003=(gconst112*x3993);
IkReal x4004=(gconst112*x3992);
evalcond[0]=((((-1.0)*r22*x4001))+(((-1.0)*x3994*x4002))+((x3992*x3995)));
evalcond[1]=((((-1.0)*x3998*x4002))+cj0+(((-1.0)*r12*x4001))+((r11*x4004)));
evalcond[2]=((((-1.0)*r02*x4001))+(((-1.0)*x3999))+((r01*x4004))+(((-1.0)*x3997*x4002)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3994*x4001))+((r22*x3992))+((x3993*x3995))+(((-1.0)*cj1*x3996)));
evalcond[4]=((((-1.0)*cj0*x4000))+((r01*x4003))+(((-1.0)*cj0*sj1*x3996))+((r02*x3992))+(((-1.0)*x3997*x4001)));
evalcond[5]=((((-1.0)*x3998*x4001))+(((-1.0)*x3999*x4000))+((r12*x3992))+(((-1.0)*sj0*sj1*x3996))+((r11*x4003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4005=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4005;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4006=((1.0)*cj5);
IkReal x4007=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4006)));
j4eval[0]=x4007;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4006))))));
j4eval[2]=IKsign(x4007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4008=cj5*cj5;
IkReal x4009=r01*r01;
IkReal x4010=(cj5*r00);
IkReal x4011=(r01*sj5);
IkReal x4012=((((-2.0)*x4010*x4011))+(((-1.0)*x4008*x4009))+((x4008*(r00*r00)))+x4009+(r02*r02));
j4eval[0]=x4012;
j4eval[1]=IKsign(x4012);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4010))+x4011))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4013=cj5*cj5;
IkReal x4014=r01*r01;
IkReal x4015=(r01*sj5);
IkReal x4016=(cj5*r00);
CheckValue<IkReal> x4017 = IKatan2WithCheck(IkReal(((((-1.0)*x4016))+x4015)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4017.valid){
continue;
}
CheckValue<IkReal> x4018=IKPowWithIntegerCheck(IKsign((x4014+((x4013*(r00*r00)))+(((-1.0)*x4013*x4014))+(r02*r02)+(((-2.0)*x4015*x4016)))),-1);
if(!x4018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4017.value)+(((1.5707963267949)*(x4018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4019=IKcos(j4);
IkReal x4020=IKsin(j4);
IkReal x4021=(cj5*r00);
IkReal x4022=(cj5*r10);
IkReal x4023=(r21*sj5);
IkReal x4024=((1.0)*cj2);
IkReal x4025=(cj5*r20);
IkReal x4026=((1.0)*x4019);
IkReal x4027=((1.0)*x4020);
IkReal x4028=(sj5*x4020);
IkReal x4029=(sj5*x4019);
evalcond[0]=(((r01*x4029))+(((-1.0)*x4021*x4026))+((r02*x4020)));
evalcond[1]=((((-1.0)*r22*x4026))+((x4020*x4023))+(((-1.0)*x4025*x4027)));
evalcond[2]=((((-1.0)*r12*x4026))+(((-1.0)*x4022*x4027))+((r11*x4028)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4026))+((r01*x4028))+(((-1.0)*x4021*x4027)));
evalcond[4]=((((-1.0)*x4025*x4026))+((x4019*x4023))+((sj1*sj2))+(((-1.0)*cj1*x4024))+((r22*x4020)));
evalcond[5]=((((-1.0)*x4022*x4026))+(((-1.0)*cj1*sj2))+((r12*x4020))+(((-1.0)*sj1*x4024))+((r11*x4029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4030=((1.0)*cj5);
CheckValue<IkReal> x4031 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4031.valid){
continue;
}
CheckValue<IkReal> x4032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4030)))),-1);
if(!x4032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4031.value)+(((1.5707963267949)*(x4032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4033=IKcos(j4);
IkReal x4034=IKsin(j4);
IkReal x4035=(cj5*r00);
IkReal x4036=(cj5*r10);
IkReal x4037=(r21*sj5);
IkReal x4038=((1.0)*cj2);
IkReal x4039=(cj5*r20);
IkReal x4040=((1.0)*x4033);
IkReal x4041=((1.0)*x4034);
IkReal x4042=(sj5*x4034);
IkReal x4043=(sj5*x4033);
evalcond[0]=((((-1.0)*x4035*x4040))+((r02*x4034))+((r01*x4043)));
evalcond[1]=((((-1.0)*x4039*x4041))+((x4034*x4037))+(((-1.0)*r22*x4040)));
evalcond[2]=((((-1.0)*x4036*x4041))+(((-1.0)*r12*x4040))+((r11*x4042)));
evalcond[3]=((-1.0)+(((-1.0)*x4035*x4041))+(((-1.0)*r02*x4040))+((r01*x4042)));
evalcond[4]=((((-1.0)*x4039*x4040))+(((-1.0)*cj1*x4038))+((sj1*sj2))+((x4033*x4037))+((r22*x4034)));
evalcond[5]=((((-1.0)*x4036*x4040))+(((-1.0)*cj1*sj2))+((r11*x4043))+((r12*x4034))+(((-1.0)*sj1*x4038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4044=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4044.valid){
continue;
}
CheckValue<IkReal> x4045 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4044.value)))+(x4045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4046=IKcos(j4);
IkReal x4047=IKsin(j4);
IkReal x4048=(cj5*r00);
IkReal x4049=(cj5*r10);
IkReal x4050=(r21*sj5);
IkReal x4051=((1.0)*cj2);
IkReal x4052=(cj5*r20);
IkReal x4053=((1.0)*x4046);
IkReal x4054=((1.0)*x4047);
IkReal x4055=(sj5*x4047);
IkReal x4056=(sj5*x4046);
evalcond[0]=(((r02*x4047))+((r01*x4056))+(((-1.0)*x4048*x4053)));
evalcond[1]=((((-1.0)*x4052*x4054))+((x4047*x4050))+(((-1.0)*r22*x4053)));
evalcond[2]=((((-1.0)*r12*x4053))+((r11*x4055))+(((-1.0)*x4049*x4054)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4053))+((r01*x4055))+(((-1.0)*x4048*x4054)));
evalcond[4]=(((r22*x4047))+(((-1.0)*x4052*x4053))+((x4046*x4050))+((sj1*sj2))+(((-1.0)*cj1*x4051)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4056))+((r12*x4047))+(((-1.0)*x4049*x4053))+(((-1.0)*sj1*x4051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4057=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4057;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4058=((1.0)*cj5);
IkReal x4059=((((-1.0)*r21*x4058))+(((-1.0)*r20*sj5)));
j4eval[0]=x4059;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4058))))));
j4eval[2]=IKsign(x4059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4060=cj5*cj5;
IkReal x4061=r01*r01;
IkReal x4062=(r01*sj5);
IkReal x4063=(cj5*r00);
IkReal x4064=(((x4060*x4061))+(((2.0)*x4062*x4063))+(((-1.0)*(r02*r02)))+(((-1.0)*x4061))+(((-1.0)*x4060*(r00*r00))));
j4eval[0]=x4064;
j4eval[1]=IKsign(x4064);
j4eval[2]=((IKabs(r02))+(IKabs((x4062+(((-1.0)*x4063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4065=cj5*cj5;
IkReal x4066=r01*r01;
IkReal x4067=(r01*sj5);
IkReal x4068=(cj5*r00);
CheckValue<IkReal> x4069 = IKatan2WithCheck(IkReal((x4067+(((-1.0)*x4068)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4069.valid){
continue;
}
CheckValue<IkReal> x4070=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x4067*x4068))+(((-1.0)*x4066))+((x4065*x4066))+(((-1.0)*x4065*(r00*r00))))),-1);
if(!x4070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4069.value)+(((1.5707963267949)*(x4070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4071=IKcos(j4);
IkReal x4072=IKsin(j4);
IkReal x4073=(cj5*r00);
IkReal x4074=(cj5*r10);
IkReal x4075=(r21*sj5);
IkReal x4076=(cj5*r20);
IkReal x4077=((1.0)*x4071);
IkReal x4078=((1.0)*x4072);
IkReal x4079=(sj5*x4072);
IkReal x4080=(sj5*x4071);
evalcond[0]=(((r01*x4080))+((r02*x4072))+(((-1.0)*x4073*x4077)));
evalcond[1]=((((-1.0)*r22*x4077))+((x4072*x4075))+(((-1.0)*x4076*x4078)));
evalcond[2]=((((-1.0)*x4074*x4078))+(((-1.0)*r12*x4077))+((r11*x4079)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4077))+((r01*x4079))+(((-1.0)*x4073*x4078)));
evalcond[4]=(((cj2*sj1))+((r12*x4072))+(((-1.0)*x4074*x4077))+((cj1*sj2))+((r11*x4080)));
evalcond[5]=(((r22*x4072))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4071*x4075))+(((-1.0)*x4076*x4077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4081=((1.0)*cj5);
CheckValue<IkReal> x4082 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4082.valid){
continue;
}
CheckValue<IkReal> x4083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4081))+(((-1.0)*r20*sj5)))),-1);
if(!x4083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4082.value)+(((1.5707963267949)*(x4083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4084=IKcos(j4);
IkReal x4085=IKsin(j4);
IkReal x4086=(cj5*r00);
IkReal x4087=(cj5*r10);
IkReal x4088=(r21*sj5);
IkReal x4089=(cj5*r20);
IkReal x4090=((1.0)*x4084);
IkReal x4091=((1.0)*x4085);
IkReal x4092=(sj5*x4085);
IkReal x4093=(sj5*x4084);
evalcond[0]=(((r01*x4093))+(((-1.0)*x4086*x4090))+((r02*x4085)));
evalcond[1]=((((-1.0)*x4089*x4091))+((x4085*x4088))+(((-1.0)*r22*x4090)));
evalcond[2]=((((-1.0)*r12*x4090))+((r11*x4092))+(((-1.0)*x4087*x4091)));
evalcond[3]=((1.0)+((r01*x4092))+(((-1.0)*x4086*x4091))+(((-1.0)*r02*x4090)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4093))+((r12*x4085))+(((-1.0)*x4087*x4090)));
evalcond[5]=((((-1.0)*x4089*x4090))+((x4084*x4088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4094 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4094.valid){
continue;
}
CheckValue<IkReal> x4095=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4094.value)+(((1.5707963267949)*(x4095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4096=IKcos(j4);
IkReal x4097=IKsin(j4);
IkReal x4098=(cj5*r00);
IkReal x4099=(cj5*r10);
IkReal x4100=(r21*sj5);
IkReal x4101=(cj5*r20);
IkReal x4102=((1.0)*x4096);
IkReal x4103=((1.0)*x4097);
IkReal x4104=(sj5*x4097);
IkReal x4105=(sj5*x4096);
evalcond[0]=((((-1.0)*x4098*x4102))+((r02*x4097))+((r01*x4105)));
evalcond[1]=((((-1.0)*r22*x4102))+((x4097*x4100))+(((-1.0)*x4101*x4103)));
evalcond[2]=((((-1.0)*r12*x4102))+((r11*x4104))+(((-1.0)*x4099*x4103)));
evalcond[3]=((1.0)+(((-1.0)*x4098*x4103))+((r01*x4104))+(((-1.0)*r02*x4102)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4097))+((r11*x4105))+(((-1.0)*x4099*x4102)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4097))+(((-1.0)*x4101*x4102))+((x4096*x4100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4106=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4106);
rxp1_1=(px*r21);
rxp1_2=(r11*x4106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4107=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4107);
rxp1_1=(px*r21);
rxp1_2=(r11*x4107);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4108=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4108);
rxp1_1=(px*r21);
rxp1_2=(r11*x4108);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4111=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4111.valid){
continue;
}
IkReal x4109=x4111.value;
IkReal x4110=(sj0*x4109);
cj4array[0]=(((cj1*sj2*x4110))+((cj2*sj1*x4110)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4112=IKsin(j4);
IkReal x4113=IKcos(j4);
IkReal x4114=(r21*sj5);
IkReal x4115=((1.0)*cj5*r20);
evalcond[0]=(r02*x4112);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4113)));
evalcond[2]=(((x4112*x4114))+(((-1.0)*x4112*x4115)));
evalcond[3]=(((r11*sj5*x4112))+(((-1.0)*cj5*r10*x4112)));
evalcond[4]=((((-1.0)*x4113*x4115))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4113*x4114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4117=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4117.valid){
continue;
}
IkReal x4116=x4117.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4116))+((cj1*cj2*x4116)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4118=IKsin(j4);
IkReal x4119=IKcos(j4);
IkReal x4120=((1.0)*sj0);
IkReal x4121=((1.0)*cj5);
IkReal x4122=(sj5*x4118);
evalcond[0]=(r02*x4118);
evalcond[1]=((((-1.0)*r02*x4119))+(((-1.0)*x4120)));
evalcond[2]=(((r21*x4122))+(((-1.0)*r20*x4118*x4121)));
evalcond[3]=((((-1.0)*r10*x4118*x4121))+((r11*x4122)));
evalcond[4]=(((r11*sj5*x4119))+(((-1.0)*cj2*sj1*x4120))+(((-1.0)*r10*x4119*x4121))+(((-1.0)*cj1*sj2*x4120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4123=IKPowWithIntegerCheck(r02,-1);
if(!x4123.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4123.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4124=IKsin(j4);
IkReal x4125=IKcos(j4);
IkReal x4126=((1.0)*cj1);
IkReal x4127=(r21*sj5);
IkReal x4128=((1.0)*cj5);
IkReal x4129=(r11*sj5);
evalcond[0]=(r02*x4124);
evalcond[1]=(((x4124*x4127))+(((-1.0)*r20*x4124*x4128)));
evalcond[2]=(((x4124*x4129))+(((-1.0)*r10*x4124*x4128)));
evalcond[3]=(((x4125*x4127))+(((-1.0)*cj2*x4126))+((sj1*sj2))+(((-1.0)*r20*x4125*x4128)));
evalcond[4]=(((x4125*x4129))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4125*x4128))+(((-1.0)*sj0*sj2*x4126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4130=((1.0)*sj0);
IkReal x4131=((1.0)*cj0);
CheckValue<IkReal> x4132 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4131))+(((-1.0)*r12*x4130)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4130))+(((-1.0)*r01*sj5*x4131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4132.valid){
continue;
}
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4132.value)+(((1.5707963267949)*(x4133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4134=IKsin(j4);
IkReal x4135=IKcos(j4);
IkReal x4136=(cj5*r00);
IkReal x4137=(cj5*r10);
IkReal x4138=(r21*sj5);
IkReal x4139=((1.0)*cj2);
IkReal x4140=((1.0)*sj0);
IkReal x4141=(cj1*sj2);
IkReal x4142=(cj5*r20);
IkReal x4143=((1.0)*x4135);
IkReal x4144=((1.0)*x4134);
IkReal x4145=(sj5*x4134);
IkReal x4146=(sj5*x4135);
evalcond[0]=((((-1.0)*x4142*x4144))+((x4134*x4138))+(((-1.0)*r22*x4143)));
evalcond[1]=(cj0+((r11*x4145))+(((-1.0)*r12*x4143))+(((-1.0)*x4137*x4144)));
evalcond[2]=(((r01*x4145))+(((-1.0)*r02*x4143))+(((-1.0)*x4140))+(((-1.0)*x4136*x4144)));
evalcond[3]=(((r22*x4134))+((sj1*sj2))+(((-1.0)*x4142*x4143))+((x4135*x4138))+(((-1.0)*cj1*x4139)));
evalcond[4]=(((r01*x4146))+(((-1.0)*cj0*sj1*x4139))+(((-1.0)*cj0*x4141))+(((-1.0)*x4136*x4143))+((r02*x4134)));
evalcond[5]=((((-1.0)*x4140*x4141))+(((-1.0)*sj0*sj1*x4139))+((r11*x4146))+((r12*x4134))+(((-1.0)*x4137*x4143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4147=((1.0)*cj5);
CheckValue<IkReal> x4148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4147)))),-1);
if(!x4148.valid){
continue;
}
CheckValue<IkReal> x4149 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4147))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4148.value)))+(x4149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4150=IKsin(j4);
IkReal x4151=IKcos(j4);
IkReal x4152=(cj5*r00);
IkReal x4153=(cj5*r10);
IkReal x4154=(r21*sj5);
IkReal x4155=((1.0)*cj2);
IkReal x4156=((1.0)*sj0);
IkReal x4157=(cj1*sj2);
IkReal x4158=(cj5*r20);
IkReal x4159=((1.0)*x4151);
IkReal x4160=((1.0)*x4150);
IkReal x4161=(sj5*x4150);
IkReal x4162=(sj5*x4151);
evalcond[0]=(((x4150*x4154))+(((-1.0)*x4158*x4160))+(((-1.0)*r22*x4159)));
evalcond[1]=(cj0+(((-1.0)*x4153*x4160))+((r11*x4161))+(((-1.0)*r12*x4159)));
evalcond[2]=(((r01*x4161))+(((-1.0)*r02*x4159))+(((-1.0)*x4152*x4160))+(((-1.0)*x4156)));
evalcond[3]=(((r22*x4150))+((sj1*sj2))+(((-1.0)*cj1*x4155))+((x4151*x4154))+(((-1.0)*x4158*x4159)));
evalcond[4]=(((r01*x4162))+((r02*x4150))+(((-1.0)*x4152*x4159))+(((-1.0)*cj0*sj1*x4155))+(((-1.0)*cj0*x4157)));
evalcond[5]=((((-1.0)*x4153*x4159))+((r12*x4150))+(((-1.0)*x4156*x4157))+(((-1.0)*sj0*sj1*x4155))+((r11*x4162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4163=((1.0)*cj5);
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
CheckValue<IkReal> x4165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4163)))),-1);
if(!x4165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4164.value)+(((1.5707963267949)*(x4165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4166=IKsin(j4);
IkReal x4167=IKcos(j4);
IkReal x4168=(cj5*r00);
IkReal x4169=(cj5*r10);
IkReal x4170=(r21*sj5);
IkReal x4171=((1.0)*cj2);
IkReal x4172=((1.0)*sj0);
IkReal x4173=(cj1*sj2);
IkReal x4174=(cj5*r20);
IkReal x4175=((1.0)*x4167);
IkReal x4176=((1.0)*x4166);
IkReal x4177=(sj5*x4166);
IkReal x4178=(sj5*x4167);
evalcond[0]=((((-1.0)*x4174*x4176))+(((-1.0)*r22*x4175))+((x4166*x4170)));
evalcond[1]=(((r11*x4177))+cj0+(((-1.0)*x4169*x4176))+(((-1.0)*r12*x4175)));
evalcond[2]=((((-1.0)*x4172))+(((-1.0)*x4168*x4176))+((r01*x4177))+(((-1.0)*r02*x4175)));
evalcond[3]=(((r22*x4166))+(((-1.0)*cj1*x4171))+((sj1*sj2))+(((-1.0)*x4174*x4175))+((x4167*x4170)));
evalcond[4]=((((-1.0)*x4168*x4175))+(((-1.0)*cj0*x4173))+((r02*x4166))+((r01*x4178))+(((-1.0)*cj0*sj1*x4171)));
evalcond[5]=(((r11*x4178))+(((-1.0)*x4172*x4173))+(((-1.0)*x4169*x4175))+(((-1.0)*sj0*sj1*x4171))+((r12*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4179=r21*r21;
IkReal x4180=cj5*cj5;
IkReal x4181=(sj1*sj2);
IkReal x4182=(r21*sj5);
IkReal x4183=(cj1*cj2);
IkReal x4184=(cj5*r20);
CheckValue<IkReal> x4185 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4183))+((r22*x4181)))),IkReal(((((-1.0)*x4181*x4184))+((x4183*x4184))+(((-1.0)*x4182*x4183))+((x4181*x4182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4185.valid){
continue;
}
CheckValue<IkReal> x4186=IKPowWithIntegerCheck(IKsign((((x4179*x4180))+(((-1.0)*x4180*(r20*r20)))+(((2.0)*x4182*x4184))+(((-1.0)*x4179))+(((-1.0)*(r22*r22))))),-1);
if(!x4186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4185.value)+(((1.5707963267949)*(x4186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4187=IKsin(j4);
IkReal x4188=IKcos(j4);
IkReal x4189=(r21*sj5);
IkReal x4190=(cj5*r20);
IkReal x4191=((1.0)*x4188);
evalcond[0]=((((-1.0)*x4187*x4190))+((x4187*x4189))+(((-1.0)*r22*x4191)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4187))+((x4188*x4189))+(((-1.0)*x4190*x4191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4192=(cj5*sj4);
IkReal x4193=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4192))+((r01*x4193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4193))+((r10*x4192))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4192))+((r01*x4193))))+IKsqr(((((-1.0)*r11*x4193))+((r10*x4192))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4192))+((r01*x4193))), ((((-1.0)*r11*x4193))+((r10*x4192))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4194=IKcos(j0);
IkReal x4195=IKsin(j0);
IkReal x4196=(cj5*r01);
IkReal x4197=(r11*sj5);
IkReal x4198=((1.0)*sj5);
IkReal x4199=((1.0)*cj5);
IkReal x4200=((0.1157)*sj5);
IkReal x4201=((1.0)*cj2);
IkReal x4202=((0.5723)*sj2);
IkReal x4203=((1.0)*cj4);
IkReal x4204=(r01*sj5);
IkReal x4205=((0.5723)*cj2);
IkReal x4206=((1.0)*cj1*sj2);
IkReal x4207=(cj4*x4199);
IkReal x4208=(sj1*x4194);
IkReal x4209=(cj1*x4195);
IkReal x4210=(cj1*x4194);
IkReal x4211=(sj1*x4195);
evalcond[0]=((((-1.0)*r12*x4203))+x4194+((sj4*x4197))+(((-1.0)*r10*sj4*x4199)));
evalcond[1]=((((-1.0)*r02*x4203))+(((-1.0)*r00*sj4*x4199))+(((-1.0)*x4195))+((sj4*x4204)));
evalcond[2]=((((-1.0)*r00*x4198))+((sj2*x4208))+(((-1.0)*x4196))+(((-1.0)*x4201*x4210)));
evalcond[3]=((((-1.0)*r11*x4199))+(((-1.0)*x4201*x4209))+((sj2*x4211))+(((-1.0)*r10*x4198)));
evalcond[4]=(((cj4*x4204))+(((-1.0)*x4201*x4208))+(((-1.0)*r00*x4207))+(((-1.0)*x4194*x4206))+((r02*sj4)));
evalcond[5]=((((-1.0)*r10*x4207))+(((-1.0)*x4195*x4206))+((r12*sj4))+(((-1.0)*x4201*x4211))+((cj4*x4197)));
evalcond[6]=((((-0.163941)*x4195))+((x4205*x4210))+(((-1.0)*r00*x4200))+(((0.612)*x4210))+(((-1.0)*px))+(((-0.1157)*x4196))+(((-1.0)*x4202*x4208)));
evalcond[7]=((((-1.0)*r10*x4200))+(((-1.0)*x4202*x4211))+(((0.163941)*x4194))+((x4205*x4209))+(((-1.0)*py))+(((0.612)*x4209))+(((-0.1157)*cj5*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4212 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4213.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4212.value)+(((1.5707963267949)*(x4213.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4214=IKcos(j0);
IkReal x4215=IKsin(j0);
IkReal x4216=(cj5*r01);
IkReal x4217=(sj1*sj2);
IkReal x4218=(cj5*r11);
IkReal x4219=(r10*sj5);
IkReal x4220=(r00*sj5);
IkReal x4221=(cj1*cj2);
IkReal x4222=((0.5723)*x4215);
IkReal x4223=(cj1*x4215);
IkReal x4224=((0.5723)*x4214);
evalcond[0]=((((-1.0)*x4214*x4221))+(((-1.0)*x4220))+((x4214*x4217))+(((-1.0)*x4216)));
evalcond[1]=((((-1.0)*x4215*x4221))+((x4215*x4217))+(((-1.0)*x4218))+(((-1.0)*x4219)));
evalcond[2]=((((-0.1157)*x4220))+(((0.612)*cj1*x4214))+(((-0.1157)*x4216))+(((-1.0)*px))+(((-1.0)*x4217*x4224))+((x4221*x4224))+(((-0.163941)*x4215)));
evalcond[3]=((((0.163941)*x4214))+(((0.612)*x4223))+(((-0.1157)*x4218))+(((-0.1157)*x4219))+(((-1.0)*py))+(((-1.0)*x4217*x4222))+((x4221*x4222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4225=((1.0)*cj5);
IkReal x4226=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4225)));
j4eval[0]=x4226;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4225)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4227=((1.0)*cj5);
IkReal x4228=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4227)));
j4eval[0]=x4228;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4227))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4229=((1.0)*sj0);
IkReal x4230=((1.0)*cj0);
IkReal x4231=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4231;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4229))+(((-1.0)*r01*sj5*x4230)))))+(IKabs(((((-1.0)*r12*x4229))+(((-1.0)*r02*x4230))))));
j4eval[2]=IKsign(x4231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4232=((-1.0)*r20);
IkReal x4234 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4234)==0){
continue;
}
IkReal x4233=pow(x4234,-0.5);
CheckValue<IkReal> x4235 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4232),IKFAST_ATAN2_MAGTHRESH);
if(!x4235.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4235.value));
IkReal gconst97=(r21*x4233);
IkReal gconst98=(x4232*x4233);
CheckValue<IkReal> x4236 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4236.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4236.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4237=((-1.0)*r20);
IkReal x4238=x4233;
CheckValue<IkReal> x4240 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4237),IKFAST_ATAN2_MAGTHRESH);
if(!x4240.valid){
continue;
}
IkReal x4239=((-1.0)*(x4240.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4239;
IkReal gconst96=x4239;
IkReal gconst97=(r21*x4238);
IkReal gconst98=(x4237*x4238);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4241=((-1.0)*r20);
IkReal x4242=x4233;
CheckValue<IkReal> x4244 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4241),IKFAST_ATAN2_MAGTHRESH);
if(!x4244.valid){
continue;
}
IkReal x4243=((-1.0)*(x4244.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4243;
IkReal gconst96=x4243;
IkReal gconst97=(r21*x4242);
IkReal gconst98=(x4241*x4242);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4245=((-1.0)*r20);
IkReal x4246=x4233;
CheckValue<IkReal> x4248 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4245),IKFAST_ATAN2_MAGTHRESH);
if(!x4248.valid){
continue;
}
IkReal x4247=((-1.0)*(x4248.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4247;
IkReal gconst96=x4247;
IkReal gconst97=(r21*x4246);
IkReal gconst98=(x4245*x4246);
IkReal x4249=((1.0)*(r22*r22));
CheckValue<IkReal> x4253=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4249))),-1);
if(!x4253.valid){
continue;
}
IkReal x4250=x4253.value;
IkReal x4251=((1.0)*x4250);
IkReal x4252=((((-1.0)*x4251*(r20*r20*r20*r20)))+(((-1.0)*x4249))+(((-1.0)*x4251*(r21*r21*r21*r21)))+(((-2.0)*x4250*(r20*r20)*(r21*r21))));
j4eval[0]=x4252;
j4eval[1]=IKsign(x4252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4254=(cj1*cj2);
IkReal x4255=(gconst98*r20);
IkReal x4256=(sj1*sj2);
IkReal x4257=(gconst97*r21);
CheckValue<IkReal> x4258=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4257*x4257)))+(((-1.0)*(r22*r22)))+(((2.0)*x4255*x4257))+(((-1.0)*(x4255*x4255))))),-1);
if(!x4258.valid){
continue;
}
CheckValue<IkReal> x4259 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4254))+((r22*x4256)))),IkReal(((((-1.0)*x4255*x4256))+((x4256*x4257))+((x4254*x4255))+(((-1.0)*x4254*x4257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4258.value)))+(x4259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4260=IKsin(j4);
IkReal x4261=IKcos(j4);
IkReal x4262=(gconst98*r10);
IkReal x4263=(gconst97*r21);
IkReal x4264=(gconst98*r20);
IkReal x4265=((1.0)*cj2);
IkReal x4266=((1.0)*sj0);
IkReal x4267=(gconst98*r00);
IkReal x4268=(cj1*sj2);
IkReal x4269=((1.0)*x4261);
IkReal x4270=((1.0)*x4260);
IkReal x4271=(gconst97*x4260);
IkReal x4272=(gconst97*x4261);
evalcond[0]=((((-1.0)*x4264*x4270))+(((-1.0)*r22*x4269))+((x4260*x4263)));
evalcond[1]=((((-1.0)*r12*x4269))+cj0+((r11*x4271))+(((-1.0)*x4262*x4270)));
evalcond[2]=((((-1.0)*r02*x4269))+(((-1.0)*x4267*x4270))+(((-1.0)*x4266))+((r01*x4271)));
evalcond[3]=((((-1.0)*x4264*x4269))+((sj1*sj2))+((x4261*x4263))+(((-1.0)*cj1*x4265))+((r22*x4260)));
evalcond[4]=(((r02*x4260))+(((-1.0)*cj0*x4268))+(((-1.0)*cj0*sj1*x4265))+(((-1.0)*x4267*x4269))+((r01*x4272)));
evalcond[5]=(((r11*x4272))+((r12*x4260))+(((-1.0)*sj0*sj1*x4265))+(((-1.0)*x4262*x4269))+(((-1.0)*x4266*x4268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4273=((1.0)*gconst98);
CheckValue<IkReal> x4274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4273))+(((-1.0)*gconst97*r10)))),-1);
if(!x4274.valid){
continue;
}
CheckValue<IkReal> x4275 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4274.value)))+(x4275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4276=IKsin(j4);
IkReal x4277=IKcos(j4);
IkReal x4278=(gconst98*r10);
IkReal x4279=(gconst97*r21);
IkReal x4280=(gconst98*r20);
IkReal x4281=((1.0)*cj2);
IkReal x4282=((1.0)*sj0);
IkReal x4283=(gconst98*r00);
IkReal x4284=(cj1*sj2);
IkReal x4285=((1.0)*x4277);
IkReal x4286=((1.0)*x4276);
IkReal x4287=(gconst97*x4276);
IkReal x4288=(gconst97*x4277);
evalcond[0]=((((-1.0)*x4280*x4286))+((x4276*x4279))+(((-1.0)*r22*x4285)));
evalcond[1]=(cj0+((r11*x4287))+(((-1.0)*r12*x4285))+(((-1.0)*x4278*x4286)));
evalcond[2]=((((-1.0)*x4282))+(((-1.0)*x4283*x4286))+(((-1.0)*r02*x4285))+((r01*x4287)));
evalcond[3]=((((-1.0)*x4280*x4285))+((sj1*sj2))+((x4277*x4279))+(((-1.0)*cj1*x4281))+((r22*x4276)));
evalcond[4]=((((-1.0)*x4283*x4285))+((r02*x4276))+(((-1.0)*cj0*x4284))+((r01*x4288))+(((-1.0)*cj0*sj1*x4281)));
evalcond[5]=((((-1.0)*x4282*x4284))+((r11*x4288))+((r12*x4276))+(((-1.0)*x4278*x4285))+(((-1.0)*sj0*sj1*x4281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4289=((1.0)*gconst98);
CheckValue<IkReal> x4290 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4289))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4290.valid){
continue;
}
CheckValue<IkReal> x4291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4289))+(((-1.0)*gconst97*r00)))),-1);
if(!x4291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4290.value)+(((1.5707963267949)*(x4291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4292=IKsin(j4);
IkReal x4293=IKcos(j4);
IkReal x4294=(gconst98*r10);
IkReal x4295=(gconst97*r21);
IkReal x4296=(gconst98*r20);
IkReal x4297=((1.0)*cj2);
IkReal x4298=((1.0)*sj0);
IkReal x4299=(gconst98*r00);
IkReal x4300=(cj1*sj2);
IkReal x4301=((1.0)*x4293);
IkReal x4302=((1.0)*x4292);
IkReal x4303=(gconst97*x4292);
IkReal x4304=(gconst97*x4293);
evalcond[0]=((((-1.0)*x4296*x4302))+((x4292*x4295))+(((-1.0)*r22*x4301)));
evalcond[1]=((((-1.0)*r12*x4301))+((r11*x4303))+cj0+(((-1.0)*x4294*x4302)));
evalcond[2]=((((-1.0)*x4298))+((r01*x4303))+(((-1.0)*x4299*x4302))+(((-1.0)*r02*x4301)));
evalcond[3]=(((x4293*x4295))+(((-1.0)*x4296*x4301))+((sj1*sj2))+((r22*x4292))+(((-1.0)*cj1*x4297)));
evalcond[4]=((((-1.0)*cj0*sj1*x4297))+(((-1.0)*cj0*x4300))+((r01*x4304))+(((-1.0)*x4299*x4301))+((r02*x4292)));
evalcond[5]=(((r11*x4304))+(((-1.0)*x4294*x4301))+((r12*x4292))+(((-1.0)*x4298*x4300))+(((-1.0)*sj0*sj1*x4297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4305=((-1.0)*r21);
IkReal x4307 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4307)==0){
continue;
}
IkReal x4306=pow(x4307,-0.5);
CheckValue<IkReal> x4308 = IKatan2WithCheck(IkReal(x4305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4308.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4308.value))));
IkReal gconst100=(x4305*x4306);
IkReal gconst101=((1.0)*r20*x4306);
CheckValue<IkReal> x4309 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4309.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4309.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4310=((-1.0)*r21);
CheckValue<IkReal> x4313 = IKatan2WithCheck(IkReal(x4310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4313.valid){
continue;
}
IkReal x4311=((1.0)*(x4313.value));
IkReal x4312=x4306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4311)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4311)));
IkReal gconst100=(x4310*x4312);
IkReal gconst101=((1.0)*r20*x4312);
IkReal x4314=r22*r22;
IkReal x4315=((1.0)*x4314);
CheckValue<IkReal> x4319=IKPowWithIntegerCheck(((-1.0)+x4314),-1);
if(!x4319.valid){
continue;
}
IkReal x4316=x4319.value;
if((((1.0)+(((-1.0)*x4315)))) < -0.00001)
continue;
IkReal x4317=IKsqrt(((1.0)+(((-1.0)*x4315))));
IkReal x4318=(cj0*x4316*x4317);
j4eval[0]=((IKabs(((((-1.0)*x4315*x4318))+x4318)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4320=((-1.0)*r21);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(x4320),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
IkReal x4321=((1.0)*(x4323.value));
IkReal x4322=x4306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4321)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4321)));
IkReal gconst100=(x4320*x4322);
IkReal gconst101=((1.0)*r20*x4322);
IkReal x4324=r22*r22;
IkReal x4325=((1.0)*x4324);
CheckValue<IkReal> x4329=IKPowWithIntegerCheck(((-1.0)+x4324),-1);
if(!x4329.valid){
continue;
}
IkReal x4326=x4329.value;
if((((1.0)+(((-1.0)*x4325)))) < -0.00001)
continue;
IkReal x4327=IKsqrt(((1.0)+(((-1.0)*x4325))));
IkReal x4328=(sj0*x4326*x4327);
j4eval[0]=((IKabs(((((-1.0)*x4325*x4328))+x4328)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4330=((-1.0)*r21);
CheckValue<IkReal> x4333 = IKatan2WithCheck(IkReal(x4330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4333.valid){
continue;
}
IkReal x4331=((1.0)*(x4333.value));
IkReal x4332=x4306;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4331)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4331)));
IkReal gconst100=(x4330*x4332);
IkReal gconst101=((1.0)*r20*x4332);
IkReal x4334=r22*r22;
IkReal x4335=(r12*sj0);
IkReal x4336=(cj0*r02);
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(((-1.0)+x4334),-1);
if(!x4340.valid){
continue;
}
IkReal x4337=x4340.value;
if((((1.0)+(((-1.0)*x4334)))) < -0.00001)
continue;
IkReal x4338=IKsqrt(((1.0)+(((-1.0)*x4334))));
IkReal x4339=(r22*x4337*x4338);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4335))+(((-1.0)*x4336)))))+(IKabs((((x4335*x4339))+((x4336*x4339))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4341=((1.0)*sj0);
IkReal x4342=((1.0)*gconst100);
CheckValue<IkReal> x4343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4342))+(((-1.0)*gconst101*r21)))),-1);
if(!x4343.valid){
continue;
}
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4341))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4342))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4343.value)))+(x4344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4345=IKsin(j4);
IkReal x4346=IKcos(j4);
IkReal x4347=(gconst101*r20);
IkReal x4348=(gconst101*r10);
IkReal x4349=((1.0)*cj2);
IkReal x4350=(gconst101*r00);
IkReal x4351=((1.0)*sj0);
IkReal x4352=(cj1*sj2);
IkReal x4353=((1.0)*x4346);
IkReal x4354=((1.0)*x4345);
IkReal x4355=(gconst100*x4345);
IkReal x4356=(gconst100*x4346);
evalcond[0]=(((r21*x4355))+(((-1.0)*r22*x4353))+(((-1.0)*x4347*x4354)));
evalcond[1]=(cj0+(((-1.0)*r12*x4353))+((r11*x4355))+(((-1.0)*x4348*x4354)));
evalcond[2]=((((-1.0)*r02*x4353))+(((-1.0)*x4351))+(((-1.0)*x4350*x4354))+((r01*x4355)));
evalcond[3]=(((sj1*sj2))+((r22*x4345))+((r21*x4356))+(((-1.0)*cj1*x4349))+(((-1.0)*x4347*x4353)));
evalcond[4]=(((r02*x4345))+(((-1.0)*x4350*x4353))+(((-1.0)*cj0*sj1*x4349))+(((-1.0)*cj0*x4352))+((r01*x4356)));
evalcond[5]=((((-1.0)*sj0*sj1*x4349))+(((-1.0)*x4351*x4352))+((r12*x4345))+((r11*x4356))+(((-1.0)*x4348*x4353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4357=((1.0)*gconst101);
CheckValue<IkReal> x4358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4357)))),-1);
if(!x4358.valid){
continue;
}
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4357))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4358.value)))+(x4359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4360=IKsin(j4);
IkReal x4361=IKcos(j4);
IkReal x4362=(gconst101*r20);
IkReal x4363=(gconst101*r10);
IkReal x4364=((1.0)*cj2);
IkReal x4365=(gconst101*r00);
IkReal x4366=((1.0)*sj0);
IkReal x4367=(cj1*sj2);
IkReal x4368=((1.0)*x4361);
IkReal x4369=((1.0)*x4360);
IkReal x4370=(gconst100*x4360);
IkReal x4371=(gconst100*x4361);
evalcond[0]=((((-1.0)*r22*x4368))+(((-1.0)*x4362*x4369))+((r21*x4370)));
evalcond[1]=(cj0+((r11*x4370))+(((-1.0)*r12*x4368))+(((-1.0)*x4363*x4369)));
evalcond[2]=(((r01*x4370))+(((-1.0)*x4366))+(((-1.0)*x4365*x4369))+(((-1.0)*r02*x4368)));
evalcond[3]=((((-1.0)*cj1*x4364))+(((-1.0)*x4362*x4368))+((sj1*sj2))+((r22*x4360))+((r21*x4371)));
evalcond[4]=(((r01*x4371))+(((-1.0)*cj0*x4367))+(((-1.0)*x4365*x4368))+(((-1.0)*cj0*sj1*x4364))+((r02*x4360)));
evalcond[5]=(((r11*x4371))+((r12*x4360))+(((-1.0)*sj0*sj1*x4364))+(((-1.0)*x4366*x4367))+(((-1.0)*x4363*x4368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4372=((1.0)*gconst101);
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4372)))),-1);
if(!x4373.valid){
continue;
}
CheckValue<IkReal> x4374 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4373.value)))+(x4374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4375=IKsin(j4);
IkReal x4376=IKcos(j4);
IkReal x4377=(gconst101*r20);
IkReal x4378=(gconst101*r10);
IkReal x4379=((1.0)*cj2);
IkReal x4380=(gconst101*r00);
IkReal x4381=((1.0)*sj0);
IkReal x4382=(cj1*sj2);
IkReal x4383=((1.0)*x4376);
IkReal x4384=((1.0)*x4375);
IkReal x4385=(gconst100*x4375);
IkReal x4386=(gconst100*x4376);
evalcond[0]=((((-1.0)*r22*x4383))+((r21*x4385))+(((-1.0)*x4377*x4384)));
evalcond[1]=((((-1.0)*r12*x4383))+cj0+(((-1.0)*x4378*x4384))+((r11*x4385)));
evalcond[2]=((((-1.0)*r02*x4383))+(((-1.0)*x4380*x4384))+(((-1.0)*x4381))+((r01*x4385)));
evalcond[3]=(((r22*x4375))+((sj1*sj2))+((r21*x4386))+(((-1.0)*x4377*x4383))+(((-1.0)*cj1*x4379)));
evalcond[4]=((((-1.0)*cj0*sj1*x4379))+((r02*x4375))+(((-1.0)*x4380*x4383))+(((-1.0)*cj0*x4382))+((r01*x4386)));
evalcond[5]=((((-1.0)*x4381*x4382))+((r12*x4375))+(((-1.0)*x4378*x4383))+(((-1.0)*sj0*sj1*x4379))+((r11*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4387=((-1.0)*r10);
IkReal x4389 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4389)==0){
continue;
}
IkReal x4388=pow(x4389,-0.5);
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4387),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4390.value));
IkReal gconst103=(r11*x4388);
IkReal gconst104=(x4387*x4388);
CheckValue<IkReal> x4391 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4391.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4391.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4392=((-1.0)*r10);
IkReal x4393=x4388;
CheckValue<IkReal> x4395 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4392),IKFAST_ATAN2_MAGTHRESH);
if(!x4395.valid){
continue;
}
IkReal x4394=((-1.0)*(x4395.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4394;
IkReal gconst102=x4394;
IkReal gconst103=(r11*x4393);
IkReal gconst104=(x4392*x4393);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4396=((1.0)*sj0);
IkReal x4397=((1.0)*gconst103);
CheckValue<IkReal> x4398 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4396))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4396))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x4397))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4397)))),-1);
if(!x4399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4398.value)+(((1.5707963267949)*(x4399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4400=IKsin(j4);
IkReal x4401=IKcos(j4);
IkReal x4402=(gconst103*r11);
IkReal x4403=((1.0)*cj2);
IkReal x4404=((1.0)*sj0);
IkReal x4405=(cj1*sj2);
IkReal x4406=((1.0)*x4401);
IkReal x4407=(gconst103*x4401);
IkReal x4408=(gconst103*x4400);
IkReal x4409=((1.0)*gconst104*x4400);
evalcond[0]=(((r21*x4408))+(((-1.0)*r20*x4409))+(((-1.0)*r22*x4406)));
evalcond[1]=(cj0+((x4400*x4402))+(((-1.0)*r10*x4409))+(((-1.0)*r12*x4406)));
evalcond[2]=((((-1.0)*r00*x4409))+((r01*x4408))+(((-1.0)*r02*x4406))+(((-1.0)*x4404)));
evalcond[3]=(((r22*x4400))+((r21*x4407))+((sj1*sj2))+(((-1.0)*cj1*x4403))+(((-1.0)*gconst104*r20*x4406)));
evalcond[4]=((((-1.0)*cj0*x4405))+((r01*x4407))+(((-1.0)*gconst104*r00*x4406))+((r02*x4400))+(((-1.0)*cj0*sj1*x4403)));
evalcond[5]=((((-1.0)*gconst104*r10*x4406))+((r12*x4400))+((x4401*x4402))+(((-1.0)*sj0*sj1*x4403))+(((-1.0)*x4404*x4405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4410=((1.0)*gconst104);
CheckValue<IkReal> x4411 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4410))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4411.valid){
continue;
}
CheckValue<IkReal> x4412=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4410)))),-1);
if(!x4412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4411.value)+(((1.5707963267949)*(x4412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4413=IKsin(j4);
IkReal x4414=IKcos(j4);
IkReal x4415=(gconst103*r11);
IkReal x4416=((1.0)*cj2);
IkReal x4417=((1.0)*sj0);
IkReal x4418=(cj1*sj2);
IkReal x4419=((1.0)*x4414);
IkReal x4420=(gconst103*x4414);
IkReal x4421=(gconst103*x4413);
IkReal x4422=((1.0)*gconst104*x4413);
evalcond[0]=((((-1.0)*r22*x4419))+(((-1.0)*r20*x4422))+((r21*x4421)));
evalcond[1]=(cj0+((x4413*x4415))+(((-1.0)*r12*x4419))+(((-1.0)*r10*x4422)));
evalcond[2]=((((-1.0)*r02*x4419))+(((-1.0)*x4417))+((r01*x4421))+(((-1.0)*r00*x4422)));
evalcond[3]=(((r22*x4413))+((sj1*sj2))+((r21*x4420))+(((-1.0)*cj1*x4416))+(((-1.0)*gconst104*r20*x4419)));
evalcond[4]=((((-1.0)*cj0*sj1*x4416))+(((-1.0)*cj0*x4418))+(((-1.0)*gconst104*r00*x4419))+((r01*x4420))+((r02*x4413)));
evalcond[5]=(((x4414*x4415))+((r12*x4413))+(((-1.0)*x4417*x4418))+(((-1.0)*sj0*sj1*x4416))+(((-1.0)*gconst104*r10*x4419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4423=((-1.0)*r11);
IkReal x4425 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4425)==0){
continue;
}
IkReal x4424=pow(x4425,-0.5);
CheckValue<IkReal> x4426 = IKatan2WithCheck(IkReal(x4423),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4426.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4426.value))));
IkReal gconst106=(x4423*x4424);
IkReal gconst107=((1.0)*r10*x4424);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4427.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4428=((-1.0)*r11);
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal(x4428),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
IkReal x4429=((1.0)*(x4431.value));
IkReal x4430=x4424;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4429)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4429)));
IkReal gconst106=(x4428*x4430);
IkReal gconst107=((1.0)*r10*x4430);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4432=((-1.0)*r11);
CheckValue<IkReal> x4435 = IKatan2WithCheck(IkReal(x4432),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4435.valid){
continue;
}
IkReal x4433=((1.0)*(x4435.value));
IkReal x4434=x4424;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4433)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4433)));
IkReal gconst106=(x4432*x4434);
IkReal gconst107=((1.0)*r10*x4434);
IkReal x4436=r12*r12;
IkReal x4437=((1.0)*sj0);
IkReal x4438=(cj0*r02);
IkReal x4439=x4424;
j4eval[0]=((IKabs(((((-1.0)*x4438))+(((-1.0)*r12*x4437)))))+(IKabs((((sj0*x4436*x4439))+(((-1.0)*x4437*x4439))+((r12*x4438*x4439))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4440=((-1.0)*r11);
CheckValue<IkReal> x4443 = IKatan2WithCheck(IkReal(x4440),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4443.valid){
continue;
}
IkReal x4441=((1.0)*(x4443.value));
IkReal x4442=x4424;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4441)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4441)));
IkReal gconst106=(x4440*x4442);
IkReal gconst107=((1.0)*r10*x4442);
IkReal x4444=r12*r12;
IkReal x4445=((1.0)+(((-1.0)*x4444)));
IkReal x4446=(r22*sj1*sj2);
IkReal x4447=(cj1*cj2*r22);
CheckValue<IkReal> x4454=IKPowWithIntegerCheck(x4445,-1);
if(!x4454.valid){
continue;
}
IkReal x4448=x4454.value;
CheckValue<IkReal> x4455=IKPowWithIntegerCheck(((-1.0)+x4444),-1);
if(!x4455.valid){
continue;
}
IkReal x4449=x4455.value;
IkReal x4450=((1.0)*x4448);
if((x4445) < -0.00001)
continue;
IkReal x4451=IKsqrt(x4445);
IkReal x4452=(r12*x4449*x4451);
IkReal x4453=((((-1.0)*x4450*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x4448))+(((-1.0)*(r22*r22)))+(((-1.0)*x4450*(r11*r11)*(r21*r21))));
j4eval[0]=x4453;
j4eval[1]=((IKabs((x4446+(((-1.0)*x4447)))))+(IKabs(((((-1.0)*x4446*x4452))+((x4447*x4452))))));
j4eval[2]=IKsign(x4453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4456=(sj1*sj2);
IkReal x4457=(gconst106*r21);
IkReal x4458=(gconst107*r20);
IkReal x4459=(cj1*cj2);
CheckValue<IkReal> x4460=IKPowWithIntegerCheck(IKsign(((((2.0)*x4457*x4458))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4458*x4458)))+(((-1.0)*(x4457*x4457))))),-1);
if(!x4460.valid){
continue;
}
CheckValue<IkReal> x4461 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4459))+((r22*x4456)))),IkReal(((((-1.0)*x4456*x4458))+(((-1.0)*x4457*x4459))+((x4458*x4459))+((x4456*x4457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4460.value)))+(x4461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4462=IKsin(j4);
IkReal x4463=IKcos(j4);
IkReal x4464=(gconst107*r10);
IkReal x4465=(gconst107*r00);
IkReal x4466=((1.0)*cj2);
IkReal x4467=(gconst107*r20);
IkReal x4468=((1.0)*sj0);
IkReal x4469=(cj1*sj2);
IkReal x4470=((1.0)*x4463);
IkReal x4471=(gconst106*x4463);
IkReal x4472=(gconst106*x4462);
IkReal x4473=((1.0)*x4462);
evalcond[0]=(((r21*x4472))+(((-1.0)*x4467*x4473))+(((-1.0)*r22*x4470)));
evalcond[1]=((((-1.0)*r12*x4470))+cj0+(((-1.0)*x4464*x4473))+((r11*x4472)));
evalcond[2]=((((-1.0)*x4468))+((r01*x4472))+(((-1.0)*r02*x4470))+(((-1.0)*x4465*x4473)));
evalcond[3]=(((r22*x4462))+((r21*x4471))+((sj1*sj2))+(((-1.0)*x4467*x4470))+(((-1.0)*cj1*x4466)));
evalcond[4]=((((-1.0)*cj0*sj1*x4466))+((r01*x4471))+(((-1.0)*cj0*x4469))+((r02*x4462))+(((-1.0)*x4465*x4470)));
evalcond[5]=(((r12*x4462))+(((-1.0)*sj0*sj1*x4466))+(((-1.0)*x4468*x4469))+(((-1.0)*x4464*x4470))+((r11*x4471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4474=((1.0)*sj0);
IkReal x4475=((1.0)*gconst106);
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4474))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4475))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x4474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
CheckValue<IkReal> x4477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4475))+(((-1.0)*gconst107*r21)))),-1);
if(!x4477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4476.value)+(((1.5707963267949)*(x4477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4478=IKsin(j4);
IkReal x4479=IKcos(j4);
IkReal x4480=(gconst107*r10);
IkReal x4481=(gconst107*r00);
IkReal x4482=((1.0)*cj2);
IkReal x4483=(gconst107*r20);
IkReal x4484=((1.0)*sj0);
IkReal x4485=(cj1*sj2);
IkReal x4486=((1.0)*x4479);
IkReal x4487=(gconst106*x4479);
IkReal x4488=(gconst106*x4478);
IkReal x4489=((1.0)*x4478);
evalcond[0]=(((r21*x4488))+(((-1.0)*r22*x4486))+(((-1.0)*x4483*x4489)));
evalcond[1]=(((r11*x4488))+(((-1.0)*r12*x4486))+cj0+(((-1.0)*x4480*x4489)));
evalcond[2]=((((-1.0)*x4481*x4489))+((r01*x4488))+(((-1.0)*r02*x4486))+(((-1.0)*x4484)));
evalcond[3]=((((-1.0)*cj1*x4482))+((r21*x4487))+((sj1*sj2))+((r22*x4478))+(((-1.0)*x4483*x4486)));
evalcond[4]=((((-1.0)*x4481*x4486))+(((-1.0)*cj0*x4485))+(((-1.0)*cj0*sj1*x4482))+((r02*x4478))+((r01*x4487)));
evalcond[5]=(((r11*x4487))+(((-1.0)*x4484*x4485))+(((-1.0)*x4480*x4486))+(((-1.0)*sj0*sj1*x4482))+((r12*x4478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4490=((1.0)*gconst107);
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4490))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4490)))),-1);
if(!x4492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4491.value)+(((1.5707963267949)*(x4492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4493=IKsin(j4);
IkReal x4494=IKcos(j4);
IkReal x4495=(gconst107*r10);
IkReal x4496=(gconst107*r00);
IkReal x4497=((1.0)*cj2);
IkReal x4498=(gconst107*r20);
IkReal x4499=((1.0)*sj0);
IkReal x4500=(cj1*sj2);
IkReal x4501=((1.0)*x4494);
IkReal x4502=(gconst106*x4494);
IkReal x4503=(gconst106*x4493);
IkReal x4504=((1.0)*x4493);
evalcond[0]=(((r21*x4503))+(((-1.0)*x4498*x4504))+(((-1.0)*r22*x4501)));
evalcond[1]=(cj0+((r11*x4503))+(((-1.0)*x4495*x4504))+(((-1.0)*r12*x4501)));
evalcond[2]=((((-1.0)*x4496*x4504))+(((-1.0)*r02*x4501))+((r01*x4503))+(((-1.0)*x4499)));
evalcond[3]=((((-1.0)*cj1*x4497))+((r21*x4502))+((sj1*sj2))+(((-1.0)*x4498*x4501))+((r22*x4493)));
evalcond[4]=((((-1.0)*x4496*x4501))+((r02*x4493))+(((-1.0)*cj0*x4500))+((r01*x4502))+(((-1.0)*cj0*sj1*x4497)));
evalcond[5]=(((r12*x4493))+((r11*x4502))+(((-1.0)*x4495*x4501))+(((-1.0)*sj0*sj1*x4497))+(((-1.0)*x4499*x4500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4505=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4505;
j4eval[1]=IKsign(x4505);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4506=((1.0)*cj5);
IkReal x4507=((((-1.0)*r01*x4506))+(((-1.0)*r00*sj5)));
j4eval[0]=x4507;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4506)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4508=(sj1*sj2);
IkReal x4509=(cj5*r10);
IkReal x4510=(r11*sj5);
IkReal x4511=(cj1*cj2);
IkReal x4512=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4512;
j4eval[1]=((IKabs(((((-1.0)*r12*x4508))+((r12*x4511)))))+(IKabs(((((-1.0)*x4510*x4511))+(((-1.0)*x4508*x4509))+((x4508*x4510))+((x4509*x4511))))));
j4eval[2]=IKsign(x4512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4513=(sj1*sj2);
IkReal x4514=(cj5*r10);
IkReal x4515=(r11*sj5);
IkReal x4516=(cj1*cj2);
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(((((-1.0)*x4513*x4514))+((x4513*x4515))+((x4514*x4516))+(((-1.0)*x4515*x4516)))),IkReal((((r12*x4516))+(((-1.0)*r12*x4513)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
CheckValue<IkReal> x4518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4517.value)+(((1.5707963267949)*(x4518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4519=IKcos(j4);
IkReal x4520=IKsin(j4);
IkReal x4521=(cj5*r00);
IkReal x4522=(cj5*r10);
IkReal x4523=(r21*sj5);
IkReal x4524=((1.0)*cj2);
IkReal x4525=(cj5*r20);
IkReal x4526=((1.0)*x4519);
IkReal x4527=((1.0)*x4520);
IkReal x4528=(sj5*x4520);
IkReal x4529=(sj5*x4519);
evalcond[0]=(((r11*x4529))+((r12*x4520))+(((-1.0)*x4522*x4526)));
evalcond[1]=((((-1.0)*x4525*x4527))+(((-1.0)*r22*x4526))+((x4520*x4523)));
evalcond[2]=(((r01*x4528))+(((-1.0)*x4521*x4527))+(((-1.0)*r02*x4526)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4526))+((r11*x4528))+(((-1.0)*x4522*x4527)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4524))+(((-1.0)*x4525*x4526))+((r22*x4520))+((x4519*x4523)));
evalcond[5]=(((r01*x4529))+(((-1.0)*sj1*x4524))+(((-1.0)*cj1*sj2))+(((-1.0)*x4521*x4526))+((r02*x4520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4530=((1.0)*cj5);
CheckValue<IkReal> x4531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4530))+(((-1.0)*r00*sj5)))),-1);
if(!x4531.valid){
continue;
}
CheckValue<IkReal> x4532 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4531.value)))+(x4532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4533=IKcos(j4);
IkReal x4534=IKsin(j4);
IkReal x4535=(cj5*r00);
IkReal x4536=(cj5*r10);
IkReal x4537=(r21*sj5);
IkReal x4538=((1.0)*cj2);
IkReal x4539=(cj5*r20);
IkReal x4540=((1.0)*x4533);
IkReal x4541=((1.0)*x4534);
IkReal x4542=(sj5*x4534);
IkReal x4543=(sj5*x4533);
evalcond[0]=(((r12*x4534))+(((-1.0)*x4536*x4540))+((r11*x4543)));
evalcond[1]=((((-1.0)*r22*x4540))+(((-1.0)*x4539*x4541))+((x4534*x4537)));
evalcond[2]=((((-1.0)*r02*x4540))+(((-1.0)*x4535*x4541))+((r01*x4542)));
evalcond[3]=((1.0)+(((-1.0)*x4536*x4541))+(((-1.0)*r12*x4540))+((r11*x4542)));
evalcond[4]=((((-1.0)*cj1*x4538))+((sj1*sj2))+((r22*x4534))+((x4533*x4537))+(((-1.0)*x4539*x4540)));
evalcond[5]=((((-1.0)*sj1*x4538))+(((-1.0)*x4535*x4540))+(((-1.0)*cj1*sj2))+((r01*x4543))+((r02*x4534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4544=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4544.valid){
continue;
}
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4544.value)))+(x4545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4546=IKcos(j4);
IkReal x4547=IKsin(j4);
IkReal x4548=(cj5*r00);
IkReal x4549=(cj5*r10);
IkReal x4550=(r21*sj5);
IkReal x4551=((1.0)*cj2);
IkReal x4552=(cj5*r20);
IkReal x4553=((1.0)*x4546);
IkReal x4554=((1.0)*x4547);
IkReal x4555=(sj5*x4547);
IkReal x4556=(sj5*x4546);
evalcond[0]=(((r11*x4556))+(((-1.0)*x4549*x4553))+((r12*x4547)));
evalcond[1]=(((x4547*x4550))+(((-1.0)*x4552*x4554))+(((-1.0)*r22*x4553)));
evalcond[2]=(((r01*x4555))+(((-1.0)*x4548*x4554))+(((-1.0)*r02*x4553)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4553))+((r11*x4555))+(((-1.0)*x4549*x4554)));
evalcond[4]=(((r22*x4547))+((x4546*x4550))+(((-1.0)*cj1*x4551))+(((-1.0)*x4552*x4553))+((sj1*sj2)));
evalcond[5]=(((r01*x4556))+((r02*x4547))+(((-1.0)*cj1*sj2))+(((-1.0)*x4548*x4553))+(((-1.0)*sj1*x4551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4557=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4557;
j4eval[1]=IKsign(x4557);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4558=((1.0)*cj5);
IkReal x4559=((((-1.0)*r21*x4558))+(((-1.0)*r20*sj5)));
j4eval[0]=x4559;
j4eval[1]=((IKabs(((((-1.0)*r00*x4558))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x4559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4560=cj5*cj5;
IkReal x4561=r11*r11;
IkReal x4562=(r11*sj5);
IkReal x4563=(cj5*r10);
IkReal x4564=((r12*r12)+x4561+((x4560*(r10*r10)))+(((-2.0)*x4562*x4563))+(((-1.0)*x4560*x4561)));
j4eval[0]=x4564;
j4eval[1]=IKsign(x4564);
j4eval[2]=((IKabs(r12))+(IKabs((x4562+(((-1.0)*x4563))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4565=cj5*cj5;
IkReal x4566=r11*r11;
IkReal x4567=(cj5*r10);
IkReal x4568=(r11*sj5);
CheckValue<IkReal> x4569 = IKatan2WithCheck(IkReal((x4568+(((-1.0)*x4567)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4569.valid){
continue;
}
CheckValue<IkReal> x4570=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4566+((x4565*(r10*r10)))+(((-1.0)*x4565*x4566))+(((-2.0)*x4567*x4568)))),-1);
if(!x4570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4569.value)+(((1.5707963267949)*(x4570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4571=IKcos(j4);
IkReal x4572=IKsin(j4);
IkReal x4573=(cj5*r00);
IkReal x4574=(cj5*r10);
IkReal x4575=(r21*sj5);
IkReal x4576=(cj5*r20);
IkReal x4577=((1.0)*x4571);
IkReal x4578=((1.0)*x4572);
IkReal x4579=(sj5*x4572);
IkReal x4580=(sj5*x4571);
evalcond[0]=(((r12*x4572))+((r11*x4580))+(((-1.0)*x4574*x4577)));
evalcond[1]=((((-1.0)*x4576*x4578))+(((-1.0)*r22*x4577))+((x4572*x4575)));
evalcond[2]=((((-1.0)*r02*x4577))+((r01*x4579))+(((-1.0)*x4573*x4578)));
evalcond[3]=((-1.0)+((r11*x4579))+(((-1.0)*x4574*x4578))+(((-1.0)*r12*x4577)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4572))+(((-1.0)*x4573*x4577))+((r01*x4580)));
evalcond[5]=((((-1.0)*x4576*x4577))+((r22*x4572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4571*x4575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4581=((1.0)*cj5);
CheckValue<IkReal> x4582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4581))+(((-1.0)*r20*sj5)))),-1);
if(!x4582.valid){
continue;
}
CheckValue<IkReal> x4583 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4581)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4582.value)))+(x4583.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4584=IKcos(j4);
IkReal x4585=IKsin(j4);
IkReal x4586=(cj5*r00);
IkReal x4587=(cj5*r10);
IkReal x4588=(r21*sj5);
IkReal x4589=(cj5*r20);
IkReal x4590=((1.0)*x4584);
IkReal x4591=((1.0)*x4585);
IkReal x4592=(sj5*x4585);
IkReal x4593=(sj5*x4584);
evalcond[0]=((((-1.0)*x4587*x4590))+((r11*x4593))+((r12*x4585)));
evalcond[1]=((((-1.0)*r22*x4590))+(((-1.0)*x4589*x4591))+((x4585*x4588)));
evalcond[2]=((((-1.0)*x4586*x4591))+(((-1.0)*r02*x4590))+((r01*x4592)));
evalcond[3]=((-1.0)+(((-1.0)*x4587*x4591))+((r11*x4592))+(((-1.0)*r12*x4590)));
evalcond[4]=(((cj2*sj1))+((r02*x4585))+((cj1*sj2))+(((-1.0)*x4586*x4590))+((r01*x4593)));
evalcond[5]=(((r22*x4585))+(((-1.0)*x4589*x4590))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4584*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4594 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4594.valid){
continue;
}
CheckValue<IkReal> x4595=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4594.value)+(((1.5707963267949)*(x4595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4596=IKcos(j4);
IkReal x4597=IKsin(j4);
IkReal x4598=(cj5*r00);
IkReal x4599=(cj5*r10);
IkReal x4600=(r21*sj5);
IkReal x4601=(cj5*r20);
IkReal x4602=((1.0)*x4596);
IkReal x4603=((1.0)*x4597);
IkReal x4604=(sj5*x4597);
IkReal x4605=(sj5*x4596);
evalcond[0]=(((r11*x4605))+(((-1.0)*x4599*x4602))+((r12*x4597)));
evalcond[1]=(((x4597*x4600))+(((-1.0)*x4601*x4603))+(((-1.0)*r22*x4602)));
evalcond[2]=(((r01*x4604))+(((-1.0)*r02*x4602))+(((-1.0)*x4598*x4603)));
evalcond[3]=((-1.0)+((r11*x4604))+(((-1.0)*x4599*x4603))+(((-1.0)*r12*x4602)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4605))+((r02*x4597))+(((-1.0)*x4598*x4602)));
evalcond[5]=(((r22*x4597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4596*x4600))+(((-1.0)*x4601*x4602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4606=((-1.0)*r00);
IkReal x4608 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4608)==0){
continue;
}
IkReal x4607=pow(x4608,-0.5);
CheckValue<IkReal> x4609 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4606),IKFAST_ATAN2_MAGTHRESH);
if(!x4609.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4609.value));
IkReal gconst109=(r01*x4607);
IkReal gconst110=(x4606*x4607);
CheckValue<IkReal> x4610 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4610.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4610.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4611=((-1.0)*r00);
IkReal x4612=x4607;
CheckValue<IkReal> x4614 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4611),IKFAST_ATAN2_MAGTHRESH);
if(!x4614.valid){
continue;
}
IkReal x4613=((-1.0)*(x4614.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4613;
IkReal gconst108=x4613;
IkReal gconst109=(r01*x4612);
IkReal gconst110=(x4611*x4612);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4615=((1.0)*sj0);
IkReal x4616=((1.0)*gconst109);
CheckValue<IkReal> x4617 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4615))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4616))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4617.valid){
continue;
}
CheckValue<IkReal> x4618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4616))+(((-1.0)*gconst110*r21)))),-1);
if(!x4618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4617.value)+(((1.5707963267949)*(x4618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4619=IKsin(j4);
IkReal x4620=IKcos(j4);
IkReal x4621=(gconst109*r21);
IkReal x4622=((1.0)*cj2);
IkReal x4623=((1.0)*sj0);
IkReal x4624=(cj1*sj2);
IkReal x4625=((1.0)*x4620);
IkReal x4626=(gconst109*x4619);
IkReal x4627=(gconst109*x4620);
IkReal x4628=((1.0)*gconst110*x4619);
evalcond[0]=((((-1.0)*r22*x4625))+((x4619*x4621))+(((-1.0)*r20*x4628)));
evalcond[1]=(cj0+((r11*x4626))+(((-1.0)*r12*x4625))+(((-1.0)*r10*x4628)));
evalcond[2]=((((-1.0)*r02*x4625))+(((-1.0)*r00*x4628))+((r01*x4626))+(((-1.0)*x4623)));
evalcond[3]=((((-1.0)*gconst110*r20*x4625))+(((-1.0)*cj1*x4622))+((x4620*x4621))+((sj1*sj2))+((r22*x4619)));
evalcond[4]=(((r02*x4619))+(((-1.0)*gconst110*r00*x4625))+(((-1.0)*cj0*x4624))+((r01*x4627))+(((-1.0)*cj0*sj1*x4622)));
evalcond[5]=(((r11*x4627))+((r12*x4619))+(((-1.0)*x4623*x4624))+(((-1.0)*gconst110*r10*x4625))+(((-1.0)*sj0*sj1*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4629=((1.0)*gconst110);
CheckValue<IkReal> x4630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x4629)))),-1);
if(!x4630.valid){
continue;
}
CheckValue<IkReal> x4631 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4630.value)))+(x4631.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4632=IKsin(j4);
IkReal x4633=IKcos(j4);
IkReal x4634=(gconst109*r21);
IkReal x4635=((1.0)*cj2);
IkReal x4636=((1.0)*sj0);
IkReal x4637=(cj1*sj2);
IkReal x4638=((1.0)*x4633);
IkReal x4639=(gconst109*x4632);
IkReal x4640=(gconst109*x4633);
IkReal x4641=((1.0)*gconst110*x4632);
evalcond[0]=((((-1.0)*r20*x4641))+((x4632*x4634))+(((-1.0)*r22*x4638)));
evalcond[1]=(cj0+((r11*x4639))+(((-1.0)*r10*x4641))+(((-1.0)*r12*x4638)));
evalcond[2]=(((r01*x4639))+(((-1.0)*x4636))+(((-1.0)*r02*x4638))+(((-1.0)*r00*x4641)));
evalcond[3]=((((-1.0)*gconst110*r20*x4638))+(((-1.0)*cj1*x4635))+((x4633*x4634))+((sj1*sj2))+((r22*x4632)));
evalcond[4]=((((-1.0)*gconst110*r00*x4638))+(((-1.0)*cj0*sj1*x4635))+(((-1.0)*cj0*x4637))+((r01*x4640))+((r02*x4632)));
evalcond[5]=(((r12*x4632))+(((-1.0)*gconst110*r10*x4638))+((r11*x4640))+(((-1.0)*sj0*sj1*x4635))+(((-1.0)*x4636*x4637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4642=((-1.0)*r01);
IkReal x4644 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4644)==0){
continue;
}
IkReal x4643=pow(x4644,-0.5);
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal(x4642),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4645.value))));
IkReal gconst112=(x4642*x4643);
IkReal gconst113=((1.0)*r00*x4643);
CheckValue<IkReal> x4646 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4646.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4646.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4647=((-1.0)*r01);
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(x4647),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
IkReal x4648=((1.0)*(x4650.value));
IkReal x4649=x4643;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4648)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4648)));
IkReal gconst112=(x4647*x4649);
IkReal gconst113=((1.0)*r00*x4649);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4651=((-1.0)*r01);
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal(x4651),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
IkReal x4652=((1.0)*(x4654.value));
IkReal x4653=x4643;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4652)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4652)));
IkReal gconst112=(x4651*x4653);
IkReal gconst113=((1.0)*r00*x4653);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4655=((-1.0)*r01);
CheckValue<IkReal> x4658 = IKatan2WithCheck(IkReal(x4655),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4658.valid){
continue;
}
IkReal x4656=((1.0)*(x4658.value));
IkReal x4657=x4643;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4656)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4656)));
IkReal gconst112=(x4655*x4657);
IkReal gconst113=((1.0)*r00*x4657);
IkReal x4659=r02*r02;
IkReal x4660=(r12*sj0);
IkReal x4661=((1.0)*cj0);
IkReal x4662=x4643;
j4eval[0]=((IKabs(((((-1.0)*x4661*x4662))+((r02*x4660*x4662))+((cj0*x4659*x4662)))))+(IKabs(((((-1.0)*x4660))+(((-1.0)*r02*x4661))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4663=((1.0)*sj0);
IkReal x4664=((1.0)*gconst112);
CheckValue<IkReal> x4665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4664))+(((-1.0)*gconst113*r21)))),-1);
if(!x4665.valid){
continue;
}
CheckValue<IkReal> x4666 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4663)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4664))+(((-1.0)*gconst112*r11*x4663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4665.value)))+(x4666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4667=IKsin(j4);
IkReal x4668=IKcos(j4);
IkReal x4669=(gconst113*r20);
IkReal x4670=(gconst112*r21);
IkReal x4671=((1.0)*cj2);
IkReal x4672=(gconst113*r00);
IkReal x4673=(gconst113*r10);
IkReal x4674=((1.0)*sj0);
IkReal x4675=(cj1*sj2);
IkReal x4676=((1.0)*x4668);
IkReal x4677=((1.0)*x4667);
IkReal x4678=(gconst112*x4668);
IkReal x4679=(gconst112*x4667);
evalcond[0]=(((x4667*x4670))+(((-1.0)*r22*x4676))+(((-1.0)*x4669*x4677)));
evalcond[1]=(cj0+((r11*x4679))+(((-1.0)*r12*x4676))+(((-1.0)*x4673*x4677)));
evalcond[2]=((((-1.0)*r02*x4676))+(((-1.0)*x4674))+(((-1.0)*x4672*x4677))+((r01*x4679)));
evalcond[3]=((((-1.0)*cj1*x4671))+((x4668*x4670))+((sj1*sj2))+((r22*x4667))+(((-1.0)*x4669*x4676)));
evalcond[4]=((((-1.0)*cj0*x4675))+((r02*x4667))+(((-1.0)*cj0*sj1*x4671))+(((-1.0)*x4672*x4676))+((r01*x4678)));
evalcond[5]=((((-1.0)*x4674*x4675))+((r12*x4667))+((r11*x4678))+(((-1.0)*sj0*sj1*x4671))+(((-1.0)*x4673*x4676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4680=((1.0)*gconst113);
CheckValue<IkReal> x4681=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4680))+(((-1.0)*gconst112*r10)))),-1);
if(!x4681.valid){
continue;
}
CheckValue<IkReal> x4682 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4681.value)))+(x4682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4683=IKsin(j4);
IkReal x4684=IKcos(j4);
IkReal x4685=(gconst113*r20);
IkReal x4686=(gconst112*r21);
IkReal x4687=((1.0)*cj2);
IkReal x4688=(gconst113*r00);
IkReal x4689=(gconst113*r10);
IkReal x4690=((1.0)*sj0);
IkReal x4691=(cj1*sj2);
IkReal x4692=((1.0)*x4684);
IkReal x4693=((1.0)*x4683);
IkReal x4694=(gconst112*x4684);
IkReal x4695=(gconst112*x4683);
evalcond[0]=(((x4683*x4686))+(((-1.0)*x4685*x4693))+(((-1.0)*r22*x4692)));
evalcond[1]=((((-1.0)*r12*x4692))+cj0+((r11*x4695))+(((-1.0)*x4689*x4693)));
evalcond[2]=((((-1.0)*x4688*x4693))+(((-1.0)*r02*x4692))+((r01*x4695))+(((-1.0)*x4690)));
evalcond[3]=((((-1.0)*cj1*x4687))+((sj1*sj2))+((r22*x4683))+(((-1.0)*x4685*x4692))+((x4684*x4686)));
evalcond[4]=(((r02*x4683))+(((-1.0)*cj0*sj1*x4687))+(((-1.0)*x4688*x4692))+(((-1.0)*cj0*x4691))+((r01*x4694)));
evalcond[5]=((((-1.0)*sj0*sj1*x4687))+(((-1.0)*x4690*x4691))+((r12*x4683))+((r11*x4694))+(((-1.0)*x4689*x4692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4696=((1.0)*gconst113);
CheckValue<IkReal> x4697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4696))+(((-1.0)*gconst112*r00)))),-1);
if(!x4697.valid){
continue;
}
CheckValue<IkReal> x4698 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4697.value)))+(x4698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4699=IKsin(j4);
IkReal x4700=IKcos(j4);
IkReal x4701=(gconst113*r20);
IkReal x4702=(gconst112*r21);
IkReal x4703=((1.0)*cj2);
IkReal x4704=(gconst113*r00);
IkReal x4705=(gconst113*r10);
IkReal x4706=((1.0)*sj0);
IkReal x4707=(cj1*sj2);
IkReal x4708=((1.0)*x4700);
IkReal x4709=((1.0)*x4699);
IkReal x4710=(gconst112*x4700);
IkReal x4711=(gconst112*x4699);
evalcond[0]=((((-1.0)*r22*x4708))+((x4699*x4702))+(((-1.0)*x4701*x4709)));
evalcond[1]=(cj0+(((-1.0)*r12*x4708))+(((-1.0)*x4705*x4709))+((r11*x4711)));
evalcond[2]=((((-1.0)*r02*x4708))+((r01*x4711))+(((-1.0)*x4704*x4709))+(((-1.0)*x4706)));
evalcond[3]=(((sj1*sj2))+((r22*x4699))+(((-1.0)*cj1*x4703))+((x4700*x4702))+(((-1.0)*x4701*x4708)));
evalcond[4]=(((r02*x4699))+(((-1.0)*cj0*sj1*x4703))+((r01*x4710))+(((-1.0)*cj0*x4707))+(((-1.0)*x4704*x4708)));
evalcond[5]=((((-1.0)*sj0*sj1*x4703))+((r12*x4699))+(((-1.0)*x4706*x4707))+(((-1.0)*x4705*x4708))+((r11*x4710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4712=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4712;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4713=((1.0)*cj5);
IkReal x4714=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4713)));
j4eval[0]=x4714;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4713)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4715=cj5*cj5;
IkReal x4716=r01*r01;
IkReal x4717=(cj5*r00);
IkReal x4718=(r01*sj5);
IkReal x4719=(((x4715*(r00*r00)))+(((-1.0)*x4715*x4716))+x4716+(((-2.0)*x4717*x4718))+(r02*r02));
j4eval[0]=x4719;
j4eval[1]=IKsign(x4719);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4717))+x4718))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4720=cj5*cj5;
IkReal x4721=r01*r01;
IkReal x4722=(r01*sj5);
IkReal x4723=(cj5*r00);
CheckValue<IkReal> x4724 = IKatan2WithCheck(IkReal(((((-1.0)*x4723))+x4722)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4724.valid){
continue;
}
CheckValue<IkReal> x4725=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4720*x4721))+((x4720*(r00*r00)))+x4721+(((-2.0)*x4722*x4723))+(r02*r02))),-1);
if(!x4725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4724.value)+(((1.5707963267949)*(x4725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4726=IKcos(j4);
IkReal x4727=IKsin(j4);
IkReal x4728=(cj5*r00);
IkReal x4729=(cj5*r10);
IkReal x4730=(r21*sj5);
IkReal x4731=((1.0)*cj2);
IkReal x4732=(cj5*r20);
IkReal x4733=((1.0)*x4726);
IkReal x4734=((1.0)*x4727);
IkReal x4735=(sj5*x4727);
IkReal x4736=(sj5*x4726);
evalcond[0]=((((-1.0)*x4728*x4733))+((r02*x4727))+((r01*x4736)));
evalcond[1]=((((-1.0)*x4732*x4734))+((x4727*x4730))+(((-1.0)*r22*x4733)));
evalcond[2]=(((r11*x4735))+(((-1.0)*r12*x4733))+(((-1.0)*x4729*x4734)));
evalcond[3]=((-1.0)+(((-1.0)*x4728*x4734))+((r01*x4735))+(((-1.0)*r02*x4733)));
evalcond[4]=((((-1.0)*cj1*x4731))+((sj1*sj2))+(((-1.0)*x4732*x4733))+((x4726*x4730))+((r22*x4727)));
evalcond[5]=(((r11*x4736))+(((-1.0)*sj1*x4731))+(((-1.0)*cj1*sj2))+(((-1.0)*x4729*x4733))+((r12*x4727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4737=((1.0)*cj5);
CheckValue<IkReal> x4738 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4738.valid){
continue;
}
CheckValue<IkReal> x4739=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4737)))),-1);
if(!x4739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4738.value)+(((1.5707963267949)*(x4739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4740=IKcos(j4);
IkReal x4741=IKsin(j4);
IkReal x4742=(cj5*r00);
IkReal x4743=(cj5*r10);
IkReal x4744=(r21*sj5);
IkReal x4745=((1.0)*cj2);
IkReal x4746=(cj5*r20);
IkReal x4747=((1.0)*x4740);
IkReal x4748=((1.0)*x4741);
IkReal x4749=(sj5*x4741);
IkReal x4750=(sj5*x4740);
evalcond[0]=(((r01*x4750))+((r02*x4741))+(((-1.0)*x4742*x4747)));
evalcond[1]=(((x4741*x4744))+(((-1.0)*x4746*x4748))+(((-1.0)*r22*x4747)));
evalcond[2]=(((r11*x4749))+(((-1.0)*r12*x4747))+(((-1.0)*x4743*x4748)));
evalcond[3]=((-1.0)+((r01*x4749))+(((-1.0)*x4742*x4748))+(((-1.0)*r02*x4747)));
evalcond[4]=(((x4740*x4744))+(((-1.0)*cj1*x4745))+(((-1.0)*x4746*x4747))+((sj1*sj2))+((r22*x4741)));
evalcond[5]=((((-1.0)*sj1*x4745))+((r11*x4750))+((r12*x4741))+(((-1.0)*cj1*sj2))+(((-1.0)*x4743*x4747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4751=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4751.valid){
continue;
}
CheckValue<IkReal> x4752 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4751.value)))+(x4752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4753=IKcos(j4);
IkReal x4754=IKsin(j4);
IkReal x4755=(cj5*r00);
IkReal x4756=(cj5*r10);
IkReal x4757=(r21*sj5);
IkReal x4758=((1.0)*cj2);
IkReal x4759=(cj5*r20);
IkReal x4760=((1.0)*x4753);
IkReal x4761=((1.0)*x4754);
IkReal x4762=(sj5*x4754);
IkReal x4763=(sj5*x4753);
evalcond[0]=((((-1.0)*x4755*x4760))+((r01*x4763))+((r02*x4754)));
evalcond[1]=((((-1.0)*r22*x4760))+((x4754*x4757))+(((-1.0)*x4759*x4761)));
evalcond[2]=((((-1.0)*x4756*x4761))+(((-1.0)*r12*x4760))+((r11*x4762)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4760))+(((-1.0)*x4755*x4761))+((r01*x4762)));
evalcond[4]=((((-1.0)*cj1*x4758))+((x4753*x4757))+((sj1*sj2))+(((-1.0)*x4759*x4760))+((r22*x4754)));
evalcond[5]=(((r12*x4754))+(((-1.0)*sj1*x4758))+(((-1.0)*cj1*sj2))+(((-1.0)*x4756*x4760))+((r11*x4763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4764=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4764;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4765=((1.0)*cj5);
IkReal x4766=((((-1.0)*r21*x4765))+(((-1.0)*r20*sj5)));
j4eval[0]=x4766;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4765))))));
j4eval[2]=IKsign(x4766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4767=cj5*cj5;
IkReal x4768=r01*r01;
IkReal x4769=(r01*sj5);
IkReal x4770=(cj5*r00);
IkReal x4771=((((-1.0)*x4768))+((x4767*x4768))+(((-1.0)*(r02*r02)))+(((-1.0)*x4767*(r00*r00)))+(((2.0)*x4769*x4770)));
j4eval[0]=x4771;
j4eval[1]=IKsign(x4771);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4770))+x4769))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4772=cj5*cj5;
IkReal x4773=r01*r01;
IkReal x4774=(r01*sj5);
IkReal x4775=(cj5*r00);
CheckValue<IkReal> x4776 = IKatan2WithCheck(IkReal(((((-1.0)*x4775))+x4774)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4776.valid){
continue;
}
CheckValue<IkReal> x4777=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4773))+((x4772*x4773))+(((2.0)*x4774*x4775))+(((-1.0)*(r02*r02)))+(((-1.0)*x4772*(r00*r00))))),-1);
if(!x4777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4776.value)+(((1.5707963267949)*(x4777.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4778=IKcos(j4);
IkReal x4779=IKsin(j4);
IkReal x4780=(cj5*r00);
IkReal x4781=(cj5*r10);
IkReal x4782=(r21*sj5);
IkReal x4783=(cj5*r20);
IkReal x4784=((1.0)*x4778);
IkReal x4785=((1.0)*x4779);
IkReal x4786=(sj5*x4779);
IkReal x4787=(sj5*x4778);
evalcond[0]=(((r01*x4787))+((r02*x4779))+(((-1.0)*x4780*x4784)));
evalcond[1]=(((x4779*x4782))+(((-1.0)*x4783*x4785))+(((-1.0)*r22*x4784)));
evalcond[2]=(((r11*x4786))+(((-1.0)*x4781*x4785))+(((-1.0)*r12*x4784)));
evalcond[3]=((1.0)+((r01*x4786))+(((-1.0)*r02*x4784))+(((-1.0)*x4780*x4785)));
evalcond[4]=(((cj2*sj1))+((r12*x4779))+((cj1*sj2))+((r11*x4787))+(((-1.0)*x4781*x4784)));
evalcond[5]=(((x4778*x4782))+(((-1.0)*x4783*x4784))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4788=((1.0)*cj5);
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4788))+(((-1.0)*r20*sj5)))),-1);
if(!x4789.valid){
continue;
}
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4788)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4789.value)))+(x4790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4791=IKcos(j4);
IkReal x4792=IKsin(j4);
IkReal x4793=(cj5*r00);
IkReal x4794=(cj5*r10);
IkReal x4795=(r21*sj5);
IkReal x4796=(cj5*r20);
IkReal x4797=((1.0)*x4791);
IkReal x4798=((1.0)*x4792);
IkReal x4799=(sj5*x4792);
IkReal x4800=(sj5*x4791);
evalcond[0]=(((r01*x4800))+((r02*x4792))+(((-1.0)*x4793*x4797)));
evalcond[1]=((((-1.0)*r22*x4797))+((x4792*x4795))+(((-1.0)*x4796*x4798)));
evalcond[2]=((((-1.0)*x4794*x4798))+(((-1.0)*r12*x4797))+((r11*x4799)));
evalcond[3]=((1.0)+((r01*x4799))+(((-1.0)*r02*x4797))+(((-1.0)*x4793*x4798)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4794*x4797))+((r12*x4792))+((r11*x4800)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4791*x4795))+(((-1.0)*x4796*x4797))+((r22*x4792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
CheckValue<IkReal> x4802=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4801.value)+(((1.5707963267949)*(x4802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4803=IKcos(j4);
IkReal x4804=IKsin(j4);
IkReal x4805=(cj5*r00);
IkReal x4806=(cj5*r10);
IkReal x4807=(r21*sj5);
IkReal x4808=(cj5*r20);
IkReal x4809=((1.0)*x4803);
IkReal x4810=((1.0)*x4804);
IkReal x4811=(sj5*x4804);
IkReal x4812=(sj5*x4803);
evalcond[0]=(((r02*x4804))+(((-1.0)*x4805*x4809))+((r01*x4812)));
evalcond[1]=((((-1.0)*r22*x4809))+(((-1.0)*x4808*x4810))+((x4804*x4807)));
evalcond[2]=(((r11*x4811))+(((-1.0)*x4806*x4810))+(((-1.0)*r12*x4809)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4809))+(((-1.0)*x4805*x4810))+((r01*x4811)));
evalcond[4]=(((cj2*sj1))+((r11*x4812))+((cj1*sj2))+((r12*x4804))+(((-1.0)*x4806*x4809)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4804))+((x4803*x4807))+(((-1.0)*x4808*x4809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4813=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4813);
rxp1_1=(px*r21);
rxp1_2=(r11*x4813);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4814=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4814);
rxp1_1=(px*r21);
rxp1_2=(r11*x4814);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4815=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4815);
rxp1_1=(px*r21);
rxp1_2=(r11*x4815);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4818=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4818.valid){
continue;
}
IkReal x4816=x4818.value;
IkReal x4817=(sj0*x4816);
cj4array[0]=(((cj1*sj2*x4817))+((cj2*sj1*x4817)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4819=IKsin(j4);
IkReal x4820=IKcos(j4);
IkReal x4821=(r21*sj5);
IkReal x4822=((1.0)*cj5*r20);
evalcond[0]=(r02*x4819);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4820)));
evalcond[2]=(((x4819*x4821))+(((-1.0)*x4819*x4822)));
evalcond[3]=((((-1.0)*cj5*r10*x4819))+((r11*sj5*x4819)));
evalcond[4]=(((x4820*x4821))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4820*x4822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4824=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4824.valid){
continue;
}
IkReal x4823=x4824.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4823))+((cj1*cj2*x4823)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4825=IKsin(j4);
IkReal x4826=IKcos(j4);
IkReal x4827=((1.0)*sj0);
IkReal x4828=((1.0)*cj5);
IkReal x4829=(sj5*x4825);
evalcond[0]=(r02*x4825);
evalcond[1]=((((-1.0)*x4827))+(((-1.0)*r02*x4826)));
evalcond[2]=(((r21*x4829))+(((-1.0)*r20*x4825*x4828)));
evalcond[3]=(((r11*x4829))+(((-1.0)*r10*x4825*x4828)));
evalcond[4]=((((-1.0)*r10*x4826*x4828))+(((-1.0)*cj2*sj1*x4827))+(((-1.0)*cj1*sj2*x4827))+((r11*sj5*x4826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4830=IKPowWithIntegerCheck(r02,-1);
if(!x4830.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4830.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4831=IKsin(j4);
IkReal x4832=IKcos(j4);
IkReal x4833=((1.0)*cj1);
IkReal x4834=(r21*sj5);
IkReal x4835=((1.0)*cj5);
IkReal x4836=(r11*sj5);
evalcond[0]=(r02*x4831);
evalcond[1]=((((-1.0)*r20*x4831*x4835))+((x4831*x4834)));
evalcond[2]=((((-1.0)*r10*x4831*x4835))+((x4831*x4836)));
evalcond[3]=(((sj1*sj2))+((x4832*x4834))+(((-1.0)*cj2*x4833))+(((-1.0)*r20*x4832*x4835)));
evalcond[4]=((((-1.0)*sj0*sj2*x4833))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4832*x4835))+((x4832*x4836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4837=((1.0)*sj0);
IkReal x4838=((1.0)*cj0);
CheckValue<IkReal> x4839 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4837))+(((-1.0)*r02*x4838)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x4837))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4839.valid){
continue;
}
CheckValue<IkReal> x4840=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4839.value)+(((1.5707963267949)*(x4840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4841=IKsin(j4);
IkReal x4842=IKcos(j4);
IkReal x4843=(cj5*r00);
IkReal x4844=(cj5*r10);
IkReal x4845=(r21*sj5);
IkReal x4846=((1.0)*cj2);
IkReal x4847=((1.0)*sj0);
IkReal x4848=(cj1*sj2);
IkReal x4849=(cj5*r20);
IkReal x4850=((1.0)*x4842);
IkReal x4851=((1.0)*x4841);
IkReal x4852=(sj5*x4841);
IkReal x4853=(sj5*x4842);
evalcond[0]=(((x4841*x4845))+(((-1.0)*r22*x4850))+(((-1.0)*x4849*x4851)));
evalcond[1]=(cj0+(((-1.0)*r12*x4850))+(((-1.0)*x4844*x4851))+((r11*x4852)));
evalcond[2]=((((-1.0)*x4847))+((r01*x4852))+(((-1.0)*x4843*x4851))+(((-1.0)*r02*x4850)));
evalcond[3]=(((x4842*x4845))+((sj1*sj2))+(((-1.0)*cj1*x4846))+((r22*x4841))+(((-1.0)*x4849*x4850)));
evalcond[4]=(((r02*x4841))+((r01*x4853))+(((-1.0)*x4843*x4850))+(((-1.0)*cj0*x4848))+(((-1.0)*cj0*sj1*x4846)));
evalcond[5]=((((-1.0)*x4847*x4848))+((r12*x4841))+(((-1.0)*x4844*x4850))+(((-1.0)*sj0*sj1*x4846))+((r11*x4853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4854=((1.0)*cj5);
CheckValue<IkReal> x4855 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4854))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4855.valid){
continue;
}
CheckValue<IkReal> x4856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4854)))),-1);
if(!x4856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4855.value)+(((1.5707963267949)*(x4856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4857=IKsin(j4);
IkReal x4858=IKcos(j4);
IkReal x4859=(cj5*r00);
IkReal x4860=(cj5*r10);
IkReal x4861=(r21*sj5);
IkReal x4862=((1.0)*cj2);
IkReal x4863=((1.0)*sj0);
IkReal x4864=(cj1*sj2);
IkReal x4865=(cj5*r20);
IkReal x4866=((1.0)*x4858);
IkReal x4867=((1.0)*x4857);
IkReal x4868=(sj5*x4857);
IkReal x4869=(sj5*x4858);
evalcond[0]=((((-1.0)*r22*x4866))+((x4857*x4861))+(((-1.0)*x4865*x4867)));
evalcond[1]=(((r11*x4868))+cj0+(((-1.0)*r12*x4866))+(((-1.0)*x4860*x4867)));
evalcond[2]=(((r01*x4868))+(((-1.0)*x4859*x4867))+(((-1.0)*x4863))+(((-1.0)*r02*x4866)));
evalcond[3]=(((r22*x4857))+((sj1*sj2))+(((-1.0)*cj1*x4862))+((x4858*x4861))+(((-1.0)*x4865*x4866)));
evalcond[4]=((((-1.0)*cj0*sj1*x4862))+((r01*x4869))+(((-1.0)*x4859*x4866))+(((-1.0)*cj0*x4864))+((r02*x4857)));
evalcond[5]=((((-1.0)*x4863*x4864))+((r11*x4869))+(((-1.0)*sj0*sj1*x4862))+((r12*x4857))+(((-1.0)*x4860*x4866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4870=((1.0)*cj5);
CheckValue<IkReal> x4871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4870)))),-1);
if(!x4871.valid){
continue;
}
CheckValue<IkReal> x4872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4871.value)))+(x4872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4873=IKsin(j4);
IkReal x4874=IKcos(j4);
IkReal x4875=(cj5*r00);
IkReal x4876=(cj5*r10);
IkReal x4877=(r21*sj5);
IkReal x4878=((1.0)*cj2);
IkReal x4879=((1.0)*sj0);
IkReal x4880=(cj1*sj2);
IkReal x4881=(cj5*r20);
IkReal x4882=((1.0)*x4874);
IkReal x4883=((1.0)*x4873);
IkReal x4884=(sj5*x4873);
IkReal x4885=(sj5*x4874);
evalcond[0]=((((-1.0)*x4881*x4883))+((x4873*x4877))+(((-1.0)*r22*x4882)));
evalcond[1]=((((-1.0)*x4876*x4883))+((r11*x4884))+cj0+(((-1.0)*r12*x4882)));
evalcond[2]=((((-1.0)*r02*x4882))+((r01*x4884))+(((-1.0)*x4879))+(((-1.0)*x4875*x4883)));
evalcond[3]=(((x4874*x4877))+(((-1.0)*x4881*x4882))+((sj1*sj2))+((r22*x4873))+(((-1.0)*cj1*x4878)));
evalcond[4]=((((-1.0)*cj0*x4880))+((r02*x4873))+(((-1.0)*cj0*sj1*x4878))+((r01*x4885))+(((-1.0)*x4875*x4882)));
evalcond[5]=((((-1.0)*x4876*x4882))+((r11*x4885))+(((-1.0)*x4879*x4880))+(((-1.0)*sj0*sj1*x4878))+((r12*x4873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4886=((1.0)*cj5);
IkReal x4887=((1.0)*sj5);
IkReal x4888=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4888;
j0eval[1]=((IKabs(((((-1.0)*r00*x4887))+(((-1.0)*r01*x4886)))))+(IKabs(((((-1.0)*r10*x4887))+(((-1.0)*r11*x4886))))));
j0eval[2]=IKsign(x4888);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4889=r21*r21;
IkReal x4890=cj5*cj5;
IkReal x4891=(cj2*sj1);
IkReal x4892=(cj1*sj2);
IkReal x4893=(r21*sj5);
IkReal x4894=((1.0)*cj5*r20);
IkReal x4895=((((-1.0)*x4889))+(((-1.0)*x4890*(r20*r20)))+((x4889*x4890))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x4893)));
j4eval[0]=x4895;
j4eval[1]=((IKabs((((r22*x4892))+((r22*x4891)))))+(IKabs((((x4892*x4893))+((x4891*x4893))+(((-1.0)*x4891*x4894))+(((-1.0)*x4892*x4894))))));
j4eval[2]=IKsign(x4895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4896=cj1*cj1;
IkReal x4897=(cj2*sj2);
IkReal x4898=(cj2*sj1);
IkReal x4899=(cj1*sj1);
j0eval[0]=((((-2.0)*x4896*x4897))+(((-2.0)*cj1*cj2*x4898))+(((-1.06936921195177)*sj2*x4896))+(((-1.06936921195177)*cj1*x4898))+x4899+x4897);
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4898)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-0.114688717055332)*px))+(((0.828504447384304)*py))), ((((0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4900=IKsin(j0);
IkReal x4901=IKcos(j0);
evalcond[0]=((((-0.163941)*x4900))+(((-1.0)*px))+(((1.1843)*x4901)));
evalcond[1]=((((0.163941)*x4901))+(((-1.0)*py))+(((1.1843)*x4900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4902=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4902;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4903=((1.0)*cj5);
IkReal x4904=((((-1.0)*r01*x4903))+(((-1.0)*r00*sj5)));
j4eval[0]=x4904;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4903)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4905=((1.0)*cj5);
IkReal x4906=((((-1.0)*r01*x4905))+(((-1.0)*r00*sj5)));
j4eval[0]=x4906;
j4eval[1]=IKsign(x4906);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4905))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4907=((1.0)*cj5);
CheckValue<IkReal> x4908 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4907))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4908.valid){
continue;
}
CheckValue<IkReal> x4909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4907))+(((-1.0)*r00*sj5)))),-1);
if(!x4909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4908.value)+(((1.5707963267949)*(x4909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4910=IKcos(j4);
IkReal x4911=IKsin(j4);
IkReal x4912=((1.0)*sj0);
IkReal x4913=(cj5*r00);
IkReal x4914=(cj5*r10);
IkReal x4915=(cj5*r20);
IkReal x4916=((1.0)*x4910);
IkReal x4917=((1.0)*x4911);
IkReal x4918=(sj5*x4910);
IkReal x4919=(sj5*x4911);
evalcond[0]=(((r21*x4918))+(((-1.0)*x4915*x4916))+((r22*x4911)));
evalcond[1]=(((r21*x4919))+(((-1.0)*x4915*x4917))+(((-1.0)*r22*x4916)));
evalcond[2]=(cj0+(((-1.0)*r12*x4916))+((r11*x4919))+(((-1.0)*x4914*x4917)));
evalcond[3]=(((r02*x4911))+(((-1.0)*x4913*x4916))+((r01*x4918))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4912))+((r12*x4911))+((r11*x4918))+(((-1.0)*x4914*x4916)));
evalcond[5]=((((-1.0)*r02*x4916))+(((-1.0)*x4912))+(((-1.0)*x4913*x4917))+((r01*x4919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4920=((1.0)*cj5);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4920))+(((-1.0)*r00*sj5)))),-1);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4921.value)))+(x4922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKcos(j4);
IkReal x4924=IKsin(j4);
IkReal x4925=((1.0)*sj0);
IkReal x4926=(cj5*r00);
IkReal x4927=(cj5*r10);
IkReal x4928=(cj5*r20);
IkReal x4929=((1.0)*x4923);
IkReal x4930=((1.0)*x4924);
IkReal x4931=(sj5*x4923);
IkReal x4932=(sj5*x4924);
evalcond[0]=(((r22*x4924))+((r21*x4931))+(((-1.0)*x4928*x4929)));
evalcond[1]=(((r21*x4932))+(((-1.0)*r22*x4929))+(((-1.0)*x4928*x4930)));
evalcond[2]=(cj0+(((-1.0)*x4927*x4930))+(((-1.0)*r12*x4929))+((r11*x4932)));
evalcond[3]=((((-1.0)*x4926*x4929))+((r01*x4931))+((r02*x4924))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4927*x4929))+((r11*x4931))+(((-1.0)*x4925))+((r12*x4924)));
evalcond[5]=((((-1.0)*r02*x4929))+(((-1.0)*x4926*x4930))+((r01*x4932))+(((-1.0)*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4933 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4933.valid){
continue;
}
CheckValue<IkReal> x4934=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4933.value)+(((1.5707963267949)*(x4934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4935=IKcos(j4);
IkReal x4936=IKsin(j4);
IkReal x4937=((1.0)*sj0);
IkReal x4938=(cj5*r00);
IkReal x4939=(cj5*r10);
IkReal x4940=(cj5*r20);
IkReal x4941=((1.0)*x4935);
IkReal x4942=((1.0)*x4936);
IkReal x4943=(sj5*x4935);
IkReal x4944=(sj5*x4936);
evalcond[0]=(((r21*x4943))+(((-1.0)*x4940*x4941))+((r22*x4936)));
evalcond[1]=(((r21*x4944))+(((-1.0)*x4940*x4942))+(((-1.0)*r22*x4941)));
evalcond[2]=(cj0+(((-1.0)*x4939*x4942))+((r11*x4944))+(((-1.0)*r12*x4941)));
evalcond[3]=(((r01*x4943))+(((-1.0)*x4938*x4941))+((r02*x4936))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4936))+(((-1.0)*x4939*x4941))+((r11*x4943))+(((-1.0)*x4937)));
evalcond[5]=(((r01*x4944))+(((-1.0)*x4938*x4942))+(((-1.0)*r02*x4941))+(((-1.0)*x4937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4945=IKsin(j0);
IkReal x4946=IKcos(j0);
evalcond[0]=((((-0.163941)*x4945))+(((-1.0)*px))+(((0.0397)*x4946)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x4946))+(((0.0397)*x4945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4947=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4947;
j4eval[1]=IKsign(x4947);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4948=((1.0)*cj5);
IkReal x4949=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4948)));
j4eval[0]=x4949;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4948))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4950=cj5*cj5;
IkReal x4951=((1.0)*r20);
IkReal x4952=(r01*r21);
IkReal x4953=(r21*sj5);
IkReal x4954=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4953))+(((-1.0)*x4952))+((x4950*x4952))+(((-1.0)*r00*x4950*x4951)));
j4eval[0]=x4954;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4951))+((cj0*x4953)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4955=cj5*cj5;
IkReal x4956=((1.0)*r20);
IkReal x4957=(r01*r21);
IkReal x4958=(r21*sj5);
CheckValue<IkReal> x4959 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4956))+((cj0*x4958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4959.valid){
continue;
}
CheckValue<IkReal> x4960=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4958))+(((-1.0)*x4957))+(((-1.0)*r00*x4955*x4956))+((x4955*x4957)))),-1);
if(!x4960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4959.value)+(((1.5707963267949)*(x4960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4961=IKcos(j4);
IkReal x4962=IKsin(j4);
IkReal x4963=(cj5*r00);
IkReal x4964=(cj5*r10);
IkReal x4965=(cj5*r20);
IkReal x4966=((1.0)*x4961);
IkReal x4967=((1.0)*x4962);
IkReal x4968=(sj5*x4961);
IkReal x4969=(sj5*x4962);
evalcond[0]=(((r22*x4962))+(((-1.0)*x4965*x4966))+((r21*x4968)));
evalcond[1]=((((-1.0)*r22*x4966))+(((-1.0)*x4965*x4967))+((r21*x4969)));
evalcond[2]=(cj0+(((-1.0)*x4963*x4966))+((r02*x4962))+((r01*x4968)));
evalcond[3]=(sj0+((r12*x4962))+((r11*x4968))+(((-1.0)*x4964*x4966)));
evalcond[4]=(cj0+((r11*x4969))+(((-1.0)*r12*x4966))+(((-1.0)*x4964*x4967)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4963*x4967))+(((-1.0)*r02*x4966))+((r01*x4969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4970=((1.0)*cj5);
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4970)))),-1);
if(!x4971.valid){
continue;
}
CheckValue<IkReal> x4972 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4970)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4971.value)))+(x4972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4973=IKcos(j4);
IkReal x4974=IKsin(j4);
IkReal x4975=(cj5*r00);
IkReal x4976=(cj5*r10);
IkReal x4977=(cj5*r20);
IkReal x4978=((1.0)*x4973);
IkReal x4979=((1.0)*x4974);
IkReal x4980=(sj5*x4973);
IkReal x4981=(sj5*x4974);
evalcond[0]=(((r22*x4974))+((r21*x4980))+(((-1.0)*x4977*x4978)));
evalcond[1]=(((r21*x4981))+(((-1.0)*r22*x4978))+(((-1.0)*x4977*x4979)));
evalcond[2]=(((r01*x4980))+(((-1.0)*x4975*x4978))+cj0+((r02*x4974)));
evalcond[3]=(sj0+((r11*x4980))+((r12*x4974))+(((-1.0)*x4976*x4978)));
evalcond[4]=(cj0+((r11*x4981))+(((-1.0)*r12*x4978))+(((-1.0)*x4976*x4979)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4981))+(((-1.0)*x4975*x4979))+(((-1.0)*r02*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4982 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4982.valid){
continue;
}
CheckValue<IkReal> x4983=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4982.value)+(((1.5707963267949)*(x4983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4984=IKcos(j4);
IkReal x4985=IKsin(j4);
IkReal x4986=(cj5*r00);
IkReal x4987=(cj5*r10);
IkReal x4988=(cj5*r20);
IkReal x4989=((1.0)*x4984);
IkReal x4990=((1.0)*x4985);
IkReal x4991=(sj5*x4984);
IkReal x4992=(sj5*x4985);
evalcond[0]=((((-1.0)*x4988*x4989))+((r22*x4985))+((r21*x4991)));
evalcond[1]=((((-1.0)*r22*x4989))+(((-1.0)*x4988*x4990))+((r21*x4992)));
evalcond[2]=((((-1.0)*x4986*x4989))+cj0+((r01*x4991))+((r02*x4985)));
evalcond[3]=(sj0+((r12*x4985))+((r11*x4991))+(((-1.0)*x4987*x4989)));
evalcond[4]=(cj0+((r11*x4992))+(((-1.0)*r12*x4989))+(((-1.0)*x4987*x4990)));
evalcond[5]=((((-1.0)*x4986*x4990))+(((-1.0)*sj0))+(((-1.0)*r02*x4989))+((r01*x4992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4993=IKsin(j0);
IkReal x4994=IKcos(j0);
IkReal x4995=(cj5*r01);
IkReal x4996=((0.1157)*sj5);
IkReal x4997=(cj5*r11);
evalcond[0]=(x4995+((r00*sj5))+(((-1.0)*x4994)));
evalcond[1]=(x4997+((r10*sj5))+(((-1.0)*x4993)));
evalcond[2]=((((-0.163941)*x4993))+(((-1.0)*r00*x4996))+(((-1.0)*px))+(((-0.1157)*x4995)));
evalcond[3]=((((-1.0)*py))+(((0.163941)*x4994))+(((-0.1157)*x4997))+(((-1.0)*r10*x4996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4998=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4998;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4999=((1.0)*cj5);
IkReal x5000=((((-1.0)*r01*x4999))+(((-1.0)*r00*sj5)));
j4eval[0]=x5000;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4999))))));
j4eval[2]=IKsign(x5000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5001=cj5*cj5;
IkReal x5002=(r01*r11);
IkReal x5003=((1.0)*r00);
IkReal x5004=(r01*sj5);
IkReal x5005=((((-1.0)*r10*x5001*x5003))+((x5001*x5002))+((cj5*r10*x5004))+(((-1.0)*r02*r12))+(((-1.0)*x5002))+((cj5*r00*r11*sj5)));
j4eval[0]=x5005;
j4eval[1]=IKsign(x5005);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5003))+((cj0*x5004))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5006=cj5*cj5;
IkReal x5007=(r01*r11);
IkReal x5008=(cj5*r00);
IkReal x5009=(r01*sj5);
CheckValue<IkReal> x5010 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5008))+((cj0*x5009)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5010.valid){
continue;
}
CheckValue<IkReal> x5011=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5009))+(((-1.0)*r02*r12))+(((-1.0)*x5007))+((r11*sj5*x5008))+(((-1.0)*r00*r10*x5006))+((x5006*x5007)))),-1);
if(!x5011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5010.value)+(((1.5707963267949)*(x5011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5012=IKcos(j4);
IkReal x5013=IKsin(j4);
IkReal x5014=(cj5*r00);
IkReal x5015=(r01*sj5);
IkReal x5016=(cj5*r10);
IkReal x5017=(cj5*r20);
IkReal x5018=((1.0)*x5012);
IkReal x5019=((1.0)*x5013);
IkReal x5020=(sj5*x5013);
IkReal x5021=(sj5*x5012);
evalcond[0]=(((r02*x5013))+(((-1.0)*x5014*x5018))+((x5012*x5015)));
evalcond[1]=(((r11*x5021))+(((-1.0)*x5016*x5018))+((r12*x5013)));
evalcond[2]=((((-1.0)*x5017*x5019))+(((-1.0)*r22*x5018))+((r21*x5020)));
evalcond[3]=((1.0)+(((-1.0)*x5017*x5018))+((r22*x5013))+((r21*x5021)));
evalcond[4]=(((r11*x5020))+cj0+(((-1.0)*x5016*x5019))+(((-1.0)*r12*x5018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5018))+(((-1.0)*x5014*x5019))+((x5013*x5015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5022=((1.0)*cj5);
CheckValue<IkReal> x5023 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5022)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5023.valid){
continue;
}
CheckValue<IkReal> x5024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5022))+(((-1.0)*r00*sj5)))),-1);
if(!x5024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5023.value)+(((1.5707963267949)*(x5024.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5025=IKcos(j4);
IkReal x5026=IKsin(j4);
IkReal x5027=(cj5*r00);
IkReal x5028=(r01*sj5);
IkReal x5029=(cj5*r10);
IkReal x5030=(cj5*r20);
IkReal x5031=((1.0)*x5025);
IkReal x5032=((1.0)*x5026);
IkReal x5033=(sj5*x5026);
IkReal x5034=(sj5*x5025);
evalcond[0]=((((-1.0)*x5027*x5031))+((r02*x5026))+((x5025*x5028)));
evalcond[1]=(((r12*x5026))+((r11*x5034))+(((-1.0)*x5029*x5031)));
evalcond[2]=((((-1.0)*x5030*x5032))+((r21*x5033))+(((-1.0)*r22*x5031)));
evalcond[3]=((1.0)+(((-1.0)*x5030*x5031))+((r22*x5026))+((r21*x5034)));
evalcond[4]=(cj0+((r11*x5033))+(((-1.0)*x5029*x5032))+(((-1.0)*r12*x5031)));
evalcond[5]=((((-1.0)*x5027*x5032))+(((-1.0)*sj0))+((x5026*x5028))+(((-1.0)*r02*x5031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5035 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5035.valid){
continue;
}
CheckValue<IkReal> x5036=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5035.value)+(((1.5707963267949)*(x5036.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5037=IKcos(j4);
IkReal x5038=IKsin(j4);
IkReal x5039=(cj5*r00);
IkReal x5040=(r01*sj5);
IkReal x5041=(cj5*r10);
IkReal x5042=(cj5*r20);
IkReal x5043=((1.0)*x5037);
IkReal x5044=((1.0)*x5038);
IkReal x5045=(sj5*x5038);
IkReal x5046=(sj5*x5037);
evalcond[0]=(((x5037*x5040))+((r02*x5038))+(((-1.0)*x5039*x5043)));
evalcond[1]=(((r12*x5038))+(((-1.0)*x5041*x5043))+((r11*x5046)));
evalcond[2]=((((-1.0)*x5042*x5044))+((r21*x5045))+(((-1.0)*r22*x5043)));
evalcond[3]=((1.0)+(((-1.0)*x5042*x5043))+((r21*x5046))+((r22*x5038)));
evalcond[4]=(cj0+(((-1.0)*x5041*x5044))+(((-1.0)*r12*x5043))+((r11*x5045)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5043))+((x5038*x5040))+(((-1.0)*x5039*x5044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5047=IKcos(j0);
IkReal x5048=IKsin(j0);
evalcond[0]=((((-0.163941)*x5048))+(((-1.0)*px))+(((-0.5723)*x5047)));
evalcond[1]=((((-1.0)*py))+(((-0.5723)*x5048))+(((0.163941)*x5047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5049=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5049;
j4eval[1]=IKsign(x5049);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5050=((1.0)*cj5);
IkReal x5051=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5050)));
j4eval[0]=x5051;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5050))))));
j4eval[2]=IKsign(x5051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5052=cj5*cj5;
IkReal x5053=((1.0)*r20);
IkReal x5054=(r01*r21);
IkReal x5055=(r21*sj5);
IkReal x5056=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5052*x5054))+(((-1.0)*r00*x5052*x5053))+((cj5*r00*x5055))+(((-1.0)*x5054)));
j4eval[0]=x5056;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5053))+((cj0*x5055)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5057=cj5*cj5;
IkReal x5058=((1.0)*r20);
IkReal x5059=(r01*r21);
IkReal x5060=(r21*sj5);
CheckValue<IkReal> x5061=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5057*x5059))+(((-1.0)*r00*x5057*x5058))+(((-1.0)*x5059))+((cj5*r00*x5060)))),-1);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5060))+(((-1.0)*cj0*cj5*x5058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5061.value)))+(x5062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKcos(j4);
IkReal x5064=IKsin(j4);
IkReal x5065=(cj5*r00);
IkReal x5066=(cj5*r10);
IkReal x5067=(cj5*r20);
IkReal x5068=((1.0)*x5063);
IkReal x5069=((1.0)*x5064);
IkReal x5070=(sj5*x5063);
IkReal x5071=(sj5*x5064);
evalcond[0]=(((r21*x5070))+((r22*x5064))+(((-1.0)*x5067*x5068)));
evalcond[1]=(((r21*x5071))+(((-1.0)*r22*x5068))+(((-1.0)*x5067*x5069)));
evalcond[2]=(cj0+((r02*x5064))+((r01*x5070))+(((-1.0)*x5065*x5068)));
evalcond[3]=(sj0+(((-1.0)*x5066*x5068))+((r12*x5064))+((r11*x5070)));
evalcond[4]=(cj0+(((-1.0)*x5066*x5069))+(((-1.0)*r12*x5068))+((r11*x5071)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5068))+((r01*x5071))+(((-1.0)*x5065*x5069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5072=((1.0)*cj5);
CheckValue<IkReal> x5073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5072)))),-1);
if(!x5073.valid){
continue;
}
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5072))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5073.value)))+(x5074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5075=IKcos(j4);
IkReal x5076=IKsin(j4);
IkReal x5077=(cj5*r00);
IkReal x5078=(cj5*r10);
IkReal x5079=(cj5*r20);
IkReal x5080=((1.0)*x5075);
IkReal x5081=((1.0)*x5076);
IkReal x5082=(sj5*x5075);
IkReal x5083=(sj5*x5076);
evalcond[0]=(((r21*x5082))+(((-1.0)*x5079*x5080))+((r22*x5076)));
evalcond[1]=(((r21*x5083))+(((-1.0)*x5079*x5081))+(((-1.0)*r22*x5080)));
evalcond[2]=(cj0+(((-1.0)*x5077*x5080))+((r01*x5082))+((r02*x5076)));
evalcond[3]=(sj0+((r11*x5082))+(((-1.0)*x5078*x5080))+((r12*x5076)));
evalcond[4]=((((-1.0)*r12*x5080))+cj0+((r11*x5083))+(((-1.0)*x5078*x5081)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5077*x5081))+((r01*x5083))+(((-1.0)*r02*x5080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5084 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5084.value)+(((1.5707963267949)*(x5085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5086=IKcos(j4);
IkReal x5087=IKsin(j4);
IkReal x5088=(cj5*r00);
IkReal x5089=(cj5*r10);
IkReal x5090=(cj5*r20);
IkReal x5091=((1.0)*x5086);
IkReal x5092=((1.0)*x5087);
IkReal x5093=(sj5*x5086);
IkReal x5094=(sj5*x5087);
evalcond[0]=(((r21*x5093))+((r22*x5087))+(((-1.0)*x5090*x5091)));
evalcond[1]=((((-1.0)*r22*x5091))+((r21*x5094))+(((-1.0)*x5090*x5092)));
evalcond[2]=((((-1.0)*x5088*x5091))+cj0+((r01*x5093))+((r02*x5087)));
evalcond[3]=(sj0+((r11*x5093))+((r12*x5087))+(((-1.0)*x5089*x5091)));
evalcond[4]=(cj0+((r11*x5094))+(((-1.0)*x5089*x5092))+(((-1.0)*r12*x5091)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5088*x5092))+((r01*x5094))+(((-1.0)*r02*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5095=((1.0)*sj5);
IkReal x5096=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5096))+(((-1.0)*r10*x5095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5095))+(((-1.0)*r01*x5096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5096))+(((-1.0)*r10*x5095))))+IKsqr(((((-1.0)*r00*x5095))+(((-1.0)*r01*x5096))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5096))+(((-1.0)*r10*x5095))), ((((-1.0)*r00*x5095))+(((-1.0)*r01*x5096))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5097=IKsin(j0);
IkReal x5098=IKcos(j0);
IkReal x5099=(cj5*r01);
IkReal x5100=((0.1157)*sj5);
IkReal x5101=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5098+x5099);
evalcond[1]=(((r10*sj5))+x5101+x5097);
evalcond[2]=((((-0.1157)*x5099))+(((-1.0)*px))+(((-0.163941)*x5097))+(((-1.0)*r00*x5100)));
evalcond[3]=((((-1.0)*r10*x5100))+(((0.163941)*x5098))+(((-0.1157)*x5101))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5102=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5102;
j4eval[1]=IKsign(x5102);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5103=((1.0)*cj5);
IkReal x5104=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5103)));
j4eval[0]=x5104;
j4eval[1]=IKsign(x5104);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5103))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5105=cj5*cj5;
IkReal x5106=(r01*r11);
IkReal x5107=((1.0)*r00);
IkReal x5108=(r01*sj5);
IkReal x5109=(((x5105*x5106))+(((-1.0)*r02*r12))+(((-1.0)*x5106))+(((-1.0)*r10*x5105*x5107))+((cj5*r10*x5108))+((cj5*r00*r11*sj5)));
j4eval[0]=x5109;
j4eval[1]=IKsign(x5109);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5108))+(((-1.0)*cj0*cj5*x5107))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5110=cj5*cj5;
IkReal x5111=(r01*r11);
IkReal x5112=(cj5*r00);
IkReal x5113=(r01*sj5);
CheckValue<IkReal> x5114=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5113))+(((-1.0)*r00*r10*x5110))+(((-1.0)*r02*r12))+(((-1.0)*x5111))+((r11*sj5*x5112))+((x5110*x5111)))),-1);
if(!x5114.valid){
continue;
}
CheckValue<IkReal> x5115 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5112))+((cj0*x5113)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5114.value)))+(x5115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5116=IKcos(j4);
IkReal x5117=IKsin(j4);
IkReal x5118=(cj5*r00);
IkReal x5119=(r01*sj5);
IkReal x5120=(cj5*r10);
IkReal x5121=(cj5*r20);
IkReal x5122=((1.0)*x5116);
IkReal x5123=((1.0)*x5117);
IkReal x5124=(sj5*x5117);
IkReal x5125=(sj5*x5116);
evalcond[0]=(((x5116*x5119))+((r02*x5117))+(((-1.0)*x5118*x5122)));
evalcond[1]=(((r11*x5125))+(((-1.0)*x5120*x5122))+((r12*x5117)));
evalcond[2]=((((-1.0)*x5121*x5123))+((r21*x5124))+(((-1.0)*r22*x5122)));
evalcond[3]=((-1.0)+((r22*x5117))+(((-1.0)*x5121*x5122))+((r21*x5125)));
evalcond[4]=(cj0+((r11*x5124))+(((-1.0)*r12*x5122))+(((-1.0)*x5120*x5123)));
evalcond[5]=((((-1.0)*sj0))+((x5117*x5119))+(((-1.0)*x5118*x5123))+(((-1.0)*r02*x5122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5126=((1.0)*cj5);
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5126)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
CheckValue<IkReal> x5128=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5126)))),-1);
if(!x5128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5127.value)+(((1.5707963267949)*(x5128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5129=IKcos(j4);
IkReal x5130=IKsin(j4);
IkReal x5131=(cj5*r00);
IkReal x5132=(r01*sj5);
IkReal x5133=(cj5*r10);
IkReal x5134=(cj5*r20);
IkReal x5135=((1.0)*x5129);
IkReal x5136=((1.0)*x5130);
IkReal x5137=(sj5*x5130);
IkReal x5138=(sj5*x5129);
evalcond[0]=((((-1.0)*x5131*x5135))+((x5129*x5132))+((r02*x5130)));
evalcond[1]=(((r12*x5130))+((r11*x5138))+(((-1.0)*x5133*x5135)));
evalcond[2]=(((r21*x5137))+(((-1.0)*r22*x5135))+(((-1.0)*x5134*x5136)));
evalcond[3]=((-1.0)+((r22*x5130))+((r21*x5138))+(((-1.0)*x5134*x5135)));
evalcond[4]=(cj0+((r11*x5137))+(((-1.0)*r12*x5135))+(((-1.0)*x5133*x5136)));
evalcond[5]=((((-1.0)*x5131*x5136))+(((-1.0)*sj0))+((x5130*x5132))+(((-1.0)*r02*x5135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5139=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5139.valid){
continue;
}
CheckValue<IkReal> x5140 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5139.value)))+(x5140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5141=IKcos(j4);
IkReal x5142=IKsin(j4);
IkReal x5143=(cj5*r00);
IkReal x5144=(r01*sj5);
IkReal x5145=(cj5*r10);
IkReal x5146=(cj5*r20);
IkReal x5147=((1.0)*x5141);
IkReal x5148=((1.0)*x5142);
IkReal x5149=(sj5*x5142);
IkReal x5150=(sj5*x5141);
evalcond[0]=((((-1.0)*x5143*x5147))+((x5141*x5144))+((r02*x5142)));
evalcond[1]=(((r11*x5150))+((r12*x5142))+(((-1.0)*x5145*x5147)));
evalcond[2]=(((r21*x5149))+(((-1.0)*x5146*x5148))+(((-1.0)*r22*x5147)));
evalcond[3]=((-1.0)+((r21*x5150))+((r22*x5142))+(((-1.0)*x5146*x5147)));
evalcond[4]=(cj0+(((-1.0)*r12*x5147))+((r11*x5149))+(((-1.0)*x5145*x5148)));
evalcond[5]=((((-1.0)*sj0))+((x5142*x5144))+(((-1.0)*x5143*x5148))+(((-1.0)*r02*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5151=IKsin(j0);
IkReal x5152=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x5151))+(((0.5723)*x5152)));
evalcond[1]=((((0.163941)*x5152))+(((-1.0)*py))+(((0.5723)*x5151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5153=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5153;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5154=((1.0)*cj5);
IkReal x5155=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5154)));
j4eval[0]=x5155;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5154))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5156=((1.0)*cj5);
IkReal x5157=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5156)));
j4eval[0]=x5157;
j4eval[1]=IKsign(x5157);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5156))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5158=((1.0)*cj5);
CheckValue<IkReal> x5159 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5158))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5159.valid){
continue;
}
CheckValue<IkReal> x5160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5158)))),-1);
if(!x5160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5159.value)+(((1.5707963267949)*(x5160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5161=IKcos(j4);
IkReal x5162=IKsin(j4);
IkReal x5163=((1.0)*sj0);
IkReal x5164=(cj5*r00);
IkReal x5165=(cj5*r10);
IkReal x5166=(cj5*r20);
IkReal x5167=((1.0)*x5161);
IkReal x5168=((1.0)*x5162);
IkReal x5169=(sj5*x5161);
IkReal x5170=(sj5*x5162);
evalcond[0]=(((r21*x5169))+((r22*x5162))+(((-1.0)*x5166*x5167)));
evalcond[1]=((((-1.0)*r22*x5167))+(((-1.0)*x5166*x5168))+((r21*x5170)));
evalcond[2]=(cj0+(((-1.0)*r12*x5167))+(((-1.0)*x5165*x5168))+((r11*x5170)));
evalcond[3]=(((r01*x5169))+(((-1.0)*x5164*x5167))+((r02*x5162))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5163))+((r12*x5162))+((r11*x5169))+(((-1.0)*x5165*x5167)));
evalcond[5]=(((r01*x5170))+(((-1.0)*r02*x5167))+(((-1.0)*x5163))+(((-1.0)*x5164*x5168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5171=((1.0)*cj5);
CheckValue<IkReal> x5172 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5172.valid){
continue;
}
CheckValue<IkReal> x5173=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5171)))),-1);
if(!x5173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5172.value)+(((1.5707963267949)*(x5173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5174=IKcos(j4);
IkReal x5175=IKsin(j4);
IkReal x5176=((1.0)*sj0);
IkReal x5177=(cj5*r00);
IkReal x5178=(cj5*r10);
IkReal x5179=(cj5*r20);
IkReal x5180=((1.0)*x5174);
IkReal x5181=((1.0)*x5175);
IkReal x5182=(sj5*x5174);
IkReal x5183=(sj5*x5175);
evalcond[0]=(((r21*x5182))+((r22*x5175))+(((-1.0)*x5179*x5180)));
evalcond[1]=((((-1.0)*r22*x5180))+((r21*x5183))+(((-1.0)*x5179*x5181)));
evalcond[2]=(cj0+(((-1.0)*r12*x5180))+((r11*x5183))+(((-1.0)*x5178*x5181)));
evalcond[3]=(((r01*x5182))+((r02*x5175))+(((-1.0)*x5177*x5180))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5176))+((r12*x5175))+((r11*x5182))+(((-1.0)*x5178*x5180)));
evalcond[5]=((((-1.0)*r02*x5180))+((r01*x5183))+(((-1.0)*x5176))+(((-1.0)*x5177*x5181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5184 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5184.value)+(((1.5707963267949)*(x5185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKcos(j4);
IkReal x5187=IKsin(j4);
IkReal x5188=((1.0)*sj0);
IkReal x5189=(cj5*r00);
IkReal x5190=(cj5*r10);
IkReal x5191=(cj5*r20);
IkReal x5192=((1.0)*x5186);
IkReal x5193=((1.0)*x5187);
IkReal x5194=(sj5*x5186);
IkReal x5195=(sj5*x5187);
evalcond[0]=(((r22*x5187))+((r21*x5194))+(((-1.0)*x5191*x5192)));
evalcond[1]=(((r21*x5195))+(((-1.0)*x5191*x5193))+(((-1.0)*r22*x5192)));
evalcond[2]=((((-1.0)*r12*x5192))+cj0+((r11*x5195))+(((-1.0)*x5190*x5193)));
evalcond[3]=((((-1.0)*x5189*x5192))+((r02*x5187))+((r01*x5194))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5194))+(((-1.0)*x5190*x5192))+(((-1.0)*x5188))+((r12*x5187)));
evalcond[5]=((((-1.0)*x5189*x5193))+(((-1.0)*r02*x5192))+((r01*x5195))+(((-1.0)*x5188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((-0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5196=IKcos(j0);
IkReal x5197=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-1.1843)*x5196))+(((-0.163941)*x5197)));
evalcond[1]=((((-1.0)*py))+(((-1.1843)*x5197))+(((0.163941)*x5196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5198=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5198;
j4eval[1]=IKsign(x5198);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5199=((1.0)*cj5);
IkReal x5200=((((-1.0)*r11*x5199))+(((-1.0)*r10*sj5)));
j4eval[0]=x5200;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5199))))));
j4eval[2]=IKsign(x5200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5201=cj5*cj5;
IkReal x5202=((1.0)*r20);
IkReal x5203=(r01*r21);
IkReal x5204=(r21*sj5);
IkReal x5205=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5201*x5203))+(((-1.0)*r00*x5201*x5202))+((cj5*r00*x5204))+(((-1.0)*x5203)));
j4eval[0]=x5205;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5202))+((cj0*x5204))))));
j4eval[2]=IKsign(x5205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5206=cj5*cj5;
IkReal x5207=((1.0)*r20);
IkReal x5208=(r01*r21);
IkReal x5209=(r21*sj5);
CheckValue<IkReal> x5210 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5207))+((cj0*x5209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5210.valid){
continue;
}
CheckValue<IkReal> x5211=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5206*x5208))+(((-1.0)*r00*x5206*x5207))+((cj5*r00*x5209))+(((-1.0)*x5208)))),-1);
if(!x5211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5210.value)+(((1.5707963267949)*(x5211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5212=IKcos(j4);
IkReal x5213=IKsin(j4);
IkReal x5214=(cj5*r00);
IkReal x5215=(cj5*r10);
IkReal x5216=(cj5*r20);
IkReal x5217=((1.0)*x5212);
IkReal x5218=((1.0)*x5213);
IkReal x5219=(sj5*x5212);
IkReal x5220=(sj5*x5213);
evalcond[0]=(((r22*x5213))+((r21*x5219))+(((-1.0)*x5216*x5217)));
evalcond[1]=(((r21*x5220))+(((-1.0)*r22*x5217))+(((-1.0)*x5216*x5218)));
evalcond[2]=(((r01*x5219))+cj0+(((-1.0)*x5214*x5217))+((r02*x5213)));
evalcond[3]=(sj0+(((-1.0)*x5215*x5217))+((r12*x5213))+((r11*x5219)));
evalcond[4]=(cj0+(((-1.0)*x5215*x5218))+((r11*x5220))+(((-1.0)*r12*x5217)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5214*x5218))+((r01*x5220))+(((-1.0)*r02*x5217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5221=((1.0)*cj5);
CheckValue<IkReal> x5222 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5221)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5222.valid){
continue;
}
CheckValue<IkReal> x5223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5221)))),-1);
if(!x5223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5222.value)+(((1.5707963267949)*(x5223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5224=IKcos(j4);
IkReal x5225=IKsin(j4);
IkReal x5226=(cj5*r00);
IkReal x5227=(cj5*r10);
IkReal x5228=(cj5*r20);
IkReal x5229=((1.0)*x5224);
IkReal x5230=((1.0)*x5225);
IkReal x5231=(sj5*x5224);
IkReal x5232=(sj5*x5225);
evalcond[0]=(((r22*x5225))+((r21*x5231))+(((-1.0)*x5228*x5229)));
evalcond[1]=((((-1.0)*x5228*x5230))+((r21*x5232))+(((-1.0)*r22*x5229)));
evalcond[2]=(cj0+((r02*x5225))+((r01*x5231))+(((-1.0)*x5226*x5229)));
evalcond[3]=(sj0+(((-1.0)*x5227*x5229))+((r11*x5231))+((r12*x5225)));
evalcond[4]=(cj0+((r11*x5232))+(((-1.0)*x5227*x5230))+(((-1.0)*r12*x5229)));
evalcond[5]=((((-1.0)*x5226*x5230))+(((-1.0)*sj0))+((r01*x5232))+(((-1.0)*r02*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5233 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5233.valid){
continue;
}
CheckValue<IkReal> x5234=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5233.value)+(((1.5707963267949)*(x5234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5235=IKcos(j4);
IkReal x5236=IKsin(j4);
IkReal x5237=(cj5*r00);
IkReal x5238=(cj5*r10);
IkReal x5239=(cj5*r20);
IkReal x5240=((1.0)*x5235);
IkReal x5241=((1.0)*x5236);
IkReal x5242=(sj5*x5235);
IkReal x5243=(sj5*x5236);
evalcond[0]=((((-1.0)*x5239*x5240))+((r21*x5242))+((r22*x5236)));
evalcond[1]=((((-1.0)*r22*x5240))+(((-1.0)*x5239*x5241))+((r21*x5243)));
evalcond[2]=(cj0+((r01*x5242))+(((-1.0)*x5237*x5240))+((r02*x5236)));
evalcond[3]=(sj0+((r11*x5242))+((r12*x5236))+(((-1.0)*x5238*x5240)));
evalcond[4]=((((-1.0)*r12*x5240))+((r11*x5243))+cj0+(((-1.0)*x5238*x5241)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5243))+(((-1.0)*r02*x5240))+(((-1.0)*x5237*x5241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5244=IKcos(j0);
IkReal x5245=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x5245))+(((-0.0397)*x5244)));
evalcond[1]=((((0.163941)*x5244))+(((-1.0)*py))+(((-0.0397)*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5246=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5246;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5247=((1.0)*cj5);
IkReal x5248=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5247)));
j4eval[0]=x5248;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5247))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5249=((1.0)*cj5);
IkReal x5250=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5249)));
j4eval[0]=x5250;
j4eval[1]=IKsign(x5250);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5249))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5251=((1.0)*cj5);
CheckValue<IkReal> x5252 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5251))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5252.valid){
continue;
}
CheckValue<IkReal> x5253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5251))+(((-1.0)*r00*sj5)))),-1);
if(!x5253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5252.value)+(((1.5707963267949)*(x5253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5254=IKcos(j4);
IkReal x5255=IKsin(j4);
IkReal x5256=((1.0)*sj0);
IkReal x5257=(cj5*r00);
IkReal x5258=(cj5*r10);
IkReal x5259=(cj5*r20);
IkReal x5260=((1.0)*x5254);
IkReal x5261=((1.0)*x5255);
IkReal x5262=(sj5*x5254);
IkReal x5263=(sj5*x5255);
evalcond[0]=(((r22*x5255))+(((-1.0)*x5259*x5260))+((r21*x5262)));
evalcond[1]=((((-1.0)*x5259*x5261))+((r21*x5263))+(((-1.0)*r22*x5260)));
evalcond[2]=((((-1.0)*x5258*x5261))+cj0+(((-1.0)*r12*x5260))+((r11*x5263)));
evalcond[3]=(((r01*x5262))+(((-1.0)*x5257*x5260))+(((-1.0)*cj0))+((r02*x5255)));
evalcond[4]=((((-1.0)*x5258*x5260))+((r12*x5255))+(((-1.0)*x5256))+((r11*x5262)));
evalcond[5]=(((r01*x5263))+(((-1.0)*r02*x5260))+(((-1.0)*x5256))+(((-1.0)*x5257*x5261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5264=((1.0)*cj5);
CheckValue<IkReal> x5265 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5265.valid){
continue;
}
CheckValue<IkReal> x5266=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5264)))),-1);
if(!x5266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5265.value)+(((1.5707963267949)*(x5266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5267=IKcos(j4);
IkReal x5268=IKsin(j4);
IkReal x5269=((1.0)*sj0);
IkReal x5270=(cj5*r00);
IkReal x5271=(cj5*r10);
IkReal x5272=(cj5*r20);
IkReal x5273=((1.0)*x5267);
IkReal x5274=((1.0)*x5268);
IkReal x5275=(sj5*x5267);
IkReal x5276=(sj5*x5268);
evalcond[0]=((((-1.0)*x5272*x5273))+((r21*x5275))+((r22*x5268)));
evalcond[1]=((((-1.0)*x5272*x5274))+((r21*x5276))+(((-1.0)*r22*x5273)));
evalcond[2]=(cj0+(((-1.0)*x5271*x5274))+(((-1.0)*r12*x5273))+((r11*x5276)));
evalcond[3]=(((r02*x5268))+((r01*x5275))+(((-1.0)*x5270*x5273))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5268))+(((-1.0)*x5269))+(((-1.0)*x5271*x5273))+((r11*x5275)));
evalcond[5]=((((-1.0)*x5269))+((r01*x5276))+(((-1.0)*x5270*x5274))+(((-1.0)*r02*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5277 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5277.value)+(((1.5707963267949)*(x5278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5279=IKcos(j4);
IkReal x5280=IKsin(j4);
IkReal x5281=((1.0)*sj0);
IkReal x5282=(cj5*r00);
IkReal x5283=(cj5*r10);
IkReal x5284=(cj5*r20);
IkReal x5285=((1.0)*x5279);
IkReal x5286=((1.0)*x5280);
IkReal x5287=(sj5*x5279);
IkReal x5288=(sj5*x5280);
evalcond[0]=((((-1.0)*x5284*x5285))+((r22*x5280))+((r21*x5287)));
evalcond[1]=((((-1.0)*r22*x5285))+(((-1.0)*x5284*x5286))+((r21*x5288)));
evalcond[2]=(cj0+(((-1.0)*r12*x5285))+(((-1.0)*x5283*x5286))+((r11*x5288)));
evalcond[3]=(((r02*x5280))+((r01*x5287))+(((-1.0)*x5282*x5285))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5280))+(((-1.0)*x5281))+(((-1.0)*x5283*x5285))+((r11*x5287)));
evalcond[5]=((((-1.0)*x5281))+((r01*x5288))+(((-1.0)*r02*x5285))+(((-1.0)*x5282*x5286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5289=((1.0)*sj5);
IkReal x5290=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5290))+(((-1.0)*r10*x5289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5290))+(((-1.0)*r00*x5289)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5290))+(((-1.0)*r10*x5289))))+IKsqr(((((-1.0)*r01*x5290))+(((-1.0)*r00*x5289))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5290))+(((-1.0)*r10*x5289))), ((((-1.0)*r01*x5290))+(((-1.0)*r00*x5289))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5291=IKsin(j0);
IkReal x5292=IKcos(j0);
IkReal x5293=(cj5*r01);
IkReal x5294=((0.1157)*sj5);
IkReal x5295=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5292+x5293);
evalcond[1]=(((r10*sj5))+x5295+x5291);
evalcond[2]=((((-1.0)*r00*x5294))+(((-0.163941)*x5291))+(((-0.1157)*x5293))+(((-1.0)*px)));
evalcond[3]=((((0.163941)*x5292))+(((-0.1157)*x5295))+(((-1.0)*py))+(((-1.0)*r10*x5294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5296=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5296;
j4eval[1]=IKsign(x5296);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5297=((1.0)*cj5);
IkReal x5298=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5297)));
j4eval[0]=x5298;
j4eval[1]=IKsign(x5298);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5297))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5299=cj5*cj5;
IkReal x5300=(r01*r11);
IkReal x5301=((1.0)*r00);
IkReal x5302=(r01*sj5);
IkReal x5303=((((-1.0)*r02*r12))+((cj5*r10*x5302))+(((-1.0)*r10*x5299*x5301))+(((-1.0)*x5300))+((cj5*r00*r11*sj5))+((x5299*x5300)));
j4eval[0]=x5303;
j4eval[1]=IKsign(x5303);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5301))+((cj0*x5302))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5304=cj5*cj5;
IkReal x5305=(r01*r11);
IkReal x5306=(cj5*r00);
IkReal x5307=(r01*sj5);
CheckValue<IkReal> x5308=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5306))+(((-1.0)*r02*r12))+((cj5*r10*x5307))+(((-1.0)*r00*r10*x5304))+(((-1.0)*x5305))+((x5304*x5305)))),-1);
if(!x5308.valid){
continue;
}
CheckValue<IkReal> x5309 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5306))+((cj0*x5307)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5308.value)))+(x5309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5310=IKcos(j4);
IkReal x5311=IKsin(j4);
IkReal x5312=(cj5*r00);
IkReal x5313=(r01*sj5);
IkReal x5314=(cj5*r10);
IkReal x5315=(cj5*r20);
IkReal x5316=((1.0)*x5310);
IkReal x5317=((1.0)*x5311);
IkReal x5318=(sj5*x5311);
IkReal x5319=(sj5*x5310);
evalcond[0]=((((-1.0)*x5312*x5316))+((r02*x5311))+((x5310*x5313)));
evalcond[1]=((((-1.0)*x5314*x5316))+((r11*x5319))+((r12*x5311)));
evalcond[2]=(((r21*x5318))+(((-1.0)*x5315*x5317))+(((-1.0)*r22*x5316)));
evalcond[3]=((-1.0)+((r22*x5311))+((r21*x5319))+(((-1.0)*x5315*x5316)));
evalcond[4]=((((-1.0)*x5314*x5317))+(((-1.0)*r12*x5316))+cj0+((r11*x5318)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5312*x5317))+((x5311*x5313))+(((-1.0)*r02*x5316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5320=((1.0)*cj5);
CheckValue<IkReal> x5321 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5320)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5321.valid){
continue;
}
CheckValue<IkReal> x5322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5320)))),-1);
if(!x5322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5321.value)+(((1.5707963267949)*(x5322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5323=IKcos(j4);
IkReal x5324=IKsin(j4);
IkReal x5325=(cj5*r00);
IkReal x5326=(r01*sj5);
IkReal x5327=(cj5*r10);
IkReal x5328=(cj5*r20);
IkReal x5329=((1.0)*x5323);
IkReal x5330=((1.0)*x5324);
IkReal x5331=(sj5*x5324);
IkReal x5332=(sj5*x5323);
evalcond[0]=((((-1.0)*x5325*x5329))+((x5323*x5326))+((r02*x5324)));
evalcond[1]=(((r11*x5332))+((r12*x5324))+(((-1.0)*x5327*x5329)));
evalcond[2]=((((-1.0)*r22*x5329))+(((-1.0)*x5328*x5330))+((r21*x5331)));
evalcond[3]=((-1.0)+(((-1.0)*x5328*x5329))+((r22*x5324))+((r21*x5332)));
evalcond[4]=(cj0+((r11*x5331))+(((-1.0)*r12*x5329))+(((-1.0)*x5327*x5330)));
evalcond[5]=((((-1.0)*sj0))+((x5324*x5326))+(((-1.0)*r02*x5329))+(((-1.0)*x5325*x5330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5333=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5333.valid){
continue;
}
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5333.value)))+(x5334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5335=IKcos(j4);
IkReal x5336=IKsin(j4);
IkReal x5337=(cj5*r00);
IkReal x5338=(r01*sj5);
IkReal x5339=(cj5*r10);
IkReal x5340=(cj5*r20);
IkReal x5341=((1.0)*x5335);
IkReal x5342=((1.0)*x5336);
IkReal x5343=(sj5*x5336);
IkReal x5344=(sj5*x5335);
evalcond[0]=(((x5335*x5338))+((r02*x5336))+(((-1.0)*x5337*x5341)));
evalcond[1]=(((r12*x5336))+(((-1.0)*x5339*x5341))+((r11*x5344)));
evalcond[2]=((((-1.0)*r22*x5341))+((r21*x5343))+(((-1.0)*x5340*x5342)));
evalcond[3]=((-1.0)+((r22*x5336))+((r21*x5344))+(((-1.0)*x5340*x5341)));
evalcond[4]=(cj0+(((-1.0)*x5339*x5342))+((r11*x5343))+(((-1.0)*r12*x5341)));
evalcond[5]=((((-1.0)*r02*x5341))+((x5336*x5338))+(((-1.0)*sj0))+(((-1.0)*x5337*x5342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5345=IKsin(j0);
IkReal x5346=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.5723)*x5346))+(((-0.163941)*x5345)));
evalcond[1]=((((0.163941)*x5346))+(((-1.0)*py))+(((0.5723)*x5345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5347=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5347;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5348=((1.0)*cj5);
IkReal x5349=((((-1.0)*r01*x5348))+(((-1.0)*r00*sj5)));
j4eval[0]=x5349;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5348)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5350=((1.0)*cj5);
IkReal x5351=((((-1.0)*r01*x5350))+(((-1.0)*r00*sj5)));
j4eval[0]=x5351;
j4eval[1]=IKsign(x5351);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5350))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5352=((1.0)*cj5);
CheckValue<IkReal> x5353 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5352))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5353.valid){
continue;
}
CheckValue<IkReal> x5354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5352))+(((-1.0)*r00*sj5)))),-1);
if(!x5354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5353.value)+(((1.5707963267949)*(x5354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5355=IKcos(j4);
IkReal x5356=IKsin(j4);
IkReal x5357=((1.0)*sj0);
IkReal x5358=(cj5*r00);
IkReal x5359=(cj5*r10);
IkReal x5360=(cj5*r20);
IkReal x5361=((1.0)*x5355);
IkReal x5362=((1.0)*x5356);
IkReal x5363=(sj5*x5355);
IkReal x5364=(sj5*x5356);
evalcond[0]=((((-1.0)*x5360*x5361))+((r22*x5356))+((r21*x5363)));
evalcond[1]=((((-1.0)*r22*x5361))+(((-1.0)*x5360*x5362))+((r21*x5364)));
evalcond[2]=(cj0+(((-1.0)*x5359*x5362))+(((-1.0)*r12*x5361))+((r11*x5364)));
evalcond[3]=((((-1.0)*x5358*x5361))+((r02*x5356))+((r01*x5363))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5357))+((r12*x5356))+(((-1.0)*x5359*x5361))+((r11*x5363)));
evalcond[5]=((((-1.0)*x5357))+(((-1.0)*r02*x5361))+(((-1.0)*x5358*x5362))+((r01*x5364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5365=((1.0)*cj5);
CheckValue<IkReal> x5366 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5366.valid){
continue;
}
CheckValue<IkReal> x5367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5365)))),-1);
if(!x5367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5366.value)+(((1.5707963267949)*(x5367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5368=IKcos(j4);
IkReal x5369=IKsin(j4);
IkReal x5370=((1.0)*sj0);
IkReal x5371=(cj5*r00);
IkReal x5372=(cj5*r10);
IkReal x5373=(cj5*r20);
IkReal x5374=((1.0)*x5368);
IkReal x5375=((1.0)*x5369);
IkReal x5376=(sj5*x5368);
IkReal x5377=(sj5*x5369);
evalcond[0]=(((r22*x5369))+((r21*x5376))+(((-1.0)*x5373*x5374)));
evalcond[1]=((((-1.0)*r22*x5374))+((r21*x5377))+(((-1.0)*x5373*x5375)));
evalcond[2]=(cj0+(((-1.0)*x5372*x5375))+(((-1.0)*r12*x5374))+((r11*x5377)));
evalcond[3]=(((r02*x5369))+(((-1.0)*x5371*x5374))+((r01*x5376))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5369))+(((-1.0)*x5372*x5374))+(((-1.0)*x5370))+((r11*x5376)));
evalcond[5]=((((-1.0)*x5370))+(((-1.0)*x5371*x5375))+(((-1.0)*r02*x5374))+((r01*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5378 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5378.valid){
continue;
}
CheckValue<IkReal> x5379=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5378.value)+(((1.5707963267949)*(x5379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5380=IKcos(j4);
IkReal x5381=IKsin(j4);
IkReal x5382=((1.0)*sj0);
IkReal x5383=(cj5*r00);
IkReal x5384=(cj5*r10);
IkReal x5385=(cj5*r20);
IkReal x5386=((1.0)*x5380);
IkReal x5387=((1.0)*x5381);
IkReal x5388=(sj5*x5380);
IkReal x5389=(sj5*x5381);
evalcond[0]=((((-1.0)*x5385*x5386))+((r21*x5388))+((r22*x5381)));
evalcond[1]=((((-1.0)*x5385*x5387))+(((-1.0)*r22*x5386))+((r21*x5389)));
evalcond[2]=(cj0+(((-1.0)*x5384*x5387))+((r11*x5389))+(((-1.0)*r12*x5386)));
evalcond[3]=(((r02*x5381))+((r01*x5388))+(((-1.0)*x5383*x5386))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5384*x5386))+((r11*x5388))+((r12*x5381))+(((-1.0)*x5382)));
evalcond[5]=((((-1.0)*r02*x5386))+(((-1.0)*x5382))+((r01*x5389))+(((-1.0)*x5383*x5387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5390=IKsin(j0);
IkReal x5391=IKcos(j0);
IkReal x5392=(cj5*r01);
IkReal x5393=((0.1157)*sj5);
IkReal x5394=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5392+(((-1.0)*x5391)));
evalcond[1]=(((r10*sj5))+x5394+(((-1.0)*x5390)));
evalcond[2]=((((-0.1157)*x5392))+(((-0.163941)*x5390))+(((-1.0)*px))+(((-1.0)*r00*x5393)));
evalcond[3]=((((-0.1157)*x5394))+(((-1.0)*py))+(((-1.0)*r10*x5393))+(((0.163941)*x5391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5395=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5395;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5396=((1.0)*cj5);
IkReal x5397=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5396)));
j4eval[0]=x5397;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5396)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5398=cj5*cj5;
IkReal x5399=(r01*r11);
IkReal x5400=((1.0)*r00);
IkReal x5401=(r01*sj5);
IkReal x5402=((((-1.0)*r10*x5398*x5400))+(((-1.0)*r02*r12))+((x5398*x5399))+((cj5*r10*x5401))+(((-1.0)*x5399))+((cj5*r00*r11*sj5)));
j4eval[0]=x5402;
j4eval[1]=IKsign(x5402);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5400))+((cj0*x5401))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5403=cj5*cj5;
IkReal x5404=(r01*r11);
IkReal x5405=(cj5*r00);
IkReal x5406=(r01*sj5);
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5405))+((cj0*x5406)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
CheckValue<IkReal> x5408=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5404))+((r11*sj5*x5405))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5403))+((cj5*r10*x5406))+((x5403*x5404)))),-1);
if(!x5408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5407.value)+(((1.5707963267949)*(x5408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5409=IKcos(j4);
IkReal x5410=IKsin(j4);
IkReal x5411=(cj5*r00);
IkReal x5412=(r01*sj5);
IkReal x5413=(cj5*r10);
IkReal x5414=(cj5*r20);
IkReal x5415=((1.0)*x5409);
IkReal x5416=((1.0)*x5410);
IkReal x5417=(sj5*x5410);
IkReal x5418=(sj5*x5409);
evalcond[0]=(((r02*x5410))+(((-1.0)*x5411*x5415))+((x5409*x5412)));
evalcond[1]=(((r11*x5418))+((r12*x5410))+(((-1.0)*x5413*x5415)));
evalcond[2]=((((-1.0)*x5414*x5416))+(((-1.0)*r22*x5415))+((r21*x5417)));
evalcond[3]=((1.0)+(((-1.0)*x5414*x5415))+((r22*x5410))+((r21*x5418)));
evalcond[4]=(((r11*x5417))+cj0+(((-1.0)*r12*x5415))+(((-1.0)*x5413*x5416)));
evalcond[5]=(((x5410*x5412))+(((-1.0)*r02*x5415))+(((-1.0)*sj0))+(((-1.0)*x5411*x5416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5419=((1.0)*cj5);
CheckValue<IkReal> x5420=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5419)))),-1);
if(!x5420.valid){
continue;
}
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5419))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5420.value)))+(x5421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5422=IKcos(j4);
IkReal x5423=IKsin(j4);
IkReal x5424=(cj5*r00);
IkReal x5425=(r01*sj5);
IkReal x5426=(cj5*r10);
IkReal x5427=(cj5*r20);
IkReal x5428=((1.0)*x5422);
IkReal x5429=((1.0)*x5423);
IkReal x5430=(sj5*x5423);
IkReal x5431=(sj5*x5422);
evalcond[0]=(((x5422*x5425))+(((-1.0)*x5424*x5428))+((r02*x5423)));
evalcond[1]=(((r12*x5423))+(((-1.0)*x5426*x5428))+((r11*x5431)));
evalcond[2]=((((-1.0)*x5427*x5429))+(((-1.0)*r22*x5428))+((r21*x5430)));
evalcond[3]=((1.0)+((r22*x5423))+(((-1.0)*x5427*x5428))+((r21*x5431)));
evalcond[4]=(cj0+(((-1.0)*x5426*x5429))+((r11*x5430))+(((-1.0)*r12*x5428)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5424*x5429))+((x5423*x5425))+(((-1.0)*r02*x5428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5432 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5432.valid){
continue;
}
CheckValue<IkReal> x5433=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5432.value)+(((1.5707963267949)*(x5433.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5434=IKcos(j4);
IkReal x5435=IKsin(j4);
IkReal x5436=(cj5*r00);
IkReal x5437=(r01*sj5);
IkReal x5438=(cj5*r10);
IkReal x5439=(cj5*r20);
IkReal x5440=((1.0)*x5434);
IkReal x5441=((1.0)*x5435);
IkReal x5442=(sj5*x5435);
IkReal x5443=(sj5*x5434);
evalcond[0]=((((-1.0)*x5436*x5440))+((r02*x5435))+((x5434*x5437)));
evalcond[1]=((((-1.0)*x5438*x5440))+((r11*x5443))+((r12*x5435)));
evalcond[2]=((((-1.0)*x5439*x5441))+(((-1.0)*r22*x5440))+((r21*x5442)));
evalcond[3]=((1.0)+((r22*x5435))+(((-1.0)*x5439*x5440))+((r21*x5443)));
evalcond[4]=(cj0+(((-1.0)*r12*x5440))+(((-1.0)*x5438*x5441))+((r11*x5442)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5436*x5441))+((x5435*x5437))+(((-1.0)*r02*x5440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5444=IKcos(j0);
IkReal x5445=IKsin(j0);
evalcond[0]=((((-0.163941)*x5445))+(((-1.0)*px))+(((-0.5723)*x5444)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x5444))+(((-0.5723)*x5445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5446=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5446;
j4eval[1]=IKsign(x5446);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5447=((1.0)*cj5);
IkReal x5448=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5447)));
j4eval[0]=x5448;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5447))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5449=cj5*cj5;
IkReal x5450=((1.0)*r20);
IkReal x5451=(r01*r21);
IkReal x5452=(r21*sj5);
IkReal x5453=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5449*x5451))+((cj5*r00*x5452))+(((-1.0)*r00*x5449*x5450))+(((-1.0)*x5451)));
j4eval[0]=x5453;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5450))+((cj0*x5452)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5454=cj5*cj5;
IkReal x5455=((1.0)*r20);
IkReal x5456=(r01*r21);
IkReal x5457=(r21*sj5);
CheckValue<IkReal> x5458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5455))+((cj0*x5457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5458.valid){
continue;
}
CheckValue<IkReal> x5459=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5454*x5456))+((cj5*r00*x5457))+(((-1.0)*x5456))+(((-1.0)*r00*x5454*x5455)))),-1);
if(!x5459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5458.value)+(((1.5707963267949)*(x5459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5460=IKcos(j4);
IkReal x5461=IKsin(j4);
IkReal x5462=(cj5*r00);
IkReal x5463=(cj5*r10);
IkReal x5464=(cj5*r20);
IkReal x5465=((1.0)*x5460);
IkReal x5466=((1.0)*x5461);
IkReal x5467=(sj5*x5460);
IkReal x5468=(sj5*x5461);
evalcond[0]=((((-1.0)*x5464*x5465))+((r22*x5461))+((r21*x5467)));
evalcond[1]=((((-1.0)*x5464*x5466))+((r21*x5468))+(((-1.0)*r22*x5465)));
evalcond[2]=(((r01*x5467))+cj0+((r02*x5461))+(((-1.0)*x5462*x5465)));
evalcond[3]=((((-1.0)*x5463*x5465))+sj0+((r11*x5467))+((r12*x5461)));
evalcond[4]=((((-1.0)*x5463*x5466))+cj0+((r11*x5468))+(((-1.0)*r12*x5465)));
evalcond[5]=(((r01*x5468))+(((-1.0)*sj0))+(((-1.0)*r02*x5465))+(((-1.0)*x5462*x5466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5469=((1.0)*cj5);
CheckValue<IkReal> x5470 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5469))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5470.valid){
continue;
}
CheckValue<IkReal> x5471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5469)))),-1);
if(!x5471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5470.value)+(((1.5707963267949)*(x5471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5472=IKcos(j4);
IkReal x5473=IKsin(j4);
IkReal x5474=(cj5*r00);
IkReal x5475=(cj5*r10);
IkReal x5476=(cj5*r20);
IkReal x5477=((1.0)*x5472);
IkReal x5478=((1.0)*x5473);
IkReal x5479=(sj5*x5472);
IkReal x5480=(sj5*x5473);
evalcond[0]=((((-1.0)*x5476*x5477))+((r22*x5473))+((r21*x5479)));
evalcond[1]=((((-1.0)*x5476*x5478))+((r21*x5480))+(((-1.0)*r22*x5477)));
evalcond[2]=(cj0+((r01*x5479))+(((-1.0)*x5474*x5477))+((r02*x5473)));
evalcond[3]=(sj0+(((-1.0)*x5475*x5477))+((r12*x5473))+((r11*x5479)));
evalcond[4]=(cj0+((r11*x5480))+(((-1.0)*x5475*x5478))+(((-1.0)*r12*x5477)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5480))+(((-1.0)*x5474*x5478))+(((-1.0)*r02*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5481 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5481.valid){
continue;
}
CheckValue<IkReal> x5482=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5481.value)+(((1.5707963267949)*(x5482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5483=IKcos(j4);
IkReal x5484=IKsin(j4);
IkReal x5485=(cj5*r00);
IkReal x5486=(cj5*r10);
IkReal x5487=(cj5*r20);
IkReal x5488=((1.0)*x5483);
IkReal x5489=((1.0)*x5484);
IkReal x5490=(sj5*x5483);
IkReal x5491=(sj5*x5484);
evalcond[0]=(((r21*x5490))+(((-1.0)*x5487*x5488))+((r22*x5484)));
evalcond[1]=((((-1.0)*r22*x5488))+((r21*x5491))+(((-1.0)*x5487*x5489)));
evalcond[2]=(((r01*x5490))+cj0+(((-1.0)*x5485*x5488))+((r02*x5484)));
evalcond[3]=(sj0+(((-1.0)*x5486*x5488))+((r12*x5484))+((r11*x5490)));
evalcond[4]=((((-1.0)*r12*x5488))+cj0+(((-1.0)*x5486*x5489))+((r11*x5491)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5491))+(((-1.0)*x5485*x5489))+(((-1.0)*r02*x5488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5492=cj1*cj1;
IkReal x5493=(cj2*sj1);
IkReal x5494=(cj5*r01);
IkReal x5495=(r00*sj5);
IkReal x5496=((1000000.0)*py);
IkReal x5497=(cj1*sj2);
IkReal x5498=(cj1*sj1);
IkReal x5499=(sj2*x5492);
IkReal x5500=((115700.0)*r10*sj5);
IkReal x5501=((115700.0)*cj5*r11);
CheckValue<IkReal> x5502=IKPowWithIntegerCheck(((((-1144600.0)*cj2*x5499))+(((572300.0)*x5498))+(((572300.0)*cj2*sj2))+(((-612000.0)*cj1*x5493))+(((-612000.0)*x5499))+(((-1144600.0)*cj1*cj2*x5493))),-1);
if(!x5502.valid){
continue;
}
CheckValue<IkReal> x5503=IKPowWithIntegerCheck(((((-1.0)*x5493))+(((-1.0)*x5497))),-1);
if(!x5503.valid){
continue;
}
if( IKabs(((x5502.value)*(((((163941.0)*x5494))+(((163941.0)*x5495))+(((-1.0)*x5497*x5500))+(((-1.0)*x5497*x5501))+(((-1.0)*x5493*x5496))+(((-1.0)*x5496*x5497))+(((-1.0)*x5493*x5501))+(((-1.0)*x5493*x5500)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5503.value)*(((((-1.0)*x5494))+(((-1.0)*x5495)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5502.value)*(((((163941.0)*x5494))+(((163941.0)*x5495))+(((-1.0)*x5497*x5500))+(((-1.0)*x5497*x5501))+(((-1.0)*x5493*x5496))+(((-1.0)*x5496*x5497))+(((-1.0)*x5493*x5501))+(((-1.0)*x5493*x5500))))))+IKsqr(((x5503.value)*(((((-1.0)*x5494))+(((-1.0)*x5495))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((x5502.value)*(((((163941.0)*x5494))+(((163941.0)*x5495))+(((-1.0)*x5497*x5500))+(((-1.0)*x5497*x5501))+(((-1.0)*x5493*x5496))+(((-1.0)*x5496*x5497))+(((-1.0)*x5493*x5501))+(((-1.0)*x5493*x5500))))), ((x5503.value)*(((((-1.0)*x5494))+(((-1.0)*x5495))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5504=IKcos(j0);
IkReal x5505=IKsin(j0);
IkReal x5506=(cj5*r01);
IkReal x5507=((0.1157)*sj5);
IkReal x5508=((1.0)*sj1);
IkReal x5509=(cj5*r11);
IkReal x5510=((1.0)*cj1*sj2);
IkReal x5511=((0.5723)*sj1*sj2);
IkReal x5512=(cj2*x5504);
IkReal x5513=(cj1*x5505);
evalcond[0]=(((r00*sj5))+x5506+(((-1.0)*x5504*x5510))+(((-1.0)*x5508*x5512)));
evalcond[1]=((((-1.0)*cj2*x5505*x5508))+x5509+((r10*sj5))+(((-1.0)*x5505*x5510)));
evalcond[2]=((((-0.163941)*x5505))+(((-1.0)*r00*x5507))+(((-1.0)*px))+(((-0.1157)*x5506))+(((-1.0)*x5504*x5511))+(((0.5723)*cj1*x5512))+(((0.612)*cj1*x5504)));
evalcond[3]=((((-1.0)*r10*x5507))+(((0.612)*x5513))+(((-1.0)*py))+(((-0.1157)*x5509))+(((-1.0)*x5505*x5511))+(((0.163941)*x5504))+(((0.5723)*cj2*x5513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5514=((1.0)*cj5);
IkReal x5515=((((-1.0)*r01*x5514))+(((-1.0)*r00*sj5)));
j4eval[0]=x5515;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5514)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5516=((1.0)*cj5);
IkReal x5517=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5516)));
j4eval[0]=x5517;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5516)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5518=((1.0)*sj0);
IkReal x5519=((1.0)*cj0);
IkReal x5520=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5520;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x5518))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5519))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x5519))+(((-1.0)*r12*x5518))))));
j4eval[2]=IKsign(x5520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5521=((-1.0)*r20);
IkReal x5523 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5523)==0){
continue;
}
IkReal x5522=pow(x5523,-0.5);
CheckValue<IkReal> x5524 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5521),IKFAST_ATAN2_MAGTHRESH);
if(!x5524.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5524.value));
IkReal gconst115=(r21*x5522);
IkReal gconst116=(x5521*x5522);
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5525.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5526=((-1.0)*r20);
IkReal x5527=x5522;
CheckValue<IkReal> x5529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5526),IKFAST_ATAN2_MAGTHRESH);
if(!x5529.valid){
continue;
}
IkReal x5528=((-1.0)*(x5529.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5528;
IkReal gconst114=x5528;
IkReal gconst115=(r21*x5527);
IkReal gconst116=(x5526*x5527);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5530=((-1.0)*r20);
IkReal x5531=x5522;
CheckValue<IkReal> x5533 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5530),IKFAST_ATAN2_MAGTHRESH);
if(!x5533.valid){
continue;
}
IkReal x5532=((-1.0)*(x5533.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5532;
IkReal gconst114=x5532;
IkReal gconst115=(r21*x5531);
IkReal gconst116=(x5530*x5531);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5534=((-1.0)*r20);
IkReal x5535=x5522;
CheckValue<IkReal> x5537 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5534),IKFAST_ATAN2_MAGTHRESH);
if(!x5537.valid){
continue;
}
IkReal x5536=((-1.0)*(x5537.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5536;
IkReal gconst114=x5536;
IkReal gconst115=(r21*x5535);
IkReal gconst116=(x5534*x5535);
IkReal x5538=((1.0)*(r22*r22));
CheckValue<IkReal> x5542=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5538))),-1);
if(!x5542.valid){
continue;
}
IkReal x5539=x5542.value;
IkReal x5540=((1.0)*x5539);
IkReal x5541=((((-1.0)*x5538))+(((-1.0)*x5540*(r20*r20*r20*r20)))+(((-1.0)*x5540*(r21*r21*r21*r21)))+(((-2.0)*x5539*(r20*r20)*(r21*r21))));
j4eval[0]=x5541;
j4eval[1]=IKsign(x5541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5543=(cj2*sj1);
IkReal x5544=(gconst115*r21);
IkReal x5545=(cj1*sj2);
IkReal x5546=((1.0)*gconst116*r20);
CheckValue<IkReal> x5547 = IKatan2WithCheck(IkReal((((r22*x5545))+((r22*x5543)))),IkReal((((x5543*x5544))+(((-1.0)*x5543*x5546))+(((-1.0)*x5545*x5546))+((x5544*x5545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5547.valid){
continue;
}
CheckValue<IkReal> x5548=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5546))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5544))+(((-1.0)*(x5544*x5544))))),-1);
if(!x5548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5547.value)+(((1.5707963267949)*(x5548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5549=IKsin(j4);
IkReal x5550=IKcos(j4);
IkReal x5551=(sj1*sj2);
IkReal x5552=((1.0)*x5550);
IkReal x5553=((1.0)*cj1*cj2);
IkReal x5554=(gconst115*x5549);
IkReal x5555=(gconst115*x5550);
IkReal x5556=((1.0)*gconst116*x5549);
evalcond[0]=((((-1.0)*r20*x5556))+((r21*x5554))+(((-1.0)*r22*x5552)));
evalcond[1]=(cj0+((r11*x5554))+(((-1.0)*r12*x5552))+(((-1.0)*r10*x5556)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5556))+((r01*x5554))+(((-1.0)*r02*x5552)));
evalcond[3]=(((cj2*sj1))+((r21*x5555))+(((-1.0)*gconst116*r20*x5552))+((cj1*sj2))+((r22*x5549)));
evalcond[4]=(((r01*x5555))+((r02*x5549))+((cj0*x5551))+(((-1.0)*cj0*x5553))+(((-1.0)*gconst116*r00*x5552)));
evalcond[5]=((((-1.0)*sj0*x5553))+((r12*x5549))+((r11*x5555))+(((-1.0)*gconst116*r10*x5552))+((sj0*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5557=((1.0)*gconst116);
CheckValue<IkReal> x5558 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5557))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5558.valid){
continue;
}
CheckValue<IkReal> x5559=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5557)))),-1);
if(!x5559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5558.value)+(((1.5707963267949)*(x5559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5560=IKsin(j4);
IkReal x5561=IKcos(j4);
IkReal x5562=(sj1*sj2);
IkReal x5563=((1.0)*x5561);
IkReal x5564=((1.0)*cj1*cj2);
IkReal x5565=(gconst115*x5560);
IkReal x5566=(gconst115*x5561);
IkReal x5567=((1.0)*gconst116*x5560);
evalcond[0]=((((-1.0)*r22*x5563))+((r21*x5565))+(((-1.0)*r20*x5567)));
evalcond[1]=((((-1.0)*r12*x5563))+cj0+(((-1.0)*r10*x5567))+((r11*x5565)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5567))+(((-1.0)*r02*x5563))+((r01*x5565)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5560))+((r21*x5566))+(((-1.0)*gconst116*r20*x5563)));
evalcond[4]=(((r02*x5560))+((cj0*x5562))+(((-1.0)*gconst116*r00*x5563))+(((-1.0)*cj0*x5564))+((r01*x5566)));
evalcond[5]=((((-1.0)*sj0*x5564))+((r11*x5566))+(((-1.0)*gconst116*r10*x5563))+((sj0*x5562))+((r12*x5560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5568=((1.0)*gconst116);
CheckValue<IkReal> x5569=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5568)))),-1);
if(!x5569.valid){
continue;
}
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5568))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5569.value)))+(x5570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5571=IKsin(j4);
IkReal x5572=IKcos(j4);
IkReal x5573=(sj1*sj2);
IkReal x5574=((1.0)*x5572);
IkReal x5575=((1.0)*cj1*cj2);
IkReal x5576=(gconst115*x5571);
IkReal x5577=(gconst115*x5572);
IkReal x5578=((1.0)*gconst116*x5571);
evalcond[0]=(((r21*x5576))+(((-1.0)*r20*x5578))+(((-1.0)*r22*x5574)));
evalcond[1]=(cj0+(((-1.0)*r10*x5578))+(((-1.0)*r12*x5574))+((r11*x5576)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5574))+(((-1.0)*r00*x5578))+((r01*x5576)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5571))+((r21*x5577))+(((-1.0)*gconst116*r20*x5574)));
evalcond[4]=(((r02*x5571))+((cj0*x5573))+(((-1.0)*gconst116*r00*x5574))+(((-1.0)*cj0*x5575))+((r01*x5577)));
evalcond[5]=((((-1.0)*sj0*x5575))+((r11*x5577))+((r12*x5571))+((sj0*x5573))+(((-1.0)*gconst116*r10*x5574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5579=((-1.0)*r21);
IkReal x5581 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5581)==0){
continue;
}
IkReal x5580=pow(x5581,-0.5);
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(x5579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5582.value))));
IkReal gconst118=(x5579*x5580);
IkReal gconst119=((1.0)*r20*x5580);
CheckValue<IkReal> x5583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5583.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5583.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5584=((-1.0)*r21);
CheckValue<IkReal> x5587 = IKatan2WithCheck(IkReal(x5584),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5587.valid){
continue;
}
IkReal x5585=((1.0)*(x5587.value));
IkReal x5586=x5580;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5585)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5585)));
IkReal gconst118=(x5584*x5586);
IkReal gconst119=((1.0)*r20*x5586);
IkReal x5588=r22*r22;
IkReal x5589=((1.0)*x5588);
CheckValue<IkReal> x5593=IKPowWithIntegerCheck(((-1.0)+x5588),-1);
if(!x5593.valid){
continue;
}
IkReal x5590=x5593.value;
if((((1.0)+(((-1.0)*x5589)))) < -0.00001)
continue;
IkReal x5591=IKsqrt(((1.0)+(((-1.0)*x5589))));
IkReal x5592=(cj0*x5590*x5591);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5592+(((-1.0)*x5589*x5592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5594=((-1.0)*r21);
CheckValue<IkReal> x5597 = IKatan2WithCheck(IkReal(x5594),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5597.valid){
continue;
}
IkReal x5595=((1.0)*(x5597.value));
IkReal x5596=x5580;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5595)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5595)));
IkReal gconst118=(x5594*x5596);
IkReal gconst119=((1.0)*r20*x5596);
IkReal x5598=r22*r22;
IkReal x5599=((1.0)*x5598);
CheckValue<IkReal> x5603=IKPowWithIntegerCheck(((-1.0)+x5598),-1);
if(!x5603.valid){
continue;
}
IkReal x5600=x5603.value;
if((((1.0)+(((-1.0)*x5599)))) < -0.00001)
continue;
IkReal x5601=IKsqrt(((1.0)+(((-1.0)*x5599))));
IkReal x5602=(sj0*x5600*x5601);
j4eval[0]=((IKabs((x5602+(((-1.0)*x5599*x5602)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5604=((-1.0)*r21);
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal(x5604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
IkReal x5605=((1.0)*(x5607.value));
IkReal x5606=x5580;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5605)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5605)));
IkReal gconst118=(x5604*x5606);
IkReal gconst119=((1.0)*r20*x5606);
IkReal x5608=r22*r22;
IkReal x5609=(r12*sj0);
IkReal x5610=(cj0*r02);
CheckValue<IkReal> x5614=IKPowWithIntegerCheck(((-1.0)+x5608),-1);
if(!x5614.valid){
continue;
}
IkReal x5611=x5614.value;
if((((1.0)+(((-1.0)*x5608)))) < -0.00001)
continue;
IkReal x5612=IKsqrt(((1.0)+(((-1.0)*x5608))));
IkReal x5613=(r22*x5611*x5612);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5610))+(((-1.0)*x5609)))))+(IKabs((((x5609*x5613))+((x5610*x5613))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5615=((1.0)*sj0);
IkReal x5616=((1.0)*gconst118);
CheckValue<IkReal> x5617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5616)))),-1);
if(!x5617.valid){
continue;
}
CheckValue<IkReal> x5618 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5615))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5615))+((cj0*gconst119*r00))+(((-1.0)*cj0*r01*x5616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5617.value)))+(x5618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5619=IKsin(j4);
IkReal x5620=IKcos(j4);
IkReal x5621=(gconst118*r01);
IkReal x5622=(sj1*sj2);
IkReal x5623=(gconst119*r20);
IkReal x5624=(gconst119*r10);
IkReal x5625=(gconst119*r00);
IkReal x5626=(gconst118*r21);
IkReal x5627=(gconst118*r11);
IkReal x5628=((1.0)*x5620);
IkReal x5629=((1.0)*cj1*cj2);
IkReal x5630=((1.0)*x5619);
evalcond[0]=((((-1.0)*x5623*x5630))+((x5619*x5626))+(((-1.0)*r22*x5628)));
evalcond[1]=(((x5619*x5627))+cj0+(((-1.0)*r12*x5628))+(((-1.0)*x5624*x5630)));
evalcond[2]=((((-1.0)*sj0))+((x5619*x5621))+(((-1.0)*r02*x5628))+(((-1.0)*x5625*x5630)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5623*x5628))+((x5620*x5626))+((r22*x5619)));
evalcond[4]=(((cj0*x5622))+((r02*x5619))+(((-1.0)*cj0*x5629))+(((-1.0)*x5625*x5628))+((x5620*x5621)));
evalcond[5]=(((sj0*x5622))+((r12*x5619))+(((-1.0)*x5624*x5628))+((x5620*x5627))+(((-1.0)*sj0*x5629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5631=((1.0)*gconst119);
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5631))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
CheckValue<IkReal> x5633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5631))+(((-1.0)*gconst118*r10)))),-1);
if(!x5633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5632.value)+(((1.5707963267949)*(x5633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5634=IKsin(j4);
IkReal x5635=IKcos(j4);
IkReal x5636=(gconst118*r01);
IkReal x5637=(sj1*sj2);
IkReal x5638=(gconst119*r20);
IkReal x5639=(gconst119*r10);
IkReal x5640=(gconst119*r00);
IkReal x5641=(gconst118*r21);
IkReal x5642=(gconst118*r11);
IkReal x5643=((1.0)*x5635);
IkReal x5644=((1.0)*cj1*cj2);
IkReal x5645=((1.0)*x5634);
evalcond[0]=((((-1.0)*r22*x5643))+(((-1.0)*x5638*x5645))+((x5634*x5641)));
evalcond[1]=(cj0+(((-1.0)*r12*x5643))+((x5634*x5642))+(((-1.0)*x5639*x5645)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5643))+(((-1.0)*x5640*x5645))+((x5634*x5636)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5638*x5643))+((cj1*sj2))+((x5635*x5641))+((r22*x5634)));
evalcond[4]=(((cj0*x5637))+(((-1.0)*cj0*x5644))+(((-1.0)*x5640*x5643))+((x5635*x5636))+((r02*x5634)));
evalcond[5]=(((r12*x5634))+(((-1.0)*sj0*x5644))+((x5635*x5642))+((sj0*x5637))+(((-1.0)*x5639*x5643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5646=((1.0)*gconst119);
CheckValue<IkReal> x5647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5646)))),-1);
if(!x5647.valid){
continue;
}
CheckValue<IkReal> x5648 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5647.value)))+(x5648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5649=IKsin(j4);
IkReal x5650=IKcos(j4);
IkReal x5651=(gconst118*r01);
IkReal x5652=(sj1*sj2);
IkReal x5653=(gconst119*r20);
IkReal x5654=(gconst119*r10);
IkReal x5655=(gconst119*r00);
IkReal x5656=(gconst118*r21);
IkReal x5657=(gconst118*r11);
IkReal x5658=((1.0)*x5650);
IkReal x5659=((1.0)*cj1*cj2);
IkReal x5660=((1.0)*x5649);
evalcond[0]=((((-1.0)*r22*x5658))+((x5649*x5656))+(((-1.0)*x5653*x5660)));
evalcond[1]=((((-1.0)*r12*x5658))+cj0+((x5649*x5657))+(((-1.0)*x5654*x5660)));
evalcond[2]=((((-1.0)*sj0))+((x5649*x5651))+(((-1.0)*r02*x5658))+(((-1.0)*x5655*x5660)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5653*x5658))+((cj1*sj2))+((r22*x5649))+((x5650*x5656)));
evalcond[4]=(((cj0*x5652))+(((-1.0)*x5655*x5658))+((x5650*x5651))+(((-1.0)*cj0*x5659))+((r02*x5649)));
evalcond[5]=((((-1.0)*x5654*x5658))+(((-1.0)*sj0*x5659))+((r12*x5649))+((sj0*x5652))+((x5650*x5657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5661=((-1.0)*r10);
IkReal x5663 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5663)==0){
continue;
}
IkReal x5662=pow(x5663,-0.5);
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5661),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5664.value));
IkReal gconst121=(r11*x5662);
IkReal gconst122=(x5661*x5662);
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5665.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5666=((-1.0)*r10);
IkReal x5667=x5662;
CheckValue<IkReal> x5669 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5666),IKFAST_ATAN2_MAGTHRESH);
if(!x5669.valid){
continue;
}
IkReal x5668=((-1.0)*(x5669.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5668;
IkReal gconst120=x5668;
IkReal gconst121=(r11*x5667);
IkReal gconst122=(x5666*x5667);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5670=((1.0)*sj0);
IkReal x5671=((1.0)*gconst121);
CheckValue<IkReal> x5672=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5671)))),-1);
if(!x5672.valid){
continue;
}
CheckValue<IkReal> x5673 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5670))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x5670))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5671))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5672.value)))+(x5673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5674=IKsin(j4);
IkReal x5675=IKcos(j4);
IkReal x5676=(gconst121*r11);
IkReal x5677=(sj1*sj2);
IkReal x5678=(gconst122*r00);
IkReal x5679=(gconst122*r10);
IkReal x5680=(gconst122*r20);
IkReal x5681=((1.0)*x5675);
IkReal x5682=((1.0)*cj1*cj2);
IkReal x5683=((1.0)*x5674);
IkReal x5684=(gconst121*x5674);
IkReal x5685=(gconst121*x5675);
evalcond[0]=((((-1.0)*x5680*x5683))+(((-1.0)*r22*x5681))+((r21*x5684)));
evalcond[1]=(cj0+(((-1.0)*x5679*x5683))+(((-1.0)*r12*x5681))+((x5674*x5676)));
evalcond[2]=((((-1.0)*r02*x5681))+(((-1.0)*sj0))+(((-1.0)*x5678*x5683))+((r01*x5684)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5680*x5681))+((r22*x5674))+((r21*x5685)));
evalcond[4]=(((r02*x5674))+((cj0*x5677))+(((-1.0)*cj0*x5682))+(((-1.0)*x5678*x5681))+((r01*x5685)));
evalcond[5]=(((x5675*x5676))+((sj0*x5677))+(((-1.0)*sj0*x5682))+(((-1.0)*x5679*x5681))+((r12*x5674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5686=((1.0)*gconst122);
CheckValue<IkReal> x5687=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5686)))),-1);
if(!x5687.valid){
continue;
}
CheckValue<IkReal> x5688 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5686))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5687.value)))+(x5688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5689=IKsin(j4);
IkReal x5690=IKcos(j4);
IkReal x5691=(gconst121*r11);
IkReal x5692=(sj1*sj2);
IkReal x5693=(gconst122*r00);
IkReal x5694=(gconst122*r10);
IkReal x5695=(gconst122*r20);
IkReal x5696=((1.0)*x5690);
IkReal x5697=((1.0)*cj1*cj2);
IkReal x5698=((1.0)*x5689);
IkReal x5699=(gconst121*x5689);
IkReal x5700=(gconst121*x5690);
evalcond[0]=((((-1.0)*r22*x5696))+((r21*x5699))+(((-1.0)*x5695*x5698)));
evalcond[1]=(cj0+((x5689*x5691))+(((-1.0)*r12*x5696))+(((-1.0)*x5694*x5698)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5696))+((r01*x5699))+(((-1.0)*x5693*x5698)));
evalcond[3]=(((cj2*sj1))+((r22*x5689))+((cj1*sj2))+((r21*x5700))+(((-1.0)*x5695*x5696)));
evalcond[4]=((((-1.0)*cj0*x5697))+((r02*x5689))+((r01*x5700))+((cj0*x5692))+(((-1.0)*x5693*x5696)));
evalcond[5]=(((x5690*x5691))+(((-1.0)*sj0*x5697))+((r12*x5689))+((sj0*x5692))+(((-1.0)*x5694*x5696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5701=((-1.0)*r11);
IkReal x5703 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5703)==0){
continue;
}
IkReal x5702=pow(x5703,-0.5);
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal(x5701),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5704.value))));
IkReal gconst124=(x5701*x5702);
IkReal gconst125=((1.0)*r10*x5702);
CheckValue<IkReal> x5705 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5705.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5705.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5706=((-1.0)*r11);
CheckValue<IkReal> x5709 = IKatan2WithCheck(IkReal(x5706),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5709.valid){
continue;
}
IkReal x5707=((1.0)*(x5709.value));
IkReal x5708=x5702;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5707)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5707)));
IkReal gconst124=(x5706*x5708);
IkReal gconst125=((1.0)*r10*x5708);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5710=((-1.0)*r11);
CheckValue<IkReal> x5713 = IKatan2WithCheck(IkReal(x5710),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5713.valid){
continue;
}
IkReal x5711=((1.0)*(x5713.value));
IkReal x5712=x5702;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5711)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5711)));
IkReal gconst124=(x5710*x5712);
IkReal gconst125=((1.0)*r10*x5712);
IkReal x5714=r12*r12;
IkReal x5715=((1.0)*sj0);
IkReal x5716=(cj0*r02);
IkReal x5717=x5702;
j4eval[0]=((IKabs(((((-1.0)*x5715*x5717))+((r12*x5716*x5717))+((sj0*x5714*x5717)))))+(IKabs(((((-1.0)*x5716))+(((-1.0)*r12*x5715))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5718=((-1.0)*r11);
CheckValue<IkReal> x5721 = IKatan2WithCheck(IkReal(x5718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5721.valid){
continue;
}
IkReal x5719=((1.0)*(x5721.value));
IkReal x5720=x5702;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5719)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5719)));
IkReal gconst124=(x5718*x5720);
IkReal gconst125=((1.0)*r10*x5720);
IkReal x5722=r12*r12;
IkReal x5723=((1.0)+(((-1.0)*x5722)));
IkReal x5724=(cj2*r22*sj1);
IkReal x5725=(cj1*r22*sj2);
CheckValue<IkReal> x5732=IKPowWithIntegerCheck(x5723,-1);
if(!x5732.valid){
continue;
}
IkReal x5726=x5732.value;
CheckValue<IkReal> x5733=IKPowWithIntegerCheck(((-1.0)+x5722),-1);
if(!x5733.valid){
continue;
}
IkReal x5727=x5733.value;
IkReal x5728=((1.0)*x5726);
if((x5723) < -0.00001)
continue;
IkReal x5729=IKsqrt(x5723);
IkReal x5730=((1.0)*r12*x5727*x5729);
IkReal x5731=((((-2.0)*r10*r11*r20*r21*x5726))+(((-1.0)*x5728*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5728*(r10*r10)*(r20*r20))));
j4eval[0]=x5731;
j4eval[1]=IKsign(x5731);
j4eval[2]=((IKabs(((((-1.0)*x5725*x5730))+(((-1.0)*x5724*x5730)))))+(IKabs((x5724+x5725))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5734=(gconst124*r21);
IkReal x5735=(cj1*sj2);
IkReal x5736=(cj2*sj1);
IkReal x5737=(gconst125*r20);
CheckValue<IkReal> x5738 = IKatan2WithCheck(IkReal((((r22*x5735))+((r22*x5736)))),IkReal(((((-1.0)*x5735*x5737))+((x5734*x5736))+((x5734*x5735))+(((-1.0)*x5736*x5737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5738.valid){
continue;
}
CheckValue<IkReal> x5739=IKPowWithIntegerCheck(IKsign(((((2.0)*x5734*x5737))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5737*x5737)))+(((-1.0)*(x5734*x5734))))),-1);
if(!x5739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5738.value)+(((1.5707963267949)*(x5739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5740=IKsin(j4);
IkReal x5741=IKcos(j4);
IkReal x5742=(sj1*sj2);
IkReal x5743=(gconst125*r20);
IkReal x5744=(gconst124*r01);
IkReal x5745=(gconst125*r00);
IkReal x5746=(gconst125*r10);
IkReal x5747=((1.0)*x5741);
IkReal x5748=((1.0)*cj1*cj2);
IkReal x5749=((1.0)*x5740);
IkReal x5750=(gconst124*x5740);
IkReal x5751=(gconst124*x5741);
evalcond[0]=(((r21*x5750))+(((-1.0)*r22*x5747))+(((-1.0)*x5743*x5749)));
evalcond[1]=(cj0+(((-1.0)*x5746*x5749))+(((-1.0)*r12*x5747))+((r11*x5750)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5745*x5749))+(((-1.0)*r02*x5747))+((x5740*x5744)));
evalcond[3]=(((cj2*sj1))+((r21*x5751))+((r22*x5740))+((cj1*sj2))+(((-1.0)*x5743*x5747)));
evalcond[4]=(((x5741*x5744))+(((-1.0)*x5745*x5747))+(((-1.0)*cj0*x5748))+((cj0*x5742))+((r02*x5740)));
evalcond[5]=((((-1.0)*x5746*x5747))+((sj0*x5742))+((r11*x5751))+((r12*x5740))+(((-1.0)*sj0*x5748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5752=((1.0)*sj0);
IkReal x5753=((1.0)*cj0);
CheckValue<IkReal> x5754 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5752))+(((-1.0)*r02*x5753)))),IkReal(((((-1.0)*gconst124*r11*x5752))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5754.valid){
continue;
}
CheckValue<IkReal> x5755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5754.value)+(((1.5707963267949)*(x5755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5756=IKsin(j4);
IkReal x5757=IKcos(j4);
IkReal x5758=(sj1*sj2);
IkReal x5759=(gconst125*r20);
IkReal x5760=(gconst124*r01);
IkReal x5761=(gconst125*r00);
IkReal x5762=(gconst125*r10);
IkReal x5763=((1.0)*x5757);
IkReal x5764=((1.0)*cj1*cj2);
IkReal x5765=((1.0)*x5756);
IkReal x5766=(gconst124*x5756);
IkReal x5767=(gconst124*x5757);
evalcond[0]=(((r21*x5766))+(((-1.0)*x5759*x5765))+(((-1.0)*r22*x5763)));
evalcond[1]=(cj0+(((-1.0)*r12*x5763))+((r11*x5766))+(((-1.0)*x5762*x5765)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5761*x5765))+((x5756*x5760))+(((-1.0)*r02*x5763)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5767))+(((-1.0)*x5759*x5763))+((r22*x5756)));
evalcond[4]=((((-1.0)*x5761*x5763))+((x5757*x5760))+(((-1.0)*cj0*x5764))+((r02*x5756))+((cj0*x5758)));
evalcond[5]=((((-1.0)*sj0*x5764))+((r11*x5767))+(((-1.0)*x5762*x5763))+((sj0*x5758))+((r12*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5768=((1.0)*gconst125);
CheckValue<IkReal> x5769=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5768))+(((-1.0)*gconst124*r00)))),-1);
if(!x5769.valid){
continue;
}
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x5768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5769.value)))+(x5770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5771=IKsin(j4);
IkReal x5772=IKcos(j4);
IkReal x5773=(sj1*sj2);
IkReal x5774=(gconst125*r20);
IkReal x5775=(gconst124*r01);
IkReal x5776=(gconst125*r00);
IkReal x5777=(gconst125*r10);
IkReal x5778=((1.0)*x5772);
IkReal x5779=((1.0)*cj1*cj2);
IkReal x5780=((1.0)*x5771);
IkReal x5781=(gconst124*x5771);
IkReal x5782=(gconst124*x5772);
evalcond[0]=(((r21*x5781))+(((-1.0)*x5774*x5780))+(((-1.0)*r22*x5778)));
evalcond[1]=(cj0+(((-1.0)*r12*x5778))+((r11*x5781))+(((-1.0)*x5777*x5780)));
evalcond[2]=((((-1.0)*sj0))+((x5771*x5775))+(((-1.0)*x5776*x5780))+(((-1.0)*r02*x5778)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5774*x5778))+((r21*x5782))+((r22*x5771)));
evalcond[4]=((((-1.0)*x5776*x5778))+(((-1.0)*cj0*x5779))+((cj0*x5773))+((r02*x5771))+((x5772*x5775)));
evalcond[5]=((((-1.0)*x5777*x5778))+(((-1.0)*sj0*x5779))+((r11*x5782))+((r12*x5771))+((sj0*x5773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5783=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5783;
j4eval[1]=IKsign(x5783);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5784=((1.0)*cj5);
IkReal x5785=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5784)));
j4eval[0]=x5785;
j4eval[1]=((IKabs(((((-1.0)*r20*x5784))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5786=cj5*cj5;
IkReal x5787=r11*r11;
IkReal x5788=(cj5*r10);
IkReal x5789=(r11*sj5);
IkReal x5790=((((2.0)*x5788*x5789))+(((-1.0)*(r12*r12)))+(((-1.0)*x5786*(r10*r10)))+(((-1.0)*x5787))+((x5786*x5787)));
j4eval[0]=x5790;
j4eval[1]=IKsign(x5790);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5788))+x5789))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5791=cj5*cj5;
IkReal x5792=r11*r11;
IkReal x5793=(cj5*r10);
IkReal x5794=(r11*sj5);
CheckValue<IkReal> x5795=IKPowWithIntegerCheck(IKsign((((x5791*x5792))+(((-1.0)*x5791*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x5792))+(((2.0)*x5793*x5794)))),-1);
if(!x5795.valid){
continue;
}
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(((((-1.0)*x5793))+x5794)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5795.value)))+(x5796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5797=IKcos(j4);
IkReal x5798=IKsin(j4);
IkReal x5799=(cj5*r00);
IkReal x5800=(cj5*r10);
IkReal x5801=(r21*sj5);
IkReal x5802=(cj5*r20);
IkReal x5803=((1.0)*x5797);
IkReal x5804=((1.0)*x5798);
IkReal x5805=(sj5*x5798);
IkReal x5806=(sj5*x5797);
evalcond[0]=((((-1.0)*x5800*x5803))+((r12*x5798))+((r11*x5806)));
evalcond[1]=((((-1.0)*r22*x5803))+(((-1.0)*x5802*x5804))+((x5798*x5801)));
evalcond[2]=(((r01*x5805))+(((-1.0)*x5799*x5804))+(((-1.0)*r02*x5803)));
evalcond[3]=((1.0)+(((-1.0)*x5800*x5804))+(((-1.0)*r12*x5803))+((r11*x5805)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5802*x5803))+((x5797*x5801))+((r22*x5798)));
evalcond[5]=(((r01*x5806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5799*x5803))+((r02*x5798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5807=((1.0)*cj5);
CheckValue<IkReal> x5808 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5807))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5808.valid){
continue;
}
CheckValue<IkReal> x5809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5807)))),-1);
if(!x5809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5808.value)+(((1.5707963267949)*(x5809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5810=IKcos(j4);
IkReal x5811=IKsin(j4);
IkReal x5812=(cj5*r00);
IkReal x5813=(cj5*r10);
IkReal x5814=(r21*sj5);
IkReal x5815=(cj5*r20);
IkReal x5816=((1.0)*x5810);
IkReal x5817=((1.0)*x5811);
IkReal x5818=(sj5*x5811);
IkReal x5819=(sj5*x5810);
evalcond[0]=((((-1.0)*x5813*x5816))+((r11*x5819))+((r12*x5811)));
evalcond[1]=((((-1.0)*x5815*x5817))+((x5811*x5814))+(((-1.0)*r22*x5816)));
evalcond[2]=((((-1.0)*r02*x5816))+(((-1.0)*x5812*x5817))+((r01*x5818)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5816))+(((-1.0)*x5813*x5817))+((r11*x5818)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5815*x5816))+((r22*x5811))+((cj1*sj2))+((x5810*x5814)));
evalcond[5]=(((r02*x5811))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5812*x5816))+((r01*x5819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5820=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5820.valid){
continue;
}
CheckValue<IkReal> x5821 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5820.value)))+(x5821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5822=IKcos(j4);
IkReal x5823=IKsin(j4);
IkReal x5824=(cj5*r00);
IkReal x5825=(cj5*r10);
IkReal x5826=(r21*sj5);
IkReal x5827=(cj5*r20);
IkReal x5828=((1.0)*x5822);
IkReal x5829=((1.0)*x5823);
IkReal x5830=(sj5*x5823);
IkReal x5831=(sj5*x5822);
evalcond[0]=(((r12*x5823))+((r11*x5831))+(((-1.0)*x5825*x5828)));
evalcond[1]=((((-1.0)*r22*x5828))+(((-1.0)*x5827*x5829))+((x5823*x5826)));
evalcond[2]=((((-1.0)*r02*x5828))+((r01*x5830))+(((-1.0)*x5824*x5829)));
evalcond[3]=((1.0)+((r11*x5830))+(((-1.0)*r12*x5828))+(((-1.0)*x5825*x5829)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5822*x5826))+(((-1.0)*x5827*x5828))+((r22*x5823)));
evalcond[5]=(((r02*x5823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5831))+(((-1.0)*x5824*x5828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5832=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5832;
j4eval[1]=IKsign(x5832);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5833=((1.0)*cj5);
IkReal x5834=((((-1.0)*r21*x5833))+(((-1.0)*r20*sj5)));
j4eval[0]=x5834;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5833)))))+(IKabs(r02)));
j4eval[2]=IKsign(x5834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5835=cj5*cj5;
IkReal x5836=r11*r11;
IkReal x5837=(r11*sj5);
IkReal x5838=(cj5*r10);
IkReal x5839=((r12*r12)+(((-2.0)*x5837*x5838))+(((-1.0)*x5835*x5836))+((x5835*(r10*r10)))+x5836);
j4eval[0]=x5839;
j4eval[1]=IKsign(x5839);
j4eval[2]=((IKabs(((((-1.0)*x5838))+x5837)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5840=cj5*cj5;
IkReal x5841=r11*r11;
IkReal x5842=(cj5*r10);
IkReal x5843=(r11*sj5);
CheckValue<IkReal> x5844=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5840*(r10*r10)))+(((-2.0)*x5842*x5843))+(((-1.0)*x5840*x5841))+x5841)),-1);
if(!x5844.valid){
continue;
}
CheckValue<IkReal> x5845 = IKatan2WithCheck(IkReal(((((-1.0)*x5842))+x5843)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5844.value)))+(x5845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5846=IKcos(j4);
IkReal x5847=IKsin(j4);
IkReal x5848=(cj5*r00);
IkReal x5849=(cj5*r10);
IkReal x5850=(r21*sj5);
IkReal x5851=(cj5*r20);
IkReal x5852=((1.0)*x5846);
IkReal x5853=((1.0)*x5847);
IkReal x5854=(sj5*x5847);
IkReal x5855=(sj5*x5846);
evalcond[0]=((((-1.0)*x5849*x5852))+((r11*x5855))+((r12*x5847)));
evalcond[1]=(((x5847*x5850))+(((-1.0)*r22*x5852))+(((-1.0)*x5851*x5853)));
evalcond[2]=(((r01*x5854))+(((-1.0)*x5848*x5853))+(((-1.0)*r02*x5852)));
evalcond[3]=((-1.0)+(((-1.0)*x5849*x5853))+((r11*x5854))+(((-1.0)*r12*x5852)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5851*x5852))+((r22*x5847))+((x5846*x5850)));
evalcond[5]=(((r01*x5855))+(((-1.0)*sj1*sj2))+(((-1.0)*x5848*x5852))+((cj1*cj2))+((r02*x5847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5856=((1.0)*cj5);
CheckValue<IkReal> x5857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5856))+(((-1.0)*r20*sj5)))),-1);
if(!x5857.valid){
continue;
}
CheckValue<IkReal> x5858 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5857.value)))+(x5858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5859=IKcos(j4);
IkReal x5860=IKsin(j4);
IkReal x5861=(cj5*r00);
IkReal x5862=(cj5*r10);
IkReal x5863=(r21*sj5);
IkReal x5864=(cj5*r20);
IkReal x5865=((1.0)*x5859);
IkReal x5866=((1.0)*x5860);
IkReal x5867=(sj5*x5860);
IkReal x5868=(sj5*x5859);
evalcond[0]=((((-1.0)*x5862*x5865))+((r11*x5868))+((r12*x5860)));
evalcond[1]=(((x5860*x5863))+(((-1.0)*r22*x5865))+(((-1.0)*x5864*x5866)));
evalcond[2]=((((-1.0)*x5861*x5866))+(((-1.0)*r02*x5865))+((r01*x5867)));
evalcond[3]=((-1.0)+(((-1.0)*x5862*x5866))+((r11*x5867))+(((-1.0)*r12*x5865)));
evalcond[4]=(((cj2*sj1))+((r22*x5860))+((cj1*sj2))+(((-1.0)*x5864*x5865))+((x5859*x5863)));
evalcond[5]=((((-1.0)*x5861*x5865))+(((-1.0)*sj1*sj2))+((r02*x5860))+((cj1*cj2))+((r01*x5868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j4);
IkReal x5872=IKsin(j4);
IkReal x5873=(cj5*r00);
IkReal x5874=(cj5*r10);
IkReal x5875=(r21*sj5);
IkReal x5876=(cj5*r20);
IkReal x5877=((1.0)*x5871);
IkReal x5878=((1.0)*x5872);
IkReal x5879=(sj5*x5872);
IkReal x5880=(sj5*x5871);
evalcond[0]=(((r11*x5880))+(((-1.0)*x5874*x5877))+((r12*x5872)));
evalcond[1]=((((-1.0)*r22*x5877))+((x5872*x5875))+(((-1.0)*x5876*x5878)));
evalcond[2]=((((-1.0)*r02*x5877))+(((-1.0)*x5873*x5878))+((r01*x5879)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5877))+(((-1.0)*x5874*x5878))+((r11*x5879)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5872))+((x5871*x5875))+(((-1.0)*x5876*x5877)));
evalcond[5]=(((r01*x5880))+(((-1.0)*sj1*sj2))+(((-1.0)*x5873*x5877))+((r02*x5872))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5881=((-1.0)*r00);
IkReal x5883 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5883)==0){
continue;
}
IkReal x5882=pow(x5883,-0.5);
CheckValue<IkReal> x5884 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5881),IKFAST_ATAN2_MAGTHRESH);
if(!x5884.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5884.value));
IkReal gconst127=(r01*x5882);
IkReal gconst128=(x5881*x5882);
CheckValue<IkReal> x5885 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5885.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5885.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5886=((-1.0)*r00);
IkReal x5887=x5882;
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5886),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
IkReal x5888=((-1.0)*(x5889.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5888;
IkReal gconst126=x5888;
IkReal gconst127=(r01*x5887);
IkReal gconst128=(x5886*x5887);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5890=((1.0)*sj0);
IkReal x5891=((1.0)*gconst127);
CheckValue<IkReal> x5892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5891))+(((-1.0)*gconst128*r21)))),-1);
if(!x5892.valid){
continue;
}
CheckValue<IkReal> x5893 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5890))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst127*r11*x5890))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x5891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5892.value)))+(x5893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5894=IKsin(j4);
IkReal x5895=IKcos(j4);
IkReal x5896=(gconst127*r01);
IkReal x5897=(sj1*sj2);
IkReal x5898=(gconst128*r10);
IkReal x5899=(gconst128*r00);
IkReal x5900=(gconst128*r20);
IkReal x5901=((1.0)*x5895);
IkReal x5902=((1.0)*cj1*cj2);
IkReal x5903=((1.0)*x5894);
IkReal x5904=(gconst127*x5895);
IkReal x5905=(gconst127*x5894);
evalcond[0]=((((-1.0)*r22*x5901))+((r21*x5905))+(((-1.0)*x5900*x5903)));
evalcond[1]=((((-1.0)*r12*x5901))+cj0+(((-1.0)*x5898*x5903))+((r11*x5905)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5901))+((x5894*x5896))+(((-1.0)*x5899*x5903)));
evalcond[3]=(((r22*x5894))+((cj2*sj1))+((cj1*sj2))+((r21*x5904))+(((-1.0)*x5900*x5901)));
evalcond[4]=(((cj0*x5897))+(((-1.0)*cj0*x5902))+((r02*x5894))+((x5895*x5896))+(((-1.0)*x5899*x5901)));
evalcond[5]=((((-1.0)*x5898*x5901))+((sj0*x5897))+(((-1.0)*sj0*x5902))+((r12*x5894))+((r11*x5904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5906=((1.0)*gconst128);
CheckValue<IkReal> x5907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5906))+(((-1.0)*gconst127*r10)))),-1);
if(!x5907.valid){
continue;
}
CheckValue<IkReal> x5908 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5907.value)))+(x5908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5909=IKsin(j4);
IkReal x5910=IKcos(j4);
IkReal x5911=(gconst127*r01);
IkReal x5912=(sj1*sj2);
IkReal x5913=(gconst128*r10);
IkReal x5914=(gconst128*r00);
IkReal x5915=(gconst128*r20);
IkReal x5916=((1.0)*x5910);
IkReal x5917=((1.0)*cj1*cj2);
IkReal x5918=((1.0)*x5909);
IkReal x5919=(gconst127*x5910);
IkReal x5920=(gconst127*x5909);
evalcond[0]=((((-1.0)*r22*x5916))+((r21*x5920))+(((-1.0)*x5915*x5918)));
evalcond[1]=((((-1.0)*r12*x5916))+cj0+((r11*x5920))+(((-1.0)*x5913*x5918)));
evalcond[2]=((((-1.0)*sj0))+((x5909*x5911))+(((-1.0)*r02*x5916))+(((-1.0)*x5914*x5918)));
evalcond[3]=(((cj2*sj1))+((r22*x5909))+((cj1*sj2))+((r21*x5919))+(((-1.0)*x5915*x5916)));
evalcond[4]=((((-1.0)*cj0*x5917))+((x5910*x5911))+((r02*x5909))+((cj0*x5912))+(((-1.0)*x5914*x5916)));
evalcond[5]=(((r12*x5909))+((sj0*x5912))+(((-1.0)*x5913*x5916))+(((-1.0)*sj0*x5917))+((r11*x5919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5921=((-1.0)*r01);
IkReal x5923 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5923)==0){
continue;
}
IkReal x5922=pow(x5923,-0.5);
CheckValue<IkReal> x5924 = IKatan2WithCheck(IkReal(x5921),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5924.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5924.value))));
IkReal gconst130=(x5921*x5922);
IkReal gconst131=((1.0)*r00*x5922);
CheckValue<IkReal> x5925 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5925.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5925.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5926=((-1.0)*r01);
CheckValue<IkReal> x5929 = IKatan2WithCheck(IkReal(x5926),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5929.valid){
continue;
}
IkReal x5927=((1.0)*(x5929.value));
IkReal x5928=x5922;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5927)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5927)));
IkReal gconst130=(x5926*x5928);
IkReal gconst131=((1.0)*r00*x5928);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5930=((-1.0)*r01);
CheckValue<IkReal> x5933 = IKatan2WithCheck(IkReal(x5930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5933.valid){
continue;
}
IkReal x5931=((1.0)*(x5933.value));
IkReal x5932=x5922;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5931)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5931)));
IkReal gconst130=(x5930*x5932);
IkReal gconst131=((1.0)*r00*x5932);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5934=((-1.0)*r01);
CheckValue<IkReal> x5937 = IKatan2WithCheck(IkReal(x5934),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5937.valid){
continue;
}
IkReal x5935=((1.0)*(x5937.value));
IkReal x5936=x5922;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5935)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5935)));
IkReal gconst130=(x5934*x5936);
IkReal gconst131=((1.0)*r00*x5936);
IkReal x5938=r02*r02;
IkReal x5939=(r12*sj0);
IkReal x5940=((1.0)*cj0);
IkReal x5941=x5922;
j4eval[0]=((IKabs((((cj0*x5938*x5941))+((r02*x5939*x5941))+(((-1.0)*x5940*x5941)))))+(IKabs(((((-1.0)*x5939))+(((-1.0)*r02*x5940))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5942=((1.0)*sj0);
IkReal x5943=((1.0)*gconst130);
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5942))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5943))+(((-1.0)*gconst130*r11*x5942))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
CheckValue<IkReal> x5945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5943))+(((-1.0)*gconst131*r21)))),-1);
if(!x5945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5944.value)+(((1.5707963267949)*(x5945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5946=IKsin(j4);
IkReal x5947=IKcos(j4);
IkReal x5948=(gconst131*r10);
IkReal x5949=(sj1*sj2);
IkReal x5950=(gconst131*r20);
IkReal x5951=(gconst131*r00);
IkReal x5952=((1.0)*x5947);
IkReal x5953=((1.0)*cj1*cj2);
IkReal x5954=(gconst130*x5946);
IkReal x5955=((1.0)*x5946);
IkReal x5956=(gconst130*x5947);
evalcond[0]=(((r21*x5954))+(((-1.0)*r22*x5952))+(((-1.0)*x5950*x5955)));
evalcond[1]=(cj0+((r11*x5954))+(((-1.0)*x5948*x5955))+(((-1.0)*r12*x5952)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5952))+(((-1.0)*x5951*x5955))+((r01*x5954)));
evalcond[3]=(((cj2*sj1))+((r21*x5956))+((cj1*sj2))+((r22*x5946))+(((-1.0)*x5950*x5952)));
evalcond[4]=(((cj0*x5949))+(((-1.0)*x5951*x5952))+(((-1.0)*cj0*x5953))+((r02*x5946))+((r01*x5956)));
evalcond[5]=(((r11*x5956))+(((-1.0)*x5948*x5952))+((r12*x5946))+((sj0*x5949))+(((-1.0)*sj0*x5953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5957=((1.0)*gconst131);
CheckValue<IkReal> x5958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x5957)))),-1);
if(!x5958.valid){
continue;
}
CheckValue<IkReal> x5959 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5958.value)))+(x5959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5960=IKsin(j4);
IkReal x5961=IKcos(j4);
IkReal x5962=(gconst131*r10);
IkReal x5963=(sj1*sj2);
IkReal x5964=(gconst131*r20);
IkReal x5965=(gconst131*r00);
IkReal x5966=((1.0)*x5961);
IkReal x5967=((1.0)*cj1*cj2);
IkReal x5968=(gconst130*x5960);
IkReal x5969=((1.0)*x5960);
IkReal x5970=(gconst130*x5961);
evalcond[0]=((((-1.0)*r22*x5966))+((r21*x5968))+(((-1.0)*x5964*x5969)));
evalcond[1]=(cj0+(((-1.0)*r12*x5966))+((r11*x5968))+(((-1.0)*x5962*x5969)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5968))+(((-1.0)*r02*x5966))+(((-1.0)*x5965*x5969)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5960))+((r21*x5970))+(((-1.0)*x5964*x5966)));
evalcond[4]=(((r02*x5960))+((cj0*x5963))+(((-1.0)*cj0*x5967))+((r01*x5970))+(((-1.0)*x5965*x5966)));
evalcond[5]=((((-1.0)*sj0*x5967))+((r11*x5970))+((r12*x5960))+((sj0*x5963))+(((-1.0)*x5962*x5966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5971=((1.0)*gconst131);
CheckValue<IkReal> x5972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5971)))),-1);
if(!x5972.valid){
continue;
}
CheckValue<IkReal> x5973 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5972.value)))+(x5973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5974=IKsin(j4);
IkReal x5975=IKcos(j4);
IkReal x5976=(gconst131*r10);
IkReal x5977=(sj1*sj2);
IkReal x5978=(gconst131*r20);
IkReal x5979=(gconst131*r00);
IkReal x5980=((1.0)*x5975);
IkReal x5981=((1.0)*cj1*cj2);
IkReal x5982=(gconst130*x5974);
IkReal x5983=((1.0)*x5974);
IkReal x5984=(gconst130*x5975);
evalcond[0]=(((r21*x5982))+(((-1.0)*x5978*x5983))+(((-1.0)*r22*x5980)));
evalcond[1]=((((-1.0)*r12*x5980))+cj0+((r11*x5982))+(((-1.0)*x5976*x5983)));
evalcond[2]=((((-1.0)*x5979*x5983))+(((-1.0)*sj0))+(((-1.0)*r02*x5980))+((r01*x5982)));
evalcond[3]=(((cj2*sj1))+((r21*x5984))+(((-1.0)*x5978*x5980))+((cj1*sj2))+((r22*x5974)));
evalcond[4]=((((-1.0)*x5979*x5980))+((cj0*x5977))+(((-1.0)*cj0*x5981))+((r02*x5974))+((r01*x5984)));
evalcond[5]=(((r11*x5984))+(((-1.0)*x5976*x5980))+(((-1.0)*sj0*x5981))+((r12*x5974))+((sj0*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5985=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5985;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5986=((1.0)*cj5);
IkReal x5987=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5986)));
j4eval[0]=x5987;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x5986)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5988=cj5*cj5;
IkReal x5989=r01*r01;
IkReal x5990=(cj5*r00);
IkReal x5991=(r01*sj5);
IkReal x5992=((((-2.0)*x5990*x5991))+((x5988*(r00*r00)))+(((-1.0)*x5988*x5989))+(r02*r02)+x5989);
j4eval[0]=x5992;
j4eval[1]=IKsign(x5992);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5990))+x5991))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5993=cj5*cj5;
IkReal x5994=r01*r01;
IkReal x5995=(r01*sj5);
IkReal x5996=(cj5*r00);
CheckValue<IkReal> x5997 = IKatan2WithCheck(IkReal(((((-1.0)*x5996))+x5995)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5997.valid){
continue;
}
CheckValue<IkReal> x5998=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5993*x5994))+((x5993*(r00*r00)))+(r02*r02)+x5994+(((-2.0)*x5995*x5996)))),-1);
if(!x5998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5997.value)+(((1.5707963267949)*(x5998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5999=IKcos(j4);
IkReal x6000=IKsin(j4);
IkReal x6001=(cj5*r00);
IkReal x6002=(cj5*r10);
IkReal x6003=(r21*sj5);
IkReal x6004=(cj5*r20);
IkReal x6005=((1.0)*x5999);
IkReal x6006=((1.0)*x6000);
IkReal x6007=(sj5*x6000);
IkReal x6008=(sj5*x5999);
evalcond[0]=(((r02*x6000))+((r01*x6008))+(((-1.0)*x6001*x6005)));
evalcond[1]=((((-1.0)*r22*x6005))+((x6000*x6003))+(((-1.0)*x6004*x6006)));
evalcond[2]=(((r11*x6007))+(((-1.0)*r12*x6005))+(((-1.0)*x6002*x6006)));
evalcond[3]=((-1.0)+((r01*x6007))+(((-1.0)*r02*x6005))+(((-1.0)*x6001*x6006)));
evalcond[4]=(((cj2*sj1))+((r22*x6000))+((cj1*sj2))+(((-1.0)*x6004*x6005))+((x5999*x6003)));
evalcond[5]=(((r12*x6000))+((r11*x6008))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6002*x6005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6009=((1.0)*cj5);
CheckValue<IkReal> x6010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6009)))),-1);
if(!x6010.valid){
continue;
}
CheckValue<IkReal> x6011 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6010.value)))+(x6011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6012=IKcos(j4);
IkReal x6013=IKsin(j4);
IkReal x6014=(cj5*r00);
IkReal x6015=(cj5*r10);
IkReal x6016=(r21*sj5);
IkReal x6017=(cj5*r20);
IkReal x6018=((1.0)*x6012);
IkReal x6019=((1.0)*x6013);
IkReal x6020=(sj5*x6013);
IkReal x6021=(sj5*x6012);
evalcond[0]=(((r01*x6021))+((r02*x6013))+(((-1.0)*x6014*x6018)));
evalcond[1]=((((-1.0)*x6017*x6019))+(((-1.0)*r22*x6018))+((x6013*x6016)));
evalcond[2]=((((-1.0)*r12*x6018))+(((-1.0)*x6015*x6019))+((r11*x6020)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6018))+((r01*x6020))+(((-1.0)*x6014*x6019)));
evalcond[4]=(((x6012*x6016))+((cj2*sj1))+(((-1.0)*x6017*x6018))+((cj1*sj2))+((r22*x6013)));
evalcond[5]=(((r12*x6013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6015*x6018))+((r11*x6021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6022=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6022.valid){
continue;
}
CheckValue<IkReal> x6023 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6022.value)))+(x6023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6024=IKcos(j4);
IkReal x6025=IKsin(j4);
IkReal x6026=(cj5*r00);
IkReal x6027=(cj5*r10);
IkReal x6028=(r21*sj5);
IkReal x6029=(cj5*r20);
IkReal x6030=((1.0)*x6024);
IkReal x6031=((1.0)*x6025);
IkReal x6032=(sj5*x6025);
IkReal x6033=(sj5*x6024);
evalcond[0]=(((r02*x6025))+(((-1.0)*x6026*x6030))+((r01*x6033)));
evalcond[1]=((((-1.0)*x6029*x6031))+((x6025*x6028))+(((-1.0)*r22*x6030)));
evalcond[2]=(((r11*x6032))+(((-1.0)*r12*x6030))+(((-1.0)*x6027*x6031)));
evalcond[3]=((-1.0)+(((-1.0)*x6026*x6031))+((r01*x6032))+(((-1.0)*r02*x6030)));
evalcond[4]=((((-1.0)*x6029*x6030))+((cj2*sj1))+((cj1*sj2))+((x6024*x6028))+((r22*x6025)));
evalcond[5]=(((r11*x6033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6027*x6030))+((r12*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6034=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6034;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6035=((1.0)*cj5);
IkReal x6036=((((-1.0)*r21*x6035))+(((-1.0)*r20*sj5)));
j4eval[0]=x6036;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6035))))));
j4eval[2]=IKsign(x6036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6037=(r01*sj5);
IkReal x6038=(cj1*sj2);
IkReal x6039=(cj2*sj1);
IkReal x6040=((1.0)*r02);
IkReal x6041=((1.0)*cj5*r00);
IkReal x6042=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6042;
j4eval[1]=((IKabs(((((-1.0)*x6039*x6040))+(((-1.0)*x6038*x6040)))))+(IKabs(((((-1.0)*x6039*x6041))+(((-1.0)*x6038*x6041))+((x6037*x6039))+((x6037*x6038))))));
j4eval[2]=IKsign(x6042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6043=(r01*sj5);
IkReal x6044=(cj1*sj2);
IkReal x6045=(cj2*sj1);
IkReal x6046=((1.0)*r02);
IkReal x6047=((1.0)*cj5*r00);
CheckValue<IkReal> x6048 = IKatan2WithCheck(IkReal((((x6043*x6044))+((x6043*x6045))+(((-1.0)*x6045*x6047))+(((-1.0)*x6044*x6047)))),IkReal(((((-1.0)*x6045*x6046))+(((-1.0)*x6044*x6046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6048.valid){
continue;
}
CheckValue<IkReal> x6049=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6048.value)+(((1.5707963267949)*(x6049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6050=IKcos(j4);
IkReal x6051=IKsin(j4);
IkReal x6052=(cj5*r00);
IkReal x6053=(cj5*r10);
IkReal x6054=(r21*sj5);
IkReal x6055=(cj5*r20);
IkReal x6056=((1.0)*x6050);
IkReal x6057=((1.0)*x6051);
IkReal x6058=(sj5*x6051);
IkReal x6059=(sj5*x6050);
evalcond[0]=((((-1.0)*x6052*x6056))+((r01*x6059))+((r02*x6051)));
evalcond[1]=((((-1.0)*x6055*x6057))+(((-1.0)*r22*x6056))+((x6051*x6054)));
evalcond[2]=((((-1.0)*x6053*x6057))+(((-1.0)*r12*x6056))+((r11*x6058)));
evalcond[3]=((1.0)+(((-1.0)*x6052*x6057))+((r01*x6058))+(((-1.0)*r02*x6056)));
evalcond[4]=(((cj2*sj1))+((r22*x6051))+((cj1*sj2))+(((-1.0)*x6055*x6056))+((x6050*x6054)));
evalcond[5]=((((-1.0)*x6053*x6056))+((r12*x6051))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x6059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6060=((1.0)*cj5);
CheckValue<IkReal> x6061 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6060))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6061.valid){
continue;
}
CheckValue<IkReal> x6062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6060))+(((-1.0)*r20*sj5)))),-1);
if(!x6062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6061.value)+(((1.5707963267949)*(x6062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6063=IKcos(j4);
IkReal x6064=IKsin(j4);
IkReal x6065=(cj5*r00);
IkReal x6066=(cj5*r10);
IkReal x6067=(r21*sj5);
IkReal x6068=(cj5*r20);
IkReal x6069=((1.0)*x6063);
IkReal x6070=((1.0)*x6064);
IkReal x6071=(sj5*x6064);
IkReal x6072=(sj5*x6063);
evalcond[0]=(((r01*x6072))+((r02*x6064))+(((-1.0)*x6065*x6069)));
evalcond[1]=((((-1.0)*r22*x6069))+(((-1.0)*x6068*x6070))+((x6064*x6067)));
evalcond[2]=(((r11*x6071))+(((-1.0)*x6066*x6070))+(((-1.0)*r12*x6069)));
evalcond[3]=((1.0)+((r01*x6071))+(((-1.0)*x6065*x6070))+(((-1.0)*r02*x6069)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6063*x6067))+((r22*x6064))+(((-1.0)*x6068*x6069)));
evalcond[5]=(((r11*x6072))+(((-1.0)*sj1*sj2))+(((-1.0)*x6066*x6069))+((r12*x6064))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
CheckValue<IkReal> x6074=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6073.value)+(((1.5707963267949)*(x6074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6075=IKcos(j4);
IkReal x6076=IKsin(j4);
IkReal x6077=(cj5*r00);
IkReal x6078=(cj5*r10);
IkReal x6079=(r21*sj5);
IkReal x6080=(cj5*r20);
IkReal x6081=((1.0)*x6075);
IkReal x6082=((1.0)*x6076);
IkReal x6083=(sj5*x6076);
IkReal x6084=(sj5*x6075);
evalcond[0]=(((r01*x6084))+(((-1.0)*x6077*x6081))+((r02*x6076)));
evalcond[1]=(((x6076*x6079))+(((-1.0)*x6080*x6082))+(((-1.0)*r22*x6081)));
evalcond[2]=((((-1.0)*r12*x6081))+(((-1.0)*x6078*x6082))+((r11*x6083)));
evalcond[3]=((1.0)+((r01*x6083))+(((-1.0)*r02*x6081))+(((-1.0)*x6077*x6082)));
evalcond[4]=(((cj2*sj1))+((x6075*x6079))+(((-1.0)*x6080*x6081))+((cj1*sj2))+((r22*x6076)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6078*x6081))+((cj1*cj2))+((r11*x6084))+((r12*x6076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6085=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6085);
rxp1_1=(px*r21);
rxp1_2=(r11*x6085);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6086=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6086);
rxp1_1=(px*r21);
rxp1_2=(r11*x6086);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6087=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6087);
rxp1_1=(px*r21);
rxp1_2=(r11*x6087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6090=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6090.valid){
continue;
}
IkReal x6088=x6090.value;
IkReal x6089=(sj0*x6088);
cj4array[0]=((((-1.0)*sj1*sj2*x6089))+((cj1*cj2*x6089)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6091=IKsin(j4);
IkReal x6092=IKcos(j4);
IkReal x6093=(r21*sj5);
IkReal x6094=((1.0)*cj5*r20);
evalcond[0]=(r02*x6091);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6092)));
evalcond[2]=((((-1.0)*x6091*x6094))+((x6091*x6093)));
evalcond[3]=((((-1.0)*cj5*r10*x6091))+((r11*sj5*x6091)));
evalcond[4]=(((cj2*sj1))+((x6092*x6093))+((cj1*sj2))+(((-1.0)*x6092*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6097=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6097.valid){
continue;
}
IkReal x6095=x6097.value;
IkReal x6096=((1.0)*x6095);
cj4array[0]=((((-1.0)*cj2*sj1*x6096))+(((-1.0)*cj1*sj2*x6096)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6098=IKsin(j4);
IkReal x6099=IKcos(j4);
IkReal x6100=((1.0)*sj0);
IkReal x6101=((1.0)*cj5);
IkReal x6102=(sj5*x6098);
evalcond[0]=(r02*x6098);
evalcond[1]=((((-1.0)*x6100))+(((-1.0)*r02*x6099)));
evalcond[2]=(((r21*x6102))+(((-1.0)*r20*x6098*x6101)));
evalcond[3]=(((r11*x6102))+(((-1.0)*r10*x6098*x6101)));
evalcond[4]=((((-1.0)*cj1*cj2*x6100))+((sj0*sj1*sj2))+(((-1.0)*r10*x6099*x6101))+((r11*sj5*x6099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6103=IKPowWithIntegerCheck(r02,-1);
if(!x6103.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6103.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6104=IKsin(j4);
IkReal x6105=IKcos(j4);
IkReal x6106=(r21*sj5);
IkReal x6107=((1.0)*cj5);
IkReal x6108=(r11*sj5);
evalcond[0]=(r02*x6104);
evalcond[1]=(((x6104*x6106))+(((-1.0)*r20*x6104*x6107)));
evalcond[2]=(((x6104*x6108))+(((-1.0)*r10*x6104*x6107)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6105*x6106))+(((-1.0)*r20*x6105*x6107)));
evalcond[4]=((((-1.0)*r10*x6105*x6107))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6105*x6108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6109=((1.0)*sj0);
IkReal x6110=((1.0)*cj0);
CheckValue<IkReal> x6111 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6110))+(((-1.0)*r12*x6109)))),IkReal(((((-1.0)*r01*sj5*x6110))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6111.valid){
continue;
}
CheckValue<IkReal> x6112=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6111.value)+(((1.5707963267949)*(x6112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6113=IKsin(j4);
IkReal x6114=IKcos(j4);
IkReal x6115=(cj5*r00);
IkReal x6116=(cj5*r10);
IkReal x6117=(r21*sj5);
IkReal x6118=(sj1*sj2);
IkReal x6119=(cj5*r20);
IkReal x6120=((1.0)*x6114);
IkReal x6121=((1.0)*cj1*cj2);
IkReal x6122=((1.0)*x6113);
IkReal x6123=(sj5*x6113);
IkReal x6124=(sj5*x6114);
evalcond[0]=(((x6113*x6117))+(((-1.0)*r22*x6120))+(((-1.0)*x6119*x6122)));
evalcond[1]=(cj0+(((-1.0)*r12*x6120))+(((-1.0)*x6116*x6122))+((r11*x6123)));
evalcond[2]=(((r01*x6123))+(((-1.0)*sj0))+(((-1.0)*r02*x6120))+(((-1.0)*x6115*x6122)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6119*x6120))+((r22*x6113))+((x6114*x6117)));
evalcond[4]=(((r01*x6124))+((r02*x6113))+(((-1.0)*x6115*x6120))+(((-1.0)*cj0*x6121))+((cj0*x6118)));
evalcond[5]=((((-1.0)*sj0*x6121))+((r12*x6113))+((sj0*x6118))+(((-1.0)*x6116*x6120))+((r11*x6124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6125=((1.0)*cj5);
CheckValue<IkReal> x6126=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6125)))),-1);
if(!x6126.valid){
continue;
}
CheckValue<IkReal> x6127 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6126.value)))+(x6127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6128=IKsin(j4);
IkReal x6129=IKcos(j4);
IkReal x6130=(cj5*r00);
IkReal x6131=(cj5*r10);
IkReal x6132=(r21*sj5);
IkReal x6133=(sj1*sj2);
IkReal x6134=(cj5*r20);
IkReal x6135=((1.0)*x6129);
IkReal x6136=((1.0)*cj1*cj2);
IkReal x6137=((1.0)*x6128);
IkReal x6138=(sj5*x6128);
IkReal x6139=(sj5*x6129);
evalcond[0]=(((x6128*x6132))+(((-1.0)*x6134*x6137))+(((-1.0)*r22*x6135)));
evalcond[1]=(((r11*x6138))+cj0+(((-1.0)*x6131*x6137))+(((-1.0)*r12*x6135)));
evalcond[2]=((((-1.0)*x6130*x6137))+(((-1.0)*sj0))+((r01*x6138))+(((-1.0)*r02*x6135)));
evalcond[3]=(((cj2*sj1))+((x6129*x6132))+((cj1*sj2))+(((-1.0)*x6134*x6135))+((r22*x6128)));
evalcond[4]=(((cj0*x6133))+(((-1.0)*x6130*x6135))+(((-1.0)*cj0*x6136))+((r02*x6128))+((r01*x6139)));
evalcond[5]=(((r11*x6139))+((r12*x6128))+(((-1.0)*x6131*x6135))+(((-1.0)*sj0*x6136))+((sj0*x6133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6140=((1.0)*cj5);
CheckValue<IkReal> x6141 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6141.valid){
continue;
}
CheckValue<IkReal> x6142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6140))+(((-1.0)*r00*sj5)))),-1);
if(!x6142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6141.value)+(((1.5707963267949)*(x6142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6143=IKsin(j4);
IkReal x6144=IKcos(j4);
IkReal x6145=(cj5*r00);
IkReal x6146=(cj5*r10);
IkReal x6147=(r21*sj5);
IkReal x6148=(sj1*sj2);
IkReal x6149=(cj5*r20);
IkReal x6150=((1.0)*x6144);
IkReal x6151=((1.0)*cj1*cj2);
IkReal x6152=((1.0)*x6143);
IkReal x6153=(sj5*x6143);
IkReal x6154=(sj5*x6144);
evalcond[0]=((((-1.0)*r22*x6150))+((x6143*x6147))+(((-1.0)*x6149*x6152)));
evalcond[1]=((((-1.0)*x6146*x6152))+cj0+(((-1.0)*r12*x6150))+((r11*x6153)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6150))+(((-1.0)*x6145*x6152))+((r01*x6153)));
evalcond[3]=(((cj2*sj1))+((x6144*x6147))+((cj1*sj2))+((r22*x6143))+(((-1.0)*x6149*x6150)));
evalcond[4]=((((-1.0)*cj0*x6151))+(((-1.0)*x6145*x6150))+((cj0*x6148))+((r02*x6143))+((r01*x6154)));
evalcond[5]=((((-1.0)*x6146*x6150))+((sj0*x6148))+((r12*x6143))+((r11*x6154))+(((-1.0)*sj0*x6151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6155=r21*r21;
IkReal x6156=cj5*cj5;
IkReal x6157=(cj2*sj1);
IkReal x6158=(cj1*sj2);
IkReal x6159=(r21*sj5);
IkReal x6160=((1.0)*cj5*r20);
CheckValue<IkReal> x6161 = IKatan2WithCheck(IkReal((((r22*x6157))+((r22*x6158)))),IkReal((((x6158*x6159))+(((-1.0)*x6157*x6160))+((x6157*x6159))+(((-1.0)*x6158*x6160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6161.valid){
continue;
}
CheckValue<IkReal> x6162=IKPowWithIntegerCheck(IKsign((((x6155*x6156))+(((2.0)*cj5*r20*x6159))+(((-1.0)*(r22*r22)))+(((-1.0)*x6156*(r20*r20)))+(((-1.0)*x6155)))),-1);
if(!x6162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6161.value)+(((1.5707963267949)*(x6162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6163=IKsin(j4);
IkReal x6164=IKcos(j4);
IkReal x6165=(r21*sj5);
IkReal x6166=(cj5*r20);
IkReal x6167=((1.0)*x6164);
evalcond[0]=((((-1.0)*x6163*x6166))+((x6163*x6165))+(((-1.0)*r22*x6167)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x6166*x6167))+((cj1*sj2))+((x6164*x6165))+((r22*x6163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6168=(cj5*sj4);
IkReal x6169=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6168))+((r01*x6169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6168))+(((-1.0)*r11*x6169))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6168))+((r01*x6169))))+IKsqr((((r10*x6168))+(((-1.0)*r11*x6169))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6168))+((r01*x6169))), (((r10*x6168))+(((-1.0)*r11*x6169))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6170=IKcos(j0);
IkReal x6171=IKsin(j0);
IkReal x6172=(cj5*r01);
IkReal x6173=(r11*sj5);
IkReal x6174=((0.1157)*sj5);
IkReal x6175=((1.0)*cj2);
IkReal x6176=((0.5723)*sj2);
IkReal x6177=(cj5*r11);
IkReal x6178=((1.0)*cj4);
IkReal x6179=(r01*sj5);
IkReal x6180=((0.5723)*cj2);
IkReal x6181=((1.0)*cj1*sj2);
IkReal x6182=(cj5*x6178);
IkReal x6183=(sj1*x6170);
IkReal x6184=(cj1*x6171);
IkReal x6185=((1.0)*cj5*sj4);
IkReal x6186=(cj1*x6170);
IkReal x6187=(sj1*x6171);
evalcond[0]=(x6170+(((-1.0)*r12*x6178))+((sj4*x6173))+(((-1.0)*r10*x6185)));
evalcond[1]=((((-1.0)*r00*x6185))+(((-1.0)*x6171))+((sj4*x6179))+(((-1.0)*r02*x6178)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x6170*x6181))+x6172+(((-1.0)*x6175*x6183)));
evalcond[3]=((((-1.0)*x6171*x6181))+((r10*sj5))+x6177+(((-1.0)*x6175*x6187)));
evalcond[4]=((((-1.0)*r00*x6182))+((r02*sj4))+((sj2*x6183))+((cj4*x6179))+(((-1.0)*x6175*x6186)));
evalcond[5]=(((sj2*x6187))+((r12*sj4))+(((-1.0)*r10*x6182))+((cj4*x6173))+(((-1.0)*x6175*x6184)));
evalcond[6]=((((0.612)*x6186))+(((-0.163941)*x6171))+(((-1.0)*px))+((x6180*x6186))+(((-1.0)*x6176*x6183))+(((-1.0)*r00*x6174))+(((-0.1157)*x6172)));
evalcond[7]=((((0.612)*x6184))+(((0.163941)*x6170))+(((-1.0)*py))+((x6180*x6184))+(((-1.0)*x6176*x6187))+(((-1.0)*r10*x6174))+(((-0.1157)*x6177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6188=((1.0)*cj5);
IkReal x6189=((1.0)*sj5);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6188))+(((-1.0)*r10*x6189)))),IkReal(((((-1.0)*r00*x6189))+(((-1.0)*r01*x6188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6191.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6192=IKcos(j0);
IkReal x6193=IKsin(j0);
IkReal x6194=(cj5*r01);
IkReal x6195=((0.1157)*sj5);
IkReal x6196=((1.0)*sj1);
IkReal x6197=(cj5*r11);
IkReal x6198=((1.0)*cj1*sj2);
IkReal x6199=((0.5723)*sj1*sj2);
IkReal x6200=(cj2*x6192);
IkReal x6201=(cj1*x6193);
evalcond[0]=(((r00*sj5))+(((-1.0)*x6192*x6198))+(((-1.0)*x6196*x6200))+x6194);
evalcond[1]=((((-1.0)*cj2*x6193*x6196))+((r10*sj5))+x6197+(((-1.0)*x6193*x6198)));
evalcond[2]=((((-1.0)*x6192*x6199))+(((-0.163941)*x6193))+(((-1.0)*px))+(((0.612)*cj1*x6192))+(((-0.1157)*x6194))+(((0.5723)*cj1*x6200))+(((-1.0)*r00*x6195)));
evalcond[3]=((((-1.0)*r10*x6195))+(((0.163941)*x6192))+(((0.612)*x6201))+(((-1.0)*x6193*x6199))+(((-1.0)*py))+(((0.5723)*cj2*x6201))+(((-0.1157)*x6197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6202=((1.0)*cj5);
IkReal x6203=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6202)));
j4eval[0]=x6203;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6202))))));
j4eval[2]=IKsign(x6203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6204=((1.0)*cj5);
IkReal x6205=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6204)));
j4eval[0]=x6205;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6204))))));
j4eval[2]=IKsign(x6205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6206=((1.0)*sj0);
IkReal x6207=((1.0)*cj0);
IkReal x6208=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6208;
j4eval[1]=((IKabs(((((-1.0)*r02*x6207))+(((-1.0)*r12*x6206)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6206))+(((-1.0)*r01*sj5*x6207))))));
j4eval[2]=IKsign(x6208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6209=((-1.0)*r20);
IkReal x6211 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6211)==0){
continue;
}
IkReal x6210=pow(x6211,-0.5);
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6209),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6212.value));
IkReal gconst115=(r21*x6210);
IkReal gconst116=(x6209*x6210);
CheckValue<IkReal> x6213 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6213.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6213.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6214=((-1.0)*r20);
IkReal x6215=x6210;
CheckValue<IkReal> x6217 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6214),IKFAST_ATAN2_MAGTHRESH);
if(!x6217.valid){
continue;
}
IkReal x6216=((-1.0)*(x6217.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6216;
IkReal gconst114=x6216;
IkReal gconst115=(r21*x6215);
IkReal gconst116=(x6214*x6215);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6218=((-1.0)*r20);
IkReal x6219=x6210;
CheckValue<IkReal> x6221 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6218),IKFAST_ATAN2_MAGTHRESH);
if(!x6221.valid){
continue;
}
IkReal x6220=((-1.0)*(x6221.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6220;
IkReal gconst114=x6220;
IkReal gconst115=(r21*x6219);
IkReal gconst116=(x6218*x6219);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6222=((-1.0)*r20);
IkReal x6223=x6210;
CheckValue<IkReal> x6225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6222),IKFAST_ATAN2_MAGTHRESH);
if(!x6225.valid){
continue;
}
IkReal x6224=((-1.0)*(x6225.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6224;
IkReal gconst114=x6224;
IkReal gconst115=(r21*x6223);
IkReal gconst116=(x6222*x6223);
IkReal x6226=((1.0)*(r22*r22));
CheckValue<IkReal> x6230=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6226))),-1);
if(!x6230.valid){
continue;
}
IkReal x6227=x6230.value;
IkReal x6228=((1.0)*x6227);
IkReal x6229=((((-1.0)*x6228*(r20*r20*r20*r20)))+(((-1.0)*x6226))+(((-2.0)*x6227*(r20*r20)*(r21*r21)))+(((-1.0)*x6228*(r21*r21*r21*r21))));
j4eval[0]=x6229;
j4eval[1]=IKsign(x6229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6231=(cj2*sj1);
IkReal x6232=(gconst115*r21);
IkReal x6233=(cj1*sj2);
IkReal x6234=((1.0)*gconst116*r20);
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x6232))+(((-1.0)*(x6232*x6232)))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x6234)))),-1);
if(!x6235.valid){
continue;
}
CheckValue<IkReal> x6236 = IKatan2WithCheck(IkReal((((r22*x6231))+((r22*x6233)))),IkReal((((x6231*x6232))+(((-1.0)*x6231*x6234))+((x6232*x6233))+(((-1.0)*x6233*x6234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6235.value)))+(x6236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6237=IKsin(j4);
IkReal x6238=IKcos(j4);
IkReal x6239=(sj1*sj2);
IkReal x6240=((1.0)*x6238);
IkReal x6241=((1.0)*cj1*cj2);
IkReal x6242=(gconst115*x6237);
IkReal x6243=(gconst115*x6238);
IkReal x6244=((1.0)*gconst116*x6237);
evalcond[0]=(((r21*x6242))+(((-1.0)*r20*x6244))+(((-1.0)*r22*x6240)));
evalcond[1]=(cj0+((r11*x6242))+(((-1.0)*r10*x6244))+(((-1.0)*r12*x6240)));
evalcond[2]=((((-1.0)*r02*x6240))+(((-1.0)*sj0))+(((-1.0)*r00*x6244))+((r01*x6242)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6240))+((cj1*sj2))+((r22*x6237))+((r21*x6243)));
evalcond[4]=(((r02*x6237))+(((-1.0)*cj0*x6241))+(((-1.0)*gconst116*r00*x6240))+((cj0*x6239))+((r01*x6243)));
evalcond[5]=(((r12*x6237))+((r11*x6243))+((sj0*x6239))+(((-1.0)*sj0*x6241))+(((-1.0)*gconst116*r10*x6240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6245=((1.0)*gconst116);
CheckValue<IkReal> x6246=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6245)))),-1);
if(!x6246.valid){
continue;
}
CheckValue<IkReal> x6247 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6245))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6246.value)))+(x6247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6248=IKsin(j4);
IkReal x6249=IKcos(j4);
IkReal x6250=(sj1*sj2);
IkReal x6251=((1.0)*x6249);
IkReal x6252=((1.0)*cj1*cj2);
IkReal x6253=(gconst115*x6248);
IkReal x6254=(gconst115*x6249);
IkReal x6255=((1.0)*gconst116*x6248);
evalcond[0]=(((r21*x6253))+(((-1.0)*r22*x6251))+(((-1.0)*r20*x6255)));
evalcond[1]=(cj0+(((-1.0)*r12*x6251))+(((-1.0)*r10*x6255))+((r11*x6253)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6253))+(((-1.0)*r02*x6251))+(((-1.0)*r00*x6255)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6254))+(((-1.0)*gconst116*r20*x6251))+((r22*x6248)));
evalcond[4]=(((r01*x6254))+((r02*x6248))+(((-1.0)*gconst116*r00*x6251))+(((-1.0)*cj0*x6252))+((cj0*x6250)));
evalcond[5]=(((sj0*x6250))+((r12*x6248))+(((-1.0)*sj0*x6252))+((r11*x6254))+(((-1.0)*gconst116*r10*x6251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6256=((1.0)*gconst116);
CheckValue<IkReal> x6257 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6256))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6257.valid){
continue;
}
CheckValue<IkReal> x6258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6256)))),-1);
if(!x6258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6257.value)+(((1.5707963267949)*(x6258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6259=IKsin(j4);
IkReal x6260=IKcos(j4);
IkReal x6261=(sj1*sj2);
IkReal x6262=((1.0)*x6260);
IkReal x6263=((1.0)*cj1*cj2);
IkReal x6264=(gconst115*x6259);
IkReal x6265=(gconst115*x6260);
IkReal x6266=((1.0)*gconst116*x6259);
evalcond[0]=(((r21*x6264))+(((-1.0)*r22*x6262))+(((-1.0)*r20*x6266)));
evalcond[1]=(cj0+(((-1.0)*r10*x6266))+(((-1.0)*r12*x6262))+((r11*x6264)));
evalcond[2]=(((r01*x6264))+(((-1.0)*sj0))+(((-1.0)*r02*x6262))+(((-1.0)*r00*x6266)));
evalcond[3]=(((cj2*sj1))+((r22*x6259))+((cj1*sj2))+((r21*x6265))+(((-1.0)*gconst116*r20*x6262)));
evalcond[4]=(((r01*x6265))+(((-1.0)*gconst116*r00*x6262))+(((-1.0)*cj0*x6263))+((r02*x6259))+((cj0*x6261)));
evalcond[5]=((((-1.0)*gconst116*r10*x6262))+((sj0*x6261))+(((-1.0)*sj0*x6263))+((r12*x6259))+((r11*x6265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6267=((-1.0)*r21);
IkReal x6269 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6269)==0){
continue;
}
IkReal x6268=pow(x6269,-0.5);
CheckValue<IkReal> x6270 = IKatan2WithCheck(IkReal(x6267),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6270.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6270.value))));
IkReal gconst118=(x6267*x6268);
IkReal gconst119=((1.0)*r20*x6268);
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6271.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6272=((-1.0)*r21);
CheckValue<IkReal> x6275 = IKatan2WithCheck(IkReal(x6272),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6275.valid){
continue;
}
IkReal x6273=((1.0)*(x6275.value));
IkReal x6274=x6268;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6273)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6273)));
IkReal gconst118=(x6272*x6274);
IkReal gconst119=((1.0)*r20*x6274);
IkReal x6276=r22*r22;
IkReal x6277=((1.0)*x6276);
CheckValue<IkReal> x6281=IKPowWithIntegerCheck(((-1.0)+x6276),-1);
if(!x6281.valid){
continue;
}
IkReal x6278=x6281.value;
if((((1.0)+(((-1.0)*x6277)))) < -0.00001)
continue;
IkReal x6279=IKsqrt(((1.0)+(((-1.0)*x6277))));
IkReal x6280=(cj0*x6278*x6279);
j4eval[0]=((IKabs((x6280+(((-1.0)*x6277*x6280)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6282=((-1.0)*r21);
CheckValue<IkReal> x6285 = IKatan2WithCheck(IkReal(x6282),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6285.valid){
continue;
}
IkReal x6283=((1.0)*(x6285.value));
IkReal x6284=x6268;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6283)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6283)));
IkReal gconst118=(x6282*x6284);
IkReal gconst119=((1.0)*r20*x6284);
IkReal x6286=r22*r22;
IkReal x6287=((1.0)*x6286);
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(((-1.0)+x6286),-1);
if(!x6291.valid){
continue;
}
IkReal x6288=x6291.value;
if((((1.0)+(((-1.0)*x6287)))) < -0.00001)
continue;
IkReal x6289=IKsqrt(((1.0)+(((-1.0)*x6287))));
IkReal x6290=(sj0*x6288*x6289);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6290+(((-1.0)*x6287*x6290))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6292=((-1.0)*r21);
CheckValue<IkReal> x6295 = IKatan2WithCheck(IkReal(x6292),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6295.valid){
continue;
}
IkReal x6293=((1.0)*(x6295.value));
IkReal x6294=x6268;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6293)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6293)));
IkReal gconst118=(x6292*x6294);
IkReal gconst119=((1.0)*r20*x6294);
IkReal x6296=r22*r22;
IkReal x6297=(r12*sj0);
IkReal x6298=(cj0*r02);
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(((-1.0)+x6296),-1);
if(!x6302.valid){
continue;
}
IkReal x6299=x6302.value;
if((((1.0)+(((-1.0)*x6296)))) < -0.00001)
continue;
IkReal x6300=IKsqrt(((1.0)+(((-1.0)*x6296))));
IkReal x6301=(r22*x6299*x6300);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6297))+(((-1.0)*x6298)))))+(IKabs((((x6297*x6301))+((x6298*x6301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6303=((1.0)*sj0);
IkReal x6304=((1.0)*gconst118);
CheckValue<IkReal> x6305 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6303))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6304))+((cj0*gconst119*r00))+(((-1.0)*gconst118*r11*x6303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6305.valid){
continue;
}
CheckValue<IkReal> x6306=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6304)))),-1);
if(!x6306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6305.value)+(((1.5707963267949)*(x6306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6307=IKsin(j4);
IkReal x6308=IKcos(j4);
IkReal x6309=(gconst118*r01);
IkReal x6310=(sj1*sj2);
IkReal x6311=(gconst119*r20);
IkReal x6312=(gconst119*r10);
IkReal x6313=(gconst119*r00);
IkReal x6314=(gconst118*r21);
IkReal x6315=(gconst118*r11);
IkReal x6316=((1.0)*x6308);
IkReal x6317=((1.0)*cj1*cj2);
IkReal x6318=((1.0)*x6307);
evalcond[0]=((((-1.0)*r22*x6316))+(((-1.0)*x6311*x6318))+((x6307*x6314)));
evalcond[1]=((((-1.0)*x6312*x6318))+cj0+(((-1.0)*r12*x6316))+((x6307*x6315)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6316))+((x6307*x6309))+(((-1.0)*x6313*x6318)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6311*x6316))+((x6308*x6314))+((cj1*sj2))+((r22*x6307)));
evalcond[4]=(((r02*x6307))+((cj0*x6310))+(((-1.0)*cj0*x6317))+(((-1.0)*x6313*x6316))+((x6308*x6309)));
evalcond[5]=((((-1.0)*x6312*x6316))+((x6308*x6315))+(((-1.0)*sj0*x6317))+((r12*x6307))+((sj0*x6310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6319=((1.0)*gconst119);
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6319)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
CheckValue<IkReal> x6321=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6319)))),-1);
if(!x6321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6320.value)+(((1.5707963267949)*(x6321.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6322=IKsin(j4);
IkReal x6323=IKcos(j4);
IkReal x6324=(gconst118*r01);
IkReal x6325=(sj1*sj2);
IkReal x6326=(gconst119*r20);
IkReal x6327=(gconst119*r10);
IkReal x6328=(gconst119*r00);
IkReal x6329=(gconst118*r21);
IkReal x6330=(gconst118*r11);
IkReal x6331=((1.0)*x6323);
IkReal x6332=((1.0)*cj1*cj2);
IkReal x6333=((1.0)*x6322);
evalcond[0]=(((x6322*x6329))+(((-1.0)*x6326*x6333))+(((-1.0)*r22*x6331)));
evalcond[1]=((((-1.0)*r12*x6331))+(((-1.0)*x6327*x6333))+cj0+((x6322*x6330)));
evalcond[2]=(((x6322*x6324))+(((-1.0)*sj0))+(((-1.0)*r02*x6331))+(((-1.0)*x6328*x6333)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6326*x6331))+((x6323*x6329))+((cj1*sj2))+((r22*x6322)));
evalcond[4]=(((r02*x6322))+((cj0*x6325))+(((-1.0)*cj0*x6332))+((x6323*x6324))+(((-1.0)*x6328*x6331)));
evalcond[5]=(((x6323*x6330))+(((-1.0)*x6327*x6331))+((r12*x6322))+((sj0*x6325))+(((-1.0)*sj0*x6332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6334=((1.0)*gconst119);
CheckValue<IkReal> x6335 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6335.valid){
continue;
}
CheckValue<IkReal> x6336=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6334)))),-1);
if(!x6336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6335.value)+(((1.5707963267949)*(x6336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6337=IKsin(j4);
IkReal x6338=IKcos(j4);
IkReal x6339=(gconst118*r01);
IkReal x6340=(sj1*sj2);
IkReal x6341=(gconst119*r20);
IkReal x6342=(gconst119*r10);
IkReal x6343=(gconst119*r00);
IkReal x6344=(gconst118*r21);
IkReal x6345=(gconst118*r11);
IkReal x6346=((1.0)*x6338);
IkReal x6347=((1.0)*cj1*cj2);
IkReal x6348=((1.0)*x6337);
evalcond[0]=((((-1.0)*x6341*x6348))+((x6337*x6344))+(((-1.0)*r22*x6346)));
evalcond[1]=(((x6337*x6345))+cj0+(((-1.0)*x6342*x6348))+(((-1.0)*r12*x6346)));
evalcond[2]=(((x6337*x6339))+(((-1.0)*sj0))+(((-1.0)*x6343*x6348))+(((-1.0)*r02*x6346)));
evalcond[3]=((((-1.0)*x6341*x6346))+((cj2*sj1))+((r22*x6337))+((cj1*sj2))+((x6338*x6344)));
evalcond[4]=(((r02*x6337))+((cj0*x6340))+(((-1.0)*x6343*x6346))+((x6338*x6339))+(((-1.0)*cj0*x6347)));
evalcond[5]=(((r12*x6337))+((sj0*x6340))+(((-1.0)*x6342*x6346))+((x6338*x6345))+(((-1.0)*sj0*x6347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6349=((-1.0)*r10);
IkReal x6351 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6351)==0){
continue;
}
IkReal x6350=pow(x6351,-0.5);
CheckValue<IkReal> x6352 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6349),IKFAST_ATAN2_MAGTHRESH);
if(!x6352.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6352.value));
IkReal gconst121=(r11*x6350);
IkReal gconst122=(x6349*x6350);
CheckValue<IkReal> x6353 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6353.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6353.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6354=((-1.0)*r10);
IkReal x6355=x6350;
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6354),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
IkReal x6356=((-1.0)*(x6357.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6356;
IkReal gconst120=x6356;
IkReal gconst121=(r11*x6355);
IkReal gconst122=(x6354*x6355);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6358=((1.0)*sj0);
IkReal x6359=((1.0)*gconst121);
CheckValue<IkReal> x6360 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6358)))),IkReal(((((-1.0)*cj0*r01*x6359))+((cj0*gconst122*r00))+((gconst122*r10*sj0))+(((-1.0)*gconst121*r11*x6358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6360.valid){
continue;
}
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6359))+(((-1.0)*gconst122*r21)))),-1);
if(!x6361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6360.value)+(((1.5707963267949)*(x6361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6362=IKsin(j4);
IkReal x6363=IKcos(j4);
IkReal x6364=(gconst121*r11);
IkReal x6365=(sj1*sj2);
IkReal x6366=(gconst122*r00);
IkReal x6367=(gconst122*r10);
IkReal x6368=(gconst122*r20);
IkReal x6369=((1.0)*x6363);
IkReal x6370=((1.0)*cj1*cj2);
IkReal x6371=((1.0)*x6362);
IkReal x6372=(gconst121*x6362);
IkReal x6373=(gconst121*x6363);
evalcond[0]=(((r21*x6372))+(((-1.0)*x6368*x6371))+(((-1.0)*r22*x6369)));
evalcond[1]=(cj0+((x6362*x6364))+(((-1.0)*x6367*x6371))+(((-1.0)*r12*x6369)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6366*x6371))+(((-1.0)*r02*x6369))+((r01*x6372)));
evalcond[3]=(((r21*x6373))+((cj2*sj1))+(((-1.0)*x6368*x6369))+((cj1*sj2))+((r22*x6362)));
evalcond[4]=((((-1.0)*x6366*x6369))+((r01*x6373))+((cj0*x6365))+((r02*x6362))+(((-1.0)*cj0*x6370)));
evalcond[5]=((((-1.0)*sj0*x6370))+((r12*x6362))+((sj0*x6365))+((x6363*x6364))+(((-1.0)*x6367*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6374=((1.0)*gconst122);
CheckValue<IkReal> x6375 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6374))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6375.valid){
continue;
}
CheckValue<IkReal> x6376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6374))+(((-1.0)*gconst121*r00)))),-1);
if(!x6376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6375.value)+(((1.5707963267949)*(x6376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6377=IKsin(j4);
IkReal x6378=IKcos(j4);
IkReal x6379=(gconst121*r11);
IkReal x6380=(sj1*sj2);
IkReal x6381=(gconst122*r00);
IkReal x6382=(gconst122*r10);
IkReal x6383=(gconst122*r20);
IkReal x6384=((1.0)*x6378);
IkReal x6385=((1.0)*cj1*cj2);
IkReal x6386=((1.0)*x6377);
IkReal x6387=(gconst121*x6377);
IkReal x6388=(gconst121*x6378);
evalcond[0]=((((-1.0)*x6383*x6386))+(((-1.0)*r22*x6384))+((r21*x6387)));
evalcond[1]=(((x6377*x6379))+cj0+(((-1.0)*r12*x6384))+(((-1.0)*x6382*x6386)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6381*x6386))+((r01*x6387))+(((-1.0)*r02*x6384)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6383*x6384))+((cj1*sj2))+((r21*x6388))+((r22*x6377)));
evalcond[4]=((((-1.0)*x6381*x6384))+((cj0*x6380))+(((-1.0)*cj0*x6385))+((r01*x6388))+((r02*x6377)));
evalcond[5]=(((sj0*x6380))+((x6378*x6379))+(((-1.0)*x6382*x6384))+((r12*x6377))+(((-1.0)*sj0*x6385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6389=((-1.0)*r11);
IkReal x6391 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6391)==0){
continue;
}
IkReal x6390=pow(x6391,-0.5);
CheckValue<IkReal> x6392 = IKatan2WithCheck(IkReal(x6389),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6392.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6392.value))));
IkReal gconst124=(x6389*x6390);
IkReal gconst125=((1.0)*r10*x6390);
CheckValue<IkReal> x6393 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6393.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6393.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6394=((-1.0)*r11);
CheckValue<IkReal> x6397 = IKatan2WithCheck(IkReal(x6394),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6397.valid){
continue;
}
IkReal x6395=((1.0)*(x6397.value));
IkReal x6396=x6390;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6395)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6395)));
IkReal gconst124=(x6394*x6396);
IkReal gconst125=((1.0)*r10*x6396);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6398=((-1.0)*r11);
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(x6398),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
IkReal x6399=((1.0)*(x6401.value));
IkReal x6400=x6390;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6399)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6399)));
IkReal gconst124=(x6398*x6400);
IkReal gconst125=((1.0)*r10*x6400);
IkReal x6402=r12*r12;
IkReal x6403=((1.0)*sj0);
IkReal x6404=(cj0*r02);
IkReal x6405=x6390;
j4eval[0]=((IKabs(((((-1.0)*x6403*x6405))+((r12*x6404*x6405))+((sj0*x6402*x6405)))))+(IKabs(((((-1.0)*x6404))+(((-1.0)*r12*x6403))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6406=((-1.0)*r11);
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(x6406),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
IkReal x6407=((1.0)*(x6409.value));
IkReal x6408=x6390;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6407)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6407)));
IkReal gconst124=(x6406*x6408);
IkReal gconst125=((1.0)*r10*x6408);
IkReal x6410=r12*r12;
IkReal x6411=((1.0)+(((-1.0)*x6410)));
IkReal x6412=(cj2*r22*sj1);
IkReal x6413=(cj1*r22*sj2);
CheckValue<IkReal> x6420=IKPowWithIntegerCheck(x6411,-1);
if(!x6420.valid){
continue;
}
IkReal x6414=x6420.value;
CheckValue<IkReal> x6421=IKPowWithIntegerCheck(((-1.0)+x6410),-1);
if(!x6421.valid){
continue;
}
IkReal x6415=x6421.value;
IkReal x6416=((1.0)*x6414);
if((x6411) < -0.00001)
continue;
IkReal x6417=IKsqrt(x6411);
IkReal x6418=((1.0)*r12*x6415*x6417);
IkReal x6419=((((-1.0)*x6416*(r10*r10)*(r20*r20)))+(((-1.0)*x6416*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6414)));
j4eval[0]=x6419;
j4eval[1]=IKsign(x6419);
j4eval[2]=((IKabs((x6413+x6412)))+(IKabs(((((-1.0)*x6412*x6418))+(((-1.0)*x6413*x6418))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6422=(gconst124*r21);
IkReal x6423=(cj1*sj2);
IkReal x6424=(cj2*sj1);
IkReal x6425=(gconst125*r20);
CheckValue<IkReal> x6426=IKPowWithIntegerCheck(IKsign(((((2.0)*x6422*x6425))+(((-1.0)*(x6422*x6422)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6425*x6425))))),-1);
if(!x6426.valid){
continue;
}
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal((((r22*x6424))+((r22*x6423)))),IkReal(((((-1.0)*x6424*x6425))+(((-1.0)*x6423*x6425))+((x6422*x6424))+((x6422*x6423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6426.value)))+(x6427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6428=IKsin(j4);
IkReal x6429=IKcos(j4);
IkReal x6430=(sj1*sj2);
IkReal x6431=(gconst125*r20);
IkReal x6432=(gconst124*r01);
IkReal x6433=(gconst125*r00);
IkReal x6434=(gconst125*r10);
IkReal x6435=((1.0)*x6429);
IkReal x6436=((1.0)*cj1*cj2);
IkReal x6437=((1.0)*x6428);
IkReal x6438=(gconst124*x6428);
IkReal x6439=(gconst124*x6429);
evalcond[0]=((((-1.0)*x6431*x6437))+(((-1.0)*r22*x6435))+((r21*x6438)));
evalcond[1]=(cj0+(((-1.0)*x6434*x6437))+((r11*x6438))+(((-1.0)*r12*x6435)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6435))+(((-1.0)*x6433*x6437))+((x6428*x6432)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6431*x6435))+((r21*x6439))+((r22*x6428)));
evalcond[4]=(((x6429*x6432))+((cj0*x6430))+((r02*x6428))+(((-1.0)*x6433*x6435))+(((-1.0)*cj0*x6436)));
evalcond[5]=((((-1.0)*sj0*x6436))+(((-1.0)*x6434*x6435))+((r11*x6439))+((r12*x6428))+((sj0*x6430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6440=((1.0)*sj0);
IkReal x6441=((1.0)*cj0);
CheckValue<IkReal> x6442 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6441))+(((-1.0)*r12*x6440)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6440))+(((-1.0)*gconst124*r01*x6441))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6442.valid){
continue;
}
CheckValue<IkReal> x6443=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6442.value)+(((1.5707963267949)*(x6443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6444=IKsin(j4);
IkReal x6445=IKcos(j4);
IkReal x6446=(sj1*sj2);
IkReal x6447=(gconst125*r20);
IkReal x6448=(gconst124*r01);
IkReal x6449=(gconst125*r00);
IkReal x6450=(gconst125*r10);
IkReal x6451=((1.0)*x6445);
IkReal x6452=((1.0)*cj1*cj2);
IkReal x6453=((1.0)*x6444);
IkReal x6454=(gconst124*x6444);
IkReal x6455=(gconst124*x6445);
evalcond[0]=((((-1.0)*x6447*x6453))+((r21*x6454))+(((-1.0)*r22*x6451)));
evalcond[1]=(cj0+((r11*x6454))+(((-1.0)*r12*x6451))+(((-1.0)*x6450*x6453)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6451))+(((-1.0)*x6449*x6453))+((x6444*x6448)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6447*x6451))+((cj1*sj2))+((r21*x6455))+((r22*x6444)));
evalcond[4]=(((x6445*x6448))+(((-1.0)*x6449*x6451))+((cj0*x6446))+(((-1.0)*cj0*x6452))+((r02*x6444)));
evalcond[5]=(((r12*x6444))+(((-1.0)*sj0*x6452))+((r11*x6455))+((sj0*x6446))+(((-1.0)*x6450*x6451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6456=((1.0)*gconst125);
CheckValue<IkReal> x6457=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6456)))),-1);
if(!x6457.valid){
continue;
}
CheckValue<IkReal> x6458 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6456))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6457.value)))+(x6458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6459=IKsin(j4);
IkReal x6460=IKcos(j4);
IkReal x6461=(sj1*sj2);
IkReal x6462=(gconst125*r20);
IkReal x6463=(gconst124*r01);
IkReal x6464=(gconst125*r00);
IkReal x6465=(gconst125*r10);
IkReal x6466=((1.0)*x6460);
IkReal x6467=((1.0)*cj1*cj2);
IkReal x6468=((1.0)*x6459);
IkReal x6469=(gconst124*x6459);
IkReal x6470=(gconst124*x6460);
evalcond[0]=(((r21*x6469))+(((-1.0)*r22*x6466))+(((-1.0)*x6462*x6468)));
evalcond[1]=(cj0+(((-1.0)*x6465*x6468))+(((-1.0)*r12*x6466))+((r11*x6469)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6464*x6468))+(((-1.0)*r02*x6466))+((x6459*x6463)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6459))+(((-1.0)*x6462*x6466))+((r21*x6470)));
evalcond[4]=(((x6460*x6463))+(((-1.0)*x6464*x6466))+((cj0*x6461))+((r02*x6459))+(((-1.0)*cj0*x6467)));
evalcond[5]=((((-1.0)*x6465*x6466))+((sj0*x6461))+((r11*x6470))+(((-1.0)*sj0*x6467))+((r12*x6459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6471=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6471;
j4eval[1]=IKsign(x6471);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6472=((1.0)*cj5);
IkReal x6473=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6472)));
j4eval[0]=x6473;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6472))))));
j4eval[2]=IKsign(x6473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6474=cj5*cj5;
IkReal x6475=r11*r11;
IkReal x6476=(cj5*r10);
IkReal x6477=(r11*sj5);
IkReal x6478=((((-1.0)*x6474*(r10*r10)))+(((2.0)*x6476*x6477))+(((-1.0)*(r12*r12)))+((x6474*x6475))+(((-1.0)*x6475)));
j4eval[0]=x6478;
j4eval[1]=IKsign(x6478);
j4eval[2]=((IKabs(r12))+(IKabs((x6477+(((-1.0)*x6476))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6479=cj5*cj5;
IkReal x6480=r11*r11;
IkReal x6481=(cj5*r10);
IkReal x6482=(r11*sj5);
CheckValue<IkReal> x6483 = IKatan2WithCheck(IkReal(((((-1.0)*x6481))+x6482)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6483.valid){
continue;
}
CheckValue<IkReal> x6484=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6480))+((x6479*x6480))+(((-1.0)*(r12*r12)))+(((-1.0)*x6479*(r10*r10)))+(((2.0)*x6481*x6482)))),-1);
if(!x6484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6483.value)+(((1.5707963267949)*(x6484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6485=IKcos(j4);
IkReal x6486=IKsin(j4);
IkReal x6487=(cj5*r00);
IkReal x6488=(cj5*r10);
IkReal x6489=(r21*sj5);
IkReal x6490=(cj5*r20);
IkReal x6491=((1.0)*x6485);
IkReal x6492=((1.0)*x6486);
IkReal x6493=(sj5*x6486);
IkReal x6494=(sj5*x6485);
evalcond[0]=(((r11*x6494))+(((-1.0)*x6488*x6491))+((r12*x6486)));
evalcond[1]=(((x6486*x6489))+(((-1.0)*r22*x6491))+(((-1.0)*x6490*x6492)));
evalcond[2]=((((-1.0)*x6487*x6492))+((r01*x6493))+(((-1.0)*r02*x6491)));
evalcond[3]=((1.0)+((r11*x6493))+(((-1.0)*x6488*x6492))+(((-1.0)*r12*x6491)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6485*x6489))+(((-1.0)*x6490*x6491))+((r22*x6486)));
evalcond[5]=((((-1.0)*x6487*x6491))+((r01*x6494))+((r02*x6486))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6495=((1.0)*cj5);
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6495))+(((-1.0)*r00*sj5)))),-1);
if(!x6496.valid){
continue;
}
CheckValue<IkReal> x6497 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6495))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6496.value)))+(x6497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6498=IKcos(j4);
IkReal x6499=IKsin(j4);
IkReal x6500=(cj5*r00);
IkReal x6501=(cj5*r10);
IkReal x6502=(r21*sj5);
IkReal x6503=(cj5*r20);
IkReal x6504=((1.0)*x6498);
IkReal x6505=((1.0)*x6499);
IkReal x6506=(sj5*x6499);
IkReal x6507=(sj5*x6498);
evalcond[0]=((((-1.0)*x6501*x6504))+((r12*x6499))+((r11*x6507)));
evalcond[1]=((((-1.0)*x6503*x6505))+(((-1.0)*r22*x6504))+((x6499*x6502)));
evalcond[2]=((((-1.0)*x6500*x6505))+(((-1.0)*r02*x6504))+((r01*x6506)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6504))+(((-1.0)*x6501*x6505))+((r11*x6506)));
evalcond[4]=(((cj2*sj1))+((x6498*x6502))+(((-1.0)*x6503*x6504))+((cj1*sj2))+((r22*x6499)));
evalcond[5]=((((-1.0)*x6500*x6504))+((r02*x6499))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6508.valid){
continue;
}
CheckValue<IkReal> x6509 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6508.value)))+(x6509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6510=IKcos(j4);
IkReal x6511=IKsin(j4);
IkReal x6512=(cj5*r00);
IkReal x6513=(cj5*r10);
IkReal x6514=(r21*sj5);
IkReal x6515=(cj5*r20);
IkReal x6516=((1.0)*x6510);
IkReal x6517=((1.0)*x6511);
IkReal x6518=(sj5*x6511);
IkReal x6519=(sj5*x6510);
evalcond[0]=(((r11*x6519))+((r12*x6511))+(((-1.0)*x6513*x6516)));
evalcond[1]=((((-1.0)*r22*x6516))+((x6511*x6514))+(((-1.0)*x6515*x6517)));
evalcond[2]=((((-1.0)*r02*x6516))+(((-1.0)*x6512*x6517))+((r01*x6518)));
evalcond[3]=((1.0)+((r11*x6518))+(((-1.0)*r12*x6516))+(((-1.0)*x6513*x6517)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6510*x6514))+(((-1.0)*x6515*x6516))+((r22*x6511)));
evalcond[5]=((((-1.0)*x6512*x6516))+((r01*x6519))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6520=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6520;
j4eval[1]=IKsign(x6520);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6521=((1.0)*cj5);
IkReal x6522=((((-1.0)*r21*x6521))+(((-1.0)*r20*sj5)));
j4eval[0]=x6522;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6521))))));
j4eval[2]=IKsign(x6522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6523=cj5*cj5;
IkReal x6524=r11*r11;
IkReal x6525=(r11*sj5);
IkReal x6526=(cj5*r10);
IkReal x6527=((r12*r12)+(((-1.0)*x6523*x6524))+x6524+((x6523*(r10*r10)))+(((-2.0)*x6525*x6526)));
j4eval[0]=x6527;
j4eval[1]=IKsign(x6527);
j4eval[2]=((IKabs(r12))+(IKabs((x6525+(((-1.0)*x6526))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6528=cj5*cj5;
IkReal x6529=r11*r11;
IkReal x6530=(cj5*r10);
IkReal x6531=(r11*sj5);
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x6530*x6531))+x6529+(((-1.0)*x6528*x6529))+((x6528*(r10*r10))))),-1);
if(!x6532.valid){
continue;
}
CheckValue<IkReal> x6533 = IKatan2WithCheck(IkReal((x6531+(((-1.0)*x6530)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6532.value)))+(x6533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6534=IKcos(j4);
IkReal x6535=IKsin(j4);
IkReal x6536=(cj5*r00);
IkReal x6537=(cj5*r10);
IkReal x6538=(r21*sj5);
IkReal x6539=(cj5*r20);
IkReal x6540=((1.0)*x6534);
IkReal x6541=((1.0)*x6535);
IkReal x6542=(sj5*x6535);
IkReal x6543=(sj5*x6534);
evalcond[0]=((((-1.0)*x6537*x6540))+((r11*x6543))+((r12*x6535)));
evalcond[1]=((((-1.0)*r22*x6540))+(((-1.0)*x6539*x6541))+((x6535*x6538)));
evalcond[2]=((((-1.0)*x6536*x6541))+(((-1.0)*r02*x6540))+((r01*x6542)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6540))+(((-1.0)*x6537*x6541))+((r11*x6542)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6535))+(((-1.0)*x6539*x6540))+((x6534*x6538)));
evalcond[5]=(((r02*x6535))+(((-1.0)*sj1*sj2))+(((-1.0)*x6536*x6540))+((cj1*cj2))+((r01*x6543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6544=((1.0)*cj5);
CheckValue<IkReal> x6545 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6544))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6545.valid){
continue;
}
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6544))+(((-1.0)*r20*sj5)))),-1);
if(!x6546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6545.value)+(((1.5707963267949)*(x6546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6547=IKcos(j4);
IkReal x6548=IKsin(j4);
IkReal x6549=(cj5*r00);
IkReal x6550=(cj5*r10);
IkReal x6551=(r21*sj5);
IkReal x6552=(cj5*r20);
IkReal x6553=((1.0)*x6547);
IkReal x6554=((1.0)*x6548);
IkReal x6555=(sj5*x6548);
IkReal x6556=(sj5*x6547);
evalcond[0]=((((-1.0)*x6550*x6553))+((r11*x6556))+((r12*x6548)));
evalcond[1]=((((-1.0)*x6552*x6554))+(((-1.0)*r22*x6553))+((x6548*x6551)));
evalcond[2]=((((-1.0)*r02*x6553))+(((-1.0)*x6549*x6554))+((r01*x6555)));
evalcond[3]=((-1.0)+(((-1.0)*x6550*x6554))+(((-1.0)*r12*x6553))+((r11*x6555)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6552*x6553))+((cj1*sj2))+((x6547*x6551))+((r22*x6548)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6548))+(((-1.0)*x6549*x6553))+((cj1*cj2))+((r01*x6556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6557 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6557.valid){
continue;
}
CheckValue<IkReal> x6558=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6557.value)+(((1.5707963267949)*(x6558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6559=IKcos(j4);
IkReal x6560=IKsin(j4);
IkReal x6561=(cj5*r00);
IkReal x6562=(cj5*r10);
IkReal x6563=(r21*sj5);
IkReal x6564=(cj5*r20);
IkReal x6565=((1.0)*x6559);
IkReal x6566=((1.0)*x6560);
IkReal x6567=(sj5*x6560);
IkReal x6568=(sj5*x6559);
evalcond[0]=(((r12*x6560))+((r11*x6568))+(((-1.0)*x6562*x6565)));
evalcond[1]=(((x6560*x6563))+(((-1.0)*r22*x6565))+(((-1.0)*x6564*x6566)));
evalcond[2]=((((-1.0)*x6561*x6566))+(((-1.0)*r02*x6565))+((r01*x6567)));
evalcond[3]=((-1.0)+((r11*x6567))+(((-1.0)*r12*x6565))+(((-1.0)*x6562*x6566)));
evalcond[4]=(((cj2*sj1))+((r22*x6560))+((cj1*sj2))+((x6559*x6563))+(((-1.0)*x6564*x6565)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6561*x6565))+((r02*x6560))+((cj1*cj2))+((r01*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6569=((-1.0)*r00);
IkReal x6571 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6571)==0){
continue;
}
IkReal x6570=pow(x6571,-0.5);
CheckValue<IkReal> x6572 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6569),IKFAST_ATAN2_MAGTHRESH);
if(!x6572.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6572.value));
IkReal gconst127=(r01*x6570);
IkReal gconst128=(x6569*x6570);
CheckValue<IkReal> x6573 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6573.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6573.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6574=((-1.0)*r00);
IkReal x6575=x6570;
CheckValue<IkReal> x6577 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6574),IKFAST_ATAN2_MAGTHRESH);
if(!x6577.valid){
continue;
}
IkReal x6576=((-1.0)*(x6577.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6576;
IkReal gconst126=x6576;
IkReal gconst127=(r01*x6575);
IkReal gconst128=(x6574*x6575);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6578=((1.0)*sj0);
IkReal x6579=((1.0)*gconst127);
CheckValue<IkReal> x6580 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6578)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6579))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6580.valid){
continue;
}
CheckValue<IkReal> x6581=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6579)))),-1);
if(!x6581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6580.value)+(((1.5707963267949)*(x6581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6582=IKsin(j4);
IkReal x6583=IKcos(j4);
IkReal x6584=(gconst127*r01);
IkReal x6585=(sj1*sj2);
IkReal x6586=(gconst128*r10);
IkReal x6587=(gconst128*r00);
IkReal x6588=(gconst128*r20);
IkReal x6589=((1.0)*x6583);
IkReal x6590=((1.0)*cj1*cj2);
IkReal x6591=((1.0)*x6582);
IkReal x6592=(gconst127*x6583);
IkReal x6593=(gconst127*x6582);
evalcond[0]=(((r21*x6593))+(((-1.0)*r22*x6589))+(((-1.0)*x6588*x6591)));
evalcond[1]=(((r11*x6593))+cj0+(((-1.0)*r12*x6589))+(((-1.0)*x6586*x6591)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6589))+((x6582*x6584))+(((-1.0)*x6587*x6591)));
evalcond[3]=(((cj2*sj1))+((r22*x6582))+((r21*x6592))+((cj1*sj2))+(((-1.0)*x6588*x6589)));
evalcond[4]=(((r02*x6582))+((cj0*x6585))+(((-1.0)*cj0*x6590))+((x6583*x6584))+(((-1.0)*x6587*x6589)));
evalcond[5]=(((sj0*x6585))+((r11*x6592))+(((-1.0)*x6586*x6589))+(((-1.0)*sj0*x6590))+((r12*x6582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6594=((1.0)*gconst128);
CheckValue<IkReal> x6595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6594))+(((-1.0)*gconst127*r10)))),-1);
if(!x6595.valid){
continue;
}
CheckValue<IkReal> x6596 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6594))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6595.value)))+(x6596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6597=IKsin(j4);
IkReal x6598=IKcos(j4);
IkReal x6599=(gconst127*r01);
IkReal x6600=(sj1*sj2);
IkReal x6601=(gconst128*r10);
IkReal x6602=(gconst128*r00);
IkReal x6603=(gconst128*r20);
IkReal x6604=((1.0)*x6598);
IkReal x6605=((1.0)*cj1*cj2);
IkReal x6606=((1.0)*x6597);
IkReal x6607=(gconst127*x6598);
IkReal x6608=(gconst127*x6597);
evalcond[0]=((((-1.0)*r22*x6604))+((r21*x6608))+(((-1.0)*x6603*x6606)));
evalcond[1]=(cj0+(((-1.0)*x6601*x6606))+(((-1.0)*r12*x6604))+((r11*x6608)));
evalcond[2]=((((-1.0)*sj0))+((x6597*x6599))+(((-1.0)*r02*x6604))+(((-1.0)*x6602*x6606)));
evalcond[3]=(((cj2*sj1))+((r22*x6597))+((cj1*sj2))+((r21*x6607))+(((-1.0)*x6603*x6604)));
evalcond[4]=(((r02*x6597))+(((-1.0)*cj0*x6605))+(((-1.0)*x6602*x6604))+((cj0*x6600))+((x6598*x6599)));
evalcond[5]=(((r12*x6597))+((sj0*x6600))+(((-1.0)*sj0*x6605))+(((-1.0)*x6601*x6604))+((r11*x6607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6609=((-1.0)*r01);
IkReal x6611 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6611)==0){
continue;
}
IkReal x6610=pow(x6611,-0.5);
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal(x6609),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6612.value))));
IkReal gconst130=(x6609*x6610);
IkReal gconst131=((1.0)*r00*x6610);
CheckValue<IkReal> x6613 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6613.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6613.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6614=((-1.0)*r01);
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal(x6614),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
IkReal x6615=((1.0)*(x6617.value));
IkReal x6616=x6610;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6615)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6615)));
IkReal gconst130=(x6614*x6616);
IkReal gconst131=((1.0)*r00*x6616);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6618=((-1.0)*r01);
CheckValue<IkReal> x6621 = IKatan2WithCheck(IkReal(x6618),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6621.valid){
continue;
}
IkReal x6619=((1.0)*(x6621.value));
IkReal x6620=x6610;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6619)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6619)));
IkReal gconst130=(x6618*x6620);
IkReal gconst131=((1.0)*r00*x6620);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6622=((-1.0)*r01);
CheckValue<IkReal> x6625 = IKatan2WithCheck(IkReal(x6622),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6625.valid){
continue;
}
IkReal x6623=((1.0)*(x6625.value));
IkReal x6624=x6610;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6623)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6623)));
IkReal gconst130=(x6622*x6624);
IkReal gconst131=((1.0)*r00*x6624);
IkReal x6626=r02*r02;
IkReal x6627=(r12*sj0);
IkReal x6628=((1.0)*cj0);
IkReal x6629=x6610;
j4eval[0]=((IKabs(((((-1.0)*x6627))+(((-1.0)*r02*x6628)))))+(IKabs(((((-1.0)*x6628*x6629))+((r02*x6627*x6629))+((cj0*x6626*x6629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6630=((1.0)*sj0);
IkReal x6631=((1.0)*gconst130);
CheckValue<IkReal> x6632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6631)))),-1);
if(!x6632.valid){
continue;
}
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6630)))),IkReal(((((-1.0)*gconst130*r11*x6630))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6631))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6632.value)))+(x6633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6634=IKsin(j4);
IkReal x6635=IKcos(j4);
IkReal x6636=(gconst131*r10);
IkReal x6637=(sj1*sj2);
IkReal x6638=(gconst131*r20);
IkReal x6639=(gconst131*r00);
IkReal x6640=((1.0)*x6635);
IkReal x6641=((1.0)*cj1*cj2);
IkReal x6642=(gconst130*x6634);
IkReal x6643=((1.0)*x6634);
IkReal x6644=(gconst130*x6635);
evalcond[0]=((((-1.0)*x6638*x6643))+(((-1.0)*r22*x6640))+((r21*x6642)));
evalcond[1]=(cj0+(((-1.0)*x6636*x6643))+((r11*x6642))+(((-1.0)*r12*x6640)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6639*x6643))+((r01*x6642))+(((-1.0)*r02*x6640)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6638*x6640))+((r21*x6644))+((cj1*sj2))+((r22*x6634)));
evalcond[4]=((((-1.0)*x6639*x6640))+((r01*x6644))+(((-1.0)*cj0*x6641))+((cj0*x6637))+((r02*x6634)));
evalcond[5]=((((-1.0)*x6636*x6640))+((r11*x6644))+((r12*x6634))+(((-1.0)*sj0*x6641))+((sj0*x6637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6645=((1.0)*gconst131);
CheckValue<IkReal> x6646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6645))+(((-1.0)*gconst130*r10)))),-1);
if(!x6646.valid){
continue;
}
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6646.value)))+(x6647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6648=IKsin(j4);
IkReal x6649=IKcos(j4);
IkReal x6650=(gconst131*r10);
IkReal x6651=(sj1*sj2);
IkReal x6652=(gconst131*r20);
IkReal x6653=(gconst131*r00);
IkReal x6654=((1.0)*x6649);
IkReal x6655=((1.0)*cj1*cj2);
IkReal x6656=(gconst130*x6648);
IkReal x6657=((1.0)*x6648);
IkReal x6658=(gconst130*x6649);
evalcond[0]=((((-1.0)*r22*x6654))+(((-1.0)*x6652*x6657))+((r21*x6656)));
evalcond[1]=(cj0+((r11*x6656))+(((-1.0)*r12*x6654))+(((-1.0)*x6650*x6657)));
evalcond[2]=((((-1.0)*x6653*x6657))+(((-1.0)*sj0))+((r01*x6656))+(((-1.0)*r02*x6654)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6652*x6654))+((cj1*sj2))+((r22*x6648))+((r21*x6658)));
evalcond[4]=((((-1.0)*x6653*x6654))+((r01*x6658))+(((-1.0)*cj0*x6655))+((r02*x6648))+((cj0*x6651)));
evalcond[5]=(((r11*x6658))+(((-1.0)*sj0*x6655))+(((-1.0)*x6650*x6654))+((sj0*x6651))+((r12*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6659=((1.0)*gconst131);
CheckValue<IkReal> x6660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6659))+(((-1.0)*gconst130*r00)))),-1);
if(!x6660.valid){
continue;
}
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6659)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6660.value)))+(x6661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6662=IKsin(j4);
IkReal x6663=IKcos(j4);
IkReal x6664=(gconst131*r10);
IkReal x6665=(sj1*sj2);
IkReal x6666=(gconst131*r20);
IkReal x6667=(gconst131*r00);
IkReal x6668=((1.0)*x6663);
IkReal x6669=((1.0)*cj1*cj2);
IkReal x6670=(gconst130*x6662);
IkReal x6671=((1.0)*x6662);
IkReal x6672=(gconst130*x6663);
evalcond[0]=((((-1.0)*r22*x6668))+((r21*x6670))+(((-1.0)*x6666*x6671)));
evalcond[1]=(((r11*x6670))+cj0+(((-1.0)*r12*x6668))+(((-1.0)*x6664*x6671)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6670))+(((-1.0)*r02*x6668))+(((-1.0)*x6667*x6671)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6662))+(((-1.0)*x6666*x6668))+((r21*x6672)));
evalcond[4]=((((-1.0)*x6667*x6668))+((r02*x6662))+((r01*x6672))+(((-1.0)*cj0*x6669))+((cj0*x6665)));
evalcond[5]=((((-1.0)*x6664*x6668))+((r11*x6672))+((r12*x6662))+(((-1.0)*sj0*x6669))+((sj0*x6665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6673=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6673;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6673);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6674=((1.0)*cj5);
IkReal x6675=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6674)));
j4eval[0]=x6675;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6674))+((r21*sj5))))));
j4eval[2]=IKsign(x6675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6676=cj5*cj5;
IkReal x6677=r01*r01;
IkReal x6678=(cj5*r00);
IkReal x6679=(r01*sj5);
IkReal x6680=(((x6676*(r00*r00)))+x6677+(((-2.0)*x6678*x6679))+(((-1.0)*x6676*x6677))+(r02*r02));
j4eval[0]=x6680;
j4eval[1]=IKsign(x6680);
j4eval[2]=((IKabs(r02))+(IKabs((x6679+(((-1.0)*x6678))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6681=cj5*cj5;
IkReal x6682=r01*r01;
IkReal x6683=(r01*sj5);
IkReal x6684=(cj5*r00);
CheckValue<IkReal> x6685 = IKatan2WithCheck(IkReal((x6683+(((-1.0)*x6684)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6685.valid){
continue;
}
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign((x6682+((x6681*(r00*r00)))+(((-2.0)*x6683*x6684))+(r02*r02)+(((-1.0)*x6681*x6682)))),-1);
if(!x6686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6685.value)+(((1.5707963267949)*(x6686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6687=IKcos(j4);
IkReal x6688=IKsin(j4);
IkReal x6689=(cj5*r00);
IkReal x6690=(cj5*r10);
IkReal x6691=(r21*sj5);
IkReal x6692=(cj5*r20);
IkReal x6693=((1.0)*x6687);
IkReal x6694=((1.0)*x6688);
IkReal x6695=(sj5*x6688);
IkReal x6696=(sj5*x6687);
evalcond[0]=(((r02*x6688))+(((-1.0)*x6689*x6693))+((r01*x6696)));
evalcond[1]=(((x6688*x6691))+(((-1.0)*x6692*x6694))+(((-1.0)*r22*x6693)));
evalcond[2]=(((r11*x6695))+(((-1.0)*x6690*x6694))+(((-1.0)*r12*x6693)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6693))+(((-1.0)*x6689*x6694))+((r01*x6695)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6687*x6691))+((r22*x6688))+(((-1.0)*x6692*x6693)));
evalcond[5]=(((r12*x6688))+((r11*x6696))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6690*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6697=((1.0)*cj5);
CheckValue<IkReal> x6698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6697)))),-1);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6697))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6698.value)))+(x6699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKcos(j4);
IkReal x6701=IKsin(j4);
IkReal x6702=(cj5*r00);
IkReal x6703=(cj5*r10);
IkReal x6704=(r21*sj5);
IkReal x6705=(cj5*r20);
IkReal x6706=((1.0)*x6700);
IkReal x6707=((1.0)*x6701);
IkReal x6708=(sj5*x6701);
IkReal x6709=(sj5*x6700);
evalcond[0]=((((-1.0)*x6702*x6706))+((r01*x6709))+((r02*x6701)));
evalcond[1]=((((-1.0)*x6705*x6707))+(((-1.0)*r22*x6706))+((x6701*x6704)));
evalcond[2]=((((-1.0)*x6703*x6707))+((r11*x6708))+(((-1.0)*r12*x6706)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6706))+(((-1.0)*x6702*x6707))+((r01*x6708)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6705*x6706))+((cj1*sj2))+((x6700*x6704))+((r22*x6701)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6703*x6706))+((r11*x6709))+((r12*x6701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6710=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6710.valid){
continue;
}
CheckValue<IkReal> x6711 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6710.value)))+(x6711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6712=IKcos(j4);
IkReal x6713=IKsin(j4);
IkReal x6714=(cj5*r00);
IkReal x6715=(cj5*r10);
IkReal x6716=(r21*sj5);
IkReal x6717=(cj5*r20);
IkReal x6718=((1.0)*x6712);
IkReal x6719=((1.0)*x6713);
IkReal x6720=(sj5*x6713);
IkReal x6721=(sj5*x6712);
evalcond[0]=(((r02*x6713))+(((-1.0)*x6714*x6718))+((r01*x6721)));
evalcond[1]=((((-1.0)*x6717*x6719))+((x6713*x6716))+(((-1.0)*r22*x6718)));
evalcond[2]=(((r11*x6720))+(((-1.0)*r12*x6718))+(((-1.0)*x6715*x6719)));
evalcond[3]=((-1.0)+(((-1.0)*x6714*x6719))+(((-1.0)*r02*x6718))+((r01*x6720)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6713))+((x6712*x6716))+(((-1.0)*x6717*x6718)));
evalcond[5]=(((r11*x6721))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6715*x6718))+((r12*x6713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6722=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6722;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6723=((1.0)*cj5);
IkReal x6724=((((-1.0)*r21*x6723))+(((-1.0)*r20*sj5)));
j4eval[0]=x6724;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6723))))));
j4eval[2]=IKsign(x6724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6725=(r01*sj5);
IkReal x6726=(cj1*sj2);
IkReal x6727=(cj2*sj1);
IkReal x6728=((1.0)*r02);
IkReal x6729=((1.0)*cj5*r00);
IkReal x6730=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6730;
j4eval[1]=((IKabs(((((-1.0)*x6727*x6728))+(((-1.0)*x6726*x6728)))))+(IKabs(((((-1.0)*x6727*x6729))+((x6725*x6727))+((x6725*x6726))+(((-1.0)*x6726*x6729))))));
j4eval[2]=IKsign(x6730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6731=(r01*sj5);
IkReal x6732=(cj1*sj2);
IkReal x6733=(cj2*sj1);
IkReal x6734=((1.0)*r02);
IkReal x6735=((1.0)*cj5*r00);
CheckValue<IkReal> x6736 = IKatan2WithCheck(IkReal((((x6731*x6732))+((x6731*x6733))+(((-1.0)*x6733*x6735))+(((-1.0)*x6732*x6735)))),IkReal(((((-1.0)*x6733*x6734))+(((-1.0)*x6732*x6734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6736.valid){
continue;
}
CheckValue<IkReal> x6737=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6736.value)+(((1.5707963267949)*(x6737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6738=IKcos(j4);
IkReal x6739=IKsin(j4);
IkReal x6740=(cj5*r00);
IkReal x6741=(cj5*r10);
IkReal x6742=(r21*sj5);
IkReal x6743=(cj5*r20);
IkReal x6744=((1.0)*x6738);
IkReal x6745=((1.0)*x6739);
IkReal x6746=(sj5*x6739);
IkReal x6747=(sj5*x6738);
evalcond[0]=(((r01*x6747))+(((-1.0)*x6740*x6744))+((r02*x6739)));
evalcond[1]=((((-1.0)*r22*x6744))+((x6739*x6742))+(((-1.0)*x6743*x6745)));
evalcond[2]=((((-1.0)*r12*x6744))+((r11*x6746))+(((-1.0)*x6741*x6745)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6744))+((r01*x6746))+(((-1.0)*x6740*x6745)));
evalcond[4]=(((r22*x6739))+((cj2*sj1))+((cj1*sj2))+((x6738*x6742))+(((-1.0)*x6743*x6744)));
evalcond[5]=(((r11*x6747))+(((-1.0)*sj1*sj2))+((r12*x6739))+((cj1*cj2))+(((-1.0)*x6741*x6744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6748=((1.0)*cj5);
CheckValue<IkReal> x6749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6748))+(((-1.0)*r20*sj5)))),-1);
if(!x6749.valid){
continue;
}
CheckValue<IkReal> x6750 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6748))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6749.value)))+(x6750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6751=IKcos(j4);
IkReal x6752=IKsin(j4);
IkReal x6753=(cj5*r00);
IkReal x6754=(cj5*r10);
IkReal x6755=(r21*sj5);
IkReal x6756=(cj5*r20);
IkReal x6757=((1.0)*x6751);
IkReal x6758=((1.0)*x6752);
IkReal x6759=(sj5*x6752);
IkReal x6760=(sj5*x6751);
evalcond[0]=(((r01*x6760))+((r02*x6752))+(((-1.0)*x6753*x6757)));
evalcond[1]=((((-1.0)*r22*x6757))+(((-1.0)*x6756*x6758))+((x6752*x6755)));
evalcond[2]=(((r11*x6759))+(((-1.0)*r12*x6757))+(((-1.0)*x6754*x6758)));
evalcond[3]=((1.0)+((r01*x6759))+(((-1.0)*r02*x6757))+(((-1.0)*x6753*x6758)));
evalcond[4]=(((cj2*sj1))+((r22*x6752))+((x6751*x6755))+((cj1*sj2))+(((-1.0)*x6756*x6757)));
evalcond[5]=(((r12*x6752))+(((-1.0)*sj1*sj2))+((r11*x6760))+((cj1*cj2))+(((-1.0)*x6754*x6757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6761 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6761.valid){
continue;
}
CheckValue<IkReal> x6762=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6761.value)+(((1.5707963267949)*(x6762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6763=IKcos(j4);
IkReal x6764=IKsin(j4);
IkReal x6765=(cj5*r00);
IkReal x6766=(cj5*r10);
IkReal x6767=(r21*sj5);
IkReal x6768=(cj5*r20);
IkReal x6769=((1.0)*x6763);
IkReal x6770=((1.0)*x6764);
IkReal x6771=(sj5*x6764);
IkReal x6772=(sj5*x6763);
evalcond[0]=((((-1.0)*x6765*x6769))+((r02*x6764))+((r01*x6772)));
evalcond[1]=((((-1.0)*x6768*x6770))+(((-1.0)*r22*x6769))+((x6764*x6767)));
evalcond[2]=(((r11*x6771))+(((-1.0)*r12*x6769))+(((-1.0)*x6766*x6770)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6769))+(((-1.0)*x6765*x6770))+((r01*x6771)));
evalcond[4]=((((-1.0)*x6768*x6769))+((cj2*sj1))+((r22*x6764))+((cj1*sj2))+((x6763*x6767)));
evalcond[5]=(((r11*x6772))+((r12*x6764))+(((-1.0)*x6766*x6769))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6773=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6773);
rxp1_1=(px*r21);
rxp1_2=(r11*x6773);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6774=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6774);
rxp1_1=(px*r21);
rxp1_2=(r11*x6774);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6775=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6775);
rxp1_1=(px*r21);
rxp1_2=(r11*x6775);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6778=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6778.valid){
continue;
}
IkReal x6776=x6778.value;
IkReal x6777=(sj0*x6776);
cj4array[0]=((((-1.0)*sj1*sj2*x6777))+((cj1*cj2*x6777)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6779=IKsin(j4);
IkReal x6780=IKcos(j4);
IkReal x6781=(r21*sj5);
IkReal x6782=((1.0)*cj5*r20);
evalcond[0]=(r02*x6779);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6780)));
evalcond[2]=((((-1.0)*x6779*x6782))+((x6779*x6781)));
evalcond[3]=((((-1.0)*cj5*r10*x6779))+((r11*sj5*x6779)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6780*x6781))+(((-1.0)*x6780*x6782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6785=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6785.valid){
continue;
}
IkReal x6783=x6785.value;
IkReal x6784=((1.0)*x6783);
cj4array[0]=((((-1.0)*cj2*sj1*x6784))+(((-1.0)*cj1*sj2*x6784)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6786=IKsin(j4);
IkReal x6787=IKcos(j4);
IkReal x6788=((1.0)*sj0);
IkReal x6789=((1.0)*cj5);
IkReal x6790=(sj5*x6786);
evalcond[0]=(r02*x6786);
evalcond[1]=((((-1.0)*x6788))+(((-1.0)*r02*x6787)));
evalcond[2]=(((r21*x6790))+(((-1.0)*r20*x6786*x6789)));
evalcond[3]=(((r11*x6790))+(((-1.0)*r10*x6786*x6789)));
evalcond[4]=(((r11*sj5*x6787))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6788))+(((-1.0)*r10*x6787*x6789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6791=IKPowWithIntegerCheck(r02,-1);
if(!x6791.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6791.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6792=IKsin(j4);
IkReal x6793=IKcos(j4);
IkReal x6794=(r21*sj5);
IkReal x6795=((1.0)*cj5);
IkReal x6796=(r11*sj5);
evalcond[0]=(r02*x6792);
evalcond[1]=(((x6792*x6794))+(((-1.0)*r20*x6792*x6795)));
evalcond[2]=(((x6792*x6796))+(((-1.0)*r10*x6792*x6795)));
evalcond[3]=(((cj2*sj1))+((x6793*x6794))+((cj1*sj2))+(((-1.0)*r20*x6793*x6795)));
evalcond[4]=(((x6793*x6796))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6793*x6795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6797=((1.0)*sj0);
IkReal x6798=((1.0)*cj0);
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6797))+(((-1.0)*r02*x6798)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6797))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
CheckValue<IkReal> x6800=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6799.value)+(((1.5707963267949)*(x6800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6801=IKsin(j4);
IkReal x6802=IKcos(j4);
IkReal x6803=(cj5*r00);
IkReal x6804=(cj5*r10);
IkReal x6805=(r21*sj5);
IkReal x6806=(sj1*sj2);
IkReal x6807=(cj5*r20);
IkReal x6808=((1.0)*x6802);
IkReal x6809=((1.0)*cj1*cj2);
IkReal x6810=((1.0)*x6801);
IkReal x6811=(sj5*x6801);
IkReal x6812=(sj5*x6802);
evalcond[0]=(((x6801*x6805))+(((-1.0)*x6807*x6810))+(((-1.0)*r22*x6808)));
evalcond[1]=(((r11*x6811))+cj0+(((-1.0)*r12*x6808))+(((-1.0)*x6804*x6810)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6808))+((r01*x6811))+(((-1.0)*x6803*x6810)));
evalcond[3]=(((cj2*sj1))+((r22*x6801))+((cj1*sj2))+(((-1.0)*x6807*x6808))+((x6802*x6805)));
evalcond[4]=((((-1.0)*x6803*x6808))+(((-1.0)*cj0*x6809))+((cj0*x6806))+((r01*x6812))+((r02*x6801)));
evalcond[5]=(((r11*x6812))+(((-1.0)*sj0*x6809))+((sj0*x6806))+(((-1.0)*x6804*x6808))+((r12*x6801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6813=((1.0)*cj5);
CheckValue<IkReal> x6814 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6814.valid){
continue;
}
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6813)))),-1);
if(!x6815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6814.value)+(((1.5707963267949)*(x6815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6816=IKsin(j4);
IkReal x6817=IKcos(j4);
IkReal x6818=(cj5*r00);
IkReal x6819=(cj5*r10);
IkReal x6820=(r21*sj5);
IkReal x6821=(sj1*sj2);
IkReal x6822=(cj5*r20);
IkReal x6823=((1.0)*x6817);
IkReal x6824=((1.0)*cj1*cj2);
IkReal x6825=((1.0)*x6816);
IkReal x6826=(sj5*x6816);
IkReal x6827=(sj5*x6817);
evalcond[0]=(((x6816*x6820))+(((-1.0)*r22*x6823))+(((-1.0)*x6822*x6825)));
evalcond[1]=(cj0+(((-1.0)*r12*x6823))+((r11*x6826))+(((-1.0)*x6819*x6825)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6823))+(((-1.0)*x6818*x6825))+((r01*x6826)));
evalcond[3]=(((cj2*sj1))+((x6817*x6820))+((cj1*sj2))+((r22*x6816))+(((-1.0)*x6822*x6823)));
evalcond[4]=((((-1.0)*x6818*x6823))+((r01*x6827))+((r02*x6816))+(((-1.0)*cj0*x6824))+((cj0*x6821)));
evalcond[5]=((((-1.0)*sj0*x6824))+((r12*x6816))+((sj0*x6821))+((r11*x6827))+(((-1.0)*x6819*x6823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6828=((1.0)*cj5);
CheckValue<IkReal> x6829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6828)))),-1);
if(!x6829.valid){
continue;
}
CheckValue<IkReal> x6830 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6829.value)))+(x6830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6831=IKsin(j4);
IkReal x6832=IKcos(j4);
IkReal x6833=(cj5*r00);
IkReal x6834=(cj5*r10);
IkReal x6835=(r21*sj5);
IkReal x6836=(sj1*sj2);
IkReal x6837=(cj5*r20);
IkReal x6838=((1.0)*x6832);
IkReal x6839=((1.0)*cj1*cj2);
IkReal x6840=((1.0)*x6831);
IkReal x6841=(sj5*x6831);
IkReal x6842=(sj5*x6832);
evalcond[0]=(((x6831*x6835))+(((-1.0)*r22*x6838))+(((-1.0)*x6837*x6840)));
evalcond[1]=(cj0+((r11*x6841))+(((-1.0)*r12*x6838))+(((-1.0)*x6834*x6840)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6838))+((r01*x6841))+(((-1.0)*x6833*x6840)));
evalcond[3]=(((cj2*sj1))+((r22*x6831))+((cj1*sj2))+((x6832*x6835))+(((-1.0)*x6837*x6838)));
evalcond[4]=(((r02*x6831))+(((-1.0)*x6833*x6838))+(((-1.0)*cj0*x6839))+((r01*x6842))+((cj0*x6836)));
evalcond[5]=((((-1.0)*sj0*x6839))+((r11*x6842))+((sj0*x6836))+((r12*x6831))+(((-1.0)*x6834*x6838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6843=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6843;
j0eval[1]=IKsign(x6843);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6844=cj5*cj5;
IkReal x6845=r21*r21;
IkReal x6846=(cj2*sj1);
IkReal x6847=(cj1*sj2);
IkReal x6848=(r21*sj5);
IkReal x6849=((1.0)*cj5*r20);
IkReal x6850=((((-2.0)*cj5*r20*x6848))+(r22*r22)+((x6844*(r20*r20)))+x6845+(((-1.0)*x6844*x6845)));
j4eval[0]=x6850;
j4eval[1]=IKsign(x6850);
j4eval[2]=((IKabs((((r22*x6846))+((r22*x6847)))))+(IKabs((((x6847*x6848))+(((-1.0)*x6846*x6849))+((x6846*x6848))+(((-1.0)*x6847*x6849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6851=cj1*cj1;
IkReal x6852=(cj2*sj2);
IkReal x6853=(cj2*sj1);
IkReal x6854=(cj1*sj1);
j0eval[0]=((((-1.06936921195177)*cj1*x6853))+x6854+x6852+(((-2.0)*x6851*x6852))+(((-1.06936921195177)*sj2*x6851))+(((-2.0)*cj1*cj2*x6853)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6853)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-0.114688717055332)*px))+(((0.828504447384304)*py))), ((((0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6855=IKsin(j0);
IkReal x6856=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((1.1843)*x6856))+(((-0.163941)*x6855)));
evalcond[1]=((((0.163941)*x6856))+(((-1.0)*py))+(((1.1843)*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6857=((1.0)*cj5);
IkReal x6858=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6857)));
j4eval[0]=x6858;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6857))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6859=((1.0)*cj5);
IkReal x6860=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6859)));
j4eval[0]=x6860;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6859))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6861=cj5*cj5;
IkReal x6862=((1.0)*sj5);
IkReal x6863=(cj5*r20);
IkReal x6864=(r11*r21);
IkReal x6865=((((-1.0)*cj5*r10*r21*x6862))+((r12*r22))+(((-1.0)*x6861*x6864))+(((-1.0)*r11*x6862*x6863))+x6864+((r10*r20*x6861)));
j4eval[0]=x6865;
j4eval[1]=IKsign(x6865);
j4eval[2]=((IKabs((((cj0*x6863))+(((-1.0)*cj0*r21*x6862)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6866=cj5*cj5;
IkReal x6867=((1.0)*sj5);
IkReal x6868=(cj5*r20);
IkReal x6869=(r11*r21);
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6867))+(((-1.0)*x6866*x6869))+((r12*r22))+x6869+((r10*r20*x6866))+(((-1.0)*r11*x6867*x6868)))),-1);
if(!x6870.valid){
continue;
}
CheckValue<IkReal> x6871 = IKatan2WithCheck(IkReal((((cj0*x6868))+(((-1.0)*cj0*r21*x6867)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6870.value)))+(x6871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6872=IKsin(j4);
IkReal x6873=IKcos(j4);
IkReal x6874=((1.0)*sj0);
IkReal x6875=(cj5*r00);
IkReal x6876=(r11*sj5);
IkReal x6877=(cj5*r10);
IkReal x6878=(r21*sj5);
IkReal x6879=(cj5*r20);
IkReal x6880=(r01*sj5);
IkReal x6881=((1.0)*x6873);
IkReal x6882=((1.0)*x6872);
evalcond[0]=(((x6872*x6878))+(((-1.0)*x6879*x6882))+(((-1.0)*r22*x6881)));
evalcond[1]=(((x6873*x6879))+(((-1.0)*x6878*x6881))+(((-1.0)*r22*x6882)));
evalcond[2]=(cj0+((x6872*x6876))+(((-1.0)*x6877*x6882))+(((-1.0)*r12*x6881)));
evalcond[3]=((((-1.0)*x6875*x6882))+(((-1.0)*x6874))+(((-1.0)*r02*x6881))+((x6872*x6880)));
evalcond[4]=(((x6873*x6875))+(((-1.0)*r02*x6882))+(((-1.0)*x6880*x6881))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6876*x6881))+(((-1.0)*x6874))+((x6873*x6877))+(((-1.0)*r12*x6882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6883=((1.0)*cj5);
CheckValue<IkReal> x6884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6883)))),-1);
if(!x6884.valid){
continue;
}
CheckValue<IkReal> x6885 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6884.value)))+(x6885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6886=IKsin(j4);
IkReal x6887=IKcos(j4);
IkReal x6888=((1.0)*sj0);
IkReal x6889=(cj5*r00);
IkReal x6890=(r11*sj5);
IkReal x6891=(cj5*r10);
IkReal x6892=(r21*sj5);
IkReal x6893=(cj5*r20);
IkReal x6894=(r01*sj5);
IkReal x6895=((1.0)*x6887);
IkReal x6896=((1.0)*x6886);
evalcond[0]=(((x6886*x6892))+(((-1.0)*x6893*x6896))+(((-1.0)*r22*x6895)));
evalcond[1]=((((-1.0)*x6892*x6895))+(((-1.0)*r22*x6896))+((x6887*x6893)));
evalcond[2]=(((x6886*x6890))+cj0+(((-1.0)*x6891*x6896))+(((-1.0)*r12*x6895)));
evalcond[3]=(((x6886*x6894))+(((-1.0)*x6889*x6896))+(((-1.0)*x6888))+(((-1.0)*r02*x6895)));
evalcond[4]=(((x6887*x6889))+(((-1.0)*x6894*x6895))+(((-1.0)*r02*x6896))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6890*x6895))+(((-1.0)*r12*x6896))+(((-1.0)*x6888))+((x6887*x6891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6897=((1.0)*cj5);
CheckValue<IkReal> x6898=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6897))+(((-1.0)*r00*sj5)))),-1);
if(!x6898.valid){
continue;
}
CheckValue<IkReal> x6899 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6897)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6898.value)))+(x6899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6900=IKsin(j4);
IkReal x6901=IKcos(j4);
IkReal x6902=((1.0)*sj0);
IkReal x6903=(cj5*r00);
IkReal x6904=(r11*sj5);
IkReal x6905=(cj5*r10);
IkReal x6906=(r21*sj5);
IkReal x6907=(cj5*r20);
IkReal x6908=(r01*sj5);
IkReal x6909=((1.0)*x6901);
IkReal x6910=((1.0)*x6900);
evalcond[0]=((((-1.0)*r22*x6909))+(((-1.0)*x6907*x6910))+((x6900*x6906)));
evalcond[1]=((((-1.0)*r22*x6910))+(((-1.0)*x6906*x6909))+((x6901*x6907)));
evalcond[2]=(cj0+(((-1.0)*r12*x6909))+((x6900*x6904))+(((-1.0)*x6905*x6910)));
evalcond[3]=((((-1.0)*r02*x6909))+(((-1.0)*x6903*x6910))+((x6900*x6908))+(((-1.0)*x6902)));
evalcond[4]=(((x6901*x6903))+(((-1.0)*x6908*x6909))+(((-1.0)*r02*x6910))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6904*x6909))+(((-1.0)*x6902))+(((-1.0)*r12*x6910))+((x6901*x6905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6911=IKsin(j0);
IkReal x6912=IKcos(j0);
evalcond[0]=((((0.0397)*x6912))+(((-1.0)*px))+(((-0.163941)*x6911)));
evalcond[1]=((((0.163941)*x6912))+(((0.0397)*x6911))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6913=((1.0)*cj5);
IkReal x6914=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6913)));
j4eval[0]=x6914;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6913))))));
j4eval[2]=IKsign(x6914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6915=cj5*cj5;
IkReal x6916=((1.0)*r21);
IkReal x6917=(cj5*sj5);
IkReal x6918=((1.0)*r20);
IkReal x6919=((((-1.0)*r01*x6917*x6918))+(((-1.0)*r01*x6915*x6916))+((r01*r21))+((r00*r20*x6915))+((r02*r22))+(((-1.0)*r00*x6916*x6917)));
j4eval[0]=x6919;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6918)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6920=cj5*cj5;
IkReal x6921=(r21*sj5);
IkReal x6922=(r11*r21);
IkReal x6923=((1.0)*cj5*r20);
IkReal x6924=((((-1.0)*r11*sj5*x6923))+((r12*r22))+(((-1.0)*x6920*x6922))+x6922+((r10*r20*x6920))+(((-1.0)*cj5*r10*x6921)));
j4eval[0]=x6924;
j4eval[1]=((IKabs((((sj0*x6921))+(((-1.0)*sj0*x6923)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6925=cj5*cj5;
IkReal x6926=(r21*sj5);
IkReal x6927=(r11*r21);
IkReal x6928=((1.0)*cj5*r20);
CheckValue<IkReal> x6929 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6926))+(((-1.0)*sj0*x6928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6929.valid){
continue;
}
CheckValue<IkReal> x6930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6928))+((r12*r22))+x6927+((r10*r20*x6925))+(((-1.0)*x6925*x6927))+(((-1.0)*cj5*r10*x6926)))),-1);
if(!x6930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6929.value)+(((1.5707963267949)*(x6930.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6931=IKsin(j4);
IkReal x6932=IKcos(j4);
IkReal x6933=(r11*sj5);
IkReal x6934=(cj5*r00);
IkReal x6935=(cj5*r10);
IkReal x6936=(r21*sj5);
IkReal x6937=(cj5*r20);
IkReal x6938=(r01*sj5);
IkReal x6939=((1.0)*x6932);
IkReal x6940=((1.0)*x6931);
evalcond[0]=((((-1.0)*r22*x6939))+(((-1.0)*x6937*x6940))+((x6931*x6936)));
evalcond[1]=(((x6932*x6937))+(((-1.0)*r22*x6940))+(((-1.0)*x6936*x6939)));
evalcond[2]=(cj0+(((-1.0)*r12*x6939))+(((-1.0)*x6935*x6940))+((x6931*x6933)));
evalcond[3]=(cj0+(((-1.0)*x6938*x6939))+((x6932*x6934))+(((-1.0)*r02*x6940)));
evalcond[4]=(sj0+(((-1.0)*r12*x6940))+((x6932*x6935))+(((-1.0)*x6933*x6939)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6939))+(((-1.0)*x6934*x6940))+((x6931*x6938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6941=cj5*cj5;
IkReal x6942=((1.0)*r21);
IkReal x6943=(cj5*sj5);
IkReal x6944=((1.0)*r20);
CheckValue<IkReal> x6945 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6945.valid){
continue;
}
CheckValue<IkReal> x6946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6942*x6943))+(((-1.0)*r01*x6943*x6944))+((r00*r20*x6941))+((r01*r21))+(((-1.0)*r01*x6941*x6942))+((r02*r22)))),-1);
if(!x6946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6945.value)+(((1.5707963267949)*(x6946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6947=IKsin(j4);
IkReal x6948=IKcos(j4);
IkReal x6949=(r11*sj5);
IkReal x6950=(cj5*r00);
IkReal x6951=(cj5*r10);
IkReal x6952=(r21*sj5);
IkReal x6953=(cj5*r20);
IkReal x6954=(r01*sj5);
IkReal x6955=((1.0)*x6948);
IkReal x6956=((1.0)*x6947);
evalcond[0]=(((x6947*x6952))+(((-1.0)*r22*x6955))+(((-1.0)*x6953*x6956)));
evalcond[1]=((((-1.0)*x6952*x6955))+(((-1.0)*r22*x6956))+((x6948*x6953)));
evalcond[2]=((((-1.0)*x6951*x6956))+cj0+(((-1.0)*r12*x6955))+((x6947*x6949)));
evalcond[3]=(cj0+(((-1.0)*r02*x6956))+((x6948*x6950))+(((-1.0)*x6954*x6955)));
evalcond[4]=(sj0+(((-1.0)*r12*x6956))+(((-1.0)*x6949*x6955))+((x6948*x6951)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6950*x6956))+(((-1.0)*r02*x6955))+((x6947*x6954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6957=((1.0)*cj5);
CheckValue<IkReal> x6958 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6958.valid){
continue;
}
CheckValue<IkReal> x6959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6957)))),-1);
if(!x6959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6958.value)+(((1.5707963267949)*(x6959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6960=IKsin(j4);
IkReal x6961=IKcos(j4);
IkReal x6962=(r11*sj5);
IkReal x6963=(cj5*r00);
IkReal x6964=(cj5*r10);
IkReal x6965=(r21*sj5);
IkReal x6966=(cj5*r20);
IkReal x6967=(r01*sj5);
IkReal x6968=((1.0)*x6961);
IkReal x6969=((1.0)*x6960);
evalcond[0]=((((-1.0)*x6966*x6969))+(((-1.0)*r22*x6968))+((x6960*x6965)));
evalcond[1]=((((-1.0)*x6965*x6968))+((x6961*x6966))+(((-1.0)*r22*x6969)));
evalcond[2]=((((-1.0)*x6964*x6969))+cj0+(((-1.0)*r12*x6968))+((x6960*x6962)));
evalcond[3]=((((-1.0)*r02*x6969))+cj0+((x6961*x6963))+(((-1.0)*x6967*x6968)));
evalcond[4]=(sj0+((x6961*x6964))+(((-1.0)*r12*x6969))+(((-1.0)*x6962*x6968)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6968))+((x6960*x6967))+(((-1.0)*x6963*x6969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6970=((1.0)*sj5);
IkReal x6971=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6970))+(((-1.0)*r11*x6971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6970))+(((-1.0)*r01*x6971)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6970))+(((-1.0)*r11*x6971))))+IKsqr(((((-1.0)*r00*x6970))+(((-1.0)*r01*x6971))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6970))+(((-1.0)*r11*x6971))), ((((-1.0)*r00*x6970))+(((-1.0)*r01*x6971))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6972=IKsin(j0);
IkReal x6973=IKcos(j0);
IkReal x6974=(cj5*r01);
IkReal x6975=(cj5*r11);
IkReal x6976=((0.1157)*sj5);
IkReal x6977=((1.0)*sj5);
evalcond[0]=((((-1.0)*x6973))+(((-1.0)*x6974))+(((-1.0)*r00*x6977)));
evalcond[1]=((((-1.0)*x6972))+(((-1.0)*x6975))+(((-1.0)*r10*x6977)));
evalcond[2]=((((-0.1157)*x6974))+(((-1.0)*px))+(((-0.163941)*x6972))+(((-1.0)*r00*x6976)));
evalcond[3]=((((-0.1157)*x6975))+(((-1.0)*r10*x6976))+(((-1.0)*py))+(((0.163941)*x6973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6978=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6978;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6979=((1.0)*cj5);
IkReal x6980=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6979)));
j4eval[0]=x6980;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6979))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6981=cj5*cj5;
IkReal x6982=r21*r21;
IkReal x6983=(r21*sj5);
IkReal x6984=(cj5*r20);
IkReal x6985=((r22*r22)+((x6981*(r20*r20)))+x6982+(((-1.0)*x6981*x6982))+(((-2.0)*x6983*x6984)));
j4eval[0]=x6985;
j4eval[1]=IKsign(x6985);
j4eval[2]=((IKabs(((((-1.0)*x6984))+x6983)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6986=cj5*cj5;
IkReal x6987=r21*r21;
IkReal x6988=(r21*sj5);
IkReal x6989=(cj5*r20);
CheckValue<IkReal> x6990=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6988*x6989))+(((-1.0)*x6986*x6987))+x6987+((x6986*(r20*r20))))),-1);
if(!x6990.valid){
continue;
}
CheckValue<IkReal> x6991 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6989))+x6988)),IKFAST_ATAN2_MAGTHRESH);
if(!x6991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6990.value)))+(x6991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6992=IKsin(j4);
IkReal x6993=IKcos(j4);
IkReal x6994=(r11*sj5);
IkReal x6995=(r21*sj5);
IkReal x6996=(cj5*r00);
IkReal x6997=(cj5*r20);
IkReal x6998=(r01*sj5);
IkReal x6999=(cj5*r10);
IkReal x7000=((1.0)*x6993);
IkReal x7001=((1.0)*x6992);
evalcond[0]=((((-1.0)*r22*x7000))+((x6992*x6995))+(((-1.0)*x6997*x7001)));
evalcond[1]=((((-1.0)*r02*x7001))+(((-1.0)*x6998*x7000))+((x6993*x6996)));
evalcond[2]=((((-1.0)*r12*x7001))+((x6993*x6999))+(((-1.0)*x6994*x7000)));
evalcond[3]=((((-1.0)*r12*x7000))+cj0+((x6992*x6994))+(((-1.0)*x6999*x7001)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7001))+((x6993*x6997))+(((-1.0)*x6995*x7000)));
evalcond[5]=((((-1.0)*r02*x7000))+(((-1.0)*sj0))+((x6992*x6998))+(((-1.0)*x6996*x7001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7002=((1.0)*cj5);
CheckValue<IkReal> x7003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7002)))),-1);
if(!x7003.valid){
continue;
}
CheckValue<IkReal> x7004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7003.value)))+(x7004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7005=IKsin(j4);
IkReal x7006=IKcos(j4);
IkReal x7007=(r11*sj5);
IkReal x7008=(r21*sj5);
IkReal x7009=(cj5*r00);
IkReal x7010=(cj5*r20);
IkReal x7011=(r01*sj5);
IkReal x7012=(cj5*r10);
IkReal x7013=((1.0)*x7006);
IkReal x7014=((1.0)*x7005);
evalcond[0]=((((-1.0)*r22*x7013))+(((-1.0)*x7010*x7014))+((x7005*x7008)));
evalcond[1]=((((-1.0)*x7011*x7013))+((x7006*x7009))+(((-1.0)*r02*x7014)));
evalcond[2]=(((x7006*x7012))+(((-1.0)*r12*x7014))+(((-1.0)*x7007*x7013)));
evalcond[3]=(cj0+(((-1.0)*x7012*x7014))+((x7005*x7007))+(((-1.0)*r12*x7013)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7014))+((x7006*x7010))+(((-1.0)*x7008*x7013)));
evalcond[5]=((((-1.0)*x7009*x7014))+(((-1.0)*sj0))+((x7005*x7011))+(((-1.0)*r02*x7013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7015 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7015.valid){
continue;
}
CheckValue<IkReal> x7016=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7015.value)+(((1.5707963267949)*(x7016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7017=IKsin(j4);
IkReal x7018=IKcos(j4);
IkReal x7019=(r11*sj5);
IkReal x7020=(r21*sj5);
IkReal x7021=(cj5*r00);
IkReal x7022=(cj5*r20);
IkReal x7023=(r01*sj5);
IkReal x7024=(cj5*r10);
IkReal x7025=((1.0)*x7018);
IkReal x7026=((1.0)*x7017);
evalcond[0]=((((-1.0)*r22*x7025))+((x7017*x7020))+(((-1.0)*x7022*x7026)));
evalcond[1]=(((x7018*x7021))+(((-1.0)*r02*x7026))+(((-1.0)*x7023*x7025)));
evalcond[2]=((((-1.0)*r12*x7026))+((x7018*x7024))+(((-1.0)*x7019*x7025)));
evalcond[3]=((((-1.0)*r12*x7025))+(((-1.0)*x7024*x7026))+cj0+((x7017*x7019)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7026))+((x7018*x7022))+(((-1.0)*x7020*x7025)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7021*x7026))+(((-1.0)*r02*x7025))+((x7017*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7027=IKcos(j0);
IkReal x7028=IKsin(j0);
evalcond[0]=((((-0.163941)*x7028))+(((-0.5723)*x7027))+(((-1.0)*px)));
evalcond[1]=((((-0.5723)*x7028))+(((0.163941)*x7027))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7029=((1.0)*cj5);
IkReal x7030=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7029)));
j4eval[0]=x7030;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7029)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7031=cj5*cj5;
IkReal x7032=((1.0)*r21);
IkReal x7033=(cj5*sj5);
IkReal x7034=((1.0)*r20);
IkReal x7035=(((r01*r21))+((r00*r20*x7031))+(((-1.0)*r01*x7031*x7032))+((r02*r22))+(((-1.0)*r00*x7032*x7033))+(((-1.0)*r01*x7033*x7034)));
j4eval[0]=x7035;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7034))))));
j4eval[2]=IKsign(x7035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7036=cj5*cj5;
IkReal x7037=(r21*sj5);
IkReal x7038=(r11*r21);
IkReal x7039=((1.0)*cj5*r20);
IkReal x7040=(x7038+(((-1.0)*r11*sj5*x7039))+(((-1.0)*x7036*x7038))+((r12*r22))+((r10*r20*x7036))+(((-1.0)*cj5*r10*x7037)));
j4eval[0]=x7040;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7037))+(((-1.0)*sj0*x7039))))));
j4eval[2]=IKsign(x7040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7041=cj5*cj5;
IkReal x7042=(r21*sj5);
IkReal x7043=(r11*r21);
IkReal x7044=((1.0)*cj5*r20);
CheckValue<IkReal> x7045 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7042))+(((-1.0)*sj0*x7044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7045.valid){
continue;
}
CheckValue<IkReal> x7046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7044))+x7043+(((-1.0)*x7041*x7043))+((r12*r22))+((r10*r20*x7041))+(((-1.0)*cj5*r10*x7042)))),-1);
if(!x7046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7045.value)+(((1.5707963267949)*(x7046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7047=IKsin(j4);
IkReal x7048=IKcos(j4);
IkReal x7049=(r11*sj5);
IkReal x7050=(cj5*r00);
IkReal x7051=(cj5*r10);
IkReal x7052=(r21*sj5);
IkReal x7053=(cj5*r20);
IkReal x7054=(r01*sj5);
IkReal x7055=((1.0)*x7048);
IkReal x7056=((1.0)*x7047);
evalcond[0]=((((-1.0)*r22*x7055))+(((-1.0)*x7053*x7056))+((x7047*x7052)));
evalcond[1]=((((-1.0)*r22*x7056))+(((-1.0)*x7052*x7055))+((x7048*x7053)));
evalcond[2]=(((x7047*x7049))+cj0+(((-1.0)*r12*x7055))+(((-1.0)*x7051*x7056)));
evalcond[3]=((((-1.0)*x7054*x7055))+cj0+((x7048*x7050))+(((-1.0)*r02*x7056)));
evalcond[4]=(sj0+(((-1.0)*x7049*x7055))+(((-1.0)*r12*x7056))+((x7048*x7051)));
evalcond[5]=((((-1.0)*sj0))+((x7047*x7054))+(((-1.0)*x7050*x7056))+(((-1.0)*r02*x7055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7057=cj5*cj5;
IkReal x7058=((1.0)*r21);
IkReal x7059=(cj5*sj5);
IkReal x7060=((1.0)*r20);
CheckValue<IkReal> x7061=IKPowWithIntegerCheck(IKsign((((r00*r20*x7057))+(((-1.0)*r01*x7059*x7060))+(((-1.0)*r00*x7058*x7059))+((r01*r21))+(((-1.0)*r01*x7057*x7058))+((r02*r22)))),-1);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7061.value)))+(x7062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7063=IKsin(j4);
IkReal x7064=IKcos(j4);
IkReal x7065=(r11*sj5);
IkReal x7066=(cj5*r00);
IkReal x7067=(cj5*r10);
IkReal x7068=(r21*sj5);
IkReal x7069=(cj5*r20);
IkReal x7070=(r01*sj5);
IkReal x7071=((1.0)*x7064);
IkReal x7072=((1.0)*x7063);
evalcond[0]=((((-1.0)*x7069*x7072))+((x7063*x7068))+(((-1.0)*r22*x7071)));
evalcond[1]=((((-1.0)*x7068*x7071))+((x7064*x7069))+(((-1.0)*r22*x7072)));
evalcond[2]=(cj0+((x7063*x7065))+(((-1.0)*x7067*x7072))+(((-1.0)*r12*x7071)));
evalcond[3]=(cj0+((x7064*x7066))+(((-1.0)*x7070*x7071))+(((-1.0)*r02*x7072)));
evalcond[4]=(sj0+((x7064*x7067))+(((-1.0)*x7065*x7071))+(((-1.0)*r12*x7072)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7066*x7072))+((x7063*x7070))+(((-1.0)*r02*x7071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7073=((1.0)*cj5);
CheckValue<IkReal> x7074 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7074.valid){
continue;
}
CheckValue<IkReal> x7075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7073))+(((-1.0)*r00*sj5)))),-1);
if(!x7075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7074.value)+(((1.5707963267949)*(x7075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7076=IKsin(j4);
IkReal x7077=IKcos(j4);
IkReal x7078=(r11*sj5);
IkReal x7079=(cj5*r00);
IkReal x7080=(cj5*r10);
IkReal x7081=(r21*sj5);
IkReal x7082=(cj5*r20);
IkReal x7083=(r01*sj5);
IkReal x7084=((1.0)*x7077);
IkReal x7085=((1.0)*x7076);
evalcond[0]=(((x7076*x7081))+(((-1.0)*x7082*x7085))+(((-1.0)*r22*x7084)));
evalcond[1]=(((x7077*x7082))+(((-1.0)*r22*x7085))+(((-1.0)*x7081*x7084)));
evalcond[2]=(cj0+(((-1.0)*r12*x7084))+((x7076*x7078))+(((-1.0)*x7080*x7085)));
evalcond[3]=(cj0+(((-1.0)*x7083*x7084))+(((-1.0)*r02*x7085))+((x7077*x7079)));
evalcond[4]=(sj0+((x7077*x7080))+(((-1.0)*r12*x7085))+(((-1.0)*x7078*x7084)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7079*x7085))+((x7076*x7083))+(((-1.0)*r02*x7084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7086=IKsin(j0);
IkReal x7087=IKcos(j0);
IkReal x7088=(cj5*r01);
IkReal x7089=(cj5*r11);
IkReal x7090=((0.1157)*sj5);
IkReal x7091=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7088))+x7087+(((-1.0)*r00*x7091)));
evalcond[1]=((((-1.0)*x7089))+x7086+(((-1.0)*r10*x7091)));
evalcond[2]=((((-1.0)*r00*x7090))+(((-0.163941)*x7086))+(((-1.0)*px))+(((-0.1157)*x7088)));
evalcond[3]=((((0.163941)*x7087))+(((-1.0)*r10*x7090))+(((-1.0)*py))+(((-0.1157)*x7089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7092=((1.0)*sj5);
IkReal x7093=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7092)));
j4eval[0]=x7093;
j4eval[1]=IKsign(x7093);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7092))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7094=((1.0)*cj5);
IkReal x7095=((((-1.0)*r01*x7094))+(((-1.0)*r00*sj5)));
j4eval[0]=x7095;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7094))))));
j4eval[2]=IKsign(x7095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7096=r21*r21;
IkReal x7097=cj5*cj5;
IkReal x7098=(r21*sj5);
IkReal x7099=(cj5*r20);
IkReal x7100=((((-1.0)*x7096))+((x7096*x7097))+(((-1.0)*(r22*r22)))+(((-1.0)*x7097*(r20*r20)))+(((2.0)*x7098*x7099)));
j4eval[0]=x7100;
j4eval[1]=((IKabs(((((-1.0)*x7099))+x7098)))+(IKabs(r22)));
j4eval[2]=IKsign(x7100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7101=r21*r21;
IkReal x7102=cj5*cj5;
IkReal x7103=(r21*sj5);
IkReal x7104=(cj5*r20);
CheckValue<IkReal> x7105 = IKatan2WithCheck(IkReal(r22),IkReal((x7103+(((-1.0)*x7104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7105.valid){
continue;
}
CheckValue<IkReal> x7106=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7101))+(((-1.0)*x7102*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x7103*x7104))+((x7101*x7102)))),-1);
if(!x7106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7105.value)+(((1.5707963267949)*(x7106.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7107=IKsin(j4);
IkReal x7108=IKcos(j4);
IkReal x7109=(r11*sj5);
IkReal x7110=(r21*sj5);
IkReal x7111=(cj5*r00);
IkReal x7112=(cj5*r20);
IkReal x7113=(r01*sj5);
IkReal x7114=(cj5*r10);
IkReal x7115=((1.0)*x7108);
IkReal x7116=((1.0)*x7107);
evalcond[0]=((((-1.0)*x7112*x7116))+(((-1.0)*r22*x7115))+((x7107*x7110)));
evalcond[1]=((((-1.0)*r02*x7116))+((x7108*x7111))+(((-1.0)*x7113*x7115)));
evalcond[2]=((((-1.0)*r12*x7116))+(((-1.0)*x7109*x7115))+((x7108*x7114)));
evalcond[3]=(cj0+(((-1.0)*r12*x7115))+((x7107*x7109))+(((-1.0)*x7114*x7116)));
evalcond[4]=((-1.0)+(((-1.0)*x7110*x7115))+(((-1.0)*r22*x7116))+((x7108*x7112)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7111*x7116))+(((-1.0)*r02*x7115))+((x7107*x7113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7117=((1.0)*cj5);
CheckValue<IkReal> x7118 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7118.valid){
continue;
}
CheckValue<IkReal> x7119=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7117)))),-1);
if(!x7119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7118.value)+(((1.5707963267949)*(x7119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7120=IKsin(j4);
IkReal x7121=IKcos(j4);
IkReal x7122=(r11*sj5);
IkReal x7123=(r21*sj5);
IkReal x7124=(cj5*r00);
IkReal x7125=(cj5*r20);
IkReal x7126=(r01*sj5);
IkReal x7127=(cj5*r10);
IkReal x7128=((1.0)*x7121);
IkReal x7129=((1.0)*x7120);
evalcond[0]=(((x7120*x7123))+(((-1.0)*r22*x7128))+(((-1.0)*x7125*x7129)));
evalcond[1]=(((x7121*x7124))+(((-1.0)*x7126*x7128))+(((-1.0)*r02*x7129)));
evalcond[2]=(((x7121*x7127))+(((-1.0)*x7122*x7128))+(((-1.0)*r12*x7129)));
evalcond[3]=(cj0+((x7120*x7122))+(((-1.0)*x7127*x7129))+(((-1.0)*r12*x7128)));
evalcond[4]=((-1.0)+(((-1.0)*x7123*x7128))+((x7121*x7125))+(((-1.0)*r22*x7129)));
evalcond[5]=((((-1.0)*sj0))+((x7120*x7126))+(((-1.0)*r02*x7128))+(((-1.0)*x7124*x7129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7130=((1.0)*sj5);
CheckValue<IkReal> x7131=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7130)))),-1);
if(!x7131.valid){
continue;
}
CheckValue<IkReal> x7132 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7130))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7131.value)))+(x7132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7133=IKsin(j4);
IkReal x7134=IKcos(j4);
IkReal x7135=(r11*sj5);
IkReal x7136=(r21*sj5);
IkReal x7137=(cj5*r00);
IkReal x7138=(cj5*r20);
IkReal x7139=(r01*sj5);
IkReal x7140=(cj5*r10);
IkReal x7141=((1.0)*x7134);
IkReal x7142=((1.0)*x7133);
evalcond[0]=((((-1.0)*r22*x7141))+((x7133*x7136))+(((-1.0)*x7138*x7142)));
evalcond[1]=(((x7134*x7137))+(((-1.0)*x7139*x7141))+(((-1.0)*r02*x7142)));
evalcond[2]=(((x7134*x7140))+(((-1.0)*x7135*x7141))+(((-1.0)*r12*x7142)));
evalcond[3]=(cj0+((x7133*x7135))+(((-1.0)*x7140*x7142))+(((-1.0)*r12*x7141)));
evalcond[4]=((-1.0)+((x7134*x7138))+(((-1.0)*r22*x7142))+(((-1.0)*x7136*x7141)));
evalcond[5]=((((-1.0)*sj0))+((x7133*x7139))+(((-1.0)*x7137*x7142))+(((-1.0)*r02*x7141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7143=IKsin(j0);
IkReal x7144=IKcos(j0);
evalcond[0]=((((-0.163941)*x7143))+(((-1.0)*px))+(((0.5723)*x7144)));
evalcond[1]=((((0.163941)*x7144))+(((-1.0)*py))+(((0.5723)*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7145=((1.0)*cj5);
IkReal x7146=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7145)));
j4eval[0]=x7146;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7145))))));
j4eval[2]=IKsign(x7146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7147=((1.0)*cj5);
IkReal x7148=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7147)));
j4eval[0]=x7148;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7147))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7149=cj5*cj5;
IkReal x7150=((1.0)*sj5);
IkReal x7151=(cj5*r20);
IkReal x7152=(r11*r21);
IkReal x7153=(x7152+((r10*r20*x7149))+((r12*r22))+(((-1.0)*r11*x7150*x7151))+(((-1.0)*x7149*x7152))+(((-1.0)*cj5*r10*r21*x7150)));
j4eval[0]=x7153;
j4eval[1]=IKsign(x7153);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7150))+((cj0*x7151)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7154=cj5*cj5;
IkReal x7155=((1.0)*sj5);
IkReal x7156=(cj5*r20);
IkReal x7157=(r11*r21);
CheckValue<IkReal> x7158 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7155))+((cj0*x7156)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7158.valid){
continue;
}
CheckValue<IkReal> x7159=IKPowWithIntegerCheck(IKsign((x7157+((r10*r20*x7154))+(((-1.0)*r11*x7155*x7156))+((r12*r22))+(((-1.0)*x7154*x7157))+(((-1.0)*cj5*r10*r21*x7155)))),-1);
if(!x7159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7158.value)+(((1.5707963267949)*(x7159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7160=IKsin(j4);
IkReal x7161=IKcos(j4);
IkReal x7162=((1.0)*sj0);
IkReal x7163=(cj5*r00);
IkReal x7164=(r11*sj5);
IkReal x7165=(cj5*r10);
IkReal x7166=(r21*sj5);
IkReal x7167=(cj5*r20);
IkReal x7168=(r01*sj5);
IkReal x7169=((1.0)*x7161);
IkReal x7170=((1.0)*x7160);
evalcond[0]=((((-1.0)*r22*x7169))+(((-1.0)*x7167*x7170))+((x7160*x7166)));
evalcond[1]=((((-1.0)*x7166*x7169))+((x7161*x7167))+(((-1.0)*r22*x7170)));
evalcond[2]=(cj0+((x7160*x7164))+(((-1.0)*x7165*x7170))+(((-1.0)*r12*x7169)));
evalcond[3]=((((-1.0)*r02*x7169))+(((-1.0)*x7162))+((x7160*x7168))+(((-1.0)*x7163*x7170)));
evalcond[4]=((((-1.0)*r02*x7170))+((x7161*x7163))+(((-1.0)*x7168*x7169))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7164*x7169))+(((-1.0)*x7162))+(((-1.0)*r12*x7170))+((x7161*x7165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7171=((1.0)*cj5);
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7171)))),-1);
if(!x7172.valid){
continue;
}
CheckValue<IkReal> x7173 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7171))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7172.value)))+(x7173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7174=IKsin(j4);
IkReal x7175=IKcos(j4);
IkReal x7176=((1.0)*sj0);
IkReal x7177=(cj5*r00);
IkReal x7178=(r11*sj5);
IkReal x7179=(cj5*r10);
IkReal x7180=(r21*sj5);
IkReal x7181=(cj5*r20);
IkReal x7182=(r01*sj5);
IkReal x7183=((1.0)*x7175);
IkReal x7184=((1.0)*x7174);
evalcond[0]=((((-1.0)*x7181*x7184))+((x7174*x7180))+(((-1.0)*r22*x7183)));
evalcond[1]=(((x7175*x7181))+(((-1.0)*x7180*x7183))+(((-1.0)*r22*x7184)));
evalcond[2]=(cj0+(((-1.0)*x7179*x7184))+(((-1.0)*r12*x7183))+((x7174*x7178)));
evalcond[3]=((((-1.0)*x7176))+(((-1.0)*x7177*x7184))+((x7174*x7182))+(((-1.0)*r02*x7183)));
evalcond[4]=((((-1.0)*x7182*x7183))+(((-1.0)*r02*x7184))+(((-1.0)*cj0))+((x7175*x7177)));
evalcond[5]=((((-1.0)*x7176))+(((-1.0)*x7178*x7183))+(((-1.0)*r12*x7184))+((x7175*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7185=((1.0)*cj5);
CheckValue<IkReal> x7186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7185)))),-1);
if(!x7186.valid){
continue;
}
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7186.value)))+(x7187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7188=IKsin(j4);
IkReal x7189=IKcos(j4);
IkReal x7190=((1.0)*sj0);
IkReal x7191=(cj5*r00);
IkReal x7192=(r11*sj5);
IkReal x7193=(cj5*r10);
IkReal x7194=(r21*sj5);
IkReal x7195=(cj5*r20);
IkReal x7196=(r01*sj5);
IkReal x7197=((1.0)*x7189);
IkReal x7198=((1.0)*x7188);
evalcond[0]=((((-1.0)*x7195*x7198))+(((-1.0)*r22*x7197))+((x7188*x7194)));
evalcond[1]=(((x7189*x7195))+(((-1.0)*x7194*x7197))+(((-1.0)*r22*x7198)));
evalcond[2]=(cj0+(((-1.0)*x7193*x7198))+(((-1.0)*r12*x7197))+((x7188*x7192)));
evalcond[3]=((((-1.0)*x7190))+(((-1.0)*x7191*x7198))+((x7188*x7196))+(((-1.0)*r02*x7197)));
evalcond[4]=((((-1.0)*x7196*x7197))+((x7189*x7191))+(((-1.0)*r02*x7198))+(((-1.0)*cj0)));
evalcond[5]=(((x7189*x7193))+(((-1.0)*x7190))+(((-1.0)*r12*x7198))+(((-1.0)*x7192*x7197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((-0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7199=IKcos(j0);
IkReal x7200=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x7200))+(((-1.1843)*x7199)));
evalcond[1]=((((-1.0)*py))+(((-1.1843)*x7200))+(((0.163941)*x7199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7201=((1.0)*cj5);
IkReal x7202=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7201)));
j4eval[0]=x7202;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7201))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7203=cj5*cj5;
IkReal x7204=((1.0)*r21);
IkReal x7205=(cj5*sj5);
IkReal x7206=((1.0)*r20);
IkReal x7207=(((r00*r20*x7203))+(((-1.0)*r00*x7204*x7205))+((r01*r21))+(((-1.0)*r01*x7205*x7206))+((r02*r22))+(((-1.0)*r01*x7203*x7204)));
j4eval[0]=x7207;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7206)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7208=cj5*cj5;
IkReal x7209=(r21*sj5);
IkReal x7210=(r11*r21);
IkReal x7211=((1.0)*cj5*r20);
IkReal x7212=((((-1.0)*cj5*r10*x7209))+x7210+(((-1.0)*r11*sj5*x7211))+((r10*r20*x7208))+((r12*r22))+(((-1.0)*x7208*x7210)));
j4eval[0]=x7212;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7211))+((sj0*x7209))))));
j4eval[2]=IKsign(x7212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7213=cj5*cj5;
IkReal x7214=(r21*sj5);
IkReal x7215=(r11*r21);
IkReal x7216=((1.0)*cj5*r20);
CheckValue<IkReal> x7217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7216))+((sj0*x7214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7217.valid){
continue;
}
CheckValue<IkReal> x7218=IKPowWithIntegerCheck(IKsign((x7215+(((-1.0)*r11*sj5*x7216))+((r10*r20*x7213))+(((-1.0)*x7213*x7215))+((r12*r22))+(((-1.0)*cj5*r10*x7214)))),-1);
if(!x7218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7217.value)+(((1.5707963267949)*(x7218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7219=IKsin(j4);
IkReal x7220=IKcos(j4);
IkReal x7221=(r11*sj5);
IkReal x7222=(cj5*r00);
IkReal x7223=(cj5*r10);
IkReal x7224=(r21*sj5);
IkReal x7225=(cj5*r20);
IkReal x7226=(r01*sj5);
IkReal x7227=((1.0)*x7220);
IkReal x7228=((1.0)*x7219);
evalcond[0]=(((x7219*x7224))+(((-1.0)*x7225*x7228))+(((-1.0)*r22*x7227)));
evalcond[1]=((((-1.0)*x7224*x7227))+((x7220*x7225))+(((-1.0)*r22*x7228)));
evalcond[2]=(((x7219*x7221))+cj0+(((-1.0)*r12*x7227))+(((-1.0)*x7223*x7228)));
evalcond[3]=((((-1.0)*r02*x7228))+cj0+((x7220*x7222))+(((-1.0)*x7226*x7227)));
evalcond[4]=(sj0+(((-1.0)*x7221*x7227))+(((-1.0)*r12*x7228))+((x7220*x7223)));
evalcond[5]=(((x7219*x7226))+(((-1.0)*r02*x7227))+(((-1.0)*sj0))+(((-1.0)*x7222*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7229=cj5*cj5;
IkReal x7230=((1.0)*r21);
IkReal x7231=(cj5*sj5);
IkReal x7232=((1.0)*r20);
CheckValue<IkReal> x7233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7231*x7232))+((r01*r21))+(((-1.0)*r01*x7229*x7230))+((r02*r22))+(((-1.0)*r00*x7230*x7231))+((r00*r20*x7229)))),-1);
if(!x7233.valid){
continue;
}
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7233.value)))+(x7234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7235=IKsin(j4);
IkReal x7236=IKcos(j4);
IkReal x7237=(r11*sj5);
IkReal x7238=(cj5*r00);
IkReal x7239=(cj5*r10);
IkReal x7240=(r21*sj5);
IkReal x7241=(cj5*r20);
IkReal x7242=(r01*sj5);
IkReal x7243=((1.0)*x7236);
IkReal x7244=((1.0)*x7235);
evalcond[0]=(((x7235*x7240))+(((-1.0)*r22*x7243))+(((-1.0)*x7241*x7244)));
evalcond[1]=((((-1.0)*r22*x7244))+((x7236*x7241))+(((-1.0)*x7240*x7243)));
evalcond[2]=((((-1.0)*r12*x7243))+cj0+((x7235*x7237))+(((-1.0)*x7239*x7244)));
evalcond[3]=(cj0+((x7236*x7238))+(((-1.0)*x7242*x7243))+(((-1.0)*r02*x7244)));
evalcond[4]=(sj0+(((-1.0)*r12*x7244))+((x7236*x7239))+(((-1.0)*x7237*x7243)));
evalcond[5]=((((-1.0)*sj0))+((x7235*x7242))+(((-1.0)*r02*x7243))+(((-1.0)*x7238*x7244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7245=((1.0)*cj5);
CheckValue<IkReal> x7246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7245)))),-1);
if(!x7246.valid){
continue;
}
CheckValue<IkReal> x7247 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7246.value)))+(x7247.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7248=IKsin(j4);
IkReal x7249=IKcos(j4);
IkReal x7250=(r11*sj5);
IkReal x7251=(cj5*r00);
IkReal x7252=(cj5*r10);
IkReal x7253=(r21*sj5);
IkReal x7254=(cj5*r20);
IkReal x7255=(r01*sj5);
IkReal x7256=((1.0)*x7249);
IkReal x7257=((1.0)*x7248);
evalcond[0]=((((-1.0)*r22*x7256))+((x7248*x7253))+(((-1.0)*x7254*x7257)));
evalcond[1]=(((x7249*x7254))+(((-1.0)*r22*x7257))+(((-1.0)*x7253*x7256)));
evalcond[2]=((((-1.0)*x7252*x7257))+cj0+(((-1.0)*r12*x7256))+((x7248*x7250)));
evalcond[3]=(cj0+(((-1.0)*r02*x7257))+((x7249*x7251))+(((-1.0)*x7255*x7256)));
evalcond[4]=(sj0+(((-1.0)*r12*x7257))+((x7249*x7252))+(((-1.0)*x7250*x7256)));
evalcond[5]=((((-1.0)*x7251*x7257))+(((-1.0)*sj0))+(((-1.0)*r02*x7256))+((x7248*x7255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7258=IKcos(j0);
IkReal x7259=IKsin(j0);
evalcond[0]=((((-0.0397)*x7258))+(((-0.163941)*x7259))+(((-1.0)*px)));
evalcond[1]=((((-0.0397)*x7259))+(((0.163941)*x7258))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7260=((1.0)*cj5);
IkReal x7261=((((-1.0)*r01*x7260))+(((-1.0)*r00*sj5)));
j4eval[0]=x7261;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7260)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7262=((1.0)*cj5);
IkReal x7263=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7262)));
j4eval[0]=x7263;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7262)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7264=cj5*cj5;
IkReal x7265=((1.0)*sj5);
IkReal x7266=(cj5*r20);
IkReal x7267=(r11*r21);
IkReal x7268=((((-1.0)*cj5*r10*r21*x7265))+x7267+((r12*r22))+((r10*r20*x7264))+(((-1.0)*x7264*x7267))+(((-1.0)*r11*x7265*x7266)));
j4eval[0]=x7268;
j4eval[1]=IKsign(x7268);
j4eval[2]=((IKabs((((cj0*x7266))+(((-1.0)*cj0*r21*x7265)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7269=cj5*cj5;
IkReal x7270=((1.0)*sj5);
IkReal x7271=(cj5*r20);
IkReal x7272=(r11*r21);
CheckValue<IkReal> x7273=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7269*x7272))+x7272+((r12*r22))+((r10*r20*x7269))+(((-1.0)*r11*x7270*x7271))+(((-1.0)*cj5*r10*r21*x7270)))),-1);
if(!x7273.valid){
continue;
}
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7270))+((cj0*x7271)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7273.value)))+(x7274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7275=IKsin(j4);
IkReal x7276=IKcos(j4);
IkReal x7277=((1.0)*sj0);
IkReal x7278=(cj5*r00);
IkReal x7279=(r11*sj5);
IkReal x7280=(cj5*r10);
IkReal x7281=(r21*sj5);
IkReal x7282=(cj5*r20);
IkReal x7283=(r01*sj5);
IkReal x7284=((1.0)*x7276);
IkReal x7285=((1.0)*x7275);
evalcond[0]=((((-1.0)*x7282*x7285))+((x7275*x7281))+(((-1.0)*r22*x7284)));
evalcond[1]=(((x7276*x7282))+(((-1.0)*x7281*x7284))+(((-1.0)*r22*x7285)));
evalcond[2]=(cj0+((x7275*x7279))+(((-1.0)*r12*x7284))+(((-1.0)*x7280*x7285)));
evalcond[3]=((((-1.0)*x7278*x7285))+((x7275*x7283))+(((-1.0)*r02*x7284))+(((-1.0)*x7277)));
evalcond[4]=(((x7276*x7278))+(((-1.0)*x7283*x7284))+(((-1.0)*r02*x7285))+(((-1.0)*cj0)));
evalcond[5]=(((x7276*x7280))+(((-1.0)*r12*x7285))+(((-1.0)*x7277))+(((-1.0)*x7279*x7284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7286=((1.0)*cj5);
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
CheckValue<IkReal> x7288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7286)))),-1);
if(!x7288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7287.value)+(((1.5707963267949)*(x7288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7289=IKsin(j4);
IkReal x7290=IKcos(j4);
IkReal x7291=((1.0)*sj0);
IkReal x7292=(cj5*r00);
IkReal x7293=(r11*sj5);
IkReal x7294=(cj5*r10);
IkReal x7295=(r21*sj5);
IkReal x7296=(cj5*r20);
IkReal x7297=(r01*sj5);
IkReal x7298=((1.0)*x7290);
IkReal x7299=((1.0)*x7289);
evalcond[0]=((((-1.0)*r22*x7298))+(((-1.0)*x7296*x7299))+((x7289*x7295)));
evalcond[1]=((((-1.0)*r22*x7299))+(((-1.0)*x7295*x7298))+((x7290*x7296)));
evalcond[2]=(cj0+(((-1.0)*x7294*x7299))+(((-1.0)*r12*x7298))+((x7289*x7293)));
evalcond[3]=((((-1.0)*x7291))+(((-1.0)*r02*x7298))+(((-1.0)*x7292*x7299))+((x7289*x7297)));
evalcond[4]=(((x7290*x7292))+(((-1.0)*r02*x7299))+(((-1.0)*x7297*x7298))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7291))+((x7290*x7294))+(((-1.0)*x7293*x7298))+(((-1.0)*r12*x7299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7300=((1.0)*cj5);
CheckValue<IkReal> x7301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7300)))),-1);
if(!x7301.valid){
continue;
}
CheckValue<IkReal> x7302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7301.value)))+(x7302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7303=IKsin(j4);
IkReal x7304=IKcos(j4);
IkReal x7305=((1.0)*sj0);
IkReal x7306=(cj5*r00);
IkReal x7307=(r11*sj5);
IkReal x7308=(cj5*r10);
IkReal x7309=(r21*sj5);
IkReal x7310=(cj5*r20);
IkReal x7311=(r01*sj5);
IkReal x7312=((1.0)*x7304);
IkReal x7313=((1.0)*x7303);
evalcond[0]=(((x7303*x7309))+(((-1.0)*r22*x7312))+(((-1.0)*x7310*x7313)));
evalcond[1]=((((-1.0)*x7309*x7312))+((x7304*x7310))+(((-1.0)*r22*x7313)));
evalcond[2]=(cj0+((x7303*x7307))+(((-1.0)*r12*x7312))+(((-1.0)*x7308*x7313)));
evalcond[3]=(((x7303*x7311))+(((-1.0)*x7305))+(((-1.0)*x7306*x7313))+(((-1.0)*r02*x7312)));
evalcond[4]=((((-1.0)*x7311*x7312))+((x7304*x7306))+(((-1.0)*cj0))+(((-1.0)*r02*x7313)));
evalcond[5]=(((x7304*x7308))+(((-1.0)*r12*x7313))+(((-1.0)*x7305))+(((-1.0)*x7307*x7312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7314=IKsin(j0);
IkReal x7315=IKcos(j0);
IkReal x7316=(cj5*r01);
IkReal x7317=(cj5*r11);
IkReal x7318=((0.1157)*sj5);
IkReal x7319=((1.0)*sj5);
evalcond[0]=(x7315+(((-1.0)*x7316))+(((-1.0)*r00*x7319)));
evalcond[1]=(x7314+(((-1.0)*x7317))+(((-1.0)*r10*x7319)));
evalcond[2]=((((-1.0)*px))+(((-0.1157)*x7316))+(((-1.0)*r00*x7318))+(((-0.163941)*x7314)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x7318))+(((-0.1157)*x7317))+(((0.163941)*x7315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7320=((1.0)*sj5);
IkReal x7321=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7320)));
j4eval[0]=x7321;
j4eval[1]=IKsign(x7321);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7320))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7322=((1.0)*cj5);
IkReal x7323=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7322)));
j4eval[0]=x7323;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7322))))));
j4eval[2]=IKsign(x7323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7324=r21*r21;
IkReal x7325=cj5*cj5;
IkReal x7326=(r21*sj5);
IkReal x7327=(cj5*r20);
IkReal x7328=((((-1.0)*x7324))+(((-1.0)*(r22*r22)))+(((-1.0)*x7325*(r20*r20)))+(((2.0)*x7326*x7327))+((x7324*x7325)));
j4eval[0]=x7328;
j4eval[1]=((IKabs(r22))+(IKabs((x7326+(((-1.0)*x7327))))));
j4eval[2]=IKsign(x7328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7329=r21*r21;
IkReal x7330=cj5*cj5;
IkReal x7331=(r21*sj5);
IkReal x7332=(cj5*r20);
CheckValue<IkReal> x7333 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7332))+x7331)),IKFAST_ATAN2_MAGTHRESH);
if(!x7333.valid){
continue;
}
CheckValue<IkReal> x7334=IKPowWithIntegerCheck(IKsign(((((2.0)*x7331*x7332))+((x7329*x7330))+(((-1.0)*x7329))+(((-1.0)*x7330*(r20*r20)))+(((-1.0)*(r22*r22))))),-1);
if(!x7334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7333.value)+(((1.5707963267949)*(x7334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7335=IKsin(j4);
IkReal x7336=IKcos(j4);
IkReal x7337=(r11*sj5);
IkReal x7338=(r21*sj5);
IkReal x7339=(cj5*r00);
IkReal x7340=(cj5*r20);
IkReal x7341=(r01*sj5);
IkReal x7342=(cj5*r10);
IkReal x7343=((1.0)*x7336);
IkReal x7344=((1.0)*x7335);
evalcond[0]=((((-1.0)*r22*x7343))+((x7335*x7338))+(((-1.0)*x7340*x7344)));
evalcond[1]=(((x7336*x7339))+(((-1.0)*x7341*x7343))+(((-1.0)*r02*x7344)));
evalcond[2]=((((-1.0)*x7337*x7343))+(((-1.0)*r12*x7344))+((x7336*x7342)));
evalcond[3]=(cj0+(((-1.0)*r12*x7343))+((x7335*x7337))+(((-1.0)*x7342*x7344)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7344))+((x7336*x7340))+(((-1.0)*x7338*x7343)));
evalcond[5]=((((-1.0)*sj0))+((x7335*x7341))+(((-1.0)*r02*x7343))+(((-1.0)*x7339*x7344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7345=((1.0)*cj5);
CheckValue<IkReal> x7346 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7345)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7346.valid){
continue;
}
CheckValue<IkReal> x7347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7345))+(((-1.0)*r00*sj5)))),-1);
if(!x7347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7346.value)+(((1.5707963267949)*(x7347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7348=IKsin(j4);
IkReal x7349=IKcos(j4);
IkReal x7350=(r11*sj5);
IkReal x7351=(r21*sj5);
IkReal x7352=(cj5*r00);
IkReal x7353=(cj5*r20);
IkReal x7354=(r01*sj5);
IkReal x7355=(cj5*r10);
IkReal x7356=((1.0)*x7349);
IkReal x7357=((1.0)*x7348);
evalcond[0]=(((x7348*x7351))+(((-1.0)*r22*x7356))+(((-1.0)*x7353*x7357)));
evalcond[1]=((((-1.0)*r02*x7357))+(((-1.0)*x7354*x7356))+((x7349*x7352)));
evalcond[2]=((((-1.0)*r12*x7357))+(((-1.0)*x7350*x7356))+((x7349*x7355)));
evalcond[3]=(((x7348*x7350))+cj0+(((-1.0)*r12*x7356))+(((-1.0)*x7355*x7357)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7357))+(((-1.0)*x7351*x7356))+((x7349*x7353)));
evalcond[5]=(((x7348*x7354))+(((-1.0)*sj0))+(((-1.0)*r02*x7356))+(((-1.0)*x7352*x7357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7358=((1.0)*sj5);
CheckValue<IkReal> x7359 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7358))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7359.valid){
continue;
}
CheckValue<IkReal> x7360=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7358)))),-1);
if(!x7360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7359.value)+(((1.5707963267949)*(x7360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7361=IKsin(j4);
IkReal x7362=IKcos(j4);
IkReal x7363=(r11*sj5);
IkReal x7364=(r21*sj5);
IkReal x7365=(cj5*r00);
IkReal x7366=(cj5*r20);
IkReal x7367=(r01*sj5);
IkReal x7368=(cj5*r10);
IkReal x7369=((1.0)*x7362);
IkReal x7370=((1.0)*x7361);
evalcond[0]=((((-1.0)*r22*x7369))+((x7361*x7364))+(((-1.0)*x7366*x7370)));
evalcond[1]=((((-1.0)*x7367*x7369))+(((-1.0)*r02*x7370))+((x7362*x7365)));
evalcond[2]=((((-1.0)*r12*x7370))+(((-1.0)*x7363*x7369))+((x7362*x7368)));
evalcond[3]=(cj0+(((-1.0)*r12*x7369))+(((-1.0)*x7368*x7370))+((x7361*x7363)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7370))+(((-1.0)*x7364*x7369))+((x7362*x7366)));
evalcond[5]=((((-1.0)*sj0))+((x7361*x7367))+(((-1.0)*r02*x7369))+(((-1.0)*x7365*x7370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7371=IKsin(j0);
IkReal x7372=IKcos(j0);
evalcond[0]=((((-0.163941)*x7371))+(((-1.0)*px))+(((0.5723)*x7372)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x7372))+(((0.5723)*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7373=((1.0)*cj5);
IkReal x7374=((((-1.0)*r01*x7373))+(((-1.0)*r00*sj5)));
j4eval[0]=x7374;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7373)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7374);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7375=((1.0)*cj5);
IkReal x7376=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7375)));
j4eval[0]=x7376;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7375))))));
j4eval[2]=IKsign(x7376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7377=cj5*cj5;
IkReal x7378=((1.0)*sj5);
IkReal x7379=(cj5*r20);
IkReal x7380=(r11*r21);
IkReal x7381=(x7380+((r10*r20*x7377))+(((-1.0)*cj5*r10*r21*x7378))+((r12*r22))+(((-1.0)*r11*x7378*x7379))+(((-1.0)*x7377*x7380)));
j4eval[0]=x7381;
j4eval[1]=IKsign(x7381);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7378))+((cj0*x7379)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7382=cj5*cj5;
IkReal x7383=((1.0)*sj5);
IkReal x7384=(cj5*r20);
IkReal x7385=(r11*r21);
CheckValue<IkReal> x7386 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7383))+((cj0*x7384)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7386.valid){
continue;
}
CheckValue<IkReal> x7387=IKPowWithIntegerCheck(IKsign((x7385+((r10*r20*x7382))+(((-1.0)*r11*x7383*x7384))+((r12*r22))+(((-1.0)*x7382*x7385))+(((-1.0)*cj5*r10*r21*x7383)))),-1);
if(!x7387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7386.value)+(((1.5707963267949)*(x7387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7388=IKsin(j4);
IkReal x7389=IKcos(j4);
IkReal x7390=((1.0)*sj0);
IkReal x7391=(cj5*r00);
IkReal x7392=(r11*sj5);
IkReal x7393=(cj5*r10);
IkReal x7394=(r21*sj5);
IkReal x7395=(cj5*r20);
IkReal x7396=(r01*sj5);
IkReal x7397=((1.0)*x7389);
IkReal x7398=((1.0)*x7388);
evalcond[0]=((((-1.0)*r22*x7397))+((x7388*x7394))+(((-1.0)*x7395*x7398)));
evalcond[1]=(((x7389*x7395))+(((-1.0)*r22*x7398))+(((-1.0)*x7394*x7397)));
evalcond[2]=((((-1.0)*r12*x7397))+cj0+(((-1.0)*x7393*x7398))+((x7388*x7392)));
evalcond[3]=(((x7388*x7396))+(((-1.0)*r02*x7397))+(((-1.0)*x7390))+(((-1.0)*x7391*x7398)));
evalcond[4]=(((x7389*x7391))+(((-1.0)*r02*x7398))+(((-1.0)*x7396*x7397))+(((-1.0)*cj0)));
evalcond[5]=(((x7389*x7393))+(((-1.0)*r12*x7398))+(((-1.0)*x7392*x7397))+(((-1.0)*x7390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7399=((1.0)*cj5);
CheckValue<IkReal> x7400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7399))+(((-1.0)*r10*sj5)))),-1);
if(!x7400.valid){
continue;
}
CheckValue<IkReal> x7401 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7399))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7400.value)))+(x7401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7402=IKsin(j4);
IkReal x7403=IKcos(j4);
IkReal x7404=((1.0)*sj0);
IkReal x7405=(cj5*r00);
IkReal x7406=(r11*sj5);
IkReal x7407=(cj5*r10);
IkReal x7408=(r21*sj5);
IkReal x7409=(cj5*r20);
IkReal x7410=(r01*sj5);
IkReal x7411=((1.0)*x7403);
IkReal x7412=((1.0)*x7402);
evalcond[0]=(((x7402*x7408))+(((-1.0)*x7409*x7412))+(((-1.0)*r22*x7411)));
evalcond[1]=(((x7403*x7409))+(((-1.0)*x7408*x7411))+(((-1.0)*r22*x7412)));
evalcond[2]=((((-1.0)*r12*x7411))+cj0+((x7402*x7406))+(((-1.0)*x7407*x7412)));
evalcond[3]=(((x7402*x7410))+(((-1.0)*x7404))+(((-1.0)*x7405*x7412))+(((-1.0)*r02*x7411)));
evalcond[4]=(((x7403*x7405))+(((-1.0)*cj0))+(((-1.0)*x7410*x7411))+(((-1.0)*r02*x7412)));
evalcond[5]=((((-1.0)*r12*x7412))+(((-1.0)*x7404))+((x7403*x7407))+(((-1.0)*x7406*x7411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7413=((1.0)*cj5);
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
CheckValue<IkReal> x7415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7413))+(((-1.0)*r00*sj5)))),-1);
if(!x7415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7414.value)+(((1.5707963267949)*(x7415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7416=IKsin(j4);
IkReal x7417=IKcos(j4);
IkReal x7418=((1.0)*sj0);
IkReal x7419=(cj5*r00);
IkReal x7420=(r11*sj5);
IkReal x7421=(cj5*r10);
IkReal x7422=(r21*sj5);
IkReal x7423=(cj5*r20);
IkReal x7424=(r01*sj5);
IkReal x7425=((1.0)*x7417);
IkReal x7426=((1.0)*x7416);
evalcond[0]=((((-1.0)*r22*x7425))+(((-1.0)*x7423*x7426))+((x7416*x7422)));
evalcond[1]=((((-1.0)*x7422*x7425))+(((-1.0)*r22*x7426))+((x7417*x7423)));
evalcond[2]=((((-1.0)*x7421*x7426))+cj0+(((-1.0)*r12*x7425))+((x7416*x7420)));
evalcond[3]=((((-1.0)*r02*x7425))+(((-1.0)*x7418))+(((-1.0)*x7419*x7426))+((x7416*x7424)));
evalcond[4]=((((-1.0)*r02*x7426))+(((-1.0)*x7424*x7425))+((x7417*x7419))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7426))+(((-1.0)*x7418))+((x7417*x7421))+(((-1.0)*x7420*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7427=((1.0)*sj5);
IkReal x7428=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7428))+(((-1.0)*r10*x7427)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7427))+(((-1.0)*r01*x7428)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7428))+(((-1.0)*r10*x7427))))+IKsqr(((((-1.0)*r00*x7427))+(((-1.0)*r01*x7428))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7428))+(((-1.0)*r10*x7427))), ((((-1.0)*r00*x7427))+(((-1.0)*r01*x7428))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7429=IKsin(j0);
IkReal x7430=IKcos(j0);
IkReal x7431=(cj5*r01);
IkReal x7432=(cj5*r11);
IkReal x7433=((0.1157)*sj5);
IkReal x7434=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7430))+(((-1.0)*x7431))+(((-1.0)*r00*x7434)));
evalcond[1]=((((-1.0)*x7432))+(((-1.0)*x7429))+(((-1.0)*r10*x7434)));
evalcond[2]=((((-1.0)*r00*x7433))+(((-0.163941)*x7429))+(((-1.0)*px))+(((-0.1157)*x7431)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x7433))+(((-0.1157)*x7432))+(((0.163941)*x7430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7435=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7435;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7436=((1.0)*cj5);
IkReal x7437=((((-1.0)*r01*x7436))+(((-1.0)*r00*sj5)));
j4eval[0]=x7437;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7436)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7438=cj5*cj5;
IkReal x7439=r21*r21;
IkReal x7440=(r21*sj5);
IkReal x7441=(cj5*r20);
IkReal x7442=((((-1.0)*x7438*x7439))+(r22*r22)+((x7438*(r20*r20)))+x7439+(((-2.0)*x7440*x7441)));
j4eval[0]=x7442;
j4eval[1]=IKsign(x7442);
j4eval[2]=((IKabs(((((-1.0)*x7441))+x7440)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7443=cj5*cj5;
IkReal x7444=r21*r21;
IkReal x7445=(r21*sj5);
IkReal x7446=(cj5*r20);
CheckValue<IkReal> x7447 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7446))+x7445)),IKFAST_ATAN2_MAGTHRESH);
if(!x7447.valid){
continue;
}
CheckValue<IkReal> x7448=IKPowWithIntegerCheck(IKsign((((x7443*(r20*r20)))+(r22*r22)+(((-1.0)*x7443*x7444))+(((-2.0)*x7445*x7446))+x7444)),-1);
if(!x7448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7447.value)+(((1.5707963267949)*(x7448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7449=IKsin(j4);
IkReal x7450=IKcos(j4);
IkReal x7451=(r11*sj5);
IkReal x7452=(r21*sj5);
IkReal x7453=(cj5*r00);
IkReal x7454=(cj5*r20);
IkReal x7455=(r01*sj5);
IkReal x7456=(cj5*r10);
IkReal x7457=((1.0)*x7450);
IkReal x7458=((1.0)*x7449);
evalcond[0]=(((x7449*x7452))+(((-1.0)*x7454*x7458))+(((-1.0)*r22*x7457)));
evalcond[1]=((((-1.0)*x7455*x7457))+((x7450*x7453))+(((-1.0)*r02*x7458)));
evalcond[2]=((((-1.0)*x7451*x7457))+((x7450*x7456))+(((-1.0)*r12*x7458)));
evalcond[3]=((((-1.0)*x7456*x7458))+cj0+((x7449*x7451))+(((-1.0)*r12*x7457)));
evalcond[4]=((1.0)+(((-1.0)*x7452*x7457))+((x7450*x7454))+(((-1.0)*r22*x7458)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7453*x7458))+((x7449*x7455))+(((-1.0)*r02*x7457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7459=((1.0)*cj5);
CheckValue<IkReal> x7460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7460.valid){
continue;
}
CheckValue<IkReal> x7461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7459))+(((-1.0)*r00*sj5)))),-1);
if(!x7461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7460.value)+(((1.5707963267949)*(x7461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7462=IKsin(j4);
IkReal x7463=IKcos(j4);
IkReal x7464=(r11*sj5);
IkReal x7465=(r21*sj5);
IkReal x7466=(cj5*r00);
IkReal x7467=(cj5*r20);
IkReal x7468=(r01*sj5);
IkReal x7469=(cj5*r10);
IkReal x7470=((1.0)*x7463);
IkReal x7471=((1.0)*x7462);
evalcond[0]=((((-1.0)*x7467*x7471))+(((-1.0)*r22*x7470))+((x7462*x7465)));
evalcond[1]=((((-1.0)*r02*x7471))+((x7463*x7466))+(((-1.0)*x7468*x7470)));
evalcond[2]=((((-1.0)*x7464*x7470))+((x7463*x7469))+(((-1.0)*r12*x7471)));
evalcond[3]=(cj0+((x7462*x7464))+(((-1.0)*x7469*x7471))+(((-1.0)*r12*x7470)));
evalcond[4]=((1.0)+((x7463*x7467))+(((-1.0)*r22*x7471))+(((-1.0)*x7465*x7470)));
evalcond[5]=((((-1.0)*x7466*x7471))+(((-1.0)*sj0))+(((-1.0)*r02*x7470))+((x7462*x7468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7472 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7472.valid){
continue;
}
CheckValue<IkReal> x7473=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7472.value)+(((1.5707963267949)*(x7473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7474=IKsin(j4);
IkReal x7475=IKcos(j4);
IkReal x7476=(r11*sj5);
IkReal x7477=(r21*sj5);
IkReal x7478=(cj5*r00);
IkReal x7479=(cj5*r20);
IkReal x7480=(r01*sj5);
IkReal x7481=(cj5*r10);
IkReal x7482=((1.0)*x7475);
IkReal x7483=((1.0)*x7474);
evalcond[0]=(((x7474*x7477))+(((-1.0)*x7479*x7483))+(((-1.0)*r22*x7482)));
evalcond[1]=((((-1.0)*x7480*x7482))+(((-1.0)*r02*x7483))+((x7475*x7478)));
evalcond[2]=((((-1.0)*x7476*x7482))+((x7475*x7481))+(((-1.0)*r12*x7483)));
evalcond[3]=(((x7474*x7476))+cj0+(((-1.0)*x7481*x7483))+(((-1.0)*r12*x7482)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7483))+((x7475*x7479))+(((-1.0)*x7477*x7482)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7478*x7483))+((x7474*x7480))+(((-1.0)*r02*x7482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7484=IKcos(j0);
IkReal x7485=IKsin(j0);
evalcond[0]=((((-0.163941)*x7485))+(((-1.0)*px))+(((-0.5723)*x7484)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x7484))+(((-0.5723)*x7485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7486=((1.0)*cj5);
IkReal x7487=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7486)));
j4eval[0]=x7487;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7486)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7488=cj5*cj5;
IkReal x7489=((1.0)*r21);
IkReal x7490=(cj5*sj5);
IkReal x7491=((1.0)*r20);
IkReal x7492=(((r01*r21))+(((-1.0)*r01*x7490*x7491))+((r00*r20*x7488))+((r02*r22))+(((-1.0)*r01*x7488*x7489))+(((-1.0)*r00*x7489*x7490)));
j4eval[0]=x7492;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7491)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7493=cj5*cj5;
IkReal x7494=(r21*sj5);
IkReal x7495=(r11*r21);
IkReal x7496=((1.0)*cj5*r20);
IkReal x7497=(((r10*r20*x7493))+(((-1.0)*x7493*x7495))+(((-1.0)*cj5*r10*x7494))+((r12*r22))+x7495+(((-1.0)*r11*sj5*x7496)));
j4eval[0]=x7497;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7496))+((sj0*x7494))))));
j4eval[2]=IKsign(x7497);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7498=cj5*cj5;
IkReal x7499=(r21*sj5);
IkReal x7500=(r11*r21);
IkReal x7501=((1.0)*cj5*r20);
CheckValue<IkReal> x7502=IKPowWithIntegerCheck(IKsign((((r10*r20*x7498))+(((-1.0)*cj5*r10*x7499))+((r12*r22))+(((-1.0)*x7498*x7500))+x7500+(((-1.0)*r11*sj5*x7501)))),-1);
if(!x7502.valid){
continue;
}
CheckValue<IkReal> x7503 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7501))+((sj0*x7499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7502.value)))+(x7503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7504=IKsin(j4);
IkReal x7505=IKcos(j4);
IkReal x7506=(r11*sj5);
IkReal x7507=(cj5*r00);
IkReal x7508=(cj5*r10);
IkReal x7509=(r21*sj5);
IkReal x7510=(cj5*r20);
IkReal x7511=(r01*sj5);
IkReal x7512=((1.0)*x7505);
IkReal x7513=((1.0)*x7504);
evalcond[0]=(((x7504*x7509))+(((-1.0)*x7510*x7513))+(((-1.0)*r22*x7512)));
evalcond[1]=(((x7505*x7510))+(((-1.0)*x7509*x7512))+(((-1.0)*r22*x7513)));
evalcond[2]=(cj0+((x7504*x7506))+(((-1.0)*x7508*x7513))+(((-1.0)*r12*x7512)));
evalcond[3]=(((x7505*x7507))+cj0+(((-1.0)*x7511*x7512))+(((-1.0)*r02*x7513)));
evalcond[4]=(((x7505*x7508))+sj0+(((-1.0)*x7506*x7512))+(((-1.0)*r12*x7513)));
evalcond[5]=((((-1.0)*sj0))+((x7504*x7511))+(((-1.0)*x7507*x7513))+(((-1.0)*r02*x7512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7514=cj5*cj5;
IkReal x7515=((1.0)*r21);
IkReal x7516=(cj5*sj5);
IkReal x7517=((1.0)*r20);
CheckValue<IkReal> x7518=IKPowWithIntegerCheck(IKsign((((r00*r20*x7514))+((r01*r21))+(((-1.0)*r01*x7514*x7515))+((r02*r22))+(((-1.0)*r01*x7516*x7517))+(((-1.0)*r00*x7515*x7516)))),-1);
if(!x7518.valid){
continue;
}
CheckValue<IkReal> x7519 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7518.value)))+(x7519.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7520=IKsin(j4);
IkReal x7521=IKcos(j4);
IkReal x7522=(r11*sj5);
IkReal x7523=(cj5*r00);
IkReal x7524=(cj5*r10);
IkReal x7525=(r21*sj5);
IkReal x7526=(cj5*r20);
IkReal x7527=(r01*sj5);
IkReal x7528=((1.0)*x7521);
IkReal x7529=((1.0)*x7520);
evalcond[0]=(((x7520*x7525))+(((-1.0)*x7526*x7529))+(((-1.0)*r22*x7528)));
evalcond[1]=(((x7521*x7526))+(((-1.0)*x7525*x7528))+(((-1.0)*r22*x7529)));
evalcond[2]=(cj0+((x7520*x7522))+(((-1.0)*x7524*x7529))+(((-1.0)*r12*x7528)));
evalcond[3]=(cj0+((x7521*x7523))+(((-1.0)*r02*x7529))+(((-1.0)*x7527*x7528)));
evalcond[4]=(sj0+((x7521*x7524))+(((-1.0)*x7522*x7528))+(((-1.0)*r12*x7529)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7523*x7529))+((x7520*x7527))+(((-1.0)*r02*x7528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7530=((1.0)*cj5);
CheckValue<IkReal> x7531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7530)))),-1);
if(!x7531.valid){
continue;
}
CheckValue<IkReal> x7532 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7531.value)))+(x7532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7533=IKsin(j4);
IkReal x7534=IKcos(j4);
IkReal x7535=(r11*sj5);
IkReal x7536=(cj5*r00);
IkReal x7537=(cj5*r10);
IkReal x7538=(r21*sj5);
IkReal x7539=(cj5*r20);
IkReal x7540=(r01*sj5);
IkReal x7541=((1.0)*x7534);
IkReal x7542=((1.0)*x7533);
evalcond[0]=(((x7533*x7538))+(((-1.0)*r22*x7541))+(((-1.0)*x7539*x7542)));
evalcond[1]=((((-1.0)*x7538*x7541))+(((-1.0)*r22*x7542))+((x7534*x7539)));
evalcond[2]=(((x7533*x7535))+cj0+(((-1.0)*x7537*x7542))+(((-1.0)*r12*x7541)));
evalcond[3]=(cj0+(((-1.0)*x7540*x7541))+((x7534*x7536))+(((-1.0)*r02*x7542)));
evalcond[4]=(sj0+(((-1.0)*x7535*x7541))+((x7534*x7537))+(((-1.0)*r12*x7542)));
evalcond[5]=((((-1.0)*sj0))+((x7533*x7540))+(((-1.0)*x7536*x7542))+(((-1.0)*r02*x7541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7543=cj1*cj1;
IkReal x7544=(cj2*sj1);
IkReal x7545=(r00*sj5);
IkReal x7546=(cj5*r01);
IkReal x7547=((1000000.0)*py);
IkReal x7548=(cj1*sj2);
IkReal x7549=(cj1*sj1);
IkReal x7550=(sj2*x7543);
IkReal x7551=((115700.0)*r10*sj5);
IkReal x7552=((115700.0)*cj5*r11);
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(((((572300.0)*x7549))+(((572300.0)*cj2*sj2))+(((-1144600.0)*cj2*x7550))+(((-612000.0)*cj1*x7544))+(((-612000.0)*x7550))+(((-1144600.0)*cj1*cj2*x7544))),-1);
if(!x7553.valid){
continue;
}
CheckValue<IkReal> x7554=IKPowWithIntegerCheck(((((-1.0)*x7544))+(((-1.0)*x7548))),-1);
if(!x7554.valid){
continue;
}
if( IKabs(((x7553.value)*(((((-1.0)*x7544*x7551))+(((-1.0)*x7544*x7552))+(((-1.0)*x7544*x7547))+(((-1.0)*x7547*x7548))+(((-1.0)*x7548*x7551))+(((-1.0)*x7548*x7552))+(((-163941.0)*x7546))+(((-163941.0)*x7545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7554.value)*((x7545+x7546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7553.value)*(((((-1.0)*x7544*x7551))+(((-1.0)*x7544*x7552))+(((-1.0)*x7544*x7547))+(((-1.0)*x7547*x7548))+(((-1.0)*x7548*x7551))+(((-1.0)*x7548*x7552))+(((-163941.0)*x7546))+(((-163941.0)*x7545))))))+IKsqr(((x7554.value)*((x7545+x7546))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((x7553.value)*(((((-1.0)*x7544*x7551))+(((-1.0)*x7544*x7552))+(((-1.0)*x7544*x7547))+(((-1.0)*x7547*x7548))+(((-1.0)*x7548*x7551))+(((-1.0)*x7548*x7552))+(((-163941.0)*x7546))+(((-163941.0)*x7545))))), ((x7554.value)*((x7545+x7546))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7555=IKcos(j0);
IkReal x7556=IKsin(j0);
IkReal x7557=(cj5*r01);
IkReal x7558=((1.0)*sj5);
IkReal x7559=(cj5*r11);
IkReal x7560=((0.1157)*sj5);
IkReal x7561=((1.0)*sj1);
IkReal x7562=((1.0)*cj1*sj2);
IkReal x7563=((0.5723)*sj1*sj2);
IkReal x7564=(cj2*x7555);
IkReal x7565=(cj1*x7556);
evalcond[0]=((((-1.0)*x7555*x7562))+(((-1.0)*x7557))+(((-1.0)*r00*x7558))+(((-1.0)*x7561*x7564)));
evalcond[1]=((((-1.0)*r10*x7558))+(((-1.0)*x7556*x7562))+(((-1.0)*cj2*x7556*x7561))+(((-1.0)*x7559)));
evalcond[2]=((((-1.0)*x7555*x7563))+(((-0.1157)*x7557))+(((0.612)*cj1*x7555))+(((-1.0)*px))+(((-1.0)*r00*x7560))+(((0.5723)*cj1*x7564))+(((-0.163941)*x7556)));
evalcond[3]=((((0.163941)*x7555))+(((0.5723)*cj2*x7565))+(((-0.1157)*x7559))+(((-1.0)*x7556*x7563))+(((0.612)*x7565))+(((-1.0)*r10*x7560))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7566=((1.0)*cj5);
IkReal x7567=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7566)));
j4eval[0]=x7567;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7566))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7568=((1.0)*cj5);
IkReal x7569=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7568)));
j4eval[0]=x7569;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7568)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7570=((1.0)*sj0);
IkReal x7571=((1.0)*cj0);
IkReal x7572=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7572;
j4eval[1]=((IKabs(((((-1.0)*r02*x7571))+(((-1.0)*r12*x7570)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7571))+(((-1.0)*r11*sj5*x7570))))));
j4eval[2]=IKsign(x7572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7573=((-1.0)*r20);
IkReal x7575 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7575)==0){
continue;
}
IkReal x7574=pow(x7575,-0.5);
CheckValue<IkReal> x7576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7573),IKFAST_ATAN2_MAGTHRESH);
if(!x7576.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7576.value));
IkReal gconst133=(r21*x7574);
IkReal gconst134=(x7573*x7574);
CheckValue<IkReal> x7577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7577.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7577.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7578=((-1.0)*r20);
IkReal x7579=x7574;
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7578),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
IkReal x7580=((-1.0)*(x7581.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7580;
IkReal gconst132=x7580;
IkReal gconst133=(r21*x7579);
IkReal gconst134=(x7578*x7579);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7582=((-1.0)*r20);
IkReal x7583=x7574;
CheckValue<IkReal> x7585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7582),IKFAST_ATAN2_MAGTHRESH);
if(!x7585.valid){
continue;
}
IkReal x7584=((-1.0)*(x7585.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7584;
IkReal gconst132=x7584;
IkReal gconst133=(r21*x7583);
IkReal gconst134=(x7582*x7583);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7586=((-1.0)*r20);
IkReal x7587=x7574;
CheckValue<IkReal> x7589 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7586),IKFAST_ATAN2_MAGTHRESH);
if(!x7589.valid){
continue;
}
IkReal x7588=((-1.0)*(x7589.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7588;
IkReal gconst132=x7588;
IkReal gconst133=(r21*x7587);
IkReal gconst134=(x7586*x7587);
IkReal x7590=r22*r22;
CheckValue<IkReal> x7593=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7590))),-1);
if(!x7593.valid){
continue;
}
IkReal x7591=x7593.value;
IkReal x7592=(((x7591*(r20*r20*r20*r20)))+(((2.0)*x7591*(r20*r20)*(r21*r21)))+x7590+((x7591*(r21*r21*r21*r21))));
j4eval[0]=x7592;
j4eval[1]=IKsign(x7592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7594=(gconst133*r21);
IkReal x7595=(cj1*sj2);
IkReal x7596=(gconst134*r20);
IkReal x7597=(cj2*sj1);
CheckValue<IkReal> x7598 = IKatan2WithCheck(IkReal((((r22*x7597))+((r22*x7595)))),IkReal((((x7594*x7595))+((x7594*x7597))+(((-1.0)*x7596*x7597))+(((-1.0)*x7595*x7596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7598.valid){
continue;
}
CheckValue<IkReal> x7599=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7594*x7594)+(((-2.0)*x7594*x7596))+(x7596*x7596))),-1);
if(!x7599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7598.value)+(((1.5707963267949)*(x7599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7600=IKsin(j4);
IkReal x7601=IKcos(j4);
IkReal x7602=(sj1*sj2);
IkReal x7603=(gconst133*r11);
IkReal x7604=(gconst133*r21);
IkReal x7605=(gconst133*r01);
IkReal x7606=((1.0)*x7601);
IkReal x7607=(gconst134*x7601);
IkReal x7608=((1.0)*x7600);
IkReal x7609=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7606))+((x7600*x7604))+(((-1.0)*gconst134*r20*x7608)));
evalcond[1]=(((x7600*x7603))+cj0+(((-1.0)*gconst134*r10*x7608))+(((-1.0)*r12*x7606)));
evalcond[2]=((((-1.0)*sj0))+((x7600*x7605))+(((-1.0)*r02*x7606))+(((-1.0)*gconst134*r00*x7608)));
evalcond[3]=(((r20*x7607))+((cj2*sj1))+(((-1.0)*r22*x7608))+((cj1*sj2))+(((-1.0)*x7604*x7606)));
evalcond[4]=((((-1.0)*cj0*x7609))+((r00*x7607))+(((-1.0)*x7605*x7606))+(((-1.0)*r02*x7608))+((cj0*x7602)));
evalcond[5]=((((-1.0)*sj0*x7609))+((r10*x7607))+(((-1.0)*x7603*x7606))+(((-1.0)*r12*x7608))+((sj0*x7602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7610=((1.0)*gconst134);
CheckValue<IkReal> x7611 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7610))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7611.valid){
continue;
}
CheckValue<IkReal> x7612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7610))+(((-1.0)*gconst133*r10)))),-1);
if(!x7612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7611.value)+(((1.5707963267949)*(x7612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7613=IKsin(j4);
IkReal x7614=IKcos(j4);
IkReal x7615=(sj1*sj2);
IkReal x7616=(gconst133*r11);
IkReal x7617=(gconst133*r21);
IkReal x7618=(gconst133*r01);
IkReal x7619=((1.0)*x7614);
IkReal x7620=(gconst134*x7614);
IkReal x7621=((1.0)*x7613);
IkReal x7622=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7619))+((x7613*x7617))+(((-1.0)*gconst134*r20*x7621)));
evalcond[1]=((((-1.0)*r12*x7619))+cj0+(((-1.0)*gconst134*r10*x7621))+((x7613*x7616)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7621))+((x7613*x7618))+(((-1.0)*r02*x7619)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7617*x7619))+((cj1*sj2))+((r20*x7620))+(((-1.0)*r22*x7621)));
evalcond[4]=((((-1.0)*cj0*x7622))+((r00*x7620))+(((-1.0)*x7618*x7619))+((cj0*x7615))+(((-1.0)*r02*x7621)));
evalcond[5]=((((-1.0)*r12*x7621))+(((-1.0)*sj0*x7622))+((sj0*x7615))+((r10*x7620))+(((-1.0)*x7616*x7619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7623=((1.0)*gconst134);
CheckValue<IkReal> x7624 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7623))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7624.valid){
continue;
}
CheckValue<IkReal> x7625=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7623)))),-1);
if(!x7625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7624.value)+(((1.5707963267949)*(x7625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7626=IKsin(j4);
IkReal x7627=IKcos(j4);
IkReal x7628=(sj1*sj2);
IkReal x7629=(gconst133*r11);
IkReal x7630=(gconst133*r21);
IkReal x7631=(gconst133*r01);
IkReal x7632=((1.0)*x7627);
IkReal x7633=(gconst134*x7627);
IkReal x7634=((1.0)*x7626);
IkReal x7635=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7632))+(((-1.0)*gconst134*r20*x7634))+((x7626*x7630)));
evalcond[1]=((((-1.0)*gconst134*r10*x7634))+cj0+((x7626*x7629))+(((-1.0)*r12*x7632)));
evalcond[2]=((((-1.0)*sj0))+((x7626*x7631))+(((-1.0)*r02*x7632))+(((-1.0)*gconst134*r00*x7634)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7634))+(((-1.0)*x7630*x7632))+((cj1*sj2))+((r20*x7633)));
evalcond[4]=((((-1.0)*cj0*x7635))+((r00*x7633))+(((-1.0)*r02*x7634))+(((-1.0)*x7631*x7632))+((cj0*x7628)));
evalcond[5]=((((-1.0)*x7629*x7632))+((sj0*x7628))+((r10*x7633))+(((-1.0)*r12*x7634))+(((-1.0)*sj0*x7635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7636=((-1.0)*r21);
IkReal x7638 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7638)==0){
continue;
}
IkReal x7637=pow(x7638,-0.5);
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal(x7636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7639.value))));
IkReal gconst136=(x7636*x7637);
IkReal gconst137=((1.0)*r20*x7637);
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7640.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7641=((-1.0)*r21);
CheckValue<IkReal> x7644 = IKatan2WithCheck(IkReal(x7641),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7644.valid){
continue;
}
IkReal x7642=((1.0)*(x7644.value));
IkReal x7643=x7637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7642)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7642)));
IkReal gconst136=(x7641*x7643);
IkReal gconst137=((1.0)*r20*x7643);
IkReal x7645=r22*r22;
IkReal x7646=((1.0)*x7645);
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(((-1.0)+x7645),-1);
if(!x7650.valid){
continue;
}
IkReal x7647=x7650.value;
if((((1.0)+(((-1.0)*x7646)))) < -0.00001)
continue;
IkReal x7648=IKsqrt(((1.0)+(((-1.0)*x7646))));
IkReal x7649=(cj0*x7647*x7648);
j4eval[0]=((IKabs(((((-1.0)*x7646*x7649))+x7649)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7651=((-1.0)*r21);
CheckValue<IkReal> x7654 = IKatan2WithCheck(IkReal(x7651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7654.valid){
continue;
}
IkReal x7652=((1.0)*(x7654.value));
IkReal x7653=x7637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7652)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7652)));
IkReal gconst136=(x7651*x7653);
IkReal gconst137=((1.0)*r20*x7653);
IkReal x7655=r22*r22;
IkReal x7656=((1.0)*x7655);
CheckValue<IkReal> x7660=IKPowWithIntegerCheck(((-1.0)+x7655),-1);
if(!x7660.valid){
continue;
}
IkReal x7657=x7660.value;
if((((1.0)+(((-1.0)*x7656)))) < -0.00001)
continue;
IkReal x7658=IKsqrt(((1.0)+(((-1.0)*x7656))));
IkReal x7659=(sj0*x7657*x7658);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7656*x7659))+x7659))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7661=((-1.0)*r21);
CheckValue<IkReal> x7664 = IKatan2WithCheck(IkReal(x7661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7664.valid){
continue;
}
IkReal x7662=((1.0)*(x7664.value));
IkReal x7663=x7637;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7662)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7662)));
IkReal gconst136=(x7661*x7663);
IkReal gconst137=((1.0)*r20*x7663);
IkReal x7665=r22*r22;
IkReal x7666=(r12*sj0);
IkReal x7667=(cj0*r02);
CheckValue<IkReal> x7671=IKPowWithIntegerCheck(((-1.0)+x7665),-1);
if(!x7671.valid){
continue;
}
IkReal x7668=x7671.value;
if((((1.0)+(((-1.0)*x7665)))) < -0.00001)
continue;
IkReal x7669=IKsqrt(((1.0)+(((-1.0)*x7665))));
IkReal x7670=(r22*x7668*x7669);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7666))+(((-1.0)*x7667)))))+(IKabs((((x7667*x7670))+((x7666*x7670))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7672=((1.0)*sj0);
IkReal x7673=((1.0)*cj0);
CheckValue<IkReal> x7674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7674.valid){
continue;
}
CheckValue<IkReal> x7675 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7673))+(((-1.0)*r12*x7672)))),IkReal(((((-1.0)*gconst136*r11*x7672))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7673))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7674.value)))+(x7675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7676=IKsin(j4);
IkReal x7677=IKcos(j4);
IkReal x7678=(gconst136*r01);
IkReal x7679=(gconst137*r10);
IkReal x7680=(sj1*sj2);
IkReal x7681=(gconst137*r20);
IkReal x7682=(gconst136*r11);
IkReal x7683=(gconst136*r21);
IkReal x7684=(gconst137*r00);
IkReal x7685=((1.0)*x7677);
IkReal x7686=((1.0)*cj1*cj2);
IkReal x7687=((1.0)*x7676);
evalcond[0]=(((x7676*x7683))+(((-1.0)*r22*x7685))+(((-1.0)*x7681*x7687)));
evalcond[1]=(cj0+((x7676*x7682))+(((-1.0)*r12*x7685))+(((-1.0)*x7679*x7687)));
evalcond[2]=((((-1.0)*sj0))+((x7676*x7678))+(((-1.0)*x7684*x7687))+(((-1.0)*r02*x7685)));
evalcond[3]=(((cj2*sj1))+((x7677*x7681))+((cj1*sj2))+(((-1.0)*r22*x7687))+(((-1.0)*x7683*x7685)));
evalcond[4]=((((-1.0)*cj0*x7686))+((x7677*x7684))+((cj0*x7680))+(((-1.0)*x7678*x7685))+(((-1.0)*r02*x7687)));
evalcond[5]=(((sj0*x7680))+(((-1.0)*x7682*x7685))+(((-1.0)*r12*x7687))+(((-1.0)*sj0*x7686))+((x7677*x7679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7688=((1.0)*gconst137);
CheckValue<IkReal> x7689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7688))+(((-1.0)*gconst136*r10)))),-1);
if(!x7689.valid){
continue;
}
CheckValue<IkReal> x7690 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7688))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7689.value)))+(x7690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7691=IKsin(j4);
IkReal x7692=IKcos(j4);
IkReal x7693=(gconst136*r01);
IkReal x7694=(gconst137*r10);
IkReal x7695=(sj1*sj2);
IkReal x7696=(gconst137*r20);
IkReal x7697=(gconst136*r11);
IkReal x7698=(gconst136*r21);
IkReal x7699=(gconst137*r00);
IkReal x7700=((1.0)*x7692);
IkReal x7701=((1.0)*cj1*cj2);
IkReal x7702=((1.0)*x7691);
evalcond[0]=((((-1.0)*x7696*x7702))+(((-1.0)*r22*x7700))+((x7691*x7698)));
evalcond[1]=(cj0+((x7691*x7697))+(((-1.0)*r12*x7700))+(((-1.0)*x7694*x7702)));
evalcond[2]=((((-1.0)*sj0))+((x7691*x7693))+(((-1.0)*r02*x7700))+(((-1.0)*x7699*x7702)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7698*x7700))+(((-1.0)*r22*x7702))+((x7692*x7696))+((cj1*sj2)));
evalcond[4]=(((x7692*x7699))+(((-1.0)*x7693*x7700))+((cj0*x7695))+(((-1.0)*r02*x7702))+(((-1.0)*cj0*x7701)));
evalcond[5]=((((-1.0)*x7697*x7700))+((x7692*x7694))+((sj0*x7695))+(((-1.0)*r12*x7702))+(((-1.0)*sj0*x7701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7703=((1.0)*gconst137);
CheckValue<IkReal> x7704 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7703))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7704.valid){
continue;
}
CheckValue<IkReal> x7705=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7703))+(((-1.0)*gconst136*r00)))),-1);
if(!x7705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7704.value)+(((1.5707963267949)*(x7705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7706=IKsin(j4);
IkReal x7707=IKcos(j4);
IkReal x7708=(gconst136*r01);
IkReal x7709=(gconst137*r10);
IkReal x7710=(sj1*sj2);
IkReal x7711=(gconst137*r20);
IkReal x7712=(gconst136*r11);
IkReal x7713=(gconst136*r21);
IkReal x7714=(gconst137*r00);
IkReal x7715=((1.0)*x7707);
IkReal x7716=((1.0)*cj1*cj2);
IkReal x7717=((1.0)*x7706);
evalcond[0]=((((-1.0)*x7711*x7717))+(((-1.0)*r22*x7715))+((x7706*x7713)));
evalcond[1]=(cj0+(((-1.0)*r12*x7715))+((x7706*x7712))+(((-1.0)*x7709*x7717)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7714*x7717))+(((-1.0)*r02*x7715))+((x7706*x7708)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7717))+((cj1*sj2))+((x7707*x7711))+(((-1.0)*x7713*x7715)));
evalcond[4]=((((-1.0)*x7708*x7715))+(((-1.0)*cj0*x7716))+((cj0*x7710))+((x7707*x7714))+(((-1.0)*r02*x7717)));
evalcond[5]=((((-1.0)*r12*x7717))+((sj0*x7710))+(((-1.0)*x7712*x7715))+((x7707*x7709))+(((-1.0)*sj0*x7716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7718=((-1.0)*r10);
IkReal x7720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7720)==0){
continue;
}
IkReal x7719=pow(x7720,-0.5);
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7718),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7721.value));
IkReal gconst139=(r11*x7719);
IkReal gconst140=(x7718*x7719);
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7723=((-1.0)*r10);
IkReal x7724=x7719;
CheckValue<IkReal> x7726 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7723),IKFAST_ATAN2_MAGTHRESH);
if(!x7726.valid){
continue;
}
IkReal x7725=((-1.0)*(x7726.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7725;
IkReal gconst138=x7725;
IkReal gconst139=(r11*x7724);
IkReal gconst140=(x7723*x7724);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7727=((1.0)*sj0);
IkReal x7728=((1.0)*gconst139);
CheckValue<IkReal> x7729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7728)))),-1);
if(!x7729.valid){
continue;
}
CheckValue<IkReal> x7730 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7727)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7727))+(((-1.0)*cj0*r01*x7728))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7729.value)))+(x7730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7731=IKsin(j4);
IkReal x7732=IKcos(j4);
IkReal x7733=(gconst140*r00);
IkReal x7734=(sj1*sj2);
IkReal x7735=(gconst139*r11);
IkReal x7736=(gconst139*r01);
IkReal x7737=(gconst139*r21);
IkReal x7738=((1.0)*x7732);
IkReal x7739=((1.0)*x7731);
IkReal x7740=((1.0)*cj1*cj2);
IkReal x7741=(gconst140*x7732);
evalcond[0]=((((-1.0)*r22*x7738))+((x7731*x7737))+(((-1.0)*gconst140*r20*x7739)));
evalcond[1]=((((-1.0)*gconst140*r10*x7739))+cj0+((x7731*x7735))+(((-1.0)*r12*x7738)));
evalcond[2]=((((-1.0)*sj0))+((x7731*x7736))+(((-1.0)*r02*x7738))+(((-1.0)*x7733*x7739)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7739))+((r20*x7741))+(((-1.0)*x7737*x7738)));
evalcond[4]=(((x7732*x7733))+(((-1.0)*x7736*x7738))+((cj0*x7734))+(((-1.0)*cj0*x7740))+(((-1.0)*r02*x7739)));
evalcond[5]=(((r10*x7741))+(((-1.0)*r12*x7739))+(((-1.0)*x7735*x7738))+((sj0*x7734))+(((-1.0)*sj0*x7740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7742=((1.0)*gconst140);
CheckValue<IkReal> x7743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7742))+(((-1.0)*gconst139*r00)))),-1);
if(!x7743.valid){
continue;
}
CheckValue<IkReal> x7744 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7743.value)))+(x7744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7745=IKsin(j4);
IkReal x7746=IKcos(j4);
IkReal x7747=(gconst140*r00);
IkReal x7748=(sj1*sj2);
IkReal x7749=(gconst139*r11);
IkReal x7750=(gconst139*r01);
IkReal x7751=(gconst139*r21);
IkReal x7752=((1.0)*x7746);
IkReal x7753=((1.0)*x7745);
IkReal x7754=((1.0)*cj1*cj2);
IkReal x7755=(gconst140*x7746);
evalcond[0]=((((-1.0)*r22*x7752))+(((-1.0)*gconst140*r20*x7753))+((x7745*x7751)));
evalcond[1]=(cj0+(((-1.0)*r12*x7752))+(((-1.0)*gconst140*r10*x7753))+((x7745*x7749)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7752))+(((-1.0)*x7747*x7753))+((x7745*x7750)));
evalcond[3]=((((-1.0)*r22*x7753))+((cj2*sj1))+((cj1*sj2))+((r20*x7755))+(((-1.0)*x7751*x7752)));
evalcond[4]=((((-1.0)*r02*x7753))+(((-1.0)*cj0*x7754))+((x7746*x7747))+((cj0*x7748))+(((-1.0)*x7750*x7752)));
evalcond[5]=(((r10*x7755))+((sj0*x7748))+(((-1.0)*r12*x7753))+(((-1.0)*sj0*x7754))+(((-1.0)*x7749*x7752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7756=((-1.0)*r11);
IkReal x7758 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7758)==0){
continue;
}
IkReal x7757=pow(x7758,-0.5);
CheckValue<IkReal> x7759 = IKatan2WithCheck(IkReal(x7756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7759.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7759.value))));
IkReal gconst142=(x7756*x7757);
IkReal gconst143=((1.0)*r10*x7757);
CheckValue<IkReal> x7760 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7760.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7760.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7761=((-1.0)*r11);
CheckValue<IkReal> x7764 = IKatan2WithCheck(IkReal(x7761),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7764.valid){
continue;
}
IkReal x7762=((1.0)*(x7764.value));
IkReal x7763=x7757;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7762)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7762)));
IkReal gconst142=(x7761*x7763);
IkReal gconst143=((1.0)*r10*x7763);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7765=((-1.0)*r11);
CheckValue<IkReal> x7768 = IKatan2WithCheck(IkReal(x7765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7768.valid){
continue;
}
IkReal x7766=((1.0)*(x7768.value));
IkReal x7767=x7757;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7766)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7766)));
IkReal gconst142=(x7765*x7767);
IkReal gconst143=((1.0)*r10*x7767);
IkReal x7769=r12*r12;
IkReal x7770=((1.0)*sj0);
IkReal x7771=(cj0*r02);
IkReal x7772=x7757;
j4eval[0]=((IKabs((((sj0*x7769*x7772))+(((-1.0)*x7770*x7772))+((r12*x7771*x7772)))))+(IKabs(((((-1.0)*x7771))+(((-1.0)*r12*x7770))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7773=((-1.0)*r11);
CheckValue<IkReal> x7776 = IKatan2WithCheck(IkReal(x7773),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7776.valid){
continue;
}
IkReal x7774=((1.0)*(x7776.value));
IkReal x7775=x7757;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7774)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7774)));
IkReal gconst142=(x7773*x7775);
IkReal gconst143=((1.0)*r10*x7775);
IkReal x7777=r12*r12;
IkReal x7778=(cj1*r22*sj2);
IkReal x7779=(cj2*r22*sj1);
CheckValue<IkReal> x7783=IKPowWithIntegerCheck(((-1.0)+x7777),-1);
if(!x7783.valid){
continue;
}
IkReal x7780=x7783.value;
if((((1.0)+(((-1.0)*x7777)))) < -0.00001)
continue;
IkReal x7781=IKsqrt(((1.0)+(((-1.0)*x7777))));
IkReal x7782=((1.0)*r12*x7780*x7781);
j4eval[0]=((IKabs((x7779+x7778)))+(IKabs(((((-1.0)*x7779*x7782))+(((-1.0)*x7778*x7782))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7784=(gconst142*r21);
IkReal x7785=(cj1*sj2);
IkReal x7786=(cj2*sj1);
IkReal x7787=(gconst143*r20);
CheckValue<IkReal> x7788=IKPowWithIntegerCheck(IKsign(((x7787*x7787)+(r22*r22)+(((-2.0)*x7784*x7787))+(x7784*x7784))),-1);
if(!x7788.valid){
continue;
}
CheckValue<IkReal> x7789 = IKatan2WithCheck(IkReal((((r22*x7786))+((r22*x7785)))),IkReal((((x7784*x7786))+((x7784*x7785))+(((-1.0)*x7786*x7787))+(((-1.0)*x7785*x7787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7788.value)))+(x7789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7790=IKsin(j4);
IkReal x7791=IKcos(j4);
IkReal x7792=(sj1*sj2);
IkReal x7793=(gconst143*r20);
IkReal x7794=((1.0)*x7791);
IkReal x7795=((1.0)*cj1*cj2);
IkReal x7796=((1.0)*x7790);
IkReal x7797=(gconst142*x7790);
IkReal x7798=(gconst143*x7791);
evalcond[0]=((((-1.0)*r22*x7794))+(((-1.0)*x7793*x7796))+((r21*x7797)));
evalcond[1]=((((-1.0)*gconst143*r10*x7796))+cj0+(((-1.0)*r12*x7794))+((r11*x7797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7796))+((r01*x7797))+(((-1.0)*r02*x7794)));
evalcond[3]=((((-1.0)*r22*x7796))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7794))+((x7791*x7793)));
evalcond[4]=((((-1.0)*cj0*x7795))+(((-1.0)*gconst142*r01*x7794))+((r00*x7798))+((cj0*x7792))+(((-1.0)*r02*x7796)));
evalcond[5]=((((-1.0)*gconst142*r11*x7794))+((r10*x7798))+(((-1.0)*r12*x7796))+(((-1.0)*sj0*x7795))+((sj0*x7792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7799=((1.0)*sj0);
IkReal x7800=((1.0)*gconst142);
CheckValue<IkReal> x7801 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7799))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x7799))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7800))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7801.valid){
continue;
}
CheckValue<IkReal> x7802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7800))+(((-1.0)*gconst143*r21)))),-1);
if(!x7802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7801.value)+(((1.5707963267949)*(x7802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7803=IKsin(j4);
IkReal x7804=IKcos(j4);
IkReal x7805=(sj1*sj2);
IkReal x7806=(gconst143*r20);
IkReal x7807=((1.0)*x7804);
IkReal x7808=((1.0)*cj1*cj2);
IkReal x7809=((1.0)*x7803);
IkReal x7810=(gconst142*x7803);
IkReal x7811=(gconst143*x7804);
evalcond[0]=((((-1.0)*r22*x7807))+((r21*x7810))+(((-1.0)*x7806*x7809)));
evalcond[1]=(cj0+((r11*x7810))+(((-1.0)*r12*x7807))+(((-1.0)*gconst143*r10*x7809)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7807))+(((-1.0)*gconst143*r00*x7809))+((r01*x7810)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7809))+(((-1.0)*gconst142*r21*x7807))+((x7804*x7806)));
evalcond[4]=((((-1.0)*gconst142*r01*x7807))+((cj0*x7805))+(((-1.0)*r02*x7809))+((r00*x7811))+(((-1.0)*cj0*x7808)));
evalcond[5]=((((-1.0)*sj0*x7808))+((r10*x7811))+(((-1.0)*r12*x7809))+((sj0*x7805))+(((-1.0)*gconst142*r11*x7807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7812=((1.0)*gconst143);
CheckValue<IkReal> x7813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7812)))),-1);
if(!x7813.valid){
continue;
}
CheckValue<IkReal> x7814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7813.value)))+(x7814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7815=IKsin(j4);
IkReal x7816=IKcos(j4);
IkReal x7817=(sj1*sj2);
IkReal x7818=(gconst143*r20);
IkReal x7819=((1.0)*x7816);
IkReal x7820=((1.0)*cj1*cj2);
IkReal x7821=((1.0)*x7815);
IkReal x7822=(gconst142*x7815);
IkReal x7823=(gconst143*x7816);
evalcond[0]=(((r21*x7822))+(((-1.0)*r22*x7819))+(((-1.0)*x7818*x7821)));
evalcond[1]=(cj0+((r11*x7822))+(((-1.0)*r12*x7819))+(((-1.0)*gconst143*r10*x7821)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7819))+((r01*x7822))+(((-1.0)*gconst143*r00*x7821)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7816*x7818))+(((-1.0)*gconst142*r21*x7819))+(((-1.0)*r22*x7821)));
evalcond[4]=((((-1.0)*gconst142*r01*x7819))+(((-1.0)*r02*x7821))+((r00*x7823))+(((-1.0)*cj0*x7820))+((cj0*x7817)));
evalcond[5]=(((r10*x7823))+(((-1.0)*gconst142*r11*x7819))+((sj0*x7817))+(((-1.0)*sj0*x7820))+(((-1.0)*r12*x7821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7824=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7824;
j4eval[1]=IKsign(x7824);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7825=((1.0)*cj5);
IkReal x7826=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7825)));
j4eval[0]=x7826;
j4eval[1]=((IKabs(((((-1.0)*r20*x7825))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7827=cj5*cj5;
IkReal x7828=r11*r11;
IkReal x7829=(r11*sj5);
IkReal x7830=(cj5*r10);
IkReal x7831=((r12*r12)+((x7827*(r10*r10)))+(((-1.0)*x7827*x7828))+x7828+(((-2.0)*x7829*x7830)));
j4eval[0]=x7831;
j4eval[1]=IKsign(x7831);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7829))+x7830))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7832=cj5*cj5;
IkReal x7833=r11*r11;
IkReal x7834=(cj5*r10);
IkReal x7835=(r11*sj5);
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal((x7834+(((-1.0)*x7835)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x7832*x7833))+((x7832*(r10*r10)))+(((-2.0)*x7834*x7835))+x7833)),-1);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7836.value)+(((1.5707963267949)*(x7837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKsin(j4);
IkReal x7839=IKcos(j4);
IkReal x7840=(cj5*r10);
IkReal x7841=(r01*sj5);
IkReal x7842=(cj5*r00);
IkReal x7843=(cj5*r20);
IkReal x7844=((1.0)*x7839);
IkReal x7845=((1.0)*x7838);
IkReal x7846=(sj5*x7838);
evalcond[0]=(((r21*x7846))+(((-1.0)*r22*x7844))+(((-1.0)*x7843*x7845)));
evalcond[1]=((((-1.0)*x7842*x7845))+((x7838*x7841))+(((-1.0)*r02*x7844)));
evalcond[2]=((((-1.0)*r11*sj5*x7844))+((x7839*x7840))+(((-1.0)*r12*x7845)));
evalcond[3]=((1.0)+(((-1.0)*x7840*x7845))+(((-1.0)*r12*x7844))+((r11*x7846)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7845))+((cj1*sj2))+((x7839*x7843))+(((-1.0)*r21*sj5*x7844)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x7839*x7842))+(((-1.0)*x7841*x7844))+(((-1.0)*r02*x7845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7847=((1.0)*cj5);
CheckValue<IkReal> x7848 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7848.valid){
continue;
}
CheckValue<IkReal> x7849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7847)))),-1);
if(!x7849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7848.value)+(((1.5707963267949)*(x7849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7850=IKsin(j4);
IkReal x7851=IKcos(j4);
IkReal x7852=(cj5*r10);
IkReal x7853=(r01*sj5);
IkReal x7854=(cj5*r00);
IkReal x7855=(cj5*r20);
IkReal x7856=((1.0)*x7851);
IkReal x7857=((1.0)*x7850);
IkReal x7858=(sj5*x7850);
evalcond[0]=(((r21*x7858))+(((-1.0)*x7855*x7857))+(((-1.0)*r22*x7856)));
evalcond[1]=((((-1.0)*x7854*x7857))+((x7850*x7853))+(((-1.0)*r02*x7856)));
evalcond[2]=((((-1.0)*r11*sj5*x7856))+((x7851*x7852))+(((-1.0)*r12*x7857)));
evalcond[3]=((1.0)+((r11*x7858))+(((-1.0)*x7852*x7857))+(((-1.0)*r12*x7856)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7856))+((x7851*x7855))+(((-1.0)*r22*x7857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7857))+((x7851*x7854))+(((-1.0)*x7853*x7856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7859.valid){
continue;
}
CheckValue<IkReal> x7860 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7859.value)))+(x7860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7861=IKsin(j4);
IkReal x7862=IKcos(j4);
IkReal x7863=(cj5*r10);
IkReal x7864=(r01*sj5);
IkReal x7865=(cj5*r00);
IkReal x7866=(cj5*r20);
IkReal x7867=((1.0)*x7862);
IkReal x7868=((1.0)*x7861);
IkReal x7869=(sj5*x7861);
evalcond[0]=(((r21*x7869))+(((-1.0)*x7866*x7868))+(((-1.0)*r22*x7867)));
evalcond[1]=(((x7861*x7864))+(((-1.0)*r02*x7867))+(((-1.0)*x7865*x7868)));
evalcond[2]=((((-1.0)*r11*sj5*x7867))+(((-1.0)*r12*x7868))+((x7862*x7863)));
evalcond[3]=((1.0)+(((-1.0)*x7863*x7868))+((r11*x7869))+(((-1.0)*r12*x7867)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7862*x7866))+(((-1.0)*r21*sj5*x7867))+(((-1.0)*r22*x7868)));
evalcond[5]=((((-1.0)*x7864*x7867))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7868))+((x7862*x7865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7870=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7870;
j4eval[1]=IKsign(x7870);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7871=((1.0)*cj5);
IkReal x7872=((((-1.0)*r21*x7871))+(((-1.0)*r20*sj5)));
j4eval[0]=x7872;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7871))))));
j4eval[2]=IKsign(x7872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7873=cj5*cj5;
IkReal x7874=r11*r11;
IkReal x7875=(cj5*r10);
IkReal x7876=(r11*sj5);
IkReal x7877=((((-1.0)*x7874))+(((-1.0)*(r12*r12)))+(((-1.0)*x7873*(r10*r10)))+((x7873*x7874))+(((2.0)*x7875*x7876)));
j4eval[0]=x7877;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7876))+x7875))));
j4eval[2]=IKsign(x7877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7878=cj5*cj5;
IkReal x7879=r11*r11;
IkReal x7880=(cj5*r10);
IkReal x7881=(r11*sj5);
CheckValue<IkReal> x7882 = IKatan2WithCheck(IkReal(((((-1.0)*x7881))+x7880)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7882.valid){
continue;
}
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((((2.0)*x7880*x7881))+((x7878*x7879))+(((-1.0)*x7878*(r10*r10)))+(((-1.0)*x7879))+(((-1.0)*(r12*r12))))),-1);
if(!x7883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7882.value)+(((1.5707963267949)*(x7883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7884=IKsin(j4);
IkReal x7885=IKcos(j4);
IkReal x7886=(cj5*r10);
IkReal x7887=(r01*sj5);
IkReal x7888=(cj5*r00);
IkReal x7889=(cj5*r20);
IkReal x7890=((1.0)*x7885);
IkReal x7891=((1.0)*x7884);
IkReal x7892=(sj5*x7884);
evalcond[0]=(((r21*x7892))+(((-1.0)*x7889*x7891))+(((-1.0)*r22*x7890)));
evalcond[1]=((((-1.0)*x7888*x7891))+((x7884*x7887))+(((-1.0)*r02*x7890)));
evalcond[2]=((((-1.0)*r11*sj5*x7890))+((x7885*x7886))+(((-1.0)*r12*x7891)));
evalcond[3]=((-1.0)+(((-1.0)*x7886*x7891))+(((-1.0)*r12*x7890))+((r11*x7892)));
evalcond[4]=(((cj2*sj1))+((x7885*x7889))+((cj1*sj2))+(((-1.0)*r21*sj5*x7890))+(((-1.0)*r22*x7891)));
evalcond[5]=(((x7885*x7888))+(((-1.0)*sj1*sj2))+(((-1.0)*x7887*x7890))+((cj1*cj2))+(((-1.0)*r02*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7893=((1.0)*cj5);
CheckValue<IkReal> x7894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7893))+(((-1.0)*r20*sj5)))),-1);
if(!x7894.valid){
continue;
}
CheckValue<IkReal> x7895 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7894.value)))+(x7895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7896=IKsin(j4);
IkReal x7897=IKcos(j4);
IkReal x7898=(cj5*r10);
IkReal x7899=(r01*sj5);
IkReal x7900=(cj5*r00);
IkReal x7901=(cj5*r20);
IkReal x7902=((1.0)*x7897);
IkReal x7903=((1.0)*x7896);
IkReal x7904=(sj5*x7896);
evalcond[0]=(((r21*x7904))+(((-1.0)*r22*x7902))+(((-1.0)*x7901*x7903)));
evalcond[1]=(((x7896*x7899))+(((-1.0)*x7900*x7903))+(((-1.0)*r02*x7902)));
evalcond[2]=((((-1.0)*r12*x7903))+(((-1.0)*r11*sj5*x7902))+((x7897*x7898)));
evalcond[3]=((-1.0)+(((-1.0)*x7898*x7903))+(((-1.0)*r12*x7902))+((r11*x7904)));
evalcond[4]=(((x7897*x7901))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7903))+(((-1.0)*r21*sj5*x7902)));
evalcond[5]=(((x7897*x7900))+(((-1.0)*x7899*x7902))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x7903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(cj5*r10);
IkReal x7910=(r01*sj5);
IkReal x7911=(cj5*r00);
IkReal x7912=(cj5*r20);
IkReal x7913=((1.0)*x7908);
IkReal x7914=((1.0)*x7907);
IkReal x7915=(sj5*x7907);
evalcond[0]=(((r21*x7915))+(((-1.0)*r22*x7913))+(((-1.0)*x7912*x7914)));
evalcond[1]=((((-1.0)*r02*x7913))+(((-1.0)*x7911*x7914))+((x7907*x7910)));
evalcond[2]=(((x7908*x7909))+(((-1.0)*r11*sj5*x7913))+(((-1.0)*r12*x7914)));
evalcond[3]=((-1.0)+((r11*x7915))+(((-1.0)*r12*x7913))+(((-1.0)*x7909*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7914))+(((-1.0)*r21*sj5*x7913))+((x7908*x7912)));
evalcond[5]=((((-1.0)*r02*x7914))+(((-1.0)*sj1*sj2))+(((-1.0)*x7910*x7913))+((x7908*x7911))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7916=((-1.0)*r00);
IkReal x7918 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7918)==0){
continue;
}
IkReal x7917=pow(x7918,-0.5);
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7916),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7919.value));
IkReal gconst145=(r01*x7917);
IkReal gconst146=(x7916*x7917);
CheckValue<IkReal> x7920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7920.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7921=((-1.0)*r00);
IkReal x7922=x7917;
CheckValue<IkReal> x7924 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7921),IKFAST_ATAN2_MAGTHRESH);
if(!x7924.valid){
continue;
}
IkReal x7923=((-1.0)*(x7924.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7923;
IkReal gconst144=x7923;
IkReal gconst145=(r01*x7922);
IkReal gconst146=(x7921*x7922);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7925=((1.0)*sj0);
IkReal x7926=((1.0)*gconst145);
CheckValue<IkReal> x7927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7926))+(((-1.0)*gconst146*r21)))),-1);
if(!x7927.valid){
continue;
}
CheckValue<IkReal> x7928 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7925)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7925))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7927.value)))+(x7928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7929=IKsin(j4);
IkReal x7930=IKcos(j4);
IkReal x7931=(gconst146*r10);
IkReal x7932=(sj1*sj2);
IkReal x7933=(gconst146*r20);
IkReal x7934=(gconst146*r00);
IkReal x7935=((1.0)*x7930);
IkReal x7936=((1.0)*x7929);
IkReal x7937=(gconst145*x7929);
IkReal x7938=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7937))+(((-1.0)*r22*x7935))+(((-1.0)*x7933*x7936)));
evalcond[1]=(cj0+(((-1.0)*r12*x7935))+((r11*x7937))+(((-1.0)*x7931*x7936)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7934*x7936))+(((-1.0)*r02*x7935))+((r01*x7937)));
evalcond[3]=(((cj2*sj1))+((x7930*x7933))+(((-1.0)*r22*x7936))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7935)));
evalcond[4]=(((x7930*x7934))+((cj0*x7932))+(((-1.0)*gconst145*r01*x7935))+(((-1.0)*cj0*x7938))+(((-1.0)*r02*x7936)));
evalcond[5]=(((sj0*x7932))+((x7930*x7931))+(((-1.0)*r12*x7936))+(((-1.0)*sj0*x7938))+(((-1.0)*gconst145*r11*x7935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7939=((1.0)*gconst146);
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7939))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
CheckValue<IkReal> x7941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7939))+(((-1.0)*gconst145*r10)))),-1);
if(!x7941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7940.value)+(((1.5707963267949)*(x7941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7942=IKsin(j4);
IkReal x7943=IKcos(j4);
IkReal x7944=(gconst146*r10);
IkReal x7945=(sj1*sj2);
IkReal x7946=(gconst146*r20);
IkReal x7947=(gconst146*r00);
IkReal x7948=((1.0)*x7943);
IkReal x7949=((1.0)*x7942);
IkReal x7950=(gconst145*x7942);
IkReal x7951=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7948))+(((-1.0)*x7946*x7949))+((r21*x7950)));
evalcond[1]=(cj0+((r11*x7950))+(((-1.0)*r12*x7948))+(((-1.0)*x7944*x7949)));
evalcond[2]=(((r01*x7950))+(((-1.0)*sj0))+(((-1.0)*r02*x7948))+(((-1.0)*x7947*x7949)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7949))+((cj1*sj2))+((x7943*x7946))+(((-1.0)*gconst145*r21*x7948)));
evalcond[4]=(((cj0*x7945))+(((-1.0)*gconst145*r01*x7948))+(((-1.0)*r02*x7949))+(((-1.0)*cj0*x7951))+((x7943*x7947)));
evalcond[5]=(((sj0*x7945))+(((-1.0)*r12*x7949))+((x7943*x7944))+(((-1.0)*sj0*x7951))+(((-1.0)*gconst145*r11*x7948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7952=((-1.0)*r01);
IkReal x7954 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7954)==0){
continue;
}
IkReal x7953=pow(x7954,-0.5);
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(x7952),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7955.value))));
IkReal gconst148=(x7952*x7953);
IkReal gconst149=((1.0)*r00*x7953);
CheckValue<IkReal> x7956 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7957=((-1.0)*r01);
CheckValue<IkReal> x7960 = IKatan2WithCheck(IkReal(x7957),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7960.valid){
continue;
}
IkReal x7958=((1.0)*(x7960.value));
IkReal x7959=x7953;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7958)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7958)));
IkReal gconst148=(x7957*x7959);
IkReal gconst149=((1.0)*r00*x7959);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7961=((-1.0)*r01);
CheckValue<IkReal> x7964 = IKatan2WithCheck(IkReal(x7961),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7964.valid){
continue;
}
IkReal x7962=((1.0)*(x7964.value));
IkReal x7963=x7953;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7962)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7962)));
IkReal gconst148=(x7961*x7963);
IkReal gconst149=((1.0)*r00*x7963);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7965=((-1.0)*r01);
CheckValue<IkReal> x7968 = IKatan2WithCheck(IkReal(x7965),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7968.valid){
continue;
}
IkReal x7966=((1.0)*(x7968.value));
IkReal x7967=x7953;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7966)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7966)));
IkReal gconst148=(x7965*x7967);
IkReal gconst149=((1.0)*r00*x7967);
IkReal x7969=r02*r02;
IkReal x7970=(r12*sj0);
IkReal x7971=((1.0)*cj0);
IkReal x7972=x7953;
j4eval[0]=((IKabs((((r02*x7970*x7972))+((cj0*x7969*x7972))+(((-1.0)*x7971*x7972)))))+(IKabs(((((-1.0)*x7970))+(((-1.0)*r02*x7971))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7973=((1.0)*sj0);
IkReal x7974=((1.0)*gconst148);
CheckValue<IkReal> x7975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7974)))),-1);
if(!x7975.valid){
continue;
}
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7973)))),IkReal(((((-1.0)*cj0*r01*x7974))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7975.value)))+(x7976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7977=IKsin(j4);
IkReal x7978=IKcos(j4);
IkReal x7979=(gconst148*r11);
IkReal x7980=(sj1*sj2);
IkReal x7981=((1.0)*x7978);
IkReal x7982=(gconst149*x7978);
IkReal x7983=(gconst148*x7977);
IkReal x7984=((1.0)*cj1*cj2);
IkReal x7985=((1.0)*x7977);
evalcond[0]=((((-1.0)*r22*x7981))+(((-1.0)*gconst149*r20*x7985))+((r21*x7983)));
evalcond[1]=((((-1.0)*r12*x7981))+cj0+(((-1.0)*gconst149*r10*x7985))+((x7977*x7979)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7983))+(((-1.0)*gconst149*r00*x7985))+(((-1.0)*r02*x7981)));
evalcond[3]=((((-1.0)*r22*x7985))+((cj2*sj1))+((r20*x7982))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7981)));
evalcond[4]=((((-1.0)*gconst148*r01*x7981))+((r00*x7982))+((cj0*x7980))+(((-1.0)*cj0*x7984))+(((-1.0)*r02*x7985)));
evalcond[5]=((((-1.0)*r12*x7985))+(((-1.0)*x7979*x7981))+((sj0*x7980))+(((-1.0)*sj0*x7984))+((r10*x7982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7986=((1.0)*gconst149);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7986))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
CheckValue<IkReal> x7988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7986))+(((-1.0)*gconst148*r10)))),-1);
if(!x7988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7987.value)+(((1.5707963267949)*(x7988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7989=IKsin(j4);
IkReal x7990=IKcos(j4);
IkReal x7991=(gconst148*r11);
IkReal x7992=(sj1*sj2);
IkReal x7993=((1.0)*x7990);
IkReal x7994=(gconst149*x7990);
IkReal x7995=(gconst148*x7989);
IkReal x7996=((1.0)*cj1*cj2);
IkReal x7997=((1.0)*x7989);
evalcond[0]=((((-1.0)*gconst149*r20*x7997))+((r21*x7995))+(((-1.0)*r22*x7993)));
evalcond[1]=((((-1.0)*r12*x7993))+cj0+(((-1.0)*gconst149*r10*x7997))+((x7989*x7991)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7995))+(((-1.0)*r02*x7993))+(((-1.0)*gconst149*r00*x7997)));
evalcond[3]=(((r20*x7994))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7993))+(((-1.0)*r22*x7997)));
evalcond[4]=((((-1.0)*gconst148*r01*x7993))+((r00*x7994))+((cj0*x7992))+(((-1.0)*cj0*x7996))+(((-1.0)*r02*x7997)));
evalcond[5]=((((-1.0)*x7991*x7993))+((r10*x7994))+(((-1.0)*r12*x7997))+((sj0*x7992))+(((-1.0)*sj0*x7996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7998=((1.0)*gconst149);
CheckValue<IkReal> x7999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7998))+(((-1.0)*gconst148*r00)))),-1);
if(!x7999.valid){
continue;
}
CheckValue<IkReal> x8000 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7998))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7999.value)))+(x8000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8001=IKsin(j4);
IkReal x8002=IKcos(j4);
IkReal x8003=(gconst148*r11);
IkReal x8004=(sj1*sj2);
IkReal x8005=((1.0)*x8002);
IkReal x8006=(gconst149*x8002);
IkReal x8007=(gconst148*x8001);
IkReal x8008=((1.0)*cj1*cj2);
IkReal x8009=((1.0)*x8001);
evalcond[0]=(((r21*x8007))+(((-1.0)*gconst149*r20*x8009))+(((-1.0)*r22*x8005)));
evalcond[1]=(((x8001*x8003))+cj0+(((-1.0)*r12*x8005))+(((-1.0)*gconst149*r10*x8009)));
evalcond[2]=(((r01*x8007))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8009))+(((-1.0)*r02*x8005)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8005))+((cj1*sj2))+((r20*x8006))+(((-1.0)*r22*x8009)));
evalcond[4]=(((r00*x8006))+(((-1.0)*cj0*x8008))+((cj0*x8004))+(((-1.0)*gconst148*r01*x8005))+(((-1.0)*r02*x8009)));
evalcond[5]=(((sj0*x8004))+(((-1.0)*r12*x8009))+(((-1.0)*sj0*x8008))+(((-1.0)*x8003*x8005))+((r10*x8006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8010=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8010;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8011=((1.0)*cj5);
IkReal x8012=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8011)));
j4eval[0]=x8012;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8011)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8013=cj5*cj5;
IkReal x8014=r01*r01;
IkReal x8015=(r01*sj5);
IkReal x8016=(cj5*r00);
IkReal x8017=((((-1.0)*x8013*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8013*x8014))+(((-1.0)*x8014))+(((2.0)*x8015*x8016)));
j4eval[0]=x8017;
j4eval[1]=IKsign(x8017);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8015))+x8016))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8018=cj5*cj5;
IkReal x8019=r01*r01;
IkReal x8020=(r01*sj5);
IkReal x8021=(cj5*r00);
CheckValue<IkReal> x8022 = IKatan2WithCheck(IkReal(((((-1.0)*x8020))+x8021)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8022.valid){
continue;
}
CheckValue<IkReal> x8023=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8018*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x8020*x8021))+((x8018*x8019))+(((-1.0)*x8019)))),-1);
if(!x8023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8022.value)+(((1.5707963267949)*(x8023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8024=IKsin(j4);
IkReal x8025=IKcos(j4);
IkReal x8026=(cj5*r10);
IkReal x8027=(r01*sj5);
IkReal x8028=(cj5*r00);
IkReal x8029=(cj5*r20);
IkReal x8030=((1.0)*x8025);
IkReal x8031=((1.0)*x8024);
IkReal x8032=(sj5*x8024);
evalcond[0]=(((r21*x8032))+(((-1.0)*r22*x8030))+(((-1.0)*x8029*x8031)));
evalcond[1]=((((-1.0)*r12*x8030))+(((-1.0)*x8026*x8031))+((r11*x8032)));
evalcond[2]=(((x8025*x8028))+(((-1.0)*r02*x8031))+(((-1.0)*x8027*x8030)));
evalcond[3]=((-1.0)+(((-1.0)*x8028*x8031))+((x8024*x8027))+(((-1.0)*r02*x8030)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8025*x8029))+(((-1.0)*r21*sj5*x8030))+(((-1.0)*r22*x8031)));
evalcond[5]=((((-1.0)*r12*x8031))+((x8025*x8026))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8033=((1.0)*cj5);
CheckValue<IkReal> x8034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8033))+(((-1.0)*r10*sj5)))),-1);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8034.value)))+(x8035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8036=IKsin(j4);
IkReal x8037=IKcos(j4);
IkReal x8038=(cj5*r10);
IkReal x8039=(r01*sj5);
IkReal x8040=(cj5*r00);
IkReal x8041=(cj5*r20);
IkReal x8042=((1.0)*x8037);
IkReal x8043=((1.0)*x8036);
IkReal x8044=(sj5*x8036);
evalcond[0]=((((-1.0)*x8041*x8043))+((r21*x8044))+(((-1.0)*r22*x8042)));
evalcond[1]=(((r11*x8044))+(((-1.0)*x8038*x8043))+(((-1.0)*r12*x8042)));
evalcond[2]=(((x8037*x8040))+(((-1.0)*r02*x8043))+(((-1.0)*x8039*x8042)));
evalcond[3]=((-1.0)+(((-1.0)*x8040*x8043))+(((-1.0)*r02*x8042))+((x8036*x8039)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8037*x8041))+(((-1.0)*r21*sj5*x8042))+(((-1.0)*r22*x8043)));
evalcond[5]=(((x8037*x8038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8042))+(((-1.0)*r12*x8043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8045=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8045.valid){
continue;
}
CheckValue<IkReal> x8046 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8045.value)))+(x8046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8047=IKsin(j4);
IkReal x8048=IKcos(j4);
IkReal x8049=(cj5*r10);
IkReal x8050=(r01*sj5);
IkReal x8051=(cj5*r00);
IkReal x8052=(cj5*r20);
IkReal x8053=((1.0)*x8048);
IkReal x8054=((1.0)*x8047);
IkReal x8055=(sj5*x8047);
evalcond[0]=((((-1.0)*x8052*x8054))+(((-1.0)*r22*x8053))+((r21*x8055)));
evalcond[1]=((((-1.0)*r12*x8053))+((r11*x8055))+(((-1.0)*x8049*x8054)));
evalcond[2]=((((-1.0)*x8050*x8053))+(((-1.0)*r02*x8054))+((x8048*x8051)));
evalcond[3]=((-1.0)+((x8047*x8050))+(((-1.0)*x8051*x8054))+(((-1.0)*r02*x8053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8053))+(((-1.0)*r22*x8054))+((x8048*x8052)));
evalcond[5]=((((-1.0)*r12*x8054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8053))+((x8048*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8056=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8056;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8057=((1.0)*cj5);
IkReal x8058=((((-1.0)*r21*x8057))+(((-1.0)*r20*sj5)));
j4eval[0]=x8058;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8057))))));
j4eval[2]=IKsign(x8058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8059=cj5*cj5;
IkReal x8060=r01*r01;
IkReal x8061=(cj5*r00);
IkReal x8062=(r01*sj5);
IkReal x8063=((((-2.0)*x8061*x8062))+x8060+(r02*r02)+(((-1.0)*x8059*x8060))+((x8059*(r00*r00))));
j4eval[0]=x8063;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8062))+x8061))));
j4eval[2]=IKsign(x8063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8064=cj5*cj5;
IkReal x8065=r01*r01;
IkReal x8066=(r01*sj5);
IkReal x8067=(cj5*r00);
CheckValue<IkReal> x8068 = IKatan2WithCheck(IkReal(((((-1.0)*x8066))+x8067)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8068.valid){
continue;
}
CheckValue<IkReal> x8069=IKPowWithIntegerCheck(IKsign((((x8064*(r00*r00)))+(((-1.0)*x8064*x8065))+x8065+(r02*r02)+(((-2.0)*x8066*x8067)))),-1);
if(!x8069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8068.value)+(((1.5707963267949)*(x8069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8070=IKsin(j4);
IkReal x8071=IKcos(j4);
IkReal x8072=(cj5*r10);
IkReal x8073=(r01*sj5);
IkReal x8074=(cj5*r00);
IkReal x8075=(cj5*r20);
IkReal x8076=((1.0)*x8071);
IkReal x8077=((1.0)*x8070);
IkReal x8078=(sj5*x8070);
evalcond[0]=((((-1.0)*x8075*x8077))+((r21*x8078))+(((-1.0)*r22*x8076)));
evalcond[1]=((((-1.0)*x8072*x8077))+((r11*x8078))+(((-1.0)*r12*x8076)));
evalcond[2]=((((-1.0)*r02*x8077))+(((-1.0)*x8073*x8076))+((x8071*x8074)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8076))+(((-1.0)*x8074*x8077))+((x8070*x8073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8076))+((x8071*x8075))+(((-1.0)*r22*x8077)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8076))+((x8071*x8072))+((cj1*cj2))+(((-1.0)*r12*x8077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8079=((1.0)*cj5);
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
CheckValue<IkReal> x8081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8079))+(((-1.0)*r20*sj5)))),-1);
if(!x8081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8080.value)+(((1.5707963267949)*(x8081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8082=IKsin(j4);
IkReal x8083=IKcos(j4);
IkReal x8084=(cj5*r10);
IkReal x8085=(r01*sj5);
IkReal x8086=(cj5*r00);
IkReal x8087=(cj5*r20);
IkReal x8088=((1.0)*x8083);
IkReal x8089=((1.0)*x8082);
IkReal x8090=(sj5*x8082);
evalcond[0]=((((-1.0)*x8087*x8089))+(((-1.0)*r22*x8088))+((r21*x8090)));
evalcond[1]=(((r11*x8090))+(((-1.0)*r12*x8088))+(((-1.0)*x8084*x8089)));
evalcond[2]=((((-1.0)*r02*x8089))+((x8083*x8086))+(((-1.0)*x8085*x8088)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8088))+(((-1.0)*x8086*x8089))+((x8082*x8085)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8088))+((cj1*sj2))+(((-1.0)*r22*x8089))+((x8083*x8087)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8088))+((cj1*cj2))+((x8083*x8084))+(((-1.0)*r12*x8089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8091 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8091.valid){
continue;
}
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8091.value)+(((1.5707963267949)*(x8092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8093=IKsin(j4);
IkReal x8094=IKcos(j4);
IkReal x8095=(cj5*r10);
IkReal x8096=(r01*sj5);
IkReal x8097=(cj5*r00);
IkReal x8098=(cj5*r20);
IkReal x8099=((1.0)*x8094);
IkReal x8100=((1.0)*x8093);
IkReal x8101=(sj5*x8093);
evalcond[0]=((((-1.0)*x8098*x8100))+(((-1.0)*r22*x8099))+((r21*x8101)));
evalcond[1]=(((r11*x8101))+(((-1.0)*x8095*x8100))+(((-1.0)*r12*x8099)));
evalcond[2]=((((-1.0)*r02*x8100))+((x8094*x8097))+(((-1.0)*x8096*x8099)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8099))+((x8093*x8096))+(((-1.0)*x8097*x8100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8099))+((cj1*sj2))+(((-1.0)*r22*x8100))+((x8094*x8098)));
evalcond[5]=((((-1.0)*r11*sj5*x8099))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8094*x8095))+(((-1.0)*r12*x8100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8102=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8102);
rxp1_1=(px*r21);
rxp1_2=(r11*x8102);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8103=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8103);
rxp1_1=(px*r21);
rxp1_2=(r11*x8103);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8104=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8104);
rxp1_1=(px*r21);
rxp1_2=(r11*x8104);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8107=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8107.valid){
continue;
}
IkReal x8105=x8107.value;
IkReal x8106=(sj0*x8105);
cj4array[0]=(((cj1*cj2*x8106))+(((-1.0)*sj1*sj2*x8106)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8108=IKsin(j4);
IkReal x8109=IKcos(j4);
IkReal x8110=(r21*sj5);
IkReal x8111=(cj5*r20);
IkReal x8112=((1.0)*x8108);
IkReal x8113=((1.0)*x8109);
evalcond[0]=((-1.0)*r02*x8108);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8113)));
evalcond[2]=((((-1.0)*x8111*x8112))+((x8108*x8110)));
evalcond[3]=(((r11*sj5*x8108))+(((-1.0)*cj5*r10*x8112)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8110*x8113))+((cj1*sj2))+((x8109*x8111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8116=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8116.valid){
continue;
}
IkReal x8114=x8116.value;
IkReal x8115=((1.0)*x8114);
cj4array[0]=((((-1.0)*cj2*sj1*x8115))+(((-1.0)*cj1*sj2*x8115)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(r11*sj5);
IkReal x8120=((1.0)*sj0);
IkReal x8121=((1.0)*x8118);
IkReal x8122=((1.0)*cj5*x8117);
evalcond[0]=((-1.0)*r02*x8117);
evalcond[1]=((((-1.0)*x8120))+(((-1.0)*r02*x8121)));
evalcond[2]=((((-1.0)*r20*x8122))+((r21*sj5*x8117)));
evalcond[3]=(((x8117*x8119))+(((-1.0)*r10*x8122)));
evalcond[4]=(((cj5*r10*x8118))+(((-1.0)*cj1*cj2*x8120))+((sj0*sj1*sj2))+(((-1.0)*x8119*x8121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8123=IKPowWithIntegerCheck(r02,-1);
if(!x8123.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8123.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8124=IKsin(j4);
IkReal x8125=IKcos(j4);
IkReal x8126=(cj5*x8125);
IkReal x8127=(sj5*x8124);
IkReal x8128=((1.0)*sj5*x8125);
IkReal x8129=((1.0)*cj5*x8124);
evalcond[0]=((-1.0)*r02*x8124);
evalcond[1]=((((-1.0)*r20*x8129))+((r21*x8127)));
evalcond[2]=(((r11*x8127))+(((-1.0)*r10*x8129)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8128))+((cj1*sj2))+((r20*x8126)));
evalcond[4]=((((-1.0)*r11*x8128))+(((-1.0)*cj1*cj2*sj0))+((r10*x8126))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8130=((1.0)*sj0);
IkReal x8131=((1.0)*cj0);
CheckValue<IkReal> x8132 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8131))+(((-1.0)*r12*x8130)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8131))+(((-1.0)*r11*sj5*x8130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8132.valid){
continue;
}
CheckValue<IkReal> x8133=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8132.value)+(((1.5707963267949)*(x8133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8134=IKsin(j4);
IkReal x8135=IKcos(j4);
IkReal x8136=(cj5*r10);
IkReal x8137=(sj1*sj2);
IkReal x8138=(r01*sj5);
IkReal x8139=(cj5*r00);
IkReal x8140=(cj5*r20);
IkReal x8141=((1.0)*x8135);
IkReal x8142=((1.0)*cj1*cj2);
IkReal x8143=((1.0)*x8134);
IkReal x8144=(sj5*x8134);
evalcond[0]=((((-1.0)*x8140*x8143))+(((-1.0)*r22*x8141))+((r21*x8144)));
evalcond[1]=(cj0+(((-1.0)*x8136*x8143))+((r11*x8144))+(((-1.0)*r12*x8141)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8139*x8143))+((x8134*x8138))+(((-1.0)*r02*x8141)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8143))+(((-1.0)*r21*sj5*x8141))+((x8135*x8140)));
evalcond[4]=((((-1.0)*cj0*x8142))+((x8135*x8139))+(((-1.0)*x8138*x8141))+(((-1.0)*r02*x8143))+((cj0*x8137)));
evalcond[5]=((((-1.0)*r11*sj5*x8141))+((x8135*x8136))+(((-1.0)*sj0*x8142))+(((-1.0)*r12*x8143))+((sj0*x8137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8145=((1.0)*cj5);
CheckValue<IkReal> x8146 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8145))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8146.valid){
continue;
}
CheckValue<IkReal> x8147=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8145)))),-1);
if(!x8147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8146.value)+(((1.5707963267949)*(x8147.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8148=IKsin(j4);
IkReal x8149=IKcos(j4);
IkReal x8150=(cj5*r10);
IkReal x8151=(sj1*sj2);
IkReal x8152=(r01*sj5);
IkReal x8153=(cj5*r00);
IkReal x8154=(cj5*r20);
IkReal x8155=((1.0)*x8149);
IkReal x8156=((1.0)*cj1*cj2);
IkReal x8157=((1.0)*x8148);
IkReal x8158=(sj5*x8148);
evalcond[0]=((((-1.0)*r22*x8155))+((r21*x8158))+(((-1.0)*x8154*x8157)));
evalcond[1]=(cj0+(((-1.0)*x8150*x8157))+((r11*x8158))+(((-1.0)*r12*x8155)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8153*x8157))+((x8148*x8152))+(((-1.0)*r02*x8155)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8149*x8154))+(((-1.0)*r21*sj5*x8155))+(((-1.0)*r22*x8157)));
evalcond[4]=((((-1.0)*cj0*x8156))+((cj0*x8151))+(((-1.0)*r02*x8157))+((x8149*x8153))+(((-1.0)*x8152*x8155)));
evalcond[5]=(((sj0*x8151))+(((-1.0)*sj0*x8156))+(((-1.0)*r11*sj5*x8155))+((x8149*x8150))+(((-1.0)*r12*x8157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8159=((1.0)*cj5);
CheckValue<IkReal> x8160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8159)))),-1);
if(!x8160.valid){
continue;
}
CheckValue<IkReal> x8161 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8159))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8160.value)))+(x8161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8162=IKsin(j4);
IkReal x8163=IKcos(j4);
IkReal x8164=(cj5*r10);
IkReal x8165=(sj1*sj2);
IkReal x8166=(r01*sj5);
IkReal x8167=(cj5*r00);
IkReal x8168=(cj5*r20);
IkReal x8169=((1.0)*x8163);
IkReal x8170=((1.0)*cj1*cj2);
IkReal x8171=((1.0)*x8162);
IkReal x8172=(sj5*x8162);
evalcond[0]=((((-1.0)*x8168*x8171))+((r21*x8172))+(((-1.0)*r22*x8169)));
evalcond[1]=(cj0+(((-1.0)*x8164*x8171))+((r11*x8172))+(((-1.0)*r12*x8169)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8169))+((x8162*x8166))+(((-1.0)*x8167*x8171)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8169))+((x8163*x8168))+((cj1*sj2))+(((-1.0)*r22*x8171)));
evalcond[4]=(((cj0*x8165))+(((-1.0)*x8166*x8169))+((x8163*x8167))+(((-1.0)*cj0*x8170))+(((-1.0)*r02*x8171)));
evalcond[5]=((((-1.0)*sj0*x8170))+(((-1.0)*r12*x8171))+((x8163*x8164))+((sj0*x8165))+(((-1.0)*r11*sj5*x8169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8173=cj5*cj5;
IkReal x8174=r21*r21;
IkReal x8175=(cj2*sj1);
IkReal x8176=(cj1*sj2);
IkReal x8177=(r21*sj5);
IkReal x8178=((1.0)*cj5*r20);
CheckValue<IkReal> x8179=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*cj5*r20*x8177))+(((-1.0)*x8173*x8174))+x8174+((x8173*(r20*r20))))),-1);
if(!x8179.valid){
continue;
}
CheckValue<IkReal> x8180 = IKatan2WithCheck(IkReal((((r22*x8175))+((r22*x8176)))),IkReal(((((-1.0)*x8176*x8178))+(((-1.0)*x8175*x8178))+((x8176*x8177))+((x8175*x8177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8179.value)))+(x8180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8181=IKsin(j4);
IkReal x8182=IKcos(j4);
IkReal x8183=(r21*sj5);
IkReal x8184=(cj5*r20);
IkReal x8185=((1.0)*x8182);
IkReal x8186=((1.0)*x8181);
evalcond[0]=((((-1.0)*r22*x8185))+(((-1.0)*x8184*x8186))+((x8181*x8183)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x8186))+((cj1*sj2))+(((-1.0)*x8183*x8185))+((x8182*x8184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8187=(cj5*sj4);
IkReal x8188=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8188))+(((-1.0)*r00*x8187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8187))+(((-1.0)*r11*x8188))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8188))+(((-1.0)*r00*x8187))))+IKsqr((((r10*x8187))+(((-1.0)*r11*x8188))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8188))+(((-1.0)*r00*x8187))), (((r10*x8187))+(((-1.0)*r11*x8188))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8189=IKcos(j0);
IkReal x8190=IKsin(j0);
IkReal x8191=(cj4*cj5);
IkReal x8192=(cj5*r01);
IkReal x8193=(r11*sj5);
IkReal x8194=((1.0)*sj5);
IkReal x8195=((1.0)*cj5);
IkReal x8196=((0.1157)*sj5);
IkReal x8197=((1.0)*sj4);
IkReal x8198=((1.0)*cj2);
IkReal x8199=((0.5723)*sj2);
IkReal x8200=((1.0)*cj4);
IkReal x8201=((0.5723)*cj2);
IkReal x8202=((1.0)*cj1*sj2);
IkReal x8203=(sj1*x8189);
IkReal x8204=(cj1*x8189);
IkReal x8205=(cj1*x8190);
IkReal x8206=(sj1*x8190);
evalcond[0]=((((-1.0)*r12*x8200))+((sj4*x8193))+x8189+(((-1.0)*r10*sj4*x8195)));
evalcond[1]=((((-1.0)*x8190))+(((-1.0)*r00*sj4*x8195))+(((-1.0)*r02*x8200))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*x8198*x8203))+(((-1.0)*r00*x8194))+(((-1.0)*x8192))+(((-1.0)*x8189*x8202)));
evalcond[3]=((((-1.0)*x8198*x8206))+(((-1.0)*x8190*x8202))+(((-1.0)*r10*x8194))+(((-1.0)*r11*x8195)));
evalcond[4]=((((-1.0)*r02*x8197))+(((-1.0)*x8198*x8204))+((r00*x8191))+((sj2*x8203))+(((-1.0)*cj4*r01*x8194)));
evalcond[5]=(((r10*x8191))+(((-1.0)*x8198*x8205))+((sj2*x8206))+(((-1.0)*x8193*x8200))+(((-1.0)*r12*x8197)));
evalcond[6]=((((-1.0)*r00*x8196))+(((-0.163941)*x8190))+(((-0.1157)*x8192))+((x8201*x8204))+(((-1.0)*px))+(((0.612)*x8204))+(((-1.0)*x8199*x8203)));
evalcond[7]=((((0.163941)*x8189))+(((-1.0)*r10*x8196))+((x8201*x8205))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+(((0.612)*x8205))+(((-1.0)*x8199*x8206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8207 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8207.valid){
continue;
}
CheckValue<IkReal> x8208=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8208.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8207.value)+(((1.5707963267949)*(x8208.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8209=IKcos(j0);
IkReal x8210=IKsin(j0);
IkReal x8211=(cj5*r01);
IkReal x8212=((1.0)*sj5);
IkReal x8213=(cj5*r11);
IkReal x8214=((0.1157)*sj5);
IkReal x8215=((1.0)*sj1);
IkReal x8216=((1.0)*cj1*sj2);
IkReal x8217=((0.5723)*sj1*sj2);
IkReal x8218=(cj2*x8209);
IkReal x8219=(cj1*x8210);
evalcond[0]=((((-1.0)*r00*x8212))+(((-1.0)*x8209*x8216))+(((-1.0)*x8211))+(((-1.0)*x8215*x8218)));
evalcond[1]=((((-1.0)*cj2*x8210*x8215))+(((-1.0)*x8210*x8216))+(((-1.0)*x8213))+(((-1.0)*r10*x8212)));
evalcond[2]=((((-1.0)*r00*x8214))+(((-1.0)*x8209*x8217))+(((0.5723)*cj1*x8218))+(((-0.163941)*x8210))+(((-1.0)*px))+(((0.612)*cj1*x8209))+(((-0.1157)*x8211)));
evalcond[3]=((((0.163941)*x8209))+(((0.5723)*cj2*x8219))+(((-1.0)*x8210*x8217))+(((-1.0)*py))+(((0.612)*x8219))+(((-0.1157)*x8213))+(((-1.0)*r10*x8214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8220=((1.0)*cj5);
IkReal x8221=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8220)));
j4eval[0]=x8221;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8220))))));
j4eval[2]=IKsign(x8221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8222=((1.0)*cj5);
IkReal x8223=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8222)));
j4eval[0]=x8223;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8222))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8224=((1.0)*sj0);
IkReal x8225=((1.0)*cj0);
IkReal x8226=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8226;
j4eval[1]=((IKabs(((((-1.0)*r02*x8225))+(((-1.0)*r12*x8224)))))+(IKabs(((((-1.0)*r11*sj5*x8224))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8225))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x8226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8227=((-1.0)*r20);
IkReal x8229 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8229)==0){
continue;
}
IkReal x8228=pow(x8229,-0.5);
CheckValue<IkReal> x8230 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8227),IKFAST_ATAN2_MAGTHRESH);
if(!x8230.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8230.value));
IkReal gconst133=(r21*x8228);
IkReal gconst134=(x8227*x8228);
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8231.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8232=((-1.0)*r20);
IkReal x8233=x8228;
CheckValue<IkReal> x8235 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8232),IKFAST_ATAN2_MAGTHRESH);
if(!x8235.valid){
continue;
}
IkReal x8234=((-1.0)*(x8235.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8234;
IkReal gconst132=x8234;
IkReal gconst133=(r21*x8233);
IkReal gconst134=(x8232*x8233);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8236=((-1.0)*r20);
IkReal x8237=x8228;
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8236),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
IkReal x8238=((-1.0)*(x8239.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8238;
IkReal gconst132=x8238;
IkReal gconst133=(r21*x8237);
IkReal gconst134=(x8236*x8237);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8240=((-1.0)*r20);
IkReal x8241=x8228;
CheckValue<IkReal> x8243 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8240),IKFAST_ATAN2_MAGTHRESH);
if(!x8243.valid){
continue;
}
IkReal x8242=((-1.0)*(x8243.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8242;
IkReal gconst132=x8242;
IkReal gconst133=(r21*x8241);
IkReal gconst134=(x8240*x8241);
IkReal x8244=r22*r22;
CheckValue<IkReal> x8247=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8244))),-1);
if(!x8247.valid){
continue;
}
IkReal x8245=x8247.value;
IkReal x8246=(((x8245*(r20*r20*r20*r20)))+(((2.0)*x8245*(r20*r20)*(r21*r21)))+((x8245*(r21*r21*r21*r21)))+x8244);
j4eval[0]=x8246;
j4eval[1]=IKsign(x8246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8248=(gconst133*r21);
IkReal x8249=(cj1*sj2);
IkReal x8250=(gconst134*r20);
IkReal x8251=(cj2*sj1);
CheckValue<IkReal> x8252=IKPowWithIntegerCheck(IKsign(((x8248*x8248)+(r22*r22)+(((-2.0)*x8248*x8250))+(x8250*x8250))),-1);
if(!x8252.valid){
continue;
}
CheckValue<IkReal> x8253 = IKatan2WithCheck(IkReal((((r22*x8249))+((r22*x8251)))),IkReal((((x8248*x8249))+(((-1.0)*x8249*x8250))+(((-1.0)*x8250*x8251))+((x8248*x8251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8252.value)))+(x8253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8254=IKsin(j4);
IkReal x8255=IKcos(j4);
IkReal x8256=(sj1*sj2);
IkReal x8257=(gconst133*r11);
IkReal x8258=(gconst133*r21);
IkReal x8259=(gconst133*r01);
IkReal x8260=((1.0)*x8255);
IkReal x8261=(gconst134*x8255);
IkReal x8262=((1.0)*x8254);
IkReal x8263=((1.0)*cj1*cj2);
evalcond[0]=(((x8254*x8258))+(((-1.0)*r22*x8260))+(((-1.0)*gconst134*r20*x8262)));
evalcond[1]=((((-1.0)*r12*x8260))+cj0+((x8254*x8257))+(((-1.0)*gconst134*r10*x8262)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8262))+((x8254*x8259))+(((-1.0)*r02*x8260)));
evalcond[3]=(((cj2*sj1))+((r20*x8261))+((cj1*sj2))+(((-1.0)*x8258*x8260))+(((-1.0)*r22*x8262)));
evalcond[4]=((((-1.0)*cj0*x8263))+(((-1.0)*r02*x8262))+(((-1.0)*x8259*x8260))+((cj0*x8256))+((r00*x8261)));
evalcond[5]=((((-1.0)*r12*x8262))+(((-1.0)*sj0*x8263))+((sj0*x8256))+(((-1.0)*x8257*x8260))+((r10*x8261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8264=((1.0)*gconst134);
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8264))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
CheckValue<IkReal> x8266=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8264)))),-1);
if(!x8266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8265.value)+(((1.5707963267949)*(x8266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8267=IKsin(j4);
IkReal x8268=IKcos(j4);
IkReal x8269=(sj1*sj2);
IkReal x8270=(gconst133*r11);
IkReal x8271=(gconst133*r21);
IkReal x8272=(gconst133*r01);
IkReal x8273=((1.0)*x8268);
IkReal x8274=(gconst134*x8268);
IkReal x8275=((1.0)*x8267);
IkReal x8276=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8273))+(((-1.0)*gconst134*r20*x8275))+((x8267*x8271)));
evalcond[1]=((((-1.0)*gconst134*r10*x8275))+cj0+(((-1.0)*r12*x8273))+((x8267*x8270)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8275))+(((-1.0)*r02*x8273))+((x8267*x8272)));
evalcond[3]=((((-1.0)*x8271*x8273))+((cj2*sj1))+((r20*x8274))+((cj1*sj2))+(((-1.0)*r22*x8275)));
evalcond[4]=((((-1.0)*x8272*x8273))+((cj0*x8269))+(((-1.0)*cj0*x8276))+(((-1.0)*r02*x8275))+((r00*x8274)));
evalcond[5]=((((-1.0)*sj0*x8276))+((sj0*x8269))+(((-1.0)*r12*x8275))+(((-1.0)*x8270*x8273))+((r10*x8274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8277=((1.0)*gconst134);
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8277))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
CheckValue<IkReal> x8279=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8277)))),-1);
if(!x8279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8278.value)+(((1.5707963267949)*(x8279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8280=IKsin(j4);
IkReal x8281=IKcos(j4);
IkReal x8282=(sj1*sj2);
IkReal x8283=(gconst133*r11);
IkReal x8284=(gconst133*r21);
IkReal x8285=(gconst133*r01);
IkReal x8286=((1.0)*x8281);
IkReal x8287=(gconst134*x8281);
IkReal x8288=((1.0)*x8280);
IkReal x8289=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8288))+(((-1.0)*r22*x8286))+((x8280*x8284)));
evalcond[1]=((((-1.0)*r12*x8286))+cj0+(((-1.0)*gconst134*r10*x8288))+((x8280*x8283)));
evalcond[2]=((((-1.0)*r02*x8286))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8288))+((x8280*x8285)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8287))+(((-1.0)*r22*x8288))+(((-1.0)*x8284*x8286)));
evalcond[4]=((((-1.0)*r02*x8288))+(((-1.0)*x8285*x8286))+((r00*x8287))+(((-1.0)*cj0*x8289))+((cj0*x8282)));
evalcond[5]=((((-1.0)*r12*x8288))+(((-1.0)*x8283*x8286))+((r10*x8287))+((sj0*x8282))+(((-1.0)*sj0*x8289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8290=((-1.0)*r21);
IkReal x8292 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8292)==0){
continue;
}
IkReal x8291=pow(x8292,-0.5);
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(x8290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8293.value))));
IkReal gconst136=(x8290*x8291);
IkReal gconst137=((1.0)*r20*x8291);
CheckValue<IkReal> x8294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8294.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8295=((-1.0)*r21);
CheckValue<IkReal> x8298 = IKatan2WithCheck(IkReal(x8295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8298.valid){
continue;
}
IkReal x8296=((1.0)*(x8298.value));
IkReal x8297=x8291;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8296)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8296)));
IkReal gconst136=(x8295*x8297);
IkReal gconst137=((1.0)*r20*x8297);
IkReal x8299=r22*r22;
IkReal x8300=((1.0)*x8299);
CheckValue<IkReal> x8304=IKPowWithIntegerCheck(((-1.0)+x8299),-1);
if(!x8304.valid){
continue;
}
IkReal x8301=x8304.value;
if((((1.0)+(((-1.0)*x8300)))) < -0.00001)
continue;
IkReal x8302=IKsqrt(((1.0)+(((-1.0)*x8300))));
IkReal x8303=(cj0*x8301*x8302);
j4eval[0]=((IKabs((x8303+(((-1.0)*x8300*x8303)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8305=((-1.0)*r21);
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(x8305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal x8306=((1.0)*(x8308.value));
IkReal x8307=x8291;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8306)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8306)));
IkReal gconst136=(x8305*x8307);
IkReal gconst137=((1.0)*r20*x8307);
IkReal x8309=r22*r22;
IkReal x8310=((1.0)*x8309);
CheckValue<IkReal> x8314=IKPowWithIntegerCheck(((-1.0)+x8309),-1);
if(!x8314.valid){
continue;
}
IkReal x8311=x8314.value;
if((((1.0)+(((-1.0)*x8310)))) < -0.00001)
continue;
IkReal x8312=IKsqrt(((1.0)+(((-1.0)*x8310))));
IkReal x8313=(sj0*x8311*x8312);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8313+(((-1.0)*x8310*x8313))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8315=((-1.0)*r21);
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal(x8315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
IkReal x8316=((1.0)*(x8318.value));
IkReal x8317=x8291;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8316)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8316)));
IkReal gconst136=(x8315*x8317);
IkReal gconst137=((1.0)*r20*x8317);
IkReal x8319=r22*r22;
IkReal x8320=(r12*sj0);
IkReal x8321=(cj0*r02);
CheckValue<IkReal> x8325=IKPowWithIntegerCheck(((-1.0)+x8319),-1);
if(!x8325.valid){
continue;
}
IkReal x8322=x8325.value;
if((((1.0)+(((-1.0)*x8319)))) < -0.00001)
continue;
IkReal x8323=IKsqrt(((1.0)+(((-1.0)*x8319))));
IkReal x8324=(r22*x8322*x8323);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8321))+(((-1.0)*x8320)))))+(IKabs((((x8321*x8324))+((x8320*x8324))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8326=((1.0)*sj0);
IkReal x8327=((1.0)*cj0);
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8328.valid){
continue;
}
CheckValue<IkReal> x8329 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8326))+(((-1.0)*r02*x8327)))),IkReal(((((-1.0)*gconst136*r01*x8327))+(((-1.0)*gconst136*r11*x8326))+((gconst137*r10*sj0))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8328.value)))+(x8329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8330=IKsin(j4);
IkReal x8331=IKcos(j4);
IkReal x8332=(gconst136*r01);
IkReal x8333=(gconst137*r10);
IkReal x8334=(sj1*sj2);
IkReal x8335=(gconst137*r20);
IkReal x8336=(gconst136*r11);
IkReal x8337=(gconst136*r21);
IkReal x8338=(gconst137*r00);
IkReal x8339=((1.0)*x8331);
IkReal x8340=((1.0)*cj1*cj2);
IkReal x8341=((1.0)*x8330);
evalcond[0]=(((x8330*x8337))+(((-1.0)*r22*x8339))+(((-1.0)*x8335*x8341)));
evalcond[1]=(((x8330*x8336))+cj0+(((-1.0)*x8333*x8341))+(((-1.0)*r12*x8339)));
evalcond[2]=((((-1.0)*x8338*x8341))+((x8330*x8332))+(((-1.0)*sj0))+(((-1.0)*r02*x8339)));
evalcond[3]=(((cj2*sj1))+((x8331*x8335))+((cj1*sj2))+(((-1.0)*r22*x8341))+(((-1.0)*x8337*x8339)));
evalcond[4]=((((-1.0)*x8332*x8339))+((x8331*x8338))+(((-1.0)*r02*x8341))+(((-1.0)*cj0*x8340))+((cj0*x8334)));
evalcond[5]=(((x8331*x8333))+(((-1.0)*x8336*x8339))+(((-1.0)*r12*x8341))+((sj0*x8334))+(((-1.0)*sj0*x8340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8342=((1.0)*gconst137);
CheckValue<IkReal> x8343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8342))+(((-1.0)*gconst136*r10)))),-1);
if(!x8343.valid){
continue;
}
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8343.value)))+(x8344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8345=IKsin(j4);
IkReal x8346=IKcos(j4);
IkReal x8347=(gconst136*r01);
IkReal x8348=(gconst137*r10);
IkReal x8349=(sj1*sj2);
IkReal x8350=(gconst137*r20);
IkReal x8351=(gconst136*r11);
IkReal x8352=(gconst136*r21);
IkReal x8353=(gconst137*r00);
IkReal x8354=((1.0)*x8346);
IkReal x8355=((1.0)*cj1*cj2);
IkReal x8356=((1.0)*x8345);
evalcond[0]=((((-1.0)*r22*x8354))+((x8345*x8352))+(((-1.0)*x8350*x8356)));
evalcond[1]=(cj0+(((-1.0)*r12*x8354))+((x8345*x8351))+(((-1.0)*x8348*x8356)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8354))+((x8345*x8347))+(((-1.0)*x8353*x8356)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8356))+((cj1*sj2))+(((-1.0)*x8352*x8354))+((x8346*x8350)));
evalcond[4]=((((-1.0)*r02*x8356))+(((-1.0)*cj0*x8355))+((cj0*x8349))+(((-1.0)*x8347*x8354))+((x8346*x8353)));
evalcond[5]=(((x8346*x8348))+((sj0*x8349))+(((-1.0)*r12*x8356))+(((-1.0)*sj0*x8355))+(((-1.0)*x8351*x8354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8357=((1.0)*gconst137);
CheckValue<IkReal> x8358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8357))+(((-1.0)*gconst136*r00)))),-1);
if(!x8358.valid){
continue;
}
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8357))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8358.value)))+(x8359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8360=IKsin(j4);
IkReal x8361=IKcos(j4);
IkReal x8362=(gconst136*r01);
IkReal x8363=(gconst137*r10);
IkReal x8364=(sj1*sj2);
IkReal x8365=(gconst137*r20);
IkReal x8366=(gconst136*r11);
IkReal x8367=(gconst136*r21);
IkReal x8368=(gconst137*r00);
IkReal x8369=((1.0)*x8361);
IkReal x8370=((1.0)*cj1*cj2);
IkReal x8371=((1.0)*x8360);
evalcond[0]=((((-1.0)*x8365*x8371))+(((-1.0)*r22*x8369))+((x8360*x8367)));
evalcond[1]=(cj0+(((-1.0)*r12*x8369))+((x8360*x8366))+(((-1.0)*x8363*x8371)));
evalcond[2]=((((-1.0)*x8368*x8371))+(((-1.0)*sj0))+(((-1.0)*r02*x8369))+((x8360*x8362)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8361*x8365))+(((-1.0)*r22*x8371))+(((-1.0)*x8367*x8369)));
evalcond[4]=((((-1.0)*x8362*x8369))+(((-1.0)*r02*x8371))+((x8361*x8368))+(((-1.0)*cj0*x8370))+((cj0*x8364)));
evalcond[5]=((((-1.0)*r12*x8371))+((x8361*x8363))+(((-1.0)*x8366*x8369))+((sj0*x8364))+(((-1.0)*sj0*x8370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8372=((-1.0)*r10);
IkReal x8374 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8374)==0){
continue;
}
IkReal x8373=pow(x8374,-0.5);
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8372),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8375.value));
IkReal gconst139=(r11*x8373);
IkReal gconst140=(x8372*x8373);
CheckValue<IkReal> x8376 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8376.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8376.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8377=((-1.0)*r10);
IkReal x8378=x8373;
CheckValue<IkReal> x8380 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8377),IKFAST_ATAN2_MAGTHRESH);
if(!x8380.valid){
continue;
}
IkReal x8379=((-1.0)*(x8380.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8379;
IkReal gconst138=x8379;
IkReal gconst139=(r11*x8378);
IkReal gconst140=(x8377*x8378);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8381=((1.0)*sj0);
IkReal x8382=((1.0)*gconst139);
CheckValue<IkReal> x8383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8382)))),-1);
if(!x8383.valid){
continue;
}
CheckValue<IkReal> x8384 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8381)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8381))+(((-1.0)*cj0*r01*x8382))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8383.value)))+(x8384.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8385=IKsin(j4);
IkReal x8386=IKcos(j4);
IkReal x8387=(gconst140*r00);
IkReal x8388=(sj1*sj2);
IkReal x8389=(gconst139*r11);
IkReal x8390=(gconst139*r01);
IkReal x8391=(gconst139*r21);
IkReal x8392=((1.0)*x8386);
IkReal x8393=((1.0)*x8385);
IkReal x8394=((1.0)*cj1*cj2);
IkReal x8395=(gconst140*x8386);
evalcond[0]=((((-1.0)*gconst140*r20*x8393))+(((-1.0)*r22*x8392))+((x8385*x8391)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8393))+((x8385*x8389))+(((-1.0)*r12*x8392)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8387*x8393))+(((-1.0)*r02*x8392))+((x8385*x8390)));
evalcond[3]=(((r20*x8395))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8391*x8392))+(((-1.0)*r22*x8393)));
evalcond[4]=((((-1.0)*x8390*x8392))+(((-1.0)*r02*x8393))+(((-1.0)*cj0*x8394))+((x8386*x8387))+((cj0*x8388)));
evalcond[5]=((((-1.0)*sj0*x8394))+((sj0*x8388))+((r10*x8395))+(((-1.0)*x8389*x8392))+(((-1.0)*r12*x8393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8396=((1.0)*gconst140);
CheckValue<IkReal> x8397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8396)))),-1);
if(!x8397.valid){
continue;
}
CheckValue<IkReal> x8398 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8397.value)))+(x8398.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8399=IKsin(j4);
IkReal x8400=IKcos(j4);
IkReal x8401=(gconst140*r00);
IkReal x8402=(sj1*sj2);
IkReal x8403=(gconst139*r11);
IkReal x8404=(gconst139*r01);
IkReal x8405=(gconst139*r21);
IkReal x8406=((1.0)*x8400);
IkReal x8407=((1.0)*x8399);
IkReal x8408=((1.0)*cj1*cj2);
IkReal x8409=(gconst140*x8400);
evalcond[0]=(((x8399*x8405))+(((-1.0)*r22*x8406))+(((-1.0)*gconst140*r20*x8407)));
evalcond[1]=(cj0+((x8399*x8403))+(((-1.0)*gconst140*r10*x8407))+(((-1.0)*r12*x8406)));
evalcond[2]=((((-1.0)*sj0))+((x8399*x8404))+(((-1.0)*r02*x8406))+(((-1.0)*x8401*x8407)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8405*x8406))+((cj1*sj2))+(((-1.0)*r22*x8407))+((r20*x8409)));
evalcond[4]=((((-1.0)*cj0*x8408))+(((-1.0)*r02*x8407))+(((-1.0)*x8404*x8406))+((x8400*x8401))+((cj0*x8402)));
evalcond[5]=(((sj0*x8402))+(((-1.0)*sj0*x8408))+(((-1.0)*r12*x8407))+(((-1.0)*x8403*x8406))+((r10*x8409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8410=((-1.0)*r11);
IkReal x8412 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8412)==0){
continue;
}
IkReal x8411=pow(x8412,-0.5);
CheckValue<IkReal> x8413 = IKatan2WithCheck(IkReal(x8410),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8413.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8413.value))));
IkReal gconst142=(x8410*x8411);
IkReal gconst143=((1.0)*r10*x8411);
CheckValue<IkReal> x8414 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8414.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8414.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8415=((-1.0)*r11);
CheckValue<IkReal> x8418 = IKatan2WithCheck(IkReal(x8415),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8418.valid){
continue;
}
IkReal x8416=((1.0)*(x8418.value));
IkReal x8417=x8411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8416)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8416)));
IkReal gconst142=(x8415*x8417);
IkReal gconst143=((1.0)*r10*x8417);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8419=((-1.0)*r11);
CheckValue<IkReal> x8422 = IKatan2WithCheck(IkReal(x8419),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8422.valid){
continue;
}
IkReal x8420=((1.0)*(x8422.value));
IkReal x8421=x8411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8420)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8420)));
IkReal gconst142=(x8419*x8421);
IkReal gconst143=((1.0)*r10*x8421);
IkReal x8423=r12*r12;
IkReal x8424=((1.0)*sj0);
IkReal x8425=(cj0*r02);
IkReal x8426=x8411;
j4eval[0]=((IKabs(((((-1.0)*x8425))+(((-1.0)*r12*x8424)))))+(IKabs(((((-1.0)*x8424*x8426))+((sj0*x8423*x8426))+((r12*x8425*x8426))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8427=((-1.0)*r11);
CheckValue<IkReal> x8430 = IKatan2WithCheck(IkReal(x8427),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8430.valid){
continue;
}
IkReal x8428=((1.0)*(x8430.value));
IkReal x8429=x8411;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8428)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8428)));
IkReal gconst142=(x8427*x8429);
IkReal gconst143=((1.0)*r10*x8429);
IkReal x8431=r12*r12;
IkReal x8432=(cj1*r22*sj2);
IkReal x8433=(cj2*r22*sj1);
CheckValue<IkReal> x8437=IKPowWithIntegerCheck(((-1.0)+x8431),-1);
if(!x8437.valid){
continue;
}
IkReal x8434=x8437.value;
if((((1.0)+(((-1.0)*x8431)))) < -0.00001)
continue;
IkReal x8435=IKsqrt(((1.0)+(((-1.0)*x8431))));
IkReal x8436=((1.0)*r12*x8434*x8435);
j4eval[0]=((IKabs(((((-1.0)*x8432*x8436))+(((-1.0)*x8433*x8436)))))+(IKabs((x8433+x8432))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8438=(gconst142*r21);
IkReal x8439=(cj1*sj2);
IkReal x8440=(cj2*sj1);
IkReal x8441=(gconst143*r20);
CheckValue<IkReal> x8442=IKPowWithIntegerCheck(IKsign(((x8441*x8441)+(r22*r22)+(x8438*x8438)+(((-2.0)*x8438*x8441)))),-1);
if(!x8442.valid){
continue;
}
CheckValue<IkReal> x8443 = IKatan2WithCheck(IkReal((((r22*x8440))+((r22*x8439)))),IkReal((((x8438*x8439))+((x8438*x8440))+(((-1.0)*x8440*x8441))+(((-1.0)*x8439*x8441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8442.value)))+(x8443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8444=IKsin(j4);
IkReal x8445=IKcos(j4);
IkReal x8446=(sj1*sj2);
IkReal x8447=(gconst143*r20);
IkReal x8448=((1.0)*x8445);
IkReal x8449=((1.0)*cj1*cj2);
IkReal x8450=((1.0)*x8444);
IkReal x8451=(gconst142*x8444);
IkReal x8452=(gconst143*x8445);
evalcond[0]=(((r21*x8451))+(((-1.0)*x8447*x8450))+(((-1.0)*r22*x8448)));
evalcond[1]=(((r11*x8451))+cj0+(((-1.0)*gconst143*r10*x8450))+(((-1.0)*r12*x8448)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8450))+((r01*x8451))+(((-1.0)*r02*x8448)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8450))+((x8445*x8447))+(((-1.0)*gconst142*r21*x8448)));
evalcond[4]=((((-1.0)*gconst142*r01*x8448))+(((-1.0)*r02*x8450))+(((-1.0)*cj0*x8449))+((r00*x8452))+((cj0*x8446)));
evalcond[5]=((((-1.0)*gconst142*r11*x8448))+(((-1.0)*r12*x8450))+((sj0*x8446))+(((-1.0)*sj0*x8449))+((r10*x8452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8453=((1.0)*sj0);
IkReal x8454=((1.0)*gconst142);
CheckValue<IkReal> x8455 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8453))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x8453))+(((-1.0)*cj0*r01*x8454))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8455.valid){
continue;
}
CheckValue<IkReal> x8456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8454))+(((-1.0)*gconst143*r21)))),-1);
if(!x8456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8455.value)+(((1.5707963267949)*(x8456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8457=IKsin(j4);
IkReal x8458=IKcos(j4);
IkReal x8459=(sj1*sj2);
IkReal x8460=(gconst143*r20);
IkReal x8461=((1.0)*x8458);
IkReal x8462=((1.0)*cj1*cj2);
IkReal x8463=((1.0)*x8457);
IkReal x8464=(gconst142*x8457);
IkReal x8465=(gconst143*x8458);
evalcond[0]=(((r21*x8464))+(((-1.0)*r22*x8461))+(((-1.0)*x8460*x8463)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8463))+((r11*x8464))+(((-1.0)*r12*x8461)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8464))+(((-1.0)*r02*x8461))+(((-1.0)*gconst143*r00*x8463)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8458*x8460))+(((-1.0)*r22*x8463))+(((-1.0)*gconst142*r21*x8461)));
evalcond[4]=((((-1.0)*r02*x8463))+((r00*x8465))+(((-1.0)*gconst142*r01*x8461))+((cj0*x8459))+(((-1.0)*cj0*x8462)));
evalcond[5]=((((-1.0)*sj0*x8462))+((sj0*x8459))+((r10*x8465))+(((-1.0)*r12*x8463))+(((-1.0)*gconst142*r11*x8461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8466=((1.0)*gconst143);
CheckValue<IkReal> x8467 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8466))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8467.valid){
continue;
}
CheckValue<IkReal> x8468=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8466)))),-1);
if(!x8468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8467.value)+(((1.5707963267949)*(x8468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8469=IKsin(j4);
IkReal x8470=IKcos(j4);
IkReal x8471=(sj1*sj2);
IkReal x8472=(gconst143*r20);
IkReal x8473=((1.0)*x8470);
IkReal x8474=((1.0)*cj1*cj2);
IkReal x8475=((1.0)*x8469);
IkReal x8476=(gconst142*x8469);
IkReal x8477=(gconst143*x8470);
evalcond[0]=(((r21*x8476))+(((-1.0)*x8472*x8475))+(((-1.0)*r22*x8473)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8475))+((r11*x8476))+(((-1.0)*r12*x8473)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8476))+(((-1.0)*r02*x8473))+(((-1.0)*gconst143*r00*x8475)));
evalcond[3]=(((cj2*sj1))+((x8470*x8472))+((cj1*sj2))+(((-1.0)*r22*x8475))+(((-1.0)*gconst142*r21*x8473)));
evalcond[4]=(((r00*x8477))+(((-1.0)*r02*x8475))+(((-1.0)*gconst142*r01*x8473))+((cj0*x8471))+(((-1.0)*cj0*x8474)));
evalcond[5]=((((-1.0)*sj0*x8474))+((r10*x8477))+(((-1.0)*r12*x8475))+(((-1.0)*gconst142*r11*x8473))+((sj0*x8471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8478=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8478;
j4eval[1]=IKsign(x8478);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8479=((1.0)*cj5);
IkReal x8480=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8479)));
j4eval[0]=x8480;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8479))))));
j4eval[2]=IKsign(x8480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8481=cj5*cj5;
IkReal x8482=r11*r11;
IkReal x8483=(r11*sj5);
IkReal x8484=(cj5*r10);
IkReal x8485=((r12*r12)+x8482+(((-1.0)*x8481*x8482))+((x8481*(r10*r10)))+(((-2.0)*x8483*x8484)));
j4eval[0]=x8485;
j4eval[1]=IKsign(x8485);
j4eval[2]=((IKabs(r12))+(IKabs((x8484+(((-1.0)*x8483))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8486=cj5*cj5;
IkReal x8487=r11*r11;
IkReal x8488=(cj5*r10);
IkReal x8489=(r11*sj5);
CheckValue<IkReal> x8490 = IKatan2WithCheck(IkReal((x8488+(((-1.0)*x8489)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8490.valid){
continue;
}
CheckValue<IkReal> x8491=IKPowWithIntegerCheck(IKsign((((x8486*(r10*r10)))+(r12*r12)+x8487+(((-1.0)*x8486*x8487))+(((-2.0)*x8488*x8489)))),-1);
if(!x8491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8490.value)+(((1.5707963267949)*(x8491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8492=IKsin(j4);
IkReal x8493=IKcos(j4);
IkReal x8494=(cj5*r10);
IkReal x8495=(r01*sj5);
IkReal x8496=(cj5*r00);
IkReal x8497=(cj5*r20);
IkReal x8498=((1.0)*x8493);
IkReal x8499=((1.0)*x8492);
IkReal x8500=(sj5*x8492);
evalcond[0]=(((r21*x8500))+(((-1.0)*r22*x8498))+(((-1.0)*x8497*x8499)));
evalcond[1]=((((-1.0)*r02*x8498))+((x8492*x8495))+(((-1.0)*x8496*x8499)));
evalcond[2]=(((x8493*x8494))+(((-1.0)*r11*sj5*x8498))+(((-1.0)*r12*x8499)));
evalcond[3]=((1.0)+((r11*x8500))+(((-1.0)*x8494*x8499))+(((-1.0)*r12*x8498)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8493*x8497))+(((-1.0)*r21*sj5*x8498))+(((-1.0)*r22*x8499)));
evalcond[5]=((((-1.0)*r02*x8499))+((x8493*x8496))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8495*x8498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8501=((1.0)*cj5);
CheckValue<IkReal> x8502 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8501)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8502.valid){
continue;
}
CheckValue<IkReal> x8503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8501)))),-1);
if(!x8503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8502.value)+(((1.5707963267949)*(x8503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8504=IKsin(j4);
IkReal x8505=IKcos(j4);
IkReal x8506=(cj5*r10);
IkReal x8507=(r01*sj5);
IkReal x8508=(cj5*r00);
IkReal x8509=(cj5*r20);
IkReal x8510=((1.0)*x8505);
IkReal x8511=((1.0)*x8504);
IkReal x8512=(sj5*x8504);
evalcond[0]=(((r21*x8512))+(((-1.0)*x8509*x8511))+(((-1.0)*r22*x8510)));
evalcond[1]=((((-1.0)*x8508*x8511))+(((-1.0)*r02*x8510))+((x8504*x8507)));
evalcond[2]=(((x8505*x8506))+(((-1.0)*r12*x8511))+(((-1.0)*r11*sj5*x8510)));
evalcond[3]=((1.0)+((r11*x8512))+(((-1.0)*x8506*x8511))+(((-1.0)*r12*x8510)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8505*x8509))+(((-1.0)*r22*x8511))+(((-1.0)*r21*sj5*x8510)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8505*x8508))+(((-1.0)*x8507*x8510))+(((-1.0)*r02*x8511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8513=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8513.valid){
continue;
}
CheckValue<IkReal> x8514 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8513.value)))+(x8514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8515=IKsin(j4);
IkReal x8516=IKcos(j4);
IkReal x8517=(cj5*r10);
IkReal x8518=(r01*sj5);
IkReal x8519=(cj5*r00);
IkReal x8520=(cj5*r20);
IkReal x8521=((1.0)*x8516);
IkReal x8522=((1.0)*x8515);
IkReal x8523=(sj5*x8515);
evalcond[0]=(((r21*x8523))+(((-1.0)*r22*x8521))+(((-1.0)*x8520*x8522)));
evalcond[1]=((((-1.0)*x8519*x8522))+(((-1.0)*r02*x8521))+((x8515*x8518)));
evalcond[2]=((((-1.0)*r11*sj5*x8521))+((x8516*x8517))+(((-1.0)*r12*x8522)));
evalcond[3]=((1.0)+(((-1.0)*x8517*x8522))+((r11*x8523))+(((-1.0)*r12*x8521)));
evalcond[4]=(((x8516*x8520))+((cj2*sj1))+(((-1.0)*r21*sj5*x8521))+((cj1*sj2))+(((-1.0)*r22*x8522)));
evalcond[5]=(((x8516*x8519))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8522))+(((-1.0)*x8518*x8521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8524=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8524;
j4eval[1]=IKsign(x8524);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8525=((1.0)*cj5);
IkReal x8526=((((-1.0)*r21*x8525))+(((-1.0)*r20*sj5)));
j4eval[0]=x8526;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8525))))));
j4eval[2]=IKsign(x8526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8527=cj5*cj5;
IkReal x8528=r11*r11;
IkReal x8529=(cj5*r10);
IkReal x8530=(r11*sj5);
IkReal x8531=((((-1.0)*x8527*(r10*r10)))+(((2.0)*x8529*x8530))+(((-1.0)*x8528))+(((-1.0)*(r12*r12)))+((x8527*x8528)));
j4eval[0]=x8531;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8530))+x8529))));
j4eval[2]=IKsign(x8531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8532=cj5*cj5;
IkReal x8533=r11*r11;
IkReal x8534=(cj5*r10);
IkReal x8535=(r11*sj5);
CheckValue<IkReal> x8536=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8533))+((x8532*x8533))+(((-1.0)*(r12*r12)))+(((2.0)*x8534*x8535))+(((-1.0)*x8532*(r10*r10))))),-1);
if(!x8536.valid){
continue;
}
CheckValue<IkReal> x8537 = IKatan2WithCheck(IkReal(((((-1.0)*x8535))+x8534)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8536.value)))+(x8537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8538=IKsin(j4);
IkReal x8539=IKcos(j4);
IkReal x8540=(cj5*r10);
IkReal x8541=(r01*sj5);
IkReal x8542=(cj5*r00);
IkReal x8543=(cj5*r20);
IkReal x8544=((1.0)*x8539);
IkReal x8545=((1.0)*x8538);
IkReal x8546=(sj5*x8538);
evalcond[0]=((((-1.0)*x8543*x8545))+(((-1.0)*r22*x8544))+((r21*x8546)));
evalcond[1]=((((-1.0)*r02*x8544))+((x8538*x8541))+(((-1.0)*x8542*x8545)));
evalcond[2]=(((x8539*x8540))+(((-1.0)*r11*sj5*x8544))+(((-1.0)*r12*x8545)));
evalcond[3]=((-1.0)+(((-1.0)*x8540*x8545))+(((-1.0)*r12*x8544))+((r11*x8546)));
evalcond[4]=(((cj2*sj1))+((x8539*x8543))+((cj1*sj2))+(((-1.0)*r22*x8545))+(((-1.0)*r21*sj5*x8544)));
evalcond[5]=((((-1.0)*r02*x8545))+((x8539*x8542))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8541*x8544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8547=((1.0)*cj5);
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8547))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8547))+(((-1.0)*r20*sj5)))),-1);
if(!x8549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8548.value)+(((1.5707963267949)*(x8549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8550=IKsin(j4);
IkReal x8551=IKcos(j4);
IkReal x8552=(cj5*r10);
IkReal x8553=(r01*sj5);
IkReal x8554=(cj5*r00);
IkReal x8555=(cj5*r20);
IkReal x8556=((1.0)*x8551);
IkReal x8557=((1.0)*x8550);
IkReal x8558=(sj5*x8550);
evalcond[0]=(((r21*x8558))+(((-1.0)*r22*x8556))+(((-1.0)*x8555*x8557)));
evalcond[1]=(((x8550*x8553))+(((-1.0)*x8554*x8557))+(((-1.0)*r02*x8556)));
evalcond[2]=(((x8551*x8552))+(((-1.0)*r12*x8557))+(((-1.0)*r11*sj5*x8556)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8556))+((r11*x8558))+(((-1.0)*x8552*x8557)));
evalcond[4]=(((x8551*x8555))+((cj2*sj1))+(((-1.0)*r22*x8557))+(((-1.0)*r21*sj5*x8556))+((cj1*sj2)));
evalcond[5]=(((x8551*x8554))+(((-1.0)*sj1*sj2))+(((-1.0)*x8553*x8556))+((cj1*cj2))+(((-1.0)*r02*x8557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8559 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8559.valid){
continue;
}
CheckValue<IkReal> x8560=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8559.value)+(((1.5707963267949)*(x8560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8561=IKsin(j4);
IkReal x8562=IKcos(j4);
IkReal x8563=(cj5*r10);
IkReal x8564=(r01*sj5);
IkReal x8565=(cj5*r00);
IkReal x8566=(cj5*r20);
IkReal x8567=((1.0)*x8562);
IkReal x8568=((1.0)*x8561);
IkReal x8569=(sj5*x8561);
evalcond[0]=((((-1.0)*x8566*x8568))+(((-1.0)*r22*x8567))+((r21*x8569)));
evalcond[1]=((((-1.0)*x8565*x8568))+((x8561*x8564))+(((-1.0)*r02*x8567)));
evalcond[2]=(((x8562*x8563))+(((-1.0)*r12*x8568))+(((-1.0)*r11*sj5*x8567)));
evalcond[3]=((-1.0)+((r11*x8569))+(((-1.0)*r12*x8567))+(((-1.0)*x8563*x8568)));
evalcond[4]=(((cj2*sj1))+((x8562*x8566))+((cj1*sj2))+(((-1.0)*r22*x8568))+(((-1.0)*r21*sj5*x8567)));
evalcond[5]=(((x8562*x8565))+(((-1.0)*x8564*x8567))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x8568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8570=((-1.0)*r00);
IkReal x8572 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8572)==0){
continue;
}
IkReal x8571=pow(x8572,-0.5);
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8570),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8573.value));
IkReal gconst145=(r01*x8571);
IkReal gconst146=(x8570*x8571);
CheckValue<IkReal> x8574 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8574.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8574.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8575=((-1.0)*r00);
IkReal x8576=x8571;
CheckValue<IkReal> x8578 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8575),IKFAST_ATAN2_MAGTHRESH);
if(!x8578.valid){
continue;
}
IkReal x8577=((-1.0)*(x8578.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8577;
IkReal gconst144=x8577;
IkReal gconst145=(r01*x8576);
IkReal gconst146=(x8575*x8576);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8579=((1.0)*sj0);
IkReal x8580=((1.0)*gconst145);
CheckValue<IkReal> x8581 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8579)))),IkReal(((((-1.0)*cj0*r01*x8580))+((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8581.valid){
continue;
}
CheckValue<IkReal> x8582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8580))+(((-1.0)*gconst146*r21)))),-1);
if(!x8582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8581.value)+(((1.5707963267949)*(x8582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8583=IKsin(j4);
IkReal x8584=IKcos(j4);
IkReal x8585=(gconst146*r10);
IkReal x8586=(sj1*sj2);
IkReal x8587=(gconst146*r20);
IkReal x8588=(gconst146*r00);
IkReal x8589=((1.0)*x8584);
IkReal x8590=((1.0)*x8583);
IkReal x8591=(gconst145*x8583);
IkReal x8592=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8589))+((r21*x8591))+(((-1.0)*x8587*x8590)));
evalcond[1]=(cj0+(((-1.0)*x8585*x8590))+(((-1.0)*r12*x8589))+((r11*x8591)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8591))+(((-1.0)*r02*x8589))+(((-1.0)*x8588*x8590)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8590))+((cj1*sj2))+((x8584*x8587))+(((-1.0)*gconst145*r21*x8589)));
evalcond[4]=((((-1.0)*r02*x8590))+(((-1.0)*cj0*x8592))+((cj0*x8586))+((x8584*x8588))+(((-1.0)*gconst145*r01*x8589)));
evalcond[5]=((((-1.0)*gconst145*r11*x8589))+(((-1.0)*sj0*x8592))+(((-1.0)*r12*x8590))+((sj0*x8586))+((x8584*x8585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8593=((1.0)*gconst146);
CheckValue<IkReal> x8594 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8594.valid){
continue;
}
CheckValue<IkReal> x8595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8593))+(((-1.0)*gconst145*r10)))),-1);
if(!x8595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8594.value)+(((1.5707963267949)*(x8595.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8596=IKsin(j4);
IkReal x8597=IKcos(j4);
IkReal x8598=(gconst146*r10);
IkReal x8599=(sj1*sj2);
IkReal x8600=(gconst146*r20);
IkReal x8601=(gconst146*r00);
IkReal x8602=((1.0)*x8597);
IkReal x8603=((1.0)*x8596);
IkReal x8604=(gconst145*x8596);
IkReal x8605=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8602))+((r21*x8604))+(((-1.0)*x8600*x8603)));
evalcond[1]=(cj0+((r11*x8604))+(((-1.0)*r12*x8602))+(((-1.0)*x8598*x8603)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8601*x8603))+(((-1.0)*r02*x8602))+((r01*x8604)));
evalcond[3]=(((cj2*sj1))+((x8597*x8600))+((cj1*sj2))+(((-1.0)*r22*x8603))+(((-1.0)*gconst145*r21*x8602)));
evalcond[4]=((((-1.0)*gconst145*r01*x8602))+(((-1.0)*cj0*x8605))+((x8597*x8601))+(((-1.0)*r02*x8603))+((cj0*x8599)));
evalcond[5]=(((sj0*x8599))+(((-1.0)*gconst145*r11*x8602))+(((-1.0)*r12*x8603))+(((-1.0)*sj0*x8605))+((x8597*x8598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8606=((-1.0)*r01);
IkReal x8608 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8608)==0){
continue;
}
IkReal x8607=pow(x8608,-0.5);
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal(x8606),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8609.value))));
IkReal gconst148=(x8606*x8607);
IkReal gconst149=((1.0)*r00*x8607);
CheckValue<IkReal> x8610 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8610.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8610.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8611=((-1.0)*r01);
CheckValue<IkReal> x8614 = IKatan2WithCheck(IkReal(x8611),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8614.valid){
continue;
}
IkReal x8612=((1.0)*(x8614.value));
IkReal x8613=x8607;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8612)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8612)));
IkReal gconst148=(x8611*x8613);
IkReal gconst149=((1.0)*r00*x8613);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8615=((-1.0)*r01);
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal(x8615),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
IkReal x8616=((1.0)*(x8618.value));
IkReal x8617=x8607;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8616)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8616)));
IkReal gconst148=(x8615*x8617);
IkReal gconst149=((1.0)*r00*x8617);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8619=((-1.0)*r01);
CheckValue<IkReal> x8622 = IKatan2WithCheck(IkReal(x8619),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8622.valid){
continue;
}
IkReal x8620=((1.0)*(x8622.value));
IkReal x8621=x8607;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8620)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8620)));
IkReal gconst148=(x8619*x8621);
IkReal gconst149=((1.0)*r00*x8621);
IkReal x8623=r02*r02;
IkReal x8624=(r12*sj0);
IkReal x8625=((1.0)*cj0);
IkReal x8626=x8607;
j4eval[0]=((IKabs(((((-1.0)*x8624))+(((-1.0)*r02*x8625)))))+(IKabs((((r02*x8624*x8626))+(((-1.0)*x8625*x8626))+((cj0*x8623*x8626))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8627=((1.0)*sj0);
IkReal x8628=((1.0)*gconst148);
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8627))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8627))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8628))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
CheckValue<IkReal> x8630=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8628)))),-1);
if(!x8630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8629.value)+(((1.5707963267949)*(x8630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8631=IKsin(j4);
IkReal x8632=IKcos(j4);
IkReal x8633=(gconst148*r11);
IkReal x8634=(sj1*sj2);
IkReal x8635=((1.0)*x8632);
IkReal x8636=(gconst149*x8632);
IkReal x8637=(gconst148*x8631);
IkReal x8638=((1.0)*cj1*cj2);
IkReal x8639=((1.0)*x8631);
evalcond[0]=(((r21*x8637))+(((-1.0)*gconst149*r20*x8639))+(((-1.0)*r22*x8635)));
evalcond[1]=(cj0+(((-1.0)*r12*x8635))+(((-1.0)*gconst149*r10*x8639))+((x8631*x8633)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8639))+((r01*x8637))+(((-1.0)*r02*x8635)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8635))+(((-1.0)*r22*x8639))+((r20*x8636)));
evalcond[4]=((((-1.0)*gconst148*r01*x8635))+((cj0*x8634))+(((-1.0)*cj0*x8638))+((r00*x8636))+(((-1.0)*r02*x8639)));
evalcond[5]=((((-1.0)*r12*x8639))+((sj0*x8634))+(((-1.0)*sj0*x8638))+((r10*x8636))+(((-1.0)*x8633*x8635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8640=((1.0)*gconst149);
CheckValue<IkReal> x8641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8640)))),-1);
if(!x8641.valid){
continue;
}
CheckValue<IkReal> x8642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8640))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8641.value)))+(x8642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8643=IKsin(j4);
IkReal x8644=IKcos(j4);
IkReal x8645=(gconst148*r11);
IkReal x8646=(sj1*sj2);
IkReal x8647=((1.0)*x8644);
IkReal x8648=(gconst149*x8644);
IkReal x8649=(gconst148*x8643);
IkReal x8650=((1.0)*cj1*cj2);
IkReal x8651=((1.0)*x8643);
evalcond[0]=((((-1.0)*r22*x8647))+((r21*x8649))+(((-1.0)*gconst149*r20*x8651)));
evalcond[1]=((((-1.0)*gconst149*r10*x8651))+cj0+(((-1.0)*r12*x8647))+((x8643*x8645)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8651))+(((-1.0)*r02*x8647))+((r01*x8649)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8648))+(((-1.0)*r22*x8651))+(((-1.0)*gconst148*r21*x8647)));
evalcond[4]=(((cj0*x8646))+((r00*x8648))+(((-1.0)*cj0*x8650))+(((-1.0)*gconst148*r01*x8647))+(((-1.0)*r02*x8651)));
evalcond[5]=((((-1.0)*x8645*x8647))+(((-1.0)*r12*x8651))+(((-1.0)*sj0*x8650))+((r10*x8648))+((sj0*x8646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8652=((1.0)*gconst149);
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8652))+(((-1.0)*gconst148*r00)))),-1);
if(!x8653.valid){
continue;
}
CheckValue<IkReal> x8654 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8653.value)))+(x8654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8655=IKsin(j4);
IkReal x8656=IKcos(j4);
IkReal x8657=(gconst148*r11);
IkReal x8658=(sj1*sj2);
IkReal x8659=((1.0)*x8656);
IkReal x8660=(gconst149*x8656);
IkReal x8661=(gconst148*x8655);
IkReal x8662=((1.0)*cj1*cj2);
IkReal x8663=((1.0)*x8655);
evalcond[0]=((((-1.0)*gconst149*r20*x8663))+(((-1.0)*r22*x8659))+((r21*x8661)));
evalcond[1]=((((-1.0)*r12*x8659))+cj0+((x8655*x8657))+(((-1.0)*gconst149*r10*x8663)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8661))+(((-1.0)*gconst149*r00*x8663))+(((-1.0)*r02*x8659)));
evalcond[3]=(((cj2*sj1))+((r20*x8660))+((cj1*sj2))+(((-1.0)*r22*x8663))+(((-1.0)*gconst148*r21*x8659)));
evalcond[4]=((((-1.0)*cj0*x8662))+(((-1.0)*r02*x8663))+((r00*x8660))+(((-1.0)*gconst148*r01*x8659))+((cj0*x8658)));
evalcond[5]=((((-1.0)*sj0*x8662))+(((-1.0)*r12*x8663))+((sj0*x8658))+(((-1.0)*x8657*x8659))+((r10*x8660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8664=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8664;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8665=((1.0)*cj5);
IkReal x8666=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8665)));
j4eval[0]=x8666;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8665)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8667=cj5*cj5;
IkReal x8668=r01*r01;
IkReal x8669=(r01*sj5);
IkReal x8670=(cj5*r00);
IkReal x8671=((((2.0)*x8669*x8670))+(((-1.0)*(r02*r02)))+(((-1.0)*x8668))+((x8667*x8668))+(((-1.0)*x8667*(r00*r00))));
j4eval[0]=x8671;
j4eval[1]=IKsign(x8671);
j4eval[2]=((IKabs(r02))+(IKabs((x8670+(((-1.0)*x8669))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8672=cj5*cj5;
IkReal x8673=r01*r01;
IkReal x8674=(r01*sj5);
IkReal x8675=(cj5*r00);
CheckValue<IkReal> x8676=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8672*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8672*x8673))+(((-1.0)*x8673))+(((2.0)*x8674*x8675)))),-1);
if(!x8676.valid){
continue;
}
CheckValue<IkReal> x8677 = IKatan2WithCheck(IkReal((x8675+(((-1.0)*x8674)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8676.value)))+(x8677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8678=IKsin(j4);
IkReal x8679=IKcos(j4);
IkReal x8680=(cj5*r10);
IkReal x8681=(r01*sj5);
IkReal x8682=(cj5*r00);
IkReal x8683=(cj5*r20);
IkReal x8684=((1.0)*x8679);
IkReal x8685=((1.0)*x8678);
IkReal x8686=(sj5*x8678);
evalcond[0]=((((-1.0)*x8683*x8685))+(((-1.0)*r22*x8684))+((r21*x8686)));
evalcond[1]=((((-1.0)*r12*x8684))+((r11*x8686))+(((-1.0)*x8680*x8685)));
evalcond[2]=(((x8679*x8682))+(((-1.0)*x8681*x8684))+(((-1.0)*r02*x8685)));
evalcond[3]=((-1.0)+(((-1.0)*x8682*x8685))+(((-1.0)*r02*x8684))+((x8678*x8681)));
evalcond[4]=(((cj2*sj1))+((x8679*x8683))+((cj1*sj2))+(((-1.0)*r22*x8685))+(((-1.0)*r21*sj5*x8684)));
evalcond[5]=(((x8679*x8680))+(((-1.0)*r12*x8685))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8687=((1.0)*cj5);
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8687)))),-1);
if(!x8688.valid){
continue;
}
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8688.value)))+(x8689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8690=IKsin(j4);
IkReal x8691=IKcos(j4);
IkReal x8692=(cj5*r10);
IkReal x8693=(r01*sj5);
IkReal x8694=(cj5*r00);
IkReal x8695=(cj5*r20);
IkReal x8696=((1.0)*x8691);
IkReal x8697=((1.0)*x8690);
IkReal x8698=(sj5*x8690);
evalcond[0]=(((r21*x8698))+(((-1.0)*x8695*x8697))+(((-1.0)*r22*x8696)));
evalcond[1]=((((-1.0)*r12*x8696))+((r11*x8698))+(((-1.0)*x8692*x8697)));
evalcond[2]=((((-1.0)*r02*x8697))+((x8691*x8694))+(((-1.0)*x8693*x8696)));
evalcond[3]=((-1.0)+((x8690*x8693))+(((-1.0)*r02*x8696))+(((-1.0)*x8694*x8697)));
evalcond[4]=((((-1.0)*r21*sj5*x8696))+((cj2*sj1))+((cj1*sj2))+((x8691*x8695))+(((-1.0)*r22*x8697)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8691*x8692))+(((-1.0)*r12*x8697))+(((-1.0)*r11*sj5*x8696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8699=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8699.valid){
continue;
}
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8699.value)))+(x8700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8701=IKsin(j4);
IkReal x8702=IKcos(j4);
IkReal x8703=(cj5*r10);
IkReal x8704=(r01*sj5);
IkReal x8705=(cj5*r00);
IkReal x8706=(cj5*r20);
IkReal x8707=((1.0)*x8702);
IkReal x8708=((1.0)*x8701);
IkReal x8709=(sj5*x8701);
evalcond[0]=(((r21*x8709))+(((-1.0)*x8706*x8708))+(((-1.0)*r22*x8707)));
evalcond[1]=(((r11*x8709))+(((-1.0)*r12*x8707))+(((-1.0)*x8703*x8708)));
evalcond[2]=((((-1.0)*x8704*x8707))+((x8702*x8705))+(((-1.0)*r02*x8708)));
evalcond[3]=((-1.0)+(((-1.0)*x8705*x8708))+((x8701*x8704))+(((-1.0)*r02*x8707)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8702*x8706))+(((-1.0)*r22*x8708))+(((-1.0)*r21*sj5*x8707)));
evalcond[5]=((((-1.0)*r11*sj5*x8707))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8702*x8703))+(((-1.0)*r12*x8708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8710=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8710;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8710);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8711=((1.0)*cj5);
IkReal x8712=((((-1.0)*r21*x8711))+(((-1.0)*r20*sj5)));
j4eval[0]=x8712;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8711))))));
j4eval[2]=IKsign(x8712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8713=cj5*cj5;
IkReal x8714=r01*r01;
IkReal x8715=(cj5*r00);
IkReal x8716=(r01*sj5);
IkReal x8717=((((-2.0)*x8715*x8716))+x8714+(((-1.0)*x8713*x8714))+((x8713*(r00*r00)))+(r02*r02));
j4eval[0]=x8717;
j4eval[1]=((IKabs(r02))+(IKabs((x8715+(((-1.0)*x8716))))));
j4eval[2]=IKsign(x8717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8718=cj5*cj5;
IkReal x8719=r01*r01;
IkReal x8720=(r01*sj5);
IkReal x8721=(cj5*r00);
CheckValue<IkReal> x8722=IKPowWithIntegerCheck(IKsign((((x8718*(r00*r00)))+x8719+(((-2.0)*x8720*x8721))+(((-1.0)*x8718*x8719))+(r02*r02))),-1);
if(!x8722.valid){
continue;
}
CheckValue<IkReal> x8723 = IKatan2WithCheck(IkReal((x8721+(((-1.0)*x8720)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8722.value)))+(x8723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8724=IKsin(j4);
IkReal x8725=IKcos(j4);
IkReal x8726=(cj5*r10);
IkReal x8727=(r01*sj5);
IkReal x8728=(cj5*r00);
IkReal x8729=(cj5*r20);
IkReal x8730=((1.0)*x8725);
IkReal x8731=((1.0)*x8724);
IkReal x8732=(sj5*x8724);
evalcond[0]=((((-1.0)*x8729*x8731))+((r21*x8732))+(((-1.0)*r22*x8730)));
evalcond[1]=(((r11*x8732))+(((-1.0)*x8726*x8731))+(((-1.0)*r12*x8730)));
evalcond[2]=(((x8725*x8728))+(((-1.0)*x8727*x8730))+(((-1.0)*r02*x8731)));
evalcond[3]=((1.0)+((x8724*x8727))+(((-1.0)*r02*x8730))+(((-1.0)*x8728*x8731)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8725*x8729))+(((-1.0)*r21*sj5*x8730))+(((-1.0)*r22*x8731)));
evalcond[5]=((((-1.0)*r11*sj5*x8730))+(((-1.0)*sj1*sj2))+((x8725*x8726))+((cj1*cj2))+(((-1.0)*r12*x8731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8733=((1.0)*cj5);
CheckValue<IkReal> x8734 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8734.valid){
continue;
}
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8733))+(((-1.0)*r20*sj5)))),-1);
if(!x8735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8734.value)+(((1.5707963267949)*(x8735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8736=IKsin(j4);
IkReal x8737=IKcos(j4);
IkReal x8738=(cj5*r10);
IkReal x8739=(r01*sj5);
IkReal x8740=(cj5*r00);
IkReal x8741=(cj5*r20);
IkReal x8742=((1.0)*x8737);
IkReal x8743=((1.0)*x8736);
IkReal x8744=(sj5*x8736);
evalcond[0]=((((-1.0)*x8741*x8743))+(((-1.0)*r22*x8742))+((r21*x8744)));
evalcond[1]=((((-1.0)*r12*x8742))+(((-1.0)*x8738*x8743))+((r11*x8744)));
evalcond[2]=((((-1.0)*x8739*x8742))+((x8737*x8740))+(((-1.0)*r02*x8743)));
evalcond[3]=((1.0)+(((-1.0)*x8740*x8743))+((x8736*x8739))+(((-1.0)*r02*x8742)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8742))+((cj1*sj2))+(((-1.0)*r22*x8743))+((x8737*x8741)));
evalcond[5]=((((-1.0)*r12*x8743))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8742))+((cj1*cj2))+((x8737*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8745 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8745.valid){
continue;
}
CheckValue<IkReal> x8746=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8745.value)+(((1.5707963267949)*(x8746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8747=IKsin(j4);
IkReal x8748=IKcos(j4);
IkReal x8749=(cj5*r10);
IkReal x8750=(r01*sj5);
IkReal x8751=(cj5*r00);
IkReal x8752=(cj5*r20);
IkReal x8753=((1.0)*x8748);
IkReal x8754=((1.0)*x8747);
IkReal x8755=(sj5*x8747);
evalcond[0]=((((-1.0)*r22*x8753))+((r21*x8755))+(((-1.0)*x8752*x8754)));
evalcond[1]=(((r11*x8755))+(((-1.0)*r12*x8753))+(((-1.0)*x8749*x8754)));
evalcond[2]=((((-1.0)*x8750*x8753))+(((-1.0)*r02*x8754))+((x8748*x8751)));
evalcond[3]=((1.0)+(((-1.0)*x8751*x8754))+((x8747*x8750))+(((-1.0)*r02*x8753)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8754))+((cj1*sj2))+((x8748*x8752))+(((-1.0)*r21*sj5*x8753)));
evalcond[5]=(((x8748*x8749))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8753))+(((-1.0)*r12*x8754))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8756=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8756);
rxp1_1=(px*r21);
rxp1_2=(r11*x8756);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8757=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8757);
rxp1_1=(px*r21);
rxp1_2=(r11*x8757);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8758=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8758);
rxp1_1=(px*r21);
rxp1_2=(r11*x8758);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8761=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8761.valid){
continue;
}
IkReal x8759=x8761.value;
IkReal x8760=(sj0*x8759);
cj4array[0]=(((cj1*cj2*x8760))+(((-1.0)*sj1*sj2*x8760)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8762=IKsin(j4);
IkReal x8763=IKcos(j4);
IkReal x8764=(r21*sj5);
IkReal x8765=(cj5*r20);
IkReal x8766=((1.0)*x8762);
IkReal x8767=((1.0)*x8763);
evalcond[0]=((-1.0)*r02*x8762);
evalcond[1]=((((-1.0)*r02*x8767))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x8765*x8766))+((x8762*x8764)));
evalcond[3]=(((r11*sj5*x8762))+(((-1.0)*cj5*r10*x8766)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8764*x8767))+((x8763*x8765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8770=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8770.valid){
continue;
}
IkReal x8768=x8770.value;
IkReal x8769=((1.0)*x8768);
cj4array[0]=((((-1.0)*cj2*sj1*x8769))+(((-1.0)*cj1*sj2*x8769)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8771=IKsin(j4);
IkReal x8772=IKcos(j4);
IkReal x8773=(r11*sj5);
IkReal x8774=((1.0)*sj0);
IkReal x8775=((1.0)*x8772);
IkReal x8776=((1.0)*cj5*x8771);
evalcond[0]=((-1.0)*r02*x8771);
evalcond[1]=((((-1.0)*r02*x8775))+(((-1.0)*x8774)));
evalcond[2]=((((-1.0)*r20*x8776))+((r21*sj5*x8771)));
evalcond[3]=((((-1.0)*r10*x8776))+((x8771*x8773)));
evalcond[4]=((((-1.0)*x8773*x8775))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8774))+((cj5*r10*x8772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8777=IKPowWithIntegerCheck(r02,-1);
if(!x8777.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8777.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8778=IKsin(j4);
IkReal x8779=IKcos(j4);
IkReal x8780=(cj5*x8779);
IkReal x8781=(sj5*x8778);
IkReal x8782=((1.0)*sj5*x8779);
IkReal x8783=((1.0)*cj5*x8778);
evalcond[0]=((-1.0)*r02*x8778);
evalcond[1]=(((r21*x8781))+(((-1.0)*r20*x8783)));
evalcond[2]=(((r11*x8781))+(((-1.0)*r10*x8783)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8782))+((r20*x8780)));
evalcond[4]=(((r10*x8780))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8784=((1.0)*sj0);
IkReal x8785=((1.0)*cj0);
CheckValue<IkReal> x8786 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8785))+(((-1.0)*r12*x8784)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8785))+(((-1.0)*r11*sj5*x8784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8786.valid){
continue;
}
CheckValue<IkReal> x8787=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8786.value)+(((1.5707963267949)*(x8787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8788=IKsin(j4);
IkReal x8789=IKcos(j4);
IkReal x8790=(cj5*r10);
IkReal x8791=(sj1*sj2);
IkReal x8792=(r01*sj5);
IkReal x8793=(cj5*r00);
IkReal x8794=(cj5*r20);
IkReal x8795=((1.0)*x8789);
IkReal x8796=((1.0)*cj1*cj2);
IkReal x8797=((1.0)*x8788);
IkReal x8798=(sj5*x8788);
evalcond[0]=(((r21*x8798))+(((-1.0)*x8794*x8797))+(((-1.0)*r22*x8795)));
evalcond[1]=((((-1.0)*r12*x8795))+cj0+((r11*x8798))+(((-1.0)*x8790*x8797)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8793*x8797))+((x8788*x8792))+(((-1.0)*r02*x8795)));
evalcond[3]=(((cj2*sj1))+((x8789*x8794))+((cj1*sj2))+(((-1.0)*r22*x8797))+(((-1.0)*r21*sj5*x8795)));
evalcond[4]=((((-1.0)*x8792*x8795))+((x8789*x8793))+((cj0*x8791))+(((-1.0)*r02*x8797))+(((-1.0)*cj0*x8796)));
evalcond[5]=((((-1.0)*r12*x8797))+(((-1.0)*r11*sj5*x8795))+((x8789*x8790))+(((-1.0)*sj0*x8796))+((sj0*x8791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8799=((1.0)*cj5);
CheckValue<IkReal> x8800 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8799))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8800.valid){
continue;
}
CheckValue<IkReal> x8801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8799))+(((-1.0)*r10*sj5)))),-1);
if(!x8801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8800.value)+(((1.5707963267949)*(x8801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8802=IKsin(j4);
IkReal x8803=IKcos(j4);
IkReal x8804=(cj5*r10);
IkReal x8805=(sj1*sj2);
IkReal x8806=(r01*sj5);
IkReal x8807=(cj5*r00);
IkReal x8808=(cj5*r20);
IkReal x8809=((1.0)*x8803);
IkReal x8810=((1.0)*cj1*cj2);
IkReal x8811=((1.0)*x8802);
IkReal x8812=(sj5*x8802);
evalcond[0]=(((r21*x8812))+(((-1.0)*r22*x8809))+(((-1.0)*x8808*x8811)));
evalcond[1]=((((-1.0)*r12*x8809))+(((-1.0)*x8804*x8811))+cj0+((r11*x8812)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8807*x8811))+((x8802*x8806))+(((-1.0)*r02*x8809)));
evalcond[3]=((((-1.0)*r22*x8811))+((cj2*sj1))+((x8803*x8808))+((cj1*sj2))+(((-1.0)*r21*sj5*x8809)));
evalcond[4]=(((cj0*x8805))+(((-1.0)*x8806*x8809))+(((-1.0)*r02*x8811))+((x8803*x8807))+(((-1.0)*cj0*x8810)));
evalcond[5]=((((-1.0)*r12*x8811))+(((-1.0)*sj0*x8810))+((x8803*x8804))+((sj0*x8805))+(((-1.0)*r11*sj5*x8809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8813=((1.0)*cj5);
CheckValue<IkReal> x8814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8813))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8814.valid){
continue;
}
CheckValue<IkReal> x8815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8813)))),-1);
if(!x8815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8814.value)+(((1.5707963267949)*(x8815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8816=IKsin(j4);
IkReal x8817=IKcos(j4);
IkReal x8818=(cj5*r10);
IkReal x8819=(sj1*sj2);
IkReal x8820=(r01*sj5);
IkReal x8821=(cj5*r00);
IkReal x8822=(cj5*r20);
IkReal x8823=((1.0)*x8817);
IkReal x8824=((1.0)*cj1*cj2);
IkReal x8825=((1.0)*x8816);
IkReal x8826=(sj5*x8816);
evalcond[0]=(((r21*x8826))+(((-1.0)*x8822*x8825))+(((-1.0)*r22*x8823)));
evalcond[1]=((((-1.0)*r12*x8823))+cj0+((r11*x8826))+(((-1.0)*x8818*x8825)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8821*x8825))+(((-1.0)*r02*x8823))+((x8816*x8820)));
evalcond[3]=(((cj2*sj1))+((x8817*x8822))+((cj1*sj2))+(((-1.0)*r21*sj5*x8823))+(((-1.0)*r22*x8825)));
evalcond[4]=(((x8817*x8821))+(((-1.0)*r02*x8825))+(((-1.0)*x8820*x8823))+(((-1.0)*cj0*x8824))+((cj0*x8819)));
evalcond[5]=((((-1.0)*r11*sj5*x8823))+(((-1.0)*r12*x8825))+(((-1.0)*sj0*x8824))+((x8817*x8818))+((sj0*x8819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8827=cj1*cj1;
IkReal x8828=cj2*cj2;
IkReal x8829=(sj1*sj2);
IkReal x8830=(cj5*r01);
IkReal x8831=(cj5*r11);
IkReal x8832=((70808400000.0)*cj1);
IkReal x8833=(r10*sj5);
IkReal x8834=(cj1*cj2);
IkReal x8835=((572300000000.0)*py);
IkReal x8836=((572300000000.0)*px);
IkReal x8837=((612000000000.0)*cj1);
IkReal x8838=(r00*sj5);
IkReal x8839=((66215110000.0)*sj5*x8834);
CheckValue<IkReal> x8840=IKPowWithIntegerCheck(IKsign(((354403941481.0)+(((-700495200000.0)*cj1*x8829))+(((700495200000.0)*cj2*x8827))+(((-327527290000.0)*x8828))+(((-655054580000.0)*x8829*x8834))+(((655054580000.0)*x8827*x8828))+(((47016710000.0)*x8827)))),-1);
if(!x8840.valid){
continue;
}
CheckValue<IkReal> x8841 = IKatan2WithCheck(IkReal(((((-66215110000.0)*x8829*x8831))+(((-66215110000.0)*x8829*x8833))+((x8831*x8832))+(((66215110000.0)*x8833*x8834))+((x8832*x8833))+(((66215110000.0)*x8831*x8834))+(((-18967973700.0)*x8838))+(((-18967973700.0)*x8830))+(((-1.0)*x8829*x8835))+((py*x8837))+((x8834*x8835))+(((-163941000000.0)*px)))),IkReal((((px*x8837))+(((-66215110000.0)*x8829*x8838))+(((-66215110000.0)*x8829*x8830))+(((163941000000.0)*py))+(((66215110000.0)*x8830*x8834))+((x8830*x8832))+((x8832*x8838))+(((18967973700.0)*x8831))+(((18967973700.0)*x8833))+(((-1.0)*x8829*x8836))+((x8834*x8836))+(((66215110000.0)*x8834*x8838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8841.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8840.value)))+(x8841.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8842=IKcos(j0);
IkReal x8843=IKsin(j0);
IkReal x8844=((0.1157)*cj5);
IkReal x8845=((0.1157)*sj5);
IkReal x8846=((0.612)*cj1);
IkReal x8847=((0.5723)*cj1*cj2);
IkReal x8848=((0.5723)*sj1*sj2);
evalcond[0]=((((-1.0)*x8842*x8848))+((x8842*x8847))+((x8842*x8846))+(((-1.0)*px))+(((-0.163941)*x8843))+(((-1.0)*r01*x8844))+(((-1.0)*r00*x8845)));
evalcond[1]=((((0.163941)*x8842))+(((-1.0)*r10*x8845))+(((-1.0)*py))+(((-1.0)*x8843*x8848))+((x8843*x8846))+((x8843*x8847))+(((-1.0)*r11*x8844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8849=((1.0)*cj5);
IkReal x8850=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8849)));
j4eval[0]=x8850;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8849))))));
j4eval[2]=IKsign(x8850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8851=((1.0)*cj5);
IkReal x8852=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8851)));
j4eval[0]=x8852;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8851))))));
j4eval[2]=IKsign(x8852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8853=((1.0)*sj0);
IkReal x8854=((1.0)*cj0);
IkReal x8855=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8855;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8853))+(((-1.0)*r01*sj5*x8854)))))+(IKabs(((((-1.0)*r12*x8853))+(((-1.0)*r02*x8854))))));
j4eval[2]=IKsign(x8855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8856=((-1.0)*r20);
IkReal x8858 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8858)==0){
continue;
}
IkReal x8857=pow(x8858,-0.5);
CheckValue<IkReal> x8859 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8856),IKFAST_ATAN2_MAGTHRESH);
if(!x8859.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8859.value));
IkReal gconst1=(r21*x8857);
IkReal gconst2=(x8856*x8857);
CheckValue<IkReal> x8860 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8860.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8860.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8861=((-1.0)*r20);
IkReal x8862=x8857;
CheckValue<IkReal> x8864 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8861),IKFAST_ATAN2_MAGTHRESH);
if(!x8864.valid){
continue;
}
IkReal x8863=((-1.0)*(x8864.value));
sj5=gconst1;
cj5=gconst2;
j5=x8863;
IkReal gconst0=x8863;
IkReal gconst1=(r21*x8862);
IkReal gconst2=(x8861*x8862);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8865=((-1.0)*r20);
IkReal x8866=x8857;
CheckValue<IkReal> x8868 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8865),IKFAST_ATAN2_MAGTHRESH);
if(!x8868.valid){
continue;
}
IkReal x8867=((-1.0)*(x8868.value));
sj5=gconst1;
cj5=gconst2;
j5=x8867;
IkReal gconst0=x8867;
IkReal gconst1=(r21*x8866);
IkReal gconst2=(x8865*x8866);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8869=((-1.0)*r20);
IkReal x8870=x8857;
CheckValue<IkReal> x8872 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8869),IKFAST_ATAN2_MAGTHRESH);
if(!x8872.valid){
continue;
}
IkReal x8871=((-1.0)*(x8872.value));
sj5=gconst1;
cj5=gconst2;
j5=x8871;
IkReal gconst0=x8871;
IkReal gconst1=(r21*x8870);
IkReal gconst2=(x8869*x8870);
IkReal x8873=r22*r22;
CheckValue<IkReal> x8877=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8873))),-1);
if(!x8877.valid){
continue;
}
IkReal x8874=x8877.value;
IkReal x8875=(sj3*x8874);
IkReal x8876=(((x8875*(r21*r21*r21*r21)))+((sj3*x8873))+((x8875*(r20*r20*r20*r20)))+(((2.0)*x8875*(r20*r20)*(r21*r21))));
j4eval[0]=x8876;
j4eval[1]=IKsign(x8876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8878=((-1.0)*r20);
IkReal x8879=x8857;
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8878),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
IkReal x8880=((-1.0)*(x8881.value));
sj5=gconst1;
cj5=gconst2;
j5=x8880;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8880;
IkReal gconst1=(r21*x8879);
IkReal gconst2=(x8878*x8879);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8882=((-1.0)*r20);
IkReal x8883=x8857;
CheckValue<IkReal> x8885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8882),IKFAST_ATAN2_MAGTHRESH);
if(!x8885.valid){
continue;
}
IkReal x8884=((-1.0)*(x8885.value));
sj5=gconst1;
cj5=gconst2;
j5=x8884;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8884;
IkReal gconst1=(r21*x8883);
IkReal gconst2=(x8882*x8883);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8886=((-1.0)*r20);
IkReal x8887=x8857;
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8886),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
IkReal x8888=((-1.0)*(x8889.value));
sj5=gconst1;
cj5=gconst2;
j5=x8888;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8888;
IkReal gconst1=(r21*x8887);
IkReal gconst2=(x8886*x8887);
IkReal x8890=((1.0)*(r22*r22));
CheckValue<IkReal> x8894=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8890))),-1);
if(!x8894.valid){
continue;
}
IkReal x8891=x8894.value;
IkReal x8892=((1.0)*x8891);
IkReal x8893=((((-2.0)*x8891*(r20*r20)*(r21*r21)))+(((-1.0)*x8892*(r20*r20*r20*r20)))+(((-1.0)*x8892*(r21*r21*r21*r21)))+(((-1.0)*x8890)));
j4eval[0]=x8893;
j4eval[1]=IKsign(x8893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8895=((-1.0)*r20);
IkReal x8896=x8857;
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8895),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
IkReal x8897=((-1.0)*(x8898.value));
sj5=gconst1;
cj5=gconst2;
j5=x8897;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8897;
IkReal gconst1=(r21*x8896);
IkReal gconst2=(x8895*x8896);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8899=((-1.0)*r20);
IkReal x8900=x8857;
CheckValue<IkReal> x8902 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8899),IKFAST_ATAN2_MAGTHRESH);
if(!x8902.valid){
continue;
}
IkReal x8901=((-1.0)*(x8902.value));
sj5=gconst1;
cj5=gconst2;
j5=x8901;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8901;
IkReal gconst1=(r21*x8900);
IkReal gconst2=(x8899*x8900);
IkReal x8903=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(x8903,-1);
if(!x8907.valid){
continue;
}
IkReal x8904=x8907.value;
IkReal x8905=((1.0)*x8904);
IkReal x8906=((((-1.0)*x8905*(r11*r11)*(r21*r21)))+(((-1.0)*x8905*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8904))+(((-1.0)*(r12*r12))));
j4eval[0]=x8906;
j4eval[1]=r12;
j4eval[2]=x8903;
j4eval[3]=IKsign(x8906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8908=((-1.0)*r20);
IkReal x8909=x8857;
CheckValue<IkReal> x8911 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8908),IKFAST_ATAN2_MAGTHRESH);
if(!x8911.valid){
continue;
}
IkReal x8910=((-1.0)*(x8911.value));
sj5=gconst1;
cj5=gconst2;
j5=x8910;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8910;
IkReal gconst1=(r21*x8909);
IkReal gconst2=(x8908*x8909);
IkReal x8912=r22*r22;
IkReal x8913=(cj1*r12*sj2);
IkReal x8914=(cj2*r12*sj1);
CheckValue<IkReal> x8918=IKPowWithIntegerCheck(((-1.0)+x8912),-1);
if(!x8918.valid){
continue;
}
IkReal x8915=x8918.value;
if((((1.0)+(((-1.0)*x8912)))) < -0.00001)
continue;
IkReal x8916=IKsqrt(((1.0)+(((-1.0)*x8912))));
IkReal x8917=(r22*x8915*x8916);
j4eval[0]=((IKabs(((((-1.0)*x8913))+(((-1.0)*x8914)))))+(IKabs((((x8913*x8917))+((x8914*x8917))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8919=(cj1*sj2);
IkReal x8920=(cj2*sj1);
IkReal x8921=((1.0)*r12);
IkReal x8922=(gconst1*r11);
IkReal x8923=((1.0)*gconst2*r10);
CheckValue<IkReal> x8924=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8924.valid){
continue;
}
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal(((((-1.0)*x8919*x8923))+((x8920*x8922))+(((-1.0)*x8920*x8923))+((x8919*x8922)))),IkReal(((((-1.0)*x8919*x8921))+(((-1.0)*x8920*x8921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8924.value)))+(x8925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8926=IKcos(j4);
IkReal x8927=IKsin(j4);
IkReal x8928=((1.0)*x8926);
IkReal x8929=(gconst1*x8926);
IkReal x8930=(gconst1*x8927);
IkReal x8931=((1.0)*gconst2*x8927);
evalcond[0]=((((-1.0)*gconst2*r10*x8928))+((r12*x8927))+((r11*x8929)));
evalcond[1]=((((-1.0)*r22*x8928))+(((-1.0)*r20*x8931))+((r21*x8930)));
evalcond[2]=((((-1.0)*r02*x8928))+(((-1.0)*r00*x8931))+((r01*x8930)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8931))+(((-1.0)*r12*x8928))+((r11*x8930)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8928))+((cj1*sj2))+((r22*x8927))+((r21*x8929)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8927))+(((-1.0)*gconst2*r00*x8928))+((r01*x8929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8932=(gconst2*r10);
IkReal x8933=(gconst1*r11);
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal((x8933+(((-1.0)*x8932)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
CheckValue<IkReal> x8935=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8932*x8932)))+(((-1.0)*(x8933*x8933)))+(((2.0)*x8932*x8933))+(((-1.0)*(r12*r12))))),-1);
if(!x8935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8934.value)+(((1.5707963267949)*(x8935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8936=IKcos(j4);
IkReal x8937=IKsin(j4);
IkReal x8938=((1.0)*x8936);
IkReal x8939=(gconst1*x8936);
IkReal x8940=(gconst1*x8937);
IkReal x8941=((1.0)*gconst2*x8937);
evalcond[0]=(((r12*x8937))+(((-1.0)*gconst2*r10*x8938))+((r11*x8939)));
evalcond[1]=((((-1.0)*r22*x8938))+((r21*x8940))+(((-1.0)*r20*x8941)));
evalcond[2]=((((-1.0)*r00*x8941))+((r01*x8940))+(((-1.0)*r02*x8938)));
evalcond[3]=((1.0)+((r11*x8940))+(((-1.0)*r12*x8938))+(((-1.0)*r10*x8941)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8938))+((r21*x8939))+((r22*x8937)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8938))+((r01*x8939))+((r02*x8937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8942=((1.0)*gconst2);
CheckValue<IkReal> x8943 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8943.valid){
continue;
}
CheckValue<IkReal> x8944=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8942))+(((-1.0)*gconst1*r00)))),-1);
if(!x8944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8943.value)+(((1.5707963267949)*(x8944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8945=IKcos(j4);
IkReal x8946=IKsin(j4);
IkReal x8947=((1.0)*x8945);
IkReal x8948=(gconst1*x8945);
IkReal x8949=(gconst1*x8946);
IkReal x8950=((1.0)*gconst2*x8946);
evalcond[0]=(((r11*x8948))+(((-1.0)*gconst2*r10*x8947))+((r12*x8946)));
evalcond[1]=((((-1.0)*r22*x8947))+(((-1.0)*r20*x8950))+((r21*x8949)));
evalcond[2]=((((-1.0)*r00*x8950))+((r01*x8949))+(((-1.0)*r02*x8947)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8950))+((r11*x8949))+(((-1.0)*r12*x8947)));
evalcond[4]=(((cj2*sj1))+((r22*x8946))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8947))+((r21*x8948)));
evalcond[5]=(((r02*x8946))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8948))+(((-1.0)*gconst2*r00*x8947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8951=((-1.0)*r20);
IkReal x8952=x8857;
CheckValue<IkReal> x8954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8951),IKFAST_ATAN2_MAGTHRESH);
if(!x8954.valid){
continue;
}
IkReal x8953=((-1.0)*(x8954.value));
sj5=gconst1;
cj5=gconst2;
j5=x8953;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8953;
IkReal gconst1=(r21*x8952);
IkReal gconst2=(x8951*x8952);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8955=((-1.0)*r20);
IkReal x8956=x8857;
CheckValue<IkReal> x8958 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8955),IKFAST_ATAN2_MAGTHRESH);
if(!x8958.valid){
continue;
}
IkReal x8957=((-1.0)*(x8958.value));
sj5=gconst1;
cj5=gconst2;
j5=x8957;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8957;
IkReal gconst1=(r21*x8956);
IkReal gconst2=(x8955*x8956);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8959=((-1.0)*r20);
IkReal x8960=x8857;
CheckValue<IkReal> x8962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8959),IKFAST_ATAN2_MAGTHRESH);
if(!x8962.valid){
continue;
}
IkReal x8961=((-1.0)*(x8962.value));
sj5=gconst1;
cj5=gconst2;
j5=x8961;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8961;
IkReal gconst1=(r21*x8960);
IkReal gconst2=(x8959*x8960);
IkReal x8963=r22*r22;
IkReal x8964=(cj1*r12*sj2);
IkReal x8965=(cj2*r12*sj1);
CheckValue<IkReal> x8969=IKPowWithIntegerCheck(((-1.0)+x8963),-1);
if(!x8969.valid){
continue;
}
IkReal x8966=x8969.value;
if((((1.0)+(((-1.0)*x8963)))) < -0.00001)
continue;
IkReal x8967=IKsqrt(((1.0)+(((-1.0)*x8963))));
IkReal x8968=(r22*x8966*x8967);
j4eval[0]=((IKabs((((x8964*x8968))+((x8965*x8968)))))+(IKabs(((((-1.0)*x8965))+(((-1.0)*x8964))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8970=(cj1*sj2);
IkReal x8971=(cj2*sj1);
IkReal x8972=((1.0)*r12);
IkReal x8973=(gconst1*r11);
IkReal x8974=((1.0)*gconst2*r10);
CheckValue<IkReal> x8975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8975.valid){
continue;
}
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal((((x8971*x8973))+((x8970*x8973))+(((-1.0)*x8971*x8974))+(((-1.0)*x8970*x8974)))),IkReal(((((-1.0)*x8971*x8972))+(((-1.0)*x8970*x8972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8975.value)))+(x8976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8977=IKcos(j4);
IkReal x8978=IKsin(j4);
IkReal x8979=((1.0)*x8977);
IkReal x8980=(gconst1*x8977);
IkReal x8981=(gconst1*x8978);
IkReal x8982=((1.0)*gconst2*x8978);
evalcond[0]=(((r12*x8978))+((r11*x8980))+(((-1.0)*gconst2*r10*x8979)));
evalcond[1]=((((-1.0)*r22*x8979))+(((-1.0)*r20*x8982))+((r21*x8981)));
evalcond[2]=(((r01*x8981))+(((-1.0)*r02*x8979))+(((-1.0)*r00*x8982)));
evalcond[3]=((-1.0)+((r11*x8981))+(((-1.0)*r12*x8979))+(((-1.0)*r10*x8982)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8979))+((cj1*sj2))+((r21*x8980))+((r22*x8978)));
evalcond[5]=(((r01*x8980))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8979))+((cj1*cj2))+((r02*x8978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8983=(gconst1*r11);
IkReal x8984=(gconst2*r10);
CheckValue<IkReal> x8985=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8983*x8984))+(x8984*x8984)+(x8983*x8983))),-1);
if(!x8985.valid){
continue;
}
CheckValue<IkReal> x8986 = IKatan2WithCheck(IkReal(((((-1.0)*x8984))+x8983)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8985.value)))+(x8986.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8987=IKcos(j4);
IkReal x8988=IKsin(j4);
IkReal x8989=((1.0)*x8987);
IkReal x8990=(gconst1*x8987);
IkReal x8991=(gconst1*x8988);
IkReal x8992=((1.0)*gconst2*x8988);
evalcond[0]=(((r11*x8990))+(((-1.0)*gconst2*r10*x8989))+((r12*x8988)));
evalcond[1]=(((r21*x8991))+(((-1.0)*r22*x8989))+(((-1.0)*r20*x8992)));
evalcond[2]=((((-1.0)*r02*x8989))+((r01*x8991))+(((-1.0)*r00*x8992)));
evalcond[3]=((-1.0)+((r11*x8991))+(((-1.0)*r10*x8992))+(((-1.0)*r12*x8989)));
evalcond[4]=((((-1.0)*gconst2*r20*x8989))+((cj2*sj1))+((r22*x8988))+((r21*x8990))+((cj1*sj2)));
evalcond[5]=(((r02*x8988))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8989))+((r01*x8990))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8993 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8993.valid){
continue;
}
CheckValue<IkReal> x8994=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8993.value)+(((1.5707963267949)*(x8994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8995=IKcos(j4);
IkReal x8996=IKsin(j4);
IkReal x8997=((1.0)*x8995);
IkReal x8998=(gconst1*x8995);
IkReal x8999=(gconst1*x8996);
IkReal x9000=((1.0)*gconst2*x8996);
evalcond[0]=(((r11*x8998))+((r12*x8996))+(((-1.0)*gconst2*r10*x8997)));
evalcond[1]=(((r21*x8999))+(((-1.0)*r22*x8997))+(((-1.0)*r20*x9000)));
evalcond[2]=(((r01*x8999))+(((-1.0)*r00*x9000))+(((-1.0)*r02*x8997)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8997))+((r11*x8999))+(((-1.0)*r10*x9000)));
evalcond[4]=(((cj2*sj1))+((r21*x8998))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8997))+((r22*x8996)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8998))+(((-1.0)*gconst2*r00*x8997))+((cj1*cj2))+((r02*x8996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9001=((-1.0)*r20);
IkReal x9002=x8857;
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9001),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
IkReal x9003=((-1.0)*(x9004.value));
sj5=gconst1;
cj5=gconst2;
j5=x9003;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9003;
IkReal gconst1=(r21*x9002);
IkReal gconst2=(x9001*x9002);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9005=((-1.0)*r20);
IkReal x9006=x8857;
CheckValue<IkReal> x9008 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9005),IKFAST_ATAN2_MAGTHRESH);
if(!x9008.valid){
continue;
}
IkReal x9007=((-1.0)*(x9008.value));
sj5=gconst1;
cj5=gconst2;
j5=x9007;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9007;
IkReal gconst1=(r21*x9006);
IkReal gconst2=(x9005*x9006);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9009=((-1.0)*r20);
IkReal x9010=x8857;
CheckValue<IkReal> x9012 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9009),IKFAST_ATAN2_MAGTHRESH);
if(!x9012.valid){
continue;
}
IkReal x9011=((-1.0)*(x9012.value));
sj5=gconst1;
cj5=gconst2;
j5=x9011;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9011;
IkReal gconst1=(r21*x9010);
IkReal gconst2=(x9009*x9010);
IkReal x9013=r22*r22;
IkReal x9014=((1.0)*r02);
IkReal x9015=(cj1*sj2);
IkReal x9016=(cj2*sj1);
CheckValue<IkReal> x9020=IKPowWithIntegerCheck(((-1.0)+x9013),-1);
if(!x9020.valid){
continue;
}
IkReal x9017=x9020.value;
if((((1.0)+(((-1.0)*x9013)))) < -0.00001)
continue;
IkReal x9018=IKsqrt(((1.0)+(((-1.0)*x9013))));
IkReal x9019=(r02*r22*x9017*x9018);
j4eval[0]=((IKabs(((((-1.0)*x9014*x9016))+(((-1.0)*x9014*x9015)))))+(IKabs((((x9015*x9019))+((x9016*x9019))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9021=(cj1*sj2);
IkReal x9022=(gconst1*r01);
IkReal x9023=((1.0)*r02);
IkReal x9024=(cj2*sj1);
IkReal x9025=((1.0)*gconst2*r00);
CheckValue<IkReal> x9026=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9026.valid){
continue;
}
CheckValue<IkReal> x9027 = IKatan2WithCheck(IkReal(((((-1.0)*x9021*x9025))+(((-1.0)*x9024*x9025))+((x9022*x9024))+((x9021*x9022)))),IkReal(((((-1.0)*x9023*x9024))+(((-1.0)*x9021*x9023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9026.value)))+(x9027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9028=IKcos(j4);
IkReal x9029=IKsin(j4);
IkReal x9030=((1.0)*x9028);
IkReal x9031=(gconst1*x9028);
IkReal x9032=(gconst1*x9029);
IkReal x9033=((1.0)*gconst2*x9029);
evalcond[0]=(((r01*x9031))+((r02*x9029))+(((-1.0)*gconst2*r00*x9030)));
evalcond[1]=(((r21*x9032))+(((-1.0)*r20*x9033))+(((-1.0)*r22*x9030)));
evalcond[2]=((((-1.0)*r10*x9033))+(((-1.0)*r12*x9030))+((r11*x9032)));
evalcond[3]=((-1.0)+((r01*x9032))+(((-1.0)*r00*x9033))+(((-1.0)*r02*x9030)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9030))+((cj1*sj2))+((r22*x9029))+((r21*x9031)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9030))+((r11*x9031))+((r12*x9029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9034=(gconst1*r01);
IkReal x9035=(gconst2*r00);
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal((x9034+(((-1.0)*x9035)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
CheckValue<IkReal> x9037=IKPowWithIntegerCheck(IKsign(((x9034*x9034)+(x9035*x9035)+(((-2.0)*x9034*x9035))+(r02*r02))),-1);
if(!x9037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9036.value)+(((1.5707963267949)*(x9037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9038=IKcos(j4);
IkReal x9039=IKsin(j4);
IkReal x9040=((1.0)*x9038);
IkReal x9041=(gconst1*x9038);
IkReal x9042=(gconst1*x9039);
IkReal x9043=((1.0)*gconst2*x9039);
evalcond[0]=(((r01*x9041))+((r02*x9039))+(((-1.0)*gconst2*r00*x9040)));
evalcond[1]=((((-1.0)*r22*x9040))+(((-1.0)*r20*x9043))+((r21*x9042)));
evalcond[2]=((((-1.0)*r10*x9043))+(((-1.0)*r12*x9040))+((r11*x9042)));
evalcond[3]=((-1.0)+((r01*x9042))+(((-1.0)*r00*x9043))+(((-1.0)*r02*x9040)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9039))+((r21*x9041))+(((-1.0)*gconst2*r20*x9040)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9041))+((r12*x9039))+(((-1.0)*gconst2*r10*x9040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9044=((1.0)*gconst2);
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9044)))),-1);
if(!x9046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9045.value)+(((1.5707963267949)*(x9046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9047=IKcos(j4);
IkReal x9048=IKsin(j4);
IkReal x9049=((1.0)*x9047);
IkReal x9050=(gconst1*x9047);
IkReal x9051=(gconst1*x9048);
IkReal x9052=((1.0)*gconst2*x9048);
evalcond[0]=(((r01*x9050))+(((-1.0)*gconst2*r00*x9049))+((r02*x9048)));
evalcond[1]=((((-1.0)*r22*x9049))+(((-1.0)*r20*x9052))+((r21*x9051)));
evalcond[2]=((((-1.0)*r10*x9052))+((r11*x9051))+(((-1.0)*r12*x9049)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9052))+((r01*x9051))+(((-1.0)*r02*x9049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9048))+(((-1.0)*gconst2*r20*x9049))+((r21*x9050)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9048))+((r11*x9050))+(((-1.0)*gconst2*r10*x9049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9053=((-1.0)*r20);
IkReal x9054=x8857;
CheckValue<IkReal> x9056 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9053),IKFAST_ATAN2_MAGTHRESH);
if(!x9056.valid){
continue;
}
IkReal x9055=((-1.0)*(x9056.value));
sj5=gconst1;
cj5=gconst2;
j5=x9055;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9055;
IkReal gconst1=(r21*x9054);
IkReal gconst2=(x9053*x9054);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9057=((-1.0)*r20);
IkReal x9058=x8857;
CheckValue<IkReal> x9060 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9057),IKFAST_ATAN2_MAGTHRESH);
if(!x9060.valid){
continue;
}
IkReal x9059=((-1.0)*(x9060.value));
sj5=gconst1;
cj5=gconst2;
j5=x9059;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9059;
IkReal gconst1=(r21*x9058);
IkReal gconst2=(x9057*x9058);
IkReal x9061=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9065=IKPowWithIntegerCheck(x9061,-1);
if(!x9065.valid){
continue;
}
IkReal x9062=x9065.value;
IkReal x9063=((1.0)*x9062);
IkReal x9064=((((-1.0)*x9063*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9063*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9062)));
j4eval[0]=x9064;
j4eval[1]=IKsign(x9064);
j4eval[2]=r02;
j4eval[3]=x9061;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9066=((-1.0)*r20);
IkReal x9067=x8857;
CheckValue<IkReal> x9069 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9066),IKFAST_ATAN2_MAGTHRESH);
if(!x9069.valid){
continue;
}
IkReal x9068=((-1.0)*(x9069.value));
sj5=gconst1;
cj5=gconst2;
j5=x9068;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9068;
IkReal gconst1=(r21*x9067);
IkReal gconst2=(x9066*x9067);
IkReal x9070=r22*r22;
IkReal x9071=((1.0)*r02);
IkReal x9072=(cj1*sj2);
IkReal x9073=(cj2*sj1);
CheckValue<IkReal> x9077=IKPowWithIntegerCheck(((-1.0)+x9070),-1);
if(!x9077.valid){
continue;
}
IkReal x9074=x9077.value;
if((((1.0)+(((-1.0)*x9070)))) < -0.00001)
continue;
IkReal x9075=IKsqrt(((1.0)+(((-1.0)*x9070))));
IkReal x9076=(r02*r22*x9074*x9075);
j4eval[0]=((IKabs((((x9073*x9076))+((x9072*x9076)))))+(IKabs(((((-1.0)*x9071*x9072))+(((-1.0)*x9071*x9073))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9078=(cj1*sj2);
IkReal x9079=(gconst1*r01);
IkReal x9080=((1.0)*r02);
IkReal x9081=(cj2*sj1);
IkReal x9082=((1.0)*gconst2*r00);
CheckValue<IkReal> x9083 = IKatan2WithCheck(IkReal((((x9078*x9079))+(((-1.0)*x9081*x9082))+((x9079*x9081))+(((-1.0)*x9078*x9082)))),IkReal(((((-1.0)*x9080*x9081))+(((-1.0)*x9078*x9080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9083.valid){
continue;
}
CheckValue<IkReal> x9084=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9083.value)+(((1.5707963267949)*(x9084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9085=IKcos(j4);
IkReal x9086=IKsin(j4);
IkReal x9087=((1.0)*x9085);
IkReal x9088=(gconst1*x9085);
IkReal x9089=(gconst1*x9086);
IkReal x9090=((1.0)*gconst2*x9086);
evalcond[0]=((((-1.0)*gconst2*r00*x9087))+((r01*x9088))+((r02*x9086)));
evalcond[1]=((((-1.0)*r20*x9090))+((r21*x9089))+(((-1.0)*r22*x9087)));
evalcond[2]=(((r11*x9089))+(((-1.0)*r10*x9090))+(((-1.0)*r12*x9087)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9090))+((r01*x9089))+(((-1.0)*r02*x9087)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9087))+((cj1*sj2))+((r21*x9088))+((r22*x9086)));
evalcond[5]=(((r11*x9088))+((r12*x9086))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9087))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9091=(gconst1*r01);
IkReal x9092=(gconst2*r00);
CheckValue<IkReal> x9093 = IKatan2WithCheck(IkReal((x9091+(((-1.0)*x9092)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9093.valid){
continue;
}
CheckValue<IkReal> x9094=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9091*x9091)))+(((2.0)*x9091*x9092))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9092*x9092))))),-1);
if(!x9094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9093.value)+(((1.5707963267949)*(x9094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9095=IKcos(j4);
IkReal x9096=IKsin(j4);
IkReal x9097=((1.0)*x9095);
IkReal x9098=(gconst1*x9095);
IkReal x9099=(gconst1*x9096);
IkReal x9100=((1.0)*gconst2*x9096);
evalcond[0]=((((-1.0)*gconst2*r00*x9097))+((r01*x9098))+((r02*x9096)));
evalcond[1]=((((-1.0)*r20*x9100))+((r21*x9099))+(((-1.0)*r22*x9097)));
evalcond[2]=(((r11*x9099))+(((-1.0)*r10*x9100))+(((-1.0)*r12*x9097)));
evalcond[3]=((1.0)+((r01*x9099))+(((-1.0)*r00*x9100))+(((-1.0)*r02*x9097)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9097))+((cj1*sj2))+((r21*x9098))+((r22*x9096)));
evalcond[5]=(((r11*x9098))+(((-1.0)*sj1*sj2))+((r12*x9096))+(((-1.0)*gconst2*r10*x9097))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9101 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9101.valid){
continue;
}
CheckValue<IkReal> x9102=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9101.value)+(((1.5707963267949)*(x9102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9103=IKcos(j4);
IkReal x9104=IKsin(j4);
IkReal x9105=((1.0)*x9103);
IkReal x9106=(gconst1*x9103);
IkReal x9107=(gconst1*x9104);
IkReal x9108=((1.0)*gconst2*x9104);
evalcond[0]=(((r02*x9104))+(((-1.0)*gconst2*r00*x9105))+((r01*x9106)));
evalcond[1]=((((-1.0)*r22*x9105))+((r21*x9107))+(((-1.0)*r20*x9108)));
evalcond[2]=((((-1.0)*r10*x9108))+(((-1.0)*r12*x9105))+((r11*x9107)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9105))+(((-1.0)*r00*x9108))+((r01*x9107)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9104))+((r21*x9106))+(((-1.0)*gconst2*r20*x9105)));
evalcond[5]=((((-1.0)*gconst2*r10*x9105))+(((-1.0)*sj1*sj2))+((r12*x9104))+((r11*x9106))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9109=((-1.0)*r20);
IkReal x9110=((-1.0)*px);
CheckValue<IkReal> x9112 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9109),IKFAST_ATAN2_MAGTHRESH);
if(!x9112.valid){
continue;
}
IkReal x9111=((-1.0)*(x9112.value));
sj5=gconst1;
cj5=gconst2;
j5=x9111;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9110);
rxp1_1=(px*r21);
rxp1_2=(r11*x9110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9111;
IkReal gconst1=r21;
IkReal gconst2=x9109;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9113=((-1.0)*r20);
IkReal x9114=((-1.0)*px);
CheckValue<IkReal> x9116 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9113),IKFAST_ATAN2_MAGTHRESH);
if(!x9116.valid){
continue;
}
IkReal x9115=((-1.0)*(x9116.value));
sj5=gconst1;
cj5=gconst2;
j5=x9115;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9114);
rxp1_1=(px*r21);
rxp1_2=(r11*x9114);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9115;
IkReal gconst1=r21;
IkReal gconst2=x9113;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9117=((-1.0)*r20);
IkReal x9118=((-1.0)*px);
CheckValue<IkReal> x9120 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9117),IKFAST_ATAN2_MAGTHRESH);
if(!x9120.valid){
continue;
}
IkReal x9119=((-1.0)*(x9120.value));
sj5=gconst1;
cj5=gconst2;
j5=x9119;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9118);
rxp1_1=(px*r21);
rxp1_2=(r11*x9118);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9119;
IkReal gconst1=r21;
IkReal gconst2=x9117;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9123=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9123.valid){
continue;
}
IkReal x9121=x9123.value;
IkReal x9122=(sj0*x9121);
cj4array[0]=(((cj1*cj2*x9122))+(((-1.0)*sj1*sj2*x9122)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9124=IKsin(j4);
IkReal x9125=IKcos(j4);
IkReal x9126=((1.0)*gconst2);
IkReal x9127=(gconst1*r21);
evalcond[0]=(r02*x9124);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9125)));
evalcond[2]=(((x9124*x9127))+(((-1.0)*r20*x9124*x9126)));
evalcond[3]=((((-1.0)*r10*x9124*x9126))+((gconst1*r11*x9124)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x9125*x9127))+(((-1.0)*r20*x9125*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9130=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9130.valid){
continue;
}
IkReal x9128=x9130.value;
IkReal x9129=((1.0)*x9128);
cj4array[0]=((((-1.0)*cj1*sj2*x9129))+(((-1.0)*cj2*sj1*x9129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9131=IKsin(j4);
IkReal x9132=IKcos(j4);
IkReal x9133=((1.0)*sj0);
IkReal x9134=(gconst1*x9131);
IkReal x9135=((1.0)*x9132);
IkReal x9136=((1.0)*gconst2*x9131);
evalcond[0]=(r02*x9131);
evalcond[1]=((((-1.0)*r02*x9135))+(((-1.0)*x9133)));
evalcond[2]=((((-1.0)*r20*x9136))+((r21*x9134)));
evalcond[3]=((((-1.0)*r10*x9136))+((r11*x9134)));
evalcond[4]=((((-1.0)*gconst2*r10*x9135))+((sj0*sj1*sj2))+((gconst1*r11*x9132))+(((-1.0)*cj1*cj2*x9133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9137=IKPowWithIntegerCheck(r02,-1);
if(!x9137.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9137.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9138=IKsin(j4);
IkReal x9139=IKcos(j4);
IkReal x9140=(gconst1*r21);
IkReal x9141=(gconst1*r11);
IkReal x9142=((1.0)*gconst2*r10);
IkReal x9143=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9138);
evalcond[1]=(((x9138*x9140))+(((-1.0)*x9138*x9143)));
evalcond[2]=(((x9138*x9141))+(((-1.0)*x9138*x9142)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9139*x9140))+(((-1.0)*x9139*x9143)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x9139*x9141))+((sj0*sj1*sj2))+(((-1.0)*x9139*x9142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9144=(cj2*sj1);
IkReal x9145=(cj1*sj2);
IkReal x9146=(gconst1*r21);
IkReal x9147=((1.0)*gconst2*r20);
CheckValue<IkReal> x9148=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9147))+(((2.0)*gconst2*r20*x9146))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9146*x9146))))),-1);
if(!x9148.valid){
continue;
}
CheckValue<IkReal> x9149 = IKatan2WithCheck(IkReal((((r22*x9144))+((r22*x9145)))),IkReal((((x9145*x9146))+((x9144*x9146))+(((-1.0)*x9144*x9147))+(((-1.0)*x9145*x9147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9148.value)))+(x9149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9150=IKsin(j4);
IkReal x9151=IKcos(j4);
IkReal x9152=(sj1*sj2);
IkReal x9153=(gconst2*r10);
IkReal x9154=(gconst2*r00);
IkReal x9155=(gconst2*r20);
IkReal x9156=((1.0)*x9151);
IkReal x9157=(gconst1*x9151);
IkReal x9158=((1.0)*cj1*cj2);
IkReal x9159=(gconst1*x9150);
IkReal x9160=((1.0)*x9150);
evalcond[0]=((((-1.0)*x9155*x9160))+(((-1.0)*r22*x9156))+((r21*x9159)));
evalcond[1]=(((r11*x9159))+cj0+(((-1.0)*r12*x9156))+(((-1.0)*x9153*x9160)));
evalcond[2]=((((-1.0)*r02*x9156))+(((-1.0)*sj0))+(((-1.0)*x9154*x9160))+((r01*x9159)));
evalcond[3]=(((cj2*sj1))+((r22*x9150))+((cj1*sj2))+((r21*x9157))+(((-1.0)*x9155*x9156)));
evalcond[4]=(((cj0*x9152))+((r02*x9150))+(((-1.0)*cj0*x9158))+((r01*x9157))+(((-1.0)*x9154*x9156)));
evalcond[5]=(((r11*x9157))+(((-1.0)*x9153*x9156))+((sj0*x9152))+(((-1.0)*sj0*x9158))+((r12*x9150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9161=((1.0)*gconst2);
CheckValue<IkReal> x9162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9161))+(((-1.0)*gconst1*r10)))),-1);
if(!x9162.valid){
continue;
}
CheckValue<IkReal> x9163 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9161))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9162.value)))+(x9163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9164=IKsin(j4);
IkReal x9165=IKcos(j4);
IkReal x9166=(sj1*sj2);
IkReal x9167=(gconst2*r10);
IkReal x9168=(gconst2*r00);
IkReal x9169=(gconst2*r20);
IkReal x9170=((1.0)*x9165);
IkReal x9171=(gconst1*x9165);
IkReal x9172=((1.0)*cj1*cj2);
IkReal x9173=(gconst1*x9164);
IkReal x9174=((1.0)*x9164);
evalcond[0]=((((-1.0)*x9169*x9174))+((r21*x9173))+(((-1.0)*r22*x9170)));
evalcond[1]=((((-1.0)*x9167*x9174))+cj0+(((-1.0)*r12*x9170))+((r11*x9173)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9168*x9174))+((r01*x9173))+(((-1.0)*r02*x9170)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9169*x9170))+((cj1*sj2))+((r22*x9164))+((r21*x9171)));
evalcond[4]=((((-1.0)*x9168*x9170))+(((-1.0)*cj0*x9172))+((r02*x9164))+((r01*x9171))+((cj0*x9166)));
evalcond[5]=((((-1.0)*x9167*x9170))+((sj0*x9166))+((r12*x9164))+((r11*x9171))+(((-1.0)*sj0*x9172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9175=((1.0)*gconst2);
CheckValue<IkReal> x9176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9175))+(((-1.0)*gconst1*r00)))),-1);
if(!x9176.valid){
continue;
}
CheckValue<IkReal> x9177 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9176.value)))+(x9177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9178=IKsin(j4);
IkReal x9179=IKcos(j4);
IkReal x9180=(sj1*sj2);
IkReal x9181=(gconst2*r10);
IkReal x9182=(gconst2*r00);
IkReal x9183=(gconst2*r20);
IkReal x9184=((1.0)*x9179);
IkReal x9185=(gconst1*x9179);
IkReal x9186=((1.0)*cj1*cj2);
IkReal x9187=(gconst1*x9178);
IkReal x9188=((1.0)*x9178);
evalcond[0]=((((-1.0)*x9183*x9188))+(((-1.0)*r22*x9184))+((r21*x9187)));
evalcond[1]=((((-1.0)*r12*x9184))+((r11*x9187))+cj0+(((-1.0)*x9181*x9188)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9184))+(((-1.0)*x9182*x9188))+((r01*x9187)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9183*x9184))+((cj1*sj2))+((r21*x9185))+((r22*x9178)));
evalcond[4]=(((r02*x9178))+(((-1.0)*x9182*x9184))+(((-1.0)*cj0*x9186))+((cj0*x9180))+((r01*x9185)));
evalcond[5]=(((r11*x9185))+(((-1.0)*x9181*x9184))+((sj0*x9180))+((r12*x9178))+(((-1.0)*sj0*x9186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9189=((-1.0)*r20);
IkReal x9190=x8857;
CheckValue<IkReal> x9192 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9189),IKFAST_ATAN2_MAGTHRESH);
if(!x9192.valid){
continue;
}
IkReal x9191=((-1.0)*(x9192.value));
sj5=gconst1;
cj5=gconst2;
j5=x9191;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9191;
IkReal gconst1=(r21*x9190);
IkReal gconst2=(x9189*x9190);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9193=((-1.0)*r20);
IkReal x9194=x8857;
CheckValue<IkReal> x9196 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9193),IKFAST_ATAN2_MAGTHRESH);
if(!x9196.valid){
continue;
}
IkReal x9195=((-1.0)*(x9196.value));
sj5=gconst1;
cj5=gconst2;
j5=x9195;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9195;
IkReal gconst1=(r21*x9194);
IkReal gconst2=(x9193*x9194);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9197=((-1.0)*r20);
IkReal x9198=x8857;
CheckValue<IkReal> x9200 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9197),IKFAST_ATAN2_MAGTHRESH);
if(!x9200.valid){
continue;
}
IkReal x9199=((-1.0)*(x9200.value));
sj5=gconst1;
cj5=gconst2;
j5=x9199;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9199;
IkReal gconst1=(r21*x9198);
IkReal gconst2=(x9197*x9198);
IkReal x9201=r22*r22;
CheckValue<IkReal> x9204=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9201))),-1);
if(!x9204.valid){
continue;
}
IkReal x9202=x9204.value;
IkReal x9203=((((2.0)*x9202*(r20*r20)*(r21*r21)))+x9201+((x9202*(r21*r21*r21*r21)))+((x9202*(r20*r20*r20*r20))));
j4eval[0]=x9203;
j4eval[1]=IKsign(x9203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9205=((-1.0)*r20);
IkReal x9206=x8857;
CheckValue<IkReal> x9208 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9205),IKFAST_ATAN2_MAGTHRESH);
if(!x9208.valid){
continue;
}
IkReal x9207=((-1.0)*(x9208.value));
sj5=gconst1;
cj5=gconst2;
j5=x9207;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9207;
IkReal gconst1=(r21*x9206);
IkReal gconst2=(x9205*x9206);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9209=((-1.0)*r20);
IkReal x9210=x8857;
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9209),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
IkReal x9211=((-1.0)*(x9212.value));
sj5=gconst1;
cj5=gconst2;
j5=x9211;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9211;
IkReal gconst1=(r21*x9210);
IkReal gconst2=(x9209*x9210);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9213=((-1.0)*r20);
IkReal x9214=x8857;
CheckValue<IkReal> x9216 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9213),IKFAST_ATAN2_MAGTHRESH);
if(!x9216.valid){
continue;
}
IkReal x9215=((-1.0)*(x9216.value));
sj5=gconst1;
cj5=gconst2;
j5=x9215;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9215;
IkReal gconst1=(r21*x9214);
IkReal gconst2=(x9213*x9214);
IkReal x9217=r22*r22;
IkReal x9218=(cj1*r12*sj2);
IkReal x9219=(cj2*r12*sj1);
CheckValue<IkReal> x9223=IKPowWithIntegerCheck(((-1.0)+x9217),-1);
if(!x9223.valid){
continue;
}
IkReal x9220=x9223.value;
if((((1.0)+(((-1.0)*x9217)))) < -0.00001)
continue;
IkReal x9221=IKsqrt(((1.0)+(((-1.0)*x9217))));
IkReal x9222=((1.0)*r22*x9220*x9221);
j4eval[0]=((IKabs(((((-1.0)*x9219*x9222))+(((-1.0)*x9218*x9222)))))+(IKabs((x9218+x9219))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9224=((1.0)*gconst1);
IkReal x9225=(cj2*sj1);
IkReal x9226=(gconst2*r10);
IkReal x9227=(cj1*sj2);
CheckValue<IkReal> x9228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9224)))),-1);
if(!x9228.valid){
continue;
}
CheckValue<IkReal> x9229 = IKatan2WithCheck(IkReal((((x9225*x9226))+(((-1.0)*r11*x9224*x9225))+(((-1.0)*r11*x9224*x9227))+((x9226*x9227)))),IkReal((((r12*x9227))+((r12*x9225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9228.value)))+(x9229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9230=IKsin(j4);
IkReal x9231=IKcos(j4);
IkReal x9232=((1.0)*x9231);
IkReal x9233=(gconst2*x9231);
IkReal x9234=(gconst1*x9230);
IkReal x9235=((1.0)*x9230);
evalcond[0]=(((r21*x9234))+(((-1.0)*gconst2*r20*x9235))+(((-1.0)*r22*x9232)));
evalcond[1]=((((-1.0)*gconst2*r00*x9235))+((r01*x9234))+(((-1.0)*r02*x9232)));
evalcond[2]=((((-1.0)*r12*x9235))+((r10*x9233))+(((-1.0)*gconst1*r11*x9232)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9232))+(((-1.0)*gconst2*r10*x9235))+((r11*x9234)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9232))+((r20*x9233))+(((-1.0)*r22*x9235)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9232))+((r00*x9233))+(((-1.0)*r02*x9235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9236=(gconst1*r11);
IkReal x9237=(gconst2*r10);
CheckValue<IkReal> x9238=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9236*x9236)+(((-2.0)*x9236*x9237))+(x9237*x9237))),-1);
if(!x9238.valid){
continue;
}
CheckValue<IkReal> x9239 = IKatan2WithCheck(IkReal((x9237+(((-1.0)*x9236)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9238.value)))+(x9239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9240=IKsin(j4);
IkReal x9241=IKcos(j4);
IkReal x9242=((1.0)*x9241);
IkReal x9243=(gconst2*x9241);
IkReal x9244=(gconst1*x9240);
IkReal x9245=((1.0)*x9240);
evalcond[0]=((((-1.0)*r22*x9242))+((r21*x9244))+(((-1.0)*gconst2*r20*x9245)));
evalcond[1]=(((r01*x9244))+(((-1.0)*r02*x9242))+(((-1.0)*gconst2*r00*x9245)));
evalcond[2]=((((-1.0)*gconst1*r11*x9242))+(((-1.0)*r12*x9245))+((r10*x9243)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9245))+(((-1.0)*r12*x9242))+((r11*x9244)));
evalcond[4]=((((-1.0)*r22*x9245))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9242))+((r20*x9243)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9242))+((r00*x9243))+(((-1.0)*r02*x9245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9246=((1.0)*gconst2);
CheckValue<IkReal> x9247=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9246)))),-1);
if(!x9247.valid){
continue;
}
CheckValue<IkReal> x9248 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9246))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9247.value)))+(x9248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9249=IKsin(j4);
IkReal x9250=IKcos(j4);
IkReal x9251=((1.0)*x9250);
IkReal x9252=(gconst2*x9250);
IkReal x9253=(gconst1*x9249);
IkReal x9254=((1.0)*x9249);
evalcond[0]=((((-1.0)*r22*x9251))+((r21*x9253))+(((-1.0)*gconst2*r20*x9254)));
evalcond[1]=(((r01*x9253))+(((-1.0)*r02*x9251))+(((-1.0)*gconst2*r00*x9254)));
evalcond[2]=((((-1.0)*r12*x9254))+((r10*x9252))+(((-1.0)*gconst1*r11*x9251)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9251))+(((-1.0)*gconst2*r10*x9254))+((r11*x9253)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9254))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9251))+((r20*x9252)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9252))+(((-1.0)*gconst1*r01*x9251))+(((-1.0)*r02*x9254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9255=((-1.0)*r20);
IkReal x9256=x8857;
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9255),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
IkReal x9257=((-1.0)*(x9258.value));
sj5=gconst1;
cj5=gconst2;
j5=x9257;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9257;
IkReal gconst1=(r21*x9256);
IkReal gconst2=(x9255*x9256);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9259=((-1.0)*r20);
IkReal x9260=x8857;
CheckValue<IkReal> x9262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9259),IKFAST_ATAN2_MAGTHRESH);
if(!x9262.valid){
continue;
}
IkReal x9261=((-1.0)*(x9262.value));
sj5=gconst1;
cj5=gconst2;
j5=x9261;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9261;
IkReal gconst1=(r21*x9260);
IkReal gconst2=(x9259*x9260);
IkReal x9263=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9267=IKPowWithIntegerCheck(x9263,-1);
if(!x9267.valid){
continue;
}
IkReal x9264=x9267.value;
IkReal x9265=((1.0)*x9264);
IkReal x9266=((((-2.0)*r10*r11*r20*r21*x9264))+(((-1.0)*(r12*r12)))+(((-1.0)*x9265*(r11*r11)*(r21*r21)))+(((-1.0)*x9265*(r10*r10)*(r20*r20))));
j4eval[0]=x9266;
j4eval[1]=r12;
j4eval[2]=x9263;
j4eval[3]=IKsign(x9266);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9268=((-1.0)*r20);
IkReal x9269=x8857;
CheckValue<IkReal> x9271 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9268),IKFAST_ATAN2_MAGTHRESH);
if(!x9271.valid){
continue;
}
IkReal x9270=((-1.0)*(x9271.value));
sj5=gconst1;
cj5=gconst2;
j5=x9270;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9270;
IkReal gconst1=(r21*x9269);
IkReal gconst2=(x9268*x9269);
IkReal x9272=r22*r22;
IkReal x9273=(cj1*r12*sj2);
IkReal x9274=(cj2*r12*sj1);
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(((-1.0)+x9272),-1);
if(!x9278.valid){
continue;
}
IkReal x9275=x9278.value;
if((((1.0)+(((-1.0)*x9272)))) < -0.00001)
continue;
IkReal x9276=IKsqrt(((1.0)+(((-1.0)*x9272))));
IkReal x9277=((1.0)*r22*x9275*x9276);
j4eval[0]=((IKabs(((((-1.0)*x9273*x9277))+(((-1.0)*x9274*x9277)))))+(IKabs((x9273+x9274))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9279=((1.0)*gconst1);
IkReal x9280=(cj2*sj1);
IkReal x9281=(gconst2*r10);
IkReal x9282=(cj1*sj2);
CheckValue<IkReal> x9283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9279)))),-1);
if(!x9283.valid){
continue;
}
CheckValue<IkReal> x9284 = IKatan2WithCheck(IkReal((((x9281*x9282))+(((-1.0)*r11*x9279*x9282))+(((-1.0)*r11*x9279*x9280))+((x9280*x9281)))),IkReal((((r12*x9280))+((r12*x9282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9283.value)))+(x9284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9285=IKsin(j4);
IkReal x9286=IKcos(j4);
IkReal x9287=((1.0)*x9286);
IkReal x9288=(gconst2*x9286);
IkReal x9289=(gconst1*x9285);
IkReal x9290=((1.0)*x9285);
evalcond[0]=((((-1.0)*gconst2*r20*x9290))+(((-1.0)*r22*x9287))+((r21*x9289)));
evalcond[1]=((((-1.0)*gconst2*r00*x9290))+((r01*x9289))+(((-1.0)*r02*x9287)));
evalcond[2]=((((-1.0)*gconst1*r11*x9287))+((r10*x9288))+(((-1.0)*r12*x9290)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9287))+((r11*x9289))+(((-1.0)*gconst2*r10*x9290)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9287))+((cj1*sj2))+((r20*x9288))+(((-1.0)*r22*x9290)));
evalcond[5]=((((-1.0)*gconst1*r01*x9287))+(((-1.0)*sj1*sj2))+((r00*x9288))+(((-1.0)*r02*x9290))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9291=(gconst1*r11);
IkReal x9292=(gconst2*r10);
CheckValue<IkReal> x9293=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x9291*x9292))+(((-1.0)*(x9291*x9291)))+(((-1.0)*(x9292*x9292))))),-1);
if(!x9293.valid){
continue;
}
CheckValue<IkReal> x9294 = IKatan2WithCheck(IkReal((x9292+(((-1.0)*x9291)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9293.value)))+(x9294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9295=IKsin(j4);
IkReal x9296=IKcos(j4);
IkReal x9297=((1.0)*x9296);
IkReal x9298=(gconst2*x9296);
IkReal x9299=(gconst1*x9295);
IkReal x9300=((1.0)*x9295);
evalcond[0]=((((-1.0)*r22*x9297))+((r21*x9299))+(((-1.0)*gconst2*r20*x9300)));
evalcond[1]=(((r01*x9299))+(((-1.0)*gconst2*r00*x9300))+(((-1.0)*r02*x9297)));
evalcond[2]=((((-1.0)*gconst1*r11*x9297))+((r10*x9298))+(((-1.0)*r12*x9300)));
evalcond[3]=((-1.0)+((r11*x9299))+(((-1.0)*gconst2*r10*x9300))+(((-1.0)*r12*x9297)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9297))+((cj1*sj2))+((r20*x9298))+(((-1.0)*r22*x9300)));
evalcond[5]=(((r00*x9298))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9297))+(((-1.0)*r02*x9300))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
CheckValue<IkReal> x9302=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9301.value)+(((1.5707963267949)*(x9302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9303=IKsin(j4);
IkReal x9304=IKcos(j4);
IkReal x9305=((1.0)*x9304);
IkReal x9306=(gconst2*x9304);
IkReal x9307=(gconst1*x9303);
IkReal x9308=((1.0)*x9303);
evalcond[0]=(((r21*x9307))+(((-1.0)*r22*x9305))+(((-1.0)*gconst2*r20*x9308)));
evalcond[1]=((((-1.0)*gconst2*r00*x9308))+((r01*x9307))+(((-1.0)*r02*x9305)));
evalcond[2]=((((-1.0)*gconst1*r11*x9305))+((r10*x9306))+(((-1.0)*r12*x9308)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9308))+((r11*x9307))+(((-1.0)*r12*x9305)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9305))+((cj1*sj2))+((r20*x9306))+(((-1.0)*r22*x9308)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9305))+(((-1.0)*r02*x9308))+((r00*x9306))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9309=((-1.0)*r20);
IkReal x9310=x8857;
CheckValue<IkReal> x9312 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9309),IKFAST_ATAN2_MAGTHRESH);
if(!x9312.valid){
continue;
}
IkReal x9311=((-1.0)*(x9312.value));
sj5=gconst1;
cj5=gconst2;
j5=x9311;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9311;
IkReal gconst1=(r21*x9310);
IkReal gconst2=(x9309*x9310);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9313=((-1.0)*r20);
IkReal x9314=x8857;
CheckValue<IkReal> x9316 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9313),IKFAST_ATAN2_MAGTHRESH);
if(!x9316.valid){
continue;
}
IkReal x9315=((-1.0)*(x9316.value));
sj5=gconst1;
cj5=gconst2;
j5=x9315;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9315;
IkReal gconst1=(r21*x9314);
IkReal gconst2=(x9313*x9314);
IkReal x9317=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9321=IKPowWithIntegerCheck(x9317,-1);
if(!x9321.valid){
continue;
}
IkReal x9318=x9321.value;
IkReal x9319=((1.0)*x9318);
IkReal x9320=((((-2.0)*r00*r01*r20*r21*x9318))+(((-1.0)*x9319*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9319*(r01*r01)*(r21*r21))));
j4eval[0]=x9320;
j4eval[1]=IKsign(x9320);
j4eval[2]=r02;
j4eval[3]=x9317;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9322=((-1.0)*r20);
IkReal x9323=x8857;
CheckValue<IkReal> x9325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9322),IKFAST_ATAN2_MAGTHRESH);
if(!x9325.valid){
continue;
}
IkReal x9324=((-1.0)*(x9325.value));
sj5=gconst1;
cj5=gconst2;
j5=x9324;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9324;
IkReal gconst1=(r21*x9323);
IkReal gconst2=(x9322*x9323);
IkReal x9326=r22*r22;
IkReal x9327=(cj1*r02*sj2);
IkReal x9328=(cj2*r02*sj1);
CheckValue<IkReal> x9332=IKPowWithIntegerCheck(((-1.0)+x9326),-1);
if(!x9332.valid){
continue;
}
IkReal x9329=x9332.value;
if((((1.0)+(((-1.0)*x9326)))) < -0.00001)
continue;
IkReal x9330=IKsqrt(((1.0)+(((-1.0)*x9326))));
IkReal x9331=((1.0)*r22*x9329*x9330);
j4eval[0]=((IKabs(((((-1.0)*x9327*x9331))+(((-1.0)*x9328*x9331)))))+(IKabs((x9328+x9327))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9333=(cj2*sj1);
IkReal x9334=(cj1*sj2);
IkReal x9335=(gconst2*r00);
IkReal x9336=((1.0)*gconst1*r01);
CheckValue<IkReal> x9337 = IKatan2WithCheck(IkReal(((((-1.0)*x9333*x9336))+(((-1.0)*x9334*x9336))+((x9333*x9335))+((x9334*x9335)))),IkReal((((r02*x9334))+((r02*x9333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9337.valid){
continue;
}
CheckValue<IkReal> x9338=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9337.value)+(((1.5707963267949)*(x9338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9339=IKsin(j4);
IkReal x9340=IKcos(j4);
IkReal x9341=(gconst1*r11);
IkReal x9342=(gconst1*r21);
IkReal x9343=(gconst1*r01);
IkReal x9344=((1.0)*x9340);
IkReal x9345=(gconst2*x9340);
IkReal x9346=((1.0)*x9339);
evalcond[0]=(((x9339*x9342))+(((-1.0)*r22*x9344))+(((-1.0)*gconst2*r20*x9346)));
evalcond[1]=(((x9339*x9341))+(((-1.0)*r12*x9344))+(((-1.0)*gconst2*r10*x9346)));
evalcond[2]=((((-1.0)*x9343*x9344))+((r00*x9345))+(((-1.0)*r02*x9346)));
evalcond[3]=((-1.0)+((x9339*x9343))+(((-1.0)*r02*x9344))+(((-1.0)*gconst2*r00*x9346)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9346))+((cj1*sj2))+((r20*x9345))+(((-1.0)*x9342*x9344)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9345))+(((-1.0)*r12*x9346))+(((-1.0)*x9341*x9344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9347=(gconst2*r00);
IkReal x9348=(gconst1*r01);
CheckValue<IkReal> x9349=IKPowWithIntegerCheck(IKsign(((((2.0)*x9347*x9348))+(((-1.0)*(x9347*x9347)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9348*x9348))))),-1);
if(!x9349.valid){
continue;
}
CheckValue<IkReal> x9350 = IKatan2WithCheck(IkReal((x9347+(((-1.0)*x9348)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9349.value)))+(x9350.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9351=IKsin(j4);
IkReal x9352=IKcos(j4);
IkReal x9353=(gconst1*r11);
IkReal x9354=(gconst1*r21);
IkReal x9355=(gconst1*r01);
IkReal x9356=((1.0)*x9352);
IkReal x9357=(gconst2*x9352);
IkReal x9358=((1.0)*x9351);
evalcond[0]=((((-1.0)*r22*x9356))+((x9351*x9354))+(((-1.0)*gconst2*r20*x9358)));
evalcond[1]=(((x9351*x9353))+(((-1.0)*r12*x9356))+(((-1.0)*gconst2*r10*x9358)));
evalcond[2]=((((-1.0)*r02*x9358))+((r00*x9357))+(((-1.0)*x9355*x9356)));
evalcond[3]=((-1.0)+((x9351*x9355))+(((-1.0)*r02*x9356))+(((-1.0)*gconst2*r00*x9358)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9358))+((cj1*sj2))+((r20*x9357))+(((-1.0)*x9354*x9356)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9358))+((r10*x9357))+(((-1.0)*x9353*x9356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9359=((1.0)*gconst2);
CheckValue<IkReal> x9360 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9360.valid){
continue;
}
CheckValue<IkReal> x9361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9359)))),-1);
if(!x9361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9360.value)+(((1.5707963267949)*(x9361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9362=IKsin(j4);
IkReal x9363=IKcos(j4);
IkReal x9364=(gconst1*r11);
IkReal x9365=(gconst1*r21);
IkReal x9366=(gconst1*r01);
IkReal x9367=((1.0)*x9363);
IkReal x9368=(gconst2*x9363);
IkReal x9369=((1.0)*x9362);
evalcond[0]=(((x9362*x9365))+(((-1.0)*r22*x9367))+(((-1.0)*gconst2*r20*x9369)));
evalcond[1]=(((x9362*x9364))+(((-1.0)*gconst2*r10*x9369))+(((-1.0)*r12*x9367)));
evalcond[2]=((((-1.0)*x9366*x9367))+(((-1.0)*r02*x9369))+((r00*x9368)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9367))+((x9362*x9366))+(((-1.0)*gconst2*r00*x9369)));
evalcond[4]=((((-1.0)*x9365*x9367))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9369))+((r20*x9368)));
evalcond[5]=((((-1.0)*x9364*x9367))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9369))+((r10*x9368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9370=((-1.0)*r20);
IkReal x9371=x8857;
CheckValue<IkReal> x9373 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9370),IKFAST_ATAN2_MAGTHRESH);
if(!x9373.valid){
continue;
}
IkReal x9372=((-1.0)*(x9373.value));
sj5=gconst1;
cj5=gconst2;
j5=x9372;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9372;
IkReal gconst1=(r21*x9371);
IkReal gconst2=(x9370*x9371);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9374=((-1.0)*r20);
IkReal x9375=x8857;
CheckValue<IkReal> x9377 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9374),IKFAST_ATAN2_MAGTHRESH);
if(!x9377.valid){
continue;
}
IkReal x9376=((-1.0)*(x9377.value));
sj5=gconst1;
cj5=gconst2;
j5=x9376;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9376;
IkReal gconst1=(r21*x9375);
IkReal gconst2=(x9374*x9375);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9378=((-1.0)*r20);
IkReal x9379=x8857;
CheckValue<IkReal> x9381 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9378),IKFAST_ATAN2_MAGTHRESH);
if(!x9381.valid){
continue;
}
IkReal x9380=((-1.0)*(x9381.value));
sj5=gconst1;
cj5=gconst2;
j5=x9380;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9380;
IkReal gconst1=(r21*x9379);
IkReal gconst2=(x9378*x9379);
IkReal x9382=r22*r22;
IkReal x9383=(cj1*r02*sj2);
IkReal x9384=(cj2*r02*sj1);
CheckValue<IkReal> x9388=IKPowWithIntegerCheck(((-1.0)+x9382),-1);
if(!x9388.valid){
continue;
}
IkReal x9385=x9388.value;
if((((1.0)+(((-1.0)*x9382)))) < -0.00001)
continue;
IkReal x9386=IKsqrt(((1.0)+(((-1.0)*x9382))));
IkReal x9387=((1.0)*r22*x9385*x9386);
j4eval[0]=((IKabs((x9384+x9383)))+(IKabs(((((-1.0)*x9384*x9387))+(((-1.0)*x9383*x9387))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9389=(cj2*sj1);
IkReal x9390=(cj1*sj2);
IkReal x9391=(gconst2*r00);
IkReal x9392=((1.0)*gconst1*r01);
CheckValue<IkReal> x9393 = IKatan2WithCheck(IkReal(((((-1.0)*x9390*x9392))+((x9390*x9391))+(((-1.0)*x9389*x9392))+((x9389*x9391)))),IkReal((((r02*x9389))+((r02*x9390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9393.valid){
continue;
}
CheckValue<IkReal> x9394=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9393.value)+(((1.5707963267949)*(x9394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9395=IKsin(j4);
IkReal x9396=IKcos(j4);
IkReal x9397=(gconst1*r11);
IkReal x9398=(gconst1*r21);
IkReal x9399=(gconst1*r01);
IkReal x9400=((1.0)*x9396);
IkReal x9401=(gconst2*x9396);
IkReal x9402=((1.0)*x9395);
evalcond[0]=((((-1.0)*r22*x9400))+((x9395*x9398))+(((-1.0)*gconst2*r20*x9402)));
evalcond[1]=(((x9395*x9397))+(((-1.0)*gconst2*r10*x9402))+(((-1.0)*r12*x9400)));
evalcond[2]=((((-1.0)*r02*x9402))+((r00*x9401))+(((-1.0)*x9399*x9400)));
evalcond[3]=((1.0)+((x9395*x9399))+(((-1.0)*r02*x9400))+(((-1.0)*gconst2*r00*x9402)));
evalcond[4]=((((-1.0)*r22*x9402))+((cj2*sj1))+((cj1*sj2))+((r20*x9401))+(((-1.0)*x9398*x9400)));
evalcond[5]=((((-1.0)*x9397*x9400))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9402))+((r10*x9401))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9403=(gconst1*r01);
IkReal x9404=(gconst2*r00);
CheckValue<IkReal> x9405 = IKatan2WithCheck(IkReal(((((-1.0)*x9403))+x9404)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9405.valid){
continue;
}
CheckValue<IkReal> x9406=IKPowWithIntegerCheck(IKsign(((x9403*x9403)+(x9404*x9404)+(r02*r02)+(((-2.0)*x9403*x9404)))),-1);
if(!x9406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9405.value)+(((1.5707963267949)*(x9406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9407=IKsin(j4);
IkReal x9408=IKcos(j4);
IkReal x9409=(gconst1*r11);
IkReal x9410=(gconst1*r21);
IkReal x9411=(gconst1*r01);
IkReal x9412=((1.0)*x9408);
IkReal x9413=(gconst2*x9408);
IkReal x9414=((1.0)*x9407);
evalcond[0]=((((-1.0)*gconst2*r20*x9414))+(((-1.0)*r22*x9412))+((x9407*x9410)));
evalcond[1]=((((-1.0)*r12*x9412))+((x9407*x9409))+(((-1.0)*gconst2*r10*x9414)));
evalcond[2]=((((-1.0)*r02*x9414))+((r00*x9413))+(((-1.0)*x9411*x9412)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9412))+(((-1.0)*gconst2*r00*x9414))+((x9407*x9411)));
evalcond[4]=(((r20*x9413))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9414))+(((-1.0)*x9410*x9412)));
evalcond[5]=((((-1.0)*r12*x9414))+((r10*x9413))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x9409*x9412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9415.value)+(((1.5707963267949)*(x9416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9417=IKsin(j4);
IkReal x9418=IKcos(j4);
IkReal x9419=(gconst1*r11);
IkReal x9420=(gconst1*r21);
IkReal x9421=(gconst1*r01);
IkReal x9422=((1.0)*x9418);
IkReal x9423=(gconst2*x9418);
IkReal x9424=((1.0)*x9417);
evalcond[0]=(((x9417*x9420))+(((-1.0)*gconst2*r20*x9424))+(((-1.0)*r22*x9422)));
evalcond[1]=((((-1.0)*gconst2*r10*x9424))+(((-1.0)*r12*x9422))+((x9417*x9419)));
evalcond[2]=(((r00*x9423))+(((-1.0)*x9421*x9422))+(((-1.0)*r02*x9424)));
evalcond[3]=((1.0)+((x9417*x9421))+(((-1.0)*r02*x9422))+(((-1.0)*gconst2*r00*x9424)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9420*x9422))+((cj1*sj2))+((r20*x9423))+(((-1.0)*r22*x9424)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9424))+((cj1*cj2))+((r10*x9423))+(((-1.0)*x9419*x9422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9425=((-1.0)*r20);
IkReal x9426=((-1.0)*px);
CheckValue<IkReal> x9428 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9425),IKFAST_ATAN2_MAGTHRESH);
if(!x9428.valid){
continue;
}
IkReal x9427=((-1.0)*(x9428.value));
sj5=gconst1;
cj5=gconst2;
j5=x9427;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9426);
rxp1_1=(px*r21);
rxp1_2=(r11*x9426);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9427;
IkReal gconst1=r21;
IkReal gconst2=x9425;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9429=((-1.0)*r20);
IkReal x9430=((-1.0)*px);
CheckValue<IkReal> x9432 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9429),IKFAST_ATAN2_MAGTHRESH);
if(!x9432.valid){
continue;
}
IkReal x9431=((-1.0)*(x9432.value));
sj5=gconst1;
cj5=gconst2;
j5=x9431;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9430);
rxp1_1=(px*r21);
rxp1_2=(r11*x9430);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9431;
IkReal gconst1=r21;
IkReal gconst2=x9429;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9433=((-1.0)*r20);
IkReal x9434=((-1.0)*px);
CheckValue<IkReal> x9436 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9433),IKFAST_ATAN2_MAGTHRESH);
if(!x9436.valid){
continue;
}
IkReal x9435=((-1.0)*(x9436.value));
sj5=gconst1;
cj5=gconst2;
j5=x9435;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9434);
rxp1_1=(px*r21);
rxp1_2=(r11*x9434);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9435;
IkReal gconst1=r21;
IkReal gconst2=x9433;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9439=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9439.valid){
continue;
}
IkReal x9437=x9439.value;
IkReal x9438=(sj0*x9437);
cj4array[0]=((((-1.0)*sj1*sj2*x9438))+((cj1*cj2*x9438)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9440=IKsin(j4);
IkReal x9441=IKcos(j4);
IkReal x9442=(gconst1*x9440);
IkReal x9443=((1.0)*x9441);
IkReal x9444=((1.0)*gconst2*x9440);
evalcond[0]=((-1.0)*r02*x9440);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9443)));
evalcond[2]=(((r21*x9442))+(((-1.0)*r20*x9444)));
evalcond[3]=((((-1.0)*r10*x9444))+((r11*x9442)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9443))+((gconst2*r20*x9441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9447=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9447.valid){
continue;
}
IkReal x9445=x9447.value;
IkReal x9446=((1.0)*x9445);
cj4array[0]=((((-1.0)*cj2*sj1*x9446))+(((-1.0)*cj1*sj2*x9446)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9448=IKsin(j4);
IkReal x9449=IKcos(j4);
IkReal x9450=(gconst2*r10);
IkReal x9451=((1.0)*sj0);
IkReal x9452=(gconst1*r11);
IkReal x9453=((1.0)*x9448);
IkReal x9454=((1.0)*x9449);
evalcond[0]=((-1.0)*r02*x9448);
evalcond[1]=((((-1.0)*x9451))+(((-1.0)*r02*x9454)));
evalcond[2]=(((gconst1*r21*x9448))+(((-1.0)*gconst2*r20*x9453)));
evalcond[3]=((((-1.0)*x9450*x9453))+((x9448*x9452)));
evalcond[4]=((((-1.0)*x9452*x9454))+((x9449*x9450))+(((-1.0)*cj1*cj2*x9451))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9455=IKPowWithIntegerCheck(r02,-1);
if(!x9455.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9455.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9456=IKsin(j4);
IkReal x9457=IKcos(j4);
IkReal x9458=(gconst2*r10);
IkReal x9459=(gconst1*r11);
IkReal x9460=(gconst1*r21);
IkReal x9461=(gconst2*r20);
IkReal x9462=((1.0)*x9456);
IkReal x9463=((1.0)*x9457);
evalcond[0]=((-1.0)*r02*x9456);
evalcond[1]=(((x9456*x9460))+(((-1.0)*x9461*x9462)));
evalcond[2]=((((-1.0)*x9458*x9462))+((x9456*x9459)));
evalcond[3]=(((x9457*x9461))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9460*x9463)));
evalcond[4]=(((x9457*x9458))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9459*x9463))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9464=(cj2*sj1);
IkReal x9465=(cj1*sj2);
IkReal x9466=(gconst1*r21);
IkReal x9467=((1.0)*gconst2*r20);
CheckValue<IkReal> x9468 = IKatan2WithCheck(IkReal((((r22*x9465))+((r22*x9464)))),IkReal((((x9465*x9466))+(((-1.0)*x9464*x9467))+(((-1.0)*x9465*x9467))+((x9464*x9466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9468.valid){
continue;
}
CheckValue<IkReal> x9469=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9466*x9466)+(((-2.0)*gconst2*r20*x9466))+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9468.value)+(((1.5707963267949)*(x9469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9470=IKsin(j4);
IkReal x9471=IKcos(j4);
IkReal x9472=(gconst1*r11);
IkReal x9473=(sj1*sj2);
IkReal x9474=(gconst1*r21);
IkReal x9475=(gconst1*r01);
IkReal x9476=((1.0)*x9471);
IkReal x9477=(gconst2*x9471);
IkReal x9478=((1.0)*cj1*cj2);
IkReal x9479=((1.0)*x9470);
evalcond[0]=(((x9470*x9474))+(((-1.0)*gconst2*r20*x9479))+(((-1.0)*r22*x9476)));
evalcond[1]=(((x9470*x9472))+cj0+(((-1.0)*r12*x9476))+(((-1.0)*gconst2*r10*x9479)));
evalcond[2]=((((-1.0)*r02*x9476))+((x9470*x9475))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9479)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9479))+(((-1.0)*x9474*x9476))+((r20*x9477)));
evalcond[4]=((((-1.0)*r02*x9479))+((r00*x9477))+(((-1.0)*x9475*x9476))+(((-1.0)*cj0*x9478))+((cj0*x9473)));
evalcond[5]=(((r10*x9477))+(((-1.0)*sj0*x9478))+((sj0*x9473))+(((-1.0)*r12*x9479))+(((-1.0)*x9472*x9476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9480=((1.0)*gconst2);
CheckValue<IkReal> x9481=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9480)))),-1);
if(!x9481.valid){
continue;
}
CheckValue<IkReal> x9482 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9480))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9481.value)))+(x9482.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9483=IKsin(j4);
IkReal x9484=IKcos(j4);
IkReal x9485=(gconst1*r11);
IkReal x9486=(sj1*sj2);
IkReal x9487=(gconst1*r21);
IkReal x9488=(gconst1*r01);
IkReal x9489=((1.0)*x9484);
IkReal x9490=(gconst2*x9484);
IkReal x9491=((1.0)*cj1*cj2);
IkReal x9492=((1.0)*x9483);
evalcond[0]=((((-1.0)*gconst2*r20*x9492))+((x9483*x9487))+(((-1.0)*r22*x9489)));
evalcond[1]=(cj0+((x9483*x9485))+(((-1.0)*gconst2*r10*x9492))+(((-1.0)*r12*x9489)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9489))+((x9483*x9488))+(((-1.0)*gconst2*r00*x9492)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9492))+(((-1.0)*x9487*x9489))+((cj1*sj2))+((r20*x9490)));
evalcond[4]=((((-1.0)*r02*x9492))+((cj0*x9486))+((r00*x9490))+(((-1.0)*cj0*x9491))+(((-1.0)*x9488*x9489)));
evalcond[5]=(((sj0*x9486))+((r10*x9490))+(((-1.0)*x9485*x9489))+(((-1.0)*r12*x9492))+(((-1.0)*sj0*x9491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9493=((1.0)*gconst2);
CheckValue<IkReal> x9494=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9493)))),-1);
if(!x9494.valid){
continue;
}
CheckValue<IkReal> x9495 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9494.value)))+(x9495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9496=IKsin(j4);
IkReal x9497=IKcos(j4);
IkReal x9498=(gconst1*r11);
IkReal x9499=(sj1*sj2);
IkReal x9500=(gconst1*r21);
IkReal x9501=(gconst1*r01);
IkReal x9502=((1.0)*x9497);
IkReal x9503=(gconst2*x9497);
IkReal x9504=((1.0)*cj1*cj2);
IkReal x9505=((1.0)*x9496);
evalcond[0]=(((x9496*x9500))+(((-1.0)*r22*x9502))+(((-1.0)*gconst2*r20*x9505)));
evalcond[1]=(cj0+(((-1.0)*r12*x9502))+((x9496*x9498))+(((-1.0)*gconst2*r10*x9505)));
evalcond[2]=((((-1.0)*sj0))+((x9496*x9501))+(((-1.0)*gconst2*r00*x9505))+(((-1.0)*r02*x9502)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9505))+((r20*x9503))+(((-1.0)*x9500*x9502)));
evalcond[4]=(((cj0*x9499))+(((-1.0)*cj0*x9504))+(((-1.0)*r02*x9505))+(((-1.0)*x9501*x9502))+((r00*x9503)));
evalcond[5]=(((r10*x9503))+(((-1.0)*x9498*x9502))+(((-1.0)*r12*x9505))+(((-1.0)*sj0*x9504))+((sj0*x9499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9506=((-1.0)*r20);
IkReal x9507=x8857;
CheckValue<IkReal> x9509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9506),IKFAST_ATAN2_MAGTHRESH);
if(!x9509.valid){
continue;
}
IkReal x9508=((-1.0)*(x9509.value));
sj5=gconst1;
cj5=gconst2;
j5=x9508;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9508;
IkReal gconst1=(r21*x9507);
IkReal gconst2=(x9506*x9507);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9510=((-1.0)*r20);
IkReal x9511=x8857;
CheckValue<IkReal> x9513 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9510),IKFAST_ATAN2_MAGTHRESH);
if(!x9513.valid){
continue;
}
IkReal x9512=((-1.0)*(x9513.value));
sj5=gconst1;
cj5=gconst2;
j5=x9512;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9512;
IkReal gconst1=(r21*x9511);
IkReal gconst2=(x9510*x9511);
CheckValue<IkReal> x9521=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9521.valid){
continue;
}
IkReal x9514=x9521.value;
IkReal x9515=(sj3*x9514);
IkReal x9516=(r11*x9515);
IkReal x9517=(r00*x9515);
IkReal x9518=(r01*x9515);
IkReal x9519=(r10*x9515);
IkReal x9520=(r20*r21*x9515);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9518))+((r01*x9516*(r21*r21)))+((r00*r20*r21*x9516))+((r10*x9517*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9522=gconst2*gconst2;
IkReal x9523=gconst1*gconst1;
IkReal x9524=((1.0)*cj3);
IkReal x9525=((1.0)*sj3);
IkReal x9526=(r11*sj3);
IkReal x9527=(r10*sj3);
IkReal x9528=(gconst1*gconst2*r00);
IkReal x9529=(gconst1*gconst2*r01);
IkReal x9530=(r00*x9522);
IkReal x9531=(r01*x9523);
CheckValue<IkReal> x9532=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9524))+((cj3*r10*x9529))+(((-1.0)*r11*x9524*x9531))+(((-1.0)*r10*x9524*x9530))+((cj3*r11*x9528)))),-1);
if(!x9532.valid){
continue;
}
CheckValue<IkReal> x9533 = IKatan2WithCheck(IkReal((((gconst1*r02*x9527))+((gconst2*r02*x9526)))),IkReal(((((-1.0)*r11*x9525*x9530))+((x9527*x9531))+((x9526*x9529))+(((-1.0)*r10*x9525*x9528)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9532.value)))+(x9533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9534=IKsin(j4);
IkReal x9535=IKcos(j4);
IkReal x9536=(sj1*sj2);
IkReal x9537=(gconst1*sj3);
IkReal x9538=(cj3*gconst1);
IkReal x9539=(cj3*gconst2);
IkReal x9540=((1.0)*cj2);
IkReal x9541=(cj1*sj2);
IkReal x9542=(gconst2*sj3);
IkReal x9543=(cj1*x9540);
IkReal x9544=((1.0)*x9535);
IkReal x9545=((1.0)*x9534);
IkReal x9546=(gconst1*x9534);
IkReal x9547=(cj3*x9534);
IkReal x9548=(x9535*x9542);
evalcond[0]=((((-1.0)*r22*x9544))+((r21*x9546))+(((-1.0)*gconst2*r20*x9545)));
evalcond[1]=((((-1.0)*r02*x9544))+((r01*x9546))+(((-1.0)*gconst2*r00*x9545)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9544))+((r11*x9546))+(((-1.0)*gconst2*r10*x9545)));
evalcond[3]=(((r12*x9547))+(((-1.0)*r10*x9539*x9544))+((r11*x9542))+((r10*x9537))+((r11*x9535*x9538)));
evalcond[4]=(((r11*x9539))+((r10*x9538))+(((-1.0)*r11*x9537*x9544))+((r10*x9548))+(((-1.0)*r12*sj3*x9545)));
evalcond[5]=(((r22*x9547))+((cj2*sj1))+((r20*x9537))+(((-1.0)*r20*x9539*x9544))+((r21*x9535*x9538))+((r21*x9542))+x9541);
evalcond[6]=(((r02*x9547))+((r01*x9542))+((r00*x9537))+x9536+((r01*x9535*x9538))+(((-1.0)*r00*x9539*x9544))+(((-1.0)*x9543)));
evalcond[7]=(((r20*x9538))+(((-1.0)*r21*x9537*x9544))+(((-1.0)*r22*sj3*x9545))+((r20*x9548))+x9536+((r21*x9539))+(((-1.0)*x9543)));
evalcond[8]=((((-1.0)*r02*sj3*x9545))+((r00*x9538))+((r01*x9539))+((r00*x9548))+(((-1.0)*r01*x9537*x9544))+(((-1.0)*x9541))+(((-1.0)*sj1*x9540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9549=gconst2*gconst2;
IkReal x9550=gconst1*gconst1;
IkReal x9551=(gconst2*r11);
IkReal x9552=(cj3*r02);
IkReal x9553=(gconst1*r01);
IkReal x9554=(cj3*r10);
IkReal x9555=(r10*sj3);
IkReal x9556=((1.0)*gconst1*r00);
IkReal x9557=(r01*x9550);
IkReal x9558=(r00*x9549);
CheckValue<IkReal> x9559=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9555*x9558))+((r11*sj3*x9557))+(((-1.0)*gconst2*x9553*x9555))+(((-1.0)*sj3*x9551*x9556)))),-1);
if(!x9559.valid){
continue;
}
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal((((gconst1*r10*x9552))+((x9551*x9552)))),IkReal(((((-1.0)*gconst2*x9554*x9556))+(((-1.0)*cj3*r11*x9558))+((x9554*x9557))+((cj3*x9551*x9553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9559.value)))+(x9560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9561=IKsin(j4);
IkReal x9562=IKcos(j4);
IkReal x9563=(sj1*sj2);
IkReal x9564=(gconst1*sj3);
IkReal x9565=(cj3*gconst1);
IkReal x9566=(cj3*gconst2);
IkReal x9567=((1.0)*cj2);
IkReal x9568=(cj1*sj2);
IkReal x9569=(gconst2*sj3);
IkReal x9570=(cj1*x9567);
IkReal x9571=((1.0)*x9562);
IkReal x9572=((1.0)*x9561);
IkReal x9573=(gconst1*x9561);
IkReal x9574=(cj3*x9561);
IkReal x9575=(x9562*x9569);
evalcond[0]=((((-1.0)*gconst2*r20*x9572))+((r21*x9573))+(((-1.0)*r22*x9571)));
evalcond[1]=((((-1.0)*r02*x9571))+((r01*x9573))+(((-1.0)*gconst2*r00*x9572)));
evalcond[2]=((1.0)+((r11*x9573))+(((-1.0)*r12*x9571))+(((-1.0)*gconst2*r10*x9572)));
evalcond[3]=((((-1.0)*r10*x9566*x9571))+((r11*x9569))+((r12*x9574))+((r11*x9562*x9565))+((r10*x9564)));
evalcond[4]=(((r11*x9566))+(((-1.0)*r11*x9564*x9571))+((r10*x9565))+(((-1.0)*r12*sj3*x9572))+((r10*x9575)));
evalcond[5]=(((r21*x9569))+((cj2*sj1))+((r21*x9562*x9565))+((r22*x9574))+(((-1.0)*r20*x9566*x9571))+x9568+((r20*x9564)));
evalcond[6]=((((-1.0)*r00*x9566*x9571))+((r01*x9569))+((r00*x9564))+(((-1.0)*x9570))+x9563+((r01*x9562*x9565))+((r02*x9574)));
evalcond[7]=(((r21*x9566))+(((-1.0)*x9570))+(((-1.0)*r22*sj3*x9572))+x9563+((r20*x9575))+((r20*x9565))+(((-1.0)*r21*x9564*x9571)));
evalcond[8]=((((-1.0)*r02*sj3*x9572))+(((-1.0)*x9568))+((r01*x9566))+((r00*x9565))+((r00*x9575))+(((-1.0)*r01*x9564*x9571))+(((-1.0)*sj1*x9567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9576=((1.0)*gconst2);
CheckValue<IkReal> x9577 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9576))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9577.valid){
continue;
}
CheckValue<IkReal> x9578=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9576)))),-1);
if(!x9578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9577.value)+(((1.5707963267949)*(x9578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9579=IKsin(j4);
IkReal x9580=IKcos(j4);
IkReal x9581=(sj1*sj2);
IkReal x9582=(gconst1*sj3);
IkReal x9583=(cj3*gconst1);
IkReal x9584=(cj3*gconst2);
IkReal x9585=((1.0)*cj2);
IkReal x9586=(cj1*sj2);
IkReal x9587=(gconst2*sj3);
IkReal x9588=(cj1*x9585);
IkReal x9589=((1.0)*x9580);
IkReal x9590=((1.0)*x9579);
IkReal x9591=(gconst1*x9579);
IkReal x9592=(cj3*x9579);
IkReal x9593=(x9580*x9587);
evalcond[0]=((((-1.0)*r22*x9589))+((r21*x9591))+(((-1.0)*gconst2*r20*x9590)));
evalcond[1]=(((r01*x9591))+(((-1.0)*gconst2*r00*x9590))+(((-1.0)*r02*x9589)));
evalcond[2]=((1.0)+((r11*x9591))+(((-1.0)*gconst2*r10*x9590))+(((-1.0)*r12*x9589)));
evalcond[3]=(((r11*x9587))+((r11*x9580*x9583))+((r10*x9582))+(((-1.0)*r10*x9584*x9589))+((r12*x9592)));
evalcond[4]=(((r11*x9584))+((r10*x9583))+(((-1.0)*r12*sj3*x9590))+((r10*x9593))+(((-1.0)*r11*x9582*x9589)));
evalcond[5]=(((cj2*sj1))+((r20*x9582))+(((-1.0)*r20*x9584*x9589))+((r22*x9592))+((r21*x9580*x9583))+x9586+((r21*x9587)));
evalcond[6]=(((r01*x9580*x9583))+((r00*x9582))+(((-1.0)*r00*x9584*x9589))+((r01*x9587))+x9581+(((-1.0)*x9588))+((r02*x9592)));
evalcond[7]=(((r20*x9593))+((r20*x9583))+(((-1.0)*r21*x9582*x9589))+(((-1.0)*r22*sj3*x9590))+x9581+(((-1.0)*x9588))+((r21*x9584)));
evalcond[8]=((((-1.0)*sj1*x9585))+((r00*x9583))+((r00*x9593))+((r01*x9584))+(((-1.0)*r02*sj3*x9590))+(((-1.0)*r01*x9582*x9589))+(((-1.0)*x9586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9594=((-1.0)*r20);
IkReal x9595=x8857;
CheckValue<IkReal> x9597 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9594),IKFAST_ATAN2_MAGTHRESH);
if(!x9597.valid){
continue;
}
IkReal x9596=((-1.0)*(x9597.value));
sj5=gconst1;
cj5=gconst2;
j5=x9596;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9596;
IkReal gconst1=(r21*x9595);
IkReal gconst2=(x9594*x9595);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9598=((-1.0)*r20);
IkReal x9599=x8857;
CheckValue<IkReal> x9601 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9598),IKFAST_ATAN2_MAGTHRESH);
if(!x9601.valid){
continue;
}
IkReal x9600=((-1.0)*(x9601.value));
sj5=gconst1;
cj5=gconst2;
j5=x9600;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9600;
IkReal gconst1=(r21*x9599);
IkReal gconst2=(x9598*x9599);
CheckValue<IkReal> x9609=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9609.valid){
continue;
}
IkReal x9602=x9609.value;
IkReal x9603=(sj3*x9602);
IkReal x9604=(r11*x9603);
IkReal x9605=(r00*x9603);
IkReal x9606=(r01*x9603);
IkReal x9607=(r10*x9603);
IkReal x9608=(r20*r21*x9603);
j4eval[0]=IKsign((((r00*r20*r21*x9604))+((r02*r12*sj3))+((r10*r20*r21*x9606))+((r10*x9605*(r20*r20)))+((r01*x9604*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9610=gconst2*gconst2;
IkReal x9611=gconst1*gconst1;
IkReal x9612=((1.0)*cj3);
IkReal x9613=((1.0)*sj3);
IkReal x9614=(r11*sj3);
IkReal x9615=(r10*sj3);
IkReal x9616=(gconst1*gconst2*r00);
IkReal x9617=(gconst1*gconst2*r01);
IkReal x9618=(r00*x9610);
IkReal x9619=(r01*x9611);
CheckValue<IkReal> x9620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9612*x9619))+((cj3*r11*x9616))+(((-1.0)*r10*x9612*x9618))+(((-1.0)*r02*r12*x9612))+((cj3*r10*x9617)))),-1);
if(!x9620.valid){
continue;
}
CheckValue<IkReal> x9621 = IKatan2WithCheck(IkReal((((gconst2*r02*x9614))+((gconst1*r02*x9615)))),IkReal((((x9615*x9619))+(((-1.0)*r11*x9613*x9618))+(((-1.0)*r10*x9613*x9616))+((x9614*x9617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9620.value)))+(x9621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9622=IKsin(j4);
IkReal x9623=IKcos(j4);
IkReal x9624=(cj2*sj1);
IkReal x9625=(cj1*sj2);
IkReal x9626=(gconst1*sj3);
IkReal x9627=(cj3*gconst1);
IkReal x9628=(sj1*sj2);
IkReal x9629=(cj3*gconst2);
IkReal x9630=(cj1*cj2);
IkReal x9631=(gconst2*sj3);
IkReal x9632=((1.0)*x9623);
IkReal x9633=((1.0)*x9622);
IkReal x9634=(gconst1*x9622);
IkReal x9635=(cj3*x9622);
IkReal x9636=(x9625+x9624);
IkReal x9637=(x9623*x9631);
evalcond[0]=((((-1.0)*r22*x9632))+((r21*x9634))+(((-1.0)*gconst2*r20*x9633)));
evalcond[1]=(((r01*x9634))+(((-1.0)*gconst2*r00*x9633))+(((-1.0)*r02*x9632)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9633))+(((-1.0)*r12*x9632))+((r11*x9634)));
evalcond[3]=(((r10*x9626))+((r11*x9623*x9627))+((r12*x9635))+(((-1.0)*r10*x9629*x9632))+((r11*x9631)));
evalcond[4]=((((-1.0)*r11*x9626*x9632))+((r10*x9637))+((r10*x9627))+(((-1.0)*r12*sj3*x9633))+((r11*x9629)));
evalcond[5]=(((r20*x9626))+(((-1.0)*r20*x9629*x9632))+((r21*x9631))+((r22*x9635))+x9636+((r21*x9623*x9627)));
evalcond[6]=(((r01*x9631))+((r00*x9626))+(((-1.0)*r00*x9629*x9632))+(((-1.0)*x9628))+((r01*x9623*x9627))+x9630+((r02*x9635)));
evalcond[7]=(((r01*x9629))+((r00*x9637))+((r00*x9627))+(((-1.0)*r02*sj3*x9633))+x9636+(((-1.0)*r01*x9626*x9632)));
evalcond[8]=(((r20*x9627))+((r20*x9637))+(((-1.0)*x9630))+((r21*x9629))+(((-1.0)*r22*sj3*x9633))+x9628+(((-1.0)*r21*x9626*x9632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9638=gconst2*gconst2;
IkReal x9639=gconst1*gconst1;
IkReal x9640=(gconst2*r11);
IkReal x9641=(cj3*r02);
IkReal x9642=(gconst1*r01);
IkReal x9643=(cj3*r10);
IkReal x9644=(r10*sj3);
IkReal x9645=((1.0)*gconst1*r00);
IkReal x9646=(r01*x9639);
IkReal x9647=(r00*x9638);
CheckValue<IkReal> x9648=IKPowWithIntegerCheck(IKsign((((r11*sj3*x9646))+(((-1.0)*gconst2*x9642*x9644))+((r02*r12*sj3))+((x9644*x9647))+(((-1.0)*sj3*x9640*x9645)))),-1);
if(!x9648.valid){
continue;
}
CheckValue<IkReal> x9649 = IKatan2WithCheck(IkReal((((x9640*x9641))+((gconst1*r10*x9641)))),IkReal((((x9643*x9646))+(((-1.0)*cj3*r11*x9647))+(((-1.0)*gconst2*x9643*x9645))+((cj3*x9640*x9642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9648.value)))+(x9649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9650=IKsin(j4);
IkReal x9651=IKcos(j4);
IkReal x9652=(cj2*sj1);
IkReal x9653=(cj1*sj2);
IkReal x9654=(gconst1*sj3);
IkReal x9655=(cj3*gconst1);
IkReal x9656=(sj1*sj2);
IkReal x9657=(cj3*gconst2);
IkReal x9658=(cj1*cj2);
IkReal x9659=(gconst2*sj3);
IkReal x9660=((1.0)*x9651);
IkReal x9661=((1.0)*x9650);
IkReal x9662=(gconst1*x9650);
IkReal x9663=(cj3*x9650);
IkReal x9664=(x9652+x9653);
IkReal x9665=(x9651*x9659);
evalcond[0]=((((-1.0)*gconst2*r20*x9661))+((r21*x9662))+(((-1.0)*r22*x9660)));
evalcond[1]=(((r01*x9662))+(((-1.0)*gconst2*r00*x9661))+(((-1.0)*r02*x9660)));
evalcond[2]=((-1.0)+((r11*x9662))+(((-1.0)*r12*x9660))+(((-1.0)*gconst2*r10*x9661)));
evalcond[3]=(((r11*x9659))+((r12*x9663))+(((-1.0)*r10*x9657*x9660))+((r11*x9651*x9655))+((r10*x9654)));
evalcond[4]=(((r11*x9657))+(((-1.0)*r11*x9654*x9660))+((r10*x9665))+((r10*x9655))+(((-1.0)*r12*sj3*x9661)));
evalcond[5]=((((-1.0)*r20*x9657*x9660))+((r21*x9659))+((r20*x9654))+x9664+((r22*x9663))+((r21*x9651*x9655)));
evalcond[6]=(((r01*x9659))+((r00*x9654))+x9658+(((-1.0)*x9656))+((r02*x9663))+(((-1.0)*r00*x9657*x9660))+((r01*x9651*x9655)));
evalcond[7]=((((-1.0)*r02*sj3*x9661))+((r00*x9665))+((r01*x9657))+((r00*x9655))+x9664+(((-1.0)*r01*x9654*x9660)));
evalcond[8]=(((r21*x9657))+((r20*x9655))+((r20*x9665))+(((-1.0)*r21*x9654*x9660))+x9656+(((-1.0)*x9658))+(((-1.0)*r22*sj3*x9661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9666 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9666.valid){
continue;
}
CheckValue<IkReal> x9667=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9666.value)+(((1.5707963267949)*(x9667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9668=IKsin(j4);
IkReal x9669=IKcos(j4);
IkReal x9670=(cj2*sj1);
IkReal x9671=(cj1*sj2);
IkReal x9672=(gconst1*sj3);
IkReal x9673=(cj3*gconst1);
IkReal x9674=(sj1*sj2);
IkReal x9675=(cj3*gconst2);
IkReal x9676=(cj1*cj2);
IkReal x9677=(gconst2*sj3);
IkReal x9678=((1.0)*x9669);
IkReal x9679=((1.0)*x9668);
IkReal x9680=(gconst1*x9668);
IkReal x9681=(cj3*x9668);
IkReal x9682=(x9670+x9671);
IkReal x9683=(x9669*x9677);
evalcond[0]=((((-1.0)*gconst2*r20*x9679))+((r21*x9680))+(((-1.0)*r22*x9678)));
evalcond[1]=((((-1.0)*r02*x9678))+((r01*x9680))+(((-1.0)*gconst2*r00*x9679)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9679))+(((-1.0)*r12*x9678))+((r11*x9680)));
evalcond[3]=(((r11*x9669*x9673))+(((-1.0)*r10*x9675*x9678))+((r11*x9677))+((r10*x9672))+((r12*x9681)));
evalcond[4]=((((-1.0)*r11*x9672*x9678))+((r11*x9675))+((r10*x9673))+(((-1.0)*r12*sj3*x9679))+((r10*x9683)));
evalcond[5]=((((-1.0)*r20*x9675*x9678))+((r21*x9677))+((r22*x9681))+((r20*x9672))+x9682+((r21*x9669*x9673)));
evalcond[6]=((((-1.0)*r00*x9675*x9678))+((r01*x9677))+((r02*x9681))+((r00*x9672))+x9676+(((-1.0)*x9674))+((r01*x9669*x9673)));
evalcond[7]=((((-1.0)*r02*sj3*x9679))+((r01*x9675))+((r00*x9673))+(((-1.0)*r01*x9672*x9678))+x9682+((r00*x9683)));
evalcond[8]=(((r21*x9675))+((r20*x9673))+(((-1.0)*r21*x9672*x9678))+x9674+(((-1.0)*x9676))+(((-1.0)*r22*sj3*x9679))+((r20*x9683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9684=((-1.0)*r20);
IkReal x9685=x8857;
CheckValue<IkReal> x9687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9684),IKFAST_ATAN2_MAGTHRESH);
if(!x9687.valid){
continue;
}
IkReal x9686=((-1.0)*(x9687.value));
sj5=gconst1;
cj5=gconst2;
j5=x9686;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9686;
IkReal gconst1=(r21*x9685);
IkReal gconst2=(x9684*x9685);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9688=((-1.0)*r20);
IkReal x9689=x8857;
CheckValue<IkReal> x9691 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9688),IKFAST_ATAN2_MAGTHRESH);
if(!x9691.valid){
continue;
}
IkReal x9690=((-1.0)*(x9691.value));
sj5=gconst1;
cj5=gconst2;
j5=x9690;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9690;
IkReal gconst1=(r21*x9689);
IkReal gconst2=(x9688*x9689);
CheckValue<IkReal> x9699=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9699.valid){
continue;
}
IkReal x9692=x9699.value;
IkReal x9693=(sj3*x9692);
IkReal x9694=(r11*x9693);
IkReal x9695=(r00*x9693);
IkReal x9696=(r01*x9693);
IkReal x9697=(r10*x9693);
IkReal x9698=(r20*r21*x9693);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9694*(r21*r21)))+((r00*r20*r21*x9694))+((r10*x9695*(r20*r20)))+((r10*r20*r21*x9696))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9700=gconst1*gconst1;
IkReal x9701=gconst2*gconst2;
IkReal x9702=((1.0)*cj3);
IkReal x9703=(gconst2*r10);
IkReal x9704=(r01*sj3);
IkReal x9705=(gconst1*r00*sj3);
IkReal x9706=(gconst1*gconst2*r11);
IkReal x9707=(r10*x9701);
IkReal x9708=(r11*x9700);
CheckValue<IkReal> x9709=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9703))+(((-1.0)*r01*x9702*x9708))+(((-1.0)*r02*r12*x9702))+((cj3*r00*x9706))+(((-1.0)*r00*x9702*x9707)))),-1);
if(!x9709.valid){
continue;
}
CheckValue<IkReal> x9710 = IKatan2WithCheck(IkReal((((r12*x9705))+((gconst2*r12*x9704)))),IkReal((((x9704*x9706))+(((-1.0)*x9704*x9707))+(((-1.0)*x9703*x9705))+((r00*sj3*x9708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9709.value)))+(x9710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9711=IKsin(j4);
IkReal x9712=IKcos(j4);
IkReal x9713=(sj1*sj2);
IkReal x9714=(gconst1*sj3);
IkReal x9715=(cj3*gconst1);
IkReal x9716=(cj3*gconst2);
IkReal x9717=((1.0)*cj2);
IkReal x9718=(cj1*sj2);
IkReal x9719=(gconst2*sj3);
IkReal x9720=(cj1*x9717);
IkReal x9721=((1.0)*x9712);
IkReal x9722=((1.0)*x9711);
IkReal x9723=(gconst1*x9711);
IkReal x9724=(cj3*x9711);
IkReal x9725=(x9712*x9719);
evalcond[0]=((((-1.0)*gconst2*r20*x9722))+(((-1.0)*r22*x9721))+((r21*x9723)));
evalcond[1]=(((r11*x9723))+(((-1.0)*r12*x9721))+(((-1.0)*gconst2*r10*x9722)));
evalcond[2]=((-1.0)+((r01*x9723))+(((-1.0)*r02*x9721))+(((-1.0)*gconst2*r00*x9722)));
evalcond[3]=((((-1.0)*r00*x9716*x9721))+((r02*x9724))+((r01*x9712*x9715))+((r01*x9719))+((r00*x9714)));
evalcond[4]=((((-1.0)*r02*sj3*x9722))+(((-1.0)*r01*x9714*x9721))+((r01*x9716))+((r00*x9715))+((r00*x9725)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9716*x9721))+x9718+((r20*x9714))+((r21*x9719))+((r21*x9712*x9715))+((r22*x9724)));
evalcond[6]=(((r11*x9712*x9715))+((r12*x9724))+((r11*x9719))+x9713+(((-1.0)*x9720))+(((-1.0)*r10*x9716*x9721))+((r10*x9714)));
evalcond[7]=((((-1.0)*r21*x9714*x9721))+x9713+((r20*x9725))+((r20*x9715))+(((-1.0)*x9720))+(((-1.0)*r22*sj3*x9722))+((r21*x9716)));
evalcond[8]=((((-1.0)*r12*sj3*x9722))+((r11*x9716))+(((-1.0)*r11*x9714*x9721))+(((-1.0)*sj1*x9717))+((r10*x9715))+(((-1.0)*x9718))+((r10*x9725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9726=gconst2*gconst2;
IkReal x9727=gconst1*gconst1;
IkReal x9728=(gconst1*r00);
IkReal x9729=(r11*sj3);
IkReal x9730=((1.0)*gconst2);
IkReal x9731=(cj3*r12);
IkReal x9732=(cj3*r11);
IkReal x9733=(gconst2*r01);
IkReal x9734=(cj3*r10);
IkReal x9735=(r10*sj3);
CheckValue<IkReal> x9736 = IKatan2WithCheck(IkReal((((x9728*x9731))+((x9731*x9733)))),IkReal(((((-1.0)*r01*x9726*x9734))+(((-1.0)*x9728*x9730*x9734))+((gconst1*x9732*x9733))+((r00*x9727*x9732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9736.valid){
continue;
}
CheckValue<IkReal> x9737=IKPowWithIntegerCheck(IKsign((((r00*x9726*x9735))+((r01*x9727*x9729))+((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9730*x9735))+(((-1.0)*x9728*x9729*x9730)))),-1);
if(!x9737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9736.value)+(((1.5707963267949)*(x9737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9738=IKsin(j4);
IkReal x9739=IKcos(j4);
IkReal x9740=(sj1*sj2);
IkReal x9741=(gconst1*sj3);
IkReal x9742=(cj3*gconst1);
IkReal x9743=(cj3*gconst2);
IkReal x9744=((1.0)*cj2);
IkReal x9745=(cj1*sj2);
IkReal x9746=(gconst2*sj3);
IkReal x9747=(cj1*x9744);
IkReal x9748=((1.0)*x9739);
IkReal x9749=((1.0)*x9738);
IkReal x9750=(gconst1*x9738);
IkReal x9751=(cj3*x9738);
IkReal x9752=(x9739*x9746);
evalcond[0]=(((r21*x9750))+(((-1.0)*gconst2*r20*x9749))+(((-1.0)*r22*x9748)));
evalcond[1]=(((r11*x9750))+(((-1.0)*gconst2*r10*x9749))+(((-1.0)*r12*x9748)));
evalcond[2]=((-1.0)+((r01*x9750))+(((-1.0)*gconst2*r00*x9749))+(((-1.0)*r02*x9748)));
evalcond[3]=(((r01*x9739*x9742))+((r02*x9751))+(((-1.0)*r00*x9743*x9748))+((r01*x9746))+((r00*x9741)));
evalcond[4]=(((r00*x9752))+(((-1.0)*r02*sj3*x9749))+(((-1.0)*r01*x9741*x9748))+((r01*x9743))+((r00*x9742)));
evalcond[5]=(((cj2*sj1))+((r21*x9746))+(((-1.0)*r20*x9743*x9748))+((r22*x9751))+x9745+((r20*x9741))+((r21*x9739*x9742)));
evalcond[6]=(((r11*x9746))+((r11*x9739*x9742))+((r10*x9741))+x9740+(((-1.0)*x9747))+(((-1.0)*r10*x9743*x9748))+((r12*x9751)));
evalcond[7]=(((r21*x9743))+(((-1.0)*r21*x9741*x9748))+x9740+((r20*x9742))+(((-1.0)*x9747))+(((-1.0)*r22*sj3*x9749))+((r20*x9752)));
evalcond[8]=(((r10*x9752))+((r11*x9743))+((r10*x9742))+(((-1.0)*r12*sj3*x9749))+(((-1.0)*x9745))+(((-1.0)*sj1*x9744))+(((-1.0)*r11*x9741*x9748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9753=((1.0)*gconst2);
CheckValue<IkReal> x9754=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9753)))),-1);
if(!x9754.valid){
continue;
}
CheckValue<IkReal> x9755 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9753))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9754.value)))+(x9755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9756=IKsin(j4);
IkReal x9757=IKcos(j4);
IkReal x9758=(sj1*sj2);
IkReal x9759=(gconst1*sj3);
IkReal x9760=(cj3*gconst1);
IkReal x9761=(cj3*gconst2);
IkReal x9762=((1.0)*cj2);
IkReal x9763=(cj1*sj2);
IkReal x9764=(gconst2*sj3);
IkReal x9765=(cj1*x9762);
IkReal x9766=((1.0)*x9757);
IkReal x9767=((1.0)*x9756);
IkReal x9768=(gconst1*x9756);
IkReal x9769=(cj3*x9756);
IkReal x9770=(x9757*x9764);
evalcond[0]=((((-1.0)*r22*x9766))+((r21*x9768))+(((-1.0)*gconst2*r20*x9767)));
evalcond[1]=((((-1.0)*gconst2*r10*x9767))+(((-1.0)*r12*x9766))+((r11*x9768)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9767))+((r01*x9768))+(((-1.0)*r02*x9766)));
evalcond[3]=(((r00*x9759))+((r01*x9757*x9760))+((r01*x9764))+(((-1.0)*r00*x9761*x9766))+((r02*x9769)));
evalcond[4]=(((r00*x9760))+((r00*x9770))+((r01*x9761))+(((-1.0)*r01*x9759*x9766))+(((-1.0)*r02*sj3*x9767)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9761*x9766))+((r22*x9769))+x9763+((r21*x9764))+((r21*x9757*x9760))+((r20*x9759)));
evalcond[6]=(((r10*x9759))+((r12*x9769))+x9758+(((-1.0)*r10*x9761*x9766))+((r11*x9757*x9760))+((r11*x9764))+(((-1.0)*x9765)));
evalcond[7]=(x9758+((r21*x9761))+((r20*x9770))+((r20*x9760))+(((-1.0)*x9765))+(((-1.0)*r22*sj3*x9767))+(((-1.0)*r21*x9759*x9766)));
evalcond[8]=((((-1.0)*r11*x9759*x9766))+((r10*x9760))+(((-1.0)*x9763))+((r10*x9770))+(((-1.0)*r12*sj3*x9767))+(((-1.0)*sj1*x9762))+((r11*x9761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9771=((-1.0)*r20);
IkReal x9772=x8857;
CheckValue<IkReal> x9774 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9771),IKFAST_ATAN2_MAGTHRESH);
if(!x9774.valid){
continue;
}
IkReal x9773=((-1.0)*(x9774.value));
sj5=gconst1;
cj5=gconst2;
j5=x9773;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9773;
IkReal gconst1=(r21*x9772);
IkReal gconst2=(x9771*x9772);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9775=((-1.0)*r20);
IkReal x9776=x8857;
CheckValue<IkReal> x9778 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9775),IKFAST_ATAN2_MAGTHRESH);
if(!x9778.valid){
continue;
}
IkReal x9777=((-1.0)*(x9778.value));
sj5=gconst1;
cj5=gconst2;
j5=x9777;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9777;
IkReal gconst1=(r21*x9776);
IkReal gconst2=(x9775*x9776);
CheckValue<IkReal> x9786=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9786.valid){
continue;
}
IkReal x9779=x9786.value;
IkReal x9780=(sj3*x9779);
IkReal x9781=(r11*x9780);
IkReal x9782=(r00*x9780);
IkReal x9783=(r01*x9780);
IkReal x9784=(r10*x9780);
IkReal x9785=(r20*r21*x9780);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9782*(r20*r20)))+((r10*r20*r21*x9783))+((r01*x9781*(r21*r21)))+((r00*r20*r21*x9781))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9787=gconst1*gconst1;
IkReal x9788=gconst2*gconst2;
IkReal x9789=((1.0)*cj3);
IkReal x9790=(gconst2*r10);
IkReal x9791=(r01*sj3);
IkReal x9792=(gconst1*r00*sj3);
IkReal x9793=(gconst1*gconst2*r11);
IkReal x9794=(r10*x9788);
IkReal x9795=(r11*x9787);
CheckValue<IkReal> x9796 = IKatan2WithCheck(IkReal((((r12*x9792))+((gconst2*r12*x9791)))),IkReal(((((-1.0)*x9790*x9792))+((x9791*x9793))+(((-1.0)*x9791*x9794))+((r00*sj3*x9795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9796.valid){
continue;
}
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9790))+(((-1.0)*r01*x9789*x9795))+((cj3*r00*x9793))+(((-1.0)*r00*x9789*x9794))+(((-1.0)*r02*r12*x9789)))),-1);
if(!x9797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9796.value)+(((1.5707963267949)*(x9797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9798=IKsin(j4);
IkReal x9799=IKcos(j4);
IkReal x9800=(cj2*sj1);
IkReal x9801=(cj1*sj2);
IkReal x9802=(gconst1*sj3);
IkReal x9803=(cj3*gconst1);
IkReal x9804=(sj1*sj2);
IkReal x9805=(cj3*gconst2);
IkReal x9806=(cj1*cj2);
IkReal x9807=(gconst2*sj3);
IkReal x9808=((1.0)*x9799);
IkReal x9809=((1.0)*x9798);
IkReal x9810=(gconst1*x9798);
IkReal x9811=(cj3*x9798);
IkReal x9812=(x9801+x9800);
IkReal x9813=(x9799*x9807);
evalcond[0]=(((r21*x9810))+(((-1.0)*r22*x9808))+(((-1.0)*gconst2*r20*x9809)));
evalcond[1]=((((-1.0)*gconst2*r10*x9809))+((r11*x9810))+(((-1.0)*r12*x9808)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9809))+(((-1.0)*r02*x9808))+((r01*x9810)));
evalcond[3]=(((r00*x9802))+((r01*x9799*x9803))+((r02*x9811))+((r01*x9807))+(((-1.0)*r00*x9805*x9808)));
evalcond[4]=(((r00*x9803))+(((-1.0)*r01*x9802*x9808))+((r01*x9805))+(((-1.0)*r02*sj3*x9809))+((r00*x9813)));
evalcond[5]=(((r21*x9807))+((r21*x9799*x9803))+((r22*x9811))+(((-1.0)*r20*x9805*x9808))+((r20*x9802))+x9812);
evalcond[6]=(((r10*x9802))+(((-1.0)*x9804))+((r12*x9811))+((r11*x9807))+(((-1.0)*r10*x9805*x9808))+((r11*x9799*x9803))+x9806);
evalcond[7]=(((r10*x9803))+((r11*x9805))+(((-1.0)*r12*sj3*x9809))+(((-1.0)*r11*x9802*x9808))+x9812+((r10*x9813)));
evalcond[8]=(((r21*x9805))+(((-1.0)*r21*x9802*x9808))+(((-1.0)*r22*sj3*x9809))+(((-1.0)*x9806))+((r20*x9803))+x9804+((r20*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9814=gconst2*gconst2;
IkReal x9815=gconst1*gconst1;
IkReal x9816=(gconst1*r00);
IkReal x9817=(r11*sj3);
IkReal x9818=((1.0)*gconst2);
IkReal x9819=(cj3*r12);
IkReal x9820=(cj3*r11);
IkReal x9821=(gconst2*r01);
IkReal x9822=(cj3*r10);
IkReal x9823=(r10*sj3);
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9814*x9823))+((r01*x9815*x9817))+(((-1.0)*x9816*x9817*x9818))+(((-1.0)*gconst1*r01*x9818*x9823)))),-1);
if(!x9824.valid){
continue;
}
CheckValue<IkReal> x9825 = IKatan2WithCheck(IkReal((((x9816*x9819))+((x9819*x9821)))),IkReal((((gconst1*x9820*x9821))+(((-1.0)*r01*x9814*x9822))+((r00*x9815*x9820))+(((-1.0)*x9816*x9818*x9822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9824.value)))+(x9825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9826=IKsin(j4);
IkReal x9827=IKcos(j4);
IkReal x9828=(cj2*sj1);
IkReal x9829=(cj1*sj2);
IkReal x9830=(gconst1*sj3);
IkReal x9831=(cj3*gconst1);
IkReal x9832=(sj1*sj2);
IkReal x9833=(cj3*gconst2);
IkReal x9834=(cj1*cj2);
IkReal x9835=(gconst2*sj3);
IkReal x9836=((1.0)*x9827);
IkReal x9837=((1.0)*x9826);
IkReal x9838=(gconst1*x9826);
IkReal x9839=(cj3*x9826);
IkReal x9840=(x9829+x9828);
IkReal x9841=(x9827*x9835);
evalcond[0]=(((r21*x9838))+(((-1.0)*r22*x9836))+(((-1.0)*gconst2*r20*x9837)));
evalcond[1]=(((r11*x9838))+(((-1.0)*gconst2*r10*x9837))+(((-1.0)*r12*x9836)));
evalcond[2]=((1.0)+((r01*x9838))+(((-1.0)*r02*x9836))+(((-1.0)*gconst2*r00*x9837)));
evalcond[3]=(((r00*x9830))+((r01*x9835))+(((-1.0)*r00*x9833*x9836))+((r01*x9827*x9831))+((r02*x9839)));
evalcond[4]=((((-1.0)*r02*sj3*x9837))+((r00*x9831))+((r01*x9833))+(((-1.0)*r01*x9830*x9836))+((r00*x9841)));
evalcond[5]=((((-1.0)*r20*x9833*x9836))+((r21*x9835))+((r22*x9839))+((r21*x9827*x9831))+((r20*x9830))+x9840);
evalcond[6]=(((r11*x9827*x9831))+((r11*x9835))+((r10*x9830))+(((-1.0)*r10*x9833*x9836))+(((-1.0)*x9832))+((r12*x9839))+x9834);
evalcond[7]=(((r11*x9833))+((r10*x9841))+((r10*x9831))+(((-1.0)*r11*x9830*x9836))+(((-1.0)*r12*sj3*x9837))+x9840);
evalcond[8]=((((-1.0)*x9834))+((r21*x9833))+((r20*x9841))+(((-1.0)*r22*sj3*x9837))+((r20*x9831))+x9832+(((-1.0)*r21*x9830*x9836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9842 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9842.valid){
continue;
}
CheckValue<IkReal> x9843=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9843.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9842.value)+(((1.5707963267949)*(x9843.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9844=IKsin(j4);
IkReal x9845=IKcos(j4);
IkReal x9846=(cj2*sj1);
IkReal x9847=(cj1*sj2);
IkReal x9848=(gconst1*sj3);
IkReal x9849=(cj3*gconst1);
IkReal x9850=(sj1*sj2);
IkReal x9851=(cj3*gconst2);
IkReal x9852=(cj1*cj2);
IkReal x9853=(gconst2*sj3);
IkReal x9854=((1.0)*x9845);
IkReal x9855=((1.0)*x9844);
IkReal x9856=(gconst1*x9844);
IkReal x9857=(cj3*x9844);
IkReal x9858=(x9847+x9846);
IkReal x9859=(x9845*x9853);
evalcond[0]=(((r21*x9856))+(((-1.0)*gconst2*r20*x9855))+(((-1.0)*r22*x9854)));
evalcond[1]=(((r11*x9856))+(((-1.0)*gconst2*r10*x9855))+(((-1.0)*r12*x9854)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9854))+((r01*x9856))+(((-1.0)*gconst2*r00*x9855)));
evalcond[3]=(((r01*x9845*x9849))+((r02*x9857))+((r01*x9853))+((r00*x9848))+(((-1.0)*r00*x9851*x9854)));
evalcond[4]=((((-1.0)*r02*sj3*x9855))+(((-1.0)*r01*x9848*x9854))+((r00*x9859))+((r01*x9851))+((r00*x9849)));
evalcond[5]=(((r21*x9853))+(((-1.0)*r20*x9851*x9854))+((r21*x9845*x9849))+((r20*x9848))+((r22*x9857))+x9858);
evalcond[6]=(((r11*x9853))+(((-1.0)*x9850))+((r10*x9848))+(((-1.0)*r10*x9851*x9854))+((r11*x9845*x9849))+x9852+((r12*x9857)));
evalcond[7]=(((r10*x9859))+((r11*x9851))+((r10*x9849))+(((-1.0)*r11*x9848*x9854))+x9858+(((-1.0)*r12*sj3*x9855)));
evalcond[8]=(((r21*x9851))+(((-1.0)*x9852))+(((-1.0)*r21*x9848*x9854))+((r20*x9849))+(((-1.0)*r22*sj3*x9855))+((r20*x9859))+x9850);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9860=((-1.0)*r20);
IkReal x9861=((-1.0)*px);
CheckValue<IkReal> x9863 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9860),IKFAST_ATAN2_MAGTHRESH);
if(!x9863.valid){
continue;
}
IkReal x9862=((-1.0)*(x9863.value));
sj5=gconst1;
cj5=gconst2;
j5=x9862;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9861);
rxp1_1=(px*r21);
rxp1_2=(r11*x9861);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9862;
IkReal gconst1=r21;
IkReal gconst2=x9860;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9864=((-1.0)*r20);
IkReal x9865=((-1.0)*px);
CheckValue<IkReal> x9867 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9864),IKFAST_ATAN2_MAGTHRESH);
if(!x9867.valid){
continue;
}
IkReal x9866=((-1.0)*(x9867.value));
sj5=gconst1;
cj5=gconst2;
j5=x9866;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9865);
rxp1_1=(px*r21);
rxp1_2=(r11*x9865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9866;
IkReal gconst1=r21;
IkReal gconst2=x9864;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9868=((-1.0)*r20);
IkReal x9869=((-1.0)*px);
CheckValue<IkReal> x9871 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9868),IKFAST_ATAN2_MAGTHRESH);
if(!x9871.valid){
continue;
}
IkReal x9870=((-1.0)*(x9871.value));
sj5=gconst1;
cj5=gconst2;
j5=x9870;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9869);
rxp1_1=(px*r21);
rxp1_2=(r11*x9869);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9870;
IkReal gconst1=r21;
IkReal gconst2=x9868;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9872=((-1.0)*r20);
IkReal x9873=((-1.0)*px);
CheckValue<IkReal> x9875 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9872),IKFAST_ATAN2_MAGTHRESH);
if(!x9875.valid){
continue;
}
IkReal x9874=((-1.0)*(x9875.value));
sj5=gconst1;
cj5=gconst2;
j5=x9874;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9873);
rxp1_1=(px*r21);
rxp1_2=(r11*x9873);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9874;
IkReal gconst1=r21;
IkReal gconst2=x9872;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9876=((-1.0)*r20);
IkReal x9877=((-1.0)*px);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9876),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
IkReal x9878=((-1.0)*(x9879.value));
sj5=gconst1;
cj5=gconst2;
j5=x9878;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9877);
rxp1_1=(px*r21);
rxp1_2=(r11*x9877);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9878;
IkReal gconst1=r21;
IkReal gconst2=x9876;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9880=((-1.0)*r20);
IkReal x9881=((-1.0)*px);
CheckValue<IkReal> x9883 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9880),IKFAST_ATAN2_MAGTHRESH);
if(!x9883.valid){
continue;
}
IkReal x9882=((-1.0)*(x9883.value));
sj5=gconst1;
cj5=gconst2;
j5=x9882;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9881);
rxp1_1=(px*r21);
rxp1_2=(r11*x9881);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9882;
IkReal gconst1=r21;
IkReal gconst2=x9880;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9886=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9886.valid){
continue;
}
IkReal x9884=x9886.value;
IkReal x9885=(sj0*x9884);
cj4array[0]=(((cj1*sj2*x9885))+((cj2*sj1*x9885)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9887=IKsin(j4);
IkReal x9888=IKcos(j4);
IkReal x9889=(gconst1*x9887);
IkReal x9890=((1.0)*x9888);
IkReal x9891=((1.0)*gconst2*x9887);
evalcond[0]=((-1.0)*r02*x9887);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9890)));
evalcond[2]=(((r21*x9889))+(((-1.0)*r20*x9891)));
evalcond[3]=(((r11*x9889))+(((-1.0)*r10*x9891)));
evalcond[4]=((((-1.0)*gconst1*r21*x9890))+((gconst2*r20*x9888))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9893=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9893.valid){
continue;
}
IkReal x9892=x9893.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9892))+((cj1*cj2*x9892)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9894=IKsin(j4);
IkReal x9895=IKcos(j4);
IkReal x9896=(gconst2*r10);
IkReal x9897=((1.0)*sj0);
IkReal x9898=((1.0)*x9894);
IkReal x9899=(gconst1*x9894);
IkReal x9900=((1.0)*x9895);
evalcond[0]=((-1.0)*r02*x9894);
evalcond[1]=((((-1.0)*r02*x9900))+(((-1.0)*x9897)));
evalcond[2]=(((r21*x9899))+(((-1.0)*gconst2*r20*x9898)));
evalcond[3]=(((r11*x9899))+(((-1.0)*x9896*x9898)));
evalcond[4]=((((-1.0)*cj2*sj1*x9897))+(((-1.0)*cj1*sj2*x9897))+((x9895*x9896))+(((-1.0)*gconst1*r11*x9900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9901=IKPowWithIntegerCheck(r02,-1);
if(!x9901.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9901.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9902=IKsin(j4);
IkReal x9903=IKcos(j4);
IkReal x9904=(gconst2*r10);
IkReal x9905=((1.0)*sj0);
IkReal x9906=(gconst1*r11);
IkReal x9907=(gconst1*r21);
IkReal x9908=(gconst2*r20);
IkReal x9909=((1.0)*x9902);
IkReal x9910=((1.0)*x9903);
evalcond[0]=((-1.0)*r02*x9902);
evalcond[1]=(((x9902*x9907))+(((-1.0)*x9908*x9909)));
evalcond[2]=(((x9902*x9906))+(((-1.0)*x9904*x9909)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9903*x9908))+(((-1.0)*x9907*x9910)));
evalcond[4]=(((x9903*x9904))+(((-1.0)*x9906*x9910))+(((-1.0)*cj2*sj1*x9905))+(((-1.0)*cj1*sj2*x9905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9911=((-1.0)*r20);
IkReal x9912=((-1.0)*px);
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9911),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
IkReal x9913=((-1.0)*(x9914.value));
sj5=gconst1;
cj5=gconst2;
j5=x9913;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9912);
rxp1_1=(px*r21);
rxp1_2=(r11*x9912);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9913;
IkReal gconst1=r21;
IkReal gconst2=x9911;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9915=((-1.0)*r20);
IkReal x9916=((-1.0)*px);
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9915),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
IkReal x9917=((-1.0)*(x9918.value));
sj5=gconst1;
cj5=gconst2;
j5=x9917;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9916);
rxp1_1=(px*r21);
rxp1_2=(r11*x9916);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9917;
IkReal gconst1=r21;
IkReal gconst2=x9915;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9919=((-1.0)*r20);
IkReal x9920=((-1.0)*px);
CheckValue<IkReal> x9922 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9919),IKFAST_ATAN2_MAGTHRESH);
if(!x9922.valid){
continue;
}
IkReal x9921=((-1.0)*(x9922.value));
sj5=gconst1;
cj5=gconst2;
j5=x9921;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9920);
rxp1_1=(px*r21);
rxp1_2=(r11*x9920);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9921;
IkReal gconst1=r21;
IkReal gconst2=x9919;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9925=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9925.valid){
continue;
}
IkReal x9923=x9925.value;
IkReal x9924=(sj0*x9923);
cj4array[0]=(((cj2*sj1*x9924))+((cj1*sj2*x9924)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9926=IKsin(j4);
IkReal x9927=IKcos(j4);
IkReal x9928=((1.0)*gconst2);
IkReal x9929=(gconst1*r21);
evalcond[0]=(r02*x9926);
evalcond[1]=((((-1.0)*r02*x9927))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9926*x9928))+((x9926*x9929)));
evalcond[3]=((((-1.0)*r10*x9926*x9928))+((gconst1*r11*x9926)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9927*x9928))+((x9927*x9929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9931=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9931.valid){
continue;
}
IkReal x9930=x9931.value;
cj4array[0]=(((cj1*cj2*x9930))+(((-1.0)*sj1*sj2*x9930)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9932=IKsin(j4);
IkReal x9933=IKcos(j4);
IkReal x9934=((1.0)*sj0);
IkReal x9935=(gconst1*x9932);
IkReal x9936=((1.0)*x9933);
IkReal x9937=((1.0)*gconst2*x9932);
evalcond[0]=(r02*x9932);
evalcond[1]=((((-1.0)*x9934))+(((-1.0)*r02*x9936)));
evalcond[2]=(((r21*x9935))+(((-1.0)*r20*x9937)));
evalcond[3]=((((-1.0)*r10*x9937))+((r11*x9935)));
evalcond[4]=((((-1.0)*cj2*sj1*x9934))+(((-1.0)*cj1*sj2*x9934))+((gconst1*r11*x9933))+(((-1.0)*gconst2*r10*x9936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9938=IKPowWithIntegerCheck(r02,-1);
if(!x9938.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9938.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9939=IKsin(j4);
IkReal x9940=IKcos(j4);
IkReal x9941=(gconst1*r21);
IkReal x9942=((1.0)*sj0);
IkReal x9943=(gconst1*r11);
IkReal x9944=((1.0)*gconst2*r10);
IkReal x9945=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9939);
evalcond[1]=((((-1.0)*x9939*x9945))+((x9939*x9941)));
evalcond[2]=((((-1.0)*x9939*x9944))+((x9939*x9943)));
evalcond[3]=((((-1.0)*x9940*x9945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9940*x9941)));
evalcond[4]=((((-1.0)*x9940*x9944))+(((-1.0)*cj2*sj1*x9942))+(((-1.0)*cj1*sj2*x9942))+((x9940*x9943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9947=IKPowWithIntegerCheck(r02,-1);
if(!x9947.valid){
continue;
}
IkReal x9946=x9947.value;
CheckValue<IkReal> x9948=IKPowWithIntegerCheck(cj3,-1);
if(!x9948.valid){
continue;
}
if( IKabs((x9946*(x9948.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9946)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9946*(x9948.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9946))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x9946*(x9948.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9946));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9949=IKsin(j4);
IkReal x9950=IKcos(j4);
IkReal x9951=(gconst2*r10);
IkReal x9952=(gconst1*r11);
IkReal x9953=(sj1*sj2);
IkReal x9954=(gconst2*r20);
IkReal x9955=(cj2*sj1);
IkReal x9956=((1.0)*sj0);
IkReal x9957=(gconst1*r20);
IkReal x9958=(gconst2*r11);
IkReal x9959=(gconst1*r21);
IkReal x9960=((1.0)*cj0);
IkReal x9961=(gconst1*r10);
IkReal x9962=(cj1*sj2);
IkReal x9963=(gconst2*r21);
IkReal x9964=(sj3*x9950);
IkReal x9965=((1.0)*cj1*cj2);
IkReal x9966=(cj3*x9950);
IkReal x9967=(r02*x9949);
IkReal x9968=((1.0)*x9949);
evalcond[0]=((((-1.0)*r02*x9950))+(((-1.0)*x9956)));
evalcond[1]=((((-1.0)*x9954*x9968))+((x9949*x9959)));
evalcond[2]=(cj0+(((-1.0)*x9951*x9968))+((x9949*x9952)));
evalcond[3]=(((cj0*x9953))+(((-1.0)*cj1*cj2*x9960))+((cj3*x9967)));
evalcond[4]=((((-1.0)*x9960*x9962))+(((-1.0)*sj3*x9967))+(((-1.0)*x9955*x9960)));
evalcond[5]=(((x9959*x9966))+((sj3*x9957))+(((-1.0)*x9954*x9966))+x9955+x9962+((sj3*x9963)));
evalcond[6]=(((cj3*x9957))+(((-1.0)*x9965))+(((-1.0)*x9959*x9964))+x9953+((cj3*x9963))+((x9954*x9964)));
evalcond[7]=(((sj3*x9958))+(((-1.0)*x9951*x9966))+(((-1.0)*cj1*cj2*x9956))+((sj0*x9953))+((x9952*x9966))+((sj3*x9961)));
evalcond[8]=((((-1.0)*x9955*x9956))+(((-1.0)*x9956*x9962))+((cj3*x9958))+((x9951*x9964))+(((-1.0)*x9952*x9964))+((cj3*x9961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9969=((1.0)*sj3);
IkReal x9970=((1.0)*gconst2);
CheckValue<IkReal> x9971=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9970))),-1);
if(!x9971.valid){
continue;
}
CheckValue<IkReal> x9972=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9970))),-1);
if(!x9972.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9971.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9972.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9969))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9969)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9971.value)))+IKsqr(((x9972.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9969))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9969))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9971.value)), ((x9972.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9969))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9969))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9973=IKsin(j4);
IkReal x9974=IKcos(j4);
IkReal x9975=(gconst2*r10);
IkReal x9976=(gconst1*r11);
IkReal x9977=(sj1*sj2);
IkReal x9978=(gconst2*r20);
IkReal x9979=(cj2*sj1);
IkReal x9980=((1.0)*sj0);
IkReal x9981=(gconst1*r20);
IkReal x9982=(gconst2*r11);
IkReal x9983=(gconst1*r21);
IkReal x9984=((1.0)*cj0);
IkReal x9985=(gconst1*r10);
IkReal x9986=(cj1*sj2);
IkReal x9987=(gconst2*r21);
IkReal x9988=(sj3*x9974);
IkReal x9989=((1.0)*cj1*cj2);
IkReal x9990=(cj3*x9974);
IkReal x9991=(r02*x9973);
IkReal x9992=((1.0)*x9973);
evalcond[0]=((((-1.0)*r02*x9974))+(((-1.0)*x9980)));
evalcond[1]=((((-1.0)*x9978*x9992))+((x9973*x9983)));
evalcond[2]=(cj0+((x9973*x9976))+(((-1.0)*x9975*x9992)));
evalcond[3]=(((cj3*x9991))+((cj0*x9977))+(((-1.0)*cj1*cj2*x9984)));
evalcond[4]=((((-1.0)*x9984*x9986))+(((-1.0)*sj3*x9991))+(((-1.0)*x9979*x9984)));
evalcond[5]=(((x9983*x9990))+((sj3*x9981))+((sj3*x9987))+(((-1.0)*x9978*x9990))+x9979+x9986);
evalcond[6]=(((cj3*x9987))+((cj3*x9981))+(((-1.0)*x9983*x9988))+((x9978*x9988))+x9977+(((-1.0)*x9989)));
evalcond[7]=(((x9976*x9990))+(((-1.0)*x9975*x9990))+((sj3*x9982))+((sj3*x9985))+((sj0*x9977))+(((-1.0)*cj1*cj2*x9980)));
evalcond[8]=(((cj3*x9985))+((cj3*x9982))+((x9975*x9988))+(((-1.0)*x9976*x9988))+(((-1.0)*x9980*x9986))+(((-1.0)*x9979*x9980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9993=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9993.valid){
continue;
}
CheckValue<IkReal> x9994=IKPowWithIntegerCheck(r02,-1);
if(!x9994.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9993.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9994.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9993.value)))+IKsqr(((-1.0)*sj0*(x9994.value)))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9993.value)), ((-1.0)*sj0*(x9994.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9995=IKsin(j4);
IkReal x9996=IKcos(j4);
IkReal x9997=(gconst2*r10);
IkReal x9998=(gconst1*r11);
IkReal x9999=(sj1*sj2);
IkReal x10000=(gconst2*r20);
IkReal x10001=(cj2*sj1);
IkReal x10002=((1.0)*sj0);
IkReal x10003=(gconst1*r20);
IkReal x10004=(gconst2*r11);
IkReal x10005=(gconst1*r21);
IkReal x10006=((1.0)*cj0);
IkReal x10007=(gconst1*r10);
IkReal x10008=(cj1*sj2);
IkReal x10009=(gconst2*r21);
IkReal x10010=(sj3*x9996);
IkReal x10011=((1.0)*cj1*cj2);
IkReal x10012=(cj3*x9996);
IkReal x10013=(r02*x9995);
IkReal x10014=((1.0)*x9995);
evalcond[0]=((((-1.0)*r02*x9996))+(((-1.0)*x10002)));
evalcond[1]=(((x10005*x9995))+(((-1.0)*x10000*x10014)));
evalcond[2]=(cj0+(((-1.0)*x10014*x9997))+((x9995*x9998)));
evalcond[3]=(((cj0*x9999))+((cj3*x10013))+(((-1.0)*cj1*cj2*x10006)));
evalcond[4]=((((-1.0)*x10006*x10008))+(((-1.0)*x10001*x10006))+(((-1.0)*sj3*x10013)));
evalcond[5]=(x10001+x10008+(((-1.0)*x10000*x10012))+((x10005*x10012))+((sj3*x10009))+((sj3*x10003)));
evalcond[6]=(((x10000*x10010))+(((-1.0)*x10005*x10010))+((cj3*x10003))+((cj3*x10009))+x9999+(((-1.0)*x10011)));
evalcond[7]=(((sj0*x9999))+((x10012*x9998))+(((-1.0)*cj1*cj2*x10002))+(((-1.0)*x10012*x9997))+((sj3*x10004))+((sj3*x10007)));
evalcond[8]=(((x10010*x9997))+(((-1.0)*x10002*x10008))+((cj3*x10004))+((cj3*x10007))+(((-1.0)*x10010*x9998))+(((-1.0)*x10001*x10002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10015=gconst1*gconst1;
IkReal x10016=r21*r21;
IkReal x10017=gconst2*gconst2;
IkReal x10018=r20*r20;
IkReal x10019=(gconst2*r20);
IkReal x10020=(cj1*cj2);
IkReal x10021=(sj1*sj2);
IkReal x10022=(gconst1*r21);
IkReal x10023=(cj3*gconst2);
IkReal x10024=(cj3*r20);
CheckValue<IkReal> x10025=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10017*x10018))+(((-2.0)*sj3*x10019*x10022))+((sj3*x10015*x10016)))),-1);
if(!x10025.valid){
continue;
}
CheckValue<IkReal> x10026 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10020))+((gconst1*r22*x10024))+((r22*x10021))+((r21*r22*x10023)))),IkReal(((((-1.0)*r21*x10017*x10024))+((r21*x10015*x10024))+((x10021*x10022))+(((-1.0)*x10020*x10022))+(((-1.0)*x10019*x10021))+((x10019*x10020))+((gconst1*x10016*x10023))+(((-1.0)*gconst1*x10018*x10023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10025.value)))+(x10026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10027=IKsin(j4);
IkReal x10028=IKcos(j4);
IkReal x10029=(cj3*gconst1);
IkReal x10030=(gconst1*r01);
IkReal x10031=(gconst1*r11);
IkReal x10032=(sj1*sj2);
IkReal x10033=(cj3*gconst2);
IkReal x10034=(gconst1*sj3);
IkReal x10035=(gconst2*sj3);
IkReal x10036=((1.0)*sj0);
IkReal x10037=(cj1*sj2);
IkReal x10038=((1.0)*x10028);
IkReal x10039=((1.0)*x10027);
IkReal x10040=((1.0)*cj1*cj2);
IkReal x10041=(cj3*x10027);
IkReal x10042=((1.0)*cj2*sj1);
IkReal x10043=(x10028*x10035);
evalcond[0]=(((gconst1*r21*x10027))+(((-1.0)*r22*x10038))+(((-1.0)*gconst2*r20*x10039)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10039))+((x10027*x10031))+(((-1.0)*r12*x10038)));
evalcond[2]=((((-1.0)*r02*x10038))+((x10027*x10030))+(((-1.0)*gconst2*r00*x10039))+(((-1.0)*x10036)));
evalcond[3]=(((cj2*sj1))+((r21*x10028*x10029))+((r21*x10035))+((r20*x10034))+x10037+(((-1.0)*r20*x10033*x10038))+((r22*x10041)));
evalcond[4]=(((r21*x10033))+((r20*x10029))+(((-1.0)*r22*sj3*x10039))+(((-1.0)*r21*x10034*x10038))+x10032+((r20*x10043))+(((-1.0)*x10040)));
evalcond[5]=(((cj0*x10032))+(((-1.0)*cj0*x10040))+(((-1.0)*r00*x10033*x10038))+((r00*x10034))+((r01*x10035))+((r01*x10028*x10029))+((r02*x10041)));
evalcond[6]=(((sj0*x10032))+((r10*x10034))+(((-1.0)*r10*x10033*x10038))+((r11*x10028*x10029))+((r11*x10035))+((r12*x10041))+(((-1.0)*cj1*cj2*x10036)));
evalcond[7]=((((-1.0)*cj0*x10042))+(((-1.0)*r02*sj3*x10039))+((r00*x10043))+((r01*x10033))+((r00*x10029))+(((-1.0)*cj0*x10037))+(((-1.0)*sj3*x10030*x10038)));
evalcond[8]=(((r10*x10043))+((r10*x10029))+(((-1.0)*cj2*sj1*x10036))+(((-1.0)*r12*sj3*x10039))+((r11*x10033))+(((-1.0)*x10036*x10037))+(((-1.0)*sj3*x10031*x10038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10044=((1.0)*gconst2);
CheckValue<IkReal> x10045 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10044))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10045.valid){
continue;
}
CheckValue<IkReal> x10046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10044))+(((-1.0)*gconst1*r10)))),-1);
if(!x10046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10045.value)+(((1.5707963267949)*(x10046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10047=IKsin(j4);
IkReal x10048=IKcos(j4);
IkReal x10049=(cj3*gconst1);
IkReal x10050=(gconst1*r01);
IkReal x10051=(gconst1*r11);
IkReal x10052=(sj1*sj2);
IkReal x10053=(cj3*gconst2);
IkReal x10054=(gconst1*sj3);
IkReal x10055=(gconst2*sj3);
IkReal x10056=((1.0)*sj0);
IkReal x10057=(cj1*sj2);
IkReal x10058=((1.0)*x10048);
IkReal x10059=((1.0)*x10047);
IkReal x10060=((1.0)*cj1*cj2);
IkReal x10061=(cj3*x10047);
IkReal x10062=((1.0)*cj2*sj1);
IkReal x10063=(x10048*x10055);
evalcond[0]=(((gconst1*r21*x10047))+(((-1.0)*r22*x10058))+(((-1.0)*gconst2*r20*x10059)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10059))+(((-1.0)*r12*x10058))+((x10047*x10051)));
evalcond[2]=((((-1.0)*x10056))+(((-1.0)*gconst2*r00*x10059))+(((-1.0)*r02*x10058))+((x10047*x10050)));
evalcond[3]=(((cj2*sj1))+((r20*x10054))+((r21*x10048*x10049))+((r22*x10061))+x10057+((r21*x10055))+(((-1.0)*r20*x10053*x10058)));
evalcond[4]=((((-1.0)*r22*sj3*x10059))+((r20*x10063))+(((-1.0)*x10060))+(((-1.0)*r21*x10054*x10058))+x10052+((r21*x10053))+((r20*x10049)));
evalcond[5]=((((-1.0)*cj0*x10060))+((r01*x10055))+((r00*x10054))+((r02*x10061))+((cj0*x10052))+((r01*x10048*x10049))+(((-1.0)*r00*x10053*x10058)));
evalcond[6]=(((r11*x10048*x10049))+((r12*x10061))+((r10*x10054))+(((-1.0)*cj1*cj2*x10056))+((sj0*x10052))+(((-1.0)*r10*x10053*x10058))+((r11*x10055)));
evalcond[7]=((((-1.0)*cj0*x10062))+(((-1.0)*sj3*x10050*x10058))+((r00*x10063))+((r01*x10053))+(((-1.0)*cj0*x10057))+((r00*x10049))+(((-1.0)*r02*sj3*x10059)));
evalcond[8]=(((r10*x10063))+((r10*x10049))+(((-1.0)*r12*sj3*x10059))+(((-1.0)*x10056*x10057))+(((-1.0)*sj3*x10051*x10058))+((r11*x10053))+(((-1.0)*cj2*sj1*x10056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10064=((1.0)*gconst2);
CheckValue<IkReal> x10065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10064)))),-1);
if(!x10065.valid){
continue;
}
CheckValue<IkReal> x10066 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10065.value)))+(x10066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10067=IKsin(j4);
IkReal x10068=IKcos(j4);
IkReal x10069=(cj3*gconst1);
IkReal x10070=(gconst1*r01);
IkReal x10071=(gconst1*r11);
IkReal x10072=(sj1*sj2);
IkReal x10073=(cj3*gconst2);
IkReal x10074=(gconst1*sj3);
IkReal x10075=(gconst2*sj3);
IkReal x10076=((1.0)*sj0);
IkReal x10077=(cj1*sj2);
IkReal x10078=((1.0)*x10068);
IkReal x10079=((1.0)*x10067);
IkReal x10080=((1.0)*cj1*cj2);
IkReal x10081=(cj3*x10067);
IkReal x10082=((1.0)*cj2*sj1);
IkReal x10083=(x10068*x10075);
evalcond[0]=(((gconst1*r21*x10067))+(((-1.0)*r22*x10078))+(((-1.0)*gconst2*r20*x10079)));
evalcond[1]=(((x10067*x10071))+cj0+(((-1.0)*gconst2*r10*x10079))+(((-1.0)*r12*x10078)));
evalcond[2]=(((x10067*x10070))+(((-1.0)*x10076))+(((-1.0)*gconst2*r00*x10079))+(((-1.0)*r02*x10078)));
evalcond[3]=(((cj2*sj1))+((r20*x10074))+(((-1.0)*r20*x10073*x10078))+((r21*x10068*x10069))+x10077+((r21*x10075))+((r22*x10081)));
evalcond[4]=((((-1.0)*r22*sj3*x10079))+((r20*x10069))+((r20*x10083))+(((-1.0)*r21*x10074*x10078))+(((-1.0)*x10080))+x10072+((r21*x10073)));
evalcond[5]=(((r01*x10068*x10069))+((r00*x10074))+((r01*x10075))+((r02*x10081))+((cj0*x10072))+(((-1.0)*r00*x10073*x10078))+(((-1.0)*cj0*x10080)));
evalcond[6]=((((-1.0)*r10*x10073*x10078))+((r10*x10074))+(((-1.0)*cj1*cj2*x10076))+((sj0*x10072))+((r11*x10068*x10069))+((r11*x10075))+((r12*x10081)));
evalcond[7]=(((r00*x10083))+((r00*x10069))+(((-1.0)*sj3*x10070*x10078))+((r01*x10073))+(((-1.0)*cj0*x10077))+(((-1.0)*r02*sj3*x10079))+(((-1.0)*cj0*x10082)));
evalcond[8]=(((r10*x10069))+(((-1.0)*sj3*x10071*x10078))+(((-1.0)*r12*sj3*x10079))+(((-1.0)*x10076*x10077))+(((-1.0)*cj2*sj1*x10076))+((r11*x10073))+((r10*x10083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10084=((-1.0)*r21);
IkReal x10086 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10086)==0){
continue;
}
IkReal x10085=pow(x10086,-0.5);
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal(x10084),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10087.value))));
IkReal gconst4=(x10084*x10085);
IkReal gconst5=((1.0)*r20*x10085);
CheckValue<IkReal> x10088 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10088.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10088.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10089=((-1.0)*r21);
CheckValue<IkReal> x10092 = IKatan2WithCheck(IkReal(x10089),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10092.valid){
continue;
}
IkReal x10090=((1.0)*(x10092.value));
IkReal x10091=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10090)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10090)));
IkReal gconst4=(x10089*x10091);
IkReal gconst5=((1.0)*r20*x10091);
IkReal x10093=r22*r22;
IkReal x10094=((1.0)*x10093);
CheckValue<IkReal> x10098=IKPowWithIntegerCheck(((-1.0)+x10093),-1);
if(!x10098.valid){
continue;
}
IkReal x10095=x10098.value;
if((((1.0)+(((-1.0)*x10094)))) < -0.00001)
continue;
IkReal x10096=IKsqrt(((1.0)+(((-1.0)*x10094))));
IkReal x10097=(cj0*x10095*x10096);
j4eval[0]=((IKabs((x10097+(((-1.0)*x10094*x10097)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10099=((-1.0)*r21);
CheckValue<IkReal> x10102 = IKatan2WithCheck(IkReal(x10099),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10102.valid){
continue;
}
IkReal x10100=((1.0)*(x10102.value));
IkReal x10101=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10100)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10100)));
IkReal gconst4=(x10099*x10101);
IkReal gconst5=((1.0)*r20*x10101);
IkReal x10103=r22*r22;
IkReal x10104=((1.0)*x10103);
CheckValue<IkReal> x10108=IKPowWithIntegerCheck(((-1.0)+x10103),-1);
if(!x10108.valid){
continue;
}
IkReal x10105=x10108.value;
if((((1.0)+(((-1.0)*x10104)))) < -0.00001)
continue;
IkReal x10106=IKsqrt(((1.0)+(((-1.0)*x10104))));
IkReal x10107=(sj0*x10105*x10106);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10104*x10107))+x10107))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10109=((-1.0)*r21);
CheckValue<IkReal> x10112 = IKatan2WithCheck(IkReal(x10109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10112.valid){
continue;
}
IkReal x10110=((1.0)*(x10112.value));
IkReal x10111=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10110)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10110)));
IkReal gconst4=(x10109*x10111);
IkReal gconst5=((1.0)*r20*x10111);
IkReal x10113=r22*r22;
IkReal x10114=(r12*sj0);
IkReal x10115=(cj0*r02);
CheckValue<IkReal> x10119=IKPowWithIntegerCheck(((-1.0)+x10113),-1);
if(!x10119.valid){
continue;
}
IkReal x10116=x10119.value;
if((((1.0)+(((-1.0)*x10113)))) < -0.00001)
continue;
IkReal x10117=IKsqrt(((1.0)+(((-1.0)*x10113))));
IkReal x10118=(r22*x10116*x10117);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10115*x10118))+((x10114*x10118)))))+(IKabs(((((-1.0)*x10114))+(((-1.0)*x10115))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10120=((-1.0)*r21);
CheckValue<IkReal> x10123 = IKatan2WithCheck(IkReal(x10120),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10123.valid){
continue;
}
IkReal x10121=((1.0)*(x10123.value));
IkReal x10122=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10121)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10121)));
IkReal gconst4=(x10120*x10122);
IkReal gconst5=((1.0)*r20*x10122);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10124=((-1.0)*r21);
CheckValue<IkReal> x10127 = IKatan2WithCheck(IkReal(x10124),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10127.valid){
continue;
}
IkReal x10125=((1.0)*(x10127.value));
IkReal x10126=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10125)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10125)));
IkReal gconst4=(x10124*x10126);
IkReal gconst5=((1.0)*r20*x10126);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10128=((-1.0)*r21);
CheckValue<IkReal> x10131 = IKatan2WithCheck(IkReal(x10128),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10131.valid){
continue;
}
IkReal x10129=((1.0)*(x10131.value));
IkReal x10130=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10129)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10129)));
IkReal gconst4=(x10128*x10130);
IkReal gconst5=((1.0)*r20*x10130);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10132=((-1.0)*r21);
CheckValue<IkReal> x10135 = IKatan2WithCheck(IkReal(x10132),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10135.valid){
continue;
}
IkReal x10133=((1.0)*(x10135.value));
IkReal x10134=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10133)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10133)));
IkReal gconst4=(x10132*x10134);
IkReal gconst5=((1.0)*r20*x10134);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10136=((-1.0)*r21);
CheckValue<IkReal> x10139 = IKatan2WithCheck(IkReal(x10136),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10139.valid){
continue;
}
IkReal x10137=((1.0)*(x10139.value));
IkReal x10138=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10137)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10137)));
IkReal gconst4=(x10136*x10138);
IkReal gconst5=((1.0)*r20*x10138);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10140=((-1.0)*r21);
CheckValue<IkReal> x10143 = IKatan2WithCheck(IkReal(x10140),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10143.valid){
continue;
}
IkReal x10141=((1.0)*(x10143.value));
IkReal x10142=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10141)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10141)));
IkReal gconst4=(x10140*x10142);
IkReal gconst5=((1.0)*r20*x10142);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10144=(gconst5*r10);
IkReal x10145=(gconst4*r11);
CheckValue<IkReal> x10146=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10144*x10145))+(x10144*x10144)+(x10145*x10145))),-1);
if(!x10146.valid){
continue;
}
CheckValue<IkReal> x10147 = IKatan2WithCheck(IkReal((x10144+(((-1.0)*x10145)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10146.value)))+(x10147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10148=IKsin(j4);
IkReal x10149=IKcos(j4);
IkReal x10150=(gconst4*r11);
IkReal x10151=((1.0)*cj1);
IkReal x10152=(gconst5*r10);
IkReal x10153=(gconst4*r01);
IkReal x10154=(gconst5*r00);
IkReal x10155=(gconst4*r21);
IkReal x10156=(gconst5*r20);
IkReal x10157=((1.0)*x10149);
IkReal x10158=((1.0)*x10148);
evalcond[0]=(((x10148*x10155))+(((-1.0)*x10156*x10158))+(((-1.0)*r22*x10157)));
evalcond[1]=((((-1.0)*x10154*x10158))+(((-1.0)*r02*x10157))+((x10148*x10153)));
evalcond[2]=(((x10149*x10152))+(((-1.0)*x10150*x10157))+(((-1.0)*r12*x10158)));
evalcond[3]=((1.0)+((x10148*x10150))+(((-1.0)*r12*x10157))+(((-1.0)*x10152*x10158)));
evalcond[4]=((((-1.0)*cj2*x10151))+((sj1*sj2))+((x10149*x10156))+(((-1.0)*r22*x10158))+(((-1.0)*x10155*x10157)));
evalcond[5]=((((-1.0)*x10153*x10157))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10158))+((x10149*x10154))+(((-1.0)*sj2*x10151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10159=((1.0)*gconst5);
CheckValue<IkReal> x10160=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10159)))),-1);
if(!x10160.valid){
continue;
}
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10159)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10160.value)))+(x10161.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10162=IKsin(j4);
IkReal x10163=IKcos(j4);
IkReal x10164=(gconst4*r11);
IkReal x10165=((1.0)*cj1);
IkReal x10166=(gconst5*r10);
IkReal x10167=(gconst4*r01);
IkReal x10168=(gconst5*r00);
IkReal x10169=(gconst4*r21);
IkReal x10170=(gconst5*r20);
IkReal x10171=((1.0)*x10163);
IkReal x10172=((1.0)*x10162);
evalcond[0]=((((-1.0)*r22*x10171))+((x10162*x10169))+(((-1.0)*x10170*x10172)));
evalcond[1]=(((x10162*x10167))+(((-1.0)*x10168*x10172))+(((-1.0)*r02*x10171)));
evalcond[2]=((((-1.0)*r12*x10172))+(((-1.0)*x10164*x10171))+((x10163*x10166)));
evalcond[3]=((1.0)+((x10162*x10164))+(((-1.0)*r12*x10171))+(((-1.0)*x10166*x10172)));
evalcond[4]=((((-1.0)*x10169*x10171))+(((-1.0)*r22*x10172))+((sj1*sj2))+((x10163*x10170))+(((-1.0)*cj2*x10165)));
evalcond[5]=((((-1.0)*sj2*x10165))+(((-1.0)*cj2*sj1))+(((-1.0)*x10167*x10171))+((x10163*x10168))+(((-1.0)*r02*x10172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
CheckValue<IkReal> x10174=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10173.value)+(((1.5707963267949)*(x10174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10175=IKsin(j4);
IkReal x10176=IKcos(j4);
IkReal x10177=(gconst4*r11);
IkReal x10178=((1.0)*cj1);
IkReal x10179=(gconst5*r10);
IkReal x10180=(gconst4*r01);
IkReal x10181=(gconst5*r00);
IkReal x10182=(gconst4*r21);
IkReal x10183=(gconst5*r20);
IkReal x10184=((1.0)*x10176);
IkReal x10185=((1.0)*x10175);
evalcond[0]=((((-1.0)*x10183*x10185))+((x10175*x10182))+(((-1.0)*r22*x10184)));
evalcond[1]=((((-1.0)*r02*x10184))+(((-1.0)*x10181*x10185))+((x10175*x10180)));
evalcond[2]=((((-1.0)*r12*x10185))+((x10176*x10179))+(((-1.0)*x10177*x10184)));
evalcond[3]=((1.0)+(((-1.0)*x10179*x10185))+(((-1.0)*r12*x10184))+((x10175*x10177)));
evalcond[4]=((((-1.0)*x10182*x10184))+(((-1.0)*cj2*x10178))+((sj1*sj2))+((x10176*x10183))+(((-1.0)*r22*x10185)));
evalcond[5]=((((-1.0)*r02*x10185))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10178))+((x10176*x10181))+(((-1.0)*x10180*x10184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10186=((-1.0)*r21);
CheckValue<IkReal> x10189 = IKatan2WithCheck(IkReal(x10186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10189.valid){
continue;
}
IkReal x10187=((1.0)*(x10189.value));
IkReal x10188=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10187)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10187)));
IkReal gconst4=(x10186*x10188);
IkReal gconst5=((1.0)*r20*x10188);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10190=((-1.0)*r21);
CheckValue<IkReal> x10193 = IKatan2WithCheck(IkReal(x10190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10193.valid){
continue;
}
IkReal x10191=((1.0)*(x10193.value));
IkReal x10192=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10191)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10191)));
IkReal gconst4=(x10190*x10192);
IkReal gconst5=((1.0)*r20*x10192);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10194=((-1.0)*r21);
CheckValue<IkReal> x10197 = IKatan2WithCheck(IkReal(x10194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10197.valid){
continue;
}
IkReal x10195=((1.0)*(x10197.value));
IkReal x10196=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10195)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10195)));
IkReal gconst4=(x10194*x10196);
IkReal gconst5=((1.0)*r20*x10196);
IkReal x10198=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10202=IKPowWithIntegerCheck(x10198,-1);
if(!x10202.valid){
continue;
}
IkReal x10199=x10202.value;
IkReal x10200=((1.0)*x10199);
IkReal x10201=((((-1.0)*x10200*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10199))+(((-1.0)*x10200*(r11*r11)*(r21*r21))));
j4eval[0]=x10201;
j4eval[1]=r12;
j4eval[2]=x10198;
j4eval[3]=IKsign(x10201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10203=(gconst5*r10);
IkReal x10204=(gconst4*r11);
CheckValue<IkReal> x10205=IKPowWithIntegerCheck(IKsign(((((2.0)*x10203*x10204))+(((-1.0)*(x10204*x10204)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10203*x10203))))),-1);
if(!x10205.valid){
continue;
}
CheckValue<IkReal> x10206 = IKatan2WithCheck(IkReal(((((-1.0)*x10203))+x10204)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10205.value)))+(x10206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10207=IKcos(j4);
IkReal x10208=IKsin(j4);
IkReal x10209=(gconst4*r11);
IkReal x10210=(gconst5*r10);
IkReal x10211=((1.0)*cj1);
IkReal x10212=(gconst5*r00);
IkReal x10213=(gconst5*r20);
IkReal x10214=((1.0)*x10207);
IkReal x10215=(gconst4*x10207);
IkReal x10216=((1.0)*x10208);
IkReal x10217=(gconst4*x10208);
evalcond[0]=((((-1.0)*x10210*x10214))+((x10207*x10209))+((r12*x10208)));
evalcond[1]=((((-1.0)*r22*x10214))+(((-1.0)*x10213*x10216))+((r21*x10217)));
evalcond[2]=((((-1.0)*x10212*x10216))+((r01*x10217))+(((-1.0)*r02*x10214)));
evalcond[3]=((1.0)+(((-1.0)*x10210*x10216))+(((-1.0)*r12*x10214))+((x10208*x10209)));
evalcond[4]=(((r22*x10208))+(((-1.0)*x10213*x10214))+((sj1*sj2))+(((-1.0)*cj2*x10211))+((r21*x10215)));
evalcond[5]=(((r02*x10208))+(((-1.0)*x10212*x10214))+(((-1.0)*sj2*x10211))+((r01*x10215))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10218=((1.0)*gconst5);
CheckValue<IkReal> x10219 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10218))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10219.valid){
continue;
}
CheckValue<IkReal> x10220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10218)))),-1);
if(!x10220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10219.value)+(((1.5707963267949)*(x10220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10221=IKcos(j4);
IkReal x10222=IKsin(j4);
IkReal x10223=(gconst4*r11);
IkReal x10224=(gconst5*r10);
IkReal x10225=((1.0)*cj1);
IkReal x10226=(gconst5*r00);
IkReal x10227=(gconst5*r20);
IkReal x10228=((1.0)*x10221);
IkReal x10229=(gconst4*x10221);
IkReal x10230=((1.0)*x10222);
IkReal x10231=(gconst4*x10222);
evalcond[0]=(((r12*x10222))+(((-1.0)*x10224*x10228))+((x10221*x10223)));
evalcond[1]=((((-1.0)*x10227*x10230))+((r21*x10231))+(((-1.0)*r22*x10228)));
evalcond[2]=((((-1.0)*x10226*x10230))+(((-1.0)*r02*x10228))+((r01*x10231)));
evalcond[3]=((1.0)+(((-1.0)*x10224*x10230))+(((-1.0)*r12*x10228))+((x10222*x10223)));
evalcond[4]=(((r22*x10222))+(((-1.0)*x10227*x10228))+(((-1.0)*cj2*x10225))+((sj1*sj2))+((r21*x10229)));
evalcond[5]=((((-1.0)*x10226*x10228))+((r02*x10222))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10225))+((r01*x10229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10232 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10232.valid){
continue;
}
CheckValue<IkReal> x10233=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10232.value)+(((1.5707963267949)*(x10233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10234=IKcos(j4);
IkReal x10235=IKsin(j4);
IkReal x10236=(gconst4*r11);
IkReal x10237=(gconst5*r10);
IkReal x10238=((1.0)*cj1);
IkReal x10239=(gconst5*r00);
IkReal x10240=(gconst5*r20);
IkReal x10241=((1.0)*x10234);
IkReal x10242=(gconst4*x10234);
IkReal x10243=((1.0)*x10235);
IkReal x10244=(gconst4*x10235);
evalcond[0]=((((-1.0)*x10237*x10241))+((x10234*x10236))+((r12*x10235)));
evalcond[1]=((((-1.0)*x10240*x10243))+((r21*x10244))+(((-1.0)*r22*x10241)));
evalcond[2]=((((-1.0)*x10239*x10243))+((r01*x10244))+(((-1.0)*r02*x10241)));
evalcond[3]=((1.0)+(((-1.0)*x10237*x10243))+((x10235*x10236))+(((-1.0)*r12*x10241)));
evalcond[4]=((((-1.0)*x10240*x10241))+((r22*x10235))+((sj1*sj2))+(((-1.0)*cj2*x10238))+((r21*x10242)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10235))+(((-1.0)*x10239*x10241))+((r01*x10242))+(((-1.0)*sj2*x10238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10245=((-1.0)*r21);
CheckValue<IkReal> x10248 = IKatan2WithCheck(IkReal(x10245),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10248.valid){
continue;
}
IkReal x10246=((1.0)*(x10248.value));
IkReal x10247=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10246)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10246)));
IkReal gconst4=(x10245*x10247);
IkReal gconst5=((1.0)*r20*x10247);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10249=((-1.0)*r21);
CheckValue<IkReal> x10252 = IKatan2WithCheck(IkReal(x10249),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10252.valid){
continue;
}
IkReal x10250=((1.0)*(x10252.value));
IkReal x10251=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10250)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10250)));
IkReal gconst4=(x10249*x10251);
IkReal gconst5=((1.0)*r20*x10251);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10253=((-1.0)*r21);
CheckValue<IkReal> x10256 = IKatan2WithCheck(IkReal(x10253),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10256.valid){
continue;
}
IkReal x10254=((1.0)*(x10256.value));
IkReal x10255=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10254)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10254)));
IkReal gconst4=(x10253*x10255);
IkReal gconst5=((1.0)*r20*x10255);
IkReal x10257=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10261=IKPowWithIntegerCheck(x10257,-1);
if(!x10261.valid){
continue;
}
IkReal x10258=x10261.value;
IkReal x10259=((1.0)*x10258);
IkReal x10260=((((-1.0)*x10259*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10258))+(((-1.0)*(r12*r12)))+(((-1.0)*x10259*(r11*r11)*(r21*r21))));
j4eval[0]=x10260;
j4eval[1]=r12;
j4eval[2]=x10257;
j4eval[3]=IKsign(x10260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10262=(gconst5*r10);
IkReal x10263=(gconst4*r11);
CheckValue<IkReal> x10264 = IKatan2WithCheck(IkReal(((((-1.0)*x10262))+x10263)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10264.valid){
continue;
}
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign(((((2.0)*x10262*x10263))+(((-1.0)*(x10262*x10262)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10263*x10263))))),-1);
if(!x10265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10264.value)+(((1.5707963267949)*(x10265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10266=IKcos(j4);
IkReal x10267=IKsin(j4);
IkReal x10268=(gconst4*r11);
IkReal x10269=(gconst5*r10);
IkReal x10270=(gconst5*r00);
IkReal x10271=(gconst5*r20);
IkReal x10272=((1.0)*x10266);
IkReal x10273=(gconst4*x10266);
IkReal x10274=((1.0)*x10267);
IkReal x10275=(gconst4*x10267);
evalcond[0]=(((r12*x10267))+(((-1.0)*x10269*x10272))+((x10266*x10268)));
evalcond[1]=((((-1.0)*r22*x10272))+((r21*x10275))+(((-1.0)*x10271*x10274)));
evalcond[2]=(((r01*x10275))+(((-1.0)*r02*x10272))+(((-1.0)*x10270*x10274)));
evalcond[3]=((1.0)+((x10267*x10268))+(((-1.0)*x10269*x10274))+(((-1.0)*r12*x10272)));
evalcond[4]=(((r22*x10267))+((cj2*sj1))+((cj1*sj2))+((r21*x10273))+(((-1.0)*x10271*x10272)));
evalcond[5]=(((r02*x10267))+((r01*x10273))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10270*x10272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10276=((1.0)*gconst5);
CheckValue<IkReal> x10277=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10276)))),-1);
if(!x10277.valid){
continue;
}
CheckValue<IkReal> x10278 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10277.value)))+(x10278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10279=IKcos(j4);
IkReal x10280=IKsin(j4);
IkReal x10281=(gconst4*r11);
IkReal x10282=(gconst5*r10);
IkReal x10283=(gconst5*r00);
IkReal x10284=(gconst5*r20);
IkReal x10285=((1.0)*x10279);
IkReal x10286=(gconst4*x10279);
IkReal x10287=((1.0)*x10280);
IkReal x10288=(gconst4*x10280);
evalcond[0]=((((-1.0)*x10282*x10285))+((x10279*x10281))+((r12*x10280)));
evalcond[1]=((((-1.0)*r22*x10285))+(((-1.0)*x10284*x10287))+((r21*x10288)));
evalcond[2]=(((r01*x10288))+(((-1.0)*x10283*x10287))+(((-1.0)*r02*x10285)));
evalcond[3]=((1.0)+(((-1.0)*x10282*x10287))+(((-1.0)*r12*x10285))+((x10280*x10281)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10280))+(((-1.0)*x10284*x10285))+((r21*x10286)));
evalcond[5]=(((r01*x10286))+(((-1.0)*x10283*x10285))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10289 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10289.valid){
continue;
}
CheckValue<IkReal> x10290=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10289.value)+(((1.5707963267949)*(x10290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10291=IKcos(j4);
IkReal x10292=IKsin(j4);
IkReal x10293=(gconst4*r11);
IkReal x10294=(gconst5*r10);
IkReal x10295=(gconst5*r00);
IkReal x10296=(gconst5*r20);
IkReal x10297=((1.0)*x10291);
IkReal x10298=(gconst4*x10291);
IkReal x10299=((1.0)*x10292);
IkReal x10300=(gconst4*x10292);
evalcond[0]=(((x10291*x10293))+((r12*x10292))+(((-1.0)*x10294*x10297)));
evalcond[1]=(((r21*x10300))+(((-1.0)*r22*x10297))+(((-1.0)*x10296*x10299)));
evalcond[2]=((((-1.0)*r02*x10297))+((r01*x10300))+(((-1.0)*x10295*x10299)));
evalcond[3]=((1.0)+(((-1.0)*x10294*x10299))+(((-1.0)*r12*x10297))+((x10292*x10293)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10298))+(((-1.0)*x10296*x10297))+((r22*x10292)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10295*x10297))+((r02*x10292))+((r01*x10298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10301=((-1.0)*r21);
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(x10301),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
IkReal x10302=((1.0)*(x10304.value));
IkReal x10303=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10302)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10302)));
IkReal gconst4=(x10301*x10303);
IkReal gconst5=((1.0)*r20*x10303);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10305=((-1.0)*r21);
CheckValue<IkReal> x10308 = IKatan2WithCheck(IkReal(x10305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10308.valid){
continue;
}
IkReal x10306=((1.0)*(x10308.value));
IkReal x10307=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10306)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10306)));
IkReal gconst4=(x10305*x10307);
IkReal gconst5=((1.0)*r20*x10307);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10309=((-1.0)*r21);
CheckValue<IkReal> x10312 = IKatan2WithCheck(IkReal(x10309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10312.valid){
continue;
}
IkReal x10310=((1.0)*(x10312.value));
IkReal x10311=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10310)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10310)));
IkReal gconst4=(x10309*x10311);
IkReal gconst5=((1.0)*r20*x10311);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10313=(gconst5*r10);
IkReal x10314=(gconst4*r11);
CheckValue<IkReal> x10315=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10313*x10313)+(x10314*x10314)+(((-2.0)*x10313*x10314)))),-1);
if(!x10315.valid){
continue;
}
CheckValue<IkReal> x10316 = IKatan2WithCheck(IkReal((x10313+(((-1.0)*x10314)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10315.value)))+(x10316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10317=IKsin(j4);
IkReal x10318=IKcos(j4);
IkReal x10319=(gconst4*r11);
IkReal x10320=(gconst5*r10);
IkReal x10321=(gconst4*r01);
IkReal x10322=(gconst5*r00);
IkReal x10323=(gconst4*r21);
IkReal x10324=(gconst5*r20);
IkReal x10325=((1.0)*x10318);
IkReal x10326=((1.0)*x10317);
evalcond[0]=((((-1.0)*x10324*x10326))+((x10317*x10323))+(((-1.0)*r22*x10325)));
evalcond[1]=((((-1.0)*r02*x10325))+((x10317*x10321))+(((-1.0)*x10322*x10326)));
evalcond[2]=(((x10318*x10320))+(((-1.0)*r12*x10326))+(((-1.0)*x10319*x10325)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10325))+(((-1.0)*x10320*x10326))+((x10317*x10319)));
evalcond[4]=(((cj2*sj1))+((x10318*x10324))+((cj1*sj2))+(((-1.0)*r22*x10326))+(((-1.0)*x10323*x10325)));
evalcond[5]=((((-1.0)*r02*x10326))+((x10318*x10322))+(((-1.0)*x10321*x10325))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10327=((1.0)*gconst5);
CheckValue<IkReal> x10328=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10327)))),-1);
if(!x10328.valid){
continue;
}
CheckValue<IkReal> x10329 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10328.value)))+(x10329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10330=IKsin(j4);
IkReal x10331=IKcos(j4);
IkReal x10332=(gconst4*r11);
IkReal x10333=(gconst5*r10);
IkReal x10334=(gconst4*r01);
IkReal x10335=(gconst5*r00);
IkReal x10336=(gconst4*r21);
IkReal x10337=(gconst5*r20);
IkReal x10338=((1.0)*x10331);
IkReal x10339=((1.0)*x10330);
evalcond[0]=((((-1.0)*r22*x10338))+((x10330*x10336))+(((-1.0)*x10337*x10339)));
evalcond[1]=(((x10330*x10334))+(((-1.0)*x10335*x10339))+(((-1.0)*r02*x10338)));
evalcond[2]=((((-1.0)*r12*x10339))+((x10331*x10333))+(((-1.0)*x10332*x10338)));
evalcond[3]=((1.0)+(((-1.0)*x10333*x10339))+(((-1.0)*r12*x10338))+((x10330*x10332)));
evalcond[4]=((((-1.0)*x10336*x10338))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10339))+((x10331*x10337)));
evalcond[5]=((((-1.0)*x10334*x10338))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10331*x10335))+(((-1.0)*r02*x10339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10340 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10340.valid){
continue;
}
CheckValue<IkReal> x10341=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10340.value)+(((1.5707963267949)*(x10341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10342=IKsin(j4);
IkReal x10343=IKcos(j4);
IkReal x10344=(gconst4*r11);
IkReal x10345=(gconst5*r10);
IkReal x10346=(gconst4*r01);
IkReal x10347=(gconst5*r00);
IkReal x10348=(gconst4*r21);
IkReal x10349=(gconst5*r20);
IkReal x10350=((1.0)*x10343);
IkReal x10351=((1.0)*x10342);
evalcond[0]=((((-1.0)*r22*x10350))+((x10342*x10348))+(((-1.0)*x10349*x10351)));
evalcond[1]=(((x10342*x10346))+(((-1.0)*r02*x10350))+(((-1.0)*x10347*x10351)));
evalcond[2]=(((x10343*x10345))+(((-1.0)*r12*x10351))+(((-1.0)*x10344*x10350)));
evalcond[3]=((1.0)+((x10342*x10344))+(((-1.0)*x10345*x10351))+(((-1.0)*r12*x10350)));
evalcond[4]=(((cj2*sj1))+((x10343*x10349))+((cj1*sj2))+(((-1.0)*r22*x10351))+(((-1.0)*x10348*x10350)));
evalcond[5]=(((x10343*x10347))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10346*x10350))+(((-1.0)*r02*x10351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10352=gconst4*gconst4;
IkReal x10353=gconst5*gconst5;
IkReal x10354=(r10*r21);
IkReal x10355=((1.0)*cj3);
IkReal x10356=(r11*r21);
IkReal x10357=(r11*r20);
IkReal x10358=(r22*sj3);
IkReal x10359=(gconst4*r10);
IkReal x10360=((1.0)*sj3);
IkReal x10361=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10362 = IKatan2WithCheck(IkReal((((gconst5*r11*x10358))+((x10358*x10359)))),IkReal(((((-1.0)*gconst5*r20*x10359*x10360))+((gconst4*gconst5*sj3*x10356))+((sj3*x10352*x10354))+(((-1.0)*x10353*x10357*x10360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10362.valid){
continue;
}
CheckValue<IkReal> x10363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10353*x10355))+((x10354*x10361))+((x10357*x10361))+(((-1.0)*x10352*x10355*x10356))+(((-1.0)*r12*r22*x10355)))),-1);
if(!x10363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10362.value)+(((1.5707963267949)*(x10363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10364=IKsin(j4);
IkReal x10365=IKcos(j4);
IkReal x10366=(sj1*sj2);
IkReal x10367=(gconst5*sj3);
IkReal x10368=(cj3*gconst5);
IkReal x10369=(gconst4*r11);
IkReal x10370=((1.0)*cj1);
IkReal x10371=(gconst4*r01);
IkReal x10372=(cj2*sj1);
IkReal x10373=(gconst4*r21);
IkReal x10374=(gconst4*sj3);
IkReal x10375=(cj3*gconst4);
IkReal x10376=(cj2*x10370);
IkReal x10377=((1.0)*x10365);
IkReal x10378=((1.0)*x10364);
IkReal x10379=(cj3*x10364);
IkReal x10380=(cj3*x10365);
evalcond[0]=(((x10364*x10373))+(((-1.0)*gconst5*r20*x10378))+(((-1.0)*r22*x10377)));
evalcond[1]=(((x10364*x10371))+(((-1.0)*r02*x10377))+(((-1.0)*gconst5*r00*x10378)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10378))+((x10364*x10369))+(((-1.0)*r12*x10377)));
evalcond[3]=((((-1.0)*r10*x10368*x10377))+((x10369*x10380))+((r10*x10374))+((r11*x10367))+((r12*x10379)));
evalcond[4]=(((r10*x10365*x10367))+(((-1.0)*r12*sj3*x10378))+((r10*x10375))+((r11*x10368))+(((-1.0)*sj3*x10369*x10377)));
evalcond[5]=(((r21*x10367))+((r22*x10379))+((cj1*sj2))+((r20*x10374))+x10372+((x10373*x10380))+(((-1.0)*r20*x10368*x10377)));
evalcond[6]=(((x10371*x10380))+((r00*x10374))+((r01*x10367))+((r02*x10379))+x10366+(((-1.0)*x10376))+(((-1.0)*r00*x10368*x10377)));
evalcond[7]=(((r21*x10368))+(((-1.0)*r22*sj3*x10378))+(((-1.0)*sj3*x10373*x10377))+((r20*x10365*x10367))+((r20*x10375))+x10366+(((-1.0)*x10376)));
evalcond[8]=(((r00*x10375))+((r01*x10368))+(((-1.0)*r02*sj3*x10378))+(((-1.0)*x10372))+((r00*x10365*x10367))+(((-1.0)*sj3*x10371*x10377))+(((-1.0)*sj2*x10370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10381=((1.0)*gconst5);
CheckValue<IkReal> x10382=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10381)))),-1);
if(!x10382.valid){
continue;
}
CheckValue<IkReal> x10383 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10381))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10382.value)))+(x10383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10384=IKsin(j4);
IkReal x10385=IKcos(j4);
IkReal x10386=(sj1*sj2);
IkReal x10387=(gconst5*sj3);
IkReal x10388=(cj3*gconst5);
IkReal x10389=(gconst4*r11);
IkReal x10390=((1.0)*cj1);
IkReal x10391=(gconst4*r01);
IkReal x10392=(cj2*sj1);
IkReal x10393=(gconst4*r21);
IkReal x10394=(gconst4*sj3);
IkReal x10395=(cj3*gconst4);
IkReal x10396=(cj2*x10390);
IkReal x10397=((1.0)*x10385);
IkReal x10398=((1.0)*x10384);
IkReal x10399=(cj3*x10384);
IkReal x10400=(cj3*x10385);
evalcond[0]=(((x10384*x10393))+(((-1.0)*gconst5*r20*x10398))+(((-1.0)*r22*x10397)));
evalcond[1]=(((x10384*x10391))+(((-1.0)*r02*x10397))+(((-1.0)*gconst5*r00*x10398)));
evalcond[2]=((1.0)+((x10384*x10389))+(((-1.0)*gconst5*r10*x10398))+(((-1.0)*r12*x10397)));
evalcond[3]=(((r11*x10387))+((r12*x10399))+((x10389*x10400))+((r10*x10394))+(((-1.0)*r10*x10388*x10397)));
evalcond[4]=(((r11*x10388))+((r10*x10385*x10387))+((r10*x10395))+(((-1.0)*sj3*x10389*x10397))+(((-1.0)*r12*sj3*x10398)));
evalcond[5]=(((r21*x10387))+((cj1*sj2))+((r22*x10399))+x10392+((x10393*x10400))+(((-1.0)*r20*x10388*x10397))+((r20*x10394)));
evalcond[6]=(((x10391*x10400))+(((-1.0)*r00*x10388*x10397))+(((-1.0)*x10396))+((r02*x10399))+x10386+((r01*x10387))+((r00*x10394)));
evalcond[7]=((((-1.0)*x10396))+((r20*x10385*x10387))+((r21*x10388))+(((-1.0)*sj3*x10393*x10397))+(((-1.0)*r22*sj3*x10398))+x10386+((r20*x10395)));
evalcond[8]=(((r00*x10385*x10387))+(((-1.0)*x10392))+(((-1.0)*sj2*x10390))+(((-1.0)*sj3*x10391*x10397))+((r01*x10388))+(((-1.0)*r02*sj3*x10398))+((r00*x10395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10401 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10401.valid){
continue;
}
CheckValue<IkReal> x10402=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10401.value)+(((1.5707963267949)*(x10402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10403=IKsin(j4);
IkReal x10404=IKcos(j4);
IkReal x10405=(sj1*sj2);
IkReal x10406=(gconst5*sj3);
IkReal x10407=(cj3*gconst5);
IkReal x10408=(gconst4*r11);
IkReal x10409=((1.0)*cj1);
IkReal x10410=(gconst4*r01);
IkReal x10411=(cj2*sj1);
IkReal x10412=(gconst4*r21);
IkReal x10413=(gconst4*sj3);
IkReal x10414=(cj3*gconst4);
IkReal x10415=(cj2*x10409);
IkReal x10416=((1.0)*x10404);
IkReal x10417=((1.0)*x10403);
IkReal x10418=(cj3*x10403);
IkReal x10419=(cj3*x10404);
evalcond[0]=((((-1.0)*gconst5*r20*x10417))+((x10403*x10412))+(((-1.0)*r22*x10416)));
evalcond[1]=((((-1.0)*r02*x10416))+((x10403*x10410))+(((-1.0)*gconst5*r00*x10417)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10417))+(((-1.0)*r12*x10416))+((x10403*x10408)));
evalcond[3]=((((-1.0)*r10*x10407*x10416))+((x10408*x10419))+((r11*x10406))+((r10*x10413))+((r12*x10418)));
evalcond[4]=((((-1.0)*r12*sj3*x10417))+((r11*x10407))+((r10*x10404*x10406))+((r10*x10414))+(((-1.0)*sj3*x10408*x10416)));
evalcond[5]=(((r21*x10406))+((r22*x10418))+((cj1*sj2))+((x10412*x10419))+x10411+((r20*x10413))+(((-1.0)*r20*x10407*x10416)));
evalcond[6]=(((r00*x10413))+((r01*x10406))+(((-1.0)*r00*x10407*x10416))+((x10410*x10419))+((r02*x10418))+(((-1.0)*x10415))+x10405);
evalcond[7]=(((r21*x10407))+(((-1.0)*sj3*x10412*x10416))+(((-1.0)*r22*sj3*x10417))+(((-1.0)*x10415))+x10405+((r20*x10414))+((r20*x10404*x10406)));
evalcond[8]=(((r00*x10414))+((r01*x10407))+(((-1.0)*sj2*x10409))+(((-1.0)*sj3*x10410*x10416))+(((-1.0)*x10411))+(((-1.0)*r02*sj3*x10417))+((r00*x10404*x10406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10420=((-1.0)*r21);
CheckValue<IkReal> x10423 = IKatan2WithCheck(IkReal(x10420),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10423.valid){
continue;
}
IkReal x10421=((1.0)*(x10423.value));
IkReal x10422=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10421)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10421)));
IkReal gconst4=(x10420*x10422);
IkReal gconst5=((1.0)*r20*x10422);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10424=((-1.0)*r21);
CheckValue<IkReal> x10427 = IKatan2WithCheck(IkReal(x10424),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10427.valid){
continue;
}
IkReal x10425=((1.0)*(x10427.value));
IkReal x10426=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10425)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10425)));
IkReal gconst4=(x10424*x10426);
IkReal gconst5=((1.0)*r20*x10426);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10428=((-1.0)*r21);
CheckValue<IkReal> x10431 = IKatan2WithCheck(IkReal(x10428),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10431.valid){
continue;
}
IkReal x10429=((1.0)*(x10431.value));
IkReal x10430=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10429)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10429)));
IkReal gconst4=(x10428*x10430);
IkReal gconst5=((1.0)*r20*x10430);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10432=((-1.0)*r21);
CheckValue<IkReal> x10435 = IKatan2WithCheck(IkReal(x10432),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10435.valid){
continue;
}
IkReal x10433=((1.0)*(x10435.value));
IkReal x10434=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10433)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10433)));
IkReal gconst4=(x10432*x10434);
IkReal gconst5=((1.0)*r20*x10434);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10436=((-1.0)*r21);
CheckValue<IkReal> x10439 = IKatan2WithCheck(IkReal(x10436),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10439.valid){
continue;
}
IkReal x10437=((1.0)*(x10439.value));
IkReal x10438=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10437)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10437)));
IkReal gconst4=(x10436*x10438);
IkReal gconst5=((1.0)*r20*x10438);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10440=((-1.0)*r21);
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(x10440),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
IkReal x10441=((1.0)*(x10443.value));
IkReal x10442=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10441)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10441)));
IkReal gconst4=(x10440*x10442);
IkReal gconst5=((1.0)*r20*x10442);
IkReal x10444=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10448=IKPowWithIntegerCheck(x10444,-1);
if(!x10448.valid){
continue;
}
IkReal x10445=x10448.value;
IkReal x10446=((1.0)*x10445);
IkReal x10447=((((-2.0)*r10*r11*r20*r21*x10445))+(((-1.0)*x10446*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10446*(r11*r11)*(r21*r21))));
j4eval[0]=x10447;
j4eval[1]=r12;
j4eval[2]=x10444;
j4eval[3]=IKsign(x10447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10449=(gconst5*r10);
IkReal x10450=(gconst4*r11);
CheckValue<IkReal> x10451=IKPowWithIntegerCheck(IKsign(((((2.0)*x10449*x10450))+(((-1.0)*(x10450*x10450)))+(((-1.0)*(x10449*x10449)))+(((-1.0)*(r12*r12))))),-1);
if(!x10451.valid){
continue;
}
CheckValue<IkReal> x10452 = IKatan2WithCheck(IkReal(((((-1.0)*x10450))+x10449)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10451.value)))+(x10452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10453=IKsin(j4);
IkReal x10454=IKcos(j4);
IkReal x10455=(gconst4*r11);
IkReal x10456=(gconst5*r10);
IkReal x10457=(gconst4*r01);
IkReal x10458=(gconst5*r00);
IkReal x10459=(gconst4*r21);
IkReal x10460=(gconst5*r20);
IkReal x10461=((1.0)*x10454);
IkReal x10462=((1.0)*x10453);
evalcond[0]=((((-1.0)*x10460*x10462))+(((-1.0)*r22*x10461))+((x10453*x10459)));
evalcond[1]=((((-1.0)*r02*x10461))+((x10453*x10457))+(((-1.0)*x10458*x10462)));
evalcond[2]=(((x10454*x10456))+(((-1.0)*x10455*x10461))+(((-1.0)*r12*x10462)));
evalcond[3]=((-1.0)+((x10453*x10455))+(((-1.0)*x10456*x10462))+(((-1.0)*r12*x10461)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10457*x10461))+(((-1.0)*r02*x10462))+((cj1*sj2))+((x10454*x10458)));
evalcond[5]=((((-1.0)*x10459*x10461))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10462))+((x10454*x10460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10463=((1.0)*gconst5);
CheckValue<IkReal> x10464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10463))+(((-1.0)*gconst4*r20)))),-1);
if(!x10464.valid){
continue;
}
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10463))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10464.value)))+(x10465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10466=IKsin(j4);
IkReal x10467=IKcos(j4);
IkReal x10468=(gconst4*r11);
IkReal x10469=(gconst5*r10);
IkReal x10470=(gconst4*r01);
IkReal x10471=(gconst5*r00);
IkReal x10472=(gconst4*r21);
IkReal x10473=(gconst5*r20);
IkReal x10474=((1.0)*x10467);
IkReal x10475=((1.0)*x10466);
evalcond[0]=(((x10466*x10472))+(((-1.0)*r22*x10474))+(((-1.0)*x10473*x10475)));
evalcond[1]=((((-1.0)*r02*x10474))+((x10466*x10470))+(((-1.0)*x10471*x10475)));
evalcond[2]=(((x10467*x10469))+(((-1.0)*x10468*x10474))+(((-1.0)*r12*x10475)));
evalcond[3]=((-1.0)+((x10466*x10468))+(((-1.0)*x10469*x10475))+(((-1.0)*r12*x10474)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10475))+(((-1.0)*x10470*x10474))+((cj1*sj2))+((x10467*x10471)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10472*x10474))+(((-1.0)*r22*x10475))+((x10467*x10473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10476=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10476.valid){
continue;
}
CheckValue<IkReal> x10477 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10476.value)))+(x10477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10478=IKsin(j4);
IkReal x10479=IKcos(j4);
IkReal x10480=(gconst4*r11);
IkReal x10481=(gconst5*r10);
IkReal x10482=(gconst4*r01);
IkReal x10483=(gconst5*r00);
IkReal x10484=(gconst4*r21);
IkReal x10485=(gconst5*r20);
IkReal x10486=((1.0)*x10479);
IkReal x10487=((1.0)*x10478);
evalcond[0]=(((x10478*x10484))+(((-1.0)*r22*x10486))+(((-1.0)*x10485*x10487)));
evalcond[1]=(((x10478*x10482))+(((-1.0)*r02*x10486))+(((-1.0)*x10483*x10487)));
evalcond[2]=(((x10479*x10481))+(((-1.0)*x10480*x10486))+(((-1.0)*r12*x10487)));
evalcond[3]=((-1.0)+((x10478*x10480))+(((-1.0)*x10481*x10487))+(((-1.0)*r12*x10486)));
evalcond[4]=(((cj2*sj1))+((x10479*x10483))+((cj1*sj2))+(((-1.0)*r02*x10487))+(((-1.0)*x10482*x10486)));
evalcond[5]=(((x10479*x10485))+(((-1.0)*r22*x10487))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10484*x10486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10488=((-1.0)*r21);
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal(x10488),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
IkReal x10489=((1.0)*(x10491.value));
IkReal x10490=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10489)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10489)));
IkReal gconst4=(x10488*x10490);
IkReal gconst5=((1.0)*r20*x10490);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10492=((-1.0)*r21);
CheckValue<IkReal> x10495 = IKatan2WithCheck(IkReal(x10492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10495.valid){
continue;
}
IkReal x10493=((1.0)*(x10495.value));
IkReal x10494=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10493)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10493)));
IkReal gconst4=(x10492*x10494);
IkReal gconst5=((1.0)*r20*x10494);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10496=((-1.0)*r21);
CheckValue<IkReal> x10499 = IKatan2WithCheck(IkReal(x10496),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10499.valid){
continue;
}
IkReal x10497=((1.0)*(x10499.value));
IkReal x10498=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10497)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10497)));
IkReal gconst4=(x10496*x10498);
IkReal gconst5=((1.0)*r20*x10498);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10500=(gconst5*r10);
IkReal x10501=(gconst4*r11);
CheckValue<IkReal> x10502 = IKatan2WithCheck(IkReal((x10501+(((-1.0)*x10500)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10502.valid){
continue;
}
CheckValue<IkReal> x10503=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10500*x10501))+(x10501*x10501)+(x10500*x10500))),-1);
if(!x10503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10502.value)+(((1.5707963267949)*(x10503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10504=IKcos(j4);
IkReal x10505=IKsin(j4);
IkReal x10506=(gconst4*r11);
IkReal x10507=(gconst5*r10);
IkReal x10508=(gconst5*r00);
IkReal x10509=(gconst5*r20);
IkReal x10510=((1.0)*x10504);
IkReal x10511=(gconst4*x10504);
IkReal x10512=((1.0)*x10505);
IkReal x10513=(gconst4*x10505);
evalcond[0]=(((x10504*x10506))+((r12*x10505))+(((-1.0)*x10507*x10510)));
evalcond[1]=((((-1.0)*r22*x10510))+((r21*x10513))+(((-1.0)*x10509*x10512)));
evalcond[2]=((((-1.0)*r02*x10510))+(((-1.0)*x10508*x10512))+((r01*x10513)));
evalcond[3]=((-1.0)+((x10505*x10506))+(((-1.0)*r12*x10510))+(((-1.0)*x10507*x10512)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10508*x10510))+((r01*x10511))+((r02*x10505)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10505))+((r21*x10511))+(((-1.0)*x10509*x10510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10514=((1.0)*gconst5);
CheckValue<IkReal> x10515 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10514))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10515.valid){
continue;
}
CheckValue<IkReal> x10516=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10514))+(((-1.0)*gconst4*r20)))),-1);
if(!x10516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10515.value)+(((1.5707963267949)*(x10516.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10517=IKcos(j4);
IkReal x10518=IKsin(j4);
IkReal x10519=(gconst4*r11);
IkReal x10520=(gconst5*r10);
IkReal x10521=(gconst5*r00);
IkReal x10522=(gconst5*r20);
IkReal x10523=((1.0)*x10517);
IkReal x10524=(gconst4*x10517);
IkReal x10525=((1.0)*x10518);
IkReal x10526=(gconst4*x10518);
evalcond[0]=(((r12*x10518))+(((-1.0)*x10520*x10523))+((x10517*x10519)));
evalcond[1]=((((-1.0)*r22*x10523))+((r21*x10526))+(((-1.0)*x10522*x10525)));
evalcond[2]=((((-1.0)*x10521*x10525))+(((-1.0)*r02*x10523))+((r01*x10526)));
evalcond[3]=((-1.0)+(((-1.0)*x10520*x10525))+(((-1.0)*r12*x10523))+((x10518*x10519)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10521*x10523))+((cj1*sj2))+((r01*x10524))+((r02*x10518)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10524))+(((-1.0)*x10522*x10523))+((r22*x10518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10527=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10527.valid){
continue;
}
CheckValue<IkReal> x10528 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10527.value)))+(x10528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10529=IKcos(j4);
IkReal x10530=IKsin(j4);
IkReal x10531=(gconst4*r11);
IkReal x10532=(gconst5*r10);
IkReal x10533=(gconst5*r00);
IkReal x10534=(gconst5*r20);
IkReal x10535=((1.0)*x10529);
IkReal x10536=(gconst4*x10529);
IkReal x10537=((1.0)*x10530);
IkReal x10538=(gconst4*x10530);
evalcond[0]=(((x10529*x10531))+((r12*x10530))+(((-1.0)*x10532*x10535)));
evalcond[1]=((((-1.0)*r22*x10535))+((r21*x10538))+(((-1.0)*x10534*x10537)));
evalcond[2]=((((-1.0)*r02*x10535))+((r01*x10538))+(((-1.0)*x10533*x10537)));
evalcond[3]=((-1.0)+((x10530*x10531))+(((-1.0)*r12*x10535))+(((-1.0)*x10532*x10537)));
evalcond[4]=(((cj2*sj1))+((r02*x10530))+((cj1*sj2))+((r01*x10536))+(((-1.0)*x10533*x10535)));
evalcond[5]=(((r22*x10530))+((r21*x10536))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10534*x10535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10539=((-1.0)*r21);
CheckValue<IkReal> x10542 = IKatan2WithCheck(IkReal(x10539),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10542.valid){
continue;
}
IkReal x10540=((1.0)*(x10542.value));
IkReal x10541=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10540)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10540)));
IkReal gconst4=(x10539*x10541);
IkReal gconst5=((1.0)*r20*x10541);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10543=((-1.0)*r21);
CheckValue<IkReal> x10546 = IKatan2WithCheck(IkReal(x10543),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10546.valid){
continue;
}
IkReal x10544=((1.0)*(x10546.value));
IkReal x10545=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10544)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10544)));
IkReal gconst4=(x10543*x10545);
IkReal gconst5=((1.0)*r20*x10545);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10547=((-1.0)*r21);
CheckValue<IkReal> x10550 = IKatan2WithCheck(IkReal(x10547),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10550.valid){
continue;
}
IkReal x10548=((1.0)*(x10550.value));
IkReal x10549=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10548)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10548)));
IkReal gconst4=(x10547*x10549);
IkReal gconst5=((1.0)*r20*x10549);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10551=(gconst5*r10);
IkReal x10552=(gconst4*r11);
CheckValue<IkReal> x10553=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10552*x10552)+(x10551*x10551)+(((-2.0)*x10551*x10552)))),-1);
if(!x10553.valid){
continue;
}
CheckValue<IkReal> x10554 = IKatan2WithCheck(IkReal(((((-1.0)*x10551))+x10552)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10553.value)))+(x10554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10555=IKcos(j4);
IkReal x10556=IKsin(j4);
IkReal x10557=(gconst5*r10);
IkReal x10558=(gconst5*r00);
IkReal x10559=(gconst5*r20);
IkReal x10560=((1.0)*x10555);
IkReal x10561=(gconst4*x10556);
IkReal x10562=(gconst4*x10555);
IkReal x10563=((1.0)*x10556);
evalcond[0]=((((-1.0)*x10557*x10560))+((r12*x10556))+((r11*x10562)));
evalcond[1]=((((-1.0)*r22*x10560))+((r21*x10561))+(((-1.0)*x10559*x10563)));
evalcond[2]=(((r01*x10561))+(((-1.0)*x10558*x10563))+(((-1.0)*r02*x10560)));
evalcond[3]=((-1.0)+(((-1.0)*x10557*x10563))+(((-1.0)*r12*x10560))+((r11*x10561)));
evalcond[4]=(((cj2*sj1))+((r22*x10556))+((cj1*sj2))+((r21*x10562))+(((-1.0)*x10559*x10560)));
evalcond[5]=(((r01*x10562))+((r02*x10556))+(((-1.0)*sj1*sj2))+(((-1.0)*x10558*x10560))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10564=((1.0)*gconst5);
CheckValue<IkReal> x10565 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10564))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10565.valid){
continue;
}
CheckValue<IkReal> x10566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10564))+(((-1.0)*gconst4*r20)))),-1);
if(!x10566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10565.value)+(((1.5707963267949)*(x10566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10567=IKcos(j4);
IkReal x10568=IKsin(j4);
IkReal x10569=(gconst5*r10);
IkReal x10570=(gconst5*r00);
IkReal x10571=(gconst5*r20);
IkReal x10572=((1.0)*x10567);
IkReal x10573=(gconst4*x10568);
IkReal x10574=(gconst4*x10567);
IkReal x10575=((1.0)*x10568);
evalcond[0]=((((-1.0)*x10569*x10572))+((r11*x10574))+((r12*x10568)));
evalcond[1]=((((-1.0)*x10571*x10575))+(((-1.0)*r22*x10572))+((r21*x10573)));
evalcond[2]=(((r01*x10573))+(((-1.0)*r02*x10572))+(((-1.0)*x10570*x10575)));
evalcond[3]=((-1.0)+(((-1.0)*x10569*x10575))+(((-1.0)*r12*x10572))+((r11*x10573)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10571*x10572))+((cj1*sj2))+((r21*x10574))+((r22*x10568)));
evalcond[5]=(((r01*x10574))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10568))+(((-1.0)*x10570*x10572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10576=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10576.valid){
continue;
}
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10576.value)))+(x10577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10578=IKcos(j4);
IkReal x10579=IKsin(j4);
IkReal x10580=(gconst5*r10);
IkReal x10581=(gconst5*r00);
IkReal x10582=(gconst5*r20);
IkReal x10583=((1.0)*x10578);
IkReal x10584=(gconst4*x10579);
IkReal x10585=(gconst4*x10578);
IkReal x10586=((1.0)*x10579);
evalcond[0]=(((r11*x10585))+((r12*x10579))+(((-1.0)*x10580*x10583)));
evalcond[1]=((((-1.0)*x10582*x10586))+(((-1.0)*r22*x10583))+((r21*x10584)));
evalcond[2]=((((-1.0)*x10581*x10586))+(((-1.0)*r02*x10583))+((r01*x10584)));
evalcond[3]=((-1.0)+((r11*x10584))+(((-1.0)*r12*x10583))+(((-1.0)*x10580*x10586)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10582*x10583))+((cj1*sj2))+((r21*x10585))+((r22*x10579)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10581*x10583))+((r02*x10579))+((cj1*cj2))+((r01*x10585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10587=((-1.0)*r21);
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal(x10587),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
IkReal x10588=((1.0)*(x10590.value));
IkReal x10589=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10588)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10588)));
IkReal gconst4=(x10587*x10589);
IkReal gconst5=((1.0)*r20*x10589);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10591=((-1.0)*r21);
CheckValue<IkReal> x10594 = IKatan2WithCheck(IkReal(x10591),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10594.valid){
continue;
}
IkReal x10592=((1.0)*(x10594.value));
IkReal x10593=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10592)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10592)));
IkReal gconst4=(x10591*x10593);
IkReal gconst5=((1.0)*r20*x10593);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10595=((-1.0)*r21);
CheckValue<IkReal> x10598 = IKatan2WithCheck(IkReal(x10595),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10598.valid){
continue;
}
IkReal x10596=((1.0)*(x10598.value));
IkReal x10597=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10596)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10596)));
IkReal gconst4=(x10595*x10597);
IkReal gconst5=((1.0)*r20*x10597);
IkReal x10599=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10603=IKPowWithIntegerCheck(x10599,-1);
if(!x10603.valid){
continue;
}
IkReal x10600=x10603.value;
IkReal x10601=((1.0)*x10600);
IkReal x10602=((((-2.0)*r10*r11*r20*r21*x10600))+(((-1.0)*x10601*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10601*(r10*r10)*(r20*r20))));
j4eval[0]=x10602;
j4eval[1]=r12;
j4eval[2]=x10599;
j4eval[3]=IKsign(x10602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10604=(gconst5*r10);
IkReal x10605=(gconst4*r11);
CheckValue<IkReal> x10606=IKPowWithIntegerCheck(IKsign(((((2.0)*x10604*x10605))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10605*x10605)))+(((-1.0)*(x10604*x10604))))),-1);
if(!x10606.valid){
continue;
}
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal(((((-1.0)*x10605))+x10604)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10606.value)))+(x10607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10608=IKsin(j4);
IkReal x10609=IKcos(j4);
IkReal x10610=(gconst4*r11);
IkReal x10611=(gconst5*r10);
IkReal x10612=(gconst5*r00);
IkReal x10613=(gconst5*r20);
IkReal x10614=((1.0)*x10609);
IkReal x10615=(gconst4*x10608);
IkReal x10616=((1.0)*x10608);
evalcond[0]=((((-1.0)*r22*x10614))+(((-1.0)*x10613*x10616))+((r21*x10615)));
evalcond[1]=((((-1.0)*r02*x10614))+((r01*x10615))+(((-1.0)*x10612*x10616)));
evalcond[2]=(((x10609*x10611))+(((-1.0)*x10610*x10614))+(((-1.0)*r12*x10616)));
evalcond[3]=((-1.0)+((x10608*x10610))+(((-1.0)*x10611*x10616))+(((-1.0)*r12*x10614)));
evalcond[4]=(((x10609*x10613))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10616))+(((-1.0)*gconst4*r21*x10614)));
evalcond[5]=(((x10609*x10612))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10616))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10617=((1.0)*gconst5);
CheckValue<IkReal> x10618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10617))+(((-1.0)*gconst4*r20)))),-1);
if(!x10618.valid){
continue;
}
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10618.value)))+(x10619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10620=IKsin(j4);
IkReal x10621=IKcos(j4);
IkReal x10622=(gconst4*r11);
IkReal x10623=(gconst5*r10);
IkReal x10624=(gconst5*r00);
IkReal x10625=(gconst5*r20);
IkReal x10626=((1.0)*x10621);
IkReal x10627=(gconst4*x10620);
IkReal x10628=((1.0)*x10620);
evalcond[0]=(((r21*x10627))+(((-1.0)*x10625*x10628))+(((-1.0)*r22*x10626)));
evalcond[1]=((((-1.0)*r02*x10626))+(((-1.0)*x10624*x10628))+((r01*x10627)));
evalcond[2]=((((-1.0)*r12*x10628))+((x10621*x10623))+(((-1.0)*x10622*x10626)));
evalcond[3]=((-1.0)+(((-1.0)*x10623*x10628))+(((-1.0)*r12*x10626))+((x10620*x10622)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10628))+(((-1.0)*gconst4*r21*x10626))+((x10621*x10625)));
evalcond[5]=((((-1.0)*r02*x10628))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10626))+((x10621*x10624))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10629=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10629.valid){
continue;
}
CheckValue<IkReal> x10630 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10629.value)))+(x10630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10631=IKsin(j4);
IkReal x10632=IKcos(j4);
IkReal x10633=(gconst4*r11);
IkReal x10634=(gconst5*r10);
IkReal x10635=(gconst5*r00);
IkReal x10636=(gconst5*r20);
IkReal x10637=((1.0)*x10632);
IkReal x10638=(gconst4*x10631);
IkReal x10639=((1.0)*x10631);
evalcond[0]=((((-1.0)*x10636*x10639))+(((-1.0)*r22*x10637))+((r21*x10638)));
evalcond[1]=((((-1.0)*x10635*x10639))+(((-1.0)*r02*x10637))+((r01*x10638)));
evalcond[2]=((((-1.0)*x10633*x10637))+(((-1.0)*r12*x10639))+((x10632*x10634)));
evalcond[3]=((-1.0)+(((-1.0)*x10634*x10639))+(((-1.0)*r12*x10637))+((x10631*x10633)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10637))+((x10632*x10636))+(((-1.0)*r22*x10639)));
evalcond[5]=((((-1.0)*r02*x10639))+(((-1.0)*gconst4*r01*x10637))+(((-1.0)*sj1*sj2))+((x10632*x10635))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10640=((-1.0)*r21);
IkReal x10641=((-1.0)*px);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(x10640),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
IkReal x10642=((1.0)*(x10643.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10642)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10641);
rxp1_1=(px*r21);
rxp1_2=(r11*x10641);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10642)));
IkReal gconst4=x10640;
IkReal gconst5=((1.0)*r20);
IkReal x10644=((1.0)*cj3);
IkReal x10645=(r10*r20);
IkReal x10646=(r11*r21);
j4eval[0]=((((-1.0)*x10645))+(((-1.0)*x10646)));
j4eval[1]=((((-1.0)*x10644*x10645))+(((-1.0)*x10644*x10646)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10647=((-1.0)*r21);
IkReal x10648=((-1.0)*px);
CheckValue<IkReal> x10650 = IKatan2WithCheck(IkReal(x10647),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10650.valid){
continue;
}
IkReal x10649=((1.0)*(x10650.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10649)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10648);
rxp1_1=(px*r21);
rxp1_2=(r11*x10648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10649)));
IkReal gconst4=x10647;
IkReal gconst5=((1.0)*r20);
IkReal x10651=((1.0)*r11*r21);
IkReal x10652=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10651))+(((-1.0)*x10652)));
j4eval[1]=(((sj3*x10651))+((sj3*x10652)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10653=((-1.0)*r21);
IkReal x10654=((-1.0)*px);
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(x10653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
IkReal x10655=((1.0)*(x10656.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10655)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10654);
rxp1_1=(px*r21);
rxp1_2=(r11*x10654);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10655)));
IkReal gconst4=x10653;
IkReal gconst5=((1.0)*r20);
IkReal x10657=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10657))+(((-1.0)*r11*r21*x10657)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10658=((1.0)*r10);
CheckValue<IkReal> x10659=IKPowWithIntegerCheck(cj3,-1);
if(!x10659.valid){
continue;
}
CheckValue<IkReal> x10660=IKPowWithIntegerCheck(r02,-1);
if(!x10660.valid){
continue;
}
CheckValue<IkReal> x10661=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10658))),-1);
if(!x10661.valid){
continue;
}
if( IKabs(((x10659.value)*(x10660.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10661.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10658)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10659.value)*(x10660.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10661.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10658))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x10659.value)*(x10660.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10661.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10658))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10662=IKsin(j4);
IkReal x10663=IKcos(j4);
IkReal x10664=(cj2*sj1);
IkReal x10665=(cj1*sj2);
IkReal x10666=(gconst5*sj3);
IkReal x10667=(gconst4*r11);
IkReal x10668=(sj1*sj2);
IkReal x10669=((1.0)*gconst5);
IkReal x10670=(cj1*cj2);
IkReal x10671=(gconst4*r21);
IkReal x10672=(cj3*gconst4);
IkReal x10673=(gconst4*sj3);
IkReal x10674=(cj3*gconst5);
IkReal x10675=(r20*x10663);
IkReal x10676=(r10*x10663);
IkReal x10677=(cj3*x10663);
IkReal x10678=(r02*x10662);
IkReal x10679=(x10664+x10665);
IkReal x10680=((1.0)*sj3*x10663);
evalcond[0]=((-1.0)*r02*x10663);
evalcond[1]=(((x10662*x10671))+(((-1.0)*r20*x10662*x10669)));
evalcond[2]=(((cj3*x10678))+(((-1.0)*x10668))+x10670);
evalcond[3]=((((-1.0)*sj3*x10678))+x10679);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10662*x10669))+((x10662*x10667)));
evalcond[5]=(((r10*x10673))+(((-1.0)*cj3*x10669*x10676))+((r11*x10666))+((x10667*x10677)));
evalcond[6]=(((x10666*x10676))+((r11*x10674))+(((-1.0)*x10667*x10680))+((r10*x10672)));
evalcond[7]=((((-1.0)*cj3*x10669*x10675))+((r20*x10673))+((x10671*x10677))+x10679+((r21*x10666)));
evalcond[8]=(((x10666*x10675))+(((-1.0)*x10670))+((r20*x10672))+((r21*x10674))+x10668+(((-1.0)*x10671*x10680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10681=((1.0)*gconst5);
IkReal x10682=(gconst4*r11);
CheckValue<IkReal> x10683=IKPowWithIntegerCheck(((((-1.0)*r10*x10681))+x10682),-1);
if(!x10683.valid){
continue;
}
CheckValue<IkReal> x10684=IKPowWithIntegerCheck(((((-1.0)*sj3*x10682))+((gconst5*r10*sj3))),-1);
if(!x10684.valid){
continue;
}
if( IKabs(x10683.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10684.value)*(((((-1.0)*cj3*r11*x10681))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10683.value)+IKsqr(((x10684.value)*(((((-1.0)*cj3*r11*x10681))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(x10683.value, ((x10684.value)*(((((-1.0)*cj3*r11*x10681))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10685=IKsin(j4);
IkReal x10686=IKcos(j4);
IkReal x10687=(cj2*sj1);
IkReal x10688=(cj1*sj2);
IkReal x10689=(gconst5*sj3);
IkReal x10690=(gconst4*r11);
IkReal x10691=(sj1*sj2);
IkReal x10692=((1.0)*gconst5);
IkReal x10693=(cj1*cj2);
IkReal x10694=(gconst4*r21);
IkReal x10695=(cj3*gconst4);
IkReal x10696=(gconst4*sj3);
IkReal x10697=(cj3*gconst5);
IkReal x10698=(r20*x10686);
IkReal x10699=(r10*x10686);
IkReal x10700=(cj3*x10686);
IkReal x10701=(r02*x10685);
IkReal x10702=(x10688+x10687);
IkReal x10703=((1.0)*sj3*x10686);
evalcond[0]=((-1.0)*r02*x10686);
evalcond[1]=((((-1.0)*r20*x10685*x10692))+((x10685*x10694)));
evalcond[2]=(((cj3*x10701))+(((-1.0)*x10691))+x10693);
evalcond[3]=(x10702+(((-1.0)*sj3*x10701)));
evalcond[4]=((-1.0)+((x10685*x10690))+(((-1.0)*r10*x10685*x10692)));
evalcond[5]=(((r10*x10696))+((x10690*x10700))+((r11*x10689))+(((-1.0)*cj3*x10692*x10699)));
evalcond[6]=(((x10689*x10699))+((r10*x10695))+((r11*x10697))+(((-1.0)*x10690*x10703)));
evalcond[7]=((((-1.0)*cj3*x10692*x10698))+x10702+((x10694*x10700))+((r21*x10689))+((r20*x10696)));
evalcond[8]=(((x10689*x10698))+((r21*x10697))+(((-1.0)*x10693))+x10691+(((-1.0)*x10694*x10703))+((r20*x10695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10704=((1.0)*sj3);
IkReal x10705=(gconst4*r11);
IkReal x10706=((1.0)*gconst5*r10);
CheckValue<IkReal> x10707=IKPowWithIntegerCheck((x10705+(((-1.0)*x10706))),-1);
if(!x10707.valid){
continue;
}
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(((((-1.0)*cj3*x10706))+((cj3*x10705))),-1);
if(!x10708.valid){
continue;
}
if( IKabs(x10707.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10708.value)*(((((-1.0)*gconst5*r11*x10704))+(((-1.0)*gconst4*r10*x10704)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10707.value)+IKsqr(((x10708.value)*(((((-1.0)*gconst5*r11*x10704))+(((-1.0)*gconst4*r10*x10704))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(x10707.value, ((x10708.value)*(((((-1.0)*gconst5*r11*x10704))+(((-1.0)*gconst4*r10*x10704))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10709=IKsin(j4);
IkReal x10710=IKcos(j4);
IkReal x10711=(cj2*sj1);
IkReal x10712=(cj1*sj2);
IkReal x10713=(gconst5*sj3);
IkReal x10714=(gconst4*r11);
IkReal x10715=(sj1*sj2);
IkReal x10716=((1.0)*gconst5);
IkReal x10717=(cj1*cj2);
IkReal x10718=(gconst4*r21);
IkReal x10719=(cj3*gconst4);
IkReal x10720=(gconst4*sj3);
IkReal x10721=(cj3*gconst5);
IkReal x10722=(r20*x10710);
IkReal x10723=(r10*x10710);
IkReal x10724=(cj3*x10710);
IkReal x10725=(r02*x10709);
IkReal x10726=(x10712+x10711);
IkReal x10727=((1.0)*sj3*x10710);
evalcond[0]=((-1.0)*r02*x10710);
evalcond[1]=(((x10709*x10718))+(((-1.0)*r20*x10709*x10716)));
evalcond[2]=((((-1.0)*x10715))+x10717+((cj3*x10725)));
evalcond[3]=(x10726+(((-1.0)*sj3*x10725)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10709*x10716))+((x10709*x10714)));
evalcond[5]=(((r10*x10720))+((r11*x10713))+(((-1.0)*cj3*x10716*x10723))+((x10714*x10724)));
evalcond[6]=((((-1.0)*x10714*x10727))+((x10713*x10723))+((r10*x10719))+((r11*x10721)));
evalcond[7]=(((x10718*x10724))+(((-1.0)*cj3*x10716*x10722))+((r21*x10713))+((r20*x10720))+x10726);
evalcond[8]=(((x10713*x10722))+(((-1.0)*x10717))+((r21*x10721))+((r20*x10719))+(((-1.0)*x10718*x10727))+x10715);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10728=gconst4*gconst4;
IkReal x10729=gconst5*gconst5;
IkReal x10730=(r10*r21);
IkReal x10731=((1.0)*cj3);
IkReal x10732=(r11*r21);
IkReal x10733=(r11*r20);
IkReal x10734=(r22*sj3);
IkReal x10735=(gconst4*r10);
IkReal x10736=((1.0)*sj3);
IkReal x10737=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10728*x10731*x10732))+((x10730*x10737))+((x10733*x10737))+(((-1.0)*r10*r20*x10729*x10731))+(((-1.0)*r12*r22*x10731)))),-1);
if(!x10738.valid){
continue;
}
CheckValue<IkReal> x10739 = IKatan2WithCheck(IkReal((((gconst5*r11*x10734))+((x10734*x10735)))),IkReal((((sj3*x10728*x10730))+((gconst4*gconst5*sj3*x10732))+(((-1.0)*gconst5*r20*x10735*x10736))+(((-1.0)*x10729*x10733*x10736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10738.value)))+(x10739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10740=IKsin(j4);
IkReal x10741=IKcos(j4);
IkReal x10742=(cj2*sj1);
IkReal x10743=(cj1*sj2);
IkReal x10744=(gconst5*sj3);
IkReal x10745=(gconst4*r11);
IkReal x10746=(sj1*sj2);
IkReal x10747=(gconst5*r10);
IkReal x10748=(cj1*cj2);
IkReal x10749=(gconst4*r01);
IkReal x10750=(gconst4*r21);
IkReal x10751=(gconst5*r00);
IkReal x10752=(gconst4*sj3);
IkReal x10753=(cj3*gconst5);
IkReal x10754=(cj3*gconst4);
IkReal x10755=((1.0)*x10741);
IkReal x10756=((1.0)*x10740);
IkReal x10757=(cj3*x10740);
IkReal x10758=(cj3*x10741);
IkReal x10759=(x10743+x10742);
evalcond[0]=((((-1.0)*gconst5*r20*x10756))+(((-1.0)*r22*x10755))+((x10740*x10750)));
evalcond[1]=((((-1.0)*r02*x10755))+(((-1.0)*x10751*x10756))+((x10740*x10749)));
evalcond[2]=((-1.0)+(((-1.0)*x10747*x10756))+(((-1.0)*r12*x10755))+((x10740*x10745)));
evalcond[3]=(((x10745*x10758))+(((-1.0)*cj3*x10747*x10755))+((r10*x10752))+((r11*x10744))+((r12*x10757)));
evalcond[4]=((((-1.0)*sj3*x10745*x10755))+((r10*x10754))+((r11*x10753))+((r10*x10741*x10744))+(((-1.0)*r12*sj3*x10756)));
evalcond[5]=((((-1.0)*r20*x10753*x10755))+((r22*x10757))+((r20*x10752))+x10759+((x10750*x10758))+((r21*x10744)));
evalcond[6]=((((-1.0)*cj3*x10751*x10755))+(((-1.0)*x10746))+((x10749*x10758))+((r02*x10757))+x10748+((r01*x10744))+((r00*x10752)));
evalcond[7]=((((-1.0)*sj3*x10749*x10755))+(((-1.0)*r02*sj3*x10756))+x10759+((r00*x10741*x10744))+((r01*x10753))+((r00*x10754)));
evalcond[8]=((((-1.0)*x10748))+((r20*x10741*x10744))+(((-1.0)*sj3*x10750*x10755))+((r20*x10754))+(((-1.0)*r22*sj3*x10756))+x10746+((r21*x10753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10760=((1.0)*gconst5);
CheckValue<IkReal> x10761 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10761.valid){
continue;
}
CheckValue<IkReal> x10762=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10760))+(((-1.0)*gconst4*r20)))),-1);
if(!x10762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10761.value)+(((1.5707963267949)*(x10762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10763=IKsin(j4);
IkReal x10764=IKcos(j4);
IkReal x10765=(cj2*sj1);
IkReal x10766=(cj1*sj2);
IkReal x10767=(gconst5*sj3);
IkReal x10768=(gconst4*r11);
IkReal x10769=(sj1*sj2);
IkReal x10770=(gconst5*r10);
IkReal x10771=(cj1*cj2);
IkReal x10772=(gconst4*r01);
IkReal x10773=(gconst4*r21);
IkReal x10774=(gconst5*r00);
IkReal x10775=(gconst4*sj3);
IkReal x10776=(cj3*gconst5);
IkReal x10777=(cj3*gconst4);
IkReal x10778=((1.0)*x10764);
IkReal x10779=((1.0)*x10763);
IkReal x10780=(cj3*x10763);
IkReal x10781=(cj3*x10764);
IkReal x10782=(x10766+x10765);
evalcond[0]=((((-1.0)*gconst5*r20*x10779))+(((-1.0)*r22*x10778))+((x10763*x10773)));
evalcond[1]=((((-1.0)*r02*x10778))+(((-1.0)*x10774*x10779))+((x10763*x10772)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10778))+(((-1.0)*x10770*x10779))+((x10763*x10768)));
evalcond[3]=(((x10768*x10781))+(((-1.0)*cj3*x10770*x10778))+((r11*x10767))+((r10*x10775))+((r12*x10780)));
evalcond[4]=(((r11*x10776))+(((-1.0)*r12*sj3*x10779))+((r10*x10777))+(((-1.0)*sj3*x10768*x10778))+((r10*x10764*x10767)));
evalcond[5]=(((r22*x10780))+((r20*x10775))+((r21*x10767))+((x10773*x10781))+(((-1.0)*r20*x10776*x10778))+x10782);
evalcond[6]=((((-1.0)*x10769))+((r02*x10780))+((x10772*x10781))+((r01*x10767))+(((-1.0)*cj3*x10774*x10778))+((r00*x10775))+x10771);
evalcond[7]=(((r00*x10764*x10767))+(((-1.0)*r02*sj3*x10779))+((r00*x10777))+((r01*x10776))+(((-1.0)*sj3*x10772*x10778))+x10782);
evalcond[8]=((((-1.0)*sj3*x10773*x10778))+((r20*x10777))+(((-1.0)*x10771))+((r20*x10764*x10767))+((r21*x10776))+x10769+(((-1.0)*r22*sj3*x10779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10783=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10783.valid){
continue;
}
CheckValue<IkReal> x10784 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10783.value)))+(x10784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10785=IKsin(j4);
IkReal x10786=IKcos(j4);
IkReal x10787=(cj2*sj1);
IkReal x10788=(cj1*sj2);
IkReal x10789=(gconst5*sj3);
IkReal x10790=(gconst4*r11);
IkReal x10791=(sj1*sj2);
IkReal x10792=(gconst5*r10);
IkReal x10793=(cj1*cj2);
IkReal x10794=(gconst4*r01);
IkReal x10795=(gconst4*r21);
IkReal x10796=(gconst5*r00);
IkReal x10797=(gconst4*sj3);
IkReal x10798=(cj3*gconst5);
IkReal x10799=(cj3*gconst4);
IkReal x10800=((1.0)*x10786);
IkReal x10801=((1.0)*x10785);
IkReal x10802=(cj3*x10785);
IkReal x10803=(cj3*x10786);
IkReal x10804=(x10787+x10788);
evalcond[0]=((((-1.0)*r22*x10800))+((x10785*x10795))+(((-1.0)*gconst5*r20*x10801)));
evalcond[1]=((((-1.0)*r02*x10800))+((x10785*x10794))+(((-1.0)*x10796*x10801)));
evalcond[2]=((-1.0)+((x10785*x10790))+(((-1.0)*r12*x10800))+(((-1.0)*x10792*x10801)));
evalcond[3]=(((r10*x10797))+((x10790*x10803))+((r11*x10789))+((r12*x10802))+(((-1.0)*cj3*x10792*x10800)));
evalcond[4]=(((r10*x10799))+(((-1.0)*r12*sj3*x10801))+(((-1.0)*sj3*x10790*x10800))+((r10*x10786*x10789))+((r11*x10798)));
evalcond[5]=(((r21*x10789))+((x10795*x10803))+(((-1.0)*r20*x10798*x10800))+((r20*x10797))+((r22*x10802))+x10804);
evalcond[6]=((((-1.0)*cj3*x10796*x10800))+((r02*x10802))+((r01*x10789))+(((-1.0)*x10791))+((r00*x10797))+x10793+((x10794*x10803)));
evalcond[7]=(((r00*x10786*x10789))+(((-1.0)*r02*sj3*x10801))+(((-1.0)*sj3*x10794*x10800))+((r00*x10799))+((r01*x10798))+x10804);
evalcond[8]=(((r20*x10786*x10789))+((r21*x10798))+((r20*x10799))+(((-1.0)*sj3*x10795*x10800))+(((-1.0)*x10793))+x10791+(((-1.0)*r22*sj3*x10801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10805=((-1.0)*r21);
CheckValue<IkReal> x10808 = IKatan2WithCheck(IkReal(x10805),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10808.valid){
continue;
}
IkReal x10806=((1.0)*(x10808.value));
IkReal x10807=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10806)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10806)));
IkReal gconst4=(x10805*x10807);
IkReal gconst5=((1.0)*r20*x10807);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10809=((-1.0)*r21);
CheckValue<IkReal> x10812 = IKatan2WithCheck(IkReal(x10809),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10812.valid){
continue;
}
IkReal x10810=((1.0)*(x10812.value));
IkReal x10811=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10810)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10810)));
IkReal gconst4=(x10809*x10811);
IkReal gconst5=((1.0)*r20*x10811);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10813=((-1.0)*r21);
CheckValue<IkReal> x10816 = IKatan2WithCheck(IkReal(x10813),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10816.valid){
continue;
}
IkReal x10814=((1.0)*(x10816.value));
IkReal x10815=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10814)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10814)));
IkReal gconst4=(x10813*x10815);
IkReal gconst5=((1.0)*r20*x10815);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10817=((-1.0)*r21);
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal(x10817),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
IkReal x10818=((1.0)*(x10820.value));
IkReal x10819=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10818)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10818)));
IkReal gconst4=(x10817*x10819);
IkReal gconst5=((1.0)*r20*x10819);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10821=((-1.0)*r21);
CheckValue<IkReal> x10824 = IKatan2WithCheck(IkReal(x10821),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10824.valid){
continue;
}
IkReal x10822=((1.0)*(x10824.value));
IkReal x10823=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10822)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10822)));
IkReal gconst4=(x10821*x10823);
IkReal gconst5=((1.0)*r20*x10823);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10825=((-1.0)*r21);
CheckValue<IkReal> x10828 = IKatan2WithCheck(IkReal(x10825),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10828.valid){
continue;
}
IkReal x10826=((1.0)*(x10828.value));
IkReal x10827=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10826)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10826)));
IkReal gconst4=(x10825*x10827);
IkReal gconst5=((1.0)*r20*x10827);
IkReal x10829=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10833=IKPowWithIntegerCheck(x10829,-1);
if(!x10833.valid){
continue;
}
IkReal x10830=x10833.value;
IkReal x10831=((1.0)*x10830);
IkReal x10832=((((-2.0)*r00*r01*r20*r21*x10830))+(((-1.0)*(r02*r02)))+(((-1.0)*x10831*(r00*r00)*(r20*r20)))+(((-1.0)*x10831*(r01*r01)*(r21*r21))));
j4eval[0]=x10832;
j4eval[1]=r02;
j4eval[2]=x10829;
j4eval[3]=IKsign(x10832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10834=(gconst5*r00);
IkReal x10835=(gconst4*r01);
CheckValue<IkReal> x10836=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10835*x10835)))+(((-1.0)*(x10834*x10834)))+(((2.0)*x10834*x10835))+(((-1.0)*(r02*r02))))),-1);
if(!x10836.valid){
continue;
}
CheckValue<IkReal> x10837 = IKatan2WithCheck(IkReal(((((-1.0)*x10835))+x10834)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10836.value)))+(x10837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10838=IKsin(j4);
IkReal x10839=IKcos(j4);
IkReal x10840=(gconst4*r11);
IkReal x10841=((1.0)*cj1);
IkReal x10842=(gconst5*r10);
IkReal x10843=(gconst4*r01);
IkReal x10844=(gconst5*r00);
IkReal x10845=(gconst4*r21);
IkReal x10846=(gconst5*r20);
IkReal x10847=((1.0)*x10839);
IkReal x10848=((1.0)*x10838);
evalcond[0]=(((x10838*x10845))+(((-1.0)*r22*x10847))+(((-1.0)*x10846*x10848)));
evalcond[1]=(((x10838*x10840))+(((-1.0)*x10842*x10848))+(((-1.0)*r12*x10847)));
evalcond[2]=((((-1.0)*x10843*x10847))+(((-1.0)*r02*x10848))+((x10839*x10844)));
evalcond[3]=((-1.0)+((x10838*x10843))+(((-1.0)*r02*x10847))+(((-1.0)*x10844*x10848)));
evalcond[4]=((((-1.0)*x10845*x10847))+(((-1.0)*cj2*x10841))+(((-1.0)*r22*x10848))+((sj1*sj2))+((x10839*x10846)));
evalcond[5]=((((-1.0)*sj2*x10841))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10848))+((x10839*x10842))+(((-1.0)*x10840*x10847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10849=((1.0)*gconst5);
CheckValue<IkReal> x10850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10849))+(((-1.0)*gconst4*r10)))),-1);
if(!x10850.valid){
continue;
}
CheckValue<IkReal> x10851 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10850.value)))+(x10851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10852=IKsin(j4);
IkReal x10853=IKcos(j4);
IkReal x10854=(gconst4*r11);
IkReal x10855=((1.0)*cj1);
IkReal x10856=(gconst5*r10);
IkReal x10857=(gconst4*r01);
IkReal x10858=(gconst5*r00);
IkReal x10859=(gconst4*r21);
IkReal x10860=(gconst5*r20);
IkReal x10861=((1.0)*x10853);
IkReal x10862=((1.0)*x10852);
evalcond[0]=((((-1.0)*r22*x10861))+(((-1.0)*x10860*x10862))+((x10852*x10859)));
evalcond[1]=((((-1.0)*r12*x10861))+(((-1.0)*x10856*x10862))+((x10852*x10854)));
evalcond[2]=((((-1.0)*x10857*x10861))+((x10853*x10858))+(((-1.0)*r02*x10862)));
evalcond[3]=((-1.0)+(((-1.0)*x10858*x10862))+(((-1.0)*r02*x10861))+((x10852*x10857)));
evalcond[4]=((((-1.0)*r22*x10862))+(((-1.0)*x10859*x10861))+((sj1*sj2))+((x10853*x10860))+(((-1.0)*cj2*x10855)));
evalcond[5]=((((-1.0)*r12*x10862))+(((-1.0)*cj2*sj1))+(((-1.0)*x10854*x10861))+((x10853*x10856))+(((-1.0)*sj2*x10855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10863 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10863.valid){
continue;
}
CheckValue<IkReal> x10864=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10863.value)+(((1.5707963267949)*(x10864.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10865=IKsin(j4);
IkReal x10866=IKcos(j4);
IkReal x10867=(gconst4*r11);
IkReal x10868=((1.0)*cj1);
IkReal x10869=(gconst5*r10);
IkReal x10870=(gconst4*r01);
IkReal x10871=(gconst5*r00);
IkReal x10872=(gconst4*r21);
IkReal x10873=(gconst5*r20);
IkReal x10874=((1.0)*x10866);
IkReal x10875=((1.0)*x10865);
evalcond[0]=((((-1.0)*x10873*x10875))+(((-1.0)*r22*x10874))+((x10865*x10872)));
evalcond[1]=(((x10865*x10867))+(((-1.0)*r12*x10874))+(((-1.0)*x10869*x10875)));
evalcond[2]=(((x10866*x10871))+(((-1.0)*x10870*x10874))+(((-1.0)*r02*x10875)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10874))+(((-1.0)*x10871*x10875))+((x10865*x10870)));
evalcond[4]=(((x10866*x10873))+(((-1.0)*r22*x10875))+((sj1*sj2))+(((-1.0)*cj2*x10868))+(((-1.0)*x10872*x10874)));
evalcond[5]=((((-1.0)*r12*x10875))+(((-1.0)*cj2*sj1))+(((-1.0)*x10867*x10874))+(((-1.0)*sj2*x10868))+((x10866*x10869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10876=((-1.0)*r21);
CheckValue<IkReal> x10879 = IKatan2WithCheck(IkReal(x10876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10879.valid){
continue;
}
IkReal x10877=((1.0)*(x10879.value));
IkReal x10878=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10877)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10877)));
IkReal gconst4=(x10876*x10878);
IkReal gconst5=((1.0)*r20*x10878);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10880=((-1.0)*r21);
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal(x10880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
IkReal x10881=((1.0)*(x10883.value));
IkReal x10882=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10881)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10881)));
IkReal gconst4=(x10880*x10882);
IkReal gconst5=((1.0)*r20*x10882);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10884=((-1.0)*r21);
CheckValue<IkReal> x10887 = IKatan2WithCheck(IkReal(x10884),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10887.valid){
continue;
}
IkReal x10885=((1.0)*(x10887.value));
IkReal x10886=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10885)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10885)));
IkReal gconst4=(x10884*x10886);
IkReal gconst5=((1.0)*r20*x10886);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10888=(gconst4*r01);
IkReal x10889=(gconst5*r00);
CheckValue<IkReal> x10890=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10888*x10889))+(x10889*x10889)+(x10888*x10888)+(r02*r02))),-1);
if(!x10890.valid){
continue;
}
CheckValue<IkReal> x10891 = IKatan2WithCheck(IkReal(((((-1.0)*x10889))+x10888)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10890.value)))+(x10891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10892=IKcos(j4);
IkReal x10893=IKsin(j4);
IkReal x10894=(gconst4*r11);
IkReal x10895=(gconst5*r10);
IkReal x10896=((1.0)*cj1);
IkReal x10897=(gconst5*r00);
IkReal x10898=(gconst5*r20);
IkReal x10899=((1.0)*x10892);
IkReal x10900=(gconst4*x10892);
IkReal x10901=((1.0)*x10893);
IkReal x10902=(gconst4*x10893);
evalcond[0]=(((r01*x10900))+(((-1.0)*x10897*x10899))+((r02*x10893)));
evalcond[1]=((((-1.0)*r22*x10899))+((r21*x10902))+(((-1.0)*x10898*x10901)));
evalcond[2]=((((-1.0)*x10895*x10901))+((x10893*x10894))+(((-1.0)*r12*x10899)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10899))+((r01*x10902))+(((-1.0)*x10897*x10901)));
evalcond[4]=(((sj1*sj2))+((r22*x10893))+(((-1.0)*x10898*x10899))+(((-1.0)*cj2*x10896))+((r21*x10900)));
evalcond[5]=((((-1.0)*sj2*x10896))+(((-1.0)*cj2*sj1))+(((-1.0)*x10895*x10899))+((x10892*x10894))+((r12*x10893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10903=((1.0)*gconst5);
CheckValue<IkReal> x10904=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10903))+(((-1.0)*gconst4*r10)))),-1);
if(!x10904.valid){
continue;
}
CheckValue<IkReal> x10905 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10903))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10904.value)))+(x10905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10906=IKcos(j4);
IkReal x10907=IKsin(j4);
IkReal x10908=(gconst4*r11);
IkReal x10909=(gconst5*r10);
IkReal x10910=((1.0)*cj1);
IkReal x10911=(gconst5*r00);
IkReal x10912=(gconst5*r20);
IkReal x10913=((1.0)*x10906);
IkReal x10914=(gconst4*x10906);
IkReal x10915=((1.0)*x10907);
IkReal x10916=(gconst4*x10907);
evalcond[0]=((((-1.0)*x10911*x10913))+((r01*x10914))+((r02*x10907)));
evalcond[1]=((((-1.0)*r22*x10913))+(((-1.0)*x10912*x10915))+((r21*x10916)));
evalcond[2]=((((-1.0)*r12*x10913))+((x10907*x10908))+(((-1.0)*x10909*x10915)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10913))+(((-1.0)*x10911*x10915))+((r01*x10916)));
evalcond[4]=(((r22*x10907))+((sj1*sj2))+(((-1.0)*x10912*x10913))+((r21*x10914))+(((-1.0)*cj2*x10910)));
evalcond[5]=(((r12*x10907))+(((-1.0)*sj2*x10910))+(((-1.0)*cj2*sj1))+((x10906*x10908))+(((-1.0)*x10909*x10913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10917 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10917.value)+(((1.5707963267949)*(x10918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10919=IKcos(j4);
IkReal x10920=IKsin(j4);
IkReal x10921=(gconst4*r11);
IkReal x10922=(gconst5*r10);
IkReal x10923=((1.0)*cj1);
IkReal x10924=(gconst5*r00);
IkReal x10925=(gconst5*r20);
IkReal x10926=((1.0)*x10919);
IkReal x10927=(gconst4*x10919);
IkReal x10928=((1.0)*x10920);
IkReal x10929=(gconst4*x10920);
evalcond[0]=(((r02*x10920))+(((-1.0)*x10924*x10926))+((r01*x10927)));
evalcond[1]=((((-1.0)*r22*x10926))+((r21*x10929))+(((-1.0)*x10925*x10928)));
evalcond[2]=((((-1.0)*r12*x10926))+((x10920*x10921))+(((-1.0)*x10922*x10928)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10926))+(((-1.0)*x10924*x10928))+((r01*x10929)));
evalcond[4]=(((sj1*sj2))+((r21*x10927))+((r22*x10920))+(((-1.0)*cj2*x10923))+(((-1.0)*x10925*x10926)));
evalcond[5]=((((-1.0)*sj2*x10923))+(((-1.0)*cj2*sj1))+((r12*x10920))+((x10919*x10921))+(((-1.0)*x10922*x10926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10930=((-1.0)*r21);
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal(x10930),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
IkReal x10931=((1.0)*(x10933.value));
IkReal x10932=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10931)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10931)));
IkReal gconst4=(x10930*x10932);
IkReal gconst5=((1.0)*r20*x10932);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10934=((-1.0)*r21);
CheckValue<IkReal> x10937 = IKatan2WithCheck(IkReal(x10934),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10937.valid){
continue;
}
IkReal x10935=((1.0)*(x10937.value));
IkReal x10936=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10935)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10935)));
IkReal gconst4=(x10934*x10936);
IkReal gconst5=((1.0)*r20*x10936);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10938=((-1.0)*r21);
CheckValue<IkReal> x10941 = IKatan2WithCheck(IkReal(x10938),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10941.valid){
continue;
}
IkReal x10939=((1.0)*(x10941.value));
IkReal x10940=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10939)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10939)));
IkReal gconst4=(x10938*x10940);
IkReal gconst5=((1.0)*r20*x10940);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10942=(gconst4*r01);
IkReal x10943=(gconst5*r00);
CheckValue<IkReal> x10944=IKPowWithIntegerCheck(IKsign(((x10942*x10942)+(x10943*x10943)+(((-2.0)*x10942*x10943))+(r02*r02))),-1);
if(!x10944.valid){
continue;
}
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(((((-1.0)*x10943))+x10942)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10944.value)))+(x10945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10946=IKcos(j4);
IkReal x10947=IKsin(j4);
IkReal x10948=(gconst4*r11);
IkReal x10949=(gconst5*r10);
IkReal x10950=(gconst5*r00);
IkReal x10951=(gconst5*r20);
IkReal x10952=((1.0)*x10946);
IkReal x10953=(gconst4*x10946);
IkReal x10954=((1.0)*x10947);
IkReal x10955=(gconst4*x10947);
evalcond[0]=(((r01*x10953))+(((-1.0)*x10950*x10952))+((r02*x10947)));
evalcond[1]=((((-1.0)*r22*x10952))+(((-1.0)*x10951*x10954))+((r21*x10955)));
evalcond[2]=((((-1.0)*x10949*x10954))+((x10947*x10948))+(((-1.0)*r12*x10952)));
evalcond[3]=((-1.0)+((r01*x10955))+(((-1.0)*x10950*x10954))+(((-1.0)*r02*x10952)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10951*x10952))+((r21*x10953))+((r22*x10947)));
evalcond[5]=(((r12*x10947))+(((-1.0)*x10949*x10952))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10946*x10948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10956=((1.0)*gconst5);
CheckValue<IkReal> x10957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10956))+(((-1.0)*gconst4*r10)))),-1);
if(!x10957.valid){
continue;
}
CheckValue<IkReal> x10958 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10956))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10957.value)))+(x10958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10959=IKcos(j4);
IkReal x10960=IKsin(j4);
IkReal x10961=(gconst4*r11);
IkReal x10962=(gconst5*r10);
IkReal x10963=(gconst5*r00);
IkReal x10964=(gconst5*r20);
IkReal x10965=((1.0)*x10959);
IkReal x10966=(gconst4*x10959);
IkReal x10967=((1.0)*x10960);
IkReal x10968=(gconst4*x10960);
evalcond[0]=(((r02*x10960))+((r01*x10966))+(((-1.0)*x10963*x10965)));
evalcond[1]=((((-1.0)*r22*x10965))+((r21*x10968))+(((-1.0)*x10964*x10967)));
evalcond[2]=(((x10960*x10961))+(((-1.0)*x10962*x10967))+(((-1.0)*r12*x10965)));
evalcond[3]=((-1.0)+((r01*x10968))+(((-1.0)*x10963*x10967))+(((-1.0)*r02*x10965)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10960))+((r21*x10966))+(((-1.0)*x10964*x10965)));
evalcond[5]=(((x10959*x10961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10962*x10965))+((r12*x10960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
CheckValue<IkReal> x10970=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10969.value)+(((1.5707963267949)*(x10970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10971=IKcos(j4);
IkReal x10972=IKsin(j4);
IkReal x10973=(gconst4*r11);
IkReal x10974=(gconst5*r10);
IkReal x10975=(gconst5*r00);
IkReal x10976=(gconst5*r20);
IkReal x10977=((1.0)*x10971);
IkReal x10978=(gconst4*x10971);
IkReal x10979=((1.0)*x10972);
IkReal x10980=(gconst4*x10972);
evalcond[0]=(((r02*x10972))+((r01*x10978))+(((-1.0)*x10975*x10977)));
evalcond[1]=(((r21*x10980))+(((-1.0)*x10976*x10979))+(((-1.0)*r22*x10977)));
evalcond[2]=(((x10972*x10973))+(((-1.0)*x10974*x10979))+(((-1.0)*r12*x10977)));
evalcond[3]=((-1.0)+((r01*x10980))+(((-1.0)*r02*x10977))+(((-1.0)*x10975*x10979)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10976*x10977))+((cj1*sj2))+((r22*x10972))+((r21*x10978)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10971*x10973))+((r12*x10972))+(((-1.0)*x10974*x10977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10981=((-1.0)*r21);
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(x10981),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
IkReal x10982=((1.0)*(x10984.value));
IkReal x10983=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10982)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10982)));
IkReal gconst4=(x10981*x10983);
IkReal gconst5=((1.0)*r20*x10983);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10985=((-1.0)*r21);
CheckValue<IkReal> x10988 = IKatan2WithCheck(IkReal(x10985),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10988.valid){
continue;
}
IkReal x10986=((1.0)*(x10988.value));
IkReal x10987=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10986)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10986)));
IkReal gconst4=(x10985*x10987);
IkReal gconst5=((1.0)*r20*x10987);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10989=((-1.0)*r21);
CheckValue<IkReal> x10992 = IKatan2WithCheck(IkReal(x10989),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10992.valid){
continue;
}
IkReal x10990=((1.0)*(x10992.value));
IkReal x10991=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10990)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10990)));
IkReal gconst4=(x10989*x10991);
IkReal gconst5=((1.0)*r20*x10991);
IkReal x10993=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10997=IKPowWithIntegerCheck(x10993,-1);
if(!x10997.valid){
continue;
}
IkReal x10994=x10997.value;
IkReal x10995=((1.0)*x10994);
IkReal x10996=((((-1.0)*x10995*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10994))+(((-1.0)*x10995*(r00*r00)*(r20*r20))));
j4eval[0]=x10996;
j4eval[1]=r02;
j4eval[2]=x10993;
j4eval[3]=IKsign(x10996);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10998=(gconst5*r00);
IkReal x10999=(gconst4*r01);
CheckValue<IkReal> x11000 = IKatan2WithCheck(IkReal(((((-1.0)*x10999))+x10998)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11000.valid){
continue;
}
CheckValue<IkReal> x11001=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10998*x10999))+(((-1.0)*(x10998*x10998)))+(((-1.0)*(x10999*x10999))))),-1);
if(!x11001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11000.value)+(((1.5707963267949)*(x11001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11002=IKsin(j4);
IkReal x11003=IKcos(j4);
IkReal x11004=(gconst4*r11);
IkReal x11005=(gconst5*r10);
IkReal x11006=(gconst4*r01);
IkReal x11007=(gconst5*r00);
IkReal x11008=(gconst4*r21);
IkReal x11009=(gconst5*r20);
IkReal x11010=((1.0)*x11003);
IkReal x11011=((1.0)*x11002);
evalcond[0]=((((-1.0)*r22*x11010))+((x11002*x11008))+(((-1.0)*x11009*x11011)));
evalcond[1]=(((x11002*x11004))+(((-1.0)*x11005*x11011))+(((-1.0)*r12*x11010)));
evalcond[2]=((((-1.0)*x11006*x11010))+(((-1.0)*r02*x11011))+((x11003*x11007)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11010))+((x11002*x11006))+(((-1.0)*x11007*x11011)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11011))+((cj1*sj2))+((x11003*x11009))+(((-1.0)*x11008*x11010)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11004*x11010))+((x11003*x11005))+(((-1.0)*r12*x11011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11012=((1.0)*gconst5);
CheckValue<IkReal> x11013 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11013.valid){
continue;
}
CheckValue<IkReal> x11014=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11012))+(((-1.0)*gconst4*r10)))),-1);
if(!x11014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11013.value)+(((1.5707963267949)*(x11014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11015=IKsin(j4);
IkReal x11016=IKcos(j4);
IkReal x11017=(gconst4*r11);
IkReal x11018=(gconst5*r10);
IkReal x11019=(gconst4*r01);
IkReal x11020=(gconst5*r00);
IkReal x11021=(gconst4*r21);
IkReal x11022=(gconst5*r20);
IkReal x11023=((1.0)*x11016);
IkReal x11024=((1.0)*x11015);
evalcond[0]=(((x11015*x11021))+(((-1.0)*r22*x11023))+(((-1.0)*x11022*x11024)));
evalcond[1]=((((-1.0)*x11018*x11024))+(((-1.0)*r12*x11023))+((x11015*x11017)));
evalcond[2]=((((-1.0)*r02*x11024))+((x11016*x11020))+(((-1.0)*x11019*x11023)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11023))+(((-1.0)*x11020*x11024))+((x11015*x11019)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11016*x11022))+(((-1.0)*r22*x11024))+(((-1.0)*x11021*x11023)));
evalcond[5]=(((x11016*x11018))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11024))+(((-1.0)*x11017*x11023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11025 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11025.valid){
continue;
}
CheckValue<IkReal> x11026=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11025.value)+(((1.5707963267949)*(x11026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11027=IKsin(j4);
IkReal x11028=IKcos(j4);
IkReal x11029=(gconst4*r11);
IkReal x11030=(gconst5*r10);
IkReal x11031=(gconst4*r01);
IkReal x11032=(gconst5*r00);
IkReal x11033=(gconst4*r21);
IkReal x11034=(gconst5*r20);
IkReal x11035=((1.0)*x11028);
IkReal x11036=((1.0)*x11027);
evalcond[0]=((((-1.0)*x11034*x11036))+(((-1.0)*r22*x11035))+((x11027*x11033)));
evalcond[1]=(((x11027*x11029))+(((-1.0)*x11030*x11036))+(((-1.0)*r12*x11035)));
evalcond[2]=((((-1.0)*r02*x11036))+(((-1.0)*x11031*x11035))+((x11028*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11035))+((x11027*x11031))+(((-1.0)*x11032*x11036)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11036))+(((-1.0)*x11033*x11035))+((x11028*x11034)));
evalcond[5]=((((-1.0)*x11029*x11035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11036))+((x11028*x11030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11037=gconst4*gconst4;
IkReal x11038=gconst5*gconst5;
IkReal x11039=(r01*r20);
IkReal x11040=(gconst4*sj3);
IkReal x11041=(r01*r21);
IkReal x11042=((1.0)*cj3);
IkReal x11043=(r00*r21);
IkReal x11044=(r00*r20);
IkReal x11045=(cj3*gconst4*gconst5);
IkReal x11046=((1.0)*x11038);
CheckValue<IkReal> x11047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11042))+(((-1.0)*x11038*x11042*x11044))+((x11043*x11045))+(((-1.0)*x11037*x11041*x11042))+((x11039*x11045)))),-1);
if(!x11047.valid){
continue;
}
CheckValue<IkReal> x11048 = IKatan2WithCheck(IkReal((((r00*r22*x11040))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11037*x11043))+((gconst5*x11040*x11041))+(((-1.0)*sj3*x11039*x11046))+(((-1.0)*gconst5*x11040*x11044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11047.value)))+(x11048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11049=IKsin(j4);
IkReal x11050=IKcos(j4);
IkReal x11051=(sj1*sj2);
IkReal x11052=(gconst5*sj3);
IkReal x11053=(gconst4*r11);
IkReal x11054=(gconst5*r10);
IkReal x11055=((1.0)*cj1);
IkReal x11056=(gconst4*r01);
IkReal x11057=(cj2*sj1);
IkReal x11058=(gconst5*r00);
IkReal x11059=(gconst4*sj3);
IkReal x11060=(cj3*gconst5);
IkReal x11061=(cj3*gconst4);
IkReal x11062=(gconst4*r21);
IkReal x11063=(cj2*x11055);
IkReal x11064=((1.0)*x11050);
IkReal x11065=((1.0)*x11049);
IkReal x11066=(cj3*x11049);
IkReal x11067=(cj3*x11050);
evalcond[0]=((((-1.0)*r22*x11064))+((x11049*x11062))+(((-1.0)*gconst5*r20*x11065)));
evalcond[1]=((((-1.0)*r12*x11064))+(((-1.0)*x11054*x11065))+((x11049*x11053)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11064))+(((-1.0)*x11058*x11065))+((x11049*x11056)));
evalcond[3]=(((r00*x11059))+((r01*x11052))+((x11056*x11067))+(((-1.0)*cj3*x11058*x11064))+((r02*x11066)));
evalcond[4]=((((-1.0)*r02*sj3*x11065))+(((-1.0)*sj3*x11056*x11064))+((r00*x11050*x11052))+((r01*x11060))+((r00*x11061)));
evalcond[5]=(((r20*x11059))+(((-1.0)*r20*x11060*x11064))+((cj1*sj2))+x11057+((r22*x11066))+((r21*x11052))+((r21*x11050*x11061)));
evalcond[6]=((((-1.0)*x11063))+((r10*x11059))+((x11053*x11067))+x11051+((r12*x11066))+((r11*x11052))+(((-1.0)*cj3*x11054*x11064)));
evalcond[7]=((((-1.0)*x11063))+((r20*x11061))+(((-1.0)*r21*x11059*x11064))+(((-1.0)*r22*sj3*x11065))+x11051+((r20*x11050*x11052))+((r21*x11060)));
evalcond[8]=((((-1.0)*r12*sj3*x11065))+(((-1.0)*sj2*x11055))+((r10*x11061))+(((-1.0)*sj3*x11053*x11064))+(((-1.0)*x11057))+((r11*x11060))+((r10*x11050*x11052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11068=((1.0)*gconst5);
CheckValue<IkReal> x11069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11068))+(((-1.0)*gconst4*r10)))),-1);
if(!x11069.valid){
continue;
}
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11069.value)))+(x11070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11071=IKsin(j4);
IkReal x11072=IKcos(j4);
IkReal x11073=(sj1*sj2);
IkReal x11074=(gconst5*sj3);
IkReal x11075=(gconst4*r11);
IkReal x11076=(gconst5*r10);
IkReal x11077=((1.0)*cj1);
IkReal x11078=(gconst4*r01);
IkReal x11079=(cj2*sj1);
IkReal x11080=(gconst5*r00);
IkReal x11081=(gconst4*sj3);
IkReal x11082=(cj3*gconst5);
IkReal x11083=(cj3*gconst4);
IkReal x11084=(gconst4*r21);
IkReal x11085=(cj2*x11077);
IkReal x11086=((1.0)*x11072);
IkReal x11087=((1.0)*x11071);
IkReal x11088=(cj3*x11071);
IkReal x11089=(cj3*x11072);
evalcond[0]=((((-1.0)*r22*x11086))+(((-1.0)*gconst5*r20*x11087))+((x11071*x11084)));
evalcond[1]=((((-1.0)*x11076*x11087))+((x11071*x11075))+(((-1.0)*r12*x11086)));
evalcond[2]=((-1.0)+(((-1.0)*x11080*x11087))+(((-1.0)*r02*x11086))+((x11071*x11078)));
evalcond[3]=(((r00*x11081))+((r02*x11088))+((r01*x11074))+((x11078*x11089))+(((-1.0)*cj3*x11080*x11086)));
evalcond[4]=(((r01*x11082))+((r00*x11083))+(((-1.0)*r02*sj3*x11087))+((r00*x11072*x11074))+(((-1.0)*sj3*x11078*x11086)));
evalcond[5]=(((r21*x11074))+((cj1*sj2))+x11079+(((-1.0)*r20*x11082*x11086))+((r22*x11088))+((r21*x11072*x11083))+((r20*x11081)));
evalcond[6]=((((-1.0)*cj3*x11076*x11086))+((r11*x11074))+x11073+((r10*x11081))+((x11075*x11089))+((r12*x11088))+(((-1.0)*x11085)));
evalcond[7]=(((r20*x11072*x11074))+((r21*x11082))+(((-1.0)*r22*sj3*x11087))+(((-1.0)*r21*x11081*x11086))+x11073+(((-1.0)*x11085))+((r20*x11083)));
evalcond[8]=(((r10*x11072*x11074))+(((-1.0)*r12*sj3*x11087))+(((-1.0)*sj3*x11075*x11086))+((r10*x11083))+((r11*x11082))+(((-1.0)*sj2*x11077))+(((-1.0)*x11079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11090 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11090.valid){
continue;
}
CheckValue<IkReal> x11091=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11090.value)+(((1.5707963267949)*(x11091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11092=IKsin(j4);
IkReal x11093=IKcos(j4);
IkReal x11094=(sj1*sj2);
IkReal x11095=(gconst5*sj3);
IkReal x11096=(gconst4*r11);
IkReal x11097=(gconst5*r10);
IkReal x11098=((1.0)*cj1);
IkReal x11099=(gconst4*r01);
IkReal x11100=(cj2*sj1);
IkReal x11101=(gconst5*r00);
IkReal x11102=(gconst4*sj3);
IkReal x11103=(cj3*gconst5);
IkReal x11104=(cj3*gconst4);
IkReal x11105=(gconst4*r21);
IkReal x11106=(cj2*x11098);
IkReal x11107=((1.0)*x11093);
IkReal x11108=((1.0)*x11092);
IkReal x11109=(cj3*x11092);
IkReal x11110=(cj3*x11093);
evalcond[0]=(((x11092*x11105))+(((-1.0)*gconst5*r20*x11108))+(((-1.0)*r22*x11107)));
evalcond[1]=((((-1.0)*x11097*x11108))+((x11092*x11096))+(((-1.0)*r12*x11107)));
evalcond[2]=((-1.0)+(((-1.0)*x11101*x11108))+((x11092*x11099))+(((-1.0)*r02*x11107)));
evalcond[3]=(((r02*x11109))+((r01*x11095))+(((-1.0)*cj3*x11101*x11107))+((x11099*x11110))+((r00*x11102)));
evalcond[4]=((((-1.0)*r02*sj3*x11108))+((r00*x11093*x11095))+((r00*x11104))+(((-1.0)*sj3*x11099*x11107))+((r01*x11103)));
evalcond[5]=(((cj1*sj2))+x11100+((r21*x11093*x11104))+((r20*x11102))+(((-1.0)*r20*x11103*x11107))+((r22*x11109))+((r21*x11095)));
evalcond[6]=(((r11*x11095))+((r10*x11102))+x11094+((x11096*x11110))+(((-1.0)*x11106))+((r12*x11109))+(((-1.0)*cj3*x11097*x11107)));
evalcond[7]=(((r20*x11093*x11095))+x11094+((r21*x11103))+(((-1.0)*r22*sj3*x11108))+(((-1.0)*r21*x11102*x11107))+((r20*x11104))+(((-1.0)*x11106)));
evalcond[8]=((((-1.0)*x11100))+(((-1.0)*sj3*x11096*x11107))+((r10*x11093*x11095))+(((-1.0)*r12*sj3*x11108))+((r10*x11104))+(((-1.0)*sj2*x11098))+((r11*x11103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11111=((-1.0)*r21);
CheckValue<IkReal> x11114 = IKatan2WithCheck(IkReal(x11111),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11114.valid){
continue;
}
IkReal x11112=((1.0)*(x11114.value));
IkReal x11113=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11112)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11112)));
IkReal gconst4=(x11111*x11113);
IkReal gconst5=((1.0)*r20*x11113);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11115=((-1.0)*r21);
CheckValue<IkReal> x11118 = IKatan2WithCheck(IkReal(x11115),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11118.valid){
continue;
}
IkReal x11116=((1.0)*(x11118.value));
IkReal x11117=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11116)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11116)));
IkReal gconst4=(x11115*x11117);
IkReal gconst5=((1.0)*r20*x11117);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11119=((-1.0)*r21);
CheckValue<IkReal> x11122 = IKatan2WithCheck(IkReal(x11119),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11122.valid){
continue;
}
IkReal x11120=((1.0)*(x11122.value));
IkReal x11121=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11120)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11120)));
IkReal gconst4=(x11119*x11121);
IkReal gconst5=((1.0)*r20*x11121);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11123=((-1.0)*r21);
CheckValue<IkReal> x11126 = IKatan2WithCheck(IkReal(x11123),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11126.valid){
continue;
}
IkReal x11124=((1.0)*(x11126.value));
IkReal x11125=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11124)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11124)));
IkReal gconst4=(x11123*x11125);
IkReal gconst5=((1.0)*r20*x11125);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11127=((-1.0)*r21);
CheckValue<IkReal> x11130 = IKatan2WithCheck(IkReal(x11127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11130.valid){
continue;
}
IkReal x11128=((1.0)*(x11130.value));
IkReal x11129=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11128)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11128)));
IkReal gconst4=(x11127*x11129);
IkReal gconst5=((1.0)*r20*x11129);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11131=((-1.0)*r21);
CheckValue<IkReal> x11134 = IKatan2WithCheck(IkReal(x11131),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11134.valid){
continue;
}
IkReal x11132=((1.0)*(x11134.value));
IkReal x11133=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11132)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11132)));
IkReal gconst4=(x11131*x11133);
IkReal gconst5=((1.0)*r20*x11133);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11135=(gconst5*r00);
IkReal x11136=(gconst4*r01);
CheckValue<IkReal> x11137 = IKatan2WithCheck(IkReal(((((-1.0)*x11136))+x11135)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11137.valid){
continue;
}
CheckValue<IkReal> x11138=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11135*x11136))+(x11136*x11136)+(x11135*x11135)+(r02*r02))),-1);
if(!x11138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11137.value)+(((1.5707963267949)*(x11138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11139=IKsin(j4);
IkReal x11140=IKcos(j4);
IkReal x11141=(gconst4*r11);
IkReal x11142=(gconst5*r10);
IkReal x11143=(gconst4*r01);
IkReal x11144=(gconst5*r00);
IkReal x11145=(gconst4*r21);
IkReal x11146=(gconst5*r20);
IkReal x11147=((1.0)*x11140);
IkReal x11148=((1.0)*x11139);
evalcond[0]=((((-1.0)*r22*x11147))+(((-1.0)*x11146*x11148))+((x11139*x11145)));
evalcond[1]=((((-1.0)*x11142*x11148))+(((-1.0)*r12*x11147))+((x11139*x11141)));
evalcond[2]=(((x11140*x11144))+(((-1.0)*r02*x11148))+(((-1.0)*x11143*x11147)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11147))+(((-1.0)*x11144*x11148))+((x11139*x11143)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11140*x11142))+(((-1.0)*x11141*x11147))+(((-1.0)*r12*x11148)));
evalcond[5]=(((x11140*x11146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11148))+(((-1.0)*x11145*x11147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11149=((1.0)*gconst5);
CheckValue<IkReal> x11150 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11150.valid){
continue;
}
CheckValue<IkReal> x11151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11149))+(((-1.0)*gconst4*r20)))),-1);
if(!x11151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11150.value)+(((1.5707963267949)*(x11151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11152=IKsin(j4);
IkReal x11153=IKcos(j4);
IkReal x11154=(gconst4*r11);
IkReal x11155=(gconst5*r10);
IkReal x11156=(gconst4*r01);
IkReal x11157=(gconst5*r00);
IkReal x11158=(gconst4*r21);
IkReal x11159=(gconst5*r20);
IkReal x11160=((1.0)*x11153);
IkReal x11161=((1.0)*x11152);
evalcond[0]=(((x11152*x11158))+(((-1.0)*r22*x11160))+(((-1.0)*x11159*x11161)));
evalcond[1]=((((-1.0)*x11155*x11161))+((x11152*x11154))+(((-1.0)*r12*x11160)));
evalcond[2]=((((-1.0)*x11156*x11160))+(((-1.0)*r02*x11161))+((x11153*x11157)));
evalcond[3]=((1.0)+(((-1.0)*x11157*x11161))+((x11152*x11156))+(((-1.0)*r02*x11160)));
evalcond[4]=((((-1.0)*x11154*x11160))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11161))+((x11153*x11155)));
evalcond[5]=((((-1.0)*x11158*x11160))+(((-1.0)*r22*x11161))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11153*x11159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11162.valid){
continue;
}
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11162.value)))+(x11163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11164=IKsin(j4);
IkReal x11165=IKcos(j4);
IkReal x11166=(gconst4*r11);
IkReal x11167=(gconst5*r10);
IkReal x11168=(gconst4*r01);
IkReal x11169=(gconst5*r00);
IkReal x11170=(gconst4*r21);
IkReal x11171=(gconst5*r20);
IkReal x11172=((1.0)*x11165);
IkReal x11173=((1.0)*x11164);
evalcond[0]=((((-1.0)*r22*x11172))+(((-1.0)*x11171*x11173))+((x11164*x11170)));
evalcond[1]=((((-1.0)*x11167*x11173))+(((-1.0)*r12*x11172))+((x11164*x11166)));
evalcond[2]=(((x11165*x11169))+(((-1.0)*x11168*x11172))+(((-1.0)*r02*x11173)));
evalcond[3]=((1.0)+(((-1.0)*x11169*x11173))+((x11164*x11168))+(((-1.0)*r02*x11172)));
evalcond[4]=((((-1.0)*x11166*x11172))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11173))+((x11165*x11167)));
evalcond[5]=((((-1.0)*r22*x11173))+(((-1.0)*cj1*cj2))+((x11165*x11171))+((sj1*sj2))+(((-1.0)*x11170*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11174=((-1.0)*r21);
CheckValue<IkReal> x11177 = IKatan2WithCheck(IkReal(x11174),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11177.valid){
continue;
}
IkReal x11175=((1.0)*(x11177.value));
IkReal x11176=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11175)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11175)));
IkReal gconst4=(x11174*x11176);
IkReal gconst5=((1.0)*r20*x11176);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11178=((-1.0)*r21);
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(x11178),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
IkReal x11179=((1.0)*(x11181.value));
IkReal x11180=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11179)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11179)));
IkReal gconst4=(x11178*x11180);
IkReal gconst5=((1.0)*r20*x11180);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11182=((-1.0)*r21);
CheckValue<IkReal> x11185 = IKatan2WithCheck(IkReal(x11182),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11185.valid){
continue;
}
IkReal x11183=((1.0)*(x11185.value));
IkReal x11184=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11183)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11183)));
IkReal gconst4=(x11182*x11184);
IkReal gconst5=((1.0)*r20*x11184);
IkReal x11186=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11190=IKPowWithIntegerCheck(x11186,-1);
if(!x11190.valid){
continue;
}
IkReal x11187=x11190.value;
IkReal x11188=((1.0)*x11187);
IkReal x11189=((((-1.0)*x11188*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11187))+(((-1.0)*x11188*(r01*r01)*(r21*r21))));
j4eval[0]=x11189;
j4eval[1]=IKsign(x11189);
j4eval[2]=r02;
j4eval[3]=x11186;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11191=(gconst4*r01);
IkReal x11192=(gconst5*r00);
CheckValue<IkReal> x11193=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11191*x11191)))+(((2.0)*x11191*x11192))+(((-1.0)*(x11192*x11192))))),-1);
if(!x11193.valid){
continue;
}
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal((x11191+(((-1.0)*x11192)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11193.value)))+(x11194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11195=IKcos(j4);
IkReal x11196=IKsin(j4);
IkReal x11197=(gconst4*r11);
IkReal x11198=(gconst5*r10);
IkReal x11199=(gconst5*r00);
IkReal x11200=(gconst5*r20);
IkReal x11201=((1.0)*x11195);
IkReal x11202=(gconst4*x11195);
IkReal x11203=((1.0)*x11196);
IkReal x11204=(gconst4*x11196);
evalcond[0]=((((-1.0)*x11199*x11201))+((r02*x11196))+((r01*x11202)));
evalcond[1]=((((-1.0)*r22*x11201))+((r21*x11204))+(((-1.0)*x11200*x11203)));
evalcond[2]=(((x11196*x11197))+(((-1.0)*r12*x11201))+(((-1.0)*x11198*x11203)));
evalcond[3]=((1.0)+(((-1.0)*x11199*x11203))+((r01*x11204))+(((-1.0)*r02*x11201)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11196))+(((-1.0)*x11198*x11201))+((x11195*x11197)));
evalcond[5]=(((r21*x11202))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11196))+(((-1.0)*x11200*x11201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11205=((1.0)*gconst5);
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11205))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
CheckValue<IkReal> x11207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11205))+(((-1.0)*gconst4*r20)))),-1);
if(!x11207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11206.value)+(((1.5707963267949)*(x11207.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11208=IKcos(j4);
IkReal x11209=IKsin(j4);
IkReal x11210=(gconst4*r11);
IkReal x11211=(gconst5*r10);
IkReal x11212=(gconst5*r00);
IkReal x11213=(gconst5*r20);
IkReal x11214=((1.0)*x11208);
IkReal x11215=(gconst4*x11208);
IkReal x11216=((1.0)*x11209);
IkReal x11217=(gconst4*x11209);
evalcond[0]=(((r02*x11209))+(((-1.0)*x11212*x11214))+((r01*x11215)));
evalcond[1]=(((r21*x11217))+(((-1.0)*x11213*x11216))+(((-1.0)*r22*x11214)));
evalcond[2]=((((-1.0)*r12*x11214))+((x11209*x11210))+(((-1.0)*x11211*x11216)));
evalcond[3]=((1.0)+(((-1.0)*x11212*x11216))+((r01*x11217))+(((-1.0)*r02*x11214)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11208*x11210))+((r12*x11209))+(((-1.0)*x11211*x11214)));
evalcond[5]=(((r21*x11215))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11209))+(((-1.0)*x11213*x11214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11218=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11218.valid){
continue;
}
CheckValue<IkReal> x11219 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11218.value)))+(x11219.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11220=IKcos(j4);
IkReal x11221=IKsin(j4);
IkReal x11222=(gconst4*r11);
IkReal x11223=(gconst5*r10);
IkReal x11224=(gconst5*r00);
IkReal x11225=(gconst5*r20);
IkReal x11226=((1.0)*x11220);
IkReal x11227=(gconst4*x11220);
IkReal x11228=((1.0)*x11221);
IkReal x11229=(gconst4*x11221);
evalcond[0]=(((r02*x11221))+((r01*x11227))+(((-1.0)*x11224*x11226)));
evalcond[1]=((((-1.0)*x11225*x11228))+((r21*x11229))+(((-1.0)*r22*x11226)));
evalcond[2]=(((x11221*x11222))+(((-1.0)*x11223*x11228))+(((-1.0)*r12*x11226)));
evalcond[3]=((1.0)+((r01*x11229))+(((-1.0)*x11224*x11228))+(((-1.0)*r02*x11226)));
evalcond[4]=(((cj2*sj1))+((r12*x11221))+((cj1*sj2))+((x11220*x11222))+(((-1.0)*x11223*x11226)));
evalcond[5]=(((r22*x11221))+(((-1.0)*x11225*x11226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11230=((-1.0)*r21);
CheckValue<IkReal> x11233 = IKatan2WithCheck(IkReal(x11230),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11233.valid){
continue;
}
IkReal x11231=((1.0)*(x11233.value));
IkReal x11232=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11231)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11231)));
IkReal gconst4=(x11230*x11232);
IkReal gconst5=((1.0)*r20*x11232);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11234=((-1.0)*r21);
CheckValue<IkReal> x11237 = IKatan2WithCheck(IkReal(x11234),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11237.valid){
continue;
}
IkReal x11235=((1.0)*(x11237.value));
IkReal x11236=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11235)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11235)));
IkReal gconst4=(x11234*x11236);
IkReal gconst5=((1.0)*r20*x11236);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11238=((-1.0)*r21);
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(x11238),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
IkReal x11239=((1.0)*(x11241.value));
IkReal x11240=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11239)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11239)));
IkReal gconst4=(x11238*x11240);
IkReal gconst5=((1.0)*r20*x11240);
IkReal x11242=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11246=IKPowWithIntegerCheck(x11242,-1);
if(!x11246.valid){
continue;
}
IkReal x11243=x11246.value;
IkReal x11244=((1.0)*x11243);
IkReal x11245=((((-2.0)*r00*r01*r20*r21*x11243))+(((-1.0)*(r02*r02)))+(((-1.0)*x11244*(r00*r00)*(r20*r20)))+(((-1.0)*x11244*(r01*r01)*(r21*r21))));
j4eval[0]=x11245;
j4eval[1]=IKsign(x11245);
j4eval[2]=r02;
j4eval[3]=x11242;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11247=(gconst4*r01);
IkReal x11248=(gconst5*r00);
CheckValue<IkReal> x11249=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11248*x11248)))+(((-1.0)*(x11247*x11247)))+(((2.0)*x11247*x11248)))),-1);
if(!x11249.valid){
continue;
}
CheckValue<IkReal> x11250 = IKatan2WithCheck(IkReal(((((-1.0)*x11248))+x11247)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11249.value)))+(x11250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11251=IKcos(j4);
IkReal x11252=IKsin(j4);
IkReal x11253=(gconst5*r10);
IkReal x11254=(gconst5*r00);
IkReal x11255=(gconst5*r20);
IkReal x11256=((1.0)*x11251);
IkReal x11257=(gconst4*x11252);
IkReal x11258=(gconst4*x11251);
IkReal x11259=((1.0)*x11252);
evalcond[0]=(((r02*x11252))+((r01*x11258))+(((-1.0)*x11254*x11256)));
evalcond[1]=(((r21*x11257))+(((-1.0)*r22*x11256))+(((-1.0)*x11255*x11259)));
evalcond[2]=(((r11*x11257))+(((-1.0)*x11253*x11259))+(((-1.0)*r12*x11256)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11256))+((r01*x11257))+(((-1.0)*x11254*x11259)));
evalcond[4]=(((r22*x11252))+((cj2*sj1))+((cj1*sj2))+((r21*x11258))+(((-1.0)*x11255*x11256)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x11258))+((r12*x11252))+(((-1.0)*x11253*x11256))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11260=((1.0)*gconst5);
CheckValue<IkReal> x11261=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11260))+(((-1.0)*gconst4*r20)))),-1);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11260))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11261.value)))+(x11262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=(gconst5*r10);
IkReal x11266=(gconst5*r00);
IkReal x11267=(gconst5*r20);
IkReal x11268=((1.0)*x11263);
IkReal x11269=(gconst4*x11264);
IkReal x11270=(gconst4*x11263);
IkReal x11271=((1.0)*x11264);
evalcond[0]=(((r01*x11270))+((r02*x11264))+(((-1.0)*x11266*x11268)));
evalcond[1]=(((r21*x11269))+(((-1.0)*r22*x11268))+(((-1.0)*x11267*x11271)));
evalcond[2]=((((-1.0)*x11265*x11271))+((r11*x11269))+(((-1.0)*r12*x11268)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11268))+(((-1.0)*x11266*x11271))+((r01*x11269)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11264))+((r21*x11270))+(((-1.0)*x11267*x11268)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11265*x11268))+((r11*x11270))+((r12*x11264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11272.valid){
continue;
}
CheckValue<IkReal> x11273 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11272.value)))+(x11273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11274=IKcos(j4);
IkReal x11275=IKsin(j4);
IkReal x11276=(gconst5*r10);
IkReal x11277=(gconst5*r00);
IkReal x11278=(gconst5*r20);
IkReal x11279=((1.0)*x11274);
IkReal x11280=(gconst4*x11275);
IkReal x11281=(gconst4*x11274);
IkReal x11282=((1.0)*x11275);
evalcond[0]=((((-1.0)*x11277*x11279))+((r02*x11275))+((r01*x11281)));
evalcond[1]=((((-1.0)*x11278*x11282))+((r21*x11280))+(((-1.0)*r22*x11279)));
evalcond[2]=((((-1.0)*x11276*x11282))+(((-1.0)*r12*x11279))+((r11*x11280)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11279))+((r01*x11280))+(((-1.0)*x11277*x11282)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11275))+((r21*x11281))+(((-1.0)*x11278*x11279)));
evalcond[5]=(((r12*x11275))+(((-1.0)*sj1*sj2))+(((-1.0)*x11276*x11279))+((cj1*cj2))+((r11*x11281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11283=((-1.0)*r21);
CheckValue<IkReal> x11286 = IKatan2WithCheck(IkReal(x11283),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11286.valid){
continue;
}
IkReal x11284=((1.0)*(x11286.value));
IkReal x11285=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11284)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11284)));
IkReal gconst4=(x11283*x11285);
IkReal gconst5=((1.0)*r20*x11285);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11287=((-1.0)*r21);
CheckValue<IkReal> x11290 = IKatan2WithCheck(IkReal(x11287),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11290.valid){
continue;
}
IkReal x11288=((1.0)*(x11290.value));
IkReal x11289=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11288)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11288)));
IkReal gconst4=(x11287*x11289);
IkReal gconst5=((1.0)*r20*x11289);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11291=((-1.0)*r21);
CheckValue<IkReal> x11294 = IKatan2WithCheck(IkReal(x11291),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11294.valid){
continue;
}
IkReal x11292=((1.0)*(x11294.value));
IkReal x11293=x10085;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11292)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11292)));
IkReal gconst4=(x11291*x11293);
IkReal gconst5=((1.0)*r20*x11293);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11295=(gconst5*r00);
IkReal x11296=(gconst4*r01);
CheckValue<IkReal> x11297=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11295*x11296))+(x11295*x11295)+(r02*r02)+(x11296*x11296))),-1);
if(!x11297.valid){
continue;
}
CheckValue<IkReal> x11298 = IKatan2WithCheck(IkReal((x11295+(((-1.0)*x11296)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11297.value)))+(x11298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11299=IKsin(j4);
IkReal x11300=IKcos(j4);
IkReal x11301=(gconst4*r11);
IkReal x11302=(gconst5*r10);
IkReal x11303=(gconst5*r00);
IkReal x11304=(gconst5*r20);
IkReal x11305=((1.0)*x11300);
IkReal x11306=(gconst4*x11299);
IkReal x11307=((1.0)*x11299);
evalcond[0]=((((-1.0)*x11304*x11307))+(((-1.0)*r22*x11305))+((r21*x11306)));
evalcond[1]=((((-1.0)*x11302*x11307))+((x11299*x11301))+(((-1.0)*r12*x11305)));
evalcond[2]=((((-1.0)*gconst4*r01*x11305))+(((-1.0)*r02*x11307))+((x11300*x11303)));
evalcond[3]=((1.0)+((r01*x11306))+(((-1.0)*x11303*x11307))+(((-1.0)*r02*x11305)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11305))+((x11300*x11304))+(((-1.0)*r22*x11307)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x11300*x11302))+(((-1.0)*x11301*x11305))+((cj1*cj2))+(((-1.0)*r12*x11307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11308=((1.0)*gconst5);
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11308))+(((-1.0)*gconst4*r20)))),-1);
if(!x11310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11309.value)+(((1.5707963267949)*(x11310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11311=IKsin(j4);
IkReal x11312=IKcos(j4);
IkReal x11313=(gconst4*r11);
IkReal x11314=(gconst5*r10);
IkReal x11315=(gconst5*r00);
IkReal x11316=(gconst5*r20);
IkReal x11317=((1.0)*x11312);
IkReal x11318=(gconst4*x11311);
IkReal x11319=((1.0)*x11311);
evalcond[0]=((((-1.0)*r22*x11317))+((r21*x11318))+(((-1.0)*x11316*x11319)));
evalcond[1]=(((x11311*x11313))+(((-1.0)*r12*x11317))+(((-1.0)*x11314*x11319)));
evalcond[2]=((((-1.0)*r02*x11319))+(((-1.0)*gconst4*r01*x11317))+((x11312*x11315)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11317))+(((-1.0)*x11315*x11319))+((r01*x11318)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11319))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11317))+((x11312*x11316)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11313*x11317))+(((-1.0)*r12*x11319))+((cj1*cj2))+((x11312*x11314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11320=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11320.valid){
continue;
}
CheckValue<IkReal> x11321 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11320.value)))+(x11321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11322=IKsin(j4);
IkReal x11323=IKcos(j4);
IkReal x11324=(gconst4*r11);
IkReal x11325=(gconst5*r10);
IkReal x11326=(gconst5*r00);
IkReal x11327=(gconst5*r20);
IkReal x11328=((1.0)*x11323);
IkReal x11329=(gconst4*x11322);
IkReal x11330=((1.0)*x11322);
evalcond[0]=((((-1.0)*r22*x11328))+((r21*x11329))+(((-1.0)*x11327*x11330)));
evalcond[1]=((((-1.0)*x11325*x11330))+(((-1.0)*r12*x11328))+((x11322*x11324)));
evalcond[2]=((((-1.0)*gconst4*r01*x11328))+((x11323*x11326))+(((-1.0)*r02*x11330)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11328))+((r01*x11329))+(((-1.0)*x11326*x11330)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11330))+((x11323*x11327))+(((-1.0)*gconst4*r21*x11328)));
evalcond[5]=((((-1.0)*r12*x11330))+(((-1.0)*sj1*sj2))+((x11323*x11325))+((cj1*cj2))+(((-1.0)*x11324*x11328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11331=((-1.0)*r21);
IkReal x11332=((-1.0)*r20);
CheckValue<IkReal> x11334 = IKatan2WithCheck(IkReal(x11331),IkReal(x11332),IKFAST_ATAN2_MAGTHRESH);
if(!x11334.valid){
continue;
}
IkReal x11333=((1.0)*(x11334.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11333)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11332);
rxp0_2=(py*r00);
rxp1_0=(py*x11331);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11333)));
IkReal gconst4=x11331;
IkReal gconst5=((1.0)*r20);
IkReal x11335=((1.0)*r01*r21);
IkReal x11336=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11335))+(((-1.0)*x11336)));
j4eval[1]=((((-1.0)*cj3*x11336))+(((-1.0)*cj3*x11335)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11337=((-1.0)*r21);
IkReal x11338=((-1.0)*r20);
CheckValue<IkReal> x11340 = IKatan2WithCheck(IkReal(x11337),IkReal(x11338),IKFAST_ATAN2_MAGTHRESH);
if(!x11340.valid){
continue;
}
IkReal x11339=((1.0)*(x11340.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11339)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11338);
rxp0_2=(py*r00);
rxp1_0=(py*x11337);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11339)));
IkReal gconst4=x11337;
IkReal gconst5=((1.0)*r20);
IkReal x11341=((1.0)*r01*r21);
IkReal x11342=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11341))+(((-1.0)*x11342)));
j4eval[1]=(((sj3*x11342))+((sj3*x11341)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11343=((-1.0)*r21);
IkReal x11344=((-1.0)*r20);
CheckValue<IkReal> x11346 = IKatan2WithCheck(IkReal(x11343),IkReal(x11344),IKFAST_ATAN2_MAGTHRESH);
if(!x11346.valid){
continue;
}
IkReal x11345=((1.0)*(x11346.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11345)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11344);
rxp0_2=(py*r00);
rxp1_0=(py*x11343);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11345)));
IkReal gconst4=x11343;
IkReal gconst5=((1.0)*r20);
IkReal x11347=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11347))+(((-1.0)*r00*r20*x11347)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11348=((1.0)*gconst5);
CheckValue<IkReal> x11349=IKPowWithIntegerCheck(cj3,-1);
if(!x11349.valid){
continue;
}
CheckValue<IkReal> x11350=IKPowWithIntegerCheck(r12,-1);
if(!x11350.valid){
continue;
}
CheckValue<IkReal> x11351=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11348))+((cj3*gconst4*r01))),-1);
if(!x11351.valid){
continue;
}
if( IKabs(((x11349.value)*(x11350.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11351.value)*(((((-1.0)*r01*sj3*x11348))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11349.value)*(x11350.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11351.value)*(((((-1.0)*r01*sj3*x11348))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x11349.value)*(x11350.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11351.value)*(((((-1.0)*r01*sj3*x11348))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11352=IKsin(j4);
IkReal x11353=IKcos(j4);
IkReal x11354=(cj2*sj1);
IkReal x11355=(cj1*sj2);
IkReal x11356=(sj1*sj2);
IkReal x11357=(gconst5*sj3);
IkReal x11358=(gconst5*r00);
IkReal x11359=(cj3*gconst5);
IkReal x11360=(gconst4*sj3);
IkReal x11361=(cj3*gconst4);
IkReal x11362=(cj1*cj2);
IkReal x11363=((1.0)*x11352);
IkReal x11364=(gconst4*x11352);
IkReal x11365=((1.0)*x11353);
IkReal x11366=(x11355+x11354);
IkReal x11367=(x11353*x11357);
IkReal x11368=(x11353*x11361);
evalcond[0]=((-1.0)*r12*x11353);
evalcond[1]=(((r21*x11364))+(((-1.0)*gconst5*r20*x11363)));
evalcond[2]=(x11362+(((-1.0)*x11356))+((cj3*r12*x11352)));
evalcond[3]=((((-1.0)*r12*sj3*x11363))+x11366);
evalcond[4]=((1.0)+((r01*x11364))+(((-1.0)*x11358*x11363)));
evalcond[5]=(((r01*x11368))+((r00*x11360))+((r01*x11357))+(((-1.0)*cj3*x11358*x11365)));
evalcond[6]=(((r00*x11361))+((r00*x11367))+(((-1.0)*r01*x11360*x11365))+((r01*x11359)));
evalcond[7]=(((r21*x11368))+x11366+((r21*x11357))+(((-1.0)*r20*x11359*x11365))+((r20*x11360)));
evalcond[8]=((((-1.0)*x11362))+x11356+((r21*x11359))+(((-1.0)*r21*x11360*x11365))+((r20*x11361))+((r20*x11367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11369=((1.0)*gconst4);
IkReal x11370=(gconst5*r00);
CheckValue<IkReal> x11371=IKPowWithIntegerCheck(((((-1.0)*x11370))+((gconst4*r01))),-1);
if(!x11371.valid){
continue;
}
CheckValue<IkReal> x11372=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11369))+((sj3*x11370))),-1);
if(!x11372.valid){
continue;
}
if( IKabs(((-1.0)*(x11371.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11372.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11369)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11371.value)))+IKsqr(((x11372.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11369))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x11371.value)), ((x11372.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11369))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11373=IKsin(j4);
IkReal x11374=IKcos(j4);
IkReal x11375=(cj2*sj1);
IkReal x11376=(cj1*sj2);
IkReal x11377=(sj1*sj2);
IkReal x11378=(gconst5*sj3);
IkReal x11379=(gconst5*r00);
IkReal x11380=(cj3*gconst5);
IkReal x11381=(gconst4*sj3);
IkReal x11382=(cj3*gconst4);
IkReal x11383=(cj1*cj2);
IkReal x11384=((1.0)*x11373);
IkReal x11385=(gconst4*x11373);
IkReal x11386=((1.0)*x11374);
IkReal x11387=(x11376+x11375);
IkReal x11388=(x11374*x11378);
IkReal x11389=(x11374*x11382);
evalcond[0]=((-1.0)*r12*x11374);
evalcond[1]=((((-1.0)*gconst5*r20*x11384))+((r21*x11385)));
evalcond[2]=((((-1.0)*x11377))+x11383+((cj3*r12*x11373)));
evalcond[3]=((((-1.0)*r12*sj3*x11384))+x11387);
evalcond[4]=((1.0)+(((-1.0)*x11379*x11384))+((r01*x11385)));
evalcond[5]=(((r01*x11378))+(((-1.0)*cj3*x11379*x11386))+((r01*x11389))+((r00*x11381)));
evalcond[6]=((((-1.0)*r01*x11381*x11386))+((r01*x11380))+((r00*x11388))+((r00*x11382)));
evalcond[7]=(((r21*x11378))+((r20*x11381))+x11387+(((-1.0)*r20*x11380*x11386))+((r21*x11389)));
evalcond[8]=(((r20*x11382))+((r20*x11388))+x11377+((r21*x11380))+(((-1.0)*r21*x11381*x11386))+(((-1.0)*x11383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11390=((1.0)*gconst5);
IkReal x11391=(gconst4*r01);
CheckValue<IkReal> x11392=IKPowWithIntegerCheck((x11391+(((-1.0)*r00*x11390))),-1);
if(!x11392.valid){
continue;
}
CheckValue<IkReal> x11393=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11390))+((cj3*x11391))),-1);
if(!x11393.valid){
continue;
}
if( IKabs(((-1.0)*(x11392.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11393.value)*(((((-1.0)*r01*sj3*x11390))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11392.value)))+IKsqr(((x11393.value)*(((((-1.0)*r01*sj3*x11390))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x11392.value)), ((x11393.value)*(((((-1.0)*r01*sj3*x11390))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11394=IKsin(j4);
IkReal x11395=IKcos(j4);
IkReal x11396=(cj2*sj1);
IkReal x11397=(cj1*sj2);
IkReal x11398=(sj1*sj2);
IkReal x11399=(gconst5*sj3);
IkReal x11400=(gconst5*r00);
IkReal x11401=(cj3*gconst5);
IkReal x11402=(gconst4*sj3);
IkReal x11403=(cj3*gconst4);
IkReal x11404=(cj1*cj2);
IkReal x11405=((1.0)*x11394);
IkReal x11406=(gconst4*x11394);
IkReal x11407=((1.0)*x11395);
IkReal x11408=(x11397+x11396);
IkReal x11409=(x11395*x11399);
IkReal x11410=(x11395*x11403);
evalcond[0]=((-1.0)*r12*x11395);
evalcond[1]=(((r21*x11406))+(((-1.0)*gconst5*r20*x11405)));
evalcond[2]=(x11404+((cj3*r12*x11394))+(((-1.0)*x11398)));
evalcond[3]=(x11408+(((-1.0)*r12*sj3*x11405)));
evalcond[4]=((1.0)+(((-1.0)*x11400*x11405))+((r01*x11406)));
evalcond[5]=(((r01*x11410))+((r01*x11399))+(((-1.0)*cj3*x11400*x11407))+((r00*x11402)));
evalcond[6]=((((-1.0)*r01*x11402*x11407))+((r01*x11401))+((r00*x11409))+((r00*x11403)));
evalcond[7]=(x11408+((r21*x11410))+((r20*x11402))+(((-1.0)*r20*x11401*x11407))+((r21*x11399)));
evalcond[8]=(((r21*x11401))+x11398+((r20*x11403))+((r20*x11409))+(((-1.0)*r21*x11402*x11407))+(((-1.0)*x11404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11411=gconst4*gconst4;
IkReal x11412=gconst5*gconst5;
IkReal x11413=(r01*r20);
IkReal x11414=(gconst4*sj3);
IkReal x11415=(r01*r21);
IkReal x11416=((1.0)*cj3);
IkReal x11417=(r00*r21);
IkReal x11418=(r00*r20);
IkReal x11419=(cj3*gconst4*gconst5);
IkReal x11420=((1.0)*x11412);
CheckValue<IkReal> x11421 = IKatan2WithCheck(IkReal((((r00*r22*x11414))+((gconst5*r01*r22*sj3)))),IkReal((((sj3*x11411*x11417))+(((-1.0)*gconst5*x11414*x11418))+((gconst5*x11414*x11415))+(((-1.0)*sj3*x11413*x11420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11421.valid){
continue;
}
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11416))+((x11417*x11419))+(((-1.0)*x11412*x11416*x11418))+(((-1.0)*x11411*x11415*x11416))+((x11413*x11419)))),-1);
if(!x11422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11421.value)+(((1.5707963267949)*(x11422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11423=IKsin(j4);
IkReal x11424=IKcos(j4);
IkReal x11425=(cj2*sj1);
IkReal x11426=(cj1*sj2);
IkReal x11427=(gconst5*sj3);
IkReal x11428=(gconst4*r11);
IkReal x11429=(sj1*sj2);
IkReal x11430=(gconst5*r10);
IkReal x11431=(cj1*cj2);
IkReal x11432=(gconst4*r01);
IkReal x11433=(gconst5*r00);
IkReal x11434=(gconst4*sj3);
IkReal x11435=(cj3*gconst5);
IkReal x11436=(cj3*gconst4);
IkReal x11437=(gconst4*r21);
IkReal x11438=((1.0)*x11424);
IkReal x11439=((1.0)*x11423);
IkReal x11440=(cj3*x11423);
IkReal x11441=(cj3*x11424);
IkReal x11442=(x11426+x11425);
evalcond[0]=(((x11423*x11437))+(((-1.0)*gconst5*r20*x11439))+(((-1.0)*r22*x11438)));
evalcond[1]=(((x11423*x11428))+(((-1.0)*r12*x11438))+(((-1.0)*x11430*x11439)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11438))+((x11423*x11432))+(((-1.0)*x11433*x11439)));
evalcond[3]=(((x11432*x11441))+(((-1.0)*cj3*x11433*x11438))+((r01*x11427))+((r00*x11434))+((r02*x11440)));
evalcond[4]=(((r00*x11424*x11427))+(((-1.0)*sj3*x11432*x11438))+((r01*x11435))+((r00*x11436))+(((-1.0)*r02*sj3*x11439)));
evalcond[5]=(((r20*x11434))+x11442+((r22*x11440))+((r21*x11427))+((r21*x11424*x11436))+(((-1.0)*r20*x11435*x11438)));
evalcond[6]=(((r12*x11440))+x11431+((r10*x11434))+(((-1.0)*cj3*x11430*x11438))+(((-1.0)*x11429))+((r11*x11427))+((x11428*x11441)));
evalcond[7]=((((-1.0)*sj3*x11428*x11438))+x11442+((r10*x11436))+(((-1.0)*r12*sj3*x11439))+((r11*x11435))+((r10*x11424*x11427)));
evalcond[8]=(((r20*x11424*x11427))+((r20*x11436))+x11429+((r21*x11435))+(((-1.0)*x11431))+(((-1.0)*r21*x11434*x11438))+(((-1.0)*r22*sj3*x11439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11443=((1.0)*gconst5);
CheckValue<IkReal> x11444=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11443))+(((-1.0)*gconst4*r20)))),-1);
if(!x11444.valid){
continue;
}
CheckValue<IkReal> x11445 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11443)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11444.value)))+(x11445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11446=IKsin(j4);
IkReal x11447=IKcos(j4);
IkReal x11448=(cj2*sj1);
IkReal x11449=(cj1*sj2);
IkReal x11450=(gconst5*sj3);
IkReal x11451=(gconst4*r11);
IkReal x11452=(sj1*sj2);
IkReal x11453=(gconst5*r10);
IkReal x11454=(cj1*cj2);
IkReal x11455=(gconst4*r01);
IkReal x11456=(gconst5*r00);
IkReal x11457=(gconst4*sj3);
IkReal x11458=(cj3*gconst5);
IkReal x11459=(cj3*gconst4);
IkReal x11460=(gconst4*r21);
IkReal x11461=((1.0)*x11447);
IkReal x11462=((1.0)*x11446);
IkReal x11463=(cj3*x11446);
IkReal x11464=(cj3*x11447);
IkReal x11465=(x11449+x11448);
evalcond[0]=(((x11446*x11460))+(((-1.0)*gconst5*r20*x11462))+(((-1.0)*r22*x11461)));
evalcond[1]=((((-1.0)*r12*x11461))+(((-1.0)*x11453*x11462))+((x11446*x11451)));
evalcond[2]=((1.0)+((x11446*x11455))+(((-1.0)*r02*x11461))+(((-1.0)*x11456*x11462)));
evalcond[3]=((((-1.0)*cj3*x11456*x11461))+((r01*x11450))+((r00*x11457))+((x11455*x11464))+((r02*x11463)));
evalcond[4]=((((-1.0)*sj3*x11455*x11461))+(((-1.0)*r02*sj3*x11462))+((r00*x11447*x11450))+((r01*x11458))+((r00*x11459)));
evalcond[5]=(x11465+((r20*x11457))+((r22*x11463))+((r21*x11447*x11459))+((r21*x11450))+(((-1.0)*r20*x11458*x11461)));
evalcond[6]=(((r10*x11457))+((r12*x11463))+x11454+((x11451*x11464))+(((-1.0)*x11452))+((r11*x11450))+(((-1.0)*cj3*x11453*x11461)));
evalcond[7]=(((r10*x11459))+x11465+((r10*x11447*x11450))+(((-1.0)*r12*sj3*x11462))+(((-1.0)*sj3*x11451*x11461))+((r11*x11458)));
evalcond[8]=(x11452+(((-1.0)*r21*x11457*x11461))+((r20*x11459))+((r20*x11447*x11450))+((r21*x11458))+(((-1.0)*r22*sj3*x11462))+(((-1.0)*x11454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11466=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11466.valid){
continue;
}
CheckValue<IkReal> x11467 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11466.value)))+(x11467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11468=IKsin(j4);
IkReal x11469=IKcos(j4);
IkReal x11470=(cj2*sj1);
IkReal x11471=(cj1*sj2);
IkReal x11472=(gconst5*sj3);
IkReal x11473=(gconst4*r11);
IkReal x11474=(sj1*sj2);
IkReal x11475=(gconst5*r10);
IkReal x11476=(cj1*cj2);
IkReal x11477=(gconst4*r01);
IkReal x11478=(gconst5*r00);
IkReal x11479=(gconst4*sj3);
IkReal x11480=(cj3*gconst5);
IkReal x11481=(cj3*gconst4);
IkReal x11482=(gconst4*r21);
IkReal x11483=((1.0)*x11469);
IkReal x11484=((1.0)*x11468);
IkReal x11485=(cj3*x11468);
IkReal x11486=(cj3*x11469);
IkReal x11487=(x11470+x11471);
evalcond[0]=((((-1.0)*r22*x11483))+((x11468*x11482))+(((-1.0)*gconst5*r20*x11484)));
evalcond[1]=(((x11468*x11473))+(((-1.0)*r12*x11483))+(((-1.0)*x11475*x11484)));
evalcond[2]=((1.0)+((x11468*x11477))+(((-1.0)*r02*x11483))+(((-1.0)*x11478*x11484)));
evalcond[3]=(((r00*x11479))+(((-1.0)*cj3*x11478*x11483))+((x11477*x11486))+((r02*x11485))+((r01*x11472)));
evalcond[4]=((((-1.0)*r02*sj3*x11484))+((r00*x11469*x11472))+((r00*x11481))+((r01*x11480))+(((-1.0)*sj3*x11477*x11483)));
evalcond[5]=(x11487+((r22*x11485))+(((-1.0)*r20*x11480*x11483))+((r20*x11479))+((r21*x11472))+((r21*x11469*x11481)));
evalcond[6]=((((-1.0)*x11474))+x11476+((r11*x11472))+((r10*x11479))+((r12*x11485))+(((-1.0)*cj3*x11475*x11483))+((x11473*x11486)));
evalcond[7]=(x11487+((r10*x11469*x11472))+((r11*x11480))+((r10*x11481))+(((-1.0)*r12*sj3*x11484))+(((-1.0)*sj3*x11473*x11483)));
evalcond[8]=((((-1.0)*x11476))+((r20*x11481))+x11474+(((-1.0)*r22*sj3*x11484))+(((-1.0)*r21*x11479*x11483))+((r20*x11469*x11472))+((r21*x11480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11488=((-1.0)*r21);
IkReal x11489=((-1.0)*px);
CheckValue<IkReal> x11491 = IKatan2WithCheck(IkReal(x11488),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11491.valid){
continue;
}
IkReal x11490=((1.0)*(x11491.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11490)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11489);
rxp1_1=(px*r21);
rxp1_2=(r11*x11489);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11490)));
IkReal gconst4=x11488;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11492=((-1.0)*r21);
IkReal x11493=((-1.0)*px);
CheckValue<IkReal> x11495 = IKatan2WithCheck(IkReal(x11492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11495.valid){
continue;
}
IkReal x11494=((1.0)*(x11495.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11494)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11493);
rxp1_1=(px*r21);
rxp1_2=(r11*x11493);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11494)));
IkReal gconst4=x11492;
IkReal gconst5=((1.0)*r20);
IkReal x11496=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11496))+((x11496*(r10*r10)))+(((-1.0)*x11496*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11497=((-1.0)*r21);
IkReal x11498=((-1.0)*px);
CheckValue<IkReal> x11500 = IKatan2WithCheck(IkReal(x11497),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11500.valid){
continue;
}
IkReal x11499=((1.0)*(x11500.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11499)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11498);
rxp1_1=(px*r21);
rxp1_2=(r11*x11498);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11499)));
IkReal gconst4=x11497;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11501=((-1.0)*r21);
IkReal x11502=((-1.0)*px);
CheckValue<IkReal> x11504 = IKatan2WithCheck(IkReal(x11501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11504.valid){
continue;
}
IkReal x11503=((1.0)*(x11504.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11503)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11502);
rxp1_1=(px*r21);
rxp1_2=(r11*x11502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11503)));
IkReal gconst4=x11501;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11505=((-1.0)*r21);
IkReal x11506=((-1.0)*px);
CheckValue<IkReal> x11508 = IKatan2WithCheck(IkReal(x11505),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11508.valid){
continue;
}
IkReal x11507=((1.0)*(x11508.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11507)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11506);
rxp1_1=(px*r21);
rxp1_2=(r11*x11506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11507)));
IkReal gconst4=x11505;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11509=((-1.0)*r21);
IkReal x11510=((-1.0)*px);
CheckValue<IkReal> x11512 = IKatan2WithCheck(IkReal(x11509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11512.valid){
continue;
}
IkReal x11511=((1.0)*(x11512.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11511)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11510);
rxp1_1=(px*r21);
rxp1_2=(r11*x11510);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11511)));
IkReal gconst4=x11509;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11515=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11515.valid){
continue;
}
IkReal x11513=x11515.value;
IkReal x11514=(sj0*x11513);
cj4array[0]=(((cj2*sj1*x11514))+((cj1*sj2*x11514)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11516=IKsin(j4);
IkReal x11517=IKcos(j4);
IkReal x11518=(gconst5*r20);
IkReal x11519=(gconst4*x11516);
IkReal x11520=((1.0)*x11517);
IkReal x11521=((1.0)*x11516);
evalcond[0]=((-1.0)*r02*x11516);
evalcond[1]=((((-1.0)*r02*x11520))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x11518*x11521))+((r21*x11519)));
evalcond[3]=(((r11*x11519))+(((-1.0)*gconst5*r10*x11521)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11520))+((x11517*x11518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11523=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11523.valid){
continue;
}
IkReal x11522=x11523.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11522))+((cj1*cj2*x11522)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11524=IKsin(j4);
IkReal x11525=IKcos(j4);
IkReal x11526=(gconst5*r10);
IkReal x11527=((1.0)*sj0);
IkReal x11528=(gconst4*x11524);
IkReal x11529=((1.0)*x11525);
IkReal x11530=((1.0)*x11524);
evalcond[0]=((-1.0)*r02*x11524);
evalcond[1]=((((-1.0)*r02*x11529))+(((-1.0)*x11527)));
evalcond[2]=((((-1.0)*gconst5*r20*x11530))+((r21*x11528)));
evalcond[3]=(((r11*x11528))+(((-1.0)*x11526*x11530)));
evalcond[4]=((((-1.0)*cj2*sj1*x11527))+((x11525*x11526))+(((-1.0)*cj1*sj2*x11527))+(((-1.0)*gconst4*r11*x11529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11531=IKPowWithIntegerCheck(r02,-1);
if(!x11531.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11531.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11532=IKsin(j4);
IkReal x11533=IKcos(j4);
IkReal x11534=((1.0)*sj0);
IkReal x11535=(gconst5*x11533);
IkReal x11536=(gconst4*x11532);
IkReal x11537=((1.0)*gconst4*x11533);
IkReal x11538=((1.0)*gconst5*x11532);
evalcond[0]=((-1.0)*r02*x11532);
evalcond[1]=(((r21*x11536))+(((-1.0)*r20*x11538)));
evalcond[2]=((((-1.0)*r10*x11538))+((r11*x11536)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11535))+(((-1.0)*r21*x11537)));
evalcond[4]=((((-1.0)*cj2*sj1*x11534))+(((-1.0)*r11*x11537))+(((-1.0)*cj1*sj2*x11534))+((r10*x11535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11539=((-1.0)*r21);
IkReal x11540=((-1.0)*px);
CheckValue<IkReal> x11542 = IKatan2WithCheck(IkReal(x11539),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11542.valid){
continue;
}
IkReal x11541=((1.0)*(x11542.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11541)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11540);
rxp1_1=(px*r21);
rxp1_2=(r11*x11540);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11541)));
IkReal gconst4=x11539;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11543=((-1.0)*r21);
IkReal x11544=((-1.0)*px);
CheckValue<IkReal> x11546 = IKatan2WithCheck(IkReal(x11543),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11546.valid){
continue;
}
IkReal x11545=((1.0)*(x11546.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11545)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11544);
rxp1_1=(px*r21);
rxp1_2=(r11*x11544);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11545)));
IkReal gconst4=x11543;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11547=((-1.0)*r21);
IkReal x11548=((-1.0)*px);
CheckValue<IkReal> x11550 = IKatan2WithCheck(IkReal(x11547),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11550.valid){
continue;
}
IkReal x11549=((1.0)*(x11550.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11549)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11548);
rxp1_1=(px*r21);
rxp1_2=(r11*x11548);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11549)));
IkReal gconst4=x11547;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11553=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11553.valid){
continue;
}
IkReal x11551=x11553.value;
IkReal x11552=(sj0*x11551);
cj4array[0]=(((cj2*sj1*x11552))+((cj1*sj2*x11552)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11554=IKsin(j4);
IkReal x11555=IKcos(j4);
IkReal x11556=(gconst5*r20);
IkReal x11557=(gconst4*x11554);
IkReal x11558=((1.0)*x11555);
IkReal x11559=((1.0)*x11554);
evalcond[0]=(r02*x11554);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11558)));
evalcond[2]=(((r21*x11557))+(((-1.0)*x11556*x11559)));
evalcond[3]=(((r11*x11557))+(((-1.0)*gconst5*r10*x11559)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst4*r21*x11555))+(((-1.0)*x11556*x11558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11561=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11561.valid){
continue;
}
IkReal x11560=x11561.value;
cj4array[0]=(((cj1*cj2*x11560))+(((-1.0)*sj1*sj2*x11560)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11562=IKsin(j4);
IkReal x11563=IKcos(j4);
IkReal x11564=(gconst4*r11);
IkReal x11565=((1.0)*sj0);
IkReal x11566=(gconst5*r10);
IkReal x11567=((1.0)*x11563);
IkReal x11568=((1.0)*x11562);
evalcond[0]=(r02*x11562);
evalcond[1]=((((-1.0)*x11565))+(((-1.0)*r02*x11567)));
evalcond[2]=(((gconst4*r21*x11562))+(((-1.0)*gconst5*r20*x11568)));
evalcond[3]=((((-1.0)*x11566*x11568))+((x11562*x11564)));
evalcond[4]=((((-1.0)*x11566*x11567))+((x11563*x11564))+(((-1.0)*cj2*sj1*x11565))+(((-1.0)*cj1*sj2*x11565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11569=IKPowWithIntegerCheck(r02,-1);
if(!x11569.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11569.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11570=IKsin(j4);
IkReal x11571=IKcos(j4);
IkReal x11572=(gconst4*r11);
IkReal x11573=((1.0)*cj1);
IkReal x11574=(gconst4*r21);
IkReal x11575=((1.0)*gconst5*x11571);
IkReal x11576=((1.0)*gconst5*x11570);
evalcond[0]=(r02*x11570);
evalcond[1]=(((x11570*x11574))+(((-1.0)*r20*x11576)));
evalcond[2]=(((x11570*x11572))+(((-1.0)*r10*x11576)));
evalcond[3]=(((x11571*x11574))+((sj1*sj2))+(((-1.0)*cj2*x11573))+(((-1.0)*r20*x11575)));
evalcond[4]=(((x11571*x11572))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11573))+(((-1.0)*r10*x11575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11578=IKPowWithIntegerCheck(r02,-1);
if(!x11578.valid){
continue;
}
IkReal x11577=x11578.value;
CheckValue<IkReal> x11579=IKPowWithIntegerCheck(cj3,-1);
if(!x11579.valid){
continue;
}
if( IKabs((x11577*(x11579.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11577)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11577*(x11579.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11577))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x11577*(x11579.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11577));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11580=IKsin(j4);
IkReal x11581=IKcos(j4);
IkReal x11582=(gconst5*sj3);
IkReal x11583=(gconst4*r11);
IkReal x11584=(sj1*sj2);
IkReal x11585=((1.0)*gconst5);
IkReal x11586=(cj2*sj1);
IkReal x11587=((1.0)*sj0);
IkReal x11588=((1.0)*cj0);
IkReal x11589=(gconst4*r21);
IkReal x11590=(cj1*sj2);
IkReal x11591=(cj3*gconst4);
IkReal x11592=(gconst4*sj3);
IkReal x11593=(cj3*gconst5);
IkReal x11594=(r20*x11581);
IkReal x11595=((1.0)*cj1*cj2);
IkReal x11596=(r10*x11581);
IkReal x11597=(cj3*x11581);
IkReal x11598=(r02*x11580);
IkReal x11599=((1.0)*sj3*x11581);
evalcond[0]=((((-1.0)*x11587))+(((-1.0)*r02*x11581)));
evalcond[1]=(((x11580*x11589))+(((-1.0)*r20*x11580*x11585)));
evalcond[2]=(cj0+((x11580*x11583))+(((-1.0)*r10*x11580*x11585)));
evalcond[3]=(((cj0*x11584))+(((-1.0)*cj1*cj2*x11588))+((cj3*x11598)));
evalcond[4]=((((-1.0)*sj3*x11598))+(((-1.0)*x11588*x11590))+(((-1.0)*x11586*x11588)));
evalcond[5]=(((x11589*x11597))+x11586+x11590+((r20*x11592))+(((-1.0)*cj3*x11585*x11594))+((r21*x11582)));
evalcond[6]=(x11584+((r20*x11591))+((x11582*x11594))+(((-1.0)*x11595))+((r21*x11593))+(((-1.0)*x11589*x11599)));
evalcond[7]=(((sj0*x11584))+(((-1.0)*cj1*cj2*x11587))+((r10*x11592))+((x11583*x11597))+(((-1.0)*cj3*x11585*x11596))+((r11*x11582)));
evalcond[8]=(((r10*x11591))+((x11582*x11596))+(((-1.0)*x11586*x11587))+(((-1.0)*x11587*x11590))+((r11*x11593))+(((-1.0)*x11583*x11599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11600=((1.0)*gconst5);
CheckValue<IkReal> x11601=IKPowWithIntegerCheck(((((-1.0)*r10*x11600))+((gconst4*r11))),-1);
if(!x11601.valid){
continue;
}
CheckValue<IkReal> x11602=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11600))+((cj3*gconst4*r21))),-1);
if(!x11602.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11601.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11602.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11600))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11601.value)))+IKsqr(((x11602.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11600))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11601.value)), ((x11602.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11600))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11603=IKsin(j4);
IkReal x11604=IKcos(j4);
IkReal x11605=(gconst5*sj3);
IkReal x11606=(gconst4*r11);
IkReal x11607=(sj1*sj2);
IkReal x11608=((1.0)*gconst5);
IkReal x11609=(cj2*sj1);
IkReal x11610=((1.0)*sj0);
IkReal x11611=((1.0)*cj0);
IkReal x11612=(gconst4*r21);
IkReal x11613=(cj1*sj2);
IkReal x11614=(cj3*gconst4);
IkReal x11615=(gconst4*sj3);
IkReal x11616=(cj3*gconst5);
IkReal x11617=(r20*x11604);
IkReal x11618=((1.0)*cj1*cj2);
IkReal x11619=(r10*x11604);
IkReal x11620=(cj3*x11604);
IkReal x11621=(r02*x11603);
IkReal x11622=((1.0)*sj3*x11604);
evalcond[0]=((((-1.0)*x11610))+(((-1.0)*r02*x11604)));
evalcond[1]=((((-1.0)*r20*x11603*x11608))+((x11603*x11612)));
evalcond[2]=(cj0+((x11603*x11606))+(((-1.0)*r10*x11603*x11608)));
evalcond[3]=((((-1.0)*cj1*cj2*x11611))+((cj3*x11621))+((cj0*x11607)));
evalcond[4]=((((-1.0)*sj3*x11621))+(((-1.0)*x11609*x11611))+(((-1.0)*x11611*x11613)));
evalcond[5]=(x11613+x11609+((x11612*x11620))+((r21*x11605))+(((-1.0)*cj3*x11608*x11617))+((r20*x11615)));
evalcond[6]=(x11607+(((-1.0)*x11618))+((r21*x11616))+((x11605*x11617))+(((-1.0)*x11612*x11622))+((r20*x11614)));
evalcond[7]=((((-1.0)*cj1*cj2*x11610))+((sj0*x11607))+((x11606*x11620))+(((-1.0)*cj3*x11608*x11619))+((r11*x11605))+((r10*x11615)));
evalcond[8]=(((r11*x11616))+(((-1.0)*x11609*x11610))+(((-1.0)*x11610*x11613))+((x11605*x11619))+(((-1.0)*x11606*x11622))+((r10*x11614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11623=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11623.valid){
continue;
}
CheckValue<IkReal> x11624=IKPowWithIntegerCheck(r02,-1);
if(!x11624.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11623.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11624.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11623.value)))+IKsqr(((-1.0)*sj0*(x11624.value)))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11623.value)), ((-1.0)*sj0*(x11624.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11625=IKsin(j4);
IkReal x11626=IKcos(j4);
IkReal x11627=(gconst5*sj3);
IkReal x11628=(gconst4*r11);
IkReal x11629=(sj1*sj2);
IkReal x11630=((1.0)*gconst5);
IkReal x11631=(cj2*sj1);
IkReal x11632=((1.0)*sj0);
IkReal x11633=((1.0)*cj0);
IkReal x11634=(gconst4*r21);
IkReal x11635=(cj1*sj2);
IkReal x11636=(cj3*gconst4);
IkReal x11637=(gconst4*sj3);
IkReal x11638=(cj3*gconst5);
IkReal x11639=(r20*x11626);
IkReal x11640=((1.0)*cj1*cj2);
IkReal x11641=(r10*x11626);
IkReal x11642=(cj3*x11626);
IkReal x11643=(r02*x11625);
IkReal x11644=((1.0)*sj3*x11626);
evalcond[0]=((((-1.0)*x11632))+(((-1.0)*r02*x11626)));
evalcond[1]=((((-1.0)*r20*x11625*x11630))+((x11625*x11634)));
evalcond[2]=(((x11625*x11628))+cj0+(((-1.0)*r10*x11625*x11630)));
evalcond[3]=(((cj3*x11643))+(((-1.0)*cj1*cj2*x11633))+((cj0*x11629)));
evalcond[4]=((((-1.0)*sj3*x11643))+(((-1.0)*x11631*x11633))+(((-1.0)*x11633*x11635)));
evalcond[5]=(((x11634*x11642))+x11635+x11631+((r21*x11627))+(((-1.0)*cj3*x11630*x11639))+((r20*x11637)));
evalcond[6]=(x11629+((r21*x11638))+((x11627*x11639))+(((-1.0)*x11634*x11644))+((r20*x11636))+(((-1.0)*x11640)));
evalcond[7]=(((r10*x11637))+((r11*x11627))+(((-1.0)*cj1*cj2*x11632))+((sj0*x11629))+(((-1.0)*cj3*x11630*x11641))+((x11628*x11642)));
evalcond[8]=(((r11*x11638))+((r10*x11636))+(((-1.0)*x11631*x11632))+(((-1.0)*x11628*x11644))+((x11627*x11641))+(((-1.0)*x11632*x11635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11645=((1.0)*sj0);
IkReal x11646=((1.0)*gconst4);
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11645))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst4*r11*x11645))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*cj0*r01*x11646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
CheckValue<IkReal> x11648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11646)))),-1);
if(!x11648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11647.value)+(((1.5707963267949)*(x11648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11649=IKsin(j4);
IkReal x11650=IKcos(j4);
IkReal x11651=(gconst5*sj3);
IkReal x11652=(cj3*gconst5);
IkReal x11653=(gconst4*r11);
IkReal x11654=(sj1*sj2);
IkReal x11655=(cj2*sj1);
IkReal x11656=((1.0)*sj0);
IkReal x11657=(gconst4*r01);
IkReal x11658=(gconst4*r21);
IkReal x11659=((1.0)*cj0);
IkReal x11660=(cj1*sj2);
IkReal x11661=(gconst4*sj3);
IkReal x11662=(cj3*gconst4);
IkReal x11663=((1.0)*x11650);
IkReal x11664=((1.0)*cj1*cj2);
IkReal x11665=(cj3*x11649);
IkReal x11666=(cj3*x11650);
IkReal x11667=((1.0)*gconst5*x11649);
IkReal x11668=((1.0)*sj3*x11649);
evalcond[0]=((((-1.0)*r20*x11667))+((x11649*x11658))+(((-1.0)*r22*x11663)));
evalcond[1]=(cj0+(((-1.0)*r12*x11663))+((x11649*x11653))+(((-1.0)*r10*x11667)));
evalcond[2]=((((-1.0)*x11656))+(((-1.0)*r00*x11667))+(((-1.0)*r02*x11663))+((x11649*x11657)));
evalcond[3]=(x11660+x11655+((r20*x11661))+((r21*x11651))+(((-1.0)*r20*x11652*x11663))+((r22*x11665))+((x11658*x11666)));
evalcond[4]=(x11654+((r20*x11662))+(((-1.0)*sj3*x11658*x11663))+((r21*x11652))+(((-1.0)*x11664))+(((-1.0)*r22*x11668))+((r20*x11650*x11651)));
evalcond[5]=((((-1.0)*cj1*cj2*x11659))+(((-1.0)*r00*x11652*x11663))+((cj0*x11654))+((r00*x11661))+((x11657*x11666))+((r02*x11665))+((r01*x11651)));
evalcond[6]=((((-1.0)*cj1*cj2*x11656))+((r11*x11651))+((sj0*x11654))+(((-1.0)*r10*x11652*x11663))+((r12*x11665))+((r10*x11661))+((x11653*x11666)));
evalcond[7]=((((-1.0)*x11659*x11660))+(((-1.0)*r02*x11668))+(((-1.0)*x11655*x11659))+((r00*x11662))+((r00*x11650*x11651))+(((-1.0)*sj3*x11657*x11663))+((r01*x11652)));
evalcond[8]=((((-1.0)*sj3*x11653*x11663))+((r11*x11652))+(((-1.0)*x11655*x11656))+(((-1.0)*r12*x11668))+((r10*x11662))+((r10*x11650*x11651))+(((-1.0)*x11656*x11660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11669=((1.0)*gconst5);
CheckValue<IkReal> x11670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11669))+(((-1.0)*gconst4*r10)))),-1);
if(!x11670.valid){
continue;
}
CheckValue<IkReal> x11671 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11669))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11670.value)))+(x11671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11672=IKsin(j4);
IkReal x11673=IKcos(j4);
IkReal x11674=(gconst5*sj3);
IkReal x11675=(cj3*gconst5);
IkReal x11676=(gconst4*r11);
IkReal x11677=(sj1*sj2);
IkReal x11678=(cj2*sj1);
IkReal x11679=((1.0)*sj0);
IkReal x11680=(gconst4*r01);
IkReal x11681=(gconst4*r21);
IkReal x11682=((1.0)*cj0);
IkReal x11683=(cj1*sj2);
IkReal x11684=(gconst4*sj3);
IkReal x11685=(cj3*gconst4);
IkReal x11686=((1.0)*x11673);
IkReal x11687=((1.0)*cj1*cj2);
IkReal x11688=(cj3*x11672);
IkReal x11689=(cj3*x11673);
IkReal x11690=((1.0)*gconst5*x11672);
IkReal x11691=((1.0)*sj3*x11672);
evalcond[0]=((((-1.0)*r20*x11690))+(((-1.0)*r22*x11686))+((x11672*x11681)));
evalcond[1]=(cj0+((x11672*x11676))+(((-1.0)*r12*x11686))+(((-1.0)*r10*x11690)));
evalcond[2]=((((-1.0)*r02*x11686))+((x11672*x11680))+(((-1.0)*r00*x11690))+(((-1.0)*x11679)));
evalcond[3]=(x11683+x11678+((r22*x11688))+(((-1.0)*r20*x11675*x11686))+((x11681*x11689))+((r21*x11674))+((r20*x11684)));
evalcond[4]=((((-1.0)*r22*x11691))+x11677+((r20*x11673*x11674))+(((-1.0)*x11687))+(((-1.0)*sj3*x11681*x11686))+((r21*x11675))+((r20*x11685)));
evalcond[5]=(((r00*x11684))+((cj0*x11677))+((r02*x11688))+((x11680*x11689))+((r01*x11674))+(((-1.0)*cj1*cj2*x11682))+(((-1.0)*r00*x11675*x11686)));
evalcond[6]=(((x11676*x11689))+((r12*x11688))+((r10*x11684))+((r11*x11674))+(((-1.0)*r10*x11675*x11686))+((sj0*x11677))+(((-1.0)*cj1*cj2*x11679)));
evalcond[7]=(((r00*x11685))+(((-1.0)*r02*x11691))+((r01*x11675))+(((-1.0)*x11682*x11683))+((r00*x11673*x11674))+(((-1.0)*x11678*x11682))+(((-1.0)*sj3*x11680*x11686)));
evalcond[8]=((((-1.0)*x11678*x11679))+(((-1.0)*sj3*x11676*x11686))+((r10*x11685))+((r11*x11675))+((r10*x11673*x11674))+(((-1.0)*x11679*x11683))+(((-1.0)*r12*x11691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11692=((1.0)*gconst5);
CheckValue<IkReal> x11693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11692)))),-1);
if(!x11693.valid){
continue;
}
CheckValue<IkReal> x11694 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11692))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11693.value)))+(x11694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11695=IKsin(j4);
IkReal x11696=IKcos(j4);
IkReal x11697=(gconst5*sj3);
IkReal x11698=(cj3*gconst5);
IkReal x11699=(gconst4*r11);
IkReal x11700=(sj1*sj2);
IkReal x11701=(cj2*sj1);
IkReal x11702=((1.0)*sj0);
IkReal x11703=(gconst4*r01);
IkReal x11704=(gconst4*r21);
IkReal x11705=((1.0)*cj0);
IkReal x11706=(cj1*sj2);
IkReal x11707=(gconst4*sj3);
IkReal x11708=(cj3*gconst4);
IkReal x11709=((1.0)*x11696);
IkReal x11710=((1.0)*cj1*cj2);
IkReal x11711=(cj3*x11695);
IkReal x11712=(cj3*x11696);
IkReal x11713=((1.0)*gconst5*x11695);
IkReal x11714=((1.0)*sj3*x11695);
evalcond[0]=((((-1.0)*r22*x11709))+(((-1.0)*r20*x11713))+((x11695*x11704)));
evalcond[1]=(((x11695*x11699))+cj0+(((-1.0)*r10*x11713))+(((-1.0)*r12*x11709)));
evalcond[2]=((((-1.0)*r00*x11713))+(((-1.0)*x11702))+(((-1.0)*r02*x11709))+((x11695*x11703)));
evalcond[3]=(x11706+x11701+((x11704*x11712))+(((-1.0)*r20*x11698*x11709))+((r22*x11711))+((r20*x11707))+((r21*x11697)));
evalcond[4]=(x11700+(((-1.0)*x11710))+(((-1.0)*r22*x11714))+((r20*x11696*x11697))+(((-1.0)*sj3*x11704*x11709))+((r20*x11708))+((r21*x11698)));
evalcond[5]=((((-1.0)*r00*x11698*x11709))+((r02*x11711))+((r01*x11697))+((r00*x11707))+((x11703*x11712))+((cj0*x11700))+(((-1.0)*cj1*cj2*x11705)));
evalcond[6]=(((x11699*x11712))+((r11*x11697))+((sj0*x11700))+(((-1.0)*cj1*cj2*x11702))+((r10*x11707))+(((-1.0)*r10*x11698*x11709))+((r12*x11711)));
evalcond[7]=((((-1.0)*x11701*x11705))+(((-1.0)*sj3*x11703*x11709))+((r01*x11698))+((r00*x11708))+(((-1.0)*x11705*x11706))+(((-1.0)*r02*x11714))+((r00*x11696*x11697)));
evalcond[8]=((((-1.0)*x11702*x11706))+(((-1.0)*x11701*x11702))+(((-1.0)*sj3*x11699*x11709))+(((-1.0)*r12*x11714))+((r11*x11698))+((r10*x11708))+((r10*x11696*x11697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11715=((-1.0)*r10);
IkReal x11717 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11717)==0){
continue;
}
IkReal x11716=pow(x11717,-0.5);
CheckValue<IkReal> x11718 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11715),IKFAST_ATAN2_MAGTHRESH);
if(!x11718.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11718.value));
IkReal gconst7=(r11*x11716);
IkReal gconst8=(x11715*x11716);
CheckValue<IkReal> x11719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11719.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11719.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11720=((-1.0)*r10);
IkReal x11721=x11716;
CheckValue<IkReal> x11723 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11720),IKFAST_ATAN2_MAGTHRESH);
if(!x11723.valid){
continue;
}
IkReal x11722=((-1.0)*(x11723.value));
sj5=gconst7;
cj5=gconst8;
j5=x11722;
IkReal gconst6=x11722;
IkReal gconst7=(r11*x11721);
IkReal gconst8=(x11720*x11721);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11724=((1.0)*sj0);
IkReal x11725=((1.0)*gconst7);
CheckValue<IkReal> x11726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11725))+(((-1.0)*gconst8*r21)))),-1);
if(!x11726.valid){
continue;
}
CheckValue<IkReal> x11727 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11724))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11724))+(((-1.0)*cj0*r01*x11725))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11726.value)))+(x11727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11728=IKsin(j4);
IkReal x11729=IKcos(j4);
IkReal x11730=(gconst7*sj3);
IkReal x11731=(cj3*gconst8);
IkReal x11732=(cj3*gconst7);
IkReal x11733=(sj1*sj2);
IkReal x11734=(cj2*sj1);
IkReal x11735=((1.0)*sj0);
IkReal x11736=((1.0)*cj0);
IkReal x11737=(gconst8*sj3);
IkReal x11738=(cj1*sj2);
IkReal x11739=((1.0)*x11729);
IkReal x11740=((1.0)*x11728);
IkReal x11741=((1.0)*cj1*cj2);
IkReal x11742=(cj3*x11728);
IkReal x11743=(gconst7*x11728);
IkReal x11744=(x11729*x11737);
evalcond[0]=((((-1.0)*gconst8*r20*x11740))+(((-1.0)*r22*x11739))+((r21*x11743)));
evalcond[1]=(cj0+(((-1.0)*r12*x11739))+(((-1.0)*gconst8*r10*x11740))+((r11*x11743)));
evalcond[2]=(((r01*x11743))+(((-1.0)*x11735))+(((-1.0)*r02*x11739))+(((-1.0)*gconst8*r00*x11740)));
evalcond[3]=(x11734+x11738+(((-1.0)*r20*x11731*x11739))+((r20*x11730))+((r21*x11729*x11732))+((r21*x11737))+((r22*x11742)));
evalcond[4]=(x11733+(((-1.0)*x11741))+(((-1.0)*r21*x11730*x11739))+((r20*x11732))+((r20*x11744))+(((-1.0)*r22*sj3*x11740))+((r21*x11731)));
evalcond[5]=(((r01*x11737))+((r00*x11730))+((cj0*x11733))+(((-1.0)*cj1*cj2*x11736))+((r01*x11729*x11732))+((r02*x11742))+(((-1.0)*r00*x11731*x11739)));
evalcond[6]=(((r11*x11737))+((sj0*x11733))+(((-1.0)*cj1*cj2*x11735))+((r10*x11730))+((r11*x11729*x11732))+(((-1.0)*r10*x11731*x11739))+((r12*x11742)));
evalcond[7]=((((-1.0)*x11734*x11736))+((r01*x11731))+((r00*x11744))+(((-1.0)*r02*sj3*x11740))+((r00*x11732))+(((-1.0)*r01*x11730*x11739))+(((-1.0)*x11736*x11738)));
evalcond[8]=((((-1.0)*x11734*x11735))+((r11*x11731))+(((-1.0)*r11*x11730*x11739))+((r10*x11744))+((r10*x11732))+(((-1.0)*x11735*x11738))+(((-1.0)*r12*sj3*x11740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11745=((1.0)*gconst8);
CheckValue<IkReal> x11746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11745))+(((-1.0)*gconst7*r00)))),-1);
if(!x11746.valid){
continue;
}
CheckValue<IkReal> x11747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11746.value)))+(x11747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11748=IKsin(j4);
IkReal x11749=IKcos(j4);
IkReal x11750=(gconst7*sj3);
IkReal x11751=(cj3*gconst8);
IkReal x11752=(cj3*gconst7);
IkReal x11753=(sj1*sj2);
IkReal x11754=(cj2*sj1);
IkReal x11755=((1.0)*sj0);
IkReal x11756=((1.0)*cj0);
IkReal x11757=(gconst8*sj3);
IkReal x11758=(cj1*sj2);
IkReal x11759=((1.0)*x11749);
IkReal x11760=((1.0)*x11748);
IkReal x11761=((1.0)*cj1*cj2);
IkReal x11762=(cj3*x11748);
IkReal x11763=(gconst7*x11748);
IkReal x11764=(x11749*x11757);
evalcond[0]=((((-1.0)*r22*x11759))+(((-1.0)*gconst8*r20*x11760))+((r21*x11763)));
evalcond[1]=((((-1.0)*r12*x11759))+(((-1.0)*gconst8*r10*x11760))+((r11*x11763))+cj0);
evalcond[2]=((((-1.0)*gconst8*r00*x11760))+(((-1.0)*r02*x11759))+(((-1.0)*x11755))+((r01*x11763)));
evalcond[3]=(x11754+x11758+((r21*x11749*x11752))+((r22*x11762))+((r21*x11757))+(((-1.0)*r20*x11751*x11759))+((r20*x11750)));
evalcond[4]=((((-1.0)*r22*sj3*x11760))+x11753+((r20*x11764))+(((-1.0)*r21*x11750*x11759))+(((-1.0)*x11761))+((r21*x11751))+((r20*x11752)));
evalcond[5]=(((cj0*x11753))+(((-1.0)*cj1*cj2*x11756))+((r01*x11749*x11752))+((r02*x11762))+(((-1.0)*r00*x11751*x11759))+((r01*x11757))+((r00*x11750)));
evalcond[6]=(((r11*x11749*x11752))+(((-1.0)*cj1*cj2*x11755))+((r11*x11757))+((r10*x11750))+((r12*x11762))+((sj0*x11753))+(((-1.0)*r10*x11751*x11759)));
evalcond[7]=((((-1.0)*x11754*x11756))+(((-1.0)*x11756*x11758))+(((-1.0)*r01*x11750*x11759))+(((-1.0)*r02*sj3*x11760))+((r00*x11764))+((r01*x11751))+((r00*x11752)));
evalcond[8]=((((-1.0)*x11754*x11755))+(((-1.0)*x11755*x11758))+((r11*x11751))+((r10*x11764))+(((-1.0)*r11*x11750*x11759))+((r10*x11752))+(((-1.0)*r12*sj3*x11760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11765=((-1.0)*r11);
IkReal x11767 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11767)==0){
continue;
}
IkReal x11766=pow(x11767,-0.5);
CheckValue<IkReal> x11768 = IKatan2WithCheck(IkReal(x11765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11768.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11768.value))));
IkReal gconst10=(x11765*x11766);
IkReal gconst11=((1.0)*r10*x11766);
CheckValue<IkReal> x11769 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11769.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11769.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11770=((-1.0)*r11);
CheckValue<IkReal> x11773 = IKatan2WithCheck(IkReal(x11770),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11773.valid){
continue;
}
IkReal x11771=((1.0)*(x11773.value));
IkReal x11772=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11771)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11771)));
IkReal gconst10=(x11770*x11772);
IkReal gconst11=((1.0)*r10*x11772);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11774=((-1.0)*r11);
CheckValue<IkReal> x11777 = IKatan2WithCheck(IkReal(x11774),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11777.valid){
continue;
}
IkReal x11775=((1.0)*(x11777.value));
IkReal x11776=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11775)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11775)));
IkReal gconst10=(x11774*x11776);
IkReal gconst11=((1.0)*r10*x11776);
IkReal x11778=r12*r12;
IkReal x11779=((1.0)*sj0);
IkReal x11780=(cj0*r02);
IkReal x11781=x11766;
j4eval[0]=((IKabs(((((-1.0)*r12*x11779))+(((-1.0)*x11780)))))+(IKabs(((((-1.0)*x11779*x11781))+((sj0*x11778*x11781))+((r12*x11780*x11781))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11782=((-1.0)*r11);
CheckValue<IkReal> x11785 = IKatan2WithCheck(IkReal(x11782),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11785.valid){
continue;
}
IkReal x11783=((1.0)*(x11785.value));
IkReal x11784=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11783)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11783)));
IkReal gconst10=(x11782*x11784);
IkReal gconst11=((1.0)*r10*x11784);
IkReal x11786=((1.0)*cj3);
CheckValue<IkReal> x11791=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11791.valid){
continue;
}
IkReal x11787=x11791.value;
IkReal x11788=(cj3*x11787);
IkReal x11789=(x11786*x11787);
IkReal x11790=((((-2.0)*r10*r11*r20*r21*x11788))+(((-1.0)*x11789*(r11*r11)*(r21*r21)))+(((-1.0)*x11789*(r10*r10)*(r20*r20)))+(((-1.0)*x11786*(r22*r22))));
j4eval[0]=x11790;
j4eval[1]=IKsign(x11790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11792=((-1.0)*r11);
CheckValue<IkReal> x11795 = IKatan2WithCheck(IkReal(x11792),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11795.valid){
continue;
}
IkReal x11793=((1.0)*(x11795.value));
IkReal x11794=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11793)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11793)));
IkReal gconst10=(x11792*x11794);
IkReal gconst11=((1.0)*r10*x11794);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11796=((-1.0)*r11);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(x11796),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal x11797=((1.0)*(x11799.value));
IkReal x11798=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11797)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11797)));
IkReal gconst10=(x11796*x11798);
IkReal gconst11=((1.0)*r10*x11798);
IkReal x11800=r12*r12;
IkReal x11801=((1.0)*sj0);
IkReal x11802=(cj0*r02);
IkReal x11803=x11766;
j4eval[0]=((IKabs((((r12*x11802*x11803))+(((-1.0)*x11801*x11803))+((sj0*x11800*x11803)))))+(IKabs(((((-1.0)*r12*x11801))+(((-1.0)*x11802))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11804=((-1.0)*r11);
CheckValue<IkReal> x11807 = IKatan2WithCheck(IkReal(x11804),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11807.valid){
continue;
}
IkReal x11805=((1.0)*(x11807.value));
IkReal x11806=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11805)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11805)));
IkReal gconst10=(x11804*x11806);
IkReal gconst11=((1.0)*r10*x11806);
IkReal x11808=r12*r12;
IkReal x11809=(cj1*cj2*r22);
IkReal x11810=(r22*sj1*sj2);
CheckValue<IkReal> x11814=IKPowWithIntegerCheck(((-1.0)+x11808),-1);
if(!x11814.valid){
continue;
}
IkReal x11811=x11814.value;
if((((1.0)+(((-1.0)*x11808)))) < -0.00001)
continue;
IkReal x11812=IKsqrt(((1.0)+(((-1.0)*x11808))));
IkReal x11813=(r12*x11811*x11812);
j4eval[0]=((IKabs((((x11809*x11813))+(((-1.0)*x11810*x11813)))))+(IKabs(((((-1.0)*x11809))+x11810))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11815=((-1.0)*r11);
CheckValue<IkReal> x11818 = IKatan2WithCheck(IkReal(x11815),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11818.valid){
continue;
}
IkReal x11816=((1.0)*(x11818.value));
IkReal x11817=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11816)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11816)));
IkReal gconst10=(x11815*x11817);
IkReal gconst11=((1.0)*r10*x11817);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11819=((-1.0)*r11);
CheckValue<IkReal> x11822 = IKatan2WithCheck(IkReal(x11819),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11822.valid){
continue;
}
IkReal x11820=((1.0)*(x11822.value));
IkReal x11821=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11820)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11820)));
IkReal gconst10=(x11819*x11821);
IkReal gconst11=((1.0)*r10*x11821);
IkReal x11823=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11827=IKPowWithIntegerCheck(x11823,-1);
if(!x11827.valid){
continue;
}
IkReal x11824=x11827.value;
IkReal x11825=((1.0)*x11824);
IkReal x11826=((((-1.0)*(r02*r02)))+(((-1.0)*x11825*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11824))+(((-1.0)*x11825*(r00*r00)*(r10*r10))));
j4eval[0]=x11826;
j4eval[1]=IKsign(x11826);
j4eval[2]=r02;
j4eval[3]=x11823;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11828=((-1.0)*r11);
CheckValue<IkReal> x11831 = IKatan2WithCheck(IkReal(x11828),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11831.valid){
continue;
}
IkReal x11829=((1.0)*(x11831.value));
IkReal x11830=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11829)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11829)));
IkReal gconst10=(x11828*x11830);
IkReal gconst11=((1.0)*r10*x11830);
IkReal x11832=r12*r12;
IkReal x11833=(cj1*cj2*r22);
IkReal x11834=(r22*sj1*sj2);
CheckValue<IkReal> x11838=IKPowWithIntegerCheck(((-1.0)+x11832),-1);
if(!x11838.valid){
continue;
}
IkReal x11835=x11838.value;
if((((1.0)+(((-1.0)*x11832)))) < -0.00001)
continue;
IkReal x11836=IKsqrt(((1.0)+(((-1.0)*x11832))));
IkReal x11837=(r12*x11835*x11836);
j4eval[0]=((IKabs(((((-1.0)*x11834*x11837))+((x11833*x11837)))))+(IKabs(((((-1.0)*x11833))+x11834))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11839=(gconst10*r21);
IkReal x11840=(gconst11*r20);
IkReal x11841=(sj1*sj2);
IkReal x11842=(cj1*cj2);
CheckValue<IkReal> x11843=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11839*x11839)+(((-2.0)*x11839*x11840))+(x11840*x11840))),-1);
if(!x11843.valid){
continue;
}
CheckValue<IkReal> x11844 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11842))+((r22*x11841)))),IkReal((((x11839*x11841))+((x11840*x11842))+(((-1.0)*x11840*x11841))+(((-1.0)*x11839*x11842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11843.value)))+(x11844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11845=IKsin(j4);
IkReal x11846=IKcos(j4);
IkReal x11847=((1.0)*cj2);
IkReal x11848=((1.0)*x11846);
IkReal x11849=(gconst10*x11845);
IkReal x11850=((1.0)*x11845);
IkReal x11851=(gconst11*x11846);
IkReal x11852=(gconst11*x11850);
evalcond[0]=(((r21*x11849))+(((-1.0)*r20*x11852))+(((-1.0)*r22*x11848)));
evalcond[1]=(((r11*x11849))+(((-1.0)*r12*x11848))+(((-1.0)*r10*x11852)));
evalcond[2]=((((-1.0)*r02*x11850))+(((-1.0)*gconst10*r01*x11848))+((r00*x11851)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11848))+((r01*x11849))+(((-1.0)*r00*x11852)));
evalcond[4]=(((r20*x11851))+(((-1.0)*gconst10*r21*x11848))+(((-1.0)*cj1*x11847))+((sj1*sj2))+(((-1.0)*r22*x11850)));
evalcond[5]=((((-1.0)*sj1*x11847))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11848))+(((-1.0)*r12*x11850))+((r10*x11851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11853=(gconst11*r00);
IkReal x11854=(gconst10*r01);
CheckValue<IkReal> x11855=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11853*x11853)))+(((2.0)*x11853*x11854))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11854*x11854))))),-1);
if(!x11855.valid){
continue;
}
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(((((-1.0)*x11854))+x11853)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11855.value)))+(x11856.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11857=IKsin(j4);
IkReal x11858=IKcos(j4);
IkReal x11859=((1.0)*cj2);
IkReal x11860=((1.0)*x11858);
IkReal x11861=(gconst10*x11857);
IkReal x11862=((1.0)*x11857);
IkReal x11863=(gconst11*x11858);
IkReal x11864=(gconst11*x11862);
evalcond[0]=((((-1.0)*r22*x11860))+(((-1.0)*r20*x11864))+((r21*x11861)));
evalcond[1]=(((r11*x11861))+(((-1.0)*r10*x11864))+(((-1.0)*r12*x11860)));
evalcond[2]=(((r00*x11863))+(((-1.0)*gconst10*r01*x11860))+(((-1.0)*r02*x11862)));
evalcond[3]=((-1.0)+((r01*x11861))+(((-1.0)*r00*x11864))+(((-1.0)*r02*x11860)));
evalcond[4]=((((-1.0)*gconst10*r21*x11860))+(((-1.0)*r22*x11862))+((r20*x11863))+(((-1.0)*cj1*x11859))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11859))+(((-1.0)*gconst10*r11*x11860))+(((-1.0)*cj1*sj2))+((r10*x11863))+(((-1.0)*r12*x11862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11865 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11865.valid){
continue;
}
CheckValue<IkReal> x11866=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11865.value)+(((1.5707963267949)*(x11866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11867=IKsin(j4);
IkReal x11868=IKcos(j4);
IkReal x11869=((1.0)*cj2);
IkReal x11870=((1.0)*x11868);
IkReal x11871=(gconst10*x11867);
IkReal x11872=((1.0)*x11867);
IkReal x11873=(gconst11*x11868);
IkReal x11874=(gconst11*x11872);
evalcond[0]=((((-1.0)*r22*x11870))+(((-1.0)*r20*x11874))+((r21*x11871)));
evalcond[1]=((((-1.0)*r10*x11874))+((r11*x11871))+(((-1.0)*r12*x11870)));
evalcond[2]=(((r00*x11873))+(((-1.0)*gconst10*r01*x11870))+(((-1.0)*r02*x11872)));
evalcond[3]=((-1.0)+((r01*x11871))+(((-1.0)*r02*x11870))+(((-1.0)*r00*x11874)));
evalcond[4]=((((-1.0)*r22*x11872))+(((-1.0)*cj1*x11869))+(((-1.0)*gconst10*r21*x11870))+((r20*x11873))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11869))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11870))+((r10*x11873))+(((-1.0)*r12*x11872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11875=((-1.0)*r11);
CheckValue<IkReal> x11878 = IKatan2WithCheck(IkReal(x11875),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11878.valid){
continue;
}
IkReal x11876=((1.0)*(x11878.value));
IkReal x11877=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11876)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11876)));
IkReal gconst10=(x11875*x11877);
IkReal gconst11=((1.0)*r10*x11877);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11879=((-1.0)*r11);
CheckValue<IkReal> x11882 = IKatan2WithCheck(IkReal(x11879),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11882.valid){
continue;
}
IkReal x11880=((1.0)*(x11882.value));
IkReal x11881=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11880)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11880)));
IkReal gconst10=(x11879*x11881);
IkReal gconst11=((1.0)*r10*x11881);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11883=((-1.0)*r11);
CheckValue<IkReal> x11886 = IKatan2WithCheck(IkReal(x11883),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11886.valid){
continue;
}
IkReal x11884=((1.0)*(x11886.value));
IkReal x11885=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11884)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11884)));
IkReal gconst10=(x11883*x11885);
IkReal gconst11=((1.0)*r10*x11885);
IkReal x11887=r12*r12;
CheckValue<IkReal> x11890=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11887))),-1);
if(!x11890.valid){
continue;
}
IkReal x11888=x11890.value;
IkReal x11889=((1.0)*x11888);
j4eval[0]=IKsign(((((2.0)*x11888*(r10*r10)*(r11*r11)))+((x11889*(r11*r11*r11*r11)))+((x11889*(r10*r10*r10*r10)))+x11887));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11891=(cj2*sj1);
IkReal x11892=(gconst10*r11);
IkReal x11893=(gconst11*r10);
IkReal x11894=(cj1*sj2);
CheckValue<IkReal> x11895=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11892*x11893))+(r12*r12)+(x11893*x11893)+(x11892*x11892))),-1);
if(!x11895.valid){
continue;
}
CheckValue<IkReal> x11896 = IKatan2WithCheck(IkReal((((r12*x11891))+((r12*x11894)))),IkReal(((((-1.0)*x11893*x11894))+((x11891*x11892))+(((-1.0)*x11891*x11893))+((x11892*x11894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11895.value)))+(x11896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11897=IKsin(j4);
IkReal x11898=IKcos(j4);
IkReal x11899=((1.0)*x11898);
IkReal x11900=(gconst10*x11897);
IkReal x11901=((1.0)*x11897);
IkReal x11902=(gconst11*x11898);
IkReal x11903=(gconst11*x11901);
evalcond[0]=((((-1.0)*r22*x11899))+(((-1.0)*r20*x11903))+((r21*x11900)));
evalcond[1]=((((-1.0)*r12*x11899))+(((-1.0)*r10*x11903))+((r11*x11900)));
evalcond[2]=((((-1.0)*r02*x11901))+(((-1.0)*gconst10*r01*x11899))+((r00*x11902)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11903))+((r01*x11900))+(((-1.0)*r02*x11899)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11899))+((cj1*sj2))+(((-1.0)*r12*x11901))+((r10*x11902)));
evalcond[5]=((((-1.0)*r22*x11901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11902))+(((-1.0)*gconst10*r21*x11899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11904=(gconst11*r00);
IkReal x11905=(gconst10*r01);
CheckValue<IkReal> x11906=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11904*x11905))+(x11905*x11905)+(r02*r02)+(x11904*x11904))),-1);
if(!x11906.valid){
continue;
}
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal((x11904+(((-1.0)*x11905)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11906.value)))+(x11907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11908=IKsin(j4);
IkReal x11909=IKcos(j4);
IkReal x11910=((1.0)*x11909);
IkReal x11911=(gconst10*x11908);
IkReal x11912=((1.0)*x11908);
IkReal x11913=(gconst11*x11909);
IkReal x11914=(gconst11*x11912);
evalcond[0]=((((-1.0)*r22*x11910))+(((-1.0)*r20*x11914))+((r21*x11911)));
evalcond[1]=(((r11*x11911))+(((-1.0)*r12*x11910))+(((-1.0)*r10*x11914)));
evalcond[2]=(((r00*x11913))+(((-1.0)*gconst10*r01*x11910))+(((-1.0)*r02*x11912)));
evalcond[3]=((1.0)+((r01*x11911))+(((-1.0)*r02*x11910))+(((-1.0)*r00*x11914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11910))+((r10*x11913))+(((-1.0)*r12*x11912)));
evalcond[5]=((((-1.0)*gconst10*r21*x11910))+(((-1.0)*r22*x11912))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11915=((1.0)*gconst11);
CheckValue<IkReal> x11916 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11916.valid){
continue;
}
CheckValue<IkReal> x11917=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11915)))),-1);
if(!x11917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11916.value)+(((1.5707963267949)*(x11917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11918=IKsin(j4);
IkReal x11919=IKcos(j4);
IkReal x11920=((1.0)*x11919);
IkReal x11921=(gconst10*x11918);
IkReal x11922=((1.0)*x11918);
IkReal x11923=(gconst11*x11919);
IkReal x11924=(gconst11*x11922);
evalcond[0]=((((-1.0)*r20*x11924))+((r21*x11921))+(((-1.0)*r22*x11920)));
evalcond[1]=((((-1.0)*r10*x11924))+((r11*x11921))+(((-1.0)*r12*x11920)));
evalcond[2]=((((-1.0)*r02*x11922))+((r00*x11923))+(((-1.0)*gconst10*r01*x11920)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11920))+(((-1.0)*r00*x11924))+((r01*x11921)));
evalcond[4]=(((cj2*sj1))+((r10*x11923))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11920))+(((-1.0)*r12*x11922)));
evalcond[5]=(((r20*x11923))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11922))+(((-1.0)*gconst10*r21*x11920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11925=((-1.0)*r11);
IkReal x11926=((-1.0)*r10);
CheckValue<IkReal> x11928 = IKatan2WithCheck(IkReal(x11925),IkReal(x11926),IKFAST_ATAN2_MAGTHRESH);
if(!x11928.valid){
continue;
}
IkReal x11927=((1.0)*(x11928.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11927)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11926);
rxp1_1=(px*r21);
rxp1_2=(px*x11925);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11927)));
IkReal gconst10=x11925;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11929=((-1.0)*r11);
IkReal x11930=((-1.0)*r10);
CheckValue<IkReal> x11932 = IKatan2WithCheck(IkReal(x11929),IkReal(x11930),IKFAST_ATAN2_MAGTHRESH);
if(!x11932.valid){
continue;
}
IkReal x11931=((1.0)*(x11932.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11931)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11930);
rxp1_1=(px*r21);
rxp1_2=(px*x11929);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11931)));
IkReal gconst10=x11929;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11933=((-1.0)*r11);
IkReal x11934=((-1.0)*r10);
CheckValue<IkReal> x11936 = IKatan2WithCheck(IkReal(x11933),IkReal(x11934),IKFAST_ATAN2_MAGTHRESH);
if(!x11936.valid){
continue;
}
IkReal x11935=((1.0)*(x11936.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11935)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11934);
rxp1_1=(px*r21);
rxp1_2=(px*x11933);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11935)));
IkReal gconst10=x11933;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11939=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11939.valid){
continue;
}
IkReal x11937=x11939.value;
IkReal x11938=(sj0*x11937);
cj4array[0]=(((cj1*sj2*x11938))+((cj2*sj1*x11938)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11940=IKsin(j4);
IkReal x11941=IKcos(j4);
IkReal x11942=(gconst10*r21);
IkReal x11943=(gconst11*r20);
IkReal x11944=((1.0)*x11940);
IkReal x11945=((1.0)*x11941);
evalcond[0]=((-1.0)*r02*x11940);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11945)));
evalcond[2]=((((-1.0)*x11943*x11944))+((x11940*x11942)));
evalcond[3]=((((-1.0)*gconst11*r10*x11944))+((gconst10*r11*x11940)));
evalcond[4]=((((-1.0)*x11942*x11945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11941*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11947=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11947.valid){
continue;
}
IkReal x11946=x11947.value;
cj4array[0]=(((cj1*cj2*x11946))+(((-1.0)*sj1*sj2*x11946)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11948=IKsin(j4);
IkReal x11949=IKcos(j4);
IkReal x11950=((1.0)*sj0);
IkReal x11951=(gconst10*x11948);
IkReal x11952=((1.0)*x11949);
IkReal x11953=((1.0)*gconst11*x11948);
evalcond[0]=((-1.0)*r02*x11948);
evalcond[1]=((((-1.0)*r02*x11952))+(((-1.0)*x11950)));
evalcond[2]=((((-1.0)*r20*x11953))+((r21*x11951)));
evalcond[3]=(((r11*x11951))+(((-1.0)*r10*x11953)));
evalcond[4]=((((-1.0)*gconst10*r11*x11952))+(((-1.0)*cj2*sj1*x11950))+(((-1.0)*cj1*sj2*x11950))+((gconst11*r10*x11949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11954=IKPowWithIntegerCheck(r02,-1);
if(!x11954.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11954.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11955=IKsin(j4);
IkReal x11956=IKcos(j4);
IkReal x11957=(gconst10*r21);
IkReal x11958=((1.0)*sj0);
IkReal x11959=(gconst10*r11);
IkReal x11960=(gconst11*x11956);
IkReal x11961=((1.0)*x11956);
IkReal x11962=((1.0)*gconst11*x11955);
evalcond[0]=((-1.0)*r02*x11955);
evalcond[1]=((((-1.0)*r20*x11962))+((x11955*x11957)));
evalcond[2]=((((-1.0)*r10*x11962))+((x11955*x11959)));
evalcond[3]=((((-1.0)*x11957*x11961))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11960)));
evalcond[4]=((((-1.0)*x11959*x11961))+((r10*x11960))+(((-1.0)*cj2*sj1*x11958))+(((-1.0)*cj1*sj2*x11958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11963=((1.0)*gconst11);
CheckValue<IkReal> x11964 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11963))+(((-1.0)*r10*sj0*x11963))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11964.valid){
continue;
}
CheckValue<IkReal> x11965=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11964.value)+(((1.5707963267949)*(x11965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11966=IKsin(j4);
IkReal x11967=IKcos(j4);
IkReal x11968=((1.0)*cj2);
IkReal x11969=((1.0)*sj0);
IkReal x11970=(cj1*sj2);
IkReal x11971=(gconst10*x11966);
IkReal x11972=((1.0)*x11967);
IkReal x11973=(gconst11*x11967);
IkReal x11974=((1.0)*x11966);
IkReal x11975=(gconst11*x11974);
evalcond[0]=((((-1.0)*r20*x11975))+((r21*x11971)));
evalcond[1]=((((-1.0)*r10*x11975))+(((-1.0)*r12*x11972))+cj0+((r11*x11971)));
evalcond[2]=((((-1.0)*cj1*x11968))+((sj1*sj2))+((r20*x11973))+(((-1.0)*gconst10*r21*x11972)));
evalcond[3]=(((r01*x11971))+(((-1.0)*x11969))+(((-1.0)*r00*x11975))+(((-1.0)*r02*x11972)));
evalcond[4]=(((r00*x11973))+(((-1.0)*gconst10*r01*x11972))+(((-1.0)*cj0*sj1*x11968))+(((-1.0)*r02*x11974))+(((-1.0)*cj0*x11970)));
evalcond[5]=((((-1.0)*r12*x11974))+(((-1.0)*gconst10*r11*x11972))+((r10*x11973))+(((-1.0)*x11969*x11970))+(((-1.0)*sj0*sj1*x11968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11976=(gconst10*r21);
IkReal x11977=(gconst11*r20);
IkReal x11978=(sj1*sj2);
IkReal x11979=(cj1*cj2);
CheckValue<IkReal> x11980=IKPowWithIntegerCheck(IKsign(((x11977*x11977)+(r22*r22)+(((-2.0)*x11976*x11977))+(x11976*x11976))),-1);
if(!x11980.valid){
continue;
}
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11979))+((r22*x11978)))),IkReal(((((-1.0)*x11976*x11979))+((x11976*x11978))+((x11977*x11979))+(((-1.0)*x11977*x11978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11980.value)))+(x11981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11982=IKsin(j4);
IkReal x11983=IKcos(j4);
IkReal x11984=((1.0)*cj2);
IkReal x11985=((1.0)*sj0);
IkReal x11986=(cj1*sj2);
IkReal x11987=((1.0)*x11983);
IkReal x11988=(gconst10*x11982);
IkReal x11989=((1.0)*x11982);
IkReal x11990=(gconst11*x11983);
IkReal x11991=(gconst11*x11989);
evalcond[0]=(((r21*x11988))+(((-1.0)*r20*x11991))+(((-1.0)*r22*x11987)));
evalcond[1]=((((-1.0)*r12*x11987))+cj0+((r11*x11988))+(((-1.0)*r10*x11991)));
evalcond[2]=((((-1.0)*r02*x11987))+(((-1.0)*x11985))+((r01*x11988))+(((-1.0)*r00*x11991)));
evalcond[3]=(((r20*x11990))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11987))+(((-1.0)*r22*x11989))+(((-1.0)*cj1*x11984)));
evalcond[4]=((((-1.0)*gconst10*r01*x11987))+(((-1.0)*cj0*sj1*x11984))+(((-1.0)*r02*x11989))+(((-1.0)*cj0*x11986))+((r00*x11990)));
evalcond[5]=((((-1.0)*r12*x11989))+(((-1.0)*gconst10*r11*x11987))+(((-1.0)*sj0*sj1*x11984))+(((-1.0)*x11985*x11986))+((r10*x11990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11992=((1.0)*sj0);
IkReal x11993=((1.0)*gconst10);
CheckValue<IkReal> x11994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11993))+(((-1.0)*gconst11*r21)))),-1);
if(!x11994.valid){
continue;
}
CheckValue<IkReal> x11995 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11992)))),IkReal(((((-1.0)*cj0*r01*x11993))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x11992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11994.value)))+(x11995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11996=IKsin(j4);
IkReal x11997=IKcos(j4);
IkReal x11998=((1.0)*cj2);
IkReal x11999=((1.0)*sj0);
IkReal x12000=(cj1*sj2);
IkReal x12001=((1.0)*x11997);
IkReal x12002=(gconst10*x11996);
IkReal x12003=((1.0)*x11996);
IkReal x12004=(gconst11*x11997);
IkReal x12005=(gconst11*x12003);
evalcond[0]=(((r21*x12002))+(((-1.0)*r22*x12001))+(((-1.0)*r20*x12005)));
evalcond[1]=((((-1.0)*r10*x12005))+cj0+(((-1.0)*r12*x12001))+((r11*x12002)));
evalcond[2]=((((-1.0)*r00*x12005))+((r01*x12002))+(((-1.0)*r02*x12001))+(((-1.0)*x11999)));
evalcond[3]=(((r20*x12004))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12001))+(((-1.0)*cj1*x11998))+(((-1.0)*r22*x12003)));
evalcond[4]=((((-1.0)*gconst10*r01*x12001))+((r00*x12004))+(((-1.0)*r02*x12003))+(((-1.0)*cj0*sj1*x11998))+(((-1.0)*cj0*x12000)));
evalcond[5]=((((-1.0)*x11999*x12000))+(((-1.0)*gconst10*r11*x12001))+(((-1.0)*r12*x12003))+((r10*x12004))+(((-1.0)*sj0*sj1*x11998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12006=((1.0)*gconst11);
CheckValue<IkReal> x12007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12006)))),-1);
if(!x12007.valid){
continue;
}
CheckValue<IkReal> x12008 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12006))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12007.value)))+(x12008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12009=IKsin(j4);
IkReal x12010=IKcos(j4);
IkReal x12011=((1.0)*cj2);
IkReal x12012=((1.0)*sj0);
IkReal x12013=(cj1*sj2);
IkReal x12014=((1.0)*x12010);
IkReal x12015=(gconst10*x12009);
IkReal x12016=((1.0)*x12009);
IkReal x12017=(gconst11*x12010);
IkReal x12018=(gconst11*x12016);
evalcond[0]=(((r21*x12015))+(((-1.0)*r22*x12014))+(((-1.0)*r20*x12018)));
evalcond[1]=(cj0+((r11*x12015))+(((-1.0)*r12*x12014))+(((-1.0)*r10*x12018)));
evalcond[2]=((((-1.0)*r02*x12014))+(((-1.0)*x12012))+((r01*x12015))+(((-1.0)*r00*x12018)));
evalcond[3]=((((-1.0)*gconst10*r21*x12014))+(((-1.0)*cj1*x12011))+((sj1*sj2))+(((-1.0)*r22*x12016))+((r20*x12017)));
evalcond[4]=((((-1.0)*r02*x12016))+(((-1.0)*cj0*sj1*x12011))+(((-1.0)*cj0*x12013))+((r00*x12017))+(((-1.0)*gconst10*r01*x12014)));
evalcond[5]=(((r10*x12017))+(((-1.0)*r12*x12016))+(((-1.0)*sj0*sj1*x12011))+(((-1.0)*x12012*x12013))+(((-1.0)*gconst10*r11*x12014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12019=((-1.0)*r11);
CheckValue<IkReal> x12022 = IKatan2WithCheck(IkReal(x12019),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12022.valid){
continue;
}
IkReal x12020=((1.0)*(x12022.value));
IkReal x12021=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12020)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12020)));
IkReal gconst10=(x12019*x12021);
IkReal gconst11=((1.0)*r10*x12021);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12023=((-1.0)*r11);
CheckValue<IkReal> x12026 = IKatan2WithCheck(IkReal(x12023),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12026.valid){
continue;
}
IkReal x12024=((1.0)*(x12026.value));
IkReal x12025=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12024)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12024)));
IkReal gconst10=(x12023*x12025);
IkReal gconst11=((1.0)*r10*x12025);
IkReal x12027=r12*r12;
IkReal x12028=((1.0)*sj0);
IkReal x12029=(cj0*r02);
IkReal x12030=x11766;
j4eval[0]=((IKabs(((((-1.0)*x12029))+(((-1.0)*r12*x12028)))))+(IKabs((((sj0*x12027*x12030))+(((-1.0)*x12028*x12030))+((r12*x12029*x12030))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12031=((-1.0)*r11);
CheckValue<IkReal> x12034 = IKatan2WithCheck(IkReal(x12031),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12034.valid){
continue;
}
IkReal x12032=((1.0)*(x12034.value));
IkReal x12033=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12032)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12032)));
IkReal gconst10=(x12031*x12033);
IkReal gconst11=((1.0)*r10*x12033);
IkReal x12035=r12*r12;
IkReal x12036=((1.0)+(((-1.0)*x12035)));
IkReal x12037=(r22*sj1*sj2);
IkReal x12038=(cj1*cj2*r22);
CheckValue<IkReal> x12045=IKPowWithIntegerCheck(x12036,-1);
if(!x12045.valid){
continue;
}
IkReal x12039=x12045.value;
CheckValue<IkReal> x12046=IKPowWithIntegerCheck(((-1.0)+x12035),-1);
if(!x12046.valid){
continue;
}
IkReal x12040=x12046.value;
IkReal x12041=((1.0)*x12039);
if((x12036) < -0.00001)
continue;
IkReal x12042=IKsqrt(x12036);
IkReal x12043=(r12*x12040*x12042);
IkReal x12044=((((-1.0)*x12041*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x12041*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x12039)));
j4eval[0]=x12044;
j4eval[1]=((IKabs(((((-1.0)*x12038))+x12037)))+(IKabs((((x12038*x12043))+(((-1.0)*x12037*x12043))))));
j4eval[2]=IKsign(x12044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12047=((-1.0)*r11);
CheckValue<IkReal> x12050 = IKatan2WithCheck(IkReal(x12047),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12050.valid){
continue;
}
IkReal x12048=((1.0)*(x12050.value));
IkReal x12049=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12048)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12048)));
IkReal gconst10=(x12047*x12049);
IkReal gconst11=((1.0)*r10*x12049);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12051=((-1.0)*r11);
CheckValue<IkReal> x12054 = IKatan2WithCheck(IkReal(x12051),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12054.valid){
continue;
}
IkReal x12052=((1.0)*(x12054.value));
IkReal x12053=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12052)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12052)));
IkReal gconst10=(x12051*x12053);
IkReal gconst11=((1.0)*r10*x12053);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12055=((-1.0)*r11);
CheckValue<IkReal> x12058 = IKatan2WithCheck(IkReal(x12055),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12058.valid){
continue;
}
IkReal x12056=((1.0)*(x12058.value));
IkReal x12057=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12056)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12056)));
IkReal gconst10=(x12055*x12057);
IkReal gconst11=((1.0)*r10*x12057);
IkReal x12059=(cj1*r02*sj2);
IkReal x12060=(cj2*r02*sj1);
IkReal x12061=x11766;
IkReal x12062=(r12*x12061);
j4eval[0]=((IKabs((((x12060*x12062))+((x12059*x12062)))))+(IKabs((x12060+x12059))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12063=(cj1*sj2);
IkReal x12064=(cj2*sj1);
IkReal x12065=(gconst11*r00);
IkReal x12066=((1.0)*gconst10*r01);
CheckValue<IkReal> x12067=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12067.valid){
continue;
}
CheckValue<IkReal> x12068 = IKatan2WithCheck(IkReal((((x12064*x12065))+(((-1.0)*x12064*x12066))+((x12063*x12065))+(((-1.0)*x12063*x12066)))),IkReal((((r02*x12063))+((r02*x12064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12067.value)))+(x12068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12069=IKcos(j4);
IkReal x12070=IKsin(j4);
IkReal x12071=((1.0)*cj2);
IkReal x12072=((1.0)*x12069);
IkReal x12073=(gconst10*x12069);
IkReal x12074=(gconst10*x12070);
IkReal x12075=((1.0)*gconst11*x12070);
evalcond[0]=((((-1.0)*gconst11*r00*x12072))+((r02*x12070))+((r01*x12073)));
evalcond[1]=((((-1.0)*r20*x12075))+(((-1.0)*r22*x12072))+((r21*x12074)));
evalcond[2]=(((r11*x12074))+(((-1.0)*r10*x12075))+(((-1.0)*r12*x12072)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12072))+(((-1.0)*r00*x12075))+((r01*x12074)));
evalcond[4]=((((-1.0)*gconst11*r20*x12072))+((sj1*sj2))+((r22*x12070))+(((-1.0)*cj1*x12071))+((r21*x12073)));
evalcond[5]=(((r11*x12073))+(((-1.0)*gconst11*r10*x12072))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12071))+((r12*x12070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12076=(gconst10*r01);
IkReal x12077=(gconst11*r00);
CheckValue<IkReal> x12078=IKPowWithIntegerCheck(IKsign(((x12077*x12077)+(((-2.0)*x12076*x12077))+(x12076*x12076)+(r02*r02))),-1);
if(!x12078.valid){
continue;
}
CheckValue<IkReal> x12079 = IKatan2WithCheck(IkReal(((((-1.0)*x12077))+x12076)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12078.value)))+(x12079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12080=IKcos(j4);
IkReal x12081=IKsin(j4);
IkReal x12082=((1.0)*cj2);
IkReal x12083=((1.0)*x12080);
IkReal x12084=(gconst10*x12080);
IkReal x12085=(gconst10*x12081);
IkReal x12086=((1.0)*gconst11*x12081);
evalcond[0]=(((r02*x12081))+((r01*x12084))+(((-1.0)*gconst11*r00*x12083)));
evalcond[1]=((((-1.0)*r22*x12083))+((r21*x12085))+(((-1.0)*r20*x12086)));
evalcond[2]=((((-1.0)*r12*x12083))+((r11*x12085))+(((-1.0)*r10*x12086)));
evalcond[3]=((-1.0)+((r01*x12085))+(((-1.0)*r00*x12086))+(((-1.0)*r02*x12083)));
evalcond[4]=(((sj1*sj2))+((r22*x12081))+((r21*x12084))+(((-1.0)*gconst11*r20*x12083))+(((-1.0)*cj1*x12082)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12083))+((r12*x12081))+((r11*x12084))+(((-1.0)*sj1*x12082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12087 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12087.valid){
continue;
}
CheckValue<IkReal> x12088=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12087.value)+(((1.5707963267949)*(x12088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12089=IKcos(j4);
IkReal x12090=IKsin(j4);
IkReal x12091=((1.0)*cj2);
IkReal x12092=((1.0)*x12089);
IkReal x12093=(gconst10*x12089);
IkReal x12094=(gconst10*x12090);
IkReal x12095=((1.0)*gconst11*x12090);
evalcond[0]=(((r01*x12093))+(((-1.0)*gconst11*r00*x12092))+((r02*x12090)));
evalcond[1]=((((-1.0)*r20*x12095))+(((-1.0)*r22*x12092))+((r21*x12094)));
evalcond[2]=(((r11*x12094))+(((-1.0)*r10*x12095))+(((-1.0)*r12*x12092)));
evalcond[3]=((-1.0)+((r01*x12094))+(((-1.0)*r02*x12092))+(((-1.0)*r00*x12095)));
evalcond[4]=(((r22*x12090))+((sj1*sj2))+(((-1.0)*cj1*x12091))+(((-1.0)*gconst11*r20*x12092))+((r21*x12093)));
evalcond[5]=(((r11*x12093))+((r12*x12090))+(((-1.0)*sj1*x12091))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12096=((-1.0)*r11);
CheckValue<IkReal> x12099 = IKatan2WithCheck(IkReal(x12096),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12099.valid){
continue;
}
IkReal x12097=((1.0)*(x12099.value));
IkReal x12098=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12097)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12097)));
IkReal gconst10=(x12096*x12098);
IkReal gconst11=((1.0)*r10*x12098);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12100=((-1.0)*r11);
CheckValue<IkReal> x12103 = IKatan2WithCheck(IkReal(x12100),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12103.valid){
continue;
}
IkReal x12101=((1.0)*(x12103.value));
IkReal x12102=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12101)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12101)));
IkReal gconst10=(x12100*x12102);
IkReal gconst11=((1.0)*r10*x12102);
IkReal x12104=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12108=IKPowWithIntegerCheck(x12104,-1);
if(!x12108.valid){
continue;
}
IkReal x12105=x12108.value;
IkReal x12106=((1.0)*x12105);
IkReal x12107=((((-1.0)*(r02*r02)))+(((-1.0)*x12106*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12105))+(((-1.0)*x12106*(r00*r00)*(r10*r10))));
j4eval[0]=x12107;
j4eval[1]=r02;
j4eval[2]=x12104;
j4eval[3]=IKsign(x12107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12109=((-1.0)*r11);
CheckValue<IkReal> x12112 = IKatan2WithCheck(IkReal(x12109),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12112.valid){
continue;
}
IkReal x12110=((1.0)*(x12112.value));
IkReal x12111=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12110)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12110)));
IkReal gconst10=(x12109*x12111);
IkReal gconst11=((1.0)*r10*x12111);
IkReal x12113=r12*r12;
IkReal x12114=((1.0)*r02);
IkReal x12115=(cj1*sj2);
IkReal x12116=(cj2*sj1);
CheckValue<IkReal> x12120=IKPowWithIntegerCheck(((-1.0)+x12113),-1);
if(!x12120.valid){
continue;
}
IkReal x12117=x12120.value;
if((((1.0)+(((-1.0)*x12113)))) < -0.00001)
continue;
IkReal x12118=IKsqrt(((1.0)+(((-1.0)*x12113))));
IkReal x12119=(r12*x12117*x12118);
j4eval[0]=((IKabs(((((-1.0)*x12114*x12116*x12119))+(((-1.0)*x12114*x12115*x12119)))))+(IKabs(((((-1.0)*x12114*x12116))+(((-1.0)*x12114*x12115))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12121=(cj1*sj2);
IkReal x12122=(gconst10*r01);
IkReal x12123=(cj2*sj1);
IkReal x12124=((1.0)*r02);
IkReal x12125=((1.0)*gconst11*r00);
CheckValue<IkReal> x12126=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12126.valid){
continue;
}
CheckValue<IkReal> x12127 = IKatan2WithCheck(IkReal(((((-1.0)*x12121*x12125))+(((-1.0)*x12123*x12125))+((x12122*x12123))+((x12121*x12122)))),IkReal(((((-1.0)*x12121*x12124))+(((-1.0)*x12123*x12124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12126.value)))+(x12127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12128=IKcos(j4);
IkReal x12129=IKsin(j4);
IkReal x12130=((1.0)*x12128);
IkReal x12131=(gconst10*x12128);
IkReal x12132=(gconst10*x12129);
IkReal x12133=((1.0)*gconst11*x12129);
evalcond[0]=((((-1.0)*gconst11*r00*x12130))+((r01*x12131))+((r02*x12129)));
evalcond[1]=((((-1.0)*r20*x12133))+((r21*x12132))+(((-1.0)*r22*x12130)));
evalcond[2]=((((-1.0)*r12*x12130))+(((-1.0)*r10*x12133))+((r11*x12132)));
evalcond[3]=((1.0)+((r01*x12132))+(((-1.0)*r00*x12133))+(((-1.0)*r02*x12130)));
evalcond[4]=(((cj2*sj1))+((r12*x12129))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12130))+((r11*x12131)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12131))+((r22*x12129))+(((-1.0)*gconst11*r20*x12130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12134=(gconst10*r01);
IkReal x12135=(gconst11*r00);
CheckValue<IkReal> x12136=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12134*x12134)))+(((2.0)*x12134*x12135))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12135*x12135))))),-1);
if(!x12136.valid){
continue;
}
CheckValue<IkReal> x12137 = IKatan2WithCheck(IkReal((x12134+(((-1.0)*x12135)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12136.value)))+(x12137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12138=IKcos(j4);
IkReal x12139=IKsin(j4);
IkReal x12140=((1.0)*x12138);
IkReal x12141=(gconst10*x12138);
IkReal x12142=(gconst10*x12139);
IkReal x12143=((1.0)*gconst11*x12139);
evalcond[0]=(((r01*x12141))+((r02*x12139))+(((-1.0)*gconst11*r00*x12140)));
evalcond[1]=((((-1.0)*r22*x12140))+(((-1.0)*r20*x12143))+((r21*x12142)));
evalcond[2]=((((-1.0)*r12*x12140))+((r11*x12142))+(((-1.0)*r10*x12143)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12143))+(((-1.0)*r02*x12140))+((r01*x12142)));
evalcond[4]=((((-1.0)*gconst11*r10*x12140))+((cj2*sj1))+((r12*x12139))+((cj1*sj2))+((r11*x12141)));
evalcond[5]=((((-1.0)*gconst11*r20*x12140))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12139))+((r21*x12141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12144=((1.0)*gconst11);
CheckValue<IkReal> x12145=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12144)))),-1);
if(!x12145.valid){
continue;
}
CheckValue<IkReal> x12146 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12145.value)))+(x12146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12147=IKcos(j4);
IkReal x12148=IKsin(j4);
IkReal x12149=((1.0)*x12147);
IkReal x12150=(gconst10*x12147);
IkReal x12151=(gconst10*x12148);
IkReal x12152=((1.0)*gconst11*x12148);
evalcond[0]=(((r02*x12148))+((r01*x12150))+(((-1.0)*gconst11*r00*x12149)));
evalcond[1]=((((-1.0)*r22*x12149))+((r21*x12151))+(((-1.0)*r20*x12152)));
evalcond[2]=((((-1.0)*r12*x12149))+((r11*x12151))+(((-1.0)*r10*x12152)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12149))+(((-1.0)*r00*x12152))+((r01*x12151)));
evalcond[4]=((((-1.0)*gconst11*r10*x12149))+((cj2*sj1))+((cj1*sj2))+((r12*x12148))+((r11*x12150)));
evalcond[5]=(((r22*x12148))+(((-1.0)*gconst11*r20*x12149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12153=((-1.0)*r11);
IkReal x12154=((-1.0)*r10);
CheckValue<IkReal> x12156 = IKatan2WithCheck(IkReal(x12153),IkReal(x12154),IKFAST_ATAN2_MAGTHRESH);
if(!x12156.valid){
continue;
}
IkReal x12155=((1.0)*(x12156.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12155)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12154);
rxp1_1=(px*r21);
rxp1_2=(px*x12153);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12155)));
IkReal gconst10=x12153;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12157=((-1.0)*r11);
IkReal x12158=((-1.0)*r10);
CheckValue<IkReal> x12160 = IKatan2WithCheck(IkReal(x12157),IkReal(x12158),IKFAST_ATAN2_MAGTHRESH);
if(!x12160.valid){
continue;
}
IkReal x12159=((1.0)*(x12160.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12159)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12158);
rxp1_1=(px*r21);
rxp1_2=(px*x12157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12159)));
IkReal gconst10=x12157;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12161=((-1.0)*r11);
IkReal x12162=((-1.0)*r10);
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal(x12161),IkReal(x12162),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
IkReal x12163=((1.0)*(x12164.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12163)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12162);
rxp1_1=(px*r21);
rxp1_2=(px*x12161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12163)));
IkReal gconst10=x12161;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12167=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12167.valid){
continue;
}
IkReal x12165=x12167.value;
IkReal x12166=(sj0*x12165);
cj4array[0]=(((cj1*sj2*x12166))+((cj2*sj1*x12166)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12168=IKsin(j4);
IkReal x12169=IKcos(j4);
IkReal x12170=(gconst10*r21);
IkReal x12171=((1.0)*x12169);
IkReal x12172=((1.0)*gconst11*x12168);
evalcond[0]=(r02*x12168);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12171)));
evalcond[2]=(((x12168*x12170))+(((-1.0)*r20*x12172)));
evalcond[3]=((((-1.0)*r10*x12172))+((gconst10*r11*x12168)));
evalcond[4]=(((x12169*x12170))+(((-1.0)*gconst11*r20*x12171))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12174=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12174.valid){
continue;
}
IkReal x12173=x12174.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12173))+((cj1*cj2*x12173)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12175=IKsin(j4);
IkReal x12176=IKcos(j4);
IkReal x12177=((1.0)*sj0);
IkReal x12178=(gconst10*x12175);
IkReal x12179=((1.0)*x12176);
IkReal x12180=((1.0)*gconst11*x12175);
evalcond[0]=(r02*x12175);
evalcond[1]=((((-1.0)*x12177))+(((-1.0)*r02*x12179)));
evalcond[2]=(((r21*x12178))+(((-1.0)*r20*x12180)));
evalcond[3]=((((-1.0)*r10*x12180))+((r11*x12178)));
evalcond[4]=((((-1.0)*gconst11*r10*x12179))+((gconst10*r11*x12176))+(((-1.0)*cj1*sj2*x12177))+(((-1.0)*cj2*sj1*x12177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12181=IKPowWithIntegerCheck(r02,-1);
if(!x12181.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12181.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12182=IKsin(j4);
IkReal x12183=IKcos(j4);
IkReal x12184=(gconst10*r21);
IkReal x12185=((1.0)*cj1);
IkReal x12186=(gconst10*r11);
IkReal x12187=((1.0)*gconst11*x12182);
IkReal x12188=((1.0)*gconst11*x12183);
evalcond[0]=(r02*x12182);
evalcond[1]=(((x12182*x12184))+(((-1.0)*r20*x12187)));
evalcond[2]=(((x12182*x12186))+(((-1.0)*r10*x12187)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x12185))+((x12183*x12184))+(((-1.0)*r20*x12188)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12185))+((x12183*x12186))+(((-1.0)*r10*x12188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12189=((1.0)*gconst11);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12189))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
CheckValue<IkReal> x12191=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12190.value)+(((1.5707963267949)*(x12191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12192=IKsin(j4);
IkReal x12193=IKcos(j4);
IkReal x12194=((1.0)*gconst11);
IkReal x12195=((1.0)*cj2);
IkReal x12196=((1.0)*sj0);
IkReal x12197=(cj1*sj2);
IkReal x12198=(gconst10*x12193);
IkReal x12199=(gconst10*x12192);
IkReal x12200=((1.0)*x12193);
evalcond[0]=(((r21*x12199))+(((-1.0)*r20*x12192*x12194)));
evalcond[1]=(cj0+((r11*x12199))+(((-1.0)*r12*x12200))+(((-1.0)*r10*x12192*x12194)));
evalcond[2]=(((r21*x12198))+((sj1*sj2))+(((-1.0)*r20*x12193*x12194))+(((-1.0)*cj1*x12195)));
evalcond[3]=((((-1.0)*x12196))+(((-1.0)*r00*x12192*x12194))+(((-1.0)*r02*x12200))+((r01*x12199)));
evalcond[4]=((((-1.0)*cj0*x12197))+((r02*x12192))+(((-1.0)*r00*x12193*x12194))+((r01*x12198))+(((-1.0)*cj0*sj1*x12195)));
evalcond[5]=(((r12*x12192))+((r11*x12198))+(((-1.0)*r10*x12193*x12194))+(((-1.0)*x12196*x12197))+(((-1.0)*sj0*sj1*x12195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12201=(gconst10*r21);
IkReal x12202=(gconst11*r20);
IkReal x12203=(sj1*sj2);
IkReal x12204=(cj1*cj2);
CheckValue<IkReal> x12205 = IKatan2WithCheck(IkReal((((r22*x12203))+(((-1.0)*r22*x12204)))),IkReal((((x12201*x12203))+(((-1.0)*x12202*x12203))+(((-1.0)*x12201*x12204))+((x12202*x12204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12205.valid){
continue;
}
CheckValue<IkReal> x12206=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12202*x12202)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12201*x12201)))+(((2.0)*x12201*x12202)))),-1);
if(!x12206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12205.value)+(((1.5707963267949)*(x12206.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12207=IKsin(j4);
IkReal x12208=IKcos(j4);
IkReal x12209=((1.0)*cj2);
IkReal x12210=((1.0)*sj0);
IkReal x12211=(cj1*sj2);
IkReal x12212=((1.0)*x12208);
IkReal x12213=(gconst10*x12208);
IkReal x12214=(gconst10*x12207);
IkReal x12215=((1.0)*gconst11*x12207);
evalcond[0]=((((-1.0)*r22*x12212))+((r21*x12214))+(((-1.0)*r20*x12215)));
evalcond[1]=(cj0+(((-1.0)*r12*x12212))+(((-1.0)*r10*x12215))+((r11*x12214)));
evalcond[2]=((((-1.0)*x12210))+(((-1.0)*r02*x12212))+(((-1.0)*r00*x12215))+((r01*x12214)));
evalcond[3]=(((r22*x12207))+((sj1*sj2))+(((-1.0)*cj1*x12209))+(((-1.0)*gconst11*r20*x12212))+((r21*x12213)));
evalcond[4]=(((r02*x12207))+(((-1.0)*gconst11*r00*x12212))+(((-1.0)*cj0*x12211))+(((-1.0)*cj0*sj1*x12209))+((r01*x12213)));
evalcond[5]=((((-1.0)*sj0*sj1*x12209))+(((-1.0)*gconst11*r10*x12212))+((r12*x12207))+(((-1.0)*x12210*x12211))+((r11*x12213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12216=((1.0)*sj0);
IkReal x12217=((1.0)*gconst10);
CheckValue<IkReal> x12218 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12216))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12217))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12218.valid){
continue;
}
CheckValue<IkReal> x12219=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12217)))),-1);
if(!x12219.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12218.value)+(((1.5707963267949)*(x12219.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12220=IKsin(j4);
IkReal x12221=IKcos(j4);
IkReal x12222=((1.0)*cj2);
IkReal x12223=((1.0)*sj0);
IkReal x12224=(cj1*sj2);
IkReal x12225=((1.0)*x12221);
IkReal x12226=(gconst10*x12221);
IkReal x12227=(gconst10*x12220);
IkReal x12228=((1.0)*gconst11*x12220);
evalcond[0]=((((-1.0)*r22*x12225))+((r21*x12227))+(((-1.0)*r20*x12228)));
evalcond[1]=(((r11*x12227))+cj0+(((-1.0)*r12*x12225))+(((-1.0)*r10*x12228)));
evalcond[2]=((((-1.0)*x12223))+(((-1.0)*r00*x12228))+((r01*x12227))+(((-1.0)*r02*x12225)));
evalcond[3]=((((-1.0)*cj1*x12222))+((r22*x12220))+((sj1*sj2))+((r21*x12226))+(((-1.0)*gconst11*r20*x12225)));
evalcond[4]=(((r02*x12220))+((r01*x12226))+(((-1.0)*cj0*sj1*x12222))+(((-1.0)*gconst11*r00*x12225))+(((-1.0)*cj0*x12224)));
evalcond[5]=(((r11*x12226))+(((-1.0)*sj0*sj1*x12222))+(((-1.0)*x12223*x12224))+((r12*x12220))+(((-1.0)*gconst11*r10*x12225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12229=((1.0)*gconst11);
CheckValue<IkReal> x12230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12230.valid){
continue;
}
CheckValue<IkReal> x12231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12229)))),-1);
if(!x12231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12230.value)+(((1.5707963267949)*(x12231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12232=IKsin(j4);
IkReal x12233=IKcos(j4);
IkReal x12234=((1.0)*cj2);
IkReal x12235=((1.0)*sj0);
IkReal x12236=(cj1*sj2);
IkReal x12237=((1.0)*x12233);
IkReal x12238=(gconst10*x12233);
IkReal x12239=(gconst10*x12232);
IkReal x12240=((1.0)*gconst11*x12232);
evalcond[0]=((((-1.0)*r22*x12237))+(((-1.0)*r20*x12240))+((r21*x12239)));
evalcond[1]=((((-1.0)*r10*x12240))+(((-1.0)*r12*x12237))+cj0+((r11*x12239)));
evalcond[2]=(((r01*x12239))+(((-1.0)*r02*x12237))+(((-1.0)*x12235))+(((-1.0)*r00*x12240)));
evalcond[3]=((((-1.0)*gconst11*r20*x12237))+((sj1*sj2))+(((-1.0)*cj1*x12234))+((r22*x12232))+((r21*x12238)));
evalcond[4]=(((r01*x12238))+(((-1.0)*cj0*sj1*x12234))+(((-1.0)*cj0*x12236))+(((-1.0)*gconst11*r00*x12237))+((r02*x12232)));
evalcond[5]=(((r12*x12232))+(((-1.0)*gconst11*r10*x12237))+((r11*x12238))+(((-1.0)*x12235*x12236))+(((-1.0)*sj0*sj1*x12234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12241=((-1.0)*r11);
CheckValue<IkReal> x12244 = IKatan2WithCheck(IkReal(x12241),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12244.valid){
continue;
}
IkReal x12242=((1.0)*(x12244.value));
IkReal x12243=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12242)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12242)));
IkReal gconst10=(x12241*x12243);
IkReal gconst11=((1.0)*r10*x12243);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12245=gconst10*gconst10;
IkReal x12246=gconst11*gconst11;
IkReal x12247=(gconst10*r21);
IkReal x12248=(cj3*r00);
IkReal x12249=(r00*sj3);
IkReal x12250=((1.0)*gconst11);
IkReal x12251=(gconst10*r20);
IkReal x12252=(r01*sj3);
IkReal x12253=(cj3*gconst11*r01);
IkReal x12254=(r21*x12245);
IkReal x12255=(r20*x12246);
CheckValue<IkReal> x12256=IKPowWithIntegerCheck(IKsign((((x12252*x12254))+(((-1.0)*x12247*x12249*x12250))+(((-1.0)*x12250*x12251*x12252))+((x12249*x12255))+((r02*r22*sj3)))),-1);
if(!x12256.valid){
continue;
}
CheckValue<IkReal> x12257 = IKatan2WithCheck(IkReal((((r22*x12253))+((gconst10*r22*x12248)))),IkReal((((x12247*x12253))+(((-1.0)*x12248*x12250*x12251))+(((-1.0)*cj3*r01*x12255))+((x12248*x12254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12256.value)))+(x12257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12258=IKsin(j4);
IkReal x12259=IKcos(j4);
IkReal x12260=(sj1*sj2);
IkReal x12261=(gconst10*sj3);
IkReal x12262=(cj3*gconst10);
IkReal x12263=(gconst11*r20);
IkReal x12264=(gconst11*r21);
IkReal x12265=(gconst11*r00);
IkReal x12266=(cj3*gconst11);
IkReal x12267=(gconst11*r10);
IkReal x12268=((1.0)*cj1);
IkReal x12269=(cj2*sj1);
IkReal x12270=(gconst11*sj3);
IkReal x12271=(cj2*x12268);
IkReal x12272=((1.0)*x12259);
IkReal x12273=((1.0)*x12258);
IkReal x12274=(gconst10*x12258);
IkReal x12275=(cj3*x12258);
IkReal x12276=(sj3*x12259);
evalcond[0]=(((r21*x12274))+(((-1.0)*r22*x12272))+(((-1.0)*x12263*x12273)));
evalcond[1]=((((-1.0)*r12*x12272))+(((-1.0)*x12267*x12273))+((r11*x12274)));
evalcond[2]=((-1.0)+(((-1.0)*x12265*x12273))+(((-1.0)*r02*x12272))+((r01*x12274)));
evalcond[3]=(((r01*x12259*x12262))+((r00*x12261))+((r02*x12275))+(((-1.0)*cj3*x12265*x12272))+((r01*x12270)));
evalcond[4]=((((-1.0)*r02*sj3*x12273))+((r00*x12262))+((r01*x12266))+(((-1.0)*r01*x12261*x12272))+((x12265*x12276)));
evalcond[5]=(((cj1*sj2))+x12269+((r22*x12275))+((r20*x12261))+(((-1.0)*cj3*x12263*x12272))+((r21*x12259*x12262))+((sj3*x12264)));
evalcond[6]=(((r10*x12261))+(((-1.0)*x12271))+(((-1.0)*r10*x12266*x12272))+((r11*x12259*x12262))+x12260+((r12*x12275))+((r11*x12270)));
evalcond[7]=(((cj3*x12264))+(((-1.0)*x12271))+x12260+(((-1.0)*r22*sj3*x12273))+((r20*x12262))+((x12263*x12276))+(((-1.0)*r21*x12261*x12272)));
evalcond[8]=((((-1.0)*r12*sj3*x12273))+((r10*x12262))+((r11*x12266))+((x12267*x12276))+(((-1.0)*x12269))+(((-1.0)*r11*x12261*x12272))+(((-1.0)*sj2*x12268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12277 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12277.valid){
continue;
}
CheckValue<IkReal> x12278=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12277.value)+(((1.5707963267949)*(x12278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12279=IKsin(j4);
IkReal x12280=IKcos(j4);
IkReal x12281=(sj1*sj2);
IkReal x12282=(gconst10*sj3);
IkReal x12283=(cj3*gconst10);
IkReal x12284=(gconst11*r20);
IkReal x12285=(gconst11*r21);
IkReal x12286=(gconst11*r00);
IkReal x12287=(cj3*gconst11);
IkReal x12288=(gconst11*r10);
IkReal x12289=((1.0)*cj1);
IkReal x12290=(cj2*sj1);
IkReal x12291=(gconst11*sj3);
IkReal x12292=(cj2*x12289);
IkReal x12293=((1.0)*x12280);
IkReal x12294=((1.0)*x12279);
IkReal x12295=(gconst10*x12279);
IkReal x12296=(cj3*x12279);
IkReal x12297=(sj3*x12280);
evalcond[0]=(((r21*x12295))+(((-1.0)*x12284*x12294))+(((-1.0)*r22*x12293)));
evalcond[1]=(((r11*x12295))+(((-1.0)*x12288*x12294))+(((-1.0)*r12*x12293)));
evalcond[2]=((-1.0)+(((-1.0)*x12286*x12294))+((r01*x12295))+(((-1.0)*r02*x12293)));
evalcond[3]=((((-1.0)*cj3*x12286*x12293))+((r01*x12291))+((r01*x12280*x12283))+((r00*x12282))+((r02*x12296)));
evalcond[4]=((((-1.0)*r02*sj3*x12294))+((x12286*x12297))+((r00*x12283))+((r01*x12287))+(((-1.0)*r01*x12282*x12293)));
evalcond[5]=(((r21*x12280*x12283))+((cj1*sj2))+x12290+(((-1.0)*cj3*x12284*x12293))+((r22*x12296))+((r20*x12282))+((sj3*x12285)));
evalcond[6]=((((-1.0)*x12292))+x12281+((r11*x12291))+((r12*x12296))+((r10*x12282))+((r11*x12280*x12283))+(((-1.0)*r10*x12287*x12293)));
evalcond[7]=((((-1.0)*r22*sj3*x12294))+(((-1.0)*x12292))+x12281+(((-1.0)*r21*x12282*x12293))+((x12284*x12297))+((r20*x12283))+((cj3*x12285)));
evalcond[8]=(((x12288*x12297))+(((-1.0)*sj2*x12289))+(((-1.0)*x12290))+((r11*x12287))+(((-1.0)*r12*sj3*x12294))+(((-1.0)*r11*x12282*x12293))+((r10*x12283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12298=((-1.0)*r11);
CheckValue<IkReal> x12301 = IKatan2WithCheck(IkReal(x12298),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12301.valid){
continue;
}
IkReal x12299=((1.0)*(x12301.value));
IkReal x12300=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12299)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12299)));
IkReal gconst10=(x12298*x12300);
IkReal gconst11=((1.0)*r10*x12300);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12302=gconst10*gconst10;
IkReal x12303=gconst11*gconst11;
IkReal x12304=(gconst10*r21);
IkReal x12305=(cj3*r00);
IkReal x12306=(r00*sj3);
IkReal x12307=((1.0)*gconst11);
IkReal x12308=(gconst10*r20);
IkReal x12309=(r01*sj3);
IkReal x12310=(cj3*gconst11*r01);
IkReal x12311=(r21*x12302);
IkReal x12312=(r20*x12303);
CheckValue<IkReal> x12313=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12304*x12306*x12307))+((x12309*x12311))+(((-1.0)*x12307*x12308*x12309))+((x12306*x12312))+((r02*r22*sj3)))),-1);
if(!x12313.valid){
continue;
}
CheckValue<IkReal> x12314 = IKatan2WithCheck(IkReal((((r22*x12310))+((gconst10*r22*x12305)))),IkReal((((x12305*x12311))+(((-1.0)*x12305*x12307*x12308))+((x12304*x12310))+(((-1.0)*cj3*r01*x12312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12313.value)))+(x12314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12315=IKsin(j4);
IkReal x12316=IKcos(j4);
IkReal x12317=(cj2*sj1);
IkReal x12318=(cj1*sj2);
IkReal x12319=(gconst10*sj3);
IkReal x12320=(cj3*gconst10);
IkReal x12321=(gconst11*r20);
IkReal x12322=(gconst11*r21);
IkReal x12323=(gconst11*r00);
IkReal x12324=(sj1*sj2);
IkReal x12325=(cj3*gconst11);
IkReal x12326=(gconst11*r10);
IkReal x12327=(cj1*cj2);
IkReal x12328=(gconst11*sj3);
IkReal x12329=((1.0)*x12316);
IkReal x12330=((1.0)*x12315);
IkReal x12331=(gconst10*x12315);
IkReal x12332=(cj3*x12315);
IkReal x12333=(sj3*x12316);
IkReal x12334=(x12317+x12318);
evalcond[0]=((((-1.0)*r22*x12329))+(((-1.0)*x12321*x12330))+((r21*x12331)));
evalcond[1]=((((-1.0)*x12326*x12330))+(((-1.0)*r12*x12329))+((r11*x12331)));
evalcond[2]=((1.0)+((r01*x12331))+(((-1.0)*x12323*x12330))+(((-1.0)*r02*x12329)));
evalcond[3]=(((r01*x12328))+((r01*x12316*x12320))+((r00*x12319))+((r02*x12332))+(((-1.0)*cj3*x12323*x12329)));
evalcond[4]=(((r00*x12320))+((r01*x12325))+((x12323*x12333))+(((-1.0)*r01*x12319*x12329))+(((-1.0)*r02*sj3*x12330)));
evalcond[5]=(x12334+((r21*x12316*x12320))+(((-1.0)*cj3*x12321*x12329))+((sj3*x12322))+((r22*x12332))+((r20*x12319)));
evalcond[6]=(((r10*x12319))+(((-1.0)*r10*x12325*x12329))+x12327+((r12*x12332))+((r11*x12316*x12320))+((r11*x12328))+(((-1.0)*x12324)));
evalcond[7]=(x12334+((x12326*x12333))+(((-1.0)*r11*x12319*x12329))+(((-1.0)*r12*sj3*x12330))+((r10*x12320))+((r11*x12325)));
evalcond[8]=(x12324+((r20*x12320))+((cj3*x12322))+(((-1.0)*r22*sj3*x12330))+(((-1.0)*r21*x12319*x12329))+((x12321*x12333))+(((-1.0)*x12327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12335=((1.0)*gconst11);
CheckValue<IkReal> x12336 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12336.valid){
continue;
}
CheckValue<IkReal> x12337=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12335)))),-1);
if(!x12337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12336.value)+(((1.5707963267949)*(x12337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12338=IKsin(j4);
IkReal x12339=IKcos(j4);
IkReal x12340=(cj2*sj1);
IkReal x12341=(cj1*sj2);
IkReal x12342=(gconst10*sj3);
IkReal x12343=(cj3*gconst10);
IkReal x12344=(gconst11*r20);
IkReal x12345=(gconst11*r21);
IkReal x12346=(gconst11*r00);
IkReal x12347=(sj1*sj2);
IkReal x12348=(cj3*gconst11);
IkReal x12349=(gconst11*r10);
IkReal x12350=(cj1*cj2);
IkReal x12351=(gconst11*sj3);
IkReal x12352=((1.0)*x12339);
IkReal x12353=((1.0)*x12338);
IkReal x12354=(gconst10*x12338);
IkReal x12355=(cj3*x12338);
IkReal x12356=(sj3*x12339);
IkReal x12357=(x12341+x12340);
evalcond[0]=((((-1.0)*x12344*x12353))+((r21*x12354))+(((-1.0)*r22*x12352)));
evalcond[1]=((((-1.0)*x12349*x12353))+((r11*x12354))+(((-1.0)*r12*x12352)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12352))+(((-1.0)*x12346*x12353))+((r01*x12354)));
evalcond[3]=(((r01*x12339*x12343))+((r00*x12342))+((r01*x12351))+((r02*x12355))+(((-1.0)*cj3*x12346*x12352)));
evalcond[4]=((((-1.0)*r01*x12342*x12352))+((r00*x12343))+((x12346*x12356))+((r01*x12348))+(((-1.0)*r02*sj3*x12353)));
evalcond[5]=((((-1.0)*cj3*x12344*x12352))+((r20*x12342))+x12357+((r21*x12339*x12343))+((sj3*x12345))+((r22*x12355)));
evalcond[6]=(x12350+(((-1.0)*r10*x12348*x12352))+((r11*x12351))+((r12*x12355))+((r10*x12342))+((r11*x12339*x12343))+(((-1.0)*x12347)));
evalcond[7]=(x12357+((r11*x12348))+((r10*x12343))+((x12349*x12356))+(((-1.0)*r12*sj3*x12353))+(((-1.0)*r11*x12342*x12352)));
evalcond[8]=((((-1.0)*x12350))+((x12344*x12356))+((r20*x12343))+x12347+((cj3*x12345))+(((-1.0)*r21*x12342*x12352))+(((-1.0)*r22*sj3*x12353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12358=((-1.0)*r11);
IkReal x12359=((-1.0)*r10);
CheckValue<IkReal> x12361 = IKatan2WithCheck(IkReal(x12358),IkReal(x12359),IKFAST_ATAN2_MAGTHRESH);
if(!x12361.valid){
continue;
}
IkReal x12360=((1.0)*(x12361.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12360)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12359);
rxp1_1=(px*r21);
rxp1_2=(px*x12358);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12360)));
IkReal gconst10=x12358;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12362=((-1.0)*r11);
IkReal x12363=((-1.0)*r10);
CheckValue<IkReal> x12365 = IKatan2WithCheck(IkReal(x12362),IkReal(x12363),IKFAST_ATAN2_MAGTHRESH);
if(!x12365.valid){
continue;
}
IkReal x12364=((1.0)*(x12365.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12364)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12363);
rxp1_1=(px*r21);
rxp1_2=(px*x12362);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12364)));
IkReal gconst10=x12362;
IkReal gconst11=((1.0)*r10);
IkReal x12366=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12366))+(((-1.0)*r10*r20*x12366)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12367=((-1.0)*r11);
IkReal x12368=((-1.0)*r10);
CheckValue<IkReal> x12370 = IKatan2WithCheck(IkReal(x12367),IkReal(x12368),IKFAST_ATAN2_MAGTHRESH);
if(!x12370.valid){
continue;
}
IkReal x12369=((1.0)*(x12370.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12369)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12368);
rxp1_1=(px*r21);
rxp1_2=(px*x12367);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12369)));
IkReal gconst10=x12367;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12372=IKPowWithIntegerCheck(r02,-1);
if(!x12372.valid){
continue;
}
IkReal x12371=x12372.value;
CheckValue<IkReal> x12373=IKPowWithIntegerCheck(cj3,-1);
if(!x12373.valid){
continue;
}
if( IKabs((x12371*(x12373.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12371)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12371*(x12373.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12371))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x12371*(x12373.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12371));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12374=IKsin(j4);
IkReal x12375=IKcos(j4);
IkReal x12376=(cj3*r10);
IkReal x12377=((1.0)*gconst11);
IkReal x12378=(sj1*sj2);
IkReal x12379=(gconst11*sj3);
IkReal x12380=(cj3*r11);
IkReal x12381=(cj2*sj1);
IkReal x12382=(gconst10*r20);
IkReal x12383=(gconst10*sj3);
IkReal x12384=((1.0)*cj0);
IkReal x12385=((1.0)*sj0);
IkReal x12386=(cj1*sj2);
IkReal x12387=(cj3*r21);
IkReal x12388=((1.0)*cj1*cj2);
IkReal x12389=(r20*x12375);
IkReal x12390=(gconst10*x12374);
IkReal x12391=(gconst10*x12375);
IkReal x12392=(r02*x12374);
IkReal x12393=((1.0)*x12375);
evalcond[0]=((((-1.0)*r02*x12393))+(((-1.0)*x12385)));
evalcond[1]=((((-1.0)*r20*x12374*x12377))+((r21*x12390)));
evalcond[2]=(cj0+((r11*x12390))+(((-1.0)*r10*x12374*x12377)));
evalcond[3]=(((cj3*x12392))+((cj0*x12378))+(((-1.0)*cj1*cj2*x12384)));
evalcond[4]=((((-1.0)*x12384*x12386))+(((-1.0)*x12381*x12384))+(((-1.0)*sj3*x12392)));
evalcond[5]=(x12386+x12381+((r21*x12379))+((x12387*x12391))+((sj3*x12382))+(((-1.0)*cj3*x12377*x12389)));
evalcond[6]=(((gconst11*x12387))+((cj3*x12382))+(((-1.0)*r21*x12383*x12393))+x12378+(((-1.0)*x12388))+((x12379*x12389)));
evalcond[7]=(((r11*x12379))+((x12380*x12391))+((r10*x12383))+(((-1.0)*x12375*x12376*x12377))+((sj0*x12378))+(((-1.0)*cj1*cj2*x12385)));
evalcond[8]=(((gconst11*x12380))+((gconst10*x12376))+(((-1.0)*x12381*x12385))+((r10*x12375*x12379))+(((-1.0)*r11*x12383*x12393))+(((-1.0)*x12385*x12386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12394=((1.0)*r20);
IkReal x12395=((1.0)*gconst11);
CheckValue<IkReal> x12396=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12395))),-1);
if(!x12396.valid){
continue;
}
CheckValue<IkReal> x12397=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12394))+((cj3*gconst10*r21))),-1);
if(!x12397.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12396.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12397.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12394))+(((-1.0)*r21*sj3*x12395)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12396.value)))+IKsqr(((x12397.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12394))+(((-1.0)*r21*sj3*x12395))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12396.value)), ((x12397.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12394))+(((-1.0)*r21*sj3*x12395))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12398=IKsin(j4);
IkReal x12399=IKcos(j4);
IkReal x12400=(cj3*r10);
IkReal x12401=((1.0)*gconst11);
IkReal x12402=(sj1*sj2);
IkReal x12403=(gconst11*sj3);
IkReal x12404=(cj3*r11);
IkReal x12405=(cj2*sj1);
IkReal x12406=(gconst10*r20);
IkReal x12407=(gconst10*sj3);
IkReal x12408=((1.0)*cj0);
IkReal x12409=((1.0)*sj0);
IkReal x12410=(cj1*sj2);
IkReal x12411=(cj3*r21);
IkReal x12412=((1.0)*cj1*cj2);
IkReal x12413=(r20*x12399);
IkReal x12414=(gconst10*x12398);
IkReal x12415=(gconst10*x12399);
IkReal x12416=(r02*x12398);
IkReal x12417=((1.0)*x12399);
evalcond[0]=((((-1.0)*x12409))+(((-1.0)*r02*x12417)));
evalcond[1]=((((-1.0)*r20*x12398*x12401))+((r21*x12414)));
evalcond[2]=(cj0+((r11*x12414))+(((-1.0)*r10*x12398*x12401)));
evalcond[3]=(((cj3*x12416))+(((-1.0)*cj1*cj2*x12408))+((cj0*x12402)));
evalcond[4]=((((-1.0)*sj3*x12416))+(((-1.0)*x12408*x12410))+(((-1.0)*x12405*x12408)));
evalcond[5]=(((x12411*x12415))+((sj3*x12406))+((r21*x12403))+x12405+x12410+(((-1.0)*cj3*x12401*x12413)));
evalcond[6]=(((gconst11*x12411))+((x12403*x12413))+(((-1.0)*x12412))+((cj3*x12406))+x12402+(((-1.0)*r21*x12407*x12417)));
evalcond[7]=(((x12404*x12415))+(((-1.0)*x12399*x12400*x12401))+((sj0*x12402))+((r10*x12407))+(((-1.0)*cj1*cj2*x12409))+((r11*x12403)));
evalcond[8]=(((r10*x12399*x12403))+(((-1.0)*r11*x12407*x12417))+((gconst10*x12400))+(((-1.0)*x12409*x12410))+((gconst11*x12404))+(((-1.0)*x12405*x12409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12418=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12418.valid){
continue;
}
CheckValue<IkReal> x12419=IKPowWithIntegerCheck(r02,-1);
if(!x12419.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12418.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12419.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12418.value)))+IKsqr(((-1.0)*sj0*(x12419.value)))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12418.value)), ((-1.0)*sj0*(x12419.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12420=IKsin(j4);
IkReal x12421=IKcos(j4);
IkReal x12422=(cj3*r10);
IkReal x12423=((1.0)*gconst11);
IkReal x12424=(sj1*sj2);
IkReal x12425=(gconst11*sj3);
IkReal x12426=(cj3*r11);
IkReal x12427=(cj2*sj1);
IkReal x12428=(gconst10*r20);
IkReal x12429=(gconst10*sj3);
IkReal x12430=((1.0)*cj0);
IkReal x12431=((1.0)*sj0);
IkReal x12432=(cj1*sj2);
IkReal x12433=(cj3*r21);
IkReal x12434=((1.0)*cj1*cj2);
IkReal x12435=(r20*x12421);
IkReal x12436=(gconst10*x12420);
IkReal x12437=(gconst10*x12421);
IkReal x12438=(r02*x12420);
IkReal x12439=((1.0)*x12421);
evalcond[0]=((((-1.0)*x12431))+(((-1.0)*r02*x12439)));
evalcond[1]=(((r21*x12436))+(((-1.0)*r20*x12420*x12423)));
evalcond[2]=(cj0+((r11*x12436))+(((-1.0)*r10*x12420*x12423)));
evalcond[3]=(((cj3*x12438))+(((-1.0)*cj1*cj2*x12430))+((cj0*x12424)));
evalcond[4]=((((-1.0)*x12427*x12430))+(((-1.0)*x12430*x12432))+(((-1.0)*sj3*x12438)));
evalcond[5]=(((r21*x12425))+(((-1.0)*cj3*x12423*x12435))+((x12433*x12437))+x12432+x12427+((sj3*x12428)));
evalcond[6]=(((x12425*x12435))+(((-1.0)*r21*x12429*x12439))+(((-1.0)*x12434))+((cj3*x12428))+((gconst11*x12433))+x12424);
evalcond[7]=(((sj0*x12424))+(((-1.0)*x12421*x12422*x12423))+((r10*x12429))+(((-1.0)*cj1*cj2*x12431))+((r11*x12425))+((x12426*x12437)));
evalcond[8]=((((-1.0)*x12431*x12432))+(((-1.0)*x12427*x12431))+((gconst10*x12422))+(((-1.0)*r11*x12429*x12439))+((r10*x12421*x12425))+((gconst11*x12426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12440=((-1.0)*r11);
CheckValue<IkReal> x12443 = IKatan2WithCheck(IkReal(x12440),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12443.valid){
continue;
}
IkReal x12441=((1.0)*(x12443.value));
IkReal x12442=x11766;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12441)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12441)));
IkReal gconst10=(x12440*x12442);
IkReal gconst11=((1.0)*r10*x12442);
IkReal x12444=r12*r12;
IkReal x12445=((1.0)*sj0);
IkReal x12446=(cj0*r02);
IkReal x12447=x11766;
j4eval[0]=((IKabs((((sj0*x12444*x12447))+(((-1.0)*x12445*x12447))+((r12*x12446*x12447)))))+(IKabs(((((-1.0)*x12446))+(((-1.0)*r12*x12445))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12448=((1.0)*r12);
IkReal x12449=(sj1*sj2);
IkReal x12450=((1.0)*r21);
IkReal x12451=(cj3*gconst11);
IkReal x12452=(r11*sj3);
IkReal x12453=(gconst11*r20);
IkReal x12454=((1.0)*sj3);
IkReal x12455=(cj1*cj2);
IkReal x12456=(gconst10*r21*sj3);
IkReal x12457=(cj3*gconst10*r20);
CheckValue<IkReal> x12458=IKPowWithIntegerCheck(((((-1.0)*x12450*x12452*(gconst10*gconst10)))+((gconst11*r10*x12456))+((gconst10*x12452*x12453))+(((-1.0)*gconst11*r10*x12453*x12454))),-1);
if(!x12458.valid){
continue;
}
CheckValue<IkReal> x12459=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12450))+((sj3*x12453))),-1);
if(!x12459.valid){
continue;
}
if( IKabs(((x12458.value)*(((((-1.0)*x12448*x12449))+((cj0*x12456))+(((-1.0)*r21*x12448*x12451))+((r12*x12455))+(((-1.0)*cj0*x12453*x12454))+(((-1.0)*x12448*x12457)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12459.value)*(((((-1.0)*x12449))+(((-1.0)*x12450*x12451))+(((-1.0)*x12457))+x12455)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12458.value)*(((((-1.0)*x12448*x12449))+((cj0*x12456))+(((-1.0)*r21*x12448*x12451))+((r12*x12455))+(((-1.0)*cj0*x12453*x12454))+(((-1.0)*x12448*x12457))))))+IKsqr(((x12459.value)*(((((-1.0)*x12449))+(((-1.0)*x12450*x12451))+(((-1.0)*x12457))+x12455))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x12458.value)*(((((-1.0)*x12448*x12449))+((cj0*x12456))+(((-1.0)*r21*x12448*x12451))+((r12*x12455))+(((-1.0)*cj0*x12453*x12454))+(((-1.0)*x12448*x12457))))), ((x12459.value)*(((((-1.0)*x12449))+(((-1.0)*x12450*x12451))+(((-1.0)*x12457))+x12455))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12460=IKsin(j4);
IkReal x12461=IKcos(j4);
IkReal x12462=(cj3*r10);
IkReal x12463=(gconst11*r20);
IkReal x12464=(gconst11*sj3);
IkReal x12465=(sj1*sj2);
IkReal x12466=(cj3*r11);
IkReal x12467=(r10*sj3);
IkReal x12468=(gconst10*r01);
IkReal x12469=(gconst10*sj3);
IkReal x12470=(cj2*sj1);
IkReal x12471=((1.0)*sj0);
IkReal x12472=(cj1*sj2);
IkReal x12473=(gconst10*r21);
IkReal x12474=(cj3*gconst10);
IkReal x12475=(cj3*gconst11);
IkReal x12476=((1.0)*cj0);
IkReal x12477=((1.0)*x12460);
IkReal x12478=((1.0)*cj1*cj2);
IkReal x12479=(gconst11*x12461);
IkReal x12480=(sj3*x12461);
IkReal x12481=(gconst10*x12460);
IkReal x12482=((1.0)*x12461);
IkReal x12483=(cj3*x12461);
IkReal x12484=(cj3*x12460);
evalcond[0]=((((-1.0)*x12463*x12477))+((x12460*x12473)));
evalcond[1]=(cj0+(((-1.0)*r12*x12482))+(((-1.0)*gconst11*r10*x12477))+((r11*x12481)));
evalcond[2]=((((-1.0)*r02*x12482))+(((-1.0)*x12471))+(((-1.0)*gconst11*r00*x12477))+((x12460*x12468)));
evalcond[3]=(((x12473*x12483))+((r20*x12469))+(((-1.0)*cj3*x12463*x12482))+x12470+x12472+((r21*x12464)));
evalcond[4]=((((-1.0)*r21*x12469*x12482))+((r20*x12474))+((x12463*x12480))+(((-1.0)*x12478))+x12465+((r21*x12475)));
evalcond[5]=(((r01*x12464))+((r00*x12469))+((r02*x12484))+((cj0*x12465))+(((-1.0)*r00*x12475*x12482))+((x12468*x12483))+(((-1.0)*cj1*cj2*x12476)));
evalcond[6]=(((r12*x12484))+((r11*x12464))+((gconst10*x12461*x12466))+((sj0*x12465))+(((-1.0)*x12462*x12479))+((gconst10*x12467))+(((-1.0)*cj1*cj2*x12471)));
evalcond[7]=((((-1.0)*x12468*x12480))+((r00*x12474))+((r01*x12475))+(((-1.0)*x12472*x12476))+((r00*x12461*x12464))+(((-1.0)*x12470*x12476))+(((-1.0)*r02*sj3*x12477)));
evalcond[8]=(((gconst11*x12466))+((r10*x12461*x12464))+(((-1.0)*r12*sj3*x12477))+(((-1.0)*x12471*x12472))+(((-1.0)*r11*x12469*x12482))+(((-1.0)*x12470*x12471))+((gconst10*x12462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12485=((1.0)*sj0);
IkReal x12486=((1.0)*gconst10);
CheckValue<IkReal> x12487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12486)))),-1);
if(!x12487.valid){
continue;
}
CheckValue<IkReal> x12488 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12485))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12485))+(((-1.0)*cj0*r01*x12486))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12487.value)))+(x12488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12489=IKsin(j4);
IkReal x12490=IKcos(j4);
IkReal x12491=(cj3*r10);
IkReal x12492=(gconst11*r20);
IkReal x12493=(gconst11*sj3);
IkReal x12494=(sj1*sj2);
IkReal x12495=(cj3*r11);
IkReal x12496=(r10*sj3);
IkReal x12497=(gconst10*r01);
IkReal x12498=(gconst10*sj3);
IkReal x12499=(cj2*sj1);
IkReal x12500=((1.0)*sj0);
IkReal x12501=(cj1*sj2);
IkReal x12502=(gconst10*r21);
IkReal x12503=(cj3*gconst10);
IkReal x12504=(cj3*gconst11);
IkReal x12505=((1.0)*cj0);
IkReal x12506=((1.0)*x12489);
IkReal x12507=((1.0)*cj1*cj2);
IkReal x12508=(gconst11*x12490);
IkReal x12509=(sj3*x12490);
IkReal x12510=(gconst10*x12489);
IkReal x12511=((1.0)*x12490);
IkReal x12512=(cj3*x12490);
IkReal x12513=(cj3*x12489);
evalcond[0]=((((-1.0)*x12492*x12506))+((x12489*x12502)));
evalcond[1]=((((-1.0)*r12*x12511))+cj0+(((-1.0)*gconst11*r10*x12506))+((r11*x12510)));
evalcond[2]=((((-1.0)*gconst11*r00*x12506))+(((-1.0)*x12500))+(((-1.0)*r02*x12511))+((x12489*x12497)));
evalcond[3]=(((x12502*x12512))+((r20*x12498))+((r21*x12493))+(((-1.0)*cj3*x12492*x12511))+x12501+x12499);
evalcond[4]=(((x12492*x12509))+(((-1.0)*x12507))+((r20*x12503))+((r21*x12504))+x12494+(((-1.0)*r21*x12498*x12511)));
evalcond[5]=(((r00*x12498))+((r01*x12493))+(((-1.0)*r00*x12504*x12511))+(((-1.0)*cj1*cj2*x12505))+((cj0*x12494))+((r02*x12513))+((x12497*x12512)));
evalcond[6]=((((-1.0)*x12491*x12508))+((r12*x12513))+((sj0*x12494))+(((-1.0)*cj1*cj2*x12500))+((gconst10*x12496))+((gconst10*x12490*x12495))+((r11*x12493)));
evalcond[7]=((((-1.0)*x12497*x12509))+(((-1.0)*r02*sj3*x12506))+((r01*x12504))+((r00*x12503))+((r00*x12490*x12493))+(((-1.0)*x12501*x12505))+(((-1.0)*x12499*x12505)));
evalcond[8]=(((r10*x12490*x12493))+((gconst11*x12495))+(((-1.0)*r12*sj3*x12506))+((gconst10*x12491))+(((-1.0)*x12500*x12501))+(((-1.0)*r11*x12498*x12511))+(((-1.0)*x12499*x12500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12514=gconst10*gconst10;
IkReal x12515=r21*r21;
IkReal x12516=gconst11*gconst11;
IkReal x12517=r20*r20;
IkReal x12518=((1.0)*cj3);
IkReal x12519=(r20*sj3);
IkReal x12520=(gconst10*gconst11);
IkReal x12521=(cj2*sj1);
IkReal x12522=(gconst10*r21);
IkReal x12523=(cj1*sj2);
IkReal x12524=((1.0)*gconst11*r20);
CheckValue<IkReal> x12525 = IKatan2WithCheck(IkReal((((r22*x12523))+((r22*x12521))+((gconst11*r21*r22*sj3))+((gconst10*r22*x12519)))),IkReal(((((-1.0)*x12521*x12524))+((x12521*x12522))+(((-1.0)*x12523*x12524))+((x12522*x12523))+((r21*x12514*x12519))+(((-1.0)*r21*x12516*x12519))+(((-1.0)*sj3*x12517*x12520))+((sj3*x12515*x12520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12525.valid){
continue;
}
CheckValue<IkReal> x12526=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12518*(r22*r22)))+(((-1.0)*x12516*x12517*x12518))+(((-1.0)*x12514*x12515*x12518))+(((2.0)*cj3*r20*r21*x12520)))),-1);
if(!x12526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12525.value)+(((1.5707963267949)*(x12526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12527=IKsin(j4);
IkReal x12528=IKcos(j4);
IkReal x12529=(cj3*r10);
IkReal x12530=(gconst11*r20);
IkReal x12531=(gconst11*sj3);
IkReal x12532=(sj1*sj2);
IkReal x12533=(gconst11*r00);
IkReal x12534=(cj3*r11);
IkReal x12535=(gconst10*sj3);
IkReal x12536=(cj2*sj1);
IkReal x12537=(cj3*r01);
IkReal x12538=((1.0)*sj0);
IkReal x12539=(cj1*sj2);
IkReal x12540=(cj3*r21);
IkReal x12541=(cj3*gconst10);
IkReal x12542=((1.0)*cj0);
IkReal x12543=((1.0)*x12528);
IkReal x12544=((1.0)*x12527);
IkReal x12545=((1.0)*cj1*cj2);
IkReal x12546=(cj3*x12527);
IkReal x12547=(gconst10*x12527);
IkReal x12548=(gconst10*x12528);
evalcond[0]=((((-1.0)*x12530*x12544))+(((-1.0)*r22*x12543))+((r21*x12547)));
evalcond[1]=(cj0+((r11*x12547))+(((-1.0)*gconst11*r10*x12544))+(((-1.0)*r12*x12543)));
evalcond[2]=(((r01*x12547))+(((-1.0)*x12533*x12544))+(((-1.0)*x12538))+(((-1.0)*r02*x12543)));
evalcond[3]=(((r20*x12535))+((r21*x12531))+((r22*x12546))+((x12540*x12548))+x12536+x12539+(((-1.0)*cj3*x12530*x12543)));
evalcond[4]=((((-1.0)*r21*x12535*x12543))+((r20*x12541))+((sj3*x12528*x12530))+((gconst11*x12540))+x12532+(((-1.0)*r22*sj3*x12544))+(((-1.0)*x12545)));
evalcond[5]=(((r00*x12535))+((x12537*x12548))+(((-1.0)*cj3*x12533*x12543))+(((-1.0)*cj1*cj2*x12542))+((r02*x12546))+((r01*x12531))+((cj0*x12532)));
evalcond[6]=(((r11*x12531))+(((-1.0)*gconst11*x12529*x12543))+((r12*x12546))+((x12534*x12548))+(((-1.0)*cj1*cj2*x12538))+((r10*x12535))+((sj0*x12532)));
evalcond[7]=(((r00*x12528*x12531))+((r00*x12541))+(((-1.0)*x12536*x12542))+(((-1.0)*x12539*x12542))+(((-1.0)*r02*sj3*x12544))+(((-1.0)*r01*x12535*x12543))+((gconst11*x12537)));
evalcond[8]=((((-1.0)*x12538*x12539))+(((-1.0)*r12*sj3*x12544))+((gconst10*x12529))+(((-1.0)*r11*x12535*x12543))+((r10*x12528*x12531))+(((-1.0)*x12536*x12538))+((gconst11*x12534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12549=((1.0)*sj0);
IkReal x12550=((1.0)*gconst10);
CheckValue<IkReal> x12551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12550))+(((-1.0)*gconst11*r21)))),-1);
if(!x12551.valid){
continue;
}
CheckValue<IkReal> x12552 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12549)))),IkReal(((((-1.0)*gconst10*r11*x12549))+(((-1.0)*cj0*r01*x12550))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12551.value)))+(x12552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12553=IKsin(j4);
IkReal x12554=IKcos(j4);
IkReal x12555=(cj3*r10);
IkReal x12556=(gconst11*r20);
IkReal x12557=(gconst11*sj3);
IkReal x12558=(sj1*sj2);
IkReal x12559=(gconst11*r00);
IkReal x12560=(cj3*r11);
IkReal x12561=(gconst10*sj3);
IkReal x12562=(cj2*sj1);
IkReal x12563=(cj3*r01);
IkReal x12564=((1.0)*sj0);
IkReal x12565=(cj1*sj2);
IkReal x12566=(cj3*r21);
IkReal x12567=(cj3*gconst10);
IkReal x12568=((1.0)*cj0);
IkReal x12569=((1.0)*x12554);
IkReal x12570=((1.0)*x12553);
IkReal x12571=((1.0)*cj1*cj2);
IkReal x12572=(cj3*x12553);
IkReal x12573=(gconst10*x12553);
IkReal x12574=(gconst10*x12554);
evalcond[0]=((((-1.0)*r22*x12569))+((r21*x12573))+(((-1.0)*x12556*x12570)));
evalcond[1]=((((-1.0)*gconst11*r10*x12570))+cj0+(((-1.0)*r12*x12569))+((r11*x12573)));
evalcond[2]=((((-1.0)*r02*x12569))+((r01*x12573))+(((-1.0)*x12559*x12570))+(((-1.0)*x12564)));
evalcond[3]=(((r22*x12572))+((x12566*x12574))+((r20*x12561))+((r21*x12557))+x12562+x12565+(((-1.0)*cj3*x12556*x12569)));
evalcond[4]=(((gconst11*x12566))+((sj3*x12554*x12556))+((r20*x12567))+(((-1.0)*x12571))+(((-1.0)*r22*sj3*x12570))+(((-1.0)*r21*x12561*x12569))+x12558);
evalcond[5]=((((-1.0)*cj3*x12559*x12569))+((r01*x12557))+((x12563*x12574))+((r02*x12572))+((r00*x12561))+((cj0*x12558))+(((-1.0)*cj1*cj2*x12568)));
evalcond[6]=((((-1.0)*gconst11*x12555*x12569))+((sj0*x12558))+((r11*x12557))+((r12*x12572))+((r10*x12561))+(((-1.0)*cj1*cj2*x12564))+((x12560*x12574)));
evalcond[7]=((((-1.0)*x12565*x12568))+((gconst11*x12563))+((r00*x12554*x12557))+(((-1.0)*x12562*x12568))+((r00*x12567))+(((-1.0)*r01*x12561*x12569))+(((-1.0)*r02*sj3*x12570)));
evalcond[8]=((((-1.0)*r11*x12561*x12569))+(((-1.0)*x12564*x12565))+((gconst11*x12560))+((gconst10*x12555))+(((-1.0)*x12562*x12564))+((r10*x12554*x12557))+(((-1.0)*r12*sj3*x12570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12575=((1.0)*gconst11);
CheckValue<IkReal> x12576 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12576.valid){
continue;
}
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12575)))),-1);
if(!x12577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12576.value)+(((1.5707963267949)*(x12577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12578=IKsin(j4);
IkReal x12579=IKcos(j4);
IkReal x12580=(cj3*r10);
IkReal x12581=(gconst11*r20);
IkReal x12582=(gconst11*sj3);
IkReal x12583=(sj1*sj2);
IkReal x12584=(gconst11*r00);
IkReal x12585=(cj3*r11);
IkReal x12586=(gconst10*sj3);
IkReal x12587=(cj2*sj1);
IkReal x12588=(cj3*r01);
IkReal x12589=((1.0)*sj0);
IkReal x12590=(cj1*sj2);
IkReal x12591=(cj3*r21);
IkReal x12592=(cj3*gconst10);
IkReal x12593=((1.0)*cj0);
IkReal x12594=((1.0)*x12579);
IkReal x12595=((1.0)*x12578);
IkReal x12596=((1.0)*cj1*cj2);
IkReal x12597=(cj3*x12578);
IkReal x12598=(gconst10*x12578);
IkReal x12599=(gconst10*x12579);
evalcond[0]=((((-1.0)*r22*x12594))+((r21*x12598))+(((-1.0)*x12581*x12595)));
evalcond[1]=(cj0+(((-1.0)*r12*x12594))+(((-1.0)*gconst11*r10*x12595))+((r11*x12598)));
evalcond[2]=(((r01*x12598))+(((-1.0)*r02*x12594))+(((-1.0)*x12584*x12595))+(((-1.0)*x12589)));
evalcond[3]=(((r20*x12586))+((r21*x12582))+(((-1.0)*cj3*x12581*x12594))+((r22*x12597))+((x12591*x12599))+x12587+x12590);
evalcond[4]=(((gconst11*x12591))+((sj3*x12579*x12581))+(((-1.0)*r21*x12586*x12594))+(((-1.0)*r22*sj3*x12595))+(((-1.0)*x12596))+x12583+((r20*x12592)));
evalcond[5]=(((r00*x12586))+((r01*x12582))+((cj0*x12583))+(((-1.0)*cj3*x12584*x12594))+((r02*x12597))+(((-1.0)*cj1*cj2*x12593))+((x12588*x12599)));
evalcond[6]=(((r12*x12597))+((sj0*x12583))+((x12585*x12599))+(((-1.0)*gconst11*x12580*x12594))+(((-1.0)*cj1*cj2*x12589))+((r11*x12582))+((r10*x12586)));
evalcond[7]=(((gconst11*x12588))+(((-1.0)*x12590*x12593))+((r00*x12592))+(((-1.0)*x12587*x12593))+((r00*x12579*x12582))+(((-1.0)*r01*x12586*x12594))+(((-1.0)*r02*sj3*x12595)));
evalcond[8]=(((gconst11*x12585))+(((-1.0)*x12589*x12590))+(((-1.0)*r11*x12586*x12594))+(((-1.0)*x12587*x12589))+((r10*x12579*x12582))+((gconst10*x12580))+(((-1.0)*r12*sj3*x12595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12600=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12600;
j4eval[1]=IKsign(x12600);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12601=((1.0)*cj5);
IkReal x12602=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12601)));
j4eval[0]=x12602;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12601))))));
j4eval[2]=IKsign(x12602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12603=cj5*cj5;
IkReal x12604=(cj3*r21);
IkReal x12605=(cj5*sj5);
IkReal x12606=((1.0)*cj3);
IkReal x12607=(((r11*x12603*x12604))+((r10*x12604*x12605))+(((-1.0)*r12*r22*x12606))+(((-1.0)*r10*r20*x12603*x12606))+((cj3*r11*r20*x12605))+(((-1.0)*r11*x12604)));
j4eval[0]=x12607;
j4eval[1]=IKsign(x12607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12608=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12608;
j4eval[1]=IKsign(x12608);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12609=((1.0)*cj5);
IkReal x12610=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12609)));
j4eval[0]=x12610;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12609))))));
j4eval[2]=IKsign(x12610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12611=cj5*cj5;
IkReal x12612=r11*r11;
IkReal x12613=(r11*sj5);
IkReal x12614=(cj5*r10);
IkReal x12615=((r12*r12)+(((-1.0)*x12611*x12612))+((x12611*(r10*r10)))+(((-2.0)*x12613*x12614))+x12612);
j4eval[0]=x12615;
j4eval[1]=IKsign(x12615);
j4eval[2]=((IKabs(((((-1.0)*x12613))+x12614)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12616=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12616);
rxp1_1=(px*r21);
rxp1_2=(r11*x12616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12617=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12617);
rxp1_1=(px*r21);
rxp1_2=(r11*x12617);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12618=((1.0)*sj1);
CheckValue<IkReal> x12619=IKPowWithIntegerCheck(r02,-1);
if(!x12619.valid){
continue;
}
CheckValue<IkReal> x12620=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12620.valid){
continue;
}
if( IKabs(((x12619.value)*(((((-1.0)*cj2*x12618))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12620.value)*(((((-1.0)*sj2*x12618))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12619.value)*(((((-1.0)*cj2*x12618))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12620.value)*(((((-1.0)*sj2*x12618))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x12619.value)*(((((-1.0)*cj2*x12618))+(((-1.0)*cj1*sj2))))), ((x12620.value)*(((((-1.0)*sj2*x12618))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12621=IKsin(j4);
IkReal x12622=IKcos(j4);
IkReal x12623=(cj5*r20);
IkReal x12624=((1.0)*cj2);
IkReal x12625=(cj5*r10);
IkReal x12626=((1.0)*x12621);
IkReal x12627=(sj5*x12621);
IkReal x12628=((1.0)*sj5*x12622);
evalcond[0]=((-1.0)*r02*x12622);
evalcond[1]=((((-1.0)*x12623*x12626))+((r21*x12627)));
evalcond[2]=((((-1.0)*r11*x12628))+((x12622*x12625)));
evalcond[3]=((1.0)+(((-1.0)*x12625*x12626))+((r11*x12627)));
evalcond[4]=((((-1.0)*r02*x12626))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12624)));
evalcond[5]=((((-1.0)*r21*x12628))+((sj1*sj2))+((x12622*x12623))+(((-1.0)*cj1*x12624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12629=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12629.valid){
continue;
}
CheckValue<IkReal> x12630=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12630.valid){
continue;
}
if( IKabs(((-1.0)*(x12629.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12629.value)))+IKsqr(((x12630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x12629.value)), ((x12630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12631=IKsin(j4);
IkReal x12632=IKcos(j4);
IkReal x12633=(cj5*r20);
IkReal x12634=((1.0)*cj2);
IkReal x12635=(cj5*r10);
IkReal x12636=((1.0)*x12631);
IkReal x12637=(sj5*x12631);
IkReal x12638=((1.0)*sj5*x12632);
evalcond[0]=((-1.0)*r02*x12632);
evalcond[1]=((((-1.0)*x12633*x12636))+((r21*x12637)));
evalcond[2]=((((-1.0)*r11*x12638))+((x12632*x12635)));
evalcond[3]=((1.0)+((r11*x12637))+(((-1.0)*x12635*x12636)));
evalcond[4]=((((-1.0)*sj1*x12634))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12636)));
evalcond[5]=((((-1.0)*r21*x12638))+((sj1*sj2))+(((-1.0)*cj1*x12634))+((x12632*x12633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12639=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12639);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12639);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12640=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12640);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12640);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12641=IKPowWithIntegerCheck(r22,-1);
if(!x12641.valid){
continue;
}
CheckValue<IkReal> x12642=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12642.valid){
continue;
}
if( IKabs(((x12641.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12642.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12641.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12642.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x12641.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12642.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12643=IKsin(j4);
IkReal x12644=IKcos(j4);
IkReal x12645=((1.0)*cj2);
IkReal x12646=(cj5*x12644);
IkReal x12647=(sj5*x12643);
IkReal x12648=((1.0)*sj5*x12644);
IkReal x12649=((1.0)*cj5*x12643);
evalcond[0]=((-1.0)*r22*x12644);
evalcond[1]=(((r01*x12647))+(((-1.0)*r00*x12649)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12643))+(((-1.0)*cj1*x12645)));
evalcond[3]=(((r10*x12646))+(((-1.0)*r11*x12648)));
evalcond[4]=((1.0)+((r11*x12647))+(((-1.0)*r10*x12649)));
evalcond[5]=((((-1.0)*sj1*x12645))+(((-1.0)*cj1*sj2))+((r00*x12646))+(((-1.0)*r01*x12648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12650=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12650.valid){
continue;
}
CheckValue<IkReal> x12651=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12651.valid){
continue;
}
if( IKabs(((-1.0)*(x12650.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12651.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12650.value)))+IKsqr(((x12651.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x12650.value)), ((x12651.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12652=IKsin(j4);
IkReal x12653=IKcos(j4);
IkReal x12654=((1.0)*cj2);
IkReal x12655=(cj5*x12653);
IkReal x12656=(sj5*x12652);
IkReal x12657=((1.0)*sj5*x12653);
IkReal x12658=((1.0)*cj5*x12652);
evalcond[0]=((-1.0)*r22*x12653);
evalcond[1]=((((-1.0)*r00*x12658))+((r01*x12656)));
evalcond[2]=((((-1.0)*r22*x12652))+(((-1.0)*cj1*x12654))+((sj1*sj2)));
evalcond[3]=(((r10*x12655))+(((-1.0)*r11*x12657)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12658))+((r11*x12656)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12657))+(((-1.0)*sj1*x12654))+((r00*x12655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12659=cj5*cj5;
IkReal x12660=r11*r11;
IkReal x12661=(cj5*r10);
IkReal x12662=(r11*sj5);
CheckValue<IkReal> x12663 = IKatan2WithCheck(IkReal(((((-1.0)*x12662))+x12661)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12663.valid){
continue;
}
CheckValue<IkReal> x12664=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12661*x12662))+(((-1.0)*x12659*x12660))+x12660+((x12659*(r10*r10))))),-1);
if(!x12664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12663.value)+(((1.5707963267949)*(x12664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12665=IKsin(j4);
IkReal x12666=IKcos(j4);
IkReal x12667=(cj5*r10);
IkReal x12668=(r01*sj5);
IkReal x12669=((1.0)*cj2);
IkReal x12670=(cj5*r00);
IkReal x12671=(cj5*r20);
IkReal x12672=((1.0)*x12666);
IkReal x12673=((1.0)*x12665);
IkReal x12674=(sj5*x12665);
evalcond[0]=(((r21*x12674))+(((-1.0)*r22*x12672))+(((-1.0)*x12671*x12673)));
evalcond[1]=((((-1.0)*x12670*x12673))+(((-1.0)*r02*x12672))+((x12665*x12668)));
evalcond[2]=((((-1.0)*r12*x12673))+(((-1.0)*r11*sj5*x12672))+((x12666*x12667)));
evalcond[3]=((1.0)+(((-1.0)*x12667*x12673))+(((-1.0)*r12*x12672))+((r11*x12674)));
evalcond[4]=((((-1.0)*cj1*x12669))+(((-1.0)*r22*x12673))+((sj1*sj2))+(((-1.0)*r21*sj5*x12672))+((x12666*x12671)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12673))+((x12666*x12670))+(((-1.0)*sj1*x12669))+(((-1.0)*x12668*x12672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12675=((1.0)*cj5);
CheckValue<IkReal> x12676 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12676.valid){
continue;
}
CheckValue<IkReal> x12677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12675)))),-1);
if(!x12677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12676.value)+(((1.5707963267949)*(x12677.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12678=IKsin(j4);
IkReal x12679=IKcos(j4);
IkReal x12680=(cj5*r10);
IkReal x12681=(r01*sj5);
IkReal x12682=((1.0)*cj2);
IkReal x12683=(cj5*r00);
IkReal x12684=(cj5*r20);
IkReal x12685=((1.0)*x12679);
IkReal x12686=((1.0)*x12678);
IkReal x12687=(sj5*x12678);
evalcond[0]=(((r21*x12687))+(((-1.0)*x12684*x12686))+(((-1.0)*r22*x12685)));
evalcond[1]=(((x12678*x12681))+(((-1.0)*r02*x12685))+(((-1.0)*x12683*x12686)));
evalcond[2]=(((x12679*x12680))+(((-1.0)*r12*x12686))+(((-1.0)*r11*sj5*x12685)));
evalcond[3]=((1.0)+((r11*x12687))+(((-1.0)*r12*x12685))+(((-1.0)*x12680*x12686)));
evalcond[4]=((((-1.0)*r21*sj5*x12685))+(((-1.0)*cj1*x12682))+((x12679*x12684))+((sj1*sj2))+(((-1.0)*r22*x12686)));
evalcond[5]=((((-1.0)*sj1*x12682))+((x12679*x12683))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12686))+(((-1.0)*x12681*x12685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12688=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12688.valid){
continue;
}
CheckValue<IkReal> x12689 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12688.value)))+(x12689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12690=IKsin(j4);
IkReal x12691=IKcos(j4);
IkReal x12692=(cj5*r10);
IkReal x12693=(r01*sj5);
IkReal x12694=((1.0)*cj2);
IkReal x12695=(cj5*r00);
IkReal x12696=(cj5*r20);
IkReal x12697=((1.0)*x12691);
IkReal x12698=((1.0)*x12690);
IkReal x12699=(sj5*x12690);
evalcond[0]=((((-1.0)*r22*x12697))+((r21*x12699))+(((-1.0)*x12696*x12698)));
evalcond[1]=((((-1.0)*r02*x12697))+((x12690*x12693))+(((-1.0)*x12695*x12698)));
evalcond[2]=((((-1.0)*r12*x12698))+(((-1.0)*r11*sj5*x12697))+((x12691*x12692)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12697))+(((-1.0)*x12692*x12698))+((r11*x12699)));
evalcond[4]=((((-1.0)*cj1*x12694))+(((-1.0)*r22*x12698))+((sj1*sj2))+(((-1.0)*r21*sj5*x12697))+((x12691*x12696)));
evalcond[5]=((((-1.0)*r02*x12698))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12694))+(((-1.0)*x12693*x12697))+((x12691*x12695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12700=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12700;
j4eval[1]=IKsign(x12700);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12701=((1.0)*cj5);
IkReal x12702=((((-1.0)*r01*x12701))+(((-1.0)*r00*sj5)));
j4eval[0]=x12702;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12701)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12703=(sj1*sj2);
IkReal x12704=(cj5*r10);
IkReal x12705=(r11*sj5);
IkReal x12706=(cj1*cj2);
IkReal x12707=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12707;
j4eval[1]=((IKabs(((((-1.0)*x12705*x12706))+(((-1.0)*x12703*x12704))+((x12703*x12705))+((x12704*x12706)))))+(IKabs((((r12*x12706))+(((-1.0)*r12*x12703))))));
j4eval[2]=IKsign(x12707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12708=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12708);
rxp1_1=(px*r21);
rxp1_2=(r11*x12708);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12709=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12709);
rxp1_1=(px*r21);
rxp1_2=(r11*x12709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12710=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12710))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12710)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12711=((1.0)*cj5);
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(((((-1.0)*r10*x12711))+((r11*sj5))),-1);
if(!x12712.valid){
continue;
}
CheckValue<IkReal> x12713=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12711))),-1);
if(!x12713.valid){
continue;
}
if( IKabs(((-1.0)*(x12712.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12713.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12712.value)))+IKsqr(((x12713.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x12712.value)), ((x12713.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12714=IKsin(j4);
IkReal x12715=IKcos(j4);
IkReal x12716=((1.0)*cj2);
IkReal x12717=(r21*sj5);
IkReal x12718=(r11*sj5);
IkReal x12719=((1.0)*cj5*x12714);
IkReal x12720=((1.0)*cj5*x12715);
evalcond[0]=((-1.0)*r02*x12715);
evalcond[1]=(((x12714*x12717))+(((-1.0)*r20*x12719)));
evalcond[2]=(((r02*x12714))+(((-1.0)*sj1*x12716))+(((-1.0)*cj1*sj2)));
evalcond[3]=(((x12715*x12718))+(((-1.0)*r10*x12720)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12719))+((x12714*x12718)));
evalcond[5]=(((x12715*x12717))+((sj1*sj2))+(((-1.0)*r20*x12720))+(((-1.0)*cj1*x12716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12721=IKPowWithIntegerCheck(r02,-1);
if(!x12721.valid){
continue;
}
CheckValue<IkReal> x12722=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12722.valid){
continue;
}
if( IKabs(((x12721.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12722.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12721.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12722.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x12721.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12722.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12723=IKsin(j4);
IkReal x12724=IKcos(j4);
IkReal x12725=((1.0)*cj2);
IkReal x12726=(r21*sj5);
IkReal x12727=(r11*sj5);
IkReal x12728=((1.0)*cj5*x12723);
IkReal x12729=((1.0)*cj5*x12724);
evalcond[0]=((-1.0)*r02*x12724);
evalcond[1]=(((x12723*x12726))+(((-1.0)*r20*x12728)));
evalcond[2]=(((r02*x12723))+(((-1.0)*sj1*x12725))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12729))+((x12724*x12727)));
evalcond[4]=((1.0)+((x12723*x12727))+(((-1.0)*r10*x12728)));
evalcond[5]=(((sj1*sj2))+((x12724*x12726))+(((-1.0)*r20*x12729))+(((-1.0)*cj1*x12725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12730=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12730;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12730);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12731=((1.0)*cj5);
IkReal x12732=((((-1.0)*r21*x12731))+(((-1.0)*r20*sj5)));
j4eval[0]=x12732;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12731))+((r11*sj5))))));
j4eval[2]=IKsign(x12732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12733=cj5*cj5;
IkReal x12734=(r11*r21);
IkReal x12735=((1.0)*r20);
IkReal x12736=(cj5*sj5);
IkReal x12737=((((-1.0)*x12734))+(((-1.0)*r12*r22))+((x12733*x12734))+((r11*r20*x12736))+((r10*r21*x12736))+(((-1.0)*r10*x12733*x12735)));
j4eval[0]=x12737;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12735)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12737);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12738=cj5*cj5;
IkReal x12739=(r21*sj5);
IkReal x12740=(r11*r21);
IkReal x12741=((1.0)*r20);
CheckValue<IkReal> x12742=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12740))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12738*x12741))+((cj5*r10*x12739))+((x12738*x12740))+((cj5*r11*r20*sj5)))),-1);
if(!x12742.valid){
continue;
}
CheckValue<IkReal> x12743 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12741))+x12739)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12742.value)))+(x12743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12744=IKcos(j4);
IkReal x12745=IKsin(j4);
IkReal x12746=(cj5*r00);
IkReal x12747=(cj5*r20);
IkReal x12748=(cj5*r10);
IkReal x12749=((1.0)*x12744);
IkReal x12750=((1.0)*x12745);
IkReal x12751=(sj5*x12744);
IkReal x12752=(sj5*x12745);
evalcond[0]=(((r22*x12745))+(((-1.0)*x12747*x12749))+((r21*x12751)));
evalcond[1]=(((r11*x12751))+(((-1.0)*x12748*x12749))+((r12*x12745)));
evalcond[2]=((((-1.0)*r22*x12749))+(((-1.0)*x12747*x12750))+((r21*x12752)));
evalcond[3]=((((-1.0)*r02*x12749))+(((-1.0)*x12746*x12750))+((r01*x12752)));
evalcond[4]=((-1.0)+((r02*x12745))+(((-1.0)*x12746*x12749))+((r01*x12751)));
evalcond[5]=((1.0)+((r11*x12752))+(((-1.0)*r12*x12749))+(((-1.0)*x12748*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12753=((1.0)*cj5);
CheckValue<IkReal> x12754 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12753)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12754.valid){
continue;
}
CheckValue<IkReal> x12755=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12753))+(((-1.0)*r20*sj5)))),-1);
if(!x12755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12754.value)+(((1.5707963267949)*(x12755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12756=IKcos(j4);
IkReal x12757=IKsin(j4);
IkReal x12758=(cj5*r00);
IkReal x12759=(cj5*r20);
IkReal x12760=(cj5*r10);
IkReal x12761=((1.0)*x12756);
IkReal x12762=((1.0)*x12757);
IkReal x12763=(sj5*x12756);
IkReal x12764=(sj5*x12757);
evalcond[0]=(((r21*x12763))+(((-1.0)*x12759*x12761))+((r22*x12757)));
evalcond[1]=(((r11*x12763))+((r12*x12757))+(((-1.0)*x12760*x12761)));
evalcond[2]=(((r21*x12764))+(((-1.0)*x12759*x12762))+(((-1.0)*r22*x12761)));
evalcond[3]=((((-1.0)*r02*x12761))+(((-1.0)*x12758*x12762))+((r01*x12764)));
evalcond[4]=((-1.0)+((r02*x12757))+(((-1.0)*x12758*x12761))+((r01*x12763)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12761))+((r11*x12764))+(((-1.0)*x12760*x12762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12765 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12765.valid){
continue;
}
CheckValue<IkReal> x12766=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12765.value)+(((1.5707963267949)*(x12766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12767=IKcos(j4);
IkReal x12768=IKsin(j4);
IkReal x12769=(cj5*r00);
IkReal x12770=(cj5*r20);
IkReal x12771=(cj5*r10);
IkReal x12772=((1.0)*x12767);
IkReal x12773=((1.0)*x12768);
IkReal x12774=(sj5*x12767);
IkReal x12775=(sj5*x12768);
evalcond[0]=(((r22*x12768))+((r21*x12774))+(((-1.0)*x12770*x12772)));
evalcond[1]=(((r12*x12768))+(((-1.0)*x12771*x12772))+((r11*x12774)));
evalcond[2]=((((-1.0)*r22*x12772))+((r21*x12775))+(((-1.0)*x12770*x12773)));
evalcond[3]=(((r01*x12775))+(((-1.0)*x12769*x12773))+(((-1.0)*r02*x12772)));
evalcond[4]=((-1.0)+((r01*x12774))+((r02*x12768))+(((-1.0)*x12769*x12772)));
evalcond[5]=((1.0)+(((-1.0)*x12771*x12773))+(((-1.0)*r12*x12772))+((r11*x12775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12776=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12776;
j4eval[1]=IKsign(x12776);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12777=((1.0)*cj5);
IkReal x12778=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12777)));
j4eval[0]=x12778;
j4eval[1]=((IKabs(((((-1.0)*r20*x12777))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12779=cj5*cj5;
IkReal x12780=(r11*r21);
IkReal x12781=((1.0)*r20);
IkReal x12782=(cj5*sj5);
IkReal x12783=(((r10*r21*x12782))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12779*x12781))+(((-1.0)*x12780))+((r11*r20*x12782))+((x12779*x12780)));
j4eval[0]=x12783;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12781)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12783);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12784=cj5*cj5;
IkReal x12785=(r21*sj5);
IkReal x12786=(r11*r21);
IkReal x12787=((1.0)*r20);
CheckValue<IkReal> x12788 = IKatan2WithCheck(IkReal((x12785+(((-1.0)*cj5*x12787)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12788.valid){
continue;
}
CheckValue<IkReal> x12789=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12785))+(((-1.0)*r12*r22))+((x12784*x12786))+(((-1.0)*x12786))+(((-1.0)*r10*x12784*x12787))+((cj5*r11*r20*sj5)))),-1);
if(!x12789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12788.value)+(((1.5707963267949)*(x12789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12790=IKcos(j4);
IkReal x12791=IKsin(j4);
IkReal x12792=(cj5*r00);
IkReal x12793=(cj5*r20);
IkReal x12794=(cj5*r10);
IkReal x12795=((1.0)*x12790);
IkReal x12796=((1.0)*x12791);
IkReal x12797=(sj5*x12790);
IkReal x12798=(sj5*x12791);
evalcond[0]=((((-1.0)*x12793*x12795))+((r21*x12797))+((r22*x12791)));
evalcond[1]=((((-1.0)*x12794*x12795))+((r11*x12797))+((r12*x12791)));
evalcond[2]=((((-1.0)*r22*x12795))+(((-1.0)*x12793*x12796))+((r21*x12798)));
evalcond[3]=((((-1.0)*x12792*x12796))+(((-1.0)*r02*x12795))+((r01*x12798)));
evalcond[4]=((1.0)+((r02*x12791))+(((-1.0)*x12792*x12795))+((r01*x12797)));
evalcond[5]=((1.0)+(((-1.0)*x12794*x12796))+((r11*x12798))+(((-1.0)*r12*x12795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12799=((1.0)*cj5);
CheckValue<IkReal> x12800 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12799))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12800.valid){
continue;
}
CheckValue<IkReal> x12801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12799)))),-1);
if(!x12801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12800.value)+(((1.5707963267949)*(x12801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12802=IKcos(j4);
IkReal x12803=IKsin(j4);
IkReal x12804=(cj5*r00);
IkReal x12805=(cj5*r20);
IkReal x12806=(cj5*r10);
IkReal x12807=((1.0)*x12802);
IkReal x12808=((1.0)*x12803);
IkReal x12809=(sj5*x12802);
IkReal x12810=(sj5*x12803);
evalcond[0]=((((-1.0)*x12805*x12807))+((r21*x12809))+((r22*x12803)));
evalcond[1]=(((r11*x12809))+((r12*x12803))+(((-1.0)*x12806*x12807)));
evalcond[2]=(((r21*x12810))+(((-1.0)*x12805*x12808))+(((-1.0)*r22*x12807)));
evalcond[3]=(((r01*x12810))+(((-1.0)*r02*x12807))+(((-1.0)*x12804*x12808)));
evalcond[4]=((1.0)+((r02*x12803))+((r01*x12809))+(((-1.0)*x12804*x12807)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12807))+((r11*x12810))+(((-1.0)*x12806*x12808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12811=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12811.valid){
continue;
}
CheckValue<IkReal> x12812 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12811.value)))+(x12812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12813=IKcos(j4);
IkReal x12814=IKsin(j4);
IkReal x12815=(cj5*r00);
IkReal x12816=(cj5*r20);
IkReal x12817=(cj5*r10);
IkReal x12818=((1.0)*x12813);
IkReal x12819=((1.0)*x12814);
IkReal x12820=(sj5*x12813);
IkReal x12821=(sj5*x12814);
evalcond[0]=((((-1.0)*x12816*x12818))+((r21*x12820))+((r22*x12814)));
evalcond[1]=((((-1.0)*x12817*x12818))+((r12*x12814))+((r11*x12820)));
evalcond[2]=((((-1.0)*x12816*x12819))+((r21*x12821))+(((-1.0)*r22*x12818)));
evalcond[3]=(((r01*x12821))+(((-1.0)*r02*x12818))+(((-1.0)*x12815*x12819)));
evalcond[4]=((1.0)+((r01*x12820))+((r02*x12814))+(((-1.0)*x12815*x12818)));
evalcond[5]=((1.0)+(((-1.0)*x12817*x12819))+(((-1.0)*r12*x12818))+((r11*x12821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12822=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12822;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12822);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12823=((1.0)*cj5);
IkReal x12824=((((-1.0)*r21*x12823))+(((-1.0)*r20*sj5)));
j4eval[0]=x12824;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12823))+((r11*sj5))))));
j4eval[2]=IKsign(x12824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12825=cj5*cj5;
IkReal x12826=(r11*r21);
IkReal x12827=((1.0)*r20);
IkReal x12828=(cj5*sj5);
IkReal x12829=((((-1.0)*r10*x12825*x12827))+(((-1.0)*r12*r22))+((r11*r20*x12828))+(((-1.0)*x12826))+((x12825*x12826))+((r10*r21*x12828)));
j4eval[0]=x12829;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12827))+((r21*sj5))))));
j4eval[2]=IKsign(x12829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12830=cj5*cj5;
IkReal x12831=(r21*sj5);
IkReal x12832=(r11*r21);
IkReal x12833=((1.0)*r20);
CheckValue<IkReal> x12834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12830*x12832))+(((-1.0)*r10*x12830*x12833))+((cj5*r10*x12831))+(((-1.0)*x12832))+((cj5*r11*r20*sj5)))),-1);
if(!x12834.valid){
continue;
}
CheckValue<IkReal> x12835 = IKatan2WithCheck(IkReal((x12831+(((-1.0)*cj5*x12833)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12834.value)))+(x12835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12836=IKcos(j4);
IkReal x12837=IKsin(j4);
IkReal x12838=(cj5*r00);
IkReal x12839=(cj5*r20);
IkReal x12840=(cj5*r10);
IkReal x12841=((1.0)*x12836);
IkReal x12842=((1.0)*x12837);
IkReal x12843=(sj5*x12836);
IkReal x12844=(sj5*x12837);
evalcond[0]=(((r22*x12837))+(((-1.0)*x12839*x12841))+((r21*x12843)));
evalcond[1]=(((r12*x12837))+(((-1.0)*x12840*x12841))+((r11*x12843)));
evalcond[2]=((((-1.0)*r22*x12841))+(((-1.0)*x12839*x12842))+((r21*x12844)));
evalcond[3]=((((-1.0)*x12838*x12842))+(((-1.0)*r02*x12841))+((r01*x12844)));
evalcond[4]=((-1.0)+(((-1.0)*x12838*x12841))+((r01*x12843))+((r02*x12837)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12841))+(((-1.0)*x12840*x12842))+((r11*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12845=((1.0)*cj5);
CheckValue<IkReal> x12846 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12845)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12846.valid){
continue;
}
CheckValue<IkReal> x12847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12845))+(((-1.0)*r20*sj5)))),-1);
if(!x12847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12846.value)+(((1.5707963267949)*(x12847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12848=IKcos(j4);
IkReal x12849=IKsin(j4);
IkReal x12850=(cj5*r00);
IkReal x12851=(cj5*r20);
IkReal x12852=(cj5*r10);
IkReal x12853=((1.0)*x12848);
IkReal x12854=((1.0)*x12849);
IkReal x12855=(sj5*x12848);
IkReal x12856=(sj5*x12849);
evalcond[0]=((((-1.0)*x12851*x12853))+((r22*x12849))+((r21*x12855)));
evalcond[1]=((((-1.0)*x12852*x12853))+((r11*x12855))+((r12*x12849)));
evalcond[2]=((((-1.0)*x12851*x12854))+(((-1.0)*r22*x12853))+((r21*x12856)));
evalcond[3]=((((-1.0)*x12850*x12854))+(((-1.0)*r02*x12853))+((r01*x12856)));
evalcond[4]=((-1.0)+(((-1.0)*x12850*x12853))+((r01*x12855))+((r02*x12849)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12853))+(((-1.0)*x12852*x12854))+((r11*x12856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12857 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12857.valid){
continue;
}
CheckValue<IkReal> x12858=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12857.value)+(((1.5707963267949)*(x12858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12859=IKcos(j4);
IkReal x12860=IKsin(j4);
IkReal x12861=(cj5*r00);
IkReal x12862=(cj5*r20);
IkReal x12863=(cj5*r10);
IkReal x12864=((1.0)*x12859);
IkReal x12865=((1.0)*x12860);
IkReal x12866=(sj5*x12859);
IkReal x12867=(sj5*x12860);
evalcond[0]=(((r21*x12866))+(((-1.0)*x12862*x12864))+((r22*x12860)));
evalcond[1]=(((r11*x12866))+((r12*x12860))+(((-1.0)*x12863*x12864)));
evalcond[2]=(((r21*x12867))+(((-1.0)*r22*x12864))+(((-1.0)*x12862*x12865)));
evalcond[3]=((((-1.0)*x12861*x12865))+(((-1.0)*r02*x12864))+((r01*x12867)));
evalcond[4]=((-1.0)+(((-1.0)*x12861*x12864))+((r01*x12866))+((r02*x12860)));
evalcond[5]=((1.0)+((r11*x12867))+(((-1.0)*x12863*x12865))+(((-1.0)*r12*x12864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12868=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12868;
j4eval[1]=IKsign(x12868);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12869=((1.0)*cj5);
IkReal x12870=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12869)));
j4eval[0]=x12870;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12869)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12871=cj5*cj5;
IkReal x12872=(r11*r21);
IkReal x12873=((1.0)*r20);
IkReal x12874=(cj5*sj5);
IkReal x12875=(((r11*r20*x12874))+((x12871*x12872))+(((-1.0)*r12*r22))+(((-1.0)*x12872))+((r10*r21*x12874))+(((-1.0)*r10*x12871*x12873)));
j4eval[0]=x12875;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12873)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12876=cj5*cj5;
IkReal x12877=(r21*sj5);
IkReal x12878=(r11*r21);
IkReal x12879=((1.0)*r20);
CheckValue<IkReal> x12880 = IKatan2WithCheck(IkReal((x12877+(((-1.0)*cj5*x12879)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12880.valid){
continue;
}
CheckValue<IkReal> x12881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12876*x12879))+(((-1.0)*x12878))+((x12876*x12878))+((cj5*r10*x12877))+((cj5*r11*r20*sj5)))),-1);
if(!x12881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12880.value)+(((1.5707963267949)*(x12881.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12882=IKcos(j4);
IkReal x12883=IKsin(j4);
IkReal x12884=(cj5*r00);
IkReal x12885=(cj5*r20);
IkReal x12886=(cj5*r10);
IkReal x12887=((1.0)*x12882);
IkReal x12888=((1.0)*x12883);
IkReal x12889=(sj5*x12882);
IkReal x12890=(sj5*x12883);
evalcond[0]=((((-1.0)*x12885*x12887))+((r22*x12883))+((r21*x12889)));
evalcond[1]=((((-1.0)*x12886*x12887))+((r12*x12883))+((r11*x12889)));
evalcond[2]=((((-1.0)*r22*x12887))+((r21*x12890))+(((-1.0)*x12885*x12888)));
evalcond[3]=(((r01*x12890))+(((-1.0)*r02*x12887))+(((-1.0)*x12884*x12888)));
evalcond[4]=((1.0)+(((-1.0)*x12884*x12887))+((r01*x12889))+((r02*x12883)));
evalcond[5]=((1.0)+(((-1.0)*x12886*x12888))+(((-1.0)*r12*x12887))+((r11*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12891=((1.0)*cj5);
CheckValue<IkReal> x12892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12891)))),-1);
if(!x12892.valid){
continue;
}
CheckValue<IkReal> x12893 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12891))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12892.value)))+(x12893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12894=IKcos(j4);
IkReal x12895=IKsin(j4);
IkReal x12896=(cj5*r00);
IkReal x12897=(cj5*r20);
IkReal x12898=(cj5*r10);
IkReal x12899=((1.0)*x12894);
IkReal x12900=((1.0)*x12895);
IkReal x12901=(sj5*x12894);
IkReal x12902=(sj5*x12895);
evalcond[0]=(((r22*x12895))+((r21*x12901))+(((-1.0)*x12897*x12899)));
evalcond[1]=(((r12*x12895))+((r11*x12901))+(((-1.0)*x12898*x12899)));
evalcond[2]=((((-1.0)*r22*x12899))+(((-1.0)*x12897*x12900))+((r21*x12902)));
evalcond[3]=(((r01*x12902))+(((-1.0)*x12896*x12900))+(((-1.0)*r02*x12899)));
evalcond[4]=((1.0)+((r01*x12901))+(((-1.0)*x12896*x12899))+((r02*x12895)));
evalcond[5]=((1.0)+(((-1.0)*x12898*x12900))+((r11*x12902))+(((-1.0)*r12*x12899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12903=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12903.valid){
continue;
}
CheckValue<IkReal> x12904 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12903.value)))+(x12904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12905=IKcos(j4);
IkReal x12906=IKsin(j4);
IkReal x12907=(cj5*r00);
IkReal x12908=(cj5*r20);
IkReal x12909=(cj5*r10);
IkReal x12910=((1.0)*x12905);
IkReal x12911=((1.0)*x12906);
IkReal x12912=(sj5*x12905);
IkReal x12913=(sj5*x12906);
evalcond[0]=((((-1.0)*x12908*x12910))+((r21*x12912))+((r22*x12906)));
evalcond[1]=((((-1.0)*x12909*x12910))+((r12*x12906))+((r11*x12912)));
evalcond[2]=((((-1.0)*x12908*x12911))+((r21*x12913))+(((-1.0)*r22*x12910)));
evalcond[3]=((((-1.0)*r02*x12910))+(((-1.0)*x12907*x12911))+((r01*x12913)));
evalcond[4]=((1.0)+((r02*x12906))+(((-1.0)*x12907*x12910))+((r01*x12912)));
evalcond[5]=((1.0)+(((-1.0)*x12909*x12911))+(((-1.0)*r12*x12910))+((r11*x12913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12914=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12914;
j4eval[1]=IKsign(x12914);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12915=((1.0)*cj5);
IkReal x12916=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12915)));
j4eval[0]=x12916;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12915)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12917=cj5*cj5;
IkReal x12918=(r11*r21);
IkReal x12919=((1.0)*r20);
IkReal x12920=(cj5*sj5);
IkReal x12921=((((-1.0)*r12*r22))+((x12917*x12918))+((r11*r20*x12920))+(((-1.0)*x12918))+(((-1.0)*r10*x12917*x12919))+((r10*r21*x12920)));
j4eval[0]=x12921;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12919))))));
j4eval[2]=IKsign(x12921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12922=cj5*cj5;
IkReal x12923=(r21*sj5);
IkReal x12924=(r11*r21);
IkReal x12925=((1.0)*r20);
CheckValue<IkReal> x12926=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12923))+(((-1.0)*r12*r22))+(((-1.0)*x12924))+(((-1.0)*r10*x12922*x12925))+((x12922*x12924))+((cj5*r11*r20*sj5)))),-1);
if(!x12926.valid){
continue;
}
CheckValue<IkReal> x12927 = IKatan2WithCheck(IkReal((x12923+(((-1.0)*cj5*x12925)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12926.value)))+(x12927.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12928=IKcos(j4);
IkReal x12929=IKsin(j4);
IkReal x12930=(cj5*r00);
IkReal x12931=(cj5*r20);
IkReal x12932=(cj5*r10);
IkReal x12933=((1.0)*x12928);
IkReal x12934=((1.0)*x12929);
IkReal x12935=(sj5*x12928);
IkReal x12936=(sj5*x12929);
evalcond[0]=(((r22*x12929))+((r21*x12935))+(((-1.0)*x12931*x12933)));
evalcond[1]=(((r11*x12935))+(((-1.0)*x12932*x12933))+((r12*x12929)));
evalcond[2]=((((-1.0)*r22*x12933))+((r21*x12936))+(((-1.0)*x12931*x12934)));
evalcond[3]=((((-1.0)*r02*x12933))+(((-1.0)*x12930*x12934))+((r01*x12936)));
evalcond[4]=((1.0)+(((-1.0)*x12930*x12933))+((r02*x12929))+((r01*x12935)));
evalcond[5]=((1.0)+((r11*x12936))+(((-1.0)*r12*x12933))+(((-1.0)*x12932*x12934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12937=((1.0)*cj5);
CheckValue<IkReal> x12938 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12937))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12938.valid){
continue;
}
CheckValue<IkReal> x12939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12937)))),-1);
if(!x12939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12938.value)+(((1.5707963267949)*(x12939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12940=IKcos(j4);
IkReal x12941=IKsin(j4);
IkReal x12942=(cj5*r00);
IkReal x12943=(cj5*r20);
IkReal x12944=(cj5*r10);
IkReal x12945=((1.0)*x12940);
IkReal x12946=((1.0)*x12941);
IkReal x12947=(sj5*x12940);
IkReal x12948=(sj5*x12941);
evalcond[0]=(((r22*x12941))+((r21*x12947))+(((-1.0)*x12943*x12945)));
evalcond[1]=(((r12*x12941))+((r11*x12947))+(((-1.0)*x12944*x12945)));
evalcond[2]=(((r21*x12948))+(((-1.0)*r22*x12945))+(((-1.0)*x12943*x12946)));
evalcond[3]=(((r01*x12948))+(((-1.0)*r02*x12945))+(((-1.0)*x12942*x12946)));
evalcond[4]=((1.0)+((r01*x12947))+((r02*x12941))+(((-1.0)*x12942*x12945)));
evalcond[5]=((1.0)+((r11*x12948))+(((-1.0)*x12944*x12946))+(((-1.0)*r12*x12945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12949=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12949.valid){
continue;
}
CheckValue<IkReal> x12950 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12949.value)))+(x12950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12951=IKcos(j4);
IkReal x12952=IKsin(j4);
IkReal x12953=(cj5*r00);
IkReal x12954=(cj5*r20);
IkReal x12955=(cj5*r10);
IkReal x12956=((1.0)*x12951);
IkReal x12957=((1.0)*x12952);
IkReal x12958=(sj5*x12951);
IkReal x12959=(sj5*x12952);
evalcond[0]=((((-1.0)*x12954*x12956))+((r22*x12952))+((r21*x12958)));
evalcond[1]=((((-1.0)*x12955*x12956))+((r12*x12952))+((r11*x12958)));
evalcond[2]=((((-1.0)*x12954*x12957))+((r21*x12959))+(((-1.0)*r22*x12956)));
evalcond[3]=(((r01*x12959))+(((-1.0)*x12953*x12957))+(((-1.0)*r02*x12956)));
evalcond[4]=((1.0)+((r01*x12958))+(((-1.0)*x12953*x12956))+((r02*x12952)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12956))+(((-1.0)*x12955*x12957))+((r11*x12959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12960=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12960;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12961=((1.0)*cj5);
IkReal x12962=((((-1.0)*r21*x12961))+(((-1.0)*r20*sj5)));
j4eval[0]=x12962;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12961))))));
j4eval[2]=IKsign(x12962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12963=cj5*cj5;
IkReal x12964=(r11*r21);
IkReal x12965=((1.0)*r20);
IkReal x12966=(cj5*sj5);
IkReal x12967=(((r11*r20*x12966))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12963*x12965))+(((-1.0)*x12964))+((r10*r21*x12966))+((x12963*x12964)));
j4eval[0]=x12967;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12965))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12968=cj5*cj5;
IkReal x12969=(r21*sj5);
IkReal x12970=(r11*r21);
IkReal x12971=((1.0)*r20);
CheckValue<IkReal> x12972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12970))+((x12968*x12970))+((cj5*r10*x12969))+(((-1.0)*r10*x12968*x12971))+((cj5*r11*r20*sj5)))),-1);
if(!x12972.valid){
continue;
}
CheckValue<IkReal> x12973 = IKatan2WithCheck(IkReal((x12969+(((-1.0)*cj5*x12971)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12972.value)))+(x12973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12974=IKcos(j4);
IkReal x12975=IKsin(j4);
IkReal x12976=(cj5*r00);
IkReal x12977=(cj5*r20);
IkReal x12978=(cj5*r10);
IkReal x12979=((1.0)*x12974);
IkReal x12980=((1.0)*x12975);
IkReal x12981=(sj5*x12974);
IkReal x12982=(sj5*x12975);
evalcond[0]=(((r21*x12981))+((r22*x12975))+(((-1.0)*x12977*x12979)));
evalcond[1]=(((r11*x12981))+((r12*x12975))+(((-1.0)*x12978*x12979)));
evalcond[2]=((((-1.0)*x12977*x12980))+((r21*x12982))+(((-1.0)*r22*x12979)));
evalcond[3]=(((r01*x12982))+(((-1.0)*r02*x12979))+(((-1.0)*x12976*x12980)));
evalcond[4]=((-1.0)+((r02*x12975))+((r01*x12981))+(((-1.0)*x12976*x12979)));
evalcond[5]=((1.0)+((r11*x12982))+(((-1.0)*r12*x12979))+(((-1.0)*x12978*x12980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12983=((1.0)*cj5);
CheckValue<IkReal> x12984=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12983))+(((-1.0)*r20*sj5)))),-1);
if(!x12984.valid){
continue;
}
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12983))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12984.value)))+(x12985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12986=IKcos(j4);
IkReal x12987=IKsin(j4);
IkReal x12988=(cj5*r00);
IkReal x12989=(cj5*r20);
IkReal x12990=(cj5*r10);
IkReal x12991=((1.0)*x12986);
IkReal x12992=((1.0)*x12987);
IkReal x12993=(sj5*x12986);
IkReal x12994=(sj5*x12987);
evalcond[0]=(((r22*x12987))+((r21*x12993))+(((-1.0)*x12989*x12991)));
evalcond[1]=(((r11*x12993))+(((-1.0)*x12990*x12991))+((r12*x12987)));
evalcond[2]=((((-1.0)*r22*x12991))+((r21*x12994))+(((-1.0)*x12989*x12992)));
evalcond[3]=(((r01*x12994))+(((-1.0)*x12988*x12992))+(((-1.0)*r02*x12991)));
evalcond[4]=((-1.0)+((r01*x12993))+(((-1.0)*x12988*x12991))+((r02*x12987)));
evalcond[5]=((1.0)+((r11*x12994))+(((-1.0)*r12*x12991))+(((-1.0)*x12990*x12992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12995 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12995.valid){
continue;
}
CheckValue<IkReal> x12996=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12995.value)+(((1.5707963267949)*(x12996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12997=IKcos(j4);
IkReal x12998=IKsin(j4);
IkReal x12999=(cj5*r00);
IkReal x13000=(cj5*r20);
IkReal x13001=(cj5*r10);
IkReal x13002=((1.0)*x12997);
IkReal x13003=((1.0)*x12998);
IkReal x13004=(sj5*x12997);
IkReal x13005=(sj5*x12998);
evalcond[0]=(((r22*x12998))+(((-1.0)*x13000*x13002))+((r21*x13004)));
evalcond[1]=((((-1.0)*x13001*x13002))+((r12*x12998))+((r11*x13004)));
evalcond[2]=((((-1.0)*r22*x13002))+(((-1.0)*x13000*x13003))+((r21*x13005)));
evalcond[3]=((((-1.0)*x12999*x13003))+(((-1.0)*r02*x13002))+((r01*x13005)));
evalcond[4]=((-1.0)+(((-1.0)*x12999*x13002))+((r02*x12998))+((r01*x13004)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13002))+(((-1.0)*x13001*x13003))+((r11*x13005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13006=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13006;
j4eval[1]=IKsign(x13006);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13007=((1.0)*cj5);
IkReal x13008=((((-1.0)*r11*x13007))+(((-1.0)*r10*sj5)));
j4eval[0]=x13008;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13007))))));
j4eval[2]=IKsign(x13008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13009=cj5*cj5;
IkReal x13010=(r11*r21);
IkReal x13011=((1.0)*r20);
IkReal x13012=(cj5*sj5);
IkReal x13013=((((-1.0)*r10*x13009*x13011))+(((-1.0)*r12*r22))+((x13009*x13010))+((r11*r20*x13012))+(((-1.0)*x13010))+((r10*r21*x13012)));
j4eval[0]=x13013;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13011)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13013);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13014=cj5*cj5;
IkReal x13015=(r21*sj5);
IkReal x13016=(r11*r21);
IkReal x13017=((1.0)*r20);
CheckValue<IkReal> x13018=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13015))+(((-1.0)*r10*x13014*x13017))+(((-1.0)*r12*r22))+(((-1.0)*x13016))+((x13014*x13016))+((cj5*r11*r20*sj5)))),-1);
if(!x13018.valid){
continue;
}
CheckValue<IkReal> x13019 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13017))+x13015)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13018.value)))+(x13019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13020=IKcos(j4);
IkReal x13021=IKsin(j4);
IkReal x13022=(cj5*r00);
IkReal x13023=(cj5*r20);
IkReal x13024=(cj5*r10);
IkReal x13025=((1.0)*x13020);
IkReal x13026=((1.0)*x13021);
IkReal x13027=(sj5*x13020);
IkReal x13028=(sj5*x13021);
evalcond[0]=(((r21*x13027))+((r22*x13021))+(((-1.0)*x13023*x13025)));
evalcond[1]=((((-1.0)*x13024*x13025))+((r11*x13027))+((r12*x13021)));
evalcond[2]=((((-1.0)*r22*x13025))+((r21*x13028))+(((-1.0)*x13023*x13026)));
evalcond[3]=(((r01*x13028))+(((-1.0)*x13022*x13026))+(((-1.0)*r02*x13025)));
evalcond[4]=((1.0)+((r01*x13027))+((r02*x13021))+(((-1.0)*x13022*x13025)));
evalcond[5]=((1.0)+(((-1.0)*x13024*x13026))+((r11*x13028))+(((-1.0)*r12*x13025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13029=((1.0)*cj5);
CheckValue<IkReal> x13030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13029)))),-1);
if(!x13030.valid){
continue;
}
CheckValue<IkReal> x13031 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13029)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13030.value)))+(x13031.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13032=IKcos(j4);
IkReal x13033=IKsin(j4);
IkReal x13034=(cj5*r00);
IkReal x13035=(cj5*r20);
IkReal x13036=(cj5*r10);
IkReal x13037=((1.0)*x13032);
IkReal x13038=((1.0)*x13033);
IkReal x13039=(sj5*x13032);
IkReal x13040=(sj5*x13033);
evalcond[0]=(((r22*x13033))+(((-1.0)*x13035*x13037))+((r21*x13039)));
evalcond[1]=((((-1.0)*x13036*x13037))+((r11*x13039))+((r12*x13033)));
evalcond[2]=(((r21*x13040))+(((-1.0)*x13035*x13038))+(((-1.0)*r22*x13037)));
evalcond[3]=((((-1.0)*r02*x13037))+(((-1.0)*x13034*x13038))+((r01*x13040)));
evalcond[4]=((1.0)+(((-1.0)*x13034*x13037))+((r01*x13039))+((r02*x13033)));
evalcond[5]=((1.0)+(((-1.0)*x13036*x13038))+((r11*x13040))+(((-1.0)*r12*x13037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13041.valid){
continue;
}
CheckValue<IkReal> x13042 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13041.value)))+(x13042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13043=IKcos(j4);
IkReal x13044=IKsin(j4);
IkReal x13045=(cj5*r00);
IkReal x13046=(cj5*r20);
IkReal x13047=(cj5*r10);
IkReal x13048=((1.0)*x13043);
IkReal x13049=((1.0)*x13044);
IkReal x13050=(sj5*x13043);
IkReal x13051=(sj5*x13044);
evalcond[0]=((((-1.0)*x13046*x13048))+((r21*x13050))+((r22*x13044)));
evalcond[1]=((((-1.0)*x13047*x13048))+((r12*x13044))+((r11*x13050)));
evalcond[2]=((((-1.0)*x13046*x13049))+((r21*x13051))+(((-1.0)*r22*x13048)));
evalcond[3]=((((-1.0)*x13045*x13049))+(((-1.0)*r02*x13048))+((r01*x13051)));
evalcond[4]=((1.0)+(((-1.0)*x13045*x13048))+((r02*x13044))+((r01*x13050)));
evalcond[5]=((1.0)+(((-1.0)*x13047*x13049))+(((-1.0)*r12*x13048))+((r11*x13051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13052=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13052;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13053=((1.0)*cj5);
IkReal x13054=((((-1.0)*r21*x13053))+(((-1.0)*r20*sj5)));
j4eval[0]=x13054;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x13053))))));
j4eval[2]=IKsign(x13054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13055=cj5*cj5;
IkReal x13056=(r11*r21);
IkReal x13057=((1.0)*r20);
IkReal x13058=(cj5*sj5);
IkReal x13059=(((x13055*x13056))+((r10*r21*x13058))+((r11*r20*x13058))+(((-1.0)*x13056))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13055*x13057)));
j4eval[0]=x13059;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13057))))));
j4eval[2]=IKsign(x13059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13060=cj5*cj5;
IkReal x13061=(r21*sj5);
IkReal x13062=(r11*r21);
IkReal x13063=((1.0)*r20);
CheckValue<IkReal> x13064=IKPowWithIntegerCheck(IKsign((((x13060*x13062))+(((-1.0)*x13062))+(((-1.0)*r12*r22))+((cj5*r10*x13061))+(((-1.0)*r10*x13060*x13063))+((cj5*r11*r20*sj5)))),-1);
if(!x13064.valid){
continue;
}
CheckValue<IkReal> x13065 = IKatan2WithCheck(IkReal((x13061+(((-1.0)*cj5*x13063)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13064.value)))+(x13065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13066=IKcos(j4);
IkReal x13067=IKsin(j4);
IkReal x13068=(cj5*r00);
IkReal x13069=(cj5*r20);
IkReal x13070=(cj5*r10);
IkReal x13071=((1.0)*x13066);
IkReal x13072=((1.0)*x13067);
IkReal x13073=(sj5*x13066);
IkReal x13074=(sj5*x13067);
evalcond[0]=(((r21*x13073))+(((-1.0)*x13069*x13071))+((r22*x13067)));
evalcond[1]=(((r12*x13067))+((r11*x13073))+(((-1.0)*x13070*x13071)));
evalcond[2]=(((r21*x13074))+(((-1.0)*x13069*x13072))+(((-1.0)*r22*x13071)));
evalcond[3]=((((-1.0)*r02*x13071))+(((-1.0)*x13068*x13072))+((r01*x13074)));
evalcond[4]=((-1.0)+((r02*x13067))+(((-1.0)*x13068*x13071))+((r01*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13071))+((r11*x13074))+(((-1.0)*x13070*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13075=((1.0)*cj5);
CheckValue<IkReal> x13076 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13075))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13076.valid){
continue;
}
CheckValue<IkReal> x13077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13075))+(((-1.0)*r20*sj5)))),-1);
if(!x13077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13076.value)+(((1.5707963267949)*(x13077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13078=IKcos(j4);
IkReal x13079=IKsin(j4);
IkReal x13080=(cj5*r00);
IkReal x13081=(cj5*r20);
IkReal x13082=(cj5*r10);
IkReal x13083=((1.0)*x13078);
IkReal x13084=((1.0)*x13079);
IkReal x13085=(sj5*x13078);
IkReal x13086=(sj5*x13079);
evalcond[0]=((((-1.0)*x13081*x13083))+((r22*x13079))+((r21*x13085)));
evalcond[1]=((((-1.0)*x13082*x13083))+((r11*x13085))+((r12*x13079)));
evalcond[2]=((((-1.0)*x13081*x13084))+(((-1.0)*r22*x13083))+((r21*x13086)));
evalcond[3]=((((-1.0)*r02*x13083))+(((-1.0)*x13080*x13084))+((r01*x13086)));
evalcond[4]=((-1.0)+((r02*x13079))+(((-1.0)*x13080*x13083))+((r01*x13085)));
evalcond[5]=((1.0)+(((-1.0)*x13082*x13084))+((r11*x13086))+(((-1.0)*r12*x13083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13087 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13087.valid){
continue;
}
CheckValue<IkReal> x13088=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13087.value)+(((1.5707963267949)*(x13088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13089=IKcos(j4);
IkReal x13090=IKsin(j4);
IkReal x13091=(cj5*r00);
IkReal x13092=(cj5*r20);
IkReal x13093=(cj5*r10);
IkReal x13094=((1.0)*x13089);
IkReal x13095=((1.0)*x13090);
IkReal x13096=(sj5*x13089);
IkReal x13097=(sj5*x13090);
evalcond[0]=(((r22*x13090))+(((-1.0)*x13092*x13094))+((r21*x13096)));
evalcond[1]=(((r11*x13096))+((r12*x13090))+(((-1.0)*x13093*x13094)));
evalcond[2]=((((-1.0)*r22*x13094))+(((-1.0)*x13092*x13095))+((r21*x13097)));
evalcond[3]=(((r01*x13097))+(((-1.0)*x13091*x13095))+(((-1.0)*r02*x13094)));
evalcond[4]=((-1.0)+((r02*x13090))+((r01*x13096))+(((-1.0)*x13091*x13094)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13094))+((r11*x13097))+(((-1.0)*x13093*x13095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13098=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13098);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13098);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13099=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13099);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13099);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13100=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13100)));
j4eval[1]=((((-1.0)*r00*x13100))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13101=((1.0)*cj5);
CheckValue<IkReal> x13102=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13101))),-1);
if(!x13102.valid){
continue;
}
CheckValue<IkReal> x13103=IKPowWithIntegerCheck(((((-1.0)*r00*x13101))+((r01*sj5))),-1);
if(!x13103.valid){
continue;
}
if( IKabs(((-1.0)*(x13102.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13103.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13102.value)))+IKsqr(((x13103.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x13102.value)), ((x13103.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13104=IKsin(j4);
IkReal x13105=IKcos(j4);
IkReal x13106=((1.0)*cj5);
IkReal x13107=((1.0)*cj2);
IkReal x13108=(sj5*x13105);
IkReal x13109=(sj5*x13104);
evalcond[0]=((-1.0)*r22*x13105);
evalcond[1]=(((sj1*sj2))+((r22*x13104))+(((-1.0)*cj1*x13107)));
evalcond[2]=(((r01*x13109))+(((-1.0)*r00*x13104*x13106)));
evalcond[3]=((((-1.0)*r10*x13105*x13106))+((r11*x13108)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13104*x13106))+((r11*x13109)));
evalcond[5]=(((r01*x13108))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13107))+(((-1.0)*r00*x13105*x13106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13110=IKPowWithIntegerCheck(r22,-1);
if(!x13110.valid){
continue;
}
CheckValue<IkReal> x13111=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13111.valid){
continue;
}
if( IKabs(((x13110.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13111.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13110.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13111.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x13110.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13111.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13112=IKsin(j4);
IkReal x13113=IKcos(j4);
IkReal x13114=((1.0)*cj5);
IkReal x13115=((1.0)*cj2);
IkReal x13116=(sj5*x13113);
IkReal x13117=(sj5*x13112);
evalcond[0]=((-1.0)*r22*x13113);
evalcond[1]=(((r22*x13112))+((sj1*sj2))+(((-1.0)*cj1*x13115)));
evalcond[2]=((((-1.0)*r00*x13112*x13114))+((r01*x13117)));
evalcond[3]=((((-1.0)*r10*x13113*x13114))+((r11*x13116)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13112*x13114))+((r11*x13117)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13113*x13114))+(((-1.0)*sj1*x13115))+((r01*x13116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13118=(sj1*sj2);
IkReal x13119=(cj5*r10);
IkReal x13120=(r11*sj5);
IkReal x13121=(cj1*cj2);
CheckValue<IkReal> x13122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13122.valid){
continue;
}
CheckValue<IkReal> x13123 = IKatan2WithCheck(IkReal((((x13119*x13121))+(((-1.0)*x13118*x13119))+((x13118*x13120))+(((-1.0)*x13120*x13121)))),IkReal((((r12*x13121))+(((-1.0)*r12*x13118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13122.value)))+(x13123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13124=IKcos(j4);
IkReal x13125=IKsin(j4);
IkReal x13126=(cj5*r00);
IkReal x13127=(cj5*r10);
IkReal x13128=(r21*sj5);
IkReal x13129=((1.0)*cj2);
IkReal x13130=(cj5*r20);
IkReal x13131=((1.0)*x13124);
IkReal x13132=((1.0)*x13125);
IkReal x13133=(sj5*x13125);
IkReal x13134=(sj5*x13124);
evalcond[0]=(((r12*x13125))+((r11*x13134))+(((-1.0)*x13127*x13131)));
evalcond[1]=((((-1.0)*r22*x13131))+((x13125*x13128))+(((-1.0)*x13130*x13132)));
evalcond[2]=(((r01*x13133))+(((-1.0)*r02*x13131))+(((-1.0)*x13126*x13132)));
evalcond[3]=((1.0)+((r11*x13133))+(((-1.0)*x13127*x13132))+(((-1.0)*r12*x13131)));
evalcond[4]=((((-1.0)*cj1*x13129))+((sj1*sj2))+((r22*x13125))+((x13124*x13128))+(((-1.0)*x13130*x13131)));
evalcond[5]=(((r01*x13134))+(((-1.0)*sj1*x13129))+(((-1.0)*cj1*sj2))+((r02*x13125))+(((-1.0)*x13126*x13131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13135=((1.0)*cj5);
CheckValue<IkReal> x13136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13135)))),-1);
if(!x13136.valid){
continue;
}
CheckValue<IkReal> x13137 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13135))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13136.value)))+(x13137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13138=IKcos(j4);
IkReal x13139=IKsin(j4);
IkReal x13140=(cj5*r00);
IkReal x13141=(cj5*r10);
IkReal x13142=(r21*sj5);
IkReal x13143=((1.0)*cj2);
IkReal x13144=(cj5*r20);
IkReal x13145=((1.0)*x13138);
IkReal x13146=((1.0)*x13139);
IkReal x13147=(sj5*x13139);
IkReal x13148=(sj5*x13138);
evalcond[0]=((((-1.0)*x13141*x13145))+((r12*x13139))+((r11*x13148)));
evalcond[1]=((((-1.0)*x13144*x13146))+((x13139*x13142))+(((-1.0)*r22*x13145)));
evalcond[2]=((((-1.0)*x13140*x13146))+(((-1.0)*r02*x13145))+((r01*x13147)));
evalcond[3]=((1.0)+(((-1.0)*x13141*x13146))+((r11*x13147))+(((-1.0)*r12*x13145)));
evalcond[4]=((((-1.0)*x13144*x13145))+((x13138*x13142))+((sj1*sj2))+(((-1.0)*cj1*x13143))+((r22*x13139)));
evalcond[5]=((((-1.0)*x13140*x13145))+(((-1.0)*sj1*x13143))+(((-1.0)*cj1*sj2))+((r02*x13139))+((r01*x13148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13149=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13149.valid){
continue;
}
CheckValue<IkReal> x13150 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13149.value)))+(x13150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13151=IKcos(j4);
IkReal x13152=IKsin(j4);
IkReal x13153=(cj5*r00);
IkReal x13154=(cj5*r10);
IkReal x13155=(r21*sj5);
IkReal x13156=((1.0)*cj2);
IkReal x13157=(cj5*r20);
IkReal x13158=((1.0)*x13151);
IkReal x13159=((1.0)*x13152);
IkReal x13160=(sj5*x13152);
IkReal x13161=(sj5*x13151);
evalcond[0]=(((r11*x13161))+(((-1.0)*x13154*x13158))+((r12*x13152)));
evalcond[1]=(((x13152*x13155))+(((-1.0)*r22*x13158))+(((-1.0)*x13157*x13159)));
evalcond[2]=(((r01*x13160))+(((-1.0)*r02*x13158))+(((-1.0)*x13153*x13159)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13158))+((r11*x13160))+(((-1.0)*x13154*x13159)));
evalcond[4]=(((x13151*x13155))+((sj1*sj2))+(((-1.0)*x13157*x13158))+(((-1.0)*cj1*x13156))+((r22*x13152)));
evalcond[5]=((((-1.0)*sj1*x13156))+((r02*x13152))+((r01*x13161))+(((-1.0)*cj1*sj2))+(((-1.0)*x13153*x13158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13162=((-1.0)*r00);
IkReal x13164 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13164)==0){
continue;
}
IkReal x13163=pow(x13164,-0.5);
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13162),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13165.value));
IkReal gconst19=(r01*x13163);
IkReal gconst20=(x13162*x13163);
CheckValue<IkReal> x13166 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13166.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13166.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13167=((-1.0)*r00);
IkReal x13168=x13163;
CheckValue<IkReal> x13170 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13167),IKFAST_ATAN2_MAGTHRESH);
if(!x13170.valid){
continue;
}
IkReal x13169=((-1.0)*(x13170.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13169;
IkReal gconst18=x13169;
IkReal gconst19=(r01*x13168);
IkReal gconst20=(x13167*x13168);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13171=((-1.0)*r00);
IkReal x13172=x13163;
CheckValue<IkReal> x13174 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13171),IKFAST_ATAN2_MAGTHRESH);
if(!x13174.valid){
continue;
}
IkReal x13173=((-1.0)*(x13174.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13173;
IkReal gconst18=x13173;
IkReal gconst19=(r01*x13172);
IkReal gconst20=(x13171*x13172);
CheckValue<IkReal> x13182=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13182.valid){
continue;
}
IkReal x13175=x13182.value;
IkReal x13176=(sj3*x13175);
IkReal x13177=(r11*x13176);
IkReal x13178=(r21*x13176);
IkReal x13179=(r20*x13176);
IkReal x13180=(r10*x13176);
IkReal x13181=(r00*r01*x13176);
j4eval[0]=IKsign((((r12*r22*sj3))+((r00*r01*r10*x13178))+((r00*r01*r20*x13177))+((r10*x13179*(r00*r00)))+((r21*x13177*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13183=gconst19*gconst19;
IkReal x13184=gconst20*gconst20;
IkReal x13185=(gconst20*sj3);
IkReal x13186=((1.0)*cj3);
IkReal x13187=(r10*sj3);
IkReal x13188=(gconst19*r21);
IkReal x13189=(r11*r20);
IkReal x13190=(cj3*gconst20);
IkReal x13191=((1.0)*r10*r20);
IkReal x13192=(r21*x13183);
CheckValue<IkReal> x13193=IKPowWithIntegerCheck(IKsign((((gconst19*x13189*x13190))+(((-1.0)*r11*x13186*x13192))+(((-1.0)*r12*r22*x13186))+((r10*x13188*x13190))+(((-1.0)*r10*r20*x13184*x13186)))),-1);
if(!x13193.valid){
continue;
}
CheckValue<IkReal> x13194 = IKatan2WithCheck(IkReal((((r11*r22*x13185))+((gconst19*r22*x13187)))),IkReal(((((-1.0)*gconst19*x13185*x13191))+(((-1.0)*sj3*x13184*x13189))+((x13187*x13192))+((r11*x13185*x13188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13193.value)))+(x13194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13195=IKsin(j4);
IkReal x13196=IKcos(j4);
IkReal x13197=(sj1*sj2);
IkReal x13198=(gconst20*sj3);
IkReal x13199=(gconst19*r21);
IkReal x13200=(gconst20*r10);
IkReal x13201=(cj3*gconst19);
IkReal x13202=(gconst19*sj3);
IkReal x13203=((1.0)*cj1);
IkReal x13204=(cj3*gconst20);
IkReal x13205=(cj2*sj1);
IkReal x13206=(cj2*x13203);
IkReal x13207=((1.0)*x13196);
IkReal x13208=((1.0)*x13195);
IkReal x13209=(cj3*x13195);
IkReal x13210=(gconst19*x13195);
evalcond[0]=(((x13195*x13199))+(((-1.0)*r22*x13207))+(((-1.0)*gconst20*r20*x13208)));
evalcond[1]=(((r01*x13210))+(((-1.0)*r02*x13207))+(((-1.0)*gconst20*r00*x13208)));
evalcond[2]=((1.0)+((r11*x13210))+(((-1.0)*r12*x13207))+(((-1.0)*x13200*x13208)));
evalcond[3]=(((r10*x13202))+(((-1.0)*cj3*x13200*x13207))+((r11*x13198))+((r12*x13209))+((r11*x13196*x13201)));
evalcond[4]=(((r10*x13201))+((r11*x13204))+(((-1.0)*r12*sj3*x13208))+((r10*x13196*x13198))+(((-1.0)*r11*x13202*x13207)));
evalcond[5]=(((cj3*x13196*x13199))+((r21*x13198))+((cj1*sj2))+((r22*x13209))+(((-1.0)*r20*x13204*x13207))+x13205+((r20*x13202)));
evalcond[6]=(((r00*x13202))+(((-1.0)*r00*x13204*x13207))+((r02*x13209))+((r01*x13196*x13201))+((r01*x13198))+x13197+(((-1.0)*x13206)));
evalcond[7]=((((-1.0)*r22*sj3*x13208))+((r21*x13204))+(((-1.0)*sj3*x13199*x13207))+x13197+(((-1.0)*x13206))+((r20*x13196*x13198))+((r20*x13201)));
evalcond[8]=((((-1.0)*sj2*x13203))+((r01*x13204))+((r00*x13201))+(((-1.0)*r01*x13202*x13207))+((r00*x13196*x13198))+(((-1.0)*x13205))+(((-1.0)*r02*sj3*x13208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13211=gconst19*gconst19;
IkReal x13212=gconst20*gconst20;
IkReal x13213=(r21*sj3);
IkReal x13214=(cj3*r11);
IkReal x13215=(gconst19*gconst20);
IkReal x13216=((1.0)*r10);
IkReal x13217=(cj3*r10);
IkReal x13218=(r20*x13212);
CheckValue<IkReal> x13219=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13218))+(((-1.0)*r11*r20*sj3*x13215))+((r11*x13211*x13213))+((r12*r22*sj3))+(((-1.0)*x13213*x13215*x13216)))),-1);
if(!x13219.valid){
continue;
}
CheckValue<IkReal> x13220 = IKatan2WithCheck(IkReal((((gconst19*r22*x13217))+((gconst20*r22*x13214)))),IkReal((((r21*x13211*x13217))+(((-1.0)*cj3*r20*x13215*x13216))+((r21*x13214*x13215))+(((-1.0)*x13214*x13218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13219.value)))+(x13220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13221=IKsin(j4);
IkReal x13222=IKcos(j4);
IkReal x13223=(sj1*sj2);
IkReal x13224=(gconst20*sj3);
IkReal x13225=(gconst19*r21);
IkReal x13226=(gconst20*r10);
IkReal x13227=(cj3*gconst19);
IkReal x13228=(gconst19*sj3);
IkReal x13229=((1.0)*cj1);
IkReal x13230=(cj3*gconst20);
IkReal x13231=(cj2*sj1);
IkReal x13232=(cj2*x13229);
IkReal x13233=((1.0)*x13222);
IkReal x13234=((1.0)*x13221);
IkReal x13235=(cj3*x13221);
IkReal x13236=(gconst19*x13221);
evalcond[0]=((((-1.0)*gconst20*r20*x13234))+((x13221*x13225))+(((-1.0)*r22*x13233)));
evalcond[1]=(((r01*x13236))+(((-1.0)*r02*x13233))+(((-1.0)*gconst20*r00*x13234)));
evalcond[2]=((1.0)+(((-1.0)*x13226*x13234))+(((-1.0)*r12*x13233))+((r11*x13236)));
evalcond[3]=(((r10*x13228))+((r11*x13224))+(((-1.0)*cj3*x13226*x13233))+((r12*x13235))+((r11*x13222*x13227)));
evalcond[4]=(((r10*x13222*x13224))+((r10*x13227))+((r11*x13230))+(((-1.0)*r12*sj3*x13234))+(((-1.0)*r11*x13228*x13233)));
evalcond[5]=(((r21*x13224))+((cj1*sj2))+((r22*x13235))+x13231+((r20*x13228))+((cj3*x13222*x13225))+(((-1.0)*r20*x13230*x13233)));
evalcond[6]=(((r01*x13222*x13227))+((r02*x13235))+((r00*x13228))+((r01*x13224))+x13223+(((-1.0)*r00*x13230*x13233))+(((-1.0)*x13232)));
evalcond[7]=((((-1.0)*r22*sj3*x13234))+(((-1.0)*sj3*x13225*x13233))+((r21*x13230))+x13223+((r20*x13227))+(((-1.0)*x13232))+((r20*x13222*x13224)));
evalcond[8]=((((-1.0)*r01*x13228*x13233))+((r01*x13230))+((r00*x13222*x13224))+(((-1.0)*sj2*x13229))+((r00*x13227))+(((-1.0)*x13231))+(((-1.0)*r02*sj3*x13234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13237 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13237.valid){
continue;
}
CheckValue<IkReal> x13238=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13237.value)+(((1.5707963267949)*(x13238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13239=IKsin(j4);
IkReal x13240=IKcos(j4);
IkReal x13241=(sj1*sj2);
IkReal x13242=(gconst20*sj3);
IkReal x13243=(gconst19*r21);
IkReal x13244=(gconst20*r10);
IkReal x13245=(cj3*gconst19);
IkReal x13246=(gconst19*sj3);
IkReal x13247=((1.0)*cj1);
IkReal x13248=(cj3*gconst20);
IkReal x13249=(cj2*sj1);
IkReal x13250=(cj2*x13247);
IkReal x13251=((1.0)*x13240);
IkReal x13252=((1.0)*x13239);
IkReal x13253=(cj3*x13239);
IkReal x13254=(gconst19*x13239);
evalcond[0]=((((-1.0)*r22*x13251))+((x13239*x13243))+(((-1.0)*gconst20*r20*x13252)));
evalcond[1]=((((-1.0)*r02*x13251))+((r01*x13254))+(((-1.0)*gconst20*r00*x13252)));
evalcond[2]=((1.0)+((r11*x13254))+(((-1.0)*r12*x13251))+(((-1.0)*x13244*x13252)));
evalcond[3]=(((r10*x13246))+((r11*x13240*x13245))+((r12*x13253))+((r11*x13242))+(((-1.0)*cj3*x13244*x13251)));
evalcond[4]=(((r10*x13240*x13242))+(((-1.0)*r11*x13246*x13251))+((r10*x13245))+(((-1.0)*r12*sj3*x13252))+((r11*x13248)));
evalcond[5]=(((cj3*x13240*x13243))+((r21*x13242))+(((-1.0)*r20*x13248*x13251))+((cj1*sj2))+((r22*x13253))+x13249+((r20*x13246)));
evalcond[6]=(((r02*x13253))+((r00*x13246))+((r01*x13242))+(((-1.0)*x13250))+x13241+((r01*x13240*x13245))+(((-1.0)*r00*x13248*x13251)));
evalcond[7]=((((-1.0)*r22*sj3*x13252))+(((-1.0)*sj3*x13243*x13251))+((r21*x13248))+((r20*x13240*x13242))+(((-1.0)*x13250))+x13241+((r20*x13245)));
evalcond[8]=((((-1.0)*x13249))+(((-1.0)*r02*sj3*x13252))+(((-1.0)*r01*x13246*x13251))+((r00*x13245))+((r01*x13248))+(((-1.0)*sj2*x13247))+((r00*x13240*x13242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13255=((-1.0)*r01);
IkReal x13257 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13257)==0){
continue;
}
IkReal x13256=pow(x13257,-0.5);
CheckValue<IkReal> x13258 = IKatan2WithCheck(IkReal(x13255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13258.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13258.value))));
IkReal gconst22=(x13255*x13256);
IkReal gconst23=((1.0)*r00*x13256);
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13259.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13260=((-1.0)*r01);
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(x13260),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
IkReal x13261=((1.0)*(x13263.value));
IkReal x13262=x13256;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13261)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13261)));
IkReal gconst22=(x13260*x13262);
IkReal gconst23=((1.0)*r00*x13262);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13264=((-1.0)*r01);
CheckValue<IkReal> x13267 = IKatan2WithCheck(IkReal(x13264),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13267.valid){
continue;
}
IkReal x13265=((1.0)*(x13267.value));
IkReal x13266=x13256;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13265)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13265)));
IkReal gconst22=(x13264*x13266);
IkReal gconst23=((1.0)*r00*x13266);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13268=gconst22*gconst22;
IkReal x13269=gconst23*gconst23;
IkReal x13270=(r21*sj3);
IkReal x13271=((1.0)*cj3);
IkReal x13272=(gconst23*r11);
IkReal x13273=(r22*sj3);
IkReal x13274=(gconst22*r10);
IkReal x13275=((1.0)*r20*sj3);
CheckValue<IkReal> x13276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13269*x13271))+(((-1.0)*r12*r22*x13271))+(((-1.0)*r11*r21*x13268*x13271))+((cj3*gconst22*r20*x13272))+((cj3*gconst23*r21*x13274)))),-1);
if(!x13276.valid){
continue;
}
CheckValue<IkReal> x13277 = IKatan2WithCheck(IkReal((((x13272*x13273))+((x13273*x13274)))),IkReal(((((-1.0)*r11*x13269*x13275))+(((-1.0)*gconst23*x13274*x13275))+((r10*x13268*x13270))+((gconst22*x13270*x13272)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13276.value)))+(x13277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13278=IKsin(j4);
IkReal x13279=IKcos(j4);
IkReal x13280=(sj1*sj2);
IkReal x13281=(gconst23*sj3);
IkReal x13282=(gconst22*sj3);
IkReal x13283=(cj2*sj1);
IkReal x13284=((1.0)*cj1);
IkReal x13285=(cj3*gconst23);
IkReal x13286=(cj3*gconst22);
IkReal x13287=(cj2*x13284);
IkReal x13288=((1.0)*x13279);
IkReal x13289=(cj3*x13278);
IkReal x13290=(gconst22*x13278);
IkReal x13291=((1.0)*sj3*x13278);
IkReal x13292=(x13279*x13286);
IkReal x13293=((1.0)*gconst23*x13278);
evalcond[0]=((((-1.0)*r22*x13288))+(((-1.0)*r20*x13293))+((r21*x13290)));
evalcond[1]=((((-1.0)*r02*x13288))+(((-1.0)*r00*x13293))+((r01*x13290)));
evalcond[2]=((1.0)+((r11*x13290))+(((-1.0)*r10*x13293))+(((-1.0)*r12*x13288)));
evalcond[3]=(((r11*x13292))+((r12*x13289))+((r11*x13281))+((r10*x13282))+(((-1.0)*r10*x13285*x13288)));
evalcond[4]=(((r11*x13285))+(((-1.0)*r11*x13282*x13288))+((r10*x13286))+((r10*x13279*x13281))+(((-1.0)*r12*x13291)));
evalcond[5]=(((r20*x13282))+((cj1*sj2))+((r21*x13281))+(((-1.0)*r20*x13285*x13288))+((r22*x13289))+x13283+((r21*x13292)));
evalcond[6]=((((-1.0)*r00*x13285*x13288))+((r02*x13289))+x13280+((r01*x13281))+((r00*x13282))+(((-1.0)*x13287))+((r01*x13292)));
evalcond[7]=(((r20*x13279*x13281))+((r20*x13286))+(((-1.0)*r21*x13282*x13288))+((r21*x13285))+x13280+(((-1.0)*r22*x13291))+(((-1.0)*x13287)));
evalcond[8]=((((-1.0)*sj2*x13284))+((r00*x13279*x13281))+(((-1.0)*r01*x13282*x13288))+(((-1.0)*x13283))+((r01*x13285))+(((-1.0)*r02*x13291))+((r00*x13286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13294=((1.0)*gconst23);
CheckValue<IkReal> x13295 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13294))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13295.valid){
continue;
}
CheckValue<IkReal> x13296=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13294)))),-1);
if(!x13296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13295.value)+(((1.5707963267949)*(x13296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13297=IKsin(j4);
IkReal x13298=IKcos(j4);
IkReal x13299=(sj1*sj2);
IkReal x13300=(gconst23*sj3);
IkReal x13301=(gconst22*sj3);
IkReal x13302=(cj2*sj1);
IkReal x13303=((1.0)*cj1);
IkReal x13304=(cj3*gconst23);
IkReal x13305=(cj3*gconst22);
IkReal x13306=(cj2*x13303);
IkReal x13307=((1.0)*x13298);
IkReal x13308=(cj3*x13297);
IkReal x13309=(gconst22*x13297);
IkReal x13310=((1.0)*sj3*x13297);
IkReal x13311=(x13298*x13305);
IkReal x13312=((1.0)*gconst23*x13297);
evalcond[0]=(((r21*x13309))+(((-1.0)*r20*x13312))+(((-1.0)*r22*x13307)));
evalcond[1]=(((r01*x13309))+(((-1.0)*r02*x13307))+(((-1.0)*r00*x13312)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13307))+(((-1.0)*r10*x13312))+((r11*x13309)));
evalcond[3]=(((r12*x13308))+((r11*x13311))+((r10*x13301))+(((-1.0)*r10*x13304*x13307))+((r11*x13300)));
evalcond[4]=(((r10*x13298*x13300))+((r10*x13305))+(((-1.0)*r11*x13301*x13307))+(((-1.0)*r12*x13310))+((r11*x13304)));
evalcond[5]=(((r21*x13300))+((r20*x13301))+((cj1*sj2))+(((-1.0)*r20*x13304*x13307))+((r22*x13308))+((r21*x13311))+x13302);
evalcond[6]=(((r01*x13311))+(((-1.0)*r00*x13304*x13307))+((r00*x13301))+((r01*x13300))+(((-1.0)*x13306))+x13299+((r02*x13308)));
evalcond[7]=(((r21*x13304))+((r20*x13305))+(((-1.0)*r21*x13301*x13307))+(((-1.0)*x13306))+x13299+(((-1.0)*r22*x13310))+((r20*x13298*x13300)));
evalcond[8]=((((-1.0)*r02*x13310))+((r00*x13305))+((r01*x13304))+((r00*x13298*x13300))+(((-1.0)*sj2*x13303))+(((-1.0)*r01*x13301*x13307))+(((-1.0)*x13302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13313=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13313.valid){
continue;
}
CheckValue<IkReal> x13314 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13313.value)))+(x13314.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13315=IKsin(j4);
IkReal x13316=IKcos(j4);
IkReal x13317=(sj1*sj2);
IkReal x13318=(gconst23*sj3);
IkReal x13319=(gconst22*sj3);
IkReal x13320=(cj2*sj1);
IkReal x13321=((1.0)*cj1);
IkReal x13322=(cj3*gconst23);
IkReal x13323=(cj3*gconst22);
IkReal x13324=(cj2*x13321);
IkReal x13325=((1.0)*x13316);
IkReal x13326=(cj3*x13315);
IkReal x13327=(gconst22*x13315);
IkReal x13328=((1.0)*sj3*x13315);
IkReal x13329=(x13316*x13323);
IkReal x13330=((1.0)*gconst23*x13315);
evalcond[0]=((((-1.0)*r22*x13325))+(((-1.0)*r20*x13330))+((r21*x13327)));
evalcond[1]=((((-1.0)*r02*x13325))+(((-1.0)*r00*x13330))+((r01*x13327)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13325))+((r11*x13327))+(((-1.0)*r10*x13330)));
evalcond[3]=(((r12*x13326))+((r11*x13318))+((r10*x13319))+((r11*x13329))+(((-1.0)*r10*x13322*x13325)));
evalcond[4]=((((-1.0)*r12*x13328))+((r10*x13316*x13318))+(((-1.0)*r11*x13319*x13325))+((r10*x13323))+((r11*x13322)));
evalcond[5]=(((r20*x13319))+((cj1*sj2))+((r21*x13329))+(((-1.0)*r20*x13322*x13325))+((r21*x13318))+x13320+((r22*x13326)));
evalcond[6]=(((r02*x13326))+((r01*x13318))+((r00*x13319))+((r01*x13329))+(((-1.0)*x13324))+x13317+(((-1.0)*r00*x13322*x13325)));
evalcond[7]=((((-1.0)*r21*x13319*x13325))+(((-1.0)*r22*x13328))+((r20*x13316*x13318))+((r20*x13323))+((r21*x13322))+(((-1.0)*x13324))+x13317);
evalcond[8]=((((-1.0)*r02*x13328))+(((-1.0)*x13320))+((r00*x13316*x13318))+((r00*x13323))+((r01*x13322))+(((-1.0)*r01*x13319*x13325))+(((-1.0)*sj2*x13321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13332 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13332)==0){
continue;
}
IkReal x13331=pow(x13332,-0.5);
CheckValue<IkReal> x13333 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13333.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13333.value));
IkReal gconst25=((-1.0)*r21*x13331);
IkReal gconst26=(r20*x13331);
CheckValue<IkReal> x13334 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13334.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13334.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13337 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13337.valid){
continue;
}
IkReal x13335=((-1.0)*(x13337.value));
IkReal x13336=x13331;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13335;
IkReal gconst24=x13335;
IkReal gconst25=((-1.0)*r21*x13336);
IkReal gconst26=(r20*x13336);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
IkReal x13338=((-1.0)*(x13340.value));
IkReal x13339=x13331;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13338;
IkReal gconst24=x13338;
IkReal gconst25=((-1.0)*r21*x13339);
IkReal gconst26=(r20*x13339);
CheckValue<IkReal> x13348=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13348.valid){
continue;
}
IkReal x13341=x13348.value;
IkReal x13342=(sj3*x13341);
IkReal x13343=(r11*x13342);
IkReal x13344=(r00*x13342);
IkReal x13345=(r01*x13342);
IkReal x13346=(r10*x13342);
IkReal x13347=(r20*r21*x13342);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x13343))+((r10*r20*r21*x13345))+((r01*x13343*(r21*r21)))+((r10*x13344*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13349=gconst25*gconst25;
IkReal x13350=gconst26*gconst26;
IkReal x13351=(r00*r11);
IkReal x13352=(r01*r10);
IkReal x13353=(r02*sj3);
IkReal x13354=(gconst25*r10);
IkReal x13355=(gconst26*r11);
IkReal x13356=((1.0)*sj3);
IkReal x13357=((1.0)*cj3);
IkReal x13358=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13359=IKPowWithIntegerCheck(IKsign((((x13352*x13358))+(((-1.0)*r01*r11*x13349*x13357))+(((-1.0)*r00*r10*x13350*x13357))+(((-1.0)*r02*r12*x13357))+((x13351*x13358)))),-1);
if(!x13359.valid){
continue;
}
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal((((x13353*x13354))+((x13353*x13355)))),IkReal((((sj3*x13349*x13352))+(((-1.0)*x13350*x13351*x13356))+((gconst25*r01*sj3*x13355))+(((-1.0)*gconst26*r00*x13354*x13356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13359.value)))+(x13360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13361=IKsin(j4);
IkReal x13362=IKcos(j4);
IkReal x13363=(sj1*sj2);
IkReal x13364=(gconst26*sj3);
IkReal x13365=(gconst25*sj3);
IkReal x13366=(gconst26*r10);
IkReal x13367=(gconst25*r11);
IkReal x13368=(cj3*gconst25);
IkReal x13369=((1.0)*cj2);
IkReal x13370=(cj1*sj2);
IkReal x13371=(gconst26*r00);
IkReal x13372=(gconst26*r20);
IkReal x13373=(cj3*gconst26);
IkReal x13374=(cj1*x13369);
IkReal x13375=((1.0)*x13362);
IkReal x13376=((1.0)*x13361);
IkReal x13377=(cj3*x13361);
IkReal x13378=(gconst25*x13361);
evalcond[0]=((((-1.0)*x13372*x13376))+(((-1.0)*r22*x13375))+((r21*x13378)));
evalcond[1]=(((r01*x13378))+(((-1.0)*r02*x13375))+(((-1.0)*x13371*x13376)));
evalcond[2]=((1.0)+(((-1.0)*x13366*x13376))+((x13361*x13367))+(((-1.0)*r12*x13375)));
evalcond[3]=(((r10*x13365))+((r12*x13377))+((r11*x13364))+(((-1.0)*cj3*x13366*x13375))+((cj3*x13362*x13367)));
evalcond[4]=(((r10*x13368))+((r11*x13373))+(((-1.0)*r11*x13365*x13375))+(((-1.0)*r12*sj3*x13376))+((r10*x13362*x13364)));
evalcond[5]=(((cj2*sj1))+((r21*x13362*x13368))+((r20*x13365))+(((-1.0)*cj3*x13372*x13375))+((r22*x13377))+((r21*x13364))+x13370);
evalcond[6]=(((r02*x13377))+((r01*x13364))+((r00*x13365))+((r01*x13362*x13368))+(((-1.0)*cj3*x13371*x13375))+(((-1.0)*x13374))+x13363);
evalcond[7]=(((r20*x13368))+(((-1.0)*r22*sj3*x13376))+(((-1.0)*x13374))+((r20*x13362*x13364))+((r21*x13373))+x13363+(((-1.0)*r21*x13365*x13375)));
evalcond[8]=(((r01*x13373))+(((-1.0)*r01*x13365*x13375))+((r00*x13368))+((r00*x13362*x13364))+(((-1.0)*r02*sj3*x13376))+(((-1.0)*sj1*x13369))+(((-1.0)*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13379=gconst26*gconst26;
IkReal x13380=gconst25*gconst25;
IkReal x13381=(r01*r10);
IkReal x13382=(cj3*r11);
IkReal x13383=(gconst25*gconst26);
IkReal x13384=(cj3*r10);
IkReal x13385=(r00*x13379);
IkReal x13386=((1.0)*sj3*x13383);
CheckValue<IkReal> x13387 = IKatan2WithCheck(IkReal((((gconst25*r02*x13384))+((gconst26*r02*x13382)))),IkReal(((((-1.0)*x13382*x13385))+((r01*x13382*x13383))+((cj3*x13380*x13381))+(((-1.0)*r00*x13383*x13384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13387.valid){
continue;
}
CheckValue<IkReal> x13388=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r10*sj3*x13385))+((r01*r11*sj3*x13380))+(((-1.0)*x13381*x13386))+(((-1.0)*r00*r11*x13386)))),-1);
if(!x13388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13387.value)+(((1.5707963267949)*(x13388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13389=IKsin(j4);
IkReal x13390=IKcos(j4);
IkReal x13391=(sj1*sj2);
IkReal x13392=(gconst26*sj3);
IkReal x13393=(gconst25*sj3);
IkReal x13394=(gconst26*r10);
IkReal x13395=(gconst25*r11);
IkReal x13396=(cj3*gconst25);
IkReal x13397=((1.0)*cj2);
IkReal x13398=(cj1*sj2);
IkReal x13399=(gconst26*r00);
IkReal x13400=(gconst26*r20);
IkReal x13401=(cj3*gconst26);
IkReal x13402=(cj1*x13397);
IkReal x13403=((1.0)*x13390);
IkReal x13404=((1.0)*x13389);
IkReal x13405=(cj3*x13389);
IkReal x13406=(gconst25*x13389);
evalcond[0]=(((r21*x13406))+(((-1.0)*x13400*x13404))+(((-1.0)*r22*x13403)));
evalcond[1]=((((-1.0)*r02*x13403))+((r01*x13406))+(((-1.0)*x13399*x13404)));
evalcond[2]=((1.0)+(((-1.0)*x13394*x13404))+(((-1.0)*r12*x13403))+((x13389*x13395)));
evalcond[3]=(((r11*x13392))+((cj3*x13390*x13395))+((r10*x13393))+((r12*x13405))+(((-1.0)*cj3*x13394*x13403)));
evalcond[4]=(((r10*x13396))+((r11*x13401))+(((-1.0)*r11*x13393*x13403))+(((-1.0)*r12*sj3*x13404))+((r10*x13390*x13392)));
evalcond[5]=(((cj2*sj1))+((r21*x13392))+((r21*x13390*x13396))+((r20*x13393))+((r22*x13405))+(((-1.0)*cj3*x13400*x13403))+x13398);
evalcond[6]=(((r00*x13393))+(((-1.0)*x13402))+((r01*x13392))+((r02*x13405))+(((-1.0)*cj3*x13399*x13403))+x13391+((r01*x13390*x13396)));
evalcond[7]=((((-1.0)*r22*sj3*x13404))+((r20*x13396))+((r20*x13390*x13392))+((r21*x13401))+(((-1.0)*x13402))+(((-1.0)*r21*x13393*x13403))+x13391);
evalcond[8]=(((r01*x13401))+(((-1.0)*x13398))+((r00*x13390*x13392))+(((-1.0)*r02*sj3*x13404))+((r00*x13396))+(((-1.0)*sj1*x13397))+(((-1.0)*r01*x13393*x13403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13407=((1.0)*gconst26);
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13407))+(((-1.0)*gconst25*r00)))),-1);
if(!x13408.valid){
continue;
}
CheckValue<IkReal> x13409 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13408.value)))+(x13409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13410=IKsin(j4);
IkReal x13411=IKcos(j4);
IkReal x13412=(sj1*sj2);
IkReal x13413=(gconst26*sj3);
IkReal x13414=(gconst25*sj3);
IkReal x13415=(gconst26*r10);
IkReal x13416=(gconst25*r11);
IkReal x13417=(cj3*gconst25);
IkReal x13418=((1.0)*cj2);
IkReal x13419=(cj1*sj2);
IkReal x13420=(gconst26*r00);
IkReal x13421=(gconst26*r20);
IkReal x13422=(cj3*gconst26);
IkReal x13423=(cj1*x13418);
IkReal x13424=((1.0)*x13411);
IkReal x13425=((1.0)*x13410);
IkReal x13426=(cj3*x13410);
IkReal x13427=(gconst25*x13410);
evalcond[0]=((((-1.0)*x13421*x13425))+(((-1.0)*r22*x13424))+((r21*x13427)));
evalcond[1]=((((-1.0)*x13420*x13425))+(((-1.0)*r02*x13424))+((r01*x13427)));
evalcond[2]=((1.0)+((x13410*x13416))+(((-1.0)*x13415*x13425))+(((-1.0)*r12*x13424)));
evalcond[3]=((((-1.0)*cj3*x13415*x13424))+((cj3*x13411*x13416))+((r12*x13426))+((r10*x13414))+((r11*x13413)));
evalcond[4]=(((r10*x13411*x13413))+(((-1.0)*r12*sj3*x13425))+((r11*x13422))+((r10*x13417))+(((-1.0)*r11*x13414*x13424)));
evalcond[5]=(x13419+((cj2*sj1))+(((-1.0)*cj3*x13421*x13424))+((r22*x13426))+((r20*x13414))+((r21*x13411*x13417))+((r21*x13413)));
evalcond[6]=(x13412+(((-1.0)*cj3*x13420*x13424))+(((-1.0)*x13423))+((r01*x13411*x13417))+((r02*x13426))+((r01*x13413))+((r00*x13414)));
evalcond[7]=(x13412+((r20*x13417))+(((-1.0)*x13423))+((r21*x13422))+(((-1.0)*r22*sj3*x13425))+((r20*x13411*x13413))+(((-1.0)*r21*x13414*x13424)));
evalcond[8]=(((r00*x13411*x13413))+(((-1.0)*x13419))+(((-1.0)*r01*x13414*x13424))+(((-1.0)*r02*sj3*x13425))+((r00*x13417))+((r01*x13422))+(((-1.0)*sj1*x13418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13429 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13429)==0){
continue;
}
IkReal x13428=pow(x13429,-0.5);
CheckValue<IkReal> x13430 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13430.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13430.value))));
IkReal gconst28=((1.0)*r21*x13428);
IkReal gconst29=((-1.0)*r20*x13428);
CheckValue<IkReal> x13431 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13431.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13431.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13434 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13434.valid){
continue;
}
IkReal x13432=((1.0)*(x13434.value));
IkReal x13433=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13432)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13432)));
IkReal gconst28=((1.0)*r21*x13433);
IkReal gconst29=((-1.0)*r20*x13433);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13437.valid){
continue;
}
IkReal x13435=((1.0)*(x13437.value));
IkReal x13436=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13435)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13435)));
IkReal gconst28=((1.0)*r21*x13436);
IkReal gconst29=((-1.0)*r20*x13436);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13440 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13440.valid){
continue;
}
IkReal x13438=((1.0)*(x13440.value));
IkReal x13439=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13438)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13438)));
IkReal gconst28=((1.0)*r21*x13439);
IkReal gconst29=((-1.0)*r20*x13439);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13443 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13443.valid){
continue;
}
IkReal x13441=((1.0)*(x13443.value));
IkReal x13442=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13441)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13441)));
IkReal gconst28=((1.0)*r21*x13442);
IkReal gconst29=((-1.0)*r20*x13442);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13446 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13446.valid){
continue;
}
IkReal x13444=((1.0)*(x13446.value));
IkReal x13445=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13444)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13444)));
IkReal gconst28=((1.0)*r21*x13445);
IkReal gconst29=((-1.0)*r20*x13445);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13449 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13449.valid){
continue;
}
IkReal x13447=((1.0)*(x13449.value));
IkReal x13448=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13447)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13447)));
IkReal gconst28=((1.0)*r21*x13448);
IkReal gconst29=((-1.0)*r20*x13448);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13450=(gconst29*r10);
IkReal x13451=(gconst28*r11);
CheckValue<IkReal> x13452=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13451*x13451)+(((-2.0)*x13450*x13451))+(x13450*x13450))),-1);
if(!x13452.valid){
continue;
}
CheckValue<IkReal> x13453 = IKatan2WithCheck(IkReal((x13450+(((-1.0)*x13451)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13452.value)))+(x13453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13454=IKsin(j4);
IkReal x13455=IKcos(j4);
IkReal x13456=(gconst28*r11);
IkReal x13457=((1.0)*cj2);
IkReal x13458=((1.0)*x13455);
IkReal x13459=(gconst29*x13455);
IkReal x13460=(gconst28*x13454);
IkReal x13461=((1.0)*x13454);
IkReal x13462=(gconst29*x13461);
evalcond[0]=((((-1.0)*r22*x13458))+((r21*x13460))+(((-1.0)*r20*x13462)));
evalcond[1]=((((-1.0)*r00*x13462))+(((-1.0)*r02*x13458))+((r01*x13460)));
evalcond[2]=(((r10*x13459))+(((-1.0)*x13456*x13458))+(((-1.0)*r12*x13461)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13462))+((x13454*x13456))+(((-1.0)*r12*x13458)));
evalcond[4]=(((r20*x13459))+(((-1.0)*r22*x13461))+(((-1.0)*cj1*x13457))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13458)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13457))+(((-1.0)*gconst28*r01*x13458))+(((-1.0)*r02*x13461))+((r00*x13459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13463=((1.0)*gconst29);
CheckValue<IkReal> x13464 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13463))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13464.valid){
continue;
}
CheckValue<IkReal> x13465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13463))+(((-1.0)*gconst28*r00)))),-1);
if(!x13465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13464.value)+(((1.5707963267949)*(x13465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13466=IKsin(j4);
IkReal x13467=IKcos(j4);
IkReal x13468=(gconst28*r11);
IkReal x13469=((1.0)*cj2);
IkReal x13470=((1.0)*x13467);
IkReal x13471=(gconst29*x13467);
IkReal x13472=(gconst28*x13466);
IkReal x13473=((1.0)*x13466);
IkReal x13474=(gconst29*x13473);
evalcond[0]=(((r21*x13472))+(((-1.0)*r20*x13474))+(((-1.0)*r22*x13470)));
evalcond[1]=(((r01*x13472))+(((-1.0)*r02*x13470))+(((-1.0)*r00*x13474)));
evalcond[2]=(((r10*x13471))+(((-1.0)*x13468*x13470))+(((-1.0)*r12*x13473)));
evalcond[3]=((1.0)+((x13466*x13468))+(((-1.0)*r10*x13474))+(((-1.0)*r12*x13470)));
evalcond[4]=((((-1.0)*cj1*x13469))+(((-1.0)*gconst28*r21*x13470))+((sj1*sj2))+((r20*x13471))+(((-1.0)*r22*x13473)));
evalcond[5]=(((r00*x13471))+(((-1.0)*r02*x13473))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13469))+(((-1.0)*gconst28*r01*x13470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13475.value)))+(x13476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13477=IKsin(j4);
IkReal x13478=IKcos(j4);
IkReal x13479=(gconst28*r11);
IkReal x13480=((1.0)*cj2);
IkReal x13481=((1.0)*x13478);
IkReal x13482=(gconst29*x13478);
IkReal x13483=(gconst28*x13477);
IkReal x13484=((1.0)*x13477);
IkReal x13485=(gconst29*x13484);
evalcond[0]=((((-1.0)*r20*x13485))+(((-1.0)*r22*x13481))+((r21*x13483)));
evalcond[1]=((((-1.0)*r00*x13485))+(((-1.0)*r02*x13481))+((r01*x13483)));
evalcond[2]=((((-1.0)*r12*x13484))+(((-1.0)*x13479*x13481))+((r10*x13482)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13481))+(((-1.0)*r10*x13485))+((x13477*x13479)));
evalcond[4]=((((-1.0)*r22*x13484))+((sj1*sj2))+((r20*x13482))+(((-1.0)*cj1*x13480))+(((-1.0)*gconst28*r21*x13481)));
evalcond[5]=((((-1.0)*sj1*x13480))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13484))+((r00*x13482))+(((-1.0)*gconst28*r01*x13481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13488 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13488.valid){
continue;
}
IkReal x13486=((1.0)*(x13488.value));
IkReal x13487=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13486)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13486)));
IkReal gconst28=((1.0)*r21*x13487);
IkReal gconst29=((-1.0)*r20*x13487);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13491 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13491.valid){
continue;
}
IkReal x13489=((1.0)*(x13491.value));
IkReal x13490=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13489)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13489)));
IkReal gconst28=((1.0)*r21*x13490);
IkReal gconst29=((-1.0)*r20*x13490);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13494 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13494.valid){
continue;
}
IkReal x13492=((1.0)*(x13494.value));
IkReal x13493=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13492)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13492)));
IkReal gconst28=((1.0)*r21*x13493);
IkReal gconst29=((-1.0)*r20*x13493);
IkReal x13495=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13499=IKPowWithIntegerCheck(x13495,-1);
if(!x13499.valid){
continue;
}
IkReal x13496=x13499.value;
IkReal x13497=((1.0)*x13496);
IkReal x13498=((((-2.0)*r10*r11*r20*r21*x13496))+(((-1.0)*x13497*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13497*(r10*r10)*(r20*r20))));
j4eval[0]=x13498;
j4eval[1]=r12;
j4eval[2]=x13495;
j4eval[3]=IKsign(x13498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13500=(gconst28*r11);
IkReal x13501=(gconst29*r10);
CheckValue<IkReal> x13502=IKPowWithIntegerCheck(IKsign(((((2.0)*x13500*x13501))+(((-1.0)*(x13501*x13501)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13500*x13500))))),-1);
if(!x13502.valid){
continue;
}
CheckValue<IkReal> x13503 = IKatan2WithCheck(IkReal((x13500+(((-1.0)*x13501)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13502.value)))+(x13503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13504=IKcos(j4);
IkReal x13505=IKsin(j4);
IkReal x13506=(gconst29*r10);
IkReal x13507=(gconst29*r20);
IkReal x13508=(gconst28*r21);
IkReal x13509=((1.0)*cj2);
IkReal x13510=(gconst29*r00);
IkReal x13511=((1.0)*x13504);
IkReal x13512=((1.0)*x13505);
IkReal x13513=(gconst28*x13504);
IkReal x13514=(gconst28*x13505);
evalcond[0]=((((-1.0)*x13506*x13511))+((r11*x13513))+((r12*x13505)));
evalcond[1]=((((-1.0)*r22*x13511))+(((-1.0)*x13507*x13512))+((x13505*x13508)));
evalcond[2]=((((-1.0)*x13510*x13512))+((r01*x13514))+(((-1.0)*r02*x13511)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13511))+(((-1.0)*x13506*x13512))+((r11*x13514)));
evalcond[4]=(((sj1*sj2))+((r22*x13505))+(((-1.0)*cj1*x13509))+(((-1.0)*x13507*x13511))+((x13504*x13508)));
evalcond[5]=((((-1.0)*sj1*x13509))+((r02*x13505))+(((-1.0)*cj1*sj2))+(((-1.0)*x13510*x13511))+((r01*x13513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13515=((1.0)*gconst29);
CheckValue<IkReal> x13516 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13515))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13516.valid){
continue;
}
CheckValue<IkReal> x13517=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13515)))),-1);
if(!x13517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13516.value)+(((1.5707963267949)*(x13517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13518=IKcos(j4);
IkReal x13519=IKsin(j4);
IkReal x13520=(gconst29*r10);
IkReal x13521=(gconst29*r20);
IkReal x13522=(gconst28*r21);
IkReal x13523=((1.0)*cj2);
IkReal x13524=(gconst29*r00);
IkReal x13525=((1.0)*x13518);
IkReal x13526=((1.0)*x13519);
IkReal x13527=(gconst28*x13518);
IkReal x13528=(gconst28*x13519);
evalcond[0]=((((-1.0)*x13520*x13525))+((r11*x13527))+((r12*x13519)));
evalcond[1]=((((-1.0)*r22*x13525))+(((-1.0)*x13521*x13526))+((x13519*x13522)));
evalcond[2]=(((r01*x13528))+(((-1.0)*x13524*x13526))+(((-1.0)*r02*x13525)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13525))+(((-1.0)*x13520*x13526))+((r11*x13528)));
evalcond[4]=(((x13518*x13522))+(((-1.0)*x13521*x13525))+((r22*x13519))+((sj1*sj2))+(((-1.0)*cj1*x13523)));
evalcond[5]=(((r01*x13527))+(((-1.0)*sj1*x13523))+((r02*x13519))+(((-1.0)*cj1*sj2))+(((-1.0)*x13524*x13525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13529=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13529.valid){
continue;
}
CheckValue<IkReal> x13530 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13529.value)))+(x13530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13531=IKcos(j4);
IkReal x13532=IKsin(j4);
IkReal x13533=(gconst29*r10);
IkReal x13534=(gconst29*r20);
IkReal x13535=(gconst28*r21);
IkReal x13536=((1.0)*cj2);
IkReal x13537=(gconst29*r00);
IkReal x13538=((1.0)*x13531);
IkReal x13539=((1.0)*x13532);
IkReal x13540=(gconst28*x13531);
IkReal x13541=(gconst28*x13532);
evalcond[0]=(((r11*x13540))+(((-1.0)*x13533*x13538))+((r12*x13532)));
evalcond[1]=((((-1.0)*r22*x13538))+(((-1.0)*x13534*x13539))+((x13532*x13535)));
evalcond[2]=(((r01*x13541))+(((-1.0)*x13537*x13539))+(((-1.0)*r02*x13538)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13538))+((r11*x13541))+(((-1.0)*x13533*x13539)));
evalcond[4]=(((x13531*x13535))+(((-1.0)*x13534*x13538))+(((-1.0)*cj1*x13536))+((sj1*sj2))+((r22*x13532)));
evalcond[5]=((((-1.0)*sj1*x13536))+((r01*x13540))+((r02*x13532))+(((-1.0)*cj1*sj2))+(((-1.0)*x13537*x13538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13544 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13544.valid){
continue;
}
IkReal x13542=((1.0)*(x13544.value));
IkReal x13543=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13542)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13542)));
IkReal gconst28=((1.0)*r21*x13543);
IkReal gconst29=((-1.0)*r20*x13543);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13547 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13547.valid){
continue;
}
IkReal x13545=((1.0)*(x13547.value));
IkReal x13546=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13545)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13545)));
IkReal gconst28=((1.0)*r21*x13546);
IkReal gconst29=((-1.0)*r20*x13546);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13550 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13550.valid){
continue;
}
IkReal x13548=((1.0)*(x13550.value));
IkReal x13549=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13548)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13548)));
IkReal gconst28=((1.0)*r21*x13549);
IkReal gconst29=((-1.0)*r20*x13549);
IkReal x13551=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13555=IKPowWithIntegerCheck(x13551,-1);
if(!x13555.valid){
continue;
}
IkReal x13552=x13555.value;
IkReal x13553=((1.0)*x13552);
IkReal x13554=((((-1.0)*x13553*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13552))+(((-1.0)*x13553*(r11*r11)*(r21*r21))));
j4eval[0]=x13554;
j4eval[1]=r12;
j4eval[2]=x13551;
j4eval[3]=IKsign(x13554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13556=(gconst28*r11);
IkReal x13557=(gconst29*r10);
CheckValue<IkReal> x13558 = IKatan2WithCheck(IkReal((x13556+(((-1.0)*x13557)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13558.valid){
continue;
}
CheckValue<IkReal> x13559=IKPowWithIntegerCheck(IKsign(((((2.0)*x13556*x13557))+(((-1.0)*(x13556*x13556)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13557*x13557))))),-1);
if(!x13559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13558.value)+(((1.5707963267949)*(x13559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13560=IKcos(j4);
IkReal x13561=IKsin(j4);
IkReal x13562=(gconst29*r10);
IkReal x13563=(gconst29*r20);
IkReal x13564=(gconst28*r21);
IkReal x13565=(gconst29*r00);
IkReal x13566=((1.0)*x13560);
IkReal x13567=((1.0)*x13561);
IkReal x13568=(gconst28*x13560);
IkReal x13569=(gconst28*x13561);
evalcond[0]=((((-1.0)*x13562*x13566))+((r11*x13568))+((r12*x13561)));
evalcond[1]=((((-1.0)*x13563*x13567))+((x13561*x13564))+(((-1.0)*r22*x13566)));
evalcond[2]=(((r01*x13569))+(((-1.0)*r02*x13566))+(((-1.0)*x13565*x13567)));
evalcond[3]=((1.0)+(((-1.0)*x13562*x13567))+((r11*x13569))+(((-1.0)*r12*x13566)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13563*x13566))+((cj1*sj2))+((r22*x13561))+((x13560*x13564)));
evalcond[5]=(((r01*x13568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13561))+(((-1.0)*x13565*x13566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13570=((1.0)*gconst29);
CheckValue<IkReal> x13571=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13570))+(((-1.0)*gconst28*r00)))),-1);
if(!x13571.valid){
continue;
}
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13570))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13571.value)))+(x13572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13573=IKcos(j4);
IkReal x13574=IKsin(j4);
IkReal x13575=(gconst29*r10);
IkReal x13576=(gconst29*r20);
IkReal x13577=(gconst28*r21);
IkReal x13578=(gconst29*r00);
IkReal x13579=((1.0)*x13573);
IkReal x13580=((1.0)*x13574);
IkReal x13581=(gconst28*x13573);
IkReal x13582=(gconst28*x13574);
evalcond[0]=(((r12*x13574))+(((-1.0)*x13575*x13579))+((r11*x13581)));
evalcond[1]=((((-1.0)*r22*x13579))+(((-1.0)*x13576*x13580))+((x13574*x13577)));
evalcond[2]=((((-1.0)*r02*x13579))+(((-1.0)*x13578*x13580))+((r01*x13582)));
evalcond[3]=((1.0)+(((-1.0)*x13575*x13580))+(((-1.0)*r12*x13579))+((r11*x13582)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13573*x13577))+(((-1.0)*x13576*x13579))+((r22*x13574)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13581))+((r02*x13574))+(((-1.0)*x13578*x13579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13583=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13583.valid){
continue;
}
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13583.value)))+(x13584.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13585=IKcos(j4);
IkReal x13586=IKsin(j4);
IkReal x13587=(gconst29*r10);
IkReal x13588=(gconst29*r20);
IkReal x13589=(gconst28*r21);
IkReal x13590=(gconst29*r00);
IkReal x13591=((1.0)*x13585);
IkReal x13592=((1.0)*x13586);
IkReal x13593=(gconst28*x13585);
IkReal x13594=(gconst28*x13586);
evalcond[0]=(((r11*x13593))+((r12*x13586))+(((-1.0)*x13587*x13591)));
evalcond[1]=((((-1.0)*x13588*x13592))+((x13586*x13589))+(((-1.0)*r22*x13591)));
evalcond[2]=(((r01*x13594))+(((-1.0)*x13590*x13592))+(((-1.0)*r02*x13591)));
evalcond[3]=((1.0)+((r11*x13594))+(((-1.0)*x13587*x13592))+(((-1.0)*r12*x13591)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13588*x13591))+((x13585*x13589))+((r22*x13586)));
evalcond[5]=(((r01*x13593))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13586))+(((-1.0)*x13590*x13591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13597 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13597.valid){
continue;
}
IkReal x13595=((1.0)*(x13597.value));
IkReal x13596=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13595)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13595)));
IkReal gconst28=((1.0)*r21*x13596);
IkReal gconst29=((-1.0)*r20*x13596);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13600 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13600.valid){
continue;
}
IkReal x13598=((1.0)*(x13600.value));
IkReal x13599=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13598)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13598)));
IkReal gconst28=((1.0)*r21*x13599);
IkReal gconst29=((-1.0)*r20*x13599);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13603 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13603.valid){
continue;
}
IkReal x13601=((1.0)*(x13603.value));
IkReal x13602=x13428;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13601)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13601)));
IkReal gconst28=((1.0)*r21*x13602);
IkReal gconst29=((-1.0)*r20*x13602);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13604=(gconst29*r10);
IkReal x13605=(gconst28*r11);
CheckValue<IkReal> x13606 = IKatan2WithCheck(IkReal(((((-1.0)*x13605))+x13604)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13606.valid){
continue;
}
CheckValue<IkReal> x13607=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13604*x13604)+(((-2.0)*x13604*x13605))+(x13605*x13605))),-1);
if(!x13607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13606.value)+(((1.5707963267949)*(x13607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13608=IKsin(j4);
IkReal x13609=IKcos(j4);
IkReal x13610=(gconst28*r11);
IkReal x13611=((1.0)*x13609);
IkReal x13612=(gconst29*x13609);
IkReal x13613=(gconst28*x13608);
IkReal x13614=((1.0)*x13608);
IkReal x13615=(gconst29*x13614);
evalcond[0]=(((r21*x13613))+(((-1.0)*r20*x13615))+(((-1.0)*r22*x13611)));
evalcond[1]=((((-1.0)*r02*x13611))+((r01*x13613))+(((-1.0)*r00*x13615)));
evalcond[2]=(((r10*x13612))+(((-1.0)*x13610*x13611))+(((-1.0)*r12*x13614)));
evalcond[3]=((1.0)+((x13608*x13610))+(((-1.0)*r10*x13615))+(((-1.0)*r12*x13611)));
evalcond[4]=((((-1.0)*gconst28*r21*x13611))+((cj2*sj1))+((cj1*sj2))+((r20*x13612))+(((-1.0)*r22*x13614)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13614))+((r00*x13612))+(((-1.0)*gconst28*r01*x13611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13616=((1.0)*gconst29);
CheckValue<IkReal> x13617 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13616))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13617.valid){
continue;
}
CheckValue<IkReal> x13618=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13616)))),-1);
if(!x13618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13617.value)+(((1.5707963267949)*(x13618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13619=IKsin(j4);
IkReal x13620=IKcos(j4);
IkReal x13621=(gconst28*r11);
IkReal x13622=((1.0)*x13620);
IkReal x13623=(gconst29*x13620);
IkReal x13624=(gconst28*x13619);
IkReal x13625=((1.0)*x13619);
IkReal x13626=(gconst29*x13625);
evalcond[0]=(((r21*x13624))+(((-1.0)*r22*x13622))+(((-1.0)*r20*x13626)));
evalcond[1]=((((-1.0)*r00*x13626))+((r01*x13624))+(((-1.0)*r02*x13622)));
evalcond[2]=(((r10*x13623))+(((-1.0)*x13621*x13622))+(((-1.0)*r12*x13625)));
evalcond[3]=((1.0)+((x13619*x13621))+(((-1.0)*r10*x13626))+(((-1.0)*r12*x13622)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13622))+(((-1.0)*r22*x13625))+((r20*x13623)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13622))+((r00*x13623))+(((-1.0)*r02*x13625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13627=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13627.valid){
continue;
}
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13627.value)))+(x13628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13629=IKsin(j4);
IkReal x13630=IKcos(j4);
IkReal x13631=(gconst28*r11);
IkReal x13632=((1.0)*x13630);
IkReal x13633=(gconst29*x13630);
IkReal x13634=(gconst28*x13629);
IkReal x13635=((1.0)*x13629);
IkReal x13636=(gconst29*x13635);
evalcond[0]=((((-1.0)*r22*x13632))+((r21*x13634))+(((-1.0)*r20*x13636)));
evalcond[1]=((((-1.0)*r02*x13632))+(((-1.0)*r00*x13636))+((r01*x13634)));
evalcond[2]=(((r10*x13633))+(((-1.0)*x13631*x13632))+(((-1.0)*r12*x13635)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13632))+((x13629*x13631))+(((-1.0)*r10*x13636)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13632))+(((-1.0)*r22*x13635))+((r20*x13633)));
evalcond[5]=((((-1.0)*r02*x13635))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13632))+((r00*x13633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13637=gconst28*gconst28;
IkReal x13638=gconst29*gconst29;
IkReal x13639=(r11*r21);
IkReal x13640=(gconst29*sj3);
IkReal x13641=((1.0)*cj3);
IkReal x13642=(r10*r20);
IkReal x13643=(r10*r21);
IkReal x13644=(r11*r20);
IkReal x13645=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13646 = IKatan2WithCheck(IkReal((((r11*r22*x13640))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13638*x13644))+((sj3*x13637*x13643))+(((-1.0)*gconst28*x13640*x13642))+((gconst28*x13639*x13640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13646.valid){
continue;
}
CheckValue<IkReal> x13647=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13638*x13641*x13642))+((x13644*x13645))+(((-1.0)*r12*r22*x13641))+(((-1.0)*x13637*x13639*x13641))+((x13643*x13645)))),-1);
if(!x13647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13646.value)+(((1.5707963267949)*(x13647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13648=IKsin(j4);
IkReal x13649=IKcos(j4);
IkReal x13650=(sj1*sj2);
IkReal x13651=(gconst29*r20);
IkReal x13652=(gconst28*r20);
IkReal x13653=((1.0)*cj2);
IkReal x13654=(r11*sj3);
IkReal x13655=(cj1*sj2);
IkReal x13656=(gconst29*r01);
IkReal x13657=(gconst29*r10);
IkReal x13658=(cj3*gconst28);
IkReal x13659=(cj3*gconst29);
IkReal x13660=(gconst28*sj3);
IkReal x13661=(gconst29*r00);
IkReal x13662=(cj1*x13653);
IkReal x13663=((1.0)*x13649);
IkReal x13664=((1.0)*x13648);
IkReal x13665=(gconst28*x13648);
IkReal x13666=(cj3*x13648);
IkReal x13667=(sj3*x13649);
evalcond[0]=((((-1.0)*r22*x13663))+(((-1.0)*x13651*x13664))+((r21*x13665)));
evalcond[1]=(((r01*x13665))+(((-1.0)*x13661*x13664))+(((-1.0)*r02*x13663)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13663))+((r11*x13665))+(((-1.0)*x13657*x13664)));
evalcond[3]=(((r12*x13666))+(((-1.0)*cj3*x13657*x13663))+((r10*x13660))+((r11*x13649*x13658))+((gconst29*x13654)));
evalcond[4]=(((r10*x13658))+((x13657*x13667))+(((-1.0)*gconst28*x13654*x13663))+(((-1.0)*r12*sj3*x13664))+((r11*x13659)));
evalcond[5]=(((cj2*sj1))+x13655+((gconst29*r21*sj3))+((r22*x13666))+((r21*x13649*x13658))+(((-1.0)*cj3*x13651*x13663))+((sj3*x13652)));
evalcond[6]=(x13650+((r02*x13666))+((r01*x13649*x13658))+((r00*x13660))+(((-1.0)*x13662))+(((-1.0)*r00*x13659*x13663))+((sj3*x13656)));
evalcond[7]=((((-1.0)*r22*sj3*x13664))+(((-1.0)*r21*x13660*x13663))+x13650+((x13651*x13667))+(((-1.0)*x13662))+((r21*x13659))+((cj3*x13652)));
evalcond[8]=(((r00*x13658))+(((-1.0)*r01*x13660*x13663))+(((-1.0)*x13655))+(((-1.0)*r02*sj3*x13664))+((cj3*x13656))+(((-1.0)*sj1*x13653))+((x13661*x13667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13668=((1.0)*gconst29);
CheckValue<IkReal> x13669 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13668))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13669.valid){
continue;
}
CheckValue<IkReal> x13670=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13668))+(((-1.0)*gconst28*r00)))),-1);
if(!x13670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13669.value)+(((1.5707963267949)*(x13670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13671=IKsin(j4);
IkReal x13672=IKcos(j4);
IkReal x13673=(sj1*sj2);
IkReal x13674=(gconst29*r20);
IkReal x13675=(gconst28*r20);
IkReal x13676=((1.0)*cj2);
IkReal x13677=(r11*sj3);
IkReal x13678=(cj1*sj2);
IkReal x13679=(gconst29*r01);
IkReal x13680=(gconst29*r10);
IkReal x13681=(cj3*gconst28);
IkReal x13682=(cj3*gconst29);
IkReal x13683=(gconst28*sj3);
IkReal x13684=(gconst29*r00);
IkReal x13685=(cj1*x13676);
IkReal x13686=((1.0)*x13672);
IkReal x13687=((1.0)*x13671);
IkReal x13688=(gconst28*x13671);
IkReal x13689=(cj3*x13671);
IkReal x13690=(sj3*x13672);
evalcond[0]=((((-1.0)*x13674*x13687))+(((-1.0)*r22*x13686))+((r21*x13688)));
evalcond[1]=((((-1.0)*x13684*x13687))+((r01*x13688))+(((-1.0)*r02*x13686)));
evalcond[2]=((1.0)+((r11*x13688))+(((-1.0)*r12*x13686))+(((-1.0)*x13680*x13687)));
evalcond[3]=(((r12*x13689))+((r11*x13672*x13681))+((gconst29*x13677))+(((-1.0)*cj3*x13680*x13686))+((r10*x13683)));
evalcond[4]=((((-1.0)*r12*sj3*x13687))+((x13680*x13690))+((r11*x13682))+(((-1.0)*gconst28*x13677*x13686))+((r10*x13681)));
evalcond[5]=(((cj2*sj1))+x13678+((gconst29*r21*sj3))+((r22*x13689))+((sj3*x13675))+(((-1.0)*cj3*x13674*x13686))+((r21*x13672*x13681)));
evalcond[6]=(x13673+((r02*x13689))+((r01*x13672*x13681))+((r00*x13683))+(((-1.0)*x13685))+((sj3*x13679))+(((-1.0)*r00*x13682*x13686)));
evalcond[7]=(x13673+((cj3*x13675))+((x13674*x13690))+(((-1.0)*x13685))+(((-1.0)*r22*sj3*x13687))+(((-1.0)*r21*x13683*x13686))+((r21*x13682)));
evalcond[8]=(((x13684*x13690))+(((-1.0)*r02*sj3*x13687))+((cj3*x13679))+(((-1.0)*sj1*x13676))+(((-1.0)*r01*x13683*x13686))+((r00*x13681))+(((-1.0)*x13678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13691=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13691.valid){
continue;
}
CheckValue<IkReal> x13692 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13691.value)))+(x13692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13693=IKsin(j4);
IkReal x13694=IKcos(j4);
IkReal x13695=(sj1*sj2);
IkReal x13696=(gconst29*r20);
IkReal x13697=(gconst28*r20);
IkReal x13698=((1.0)*cj2);
IkReal x13699=(r11*sj3);
IkReal x13700=(cj1*sj2);
IkReal x13701=(gconst29*r01);
IkReal x13702=(gconst29*r10);
IkReal x13703=(cj3*gconst28);
IkReal x13704=(cj3*gconst29);
IkReal x13705=(gconst28*sj3);
IkReal x13706=(gconst29*r00);
IkReal x13707=(cj1*x13698);
IkReal x13708=((1.0)*x13694);
IkReal x13709=((1.0)*x13693);
IkReal x13710=(gconst28*x13693);
IkReal x13711=(cj3*x13693);
IkReal x13712=(sj3*x13694);
evalcond[0]=((((-1.0)*r22*x13708))+((r21*x13710))+(((-1.0)*x13696*x13709)));
evalcond[1]=((((-1.0)*x13706*x13709))+((r01*x13710))+(((-1.0)*r02*x13708)));
evalcond[2]=((1.0)+(((-1.0)*x13702*x13709))+(((-1.0)*r12*x13708))+((r11*x13710)));
evalcond[3]=(((r11*x13694*x13703))+((r12*x13711))+((r10*x13705))+((gconst29*x13699))+(((-1.0)*cj3*x13702*x13708)));
evalcond[4]=(((x13702*x13712))+(((-1.0)*gconst28*x13699*x13708))+((r10*x13703))+((r11*x13704))+(((-1.0)*r12*sj3*x13709)));
evalcond[5]=(((cj2*sj1))+((sj3*x13697))+((gconst29*r21*sj3))+x13700+((r21*x13694*x13703))+((r22*x13711))+(((-1.0)*cj3*x13696*x13708)));
evalcond[6]=(x13695+((sj3*x13701))+(((-1.0)*r00*x13704*x13708))+((r00*x13705))+((r01*x13694*x13703))+((r02*x13711))+(((-1.0)*x13707)));
evalcond[7]=(((x13696*x13712))+(((-1.0)*r21*x13705*x13708))+((r21*x13704))+x13695+(((-1.0)*r22*sj3*x13709))+((cj3*x13697))+(((-1.0)*x13707)));
evalcond[8]=((((-1.0)*x13700))+((x13706*x13712))+((cj3*x13701))+((r00*x13703))+(((-1.0)*r01*x13705*x13708))+(((-1.0)*sj1*x13698))+(((-1.0)*r02*sj3*x13709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13713=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13713);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13713);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13714=(r11*sj5);
IkReal x13715=((1.0)*cj5*r10);
j4eval[0]=(x13714+(((-1.0)*x13715)));
j4eval[1]=((((-1.0)*cj3*x13715))+((cj3*x13714)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13716=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13716);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13716);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13717=(cj5*r10);
IkReal x13718=(r11*sj5);
j4eval[0]=((((-1.0)*x13717))+x13718);
j4eval[1]=(((sj3*x13717))+(((-1.0)*sj3*x13718)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13719=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13719);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13719);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13720=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13720);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13720);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13721=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13721))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13721)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13722=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13722);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13722);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13723=((1.0)*sj1);
CheckValue<IkReal> x13724=IKPowWithIntegerCheck(r22,-1);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13725.valid){
continue;
}
if( IKabs(((x13724.value)*(((((-1.0)*cj2*x13723))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13725.value)*(((((-1.0)*sj2*x13723))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13724.value)*(((((-1.0)*cj2*x13723))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13725.value)*(((((-1.0)*sj2*x13723))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x13724.value)*(((((-1.0)*cj2*x13723))+(((-1.0)*cj1*sj2))))), ((x13725.value)*(((((-1.0)*sj2*x13723))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13726=IKsin(j4);
IkReal x13727=IKcos(j4);
IkReal x13728=((1.0)*cj5);
IkReal x13729=(sj5*x13727);
IkReal x13730=(sj5*x13726);
evalcond[0]=((-1.0)*r22*x13727);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13726)));
evalcond[2]=((((-1.0)*r00*x13726*x13728))+((r01*x13730)));
evalcond[3]=(((r11*x13729))+(((-1.0)*r10*x13727*x13728)));
evalcond[4]=((1.0)+((r11*x13730))+(((-1.0)*r10*x13726*x13728)));
evalcond[5]=(((r01*x13729))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13727*x13728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13731=((1.0)*cj5);
CheckValue<IkReal> x13732=IKPowWithIntegerCheck(((((-1.0)*r10*x13731))+((r11*sj5))),-1);
if(!x13732.valid){
continue;
}
CheckValue<IkReal> x13733=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13731))),-1);
if(!x13733.valid){
continue;
}
if( IKabs(((-1.0)*(x13732.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13733.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13732.value)))+IKsqr(((x13733.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x13732.value)), ((x13733.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13734=IKsin(j4);
IkReal x13735=IKcos(j4);
IkReal x13736=((1.0)*cj5);
IkReal x13737=(sj5*x13735);
IkReal x13738=(sj5*x13734);
evalcond[0]=((-1.0)*r22*x13735);
evalcond[1]=(((cj2*sj1))+((r22*x13734))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13734*x13736))+((r01*x13738)));
evalcond[3]=((((-1.0)*r10*x13735*x13736))+((r11*x13737)));
evalcond[4]=((1.0)+((r11*x13738))+(((-1.0)*r10*x13734*x13736)));
evalcond[5]=((((-1.0)*r00*x13735*x13736))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13739=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13739);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13739);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13740=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13740);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13740);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13741=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13741.valid){
continue;
}
CheckValue<IkReal> x13742=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13742.valid){
continue;
}
if( IKabs(((-1.0)*(x13741.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13741.value)))+IKsqr(((x13742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x13741.value)), ((x13742.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13743=IKsin(j4);
IkReal x13744=IKcos(j4);
IkReal x13745=(cj5*x13744);
IkReal x13746=(sj5*x13743);
IkReal x13747=((1.0)*cj5*x13743);
IkReal x13748=((1.0)*sj5*x13744);
evalcond[0]=((-1.0)*r22*x13744);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13743)));
evalcond[2]=(((r01*x13746))+(((-1.0)*r00*x13747)));
evalcond[3]=((((-1.0)*r11*x13748))+((r10*x13745)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13747))+((r11*x13746)));
evalcond[5]=((((-1.0)*r01*x13748))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13749=IKPowWithIntegerCheck(r22,-1);
if(!x13749.valid){
continue;
}
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13750.valid){
continue;
}
if( IKabs(((x13749.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13750.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13749.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13750.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x13749.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13750.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13751=IKsin(j4);
IkReal x13752=IKcos(j4);
IkReal x13753=(cj5*x13752);
IkReal x13754=(sj5*x13751);
IkReal x13755=((1.0)*cj5*x13751);
IkReal x13756=((1.0)*sj5*x13752);
evalcond[0]=((-1.0)*r22*x13752);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13751)));
evalcond[2]=((((-1.0)*r00*x13755))+((r01*x13754)));
evalcond[3]=(((r10*x13753))+(((-1.0)*r11*x13756)));
evalcond[4]=((1.0)+((r11*x13754))+(((-1.0)*r10*x13755)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13756))+((r00*x13753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13757=((1.0)*r10);
CheckValue<IkReal> x13758=IKPowWithIntegerCheck(cj3,-1);
if(!x13758.valid){
continue;
}
CheckValue<IkReal> x13759=IKPowWithIntegerCheck(r22,-1);
if(!x13759.valid){
continue;
}
CheckValue<IkReal> x13760=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13757))+((cj3*r11*sj5))),-1);
if(!x13760.valid){
continue;
}
if( IKabs(((x13758.value)*(x13759.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13760.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13757)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13758.value)*(x13759.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13760.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13757))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x13758.value)*(x13759.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13760.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13757))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13761=IKsin(j4);
IkReal x13762=IKcos(j4);
IkReal x13763=(sj1*sj2);
IkReal x13764=(r11*sj5);
IkReal x13765=(r00*sj3);
IkReal x13766=(cj5*r01);
IkReal x13767=((1.0)*cj1);
IkReal x13768=(cj3*sj5);
IkReal x13769=(cj5*r11);
IkReal x13770=(r10*sj3);
IkReal x13771=(cj2*sj1);
IkReal x13772=((1.0)*cj5);
IkReal x13773=((1.0)*sj3);
IkReal x13774=(r01*sj5);
IkReal x13775=(cj2*x13767);
IkReal x13776=(cj3*x13762);
IkReal x13777=(r22*x13761);
IkReal x13778=(cj5*x13762);
IkReal x13779=(x13761*x13772);
evalcond[0]=((-1.0)*r22*x13762);
evalcond[1]=(x13771+((cj1*sj2))+((cj3*x13777)));
evalcond[2]=((((-1.0)*r00*x13779))+((x13761*x13774)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13779))+((x13761*x13764)));
evalcond[4]=((((-1.0)*x13775))+(((-1.0)*x13773*x13777))+x13763);
evalcond[5]=(((sj5*x13770))+((sj3*x13769))+(((-1.0)*r10*x13772*x13776))+((x13764*x13776)));
evalcond[6]=((((-1.0)*x13762*x13764*x13773))+((r10*x13768))+((cj3*x13769))+((x13770*x13778)));
evalcond[7]=((((-1.0)*x13775))+((sj5*x13765))+x13763+((sj3*x13766))+(((-1.0)*r00*x13772*x13776))+((r01*x13762*x13768)));
evalcond[8]=((((-1.0)*x13771))+(((-1.0)*sj2*x13767))+((r00*x13768))+((cj3*x13766))+((x13765*x13778))+(((-1.0)*x13762*x13773*x13774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13780=(cj5*r10);
IkReal x13781=((1.0)*r11);
CheckValue<IkReal> x13782=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13780))),-1);
if(!x13782.valid){
continue;
}
CheckValue<IkReal> x13783=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13781))+((sj3*x13780))),-1);
if(!x13783.valid){
continue;
}
if( IKabs(((-1.0)*(x13782.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13783.value)*(((((-1.0)*cj3*cj5*x13781))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13782.value)))+IKsqr(((x13783.value)*(((((-1.0)*cj3*cj5*x13781))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x13782.value)), ((x13783.value)*(((((-1.0)*cj3*cj5*x13781))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13784=IKsin(j4);
IkReal x13785=IKcos(j4);
IkReal x13786=(sj1*sj2);
IkReal x13787=(r11*sj5);
IkReal x13788=(r00*sj3);
IkReal x13789=(cj5*r01);
IkReal x13790=((1.0)*cj1);
IkReal x13791=(cj3*sj5);
IkReal x13792=(cj5*r11);
IkReal x13793=(r10*sj3);
IkReal x13794=(cj2*sj1);
IkReal x13795=((1.0)*cj5);
IkReal x13796=((1.0)*sj3);
IkReal x13797=(r01*sj5);
IkReal x13798=(cj2*x13790);
IkReal x13799=(cj3*x13785);
IkReal x13800=(r22*x13784);
IkReal x13801=(cj5*x13785);
IkReal x13802=(x13784*x13795);
evalcond[0]=((-1.0)*r22*x13785);
evalcond[1]=(x13794+((cj1*sj2))+((cj3*x13800)));
evalcond[2]=(((x13784*x13797))+(((-1.0)*r00*x13802)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13802))+((x13784*x13787)));
evalcond[4]=(x13786+(((-1.0)*x13798))+(((-1.0)*x13796*x13800)));
evalcond[5]=((((-1.0)*r10*x13795*x13799))+((x13787*x13799))+((sj3*x13792))+((sj5*x13793)));
evalcond[6]=(((x13793*x13801))+(((-1.0)*x13785*x13787*x13796))+((cj3*x13792))+((r10*x13791)));
evalcond[7]=(x13786+(((-1.0)*x13798))+(((-1.0)*r00*x13795*x13799))+((sj3*x13789))+((r01*x13785*x13791))+((sj5*x13788)));
evalcond[8]=(((r00*x13791))+(((-1.0)*sj2*x13790))+(((-1.0)*x13785*x13796*x13797))+((x13788*x13801))+(((-1.0)*x13794))+((cj3*x13789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13803=((1.0)*sj3);
IkReal x13804=(r11*sj5);
IkReal x13805=((1.0)*cj5*r10);
CheckValue<IkReal> x13806=IKPowWithIntegerCheck(((((-1.0)*x13805))+x13804),-1);
if(!x13806.valid){
continue;
}
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(((((-1.0)*cj3*x13805))+((cj3*x13804))),-1);
if(!x13807.valid){
continue;
}
if( IKabs(((-1.0)*(x13806.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13807.value)*(((((-1.0)*cj5*r11*x13803))+(((-1.0)*r10*sj5*x13803)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13806.value)))+IKsqr(((x13807.value)*(((((-1.0)*cj5*r11*x13803))+(((-1.0)*r10*sj5*x13803))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x13806.value)), ((x13807.value)*(((((-1.0)*cj5*r11*x13803))+(((-1.0)*r10*sj5*x13803))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13808=IKsin(j4);
IkReal x13809=IKcos(j4);
IkReal x13810=(sj1*sj2);
IkReal x13811=(r11*sj5);
IkReal x13812=(r00*sj3);
IkReal x13813=(cj5*r01);
IkReal x13814=((1.0)*cj1);
IkReal x13815=(cj3*sj5);
IkReal x13816=(cj5*r11);
IkReal x13817=(r10*sj3);
IkReal x13818=(cj2*sj1);
IkReal x13819=((1.0)*cj5);
IkReal x13820=((1.0)*sj3);
IkReal x13821=(r01*sj5);
IkReal x13822=(cj2*x13814);
IkReal x13823=(cj3*x13809);
IkReal x13824=(r22*x13808);
IkReal x13825=(cj5*x13809);
IkReal x13826=(x13808*x13819);
evalcond[0]=((-1.0)*r22*x13809);
evalcond[1]=(x13818+((cj1*sj2))+((cj3*x13824)));
evalcond[2]=(((x13808*x13821))+(((-1.0)*r00*x13826)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13826))+((x13808*x13811)));
evalcond[4]=((((-1.0)*x13822))+x13810+(((-1.0)*x13820*x13824)));
evalcond[5]=(((x13811*x13823))+(((-1.0)*r10*x13819*x13823))+((sj3*x13816))+((sj5*x13817)));
evalcond[6]=((((-1.0)*x13809*x13811*x13820))+((r10*x13815))+((x13817*x13825))+((cj3*x13816)));
evalcond[7]=(((r01*x13809*x13815))+(((-1.0)*x13822))+x13810+((sj3*x13813))+(((-1.0)*r00*x13819*x13823))+((sj5*x13812)));
evalcond[8]=(((r00*x13815))+(((-1.0)*sj2*x13814))+(((-1.0)*x13818))+((x13812*x13825))+((cj3*x13813))+(((-1.0)*x13809*x13820*x13821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13827=cj5*cj5;
IkReal x13828=((1.0)*cj3);
IkReal x13829=(r10*r21);
IkReal x13830=(cj5*sj5);
IkReal x13831=(r11*r21);
IkReal x13832=(r11*r20);
IkReal x13833=(r22*sj3);
IkReal x13834=(r10*r20);
IkReal x13835=((1.0)*sj3*x13827);
CheckValue<IkReal> x13836 = IKatan2WithCheck(IkReal((((cj5*r11*x13833))+((r10*sj5*x13833)))),IkReal(((((-1.0)*x13829*x13835))+(((-1.0)*x13832*x13835))+((sj3*x13829))+((sj3*x13830*x13831))+(((-1.0)*sj3*x13830*x13834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13836.valid){
continue;
}
CheckValue<IkReal> x13837=IKPowWithIntegerCheck(IKsign((((cj3*x13830*x13832))+(((-1.0)*x13827*x13828*x13834))+(((-1.0)*x13828*x13831))+((cj3*x13827*x13831))+((cj3*x13829*x13830))+(((-1.0)*r12*r22*x13828)))),-1);
if(!x13837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13836.value)+(((1.5707963267949)*(x13837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13838=IKsin(j4);
IkReal x13839=IKcos(j4);
IkReal x13840=(sj1*sj2);
IkReal x13841=(cj5*sj3);
IkReal x13842=(cj5*r10);
IkReal x13843=(r00*sj5);
IkReal x13844=(r11*sj5);
IkReal x13845=(cj3*cj5);
IkReal x13846=((1.0)*cj1);
IkReal x13847=(cj3*sj5);
IkReal x13848=(r21*sj5);
IkReal x13849=(cj2*sj1);
IkReal x13850=(sj3*sj5);
IkReal x13851=(r01*sj5);
IkReal x13852=(cj2*x13846);
IkReal x13853=((1.0)*x13839);
IkReal x13854=((1.0)*x13838);
IkReal x13855=(cj3*x13838);
IkReal x13856=(cj3*x13839);
evalcond[0]=((((-1.0)*cj5*r20*x13854))+(((-1.0)*r22*x13853))+((x13838*x13848)));
evalcond[1]=((((-1.0)*cj5*r00*x13854))+((x13838*x13851))+(((-1.0)*r02*x13853)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13853))+((x13838*x13844))+(((-1.0)*x13842*x13854)));
evalcond[3]=((((-1.0)*cj3*x13842*x13853))+((r12*x13855))+((r11*x13841))+((r10*x13850))+((x13844*x13856)));
evalcond[4]=((((-1.0)*r12*sj3*x13854))+(((-1.0)*sj3*x13844*x13853))+((r11*x13845))+((r10*x13839*x13841))+((r10*x13847)));
evalcond[5]=(((r22*x13855))+(((-1.0)*r20*x13845*x13853))+x13849+((cj1*sj2))+((r21*x13841))+((r21*x13839*x13847))+((r20*x13850)));
evalcond[6]=((((-1.0)*r00*x13845*x13853))+((r01*x13839*x13847))+x13840+((sj3*x13843))+((r02*x13855))+(((-1.0)*x13852))+((r01*x13841)));
evalcond[7]=(x13840+((r21*x13845))+((r20*x13839*x13841))+(((-1.0)*sj3*x13848*x13853))+(((-1.0)*r22*sj3*x13854))+((r20*x13847))+(((-1.0)*x13852)));
evalcond[8]=((((-1.0)*r01*x13850*x13853))+(((-1.0)*sj2*x13846))+((r00*x13839*x13841))+(((-1.0)*r02*sj3*x13854))+(((-1.0)*x13849))+((r01*x13845))+((cj3*x13843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13857=((1.0)*cj5);
CheckValue<IkReal> x13858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13857))+(((-1.0)*r00*sj5)))),-1);
if(!x13858.valid){
continue;
}
CheckValue<IkReal> x13859 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13858.value)))+(x13859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13860=IKsin(j4);
IkReal x13861=IKcos(j4);
IkReal x13862=(sj1*sj2);
IkReal x13863=(cj5*sj3);
IkReal x13864=(cj5*r10);
IkReal x13865=(r00*sj5);
IkReal x13866=(r11*sj5);
IkReal x13867=(cj3*cj5);
IkReal x13868=((1.0)*cj1);
IkReal x13869=(cj3*sj5);
IkReal x13870=(r21*sj5);
IkReal x13871=(cj2*sj1);
IkReal x13872=(sj3*sj5);
IkReal x13873=(r01*sj5);
IkReal x13874=(cj2*x13868);
IkReal x13875=((1.0)*x13861);
IkReal x13876=((1.0)*x13860);
IkReal x13877=(cj3*x13860);
IkReal x13878=(cj3*x13861);
evalcond[0]=((((-1.0)*cj5*r20*x13876))+(((-1.0)*r22*x13875))+((x13860*x13870)));
evalcond[1]=((((-1.0)*cj5*r00*x13876))+(((-1.0)*r02*x13875))+((x13860*x13873)));
evalcond[2]=((1.0)+((x13860*x13866))+(((-1.0)*x13864*x13876))+(((-1.0)*r12*x13875)));
evalcond[3]=(((r11*x13863))+((r12*x13877))+(((-1.0)*cj3*x13864*x13875))+((x13866*x13878))+((r10*x13872)));
evalcond[4]=((((-1.0)*sj3*x13866*x13875))+((r11*x13867))+(((-1.0)*r12*sj3*x13876))+((r10*x13861*x13863))+((r10*x13869)));
evalcond[5]=(x13871+((cj1*sj2))+((r21*x13863))+((r20*x13872))+(((-1.0)*r20*x13867*x13875))+((r21*x13861*x13869))+((r22*x13877)));
evalcond[6]=(((r01*x13863))+x13862+(((-1.0)*x13874))+((r01*x13861*x13869))+((sj3*x13865))+(((-1.0)*r00*x13867*x13875))+((r02*x13877)));
evalcond[7]=(x13862+(((-1.0)*x13874))+((r20*x13861*x13863))+((r21*x13867))+((r20*x13869))+(((-1.0)*r22*sj3*x13876))+(((-1.0)*sj3*x13870*x13875)));
evalcond[8]=(((r01*x13867))+(((-1.0)*x13871))+(((-1.0)*sj2*x13868))+((r00*x13861*x13863))+(((-1.0)*r01*x13872*x13875))+(((-1.0)*r02*sj3*x13876))+((cj3*x13865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13879=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13879.valid){
continue;
}
CheckValue<IkReal> x13880 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13879.value)))+(x13880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13881=IKsin(j4);
IkReal x13882=IKcos(j4);
IkReal x13883=(sj1*sj2);
IkReal x13884=(cj5*sj3);
IkReal x13885=(cj5*r10);
IkReal x13886=(r00*sj5);
IkReal x13887=(r11*sj5);
IkReal x13888=(cj3*cj5);
IkReal x13889=((1.0)*cj1);
IkReal x13890=(cj3*sj5);
IkReal x13891=(r21*sj5);
IkReal x13892=(cj2*sj1);
IkReal x13893=(sj3*sj5);
IkReal x13894=(r01*sj5);
IkReal x13895=(cj2*x13889);
IkReal x13896=((1.0)*x13882);
IkReal x13897=((1.0)*x13881);
IkReal x13898=(cj3*x13881);
IkReal x13899=(cj3*x13882);
evalcond[0]=(((x13881*x13891))+(((-1.0)*cj5*r20*x13897))+(((-1.0)*r22*x13896)));
evalcond[1]=((((-1.0)*r02*x13896))+((x13881*x13894))+(((-1.0)*cj5*r00*x13897)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13896))+((x13881*x13887))+(((-1.0)*x13885*x13897)));
evalcond[3]=((((-1.0)*cj3*x13885*x13896))+((r10*x13893))+((r12*x13898))+((r11*x13884))+((x13887*x13899)));
evalcond[4]=((((-1.0)*r12*sj3*x13897))+((r10*x13882*x13884))+((r10*x13890))+((r11*x13888))+(((-1.0)*sj3*x13887*x13896)));
evalcond[5]=(((r21*x13882*x13890))+((r22*x13898))+x13892+((cj1*sj2))+((r20*x13893))+(((-1.0)*r20*x13888*x13896))+((r21*x13884)));
evalcond[6]=(((sj3*x13886))+x13883+((r01*x13882*x13890))+((r02*x13898))+(((-1.0)*x13895))+((r01*x13884))+(((-1.0)*r00*x13888*x13896)));
evalcond[7]=((((-1.0)*r22*sj3*x13897))+x13883+((r20*x13890))+((r21*x13888))+(((-1.0)*x13895))+(((-1.0)*sj3*x13891*x13896))+((r20*x13882*x13884)));
evalcond[8]=((((-1.0)*r02*sj3*x13897))+(((-1.0)*sj2*x13889))+((cj3*x13886))+(((-1.0)*r01*x13893*x13896))+((r00*x13882*x13884))+(((-1.0)*x13892))+((r01*x13888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13900=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13900;
j4eval[1]=IKsign(x13900);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13901=((1.0)*cj5);
IkReal x13902=((((-1.0)*r21*x13901))+(((-1.0)*r20*sj5)));
j4eval[0]=x13902;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13901))))));
j4eval[2]=IKsign(x13902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13903=cj5*cj5;
IkReal x13904=(cj3*r21);
IkReal x13905=(cj5*sj5);
IkReal x13906=((1.0)*cj3);
IkReal x13907=(((r10*x13904*x13905))+(((-1.0)*r10*r20*x13903*x13906))+(((-1.0)*r12*r22*x13906))+((cj3*r11*r20*x13905))+((r11*x13903*x13904))+(((-1.0)*r11*x13904)));
j4eval[0]=x13907;
j4eval[1]=IKsign(x13907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13908=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13908;
j4eval[1]=IKsign(x13908);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13909=((1.0)*cj5);
IkReal x13910=((((-1.0)*r21*x13909))+(((-1.0)*r20*sj5)));
j4eval[0]=x13910;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13909))))));
j4eval[2]=IKsign(x13910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13911=cj5*cj5;
IkReal x13912=r11*r11;
IkReal x13913=(cj5*r10);
IkReal x13914=(r11*sj5);
IkReal x13915=((((-1.0)*x13912))+(((-1.0)*(r12*r12)))+(((-1.0)*x13911*(r10*r10)))+((x13911*x13912))+(((2.0)*x13913*x13914)));
j4eval[0]=x13915;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13914))+x13913))));
j4eval[2]=IKsign(x13915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13916=cj5*cj5;
IkReal x13917=r11*r11;
IkReal x13918=(cj5*r10);
IkReal x13919=(r11*sj5);
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13917))+(((-1.0)*(r12*r12)))+(((-1.0)*x13916*(r10*r10)))+((x13916*x13917))+(((2.0)*x13918*x13919)))),-1);
if(!x13920.valid){
continue;
}
CheckValue<IkReal> x13921 = IKatan2WithCheck(IkReal(((((-1.0)*x13919))+x13918)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13920.value)))+(x13921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13922=IKsin(j4);
IkReal x13923=IKcos(j4);
IkReal x13924=(cj5*r10);
IkReal x13925=(r01*sj5);
IkReal x13926=(cj5*r00);
IkReal x13927=(cj5*r20);
IkReal x13928=((1.0)*x13923);
IkReal x13929=((1.0)*x13922);
IkReal x13930=(sj5*x13922);
evalcond[0]=((((-1.0)*x13927*x13929))+((r21*x13930))+(((-1.0)*r22*x13928)));
evalcond[1]=((((-1.0)*x13926*x13929))+((x13922*x13925))+(((-1.0)*r02*x13928)));
evalcond[2]=((((-1.0)*r12*x13929))+((x13923*x13924))+(((-1.0)*r11*sj5*x13928)));
evalcond[3]=((-1.0)+((r11*x13930))+(((-1.0)*r12*x13928))+(((-1.0)*x13924*x13929)));
evalcond[4]=(((cj2*sj1))+((x13923*x13926))+((cj1*sj2))+(((-1.0)*x13925*x13928))+(((-1.0)*r02*x13929)));
evalcond[5]=(((x13923*x13927))+(((-1.0)*r21*sj5*x13928))+(((-1.0)*r22*x13929))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13931=((1.0)*cj5);
CheckValue<IkReal> x13932 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13932.valid){
continue;
}
CheckValue<IkReal> x13933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13931))+(((-1.0)*r20*sj5)))),-1);
if(!x13933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13932.value)+(((1.5707963267949)*(x13933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13934=IKsin(j4);
IkReal x13935=IKcos(j4);
IkReal x13936=(cj5*r10);
IkReal x13937=(r01*sj5);
IkReal x13938=(cj5*r00);
IkReal x13939=(cj5*r20);
IkReal x13940=((1.0)*x13935);
IkReal x13941=((1.0)*x13934);
IkReal x13942=(sj5*x13934);
evalcond[0]=((((-1.0)*r22*x13940))+((r21*x13942))+(((-1.0)*x13939*x13941)));
evalcond[1]=(((x13934*x13937))+(((-1.0)*x13938*x13941))+(((-1.0)*r02*x13940)));
evalcond[2]=((((-1.0)*r11*sj5*x13940))+(((-1.0)*r12*x13941))+((x13935*x13936)));
evalcond[3]=((-1.0)+(((-1.0)*x13936*x13941))+(((-1.0)*r12*x13940))+((r11*x13942)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13941))+(((-1.0)*x13937*x13940))+((x13935*x13938)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13941))+(((-1.0)*r21*sj5*x13940))+((x13935*x13939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13943 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13943.valid){
continue;
}
CheckValue<IkReal> x13944=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13943.value)+(((1.5707963267949)*(x13944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13945=IKsin(j4);
IkReal x13946=IKcos(j4);
IkReal x13947=(cj5*r10);
IkReal x13948=(r01*sj5);
IkReal x13949=(cj5*r00);
IkReal x13950=(cj5*r20);
IkReal x13951=((1.0)*x13946);
IkReal x13952=((1.0)*x13945);
IkReal x13953=(sj5*x13945);
evalcond[0]=(((r21*x13953))+(((-1.0)*r22*x13951))+(((-1.0)*x13950*x13952)));
evalcond[1]=((((-1.0)*x13949*x13952))+(((-1.0)*r02*x13951))+((x13945*x13948)));
evalcond[2]=((((-1.0)*r11*sj5*x13951))+((x13946*x13947))+(((-1.0)*r12*x13952)));
evalcond[3]=((-1.0)+((r11*x13953))+(((-1.0)*x13947*x13952))+(((-1.0)*r12*x13951)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13952))+(((-1.0)*x13948*x13951))+((x13946*x13949)));
evalcond[5]=((((-1.0)*r21*sj5*x13951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13952))+((x13946*x13950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13954=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13954;
j4eval[1]=IKsign(x13954);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13955=((1.0)*cj5);
IkReal x13956=((((-1.0)*r21*x13955))+(((-1.0)*r20*sj5)));
j4eval[0]=x13956;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13955))+((r01*sj5))))));
j4eval[2]=IKsign(x13956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13957=cj5*cj5;
IkReal x13958=r11*r11;
IkReal x13959=(r11*sj5);
IkReal x13960=(cj5*r10);
IkReal x13961=((r12*r12)+((x13957*(r10*r10)))+x13958+(((-1.0)*x13957*x13958))+(((-2.0)*x13959*x13960)));
j4eval[0]=x13961;
j4eval[1]=IKsign(x13961);
j4eval[2]=((IKabs(r12))+(IKabs((x13959+(((-1.0)*x13960))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13962=cj5*cj5;
IkReal x13963=r11*r11;
IkReal x13964=(cj5*r10);
IkReal x13965=(r11*sj5);
CheckValue<IkReal> x13966 = IKatan2WithCheck(IkReal((x13965+(((-1.0)*x13964)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13966.valid){
continue;
}
CheckValue<IkReal> x13967=IKPowWithIntegerCheck(IKsign((((x13962*(r10*r10)))+(r12*r12)+x13963+(((-1.0)*x13962*x13963))+(((-2.0)*x13964*x13965)))),-1);
if(!x13967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13966.value)+(((1.5707963267949)*(x13967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13968=IKcos(j4);
IkReal x13969=IKsin(j4);
IkReal x13970=(cj5*r00);
IkReal x13971=(cj5*r10);
IkReal x13972=(r21*sj5);
IkReal x13973=(cj5*r20);
IkReal x13974=((1.0)*x13968);
IkReal x13975=((1.0)*x13969);
IkReal x13976=(sj5*x13969);
IkReal x13977=(sj5*x13968);
evalcond[0]=((((-1.0)*x13971*x13974))+((r11*x13977))+((r12*x13969)));
evalcond[1]=((((-1.0)*x13973*x13975))+(((-1.0)*r22*x13974))+((x13969*x13972)));
evalcond[2]=((((-1.0)*r02*x13974))+((r01*x13976))+(((-1.0)*x13970*x13975)));
evalcond[3]=((-1.0)+(((-1.0)*x13971*x13975))+(((-1.0)*r12*x13974))+((r11*x13976)));
evalcond[4]=(((r02*x13969))+((cj2*sj1))+((cj1*sj2))+((r01*x13977))+(((-1.0)*x13970*x13974)));
evalcond[5]=((((-1.0)*x13973*x13974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13968*x13972))+((r22*x13969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13978=((1.0)*cj5);
CheckValue<IkReal> x13979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13978))+(((-1.0)*r20*sj5)))),-1);
if(!x13979.valid){
continue;
}
CheckValue<IkReal> x13980 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13979.value)))+(x13980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13981=IKcos(j4);
IkReal x13982=IKsin(j4);
IkReal x13983=(cj5*r00);
IkReal x13984=(cj5*r10);
IkReal x13985=(r21*sj5);
IkReal x13986=(cj5*r20);
IkReal x13987=((1.0)*x13981);
IkReal x13988=((1.0)*x13982);
IkReal x13989=(sj5*x13982);
IkReal x13990=(sj5*x13981);
evalcond[0]=(((r12*x13982))+(((-1.0)*x13984*x13987))+((r11*x13990)));
evalcond[1]=((((-1.0)*x13986*x13988))+((x13982*x13985))+(((-1.0)*r22*x13987)));
evalcond[2]=(((r01*x13989))+(((-1.0)*r02*x13987))+(((-1.0)*x13983*x13988)));
evalcond[3]=((-1.0)+((r11*x13989))+(((-1.0)*x13984*x13988))+(((-1.0)*r12*x13987)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13982))+(((-1.0)*x13983*x13987))+((r01*x13990)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13986*x13987))+((r22*x13982))+((x13981*x13985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13991 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13991.valid){
continue;
}
CheckValue<IkReal> x13992=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13992.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13991.value)+(((1.5707963267949)*(x13992.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13993=IKcos(j4);
IkReal x13994=IKsin(j4);
IkReal x13995=(cj5*r00);
IkReal x13996=(cj5*r10);
IkReal x13997=(r21*sj5);
IkReal x13998=(cj5*r20);
IkReal x13999=((1.0)*x13993);
IkReal x14000=((1.0)*x13994);
IkReal x14001=(sj5*x13994);
IkReal x14002=(sj5*x13993);
evalcond[0]=(((r12*x13994))+(((-1.0)*x13996*x13999))+((r11*x14002)));
evalcond[1]=((((-1.0)*x13998*x14000))+((x13994*x13997))+(((-1.0)*r22*x13999)));
evalcond[2]=((((-1.0)*r02*x13999))+(((-1.0)*x13995*x14000))+((r01*x14001)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13999))+((r11*x14001))+(((-1.0)*x13996*x14000)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13994))+((r01*x14002))+(((-1.0)*x13995*x13999)));
evalcond[5]=(((r22*x13994))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13993*x13997))+(((-1.0)*x13998*x13999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14004 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14004)==0){
continue;
}
IkReal x14003=pow(x14004,-0.5);
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14005.value));
IkReal gconst37=((-1.0)*r01*x14003);
IkReal gconst38=(r00*x14003);
CheckValue<IkReal> x14006 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14006.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14006.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14009 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14009.valid){
continue;
}
IkReal x14007=((-1.0)*(x14009.value));
IkReal x14008=x14003;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14007;
IkReal gconst36=x14007;
IkReal gconst37=((-1.0)*r01*x14008);
IkReal gconst38=(r00*x14008);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14012 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14012.valid){
continue;
}
IkReal x14010=((-1.0)*(x14012.value));
IkReal x14011=x14003;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14010;
IkReal gconst36=x14010;
IkReal gconst37=((-1.0)*r01*x14011);
IkReal gconst38=(r00*x14011);
CheckValue<IkReal> x14020=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14020.valid){
continue;
}
IkReal x14013=x14020.value;
IkReal x14014=(sj3*x14013);
IkReal x14015=(r11*x14014);
IkReal x14016=(r21*x14014);
IkReal x14017=(r20*x14014);
IkReal x14018=(r10*x14014);
IkReal x14019=(r00*r01*x14014);
j4eval[0]=IKsign((((r21*x14015*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r20*x14015))+((r00*r01*r10*x14016))+((r10*x14017*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14021=gconst38*gconst38;
IkReal x14022=gconst37*gconst37;
IkReal x14023=((1.0)*cj3);
IkReal x14024=(r11*r20);
IkReal x14025=(r10*sj3);
IkReal x14026=(gconst37*gconst38);
IkReal x14027=(r11*sj3);
IkReal x14028=(r21*x14022);
IkReal x14029=(cj3*x14026);
CheckValue<IkReal> x14030 = IKatan2WithCheck(IkReal((((gconst38*r22*x14027))+((gconst37*r22*x14025)))),IkReal((((x14025*x14028))+(((-1.0)*r20*x14025*x14026))+((r21*x14026*x14027))+(((-1.0)*sj3*x14021*x14024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14030.valid){
continue;
}
CheckValue<IkReal> x14031=IKPowWithIntegerCheck(IKsign((((x14024*x14029))+(((-1.0)*r10*r20*x14021*x14023))+(((-1.0)*r11*x14023*x14028))+(((-1.0)*r12*r22*x14023))+((r10*r21*x14029)))),-1);
if(!x14031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14030.value)+(((1.5707963267949)*(x14031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14032=IKsin(j4);
IkReal x14033=IKcos(j4);
IkReal x14034=(cj2*sj1);
IkReal x14035=(cj1*sj2);
IkReal x14036=(gconst38*r21);
IkReal x14037=(cj3*r20);
IkReal x14038=(gconst38*r10);
IkReal x14039=(cj3*gconst37);
IkReal x14040=(sj1*sj2);
IkReal x14041=(gconst38*r00);
IkReal x14042=(cj1*cj2);
IkReal x14043=(gconst37*sj3);
IkReal x14044=(gconst38*r20);
IkReal x14045=(gconst38*r01);
IkReal x14046=(gconst38*r11);
IkReal x14047=((1.0)*x14033);
IkReal x14048=((1.0)*x14032);
IkReal x14049=(cj3*x14032);
IkReal x14050=(sj3*x14033);
IkReal x14051=(gconst37*x14032);
IkReal x14052=(x14035+x14034);
evalcond[0]=((((-1.0)*x14044*x14048))+(((-1.0)*r22*x14047))+((r21*x14051)));
evalcond[1]=((((-1.0)*r02*x14047))+(((-1.0)*x14041*x14048))+((r01*x14051)));
evalcond[2]=((-1.0)+((r11*x14051))+(((-1.0)*x14038*x14048))+(((-1.0)*r12*x14047)));
evalcond[3]=(((r11*x14033*x14039))+((sj3*x14046))+((r10*x14043))+(((-1.0)*cj3*x14038*x14047))+((r12*x14049)));
evalcond[4]=((((-1.0)*r12*sj3*x14048))+((r10*x14039))+((cj3*x14046))+((x14038*x14050))+(((-1.0)*r11*x14043*x14047)));
evalcond[5]=(((r22*x14049))+((sj3*x14036))+((r21*x14033*x14039))+((r20*x14043))+(((-1.0)*gconst38*x14037*x14047))+x14052);
evalcond[6]=(((r00*x14043))+(((-1.0)*x14040))+((sj3*x14045))+((r01*x14033*x14039))+(((-1.0)*cj3*x14041*x14047))+x14042+((r02*x14049)));
evalcond[7]=(((x14041*x14050))+((r00*x14039))+(((-1.0)*r02*sj3*x14048))+((cj3*x14045))+x14052+(((-1.0)*r01*x14043*x14047)));
evalcond[8]=((((-1.0)*x14042))+((cj3*x14036))+((gconst37*x14037))+(((-1.0)*r22*sj3*x14048))+x14040+(((-1.0)*r21*x14043*x14047))+((x14044*x14050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14053=gconst38*gconst38;
IkReal x14054=gconst37*gconst37;
IkReal x14055=(gconst37*r10);
IkReal x14056=(cj3*r22);
IkReal x14057=((1.0)*gconst38);
IkReal x14058=(r21*sj3);
IkReal x14059=(gconst38*r11);
IkReal x14060=(cj3*r20);
IkReal x14061=(cj3*r21);
IkReal x14062=(r20*sj3);
CheckValue<IkReal> x14063 = IKatan2WithCheck(IkReal((((x14055*x14056))+((x14056*x14059)))),IkReal(((((-1.0)*r11*x14053*x14060))+((gconst37*x14059*x14061))+(((-1.0)*x14055*x14057*x14060))+((r10*x14054*x14061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14063.valid){
continue;
}
CheckValue<IkReal> x14064=IKPowWithIntegerCheck(IKsign((((r11*x14054*x14058))+(((-1.0)*x14055*x14057*x14058))+((r12*r22*sj3))+(((-1.0)*gconst37*r11*x14057*x14062))+((r10*x14053*x14062)))),-1);
if(!x14064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14063.value)+(((1.5707963267949)*(x14064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14065=IKsin(j4);
IkReal x14066=IKcos(j4);
IkReal x14067=(cj2*sj1);
IkReal x14068=(cj1*sj2);
IkReal x14069=(gconst38*r21);
IkReal x14070=(cj3*r20);
IkReal x14071=(gconst38*r10);
IkReal x14072=(cj3*gconst37);
IkReal x14073=(sj1*sj2);
IkReal x14074=(gconst38*r00);
IkReal x14075=(cj1*cj2);
IkReal x14076=(gconst37*sj3);
IkReal x14077=(gconst38*r20);
IkReal x14078=(gconst38*r01);
IkReal x14079=(gconst38*r11);
IkReal x14080=((1.0)*x14066);
IkReal x14081=((1.0)*x14065);
IkReal x14082=(cj3*x14065);
IkReal x14083=(sj3*x14066);
IkReal x14084=(gconst37*x14065);
IkReal x14085=(x14068+x14067);
evalcond[0]=((((-1.0)*r22*x14080))+(((-1.0)*x14077*x14081))+((r21*x14084)));
evalcond[1]=((((-1.0)*x14074*x14081))+((r01*x14084))+(((-1.0)*r02*x14080)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14080))+((r11*x14084))+(((-1.0)*x14071*x14081)));
evalcond[3]=(((sj3*x14079))+((r10*x14076))+((r12*x14082))+(((-1.0)*cj3*x14071*x14080))+((r11*x14066*x14072)));
evalcond[4]=((((-1.0)*r12*sj3*x14081))+((x14071*x14083))+((r10*x14072))+(((-1.0)*r11*x14076*x14080))+((cj3*x14079)));
evalcond[5]=(((r21*x14066*x14072))+(((-1.0)*gconst38*x14070*x14080))+((sj3*x14069))+((r22*x14082))+((r20*x14076))+x14085);
evalcond[6]=(((sj3*x14078))+((r02*x14082))+((r00*x14076))+(((-1.0)*x14073))+x14075+(((-1.0)*cj3*x14074*x14080))+((r01*x14066*x14072)));
evalcond[7]=((((-1.0)*r01*x14076*x14080))+((r00*x14072))+(((-1.0)*r02*sj3*x14081))+x14085+((x14074*x14083))+((cj3*x14078)));
evalcond[8]=(((cj3*x14069))+(((-1.0)*r22*sj3*x14081))+(((-1.0)*r21*x14076*x14080))+((x14077*x14083))+((gconst37*x14070))+(((-1.0)*x14075))+x14073);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14086=((1.0)*gconst38);
CheckValue<IkReal> x14087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14086))+(((-1.0)*gconst37*r20)))),-1);
if(!x14087.valid){
continue;
}
CheckValue<IkReal> x14088 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14086))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14087.value)))+(x14088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14089=IKsin(j4);
IkReal x14090=IKcos(j4);
IkReal x14091=(cj2*sj1);
IkReal x14092=(cj1*sj2);
IkReal x14093=(gconst38*r21);
IkReal x14094=(cj3*r20);
IkReal x14095=(gconst38*r10);
IkReal x14096=(cj3*gconst37);
IkReal x14097=(sj1*sj2);
IkReal x14098=(gconst38*r00);
IkReal x14099=(cj1*cj2);
IkReal x14100=(gconst37*sj3);
IkReal x14101=(gconst38*r20);
IkReal x14102=(gconst38*r01);
IkReal x14103=(gconst38*r11);
IkReal x14104=((1.0)*x14090);
IkReal x14105=((1.0)*x14089);
IkReal x14106=(cj3*x14089);
IkReal x14107=(sj3*x14090);
IkReal x14108=(gconst37*x14089);
IkReal x14109=(x14091+x14092);
evalcond[0]=((((-1.0)*x14101*x14105))+(((-1.0)*r22*x14104))+((r21*x14108)));
evalcond[1]=(((r01*x14108))+(((-1.0)*r02*x14104))+(((-1.0)*x14098*x14105)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14104))+(((-1.0)*x14095*x14105))+((r11*x14108)));
evalcond[3]=(((sj3*x14103))+(((-1.0)*cj3*x14095*x14104))+((r10*x14100))+((r11*x14090*x14096))+((r12*x14106)));
evalcond[4]=((((-1.0)*r11*x14100*x14104))+((cj3*x14103))+((r10*x14096))+((x14095*x14107))+(((-1.0)*r12*sj3*x14105)));
evalcond[5]=(((sj3*x14093))+((r22*x14106))+((r21*x14090*x14096))+x14109+((r20*x14100))+(((-1.0)*gconst38*x14094*x14104)));
evalcond[6]=(((sj3*x14102))+((r02*x14106))+(((-1.0)*cj3*x14098*x14104))+((r00*x14100))+(((-1.0)*x14097))+((r01*x14090*x14096))+x14099);
evalcond[7]=(((r00*x14096))+(((-1.0)*r02*sj3*x14105))+((x14098*x14107))+((cj3*x14102))+(((-1.0)*r01*x14100*x14104))+x14109);
evalcond[8]=((((-1.0)*r22*sj3*x14105))+(((-1.0)*r21*x14100*x14104))+(((-1.0)*x14099))+((gconst37*x14094))+((cj3*x14093))+((x14101*x14107))+x14097);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14111 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14111)==0){
continue;
}
IkReal x14110=pow(x14111,-0.5);
CheckValue<IkReal> x14112 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14112.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14112.value))));
IkReal gconst40=((1.0)*r01*x14110);
IkReal gconst41=((-1.0)*r00*x14110);
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14113.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14116 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14116.valid){
continue;
}
IkReal x14114=((1.0)*(x14116.value));
IkReal x14115=x14110;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14114)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14114)));
IkReal gconst40=((1.0)*r01*x14115);
IkReal gconst41=((-1.0)*r00*x14115);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14119 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14119.valid){
continue;
}
IkReal x14117=((1.0)*(x14119.value));
IkReal x14118=x14110;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14117)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14117)));
IkReal gconst40=((1.0)*r01*x14118);
IkReal gconst41=((-1.0)*r00*x14118);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14120=gconst41*gconst41;
IkReal x14121=gconst40*gconst40;
IkReal x14122=(gconst40*r10);
IkReal x14123=(r22*sj3);
IkReal x14124=(r11*sj3);
IkReal x14125=((1.0)*cj3);
IkReal x14126=(gconst41*r21);
IkReal x14127=(gconst41*r20);
IkReal x14128=(r21*x14121);
IkReal x14129=((1.0)*r20*x14120);
CheckValue<IkReal> x14130 = IKatan2WithCheck(IkReal((((gconst41*r11*x14123))+((x14122*x14123)))),IkReal(((((-1.0)*sj3*x14122*x14127))+(((-1.0)*x14124*x14129))+((gconst40*x14124*x14126))+((r10*sj3*x14128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14130.valid){
continue;
}
CheckValue<IkReal> x14131=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14127))+((cj3*x14122*x14126))+(((-1.0)*r11*x14125*x14128))+(((-1.0)*r12*r22*x14125))+(((-1.0)*r10*r20*x14120*x14125)))),-1);
if(!x14131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14130.value)+(((1.5707963267949)*(x14131.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14132=IKsin(j4);
IkReal x14133=IKcos(j4);
IkReal x14134=(cj2*sj1);
IkReal x14135=(cj1*sj2);
IkReal x14136=(gconst40*sj3);
IkReal x14137=(gconst41*sj3);
IkReal x14138=(gconst41*r20);
IkReal x14139=(cj3*gconst41);
IkReal x14140=(sj1*sj2);
IkReal x14141=(cj1*cj2);
IkReal x14142=(cj3*gconst40);
IkReal x14143=((1.0)*x14133);
IkReal x14144=((1.0)*x14132);
IkReal x14145=(cj3*x14132);
IkReal x14146=(gconst40*x14132);
IkReal x14147=(x14134+x14135);
IkReal x14148=(x14133*x14142);
evalcond[0]=((((-1.0)*r22*x14143))+((r21*x14146))+(((-1.0)*x14138*x14144)));
evalcond[1]=((((-1.0)*gconst41*r00*x14144))+((r01*x14146))+(((-1.0)*r02*x14143)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14144))+(((-1.0)*r12*x14143))+((r11*x14146)));
evalcond[3]=((((-1.0)*r10*x14139*x14143))+((r11*x14137))+((r10*x14136))+((r12*x14145))+((r11*x14148)));
evalcond[4]=(((r10*x14142))+((r10*x14133*x14137))+(((-1.0)*r12*sj3*x14144))+((r11*x14139))+(((-1.0)*r11*x14136*x14143)));
evalcond[5]=((((-1.0)*cj3*x14138*x14143))+((r20*x14136))+((r21*x14148))+((r21*x14137))+((r22*x14145))+x14147);
evalcond[6]=((((-1.0)*r00*x14139*x14143))+((r02*x14145))+((r01*x14148))+x14141+(((-1.0)*x14140))+((r00*x14136))+((r01*x14137)));
evalcond[7]=((((-1.0)*r01*x14136*x14143))+((r00*x14133*x14137))+(((-1.0)*r02*sj3*x14144))+((r00*x14142))+x14147+((r01*x14139)));
evalcond[8]=(((r20*x14133*x14137))+(((-1.0)*r22*sj3*x14144))+(((-1.0)*r21*x14136*x14143))+((r21*x14139))+x14140+(((-1.0)*x14141))+((r20*x14142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14149=((1.0)*gconst41);
CheckValue<IkReal> x14150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14149))+(((-1.0)*gconst40*r20)))),-1);
if(!x14150.valid){
continue;
}
CheckValue<IkReal> x14151 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x14149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14150.value)))+(x14151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14152=IKsin(j4);
IkReal x14153=IKcos(j4);
IkReal x14154=(cj2*sj1);
IkReal x14155=(cj1*sj2);
IkReal x14156=(gconst40*sj3);
IkReal x14157=(gconst41*sj3);
IkReal x14158=(gconst41*r20);
IkReal x14159=(cj3*gconst41);
IkReal x14160=(sj1*sj2);
IkReal x14161=(cj1*cj2);
IkReal x14162=(cj3*gconst40);
IkReal x14163=((1.0)*x14153);
IkReal x14164=((1.0)*x14152);
IkReal x14165=(cj3*x14152);
IkReal x14166=(gconst40*x14152);
IkReal x14167=(x14154+x14155);
IkReal x14168=(x14153*x14162);
evalcond[0]=((((-1.0)*r22*x14163))+((r21*x14166))+(((-1.0)*x14158*x14164)));
evalcond[1]=((((-1.0)*r02*x14163))+((r01*x14166))+(((-1.0)*gconst41*r00*x14164)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14164))+(((-1.0)*r12*x14163))+((r11*x14166)));
evalcond[3]=(((r10*x14156))+((r11*x14157))+((r11*x14168))+(((-1.0)*r10*x14159*x14163))+((r12*x14165)));
evalcond[4]=(((r10*x14162))+(((-1.0)*r11*x14156*x14163))+(((-1.0)*r12*sj3*x14164))+((r11*x14159))+((r10*x14153*x14157)));
evalcond[5]=(((r22*x14165))+x14167+((r21*x14157))+((r21*x14168))+((r20*x14156))+(((-1.0)*cj3*x14158*x14163)));
evalcond[6]=(((r02*x14165))+(((-1.0)*r00*x14159*x14163))+((r00*x14156))+((r01*x14157))+((r01*x14168))+x14161+(((-1.0)*x14160)));
evalcond[7]=((((-1.0)*r01*x14156*x14163))+(((-1.0)*r02*sj3*x14164))+((r00*x14162))+((r01*x14159))+x14167+((r00*x14153*x14157)));
evalcond[8]=(((r20*x14153*x14157))+(((-1.0)*r21*x14156*x14163))+(((-1.0)*r22*sj3*x14164))+x14160+((r21*x14159))+((r20*x14162))+(((-1.0)*x14161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14169 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14169.valid){
continue;
}
CheckValue<IkReal> x14170=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14169.value)+(((1.5707963267949)*(x14170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14171=IKsin(j4);
IkReal x14172=IKcos(j4);
IkReal x14173=(cj2*sj1);
IkReal x14174=(cj1*sj2);
IkReal x14175=(gconst40*sj3);
IkReal x14176=(gconst41*sj3);
IkReal x14177=(gconst41*r20);
IkReal x14178=(cj3*gconst41);
IkReal x14179=(sj1*sj2);
IkReal x14180=(cj1*cj2);
IkReal x14181=(cj3*gconst40);
IkReal x14182=((1.0)*x14172);
IkReal x14183=((1.0)*x14171);
IkReal x14184=(cj3*x14171);
IkReal x14185=(gconst40*x14171);
IkReal x14186=(x14174+x14173);
IkReal x14187=(x14172*x14181);
evalcond[0]=((((-1.0)*x14177*x14183))+(((-1.0)*r22*x14182))+((r21*x14185)));
evalcond[1]=((((-1.0)*gconst41*r00*x14183))+((r01*x14185))+(((-1.0)*r02*x14182)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14182))+((r11*x14185))+(((-1.0)*gconst41*r10*x14183)));
evalcond[3]=(((r11*x14176))+(((-1.0)*r10*x14178*x14182))+((r12*x14184))+((r11*x14187))+((r10*x14175)));
evalcond[4]=((((-1.0)*r12*sj3*x14183))+((r10*x14172*x14176))+((r11*x14178))+((r10*x14181))+(((-1.0)*r11*x14175*x14182)));
evalcond[5]=(((r21*x14176))+((r20*x14175))+(((-1.0)*cj3*x14177*x14182))+((r22*x14184))+((r21*x14187))+x14186);
evalcond[6]=((((-1.0)*r00*x14178*x14182))+((r02*x14184))+((r01*x14176))+((r00*x14175))+(((-1.0)*x14179))+((r01*x14187))+x14180);
evalcond[7]=(((r01*x14178))+(((-1.0)*r02*sj3*x14183))+((r00*x14181))+(((-1.0)*r01*x14175*x14182))+x14186+((r00*x14172*x14176)));
evalcond[8]=(((r20*x14181))+((r20*x14172*x14176))+((r21*x14178))+(((-1.0)*r21*x14175*x14182))+x14179+(((-1.0)*r22*sj3*x14183))+(((-1.0)*x14180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14188=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14188);
rxp1_1=(px*r21);
rxp1_2=(r11*x14188);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14189=(r11*sj5);
IkReal x14190=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14190))+x14189);
j4eval[1]=(((cj3*x14189))+(((-1.0)*cj3*x14190)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14191=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14191);
rxp1_1=(px*r21);
rxp1_2=(r11*x14191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14192=(cj5*r10);
IkReal x14193=(r11*sj5);
j4eval[0]=((((-1.0)*x14192))+x14193);
j4eval[1]=(((sj3*x14192))+(((-1.0)*sj3*x14193)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14194=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14194);
rxp1_1=(px*r21);
rxp1_2=(r11*x14194);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14195=((1.0)*r10);
CheckValue<IkReal> x14196=IKPowWithIntegerCheck(cj3,-1);
if(!x14196.valid){
continue;
}
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(r02,-1);
if(!x14197.valid){
continue;
}
CheckValue<IkReal> x14198=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14195))+((cj3*r11*sj5))),-1);
if(!x14198.valid){
continue;
}
if( IKabs(((x14196.value)*(x14197.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14198.value)*(((((-1.0)*sj3*sj5*x14195))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14196.value)*(x14197.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14198.value)*(((((-1.0)*sj3*sj5*x14195))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x14196.value)*(x14197.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14198.value)*(((((-1.0)*sj3*sj5*x14195))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14199=IKsin(j4);
IkReal x14200=IKcos(j4);
IkReal x14201=(cj2*sj1);
IkReal x14202=(cj1*sj2);
IkReal x14203=(cj5*r10);
IkReal x14204=(sj1*sj2);
IkReal x14205=(cj5*sj3);
IkReal x14206=(r11*sj5);
IkReal x14207=(cj3*sj5);
IkReal x14208=(r21*sj5);
IkReal x14209=(cj1*cj2);
IkReal x14210=(cj3*cj5);
IkReal x14211=(sj3*sj5);
IkReal x14212=((1.0)*x14199);
IkReal x14213=(r20*x14200);
IkReal x14214=(cj3*x14200);
IkReal x14215=(sj3*x14200);
IkReal x14216=(x14201+x14202);
evalcond[0]=((-1.0)*r02*x14200);
evalcond[1]=((((-1.0)*cj5*r20*x14212))+((x14199*x14208)));
evalcond[2]=((((-1.0)*x14204))+((cj3*r02*x14199))+x14209);
evalcond[3]=((((-1.0)*r02*sj3*x14212))+x14216);
evalcond[4]=((-1.0)+((x14199*x14206))+(((-1.0)*x14203*x14212)));
evalcond[5]=(((x14206*x14214))+((r10*x14211))+(((-1.0)*x14203*x14214))+((r11*x14205)));
evalcond[6]=(((r11*x14210))+((r10*x14207))+(((-1.0)*x14206*x14215))+((x14203*x14215)));
evalcond[7]=(((r21*x14205))+((r21*x14200*x14207))+((r20*x14211))+x14216+(((-1.0)*x14210*x14213)));
evalcond[8]=(((x14205*x14213))+((r20*x14207))+(((-1.0)*x14209))+((r21*x14210))+(((-1.0)*x14208*x14215))+x14204);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14217=(cj5*r10);
IkReal x14218=((1.0)*r11);
CheckValue<IkReal> x14219=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14217))),-1);
if(!x14219.valid){
continue;
}
CheckValue<IkReal> x14220=IKPowWithIntegerCheck((((sj3*x14217))+(((-1.0)*sj3*sj5*x14218))),-1);
if(!x14220.valid){
continue;
}
if( IKabs(x14219.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14220.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14218)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14219.value)+IKsqr(((x14220.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14218))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(x14219.value, ((x14220.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14218))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14221=IKsin(j4);
IkReal x14222=IKcos(j4);
IkReal x14223=(cj2*sj1);
IkReal x14224=(cj1*sj2);
IkReal x14225=(cj5*r10);
IkReal x14226=(sj1*sj2);
IkReal x14227=(cj5*sj3);
IkReal x14228=(r11*sj5);
IkReal x14229=(cj3*sj5);
IkReal x14230=(r21*sj5);
IkReal x14231=(cj1*cj2);
IkReal x14232=(cj3*cj5);
IkReal x14233=(sj3*sj5);
IkReal x14234=((1.0)*x14221);
IkReal x14235=(r20*x14222);
IkReal x14236=(cj3*x14222);
IkReal x14237=(sj3*x14222);
IkReal x14238=(x14223+x14224);
evalcond[0]=((-1.0)*r02*x14222);
evalcond[1]=(((x14221*x14230))+(((-1.0)*cj5*r20*x14234)));
evalcond[2]=((((-1.0)*x14226))+x14231+((cj3*r02*x14221)));
evalcond[3]=((((-1.0)*r02*sj3*x14234))+x14238);
evalcond[4]=((-1.0)+((x14221*x14228))+(((-1.0)*x14225*x14234)));
evalcond[5]=(((x14228*x14236))+((r10*x14233))+((r11*x14227))+(((-1.0)*x14225*x14236)));
evalcond[6]=((((-1.0)*x14228*x14237))+((x14225*x14237))+((r10*x14229))+((r11*x14232)));
evalcond[7]=(((r20*x14233))+((r21*x14227))+(((-1.0)*x14232*x14235))+x14238+((r21*x14222*x14229)));
evalcond[8]=(((r20*x14229))+((r21*x14232))+(((-1.0)*x14231))+((x14227*x14235))+(((-1.0)*x14230*x14237))+x14226);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14239=((1.0)*r10);
IkReal x14240=(r11*sj5);
CheckValue<IkReal> x14241=IKPowWithIntegerCheck(((((-1.0)*cj5*x14239))+x14240),-1);
if(!x14241.valid){
continue;
}
CheckValue<IkReal> x14242=IKPowWithIntegerCheck((((cj3*x14240))+(((-1.0)*cj3*cj5*x14239))),-1);
if(!x14242.valid){
continue;
}
if( IKabs(x14241.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14242.value)*(((((-1.0)*sj3*sj5*x14239))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14241.value)+IKsqr(((x14242.value)*(((((-1.0)*sj3*sj5*x14239))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(x14241.value, ((x14242.value)*(((((-1.0)*sj3*sj5*x14239))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14243=IKsin(j4);
IkReal x14244=IKcos(j4);
IkReal x14245=(cj2*sj1);
IkReal x14246=(cj1*sj2);
IkReal x14247=(cj5*r10);
IkReal x14248=(sj1*sj2);
IkReal x14249=(cj5*sj3);
IkReal x14250=(r11*sj5);
IkReal x14251=(cj3*sj5);
IkReal x14252=(r21*sj5);
IkReal x14253=(cj1*cj2);
IkReal x14254=(cj3*cj5);
IkReal x14255=(sj3*sj5);
IkReal x14256=((1.0)*x14243);
IkReal x14257=(r20*x14244);
IkReal x14258=(cj3*x14244);
IkReal x14259=(sj3*x14244);
IkReal x14260=(x14245+x14246);
evalcond[0]=((-1.0)*r02*x14244);
evalcond[1]=((((-1.0)*cj5*r20*x14256))+((x14243*x14252)));
evalcond[2]=((((-1.0)*x14248))+((cj3*r02*x14243))+x14253);
evalcond[3]=((((-1.0)*r02*sj3*x14256))+x14260);
evalcond[4]=((-1.0)+(((-1.0)*x14247*x14256))+((x14243*x14250)));
evalcond[5]=(((x14250*x14258))+((r10*x14255))+(((-1.0)*x14247*x14258))+((r11*x14249)));
evalcond[6]=((((-1.0)*x14250*x14259))+((x14247*x14259))+((r10*x14251))+((r11*x14254)));
evalcond[7]=(((r21*x14249))+(((-1.0)*x14254*x14257))+((r20*x14255))+((r21*x14244*x14251))+x14260);
evalcond[8]=(((r21*x14254))+((x14249*x14257))+((r20*x14251))+(((-1.0)*x14252*x14259))+x14248+(((-1.0)*x14253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14261=cj5*cj5;
IkReal x14262=((1.0)*cj3);
IkReal x14263=(r10*r21);
IkReal x14264=(cj5*sj5);
IkReal x14265=(r11*r21);
IkReal x14266=(r11*r20);
IkReal x14267=(r22*sj3);
IkReal x14268=(r10*r20);
IkReal x14269=((1.0)*sj3*x14261);
CheckValue<IkReal> x14270=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14262*x14265))+((cj3*x14261*x14265))+(((-1.0)*x14261*x14262*x14268))+((cj3*x14263*x14264))+((cj3*x14264*x14266))+(((-1.0)*r12*r22*x14262)))),-1);
if(!x14270.valid){
continue;
}
CheckValue<IkReal> x14271 = IKatan2WithCheck(IkReal((((cj5*r11*x14267))+((r10*sj5*x14267)))),IkReal((((sj3*x14263))+((sj3*x14264*x14265))+(((-1.0)*x14263*x14269))+(((-1.0)*x14266*x14269))+(((-1.0)*sj3*x14264*x14268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14270.value)))+(x14271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14272=IKsin(j4);
IkReal x14273=IKcos(j4);
IkReal x14274=(cj2*sj1);
IkReal x14275=(cj1*sj2);
IkReal x14276=(cj5*sj3);
IkReal x14277=(cj5*r10);
IkReal x14278=(r00*sj5);
IkReal x14279=(sj1*sj2);
IkReal x14280=(r11*sj5);
IkReal x14281=(cj3*cj5);
IkReal x14282=(cj3*sj5);
IkReal x14283=(r21*sj5);
IkReal x14284=(cj1*cj2);
IkReal x14285=(sj3*sj5);
IkReal x14286=(r01*sj5);
IkReal x14287=((1.0)*x14273);
IkReal x14288=((1.0)*x14272);
IkReal x14289=(cj3*x14272);
IkReal x14290=(cj3*x14273);
IkReal x14291=(x14275+x14274);
evalcond[0]=((((-1.0)*r22*x14287))+((x14272*x14283))+(((-1.0)*cj5*r20*x14288)));
evalcond[1]=(((x14272*x14286))+(((-1.0)*cj5*r00*x14288))+(((-1.0)*r02*x14287)));
evalcond[2]=((-1.0)+((x14272*x14280))+(((-1.0)*r12*x14287))+(((-1.0)*x14277*x14288)));
evalcond[3]=((((-1.0)*cj3*x14277*x14287))+((r10*x14285))+((r11*x14276))+((r12*x14289))+((x14280*x14290)));
evalcond[4]=((((-1.0)*r12*sj3*x14288))+((r10*x14273*x14276))+((r10*x14282))+((r11*x14281))+(((-1.0)*sj3*x14280*x14287)));
evalcond[5]=(((r21*x14276))+(((-1.0)*r20*x14281*x14287))+((r22*x14289))+((r21*x14273*x14282))+x14291+((r20*x14285)));
evalcond[6]=(((sj3*x14278))+(((-1.0)*x14279))+((r01*x14276))+((r01*x14273*x14282))+(((-1.0)*r00*x14281*x14287))+x14284+((r02*x14289)));
evalcond[7]=(((cj3*x14278))+((r01*x14281))+(((-1.0)*r02*sj3*x14288))+((r00*x14273*x14276))+(((-1.0)*r01*x14285*x14287))+x14291);
evalcond[8]=(((r21*x14281))+((r20*x14273*x14276))+(((-1.0)*sj3*x14283*x14287))+(((-1.0)*r22*sj3*x14288))+(((-1.0)*x14284))+x14279+((r20*x14282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14292=((1.0)*cj5);
CheckValue<IkReal> x14293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14292))+(((-1.0)*r20*sj5)))),-1);
if(!x14293.valid){
continue;
}
CheckValue<IkReal> x14294 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14293.value)))+(x14294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14295=IKsin(j4);
IkReal x14296=IKcos(j4);
IkReal x14297=(cj2*sj1);
IkReal x14298=(cj1*sj2);
IkReal x14299=(cj5*sj3);
IkReal x14300=(cj5*r10);
IkReal x14301=(r00*sj5);
IkReal x14302=(sj1*sj2);
IkReal x14303=(r11*sj5);
IkReal x14304=(cj3*cj5);
IkReal x14305=(cj3*sj5);
IkReal x14306=(r21*sj5);
IkReal x14307=(cj1*cj2);
IkReal x14308=(sj3*sj5);
IkReal x14309=(r01*sj5);
IkReal x14310=((1.0)*x14296);
IkReal x14311=((1.0)*x14295);
IkReal x14312=(cj3*x14295);
IkReal x14313=(cj3*x14296);
IkReal x14314=(x14297+x14298);
evalcond[0]=((((-1.0)*r22*x14310))+(((-1.0)*cj5*r20*x14311))+((x14295*x14306)));
evalcond[1]=((((-1.0)*r02*x14310))+(((-1.0)*cj5*r00*x14311))+((x14295*x14309)));
evalcond[2]=((-1.0)+(((-1.0)*x14300*x14311))+(((-1.0)*r12*x14310))+((x14295*x14303)));
evalcond[3]=((((-1.0)*cj3*x14300*x14310))+((x14303*x14313))+((r11*x14299))+((r10*x14308))+((r12*x14312)));
evalcond[4]=(((r11*x14304))+(((-1.0)*r12*sj3*x14311))+(((-1.0)*sj3*x14303*x14310))+((r10*x14305))+((r10*x14296*x14299)));
evalcond[5]=(((r20*x14308))+((r21*x14299))+((r21*x14296*x14305))+(((-1.0)*r20*x14304*x14310))+x14314+((r22*x14312)));
evalcond[6]=(((r02*x14312))+((r01*x14296*x14305))+((r01*x14299))+(((-1.0)*x14302))+x14307+(((-1.0)*r00*x14304*x14310))+((sj3*x14301)));
evalcond[7]=(((r00*x14296*x14299))+((r01*x14304))+(((-1.0)*r02*sj3*x14311))+(((-1.0)*r01*x14308*x14310))+x14314+((cj3*x14301)));
evalcond[8]=(((r20*x14305))+(((-1.0)*sj3*x14306*x14310))+(((-1.0)*x14307))+((r20*x14296*x14299))+x14302+((r21*x14304))+(((-1.0)*r22*sj3*x14311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14315 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14315.valid){
continue;
}
CheckValue<IkReal> x14316=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14315.value)+(((1.5707963267949)*(x14316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14317=IKsin(j4);
IkReal x14318=IKcos(j4);
IkReal x14319=(cj2*sj1);
IkReal x14320=(cj1*sj2);
IkReal x14321=(cj5*sj3);
IkReal x14322=(cj5*r10);
IkReal x14323=(r00*sj5);
IkReal x14324=(sj1*sj2);
IkReal x14325=(r11*sj5);
IkReal x14326=(cj3*cj5);
IkReal x14327=(cj3*sj5);
IkReal x14328=(r21*sj5);
IkReal x14329=(cj1*cj2);
IkReal x14330=(sj3*sj5);
IkReal x14331=(r01*sj5);
IkReal x14332=((1.0)*x14318);
IkReal x14333=((1.0)*x14317);
IkReal x14334=(cj3*x14317);
IkReal x14335=(cj3*x14318);
IkReal x14336=(x14319+x14320);
evalcond[0]=((((-1.0)*r22*x14332))+(((-1.0)*cj5*r20*x14333))+((x14317*x14328)));
evalcond[1]=((((-1.0)*cj5*r00*x14333))+(((-1.0)*r02*x14332))+((x14317*x14331)));
evalcond[2]=((-1.0)+(((-1.0)*x14322*x14333))+(((-1.0)*r12*x14332))+((x14317*x14325)));
evalcond[3]=(((x14325*x14335))+((r12*x14334))+(((-1.0)*cj3*x14322*x14332))+((r11*x14321))+((r10*x14330)));
evalcond[4]=(((r10*x14327))+(((-1.0)*sj3*x14325*x14332))+((r11*x14326))+((r10*x14318*x14321))+(((-1.0)*r12*sj3*x14333)));
evalcond[5]=(((r20*x14330))+(((-1.0)*r20*x14326*x14332))+((r21*x14321))+((r22*x14334))+((r21*x14318*x14327))+x14336);
evalcond[6]=(((r01*x14318*x14327))+((r02*x14334))+((r01*x14321))+((sj3*x14323))+(((-1.0)*r00*x14326*x14332))+x14329+(((-1.0)*x14324)));
evalcond[7]=((((-1.0)*r02*sj3*x14333))+((r01*x14326))+((r00*x14318*x14321))+(((-1.0)*r01*x14330*x14332))+((cj3*x14323))+x14336);
evalcond[8]=(((r20*x14318*x14321))+(((-1.0)*r22*sj3*x14333))+(((-1.0)*sj3*x14328*x14332))+((r21*x14326))+((r20*x14327))+x14324+(((-1.0)*x14329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14337=((-1.0)*r00);
IkReal x14339 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14339)==0){
continue;
}
IkReal x14338=pow(x14339,-0.5);
CheckValue<IkReal> x14340 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14337),IKFAST_ATAN2_MAGTHRESH);
if(!x14340.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14340.value));
IkReal gconst13=(r01*x14338);
IkReal gconst14=(x14337*x14338);
CheckValue<IkReal> x14341 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14341.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14341.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14342=((-1.0)*r00);
IkReal x14343=x14338;
CheckValue<IkReal> x14345 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14342),IKFAST_ATAN2_MAGTHRESH);
if(!x14345.valid){
continue;
}
IkReal x14344=((-1.0)*(x14345.value));
sj5=gconst13;
cj5=gconst14;
j5=x14344;
IkReal gconst12=x14344;
IkReal gconst13=(r01*x14343);
IkReal gconst14=(x14342*x14343);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14346=((1.0)*sj0);
IkReal x14347=((1.0)*cj0);
CheckValue<IkReal> x14348 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14346))+(((-1.0)*r02*x14347)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14346))+(((-1.0)*gconst13*r01*x14347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14348.valid){
continue;
}
CheckValue<IkReal> x14349=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14348.value)+(((1.5707963267949)*(x14349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14350=IKsin(j4);
IkReal x14351=IKcos(j4);
IkReal x14352=((1.0)*r22);
IkReal x14353=((1.0)*r12);
IkReal x14354=(gconst13*sj3);
IkReal x14355=(gconst13*r01);
IkReal x14356=(sj1*sj2);
IkReal x14357=(gconst14*sj3);
IkReal x14358=(cj2*sj1);
IkReal x14359=((1.0)*sj0);
IkReal x14360=(cj3*gconst13);
IkReal x14361=(cj3*gconst14);
IkReal x14362=((1.0)*cj0);
IkReal x14363=((1.0)*gconst14);
IkReal x14364=(cj1*sj2);
IkReal x14365=(sj3*x14350);
IkReal x14366=((1.0)*cj1*cj2);
IkReal x14367=(cj3*x14351);
IkReal x14368=(cj3*x14350);
IkReal x14369=(gconst13*x14350);
IkReal x14370=((1.0)*x14351);
IkReal x14371=(x14350*x14363);
evalcond[0]=((((-1.0)*r20*x14371))+(((-1.0)*x14351*x14352))+((r21*x14369)));
evalcond[1]=(((r11*x14369))+cj0+(((-1.0)*x14351*x14353))+(((-1.0)*r10*x14371)));
evalcond[2]=((((-1.0)*x14359))+(((-1.0)*r02*x14370))+((x14350*x14355))+(((-1.0)*r00*x14371)));
evalcond[3]=(((r20*x14354))+(((-1.0)*r20*x14361*x14370))+((r21*x14357))+((r21*x14351*x14360))+x14358+x14364+((r22*x14368)));
evalcond[4]=((((-1.0)*r21*x14354*x14370))+(((-1.0)*x14366))+((r20*x14360))+((r20*x14351*x14357))+((r21*x14361))+(((-1.0)*x14352*x14365))+x14356);
evalcond[5]=(((r02*x14368))+((cj0*x14356))+((r00*x14354))+((r01*x14357))+(((-1.0)*cj1*cj2*x14362))+((x14355*x14367))+(((-1.0)*r00*x14361*x14370)));
evalcond[6]=((((-1.0)*cj1*cj2*x14359))+((r11*x14357))+(((-1.0)*r10*x14361*x14370))+((r10*x14354))+((sj0*x14356))+((r12*x14368))+((r11*x14351*x14360)));
evalcond[7]=((((-1.0)*r02*x14365))+(((-1.0)*x14362*x14364))+(((-1.0)*r01*x14354*x14370))+((r01*x14361))+((r00*x14351*x14357))+((r00*x14360))+(((-1.0)*x14358*x14362)));
evalcond[8]=(((r10*x14360))+((r11*x14361))+(((-1.0)*x14358*x14359))+(((-1.0)*x14353*x14365))+(((-1.0)*r11*x14354*x14370))+(((-1.0)*x14359*x14364))+((r10*x14351*x14357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14372=((1.0)*gconst14);
CheckValue<IkReal> x14373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14372))+(((-1.0)*gconst13*r10)))),-1);
if(!x14373.valid){
continue;
}
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14372))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14373.value)))+(x14374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14375=IKsin(j4);
IkReal x14376=IKcos(j4);
IkReal x14377=((1.0)*r22);
IkReal x14378=((1.0)*r12);
IkReal x14379=(gconst13*sj3);
IkReal x14380=(gconst13*r01);
IkReal x14381=(sj1*sj2);
IkReal x14382=(gconst14*sj3);
IkReal x14383=(cj2*sj1);
IkReal x14384=((1.0)*sj0);
IkReal x14385=(cj3*gconst13);
IkReal x14386=(cj3*gconst14);
IkReal x14387=((1.0)*cj0);
IkReal x14388=((1.0)*gconst14);
IkReal x14389=(cj1*sj2);
IkReal x14390=(sj3*x14375);
IkReal x14391=((1.0)*cj1*cj2);
IkReal x14392=(cj3*x14376);
IkReal x14393=(cj3*x14375);
IkReal x14394=(gconst13*x14375);
IkReal x14395=((1.0)*x14376);
IkReal x14396=(x14375*x14388);
evalcond[0]=(((r21*x14394))+(((-1.0)*r20*x14396))+(((-1.0)*x14376*x14377)));
evalcond[1]=(cj0+(((-1.0)*x14376*x14378))+((r11*x14394))+(((-1.0)*r10*x14396)));
evalcond[2]=((((-1.0)*x14384))+((x14375*x14380))+(((-1.0)*r00*x14396))+(((-1.0)*r02*x14395)));
evalcond[3]=(((r21*x14376*x14385))+((r21*x14382))+((r22*x14393))+(((-1.0)*r20*x14386*x14395))+((r20*x14379))+x14389+x14383);
evalcond[4]=(((r20*x14385))+(((-1.0)*x14377*x14390))+((r20*x14376*x14382))+((r21*x14386))+(((-1.0)*r21*x14379*x14395))+x14381+(((-1.0)*x14391)));
evalcond[5]=(((cj0*x14381))+((r00*x14379))+(((-1.0)*cj1*cj2*x14387))+((r01*x14382))+((x14380*x14392))+((r02*x14393))+(((-1.0)*r00*x14386*x14395)));
evalcond[6]=((((-1.0)*r10*x14386*x14395))+((sj0*x14381))+(((-1.0)*cj1*cj2*x14384))+((r11*x14376*x14385))+((r12*x14393))+((r10*x14379))+((r11*x14382)));
evalcond[7]=((((-1.0)*r01*x14379*x14395))+((r00*x14385))+((r01*x14386))+(((-1.0)*x14383*x14387))+(((-1.0)*r02*x14390))+((r00*x14376*x14382))+(((-1.0)*x14387*x14389)));
evalcond[8]=((((-1.0)*x14384*x14389))+((r10*x14385))+((r11*x14386))+(((-1.0)*x14383*x14384))+((r10*x14376*x14382))+(((-1.0)*r11*x14379*x14395))+(((-1.0)*x14378*x14390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14397=((-1.0)*r01);
IkReal x14399 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14399)==0){
continue;
}
IkReal x14398=pow(x14399,-0.5);
CheckValue<IkReal> x14400 = IKatan2WithCheck(IkReal(x14397),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14400.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14400.value))));
IkReal gconst16=(x14397*x14398);
IkReal gconst17=((1.0)*r00*x14398);
CheckValue<IkReal> x14401 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14401.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14401.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14402=((-1.0)*r01);
CheckValue<IkReal> x14405 = IKatan2WithCheck(IkReal(x14402),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14405.valid){
continue;
}
IkReal x14403=((1.0)*(x14405.value));
IkReal x14404=x14398;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14403)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14403)));
IkReal gconst16=(x14402*x14404);
IkReal gconst17=((1.0)*r00*x14404);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14406=((-1.0)*r01);
CheckValue<IkReal> x14409 = IKatan2WithCheck(IkReal(x14406),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14409.valid){
continue;
}
IkReal x14407=((1.0)*(x14409.value));
IkReal x14408=x14398;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14407)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14407)));
IkReal gconst16=(x14406*x14408);
IkReal gconst17=((1.0)*r00*x14408);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14410=((-1.0)*r01);
CheckValue<IkReal> x14413 = IKatan2WithCheck(IkReal(x14410),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14413.valid){
continue;
}
IkReal x14411=((1.0)*(x14413.value));
IkReal x14412=x14398;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14411)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14411)));
IkReal gconst16=(x14410*x14412);
IkReal gconst17=((1.0)*r00*x14412);
IkReal x14414=r02*r02;
IkReal x14415=(r12*sj0);
IkReal x14416=((1.0)*cj0);
IkReal x14417=x14398;
j4eval[0]=((IKabs((((cj0*x14414*x14417))+(((-1.0)*x14416*x14417))+((r02*x14415*x14417)))))+(IKabs(((((-1.0)*x14415))+(((-1.0)*r02*x14416))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14418=((-1.0)*r01);
CheckValue<IkReal> x14421 = IKatan2WithCheck(IkReal(x14418),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14421.valid){
continue;
}
IkReal x14419=((1.0)*(x14421.value));
IkReal x14420=x14398;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14419)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14419)));
IkReal gconst16=(x14418*x14420);
IkReal gconst17=((1.0)*r00*x14420);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14422=((-1.0)*r01);
CheckValue<IkReal> x14425 = IKatan2WithCheck(IkReal(x14422),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14425.valid){
continue;
}
IkReal x14423=((1.0)*(x14425.value));
IkReal x14424=x14398;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14423)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14423)));
IkReal gconst16=(x14422*x14424);
IkReal gconst17=((1.0)*r00*x14424);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14426=gconst16*gconst16;
IkReal x14427=gconst17*gconst17;
IkReal x14428=(r11*sj3);
IkReal x14429=(cj3*r10);
IkReal x14430=((1.0)*cj3);
IkReal x14431=(r10*sj3);
IkReal x14432=(gconst16*gconst17);
IkReal x14433=(r21*x14426);
IkReal x14434=((1.0)*r20*x14427);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal((((gconst17*r22*x14428))+((gconst16*r22*x14431)))),IkReal((((r21*x14428*x14432))+(((-1.0)*r20*x14431*x14432))+(((-1.0)*x14428*x14434))+((x14431*x14433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
CheckValue<IkReal> x14436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14430*x14433))+((r21*x14429*x14432))+(((-1.0)*x14429*x14434))+(((-1.0)*r12*r22*x14430))+((cj3*r11*r20*x14432)))),-1);
if(!x14436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14435.value)+(((1.5707963267949)*(x14436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14437=IKsin(j4);
IkReal x14438=IKcos(j4);
IkReal x14439=(cj2*sj1);
IkReal x14440=(cj1*sj2);
IkReal x14441=(gconst16*r21);
IkReal x14442=(cj3*gconst17);
IkReal x14443=(gconst16*r20);
IkReal x14444=(sj1*sj2);
IkReal x14445=(gconst17*r20);
IkReal x14446=(gconst17*sj3);
IkReal x14447=(gconst16*r10);
IkReal x14448=(cj1*cj2);
IkReal x14449=(gconst16*sj3);
IkReal x14450=((1.0)*x14438);
IkReal x14451=((1.0)*x14437);
IkReal x14452=(gconst16*x14437);
IkReal x14453=(cj3*x14438);
IkReal x14454=(cj3*x14437);
IkReal x14455=(x14440+x14439);
evalcond[0]=(((x14437*x14441))+(((-1.0)*r22*x14450))+(((-1.0)*x14445*x14451)));
evalcond[1]=(((r01*x14452))+(((-1.0)*gconst17*r00*x14451))+(((-1.0)*r02*x14450)));
evalcond[2]=((-1.0)+((r11*x14452))+(((-1.0)*gconst17*r10*x14451))+(((-1.0)*r12*x14450)));
evalcond[3]=(((gconst16*r11*x14453))+((r12*x14454))+((r11*x14446))+((sj3*x14447))+(((-1.0)*r10*x14442*x14450)));
evalcond[4]=((((-1.0)*r11*x14449*x14450))+((r11*x14442))+(((-1.0)*r12*sj3*x14451))+((r10*x14438*x14446))+((cj3*x14447)));
evalcond[5]=((((-1.0)*r20*x14442*x14450))+((x14441*x14453))+x14455+((sj3*x14443))+((r22*x14454))+((r21*x14446)));
evalcond[6]=(((r01*x14446))+((r00*x14449))+(((-1.0)*r00*x14442*x14450))+((gconst16*r01*x14453))+(((-1.0)*x14444))+x14448+((r02*x14454)));
evalcond[7]=((((-1.0)*r01*x14449*x14450))+((r01*x14442))+((r00*x14438*x14446))+x14455+(((-1.0)*r02*sj3*x14451))+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14438*x14445))+(((-1.0)*r22*sj3*x14451))+(((-1.0)*x14448))+x14444+((r21*x14442))+((cj3*x14443))+(((-1.0)*sj3*x14441*x14450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14456=((1.0)*gconst17);
CheckValue<IkReal> x14457=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14456)))),-1);
if(!x14457.valid){
continue;
}
CheckValue<IkReal> x14458 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14456))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14457.value)))+(x14458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14459=IKsin(j4);
IkReal x14460=IKcos(j4);
IkReal x14461=(cj2*sj1);
IkReal x14462=(cj1*sj2);
IkReal x14463=(gconst16*r21);
IkReal x14464=(cj3*gconst17);
IkReal x14465=(gconst16*r20);
IkReal x14466=(sj1*sj2);
IkReal x14467=(gconst17*r20);
IkReal x14468=(gconst17*sj3);
IkReal x14469=(gconst16*r10);
IkReal x14470=(cj1*cj2);
IkReal x14471=(gconst16*sj3);
IkReal x14472=((1.0)*x14460);
IkReal x14473=((1.0)*x14459);
IkReal x14474=(gconst16*x14459);
IkReal x14475=(cj3*x14460);
IkReal x14476=(cj3*x14459);
IkReal x14477=(x14461+x14462);
evalcond[0]=((((-1.0)*x14467*x14473))+(((-1.0)*r22*x14472))+((x14459*x14463)));
evalcond[1]=((((-1.0)*gconst17*r00*x14473))+((r01*x14474))+(((-1.0)*r02*x14472)));
evalcond[2]=((-1.0)+((r11*x14474))+(((-1.0)*r12*x14472))+(((-1.0)*gconst17*r10*x14473)));
evalcond[3]=(((gconst16*r11*x14475))+((sj3*x14469))+((r11*x14468))+((r12*x14476))+(((-1.0)*r10*x14464*x14472)));
evalcond[4]=(((cj3*x14469))+(((-1.0)*r12*sj3*x14473))+((r11*x14464))+((r10*x14460*x14468))+(((-1.0)*r11*x14471*x14472)));
evalcond[5]=(((r21*x14468))+((sj3*x14465))+((r22*x14476))+x14477+((x14463*x14475))+(((-1.0)*r20*x14464*x14472)));
evalcond[6]=(((gconst16*r01*x14475))+((r00*x14471))+((r01*x14468))+(((-1.0)*r00*x14464*x14472))+(((-1.0)*x14466))+((r02*x14476))+x14470);
evalcond[7]=(((r01*x14464))+(((-1.0)*r02*sj3*x14473))+((r00*x14460*x14468))+(((-1.0)*r01*x14471*x14472))+x14477+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14465))+((sj3*x14460*x14467))+(((-1.0)*sj3*x14463*x14472))+((r21*x14464))+(((-1.0)*r22*sj3*x14473))+(((-1.0)*x14470))+x14466);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14478=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14478.valid){
continue;
}
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14478.value)))+(x14479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14480=IKsin(j4);
IkReal x14481=IKcos(j4);
IkReal x14482=(cj2*sj1);
IkReal x14483=(cj1*sj2);
IkReal x14484=(gconst16*r21);
IkReal x14485=(cj3*gconst17);
IkReal x14486=(gconst16*r20);
IkReal x14487=(sj1*sj2);
IkReal x14488=(gconst17*r20);
IkReal x14489=(gconst17*sj3);
IkReal x14490=(gconst16*r10);
IkReal x14491=(cj1*cj2);
IkReal x14492=(gconst16*sj3);
IkReal x14493=((1.0)*x14481);
IkReal x14494=((1.0)*x14480);
IkReal x14495=(gconst16*x14480);
IkReal x14496=(cj3*x14481);
IkReal x14497=(cj3*x14480);
IkReal x14498=(x14482+x14483);
evalcond[0]=((((-1.0)*x14488*x14494))+(((-1.0)*r22*x14493))+((x14480*x14484)));
evalcond[1]=((((-1.0)*r02*x14493))+((r01*x14495))+(((-1.0)*gconst17*r00*x14494)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14494))+((r11*x14495))+(((-1.0)*r12*x14493)));
evalcond[3]=(((r12*x14497))+((r11*x14489))+((sj3*x14490))+(((-1.0)*r10*x14485*x14493))+((gconst16*r11*x14496)));
evalcond[4]=(((r10*x14481*x14489))+((r11*x14485))+(((-1.0)*r11*x14492*x14493))+((cj3*x14490))+(((-1.0)*r12*sj3*x14494)));
evalcond[5]=((((-1.0)*r20*x14485*x14493))+((r21*x14489))+((x14484*x14496))+((r22*x14497))+x14498+((sj3*x14486)));
evalcond[6]=((((-1.0)*r00*x14485*x14493))+((gconst16*r01*x14496))+(((-1.0)*x14487))+((r02*x14497))+x14491+((r00*x14492))+((r01*x14489)));
evalcond[7]=(((r00*x14481*x14489))+(((-1.0)*r02*sj3*x14494))+x14498+(((-1.0)*r01*x14492*x14493))+((r01*x14485))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14491))+((r21*x14485))+((cj3*x14486))+x14487+(((-1.0)*sj3*x14484*x14493))+((sj3*x14481*x14488))+(((-1.0)*r22*sj3*x14494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14499=((-1.0)*r01);
CheckValue<IkReal> x14502 = IKatan2WithCheck(IkReal(x14499),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14502.valid){
continue;
}
IkReal x14500=((1.0)*(x14502.value));
IkReal x14501=x14398;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14500)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14500)));
IkReal gconst16=(x14499*x14501);
IkReal gconst17=((1.0)*r00*x14501);
IkReal x14503=r02*r02;
IkReal x14504=(r12*sj0);
IkReal x14505=((1.0)*cj0);
IkReal x14506=x14398;
j4eval[0]=((IKabs(((((-1.0)*r02*x14505))+(((-1.0)*x14504)))))+(IKabs(((((-1.0)*x14505*x14506))+((cj0*x14503*x14506))+((r02*x14504*x14506))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14507=((1.0)*r12);
IkReal x14508=(sj1*sj2);
IkReal x14509=(cj1*cj2);
IkReal x14510=((1.0)*sj3);
IkReal x14511=(gconst16*r21);
IkReal x14512=(cj3*gconst16*r20);
IkReal x14513=(gconst17*r20*sj3);
IkReal x14514=(cj3*gconst17*r21);
CheckValue<IkReal> x14515=IKPowWithIntegerCheck(((((-1.0)*r10*r20*x14510*(gconst17*gconst17)))+((gconst17*r10*sj3*x14511))+((gconst16*r11*x14513))+(((-1.0)*gconst16*r11*x14510*x14511))),-1);
if(!x14515.valid){
continue;
}
CheckValue<IkReal> x14516=IKPowWithIntegerCheck(((((-1.0)*x14510*x14511))+x14513),-1);
if(!x14516.valid){
continue;
}
if( IKabs(((x14515.value)*(((((-1.0)*x14507*x14508))+(((-1.0)*x14507*x14514))+(((-1.0)*x14507*x14512))+((cj0*sj3*x14511))+(((-1.0)*cj0*gconst17*r20*x14510))+((r12*x14509)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14516.value)*(((((-1.0)*x14508))+x14509+(((-1.0)*x14514))+(((-1.0)*x14512)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14515.value)*(((((-1.0)*x14507*x14508))+(((-1.0)*x14507*x14514))+(((-1.0)*x14507*x14512))+((cj0*sj3*x14511))+(((-1.0)*cj0*gconst17*r20*x14510))+((r12*x14509))))))+IKsqr(((x14516.value)*(((((-1.0)*x14508))+x14509+(((-1.0)*x14514))+(((-1.0)*x14512))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x14515.value)*(((((-1.0)*x14507*x14508))+(((-1.0)*x14507*x14514))+(((-1.0)*x14507*x14512))+((cj0*sj3*x14511))+(((-1.0)*cj0*gconst17*r20*x14510))+((r12*x14509))))), ((x14516.value)*(((((-1.0)*x14508))+x14509+(((-1.0)*x14514))+(((-1.0)*x14512))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14517=IKsin(j4);
IkReal x14518=IKcos(j4);
IkReal x14519=((1.0)*gconst17);
IkReal x14520=(gconst17*sj3);
IkReal x14521=(gconst16*r21);
IkReal x14522=(cj3*gconst17);
IkReal x14523=(sj1*sj2);
IkReal x14524=((1.0)*sj0);
IkReal x14525=(gconst16*sj3);
IkReal x14526=(cj3*gconst16);
IkReal x14527=(cj2*sj1);
IkReal x14528=((1.0)*cj0);
IkReal x14529=((1.0)*sj3);
IkReal x14530=(cj1*sj2);
IkReal x14531=(cj3*x14518);
IkReal x14532=(gconst16*x14517);
IkReal x14533=((1.0)*x14518);
IkReal x14534=((1.0)*cj1*cj2);
IkReal x14535=(r02*x14517);
IkReal x14536=(r12*x14517);
evalcond[0]=(((x14517*x14521))+(((-1.0)*r20*x14517*x14519)));
evalcond[1]=(cj0+(((-1.0)*r12*x14533))+((r11*x14532))+(((-1.0)*r10*x14517*x14519)));
evalcond[2]=(((r01*x14532))+(((-1.0)*x14524))+(((-1.0)*r00*x14517*x14519))+(((-1.0)*r02*x14533)));
evalcond[3]=(((r20*x14525))+x14527+x14530+(((-1.0)*r20*x14519*x14531))+((r21*x14520))+((x14521*x14531)));
evalcond[4]=((((-1.0)*x14534))+(((-1.0)*x14518*x14521*x14529))+((r20*x14526))+x14523+((r21*x14522))+((r20*x14518*x14520)));
evalcond[5]=(((r01*x14520))+((r00*x14525))+((cj3*x14535))+((cj0*x14523))+(((-1.0)*cj1*cj2*x14528))+(((-1.0)*r00*x14519*x14531))+((r01*x14518*x14526)));
evalcond[6]=(((r11*x14518*x14526))+(((-1.0)*r10*x14519*x14531))+((cj3*x14536))+((r11*x14520))+(((-1.0)*cj1*cj2*x14524))+((sj0*x14523))+((r10*x14525)));
evalcond[7]=(((r01*x14522))+((r00*x14526))+((r00*x14518*x14520))+(((-1.0)*x14529*x14535))+(((-1.0)*x14527*x14528))+(((-1.0)*x14528*x14530))+(((-1.0)*r01*x14525*x14533)));
evalcond[8]=((((-1.0)*r11*x14525*x14533))+(((-1.0)*x14524*x14530))+((r11*x14522))+(((-1.0)*x14529*x14536))+(((-1.0)*x14524*x14527))+((r10*x14518*x14520))+((r10*x14526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14537=((1.0)*sj0);
IkReal x14538=((1.0)*cj0);
CheckValue<IkReal> x14539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14539.valid){
continue;
}
CheckValue<IkReal> x14540 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14537))+(((-1.0)*r02*x14538)))),IkReal(((((-1.0)*gconst16*r11*x14537))+(((-1.0)*gconst16*r01*x14538))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14539.value)))+(x14540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14541=IKsin(j4);
IkReal x14542=IKcos(j4);
IkReal x14543=((1.0)*gconst17);
IkReal x14544=(gconst17*sj3);
IkReal x14545=(gconst16*r21);
IkReal x14546=(cj3*gconst17);
IkReal x14547=(sj1*sj2);
IkReal x14548=((1.0)*sj0);
IkReal x14549=(gconst16*sj3);
IkReal x14550=(cj3*gconst16);
IkReal x14551=(cj2*sj1);
IkReal x14552=((1.0)*cj0);
IkReal x14553=((1.0)*sj3);
IkReal x14554=(cj1*sj2);
IkReal x14555=(cj3*x14542);
IkReal x14556=(gconst16*x14541);
IkReal x14557=((1.0)*x14542);
IkReal x14558=((1.0)*cj1*cj2);
IkReal x14559=(r02*x14541);
IkReal x14560=(r12*x14541);
evalcond[0]=(((x14541*x14545))+(((-1.0)*r20*x14541*x14543)));
evalcond[1]=(cj0+(((-1.0)*r12*x14557))+(((-1.0)*r10*x14541*x14543))+((r11*x14556)));
evalcond[2]=((((-1.0)*r00*x14541*x14543))+(((-1.0)*r02*x14557))+((r01*x14556))+(((-1.0)*x14548)));
evalcond[3]=(((x14545*x14555))+((r21*x14544))+x14551+x14554+(((-1.0)*r20*x14543*x14555))+((r20*x14549)));
evalcond[4]=(((r20*x14550))+((r21*x14546))+(((-1.0)*x14558))+x14547+((r20*x14542*x14544))+(((-1.0)*x14542*x14545*x14553)));
evalcond[5]=(((r01*x14542*x14550))+((r01*x14544))+(((-1.0)*cj1*cj2*x14552))+((r00*x14549))+((cj0*x14547))+(((-1.0)*r00*x14543*x14555))+((cj3*x14559)));
evalcond[6]=(((r10*x14549))+((sj0*x14547))+((r11*x14544))+(((-1.0)*r10*x14543*x14555))+(((-1.0)*cj1*cj2*x14548))+((cj3*x14560))+((r11*x14542*x14550)));
evalcond[7]=(((r00*x14542*x14544))+((r01*x14546))+(((-1.0)*x14553*x14559))+(((-1.0)*x14552*x14554))+(((-1.0)*r01*x14549*x14557))+(((-1.0)*x14551*x14552))+((r00*x14550)));
evalcond[8]=(((r11*x14546))+(((-1.0)*x14553*x14560))+(((-1.0)*r11*x14549*x14557))+(((-1.0)*x14548*x14551))+(((-1.0)*x14548*x14554))+((r10*x14550))+((r10*x14542*x14544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14561=((1.0)*sj0);
IkReal x14562=((1.0)*cj0);
CheckValue<IkReal> x14563=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14563.valid){
continue;
}
CheckValue<IkReal> x14564 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14562))+(((-1.0)*r12*x14561)))),IkReal(((((-1.0)*gconst16*r01*x14562))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14563.value)))+(x14564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14565=IKsin(j4);
IkReal x14566=IKcos(j4);
IkReal x14567=(cj3*gconst17);
IkReal x14568=(gconst16*r21);
IkReal x14569=(gconst17*sj3);
IkReal x14570=(gconst16*r20);
IkReal x14571=(sj1*sj2);
IkReal x14572=(gconst16*r10);
IkReal x14573=(cj2*sj1);
IkReal x14574=(gconst16*sj3);
IkReal x14575=((1.0)*cj0);
IkReal x14576=((1.0)*sj0);
IkReal x14577=(cj1*sj2);
IkReal x14578=((1.0)*x14566);
IkReal x14579=(gconst16*x14565);
IkReal x14580=(cj3*x14566);
IkReal x14581=(cj3*x14565);
IkReal x14582=((1.0)*cj1*cj2);
IkReal x14583=((1.0)*gconst17*x14565);
IkReal x14584=((1.0)*sj3*x14565);
evalcond[0]=((((-1.0)*r22*x14578))+(((-1.0)*r20*x14583))+((x14565*x14568)));
evalcond[1]=(cj0+(((-1.0)*r10*x14583))+(((-1.0)*r12*x14578))+((r11*x14579)));
evalcond[2]=((((-1.0)*r02*x14578))+(((-1.0)*x14576))+(((-1.0)*r00*x14583))+((r01*x14579)));
evalcond[3]=(((r21*x14569))+((x14568*x14580))+(((-1.0)*r20*x14567*x14578))+((r22*x14581))+x14573+x14577+((sj3*x14570)));
evalcond[4]=(((r21*x14567))+(((-1.0)*x14582))+(((-1.0)*sj3*x14568*x14578))+((r20*x14566*x14569))+x14571+((cj3*x14570))+(((-1.0)*r22*x14584)));
evalcond[5]=(((r01*x14569))+((r02*x14581))+((cj0*x14571))+(((-1.0)*cj1*cj2*x14575))+((gconst16*r01*x14580))+(((-1.0)*r00*x14567*x14578))+((r00*x14574)));
evalcond[6]=(((gconst16*r11*x14580))+(((-1.0)*r10*x14567*x14578))+(((-1.0)*cj1*cj2*x14576))+((r11*x14569))+((sj0*x14571))+((r12*x14581))+((sj3*x14572)));
evalcond[7]=((((-1.0)*r01*x14574*x14578))+((r01*x14567))+((r00*x14566*x14569))+(((-1.0)*r02*x14584))+(((-1.0)*x14573*x14575))+(((-1.0)*x14575*x14577))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14573*x14576))+((r10*x14566*x14569))+(((-1.0)*x14576*x14577))+(((-1.0)*r12*x14584))+((r11*x14567))+((cj3*x14572))+(((-1.0)*r11*x14574*x14578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14585=((1.0)*gconst17);
CheckValue<IkReal> x14586 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14585))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14586.valid){
continue;
}
CheckValue<IkReal> x14587=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14585)))),-1);
if(!x14587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14586.value)+(((1.5707963267949)*(x14587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14588=IKsin(j4);
IkReal x14589=IKcos(j4);
IkReal x14590=(cj3*gconst17);
IkReal x14591=(gconst16*r21);
IkReal x14592=(gconst17*sj3);
IkReal x14593=(gconst16*r20);
IkReal x14594=(sj1*sj2);
IkReal x14595=(gconst16*r10);
IkReal x14596=(cj2*sj1);
IkReal x14597=(gconst16*sj3);
IkReal x14598=((1.0)*cj0);
IkReal x14599=((1.0)*sj0);
IkReal x14600=(cj1*sj2);
IkReal x14601=((1.0)*x14589);
IkReal x14602=(gconst16*x14588);
IkReal x14603=(cj3*x14589);
IkReal x14604=(cj3*x14588);
IkReal x14605=((1.0)*cj1*cj2);
IkReal x14606=((1.0)*gconst17*x14588);
IkReal x14607=((1.0)*sj3*x14588);
evalcond[0]=((((-1.0)*r20*x14606))+(((-1.0)*r22*x14601))+((x14588*x14591)));
evalcond[1]=(cj0+(((-1.0)*r10*x14606))+(((-1.0)*r12*x14601))+((r11*x14602)));
evalcond[2]=((((-1.0)*x14599))+((r01*x14602))+(((-1.0)*r00*x14606))+(((-1.0)*r02*x14601)));
evalcond[3]=((((-1.0)*r20*x14590*x14601))+((r21*x14592))+x14596+((r22*x14604))+x14600+((sj3*x14593))+((x14591*x14603)));
evalcond[4]=(((cj3*x14593))+(((-1.0)*r22*x14607))+((r20*x14589*x14592))+(((-1.0)*sj3*x14591*x14601))+((r21*x14590))+x14594+(((-1.0)*x14605)));
evalcond[5]=(((r02*x14604))+((gconst16*r01*x14603))+(((-1.0)*r00*x14590*x14601))+(((-1.0)*cj1*cj2*x14598))+((r01*x14592))+((cj0*x14594))+((r00*x14597)));
evalcond[6]=(((gconst16*r11*x14603))+((sj0*x14594))+(((-1.0)*cj1*cj2*x14599))+((sj3*x14595))+((r11*x14592))+((r12*x14604))+(((-1.0)*r10*x14590*x14601)));
evalcond[7]=((((-1.0)*x14598*x14600))+((r00*x14589*x14592))+(((-1.0)*x14596*x14598))+(((-1.0)*r01*x14597*x14601))+((r01*x14590))+(((-1.0)*r02*x14607))+((cj3*gconst16*r00)));
evalcond[8]=(((r10*x14589*x14592))+(((-1.0)*x14599*x14600))+(((-1.0)*r11*x14597*x14601))+((cj3*x14595))+(((-1.0)*x14596*x14599))+(((-1.0)*r12*x14607))+((r11*x14590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14608=((1.0)*gconst17);
CheckValue<IkReal> x14609=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14608)))),-1);
if(!x14609.valid){
continue;
}
CheckValue<IkReal> x14610 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14608))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14609.value)))+(x14610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14611=IKsin(j4);
IkReal x14612=IKcos(j4);
IkReal x14613=(cj3*gconst17);
IkReal x14614=(gconst16*r21);
IkReal x14615=(gconst17*sj3);
IkReal x14616=(gconst16*r20);
IkReal x14617=(sj1*sj2);
IkReal x14618=(gconst16*r10);
IkReal x14619=(cj2*sj1);
IkReal x14620=(gconst16*sj3);
IkReal x14621=((1.0)*cj0);
IkReal x14622=((1.0)*sj0);
IkReal x14623=(cj1*sj2);
IkReal x14624=((1.0)*x14612);
IkReal x14625=(gconst16*x14611);
IkReal x14626=(cj3*x14612);
IkReal x14627=(cj3*x14611);
IkReal x14628=((1.0)*cj1*cj2);
IkReal x14629=((1.0)*gconst17*x14611);
IkReal x14630=((1.0)*sj3*x14611);
evalcond[0]=((((-1.0)*r20*x14629))+((x14611*x14614))+(((-1.0)*r22*x14624)));
evalcond[1]=((((-1.0)*r10*x14629))+cj0+((r11*x14625))+(((-1.0)*r12*x14624)));
evalcond[2]=((((-1.0)*r02*x14624))+(((-1.0)*x14622))+(((-1.0)*r00*x14629))+((r01*x14625)));
evalcond[3]=(((x14614*x14626))+((r21*x14615))+x14619+x14623+(((-1.0)*r20*x14613*x14624))+((r22*x14627))+((sj3*x14616)));
evalcond[4]=((((-1.0)*r22*x14630))+(((-1.0)*x14628))+((r21*x14613))+((cj3*x14616))+x14617+((r20*x14612*x14615))+(((-1.0)*sj3*x14614*x14624)));
evalcond[5]=(((r02*x14627))+((cj0*x14617))+((gconst16*r01*x14626))+((r01*x14615))+((r00*x14620))+(((-1.0)*cj1*cj2*x14621))+(((-1.0)*r00*x14613*x14624)));
evalcond[6]=(((sj0*x14617))+((gconst16*r11*x14626))+(((-1.0)*r10*x14613*x14624))+((r12*x14627))+((r11*x14615))+((sj3*x14618))+(((-1.0)*cj1*cj2*x14622)));
evalcond[7]=((((-1.0)*r01*x14620*x14624))+((r00*x14612*x14615))+(((-1.0)*x14619*x14621))+(((-1.0)*x14621*x14623))+((r01*x14613))+((cj3*gconst16*r00))+(((-1.0)*r02*x14630)));
evalcond[8]=((((-1.0)*x14619*x14622))+(((-1.0)*x14622*x14623))+((cj3*x14618))+(((-1.0)*r11*x14620*x14624))+((r11*x14613))+((r10*x14612*x14615))+(((-1.0)*r12*x14630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14631=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14631;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14632=((1.0)*cj5);
IkReal x14633=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14632)));
j4eval[0]=x14633;
j4eval[1]=((IKabs(((((-1.0)*r20*x14632))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14634=cj5*cj5;
IkReal x14635=(cj3*r01);
IkReal x14636=(cj5*sj5);
IkReal x14637=((1.0)*cj3);
IkReal x14638=(((r21*x14634*x14635))+(((-1.0)*r00*r20*x14634*x14637))+((cj3*r00*r21*x14636))+((r20*x14635*x14636))+(((-1.0)*r21*x14635))+(((-1.0)*r02*r22*x14637)));
j4eval[0]=x14638;
j4eval[1]=IKsign(x14638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14639=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14639;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14640=((1.0)*cj5);
IkReal x14641=((((-1.0)*r11*x14640))+(((-1.0)*r10*sj5)));
j4eval[0]=x14641;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14640))))));
j4eval[2]=IKsign(x14641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14642=cj5*cj5;
IkReal x14643=r01*r01;
IkReal x14644=(r01*sj5);
IkReal x14645=(cj5*r00);
IkReal x14646=((((2.0)*x14644*x14645))+(((-1.0)*x14643))+((x14642*x14643))+(((-1.0)*(r02*r02)))+(((-1.0)*x14642*(r00*r00))));
j4eval[0]=x14646;
j4eval[1]=IKsign(x14646);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14644))+x14645))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14647=cj5*cj5;
IkReal x14648=r01*r01;
IkReal x14649=(r01*sj5);
IkReal x14650=(cj5*r00);
CheckValue<IkReal> x14651=IKPowWithIntegerCheck(IKsign(((((2.0)*x14649*x14650))+(((-1.0)*x14648))+(((-1.0)*(r02*r02)))+(((-1.0)*x14647*(r00*r00)))+((x14647*x14648)))),-1);
if(!x14651.valid){
continue;
}
CheckValue<IkReal> x14652 = IKatan2WithCheck(IkReal(((((-1.0)*x14649))+x14650)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14651.value)))+(x14652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14653=IKsin(j4);
IkReal x14654=IKcos(j4);
IkReal x14655=(cj5*r10);
IkReal x14656=(r01*sj5);
IkReal x14657=((1.0)*cj2);
IkReal x14658=(cj5*r00);
IkReal x14659=(cj5*r20);
IkReal x14660=((1.0)*x14654);
IkReal x14661=((1.0)*x14653);
IkReal x14662=(sj5*x14653);
evalcond[0]=((((-1.0)*r22*x14660))+(((-1.0)*x14659*x14661))+((r21*x14662)));
evalcond[1]=((((-1.0)*x14655*x14661))+(((-1.0)*r12*x14660))+((r11*x14662)));
evalcond[2]=(((x14654*x14658))+(((-1.0)*x14656*x14660))+(((-1.0)*r02*x14661)));
evalcond[3]=((-1.0)+(((-1.0)*x14658*x14661))+(((-1.0)*r02*x14660))+((x14653*x14656)));
evalcond[4]=(((x14654*x14659))+(((-1.0)*r22*x14661))+(((-1.0)*cj1*x14657))+((sj1*sj2))+(((-1.0)*r21*sj5*x14660)));
evalcond[5]=(((x14654*x14655))+(((-1.0)*r11*sj5*x14660))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14661))+(((-1.0)*sj1*x14657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14663=((1.0)*cj5);
CheckValue<IkReal> x14664 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14664.valid){
continue;
}
CheckValue<IkReal> x14665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14663)))),-1);
if(!x14665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14664.value)+(((1.5707963267949)*(x14665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14666=IKsin(j4);
IkReal x14667=IKcos(j4);
IkReal x14668=(cj5*r10);
IkReal x14669=(r01*sj5);
IkReal x14670=((1.0)*cj2);
IkReal x14671=(cj5*r00);
IkReal x14672=(cj5*r20);
IkReal x14673=((1.0)*x14667);
IkReal x14674=((1.0)*x14666);
IkReal x14675=(sj5*x14666);
evalcond[0]=((((-1.0)*x14672*x14674))+((r21*x14675))+(((-1.0)*r22*x14673)));
evalcond[1]=((((-1.0)*x14668*x14674))+(((-1.0)*r12*x14673))+((r11*x14675)));
evalcond[2]=((((-1.0)*x14669*x14673))+((x14667*x14671))+(((-1.0)*r02*x14674)));
evalcond[3]=((-1.0)+(((-1.0)*x14671*x14674))+((x14666*x14669))+(((-1.0)*r02*x14673)));
evalcond[4]=((((-1.0)*cj1*x14670))+(((-1.0)*r22*x14674))+((sj1*sj2))+((x14667*x14672))+(((-1.0)*r21*sj5*x14673)));
evalcond[5]=((((-1.0)*sj1*x14670))+(((-1.0)*r11*sj5*x14673))+(((-1.0)*cj1*sj2))+((x14667*x14668))+(((-1.0)*r12*x14674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14676=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14676.valid){
continue;
}
CheckValue<IkReal> x14677 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14676.value)))+(x14677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14678=IKsin(j4);
IkReal x14679=IKcos(j4);
IkReal x14680=(cj5*r10);
IkReal x14681=(r01*sj5);
IkReal x14682=((1.0)*cj2);
IkReal x14683=(cj5*r00);
IkReal x14684=(cj5*r20);
IkReal x14685=((1.0)*x14679);
IkReal x14686=((1.0)*x14678);
IkReal x14687=(sj5*x14678);
evalcond[0]=((((-1.0)*x14684*x14686))+(((-1.0)*r22*x14685))+((r21*x14687)));
evalcond[1]=(((r11*x14687))+(((-1.0)*x14680*x14686))+(((-1.0)*r12*x14685)));
evalcond[2]=(((x14679*x14683))+(((-1.0)*r02*x14686))+(((-1.0)*x14681*x14685)));
evalcond[3]=((-1.0)+(((-1.0)*x14683*x14686))+((x14678*x14681))+(((-1.0)*r02*x14685)));
evalcond[4]=((((-1.0)*cj1*x14682))+(((-1.0)*r21*sj5*x14685))+((x14679*x14684))+((sj1*sj2))+(((-1.0)*r22*x14686)));
evalcond[5]=(((x14679*x14680))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14682))+(((-1.0)*r11*sj5*x14685))+(((-1.0)*r12*x14686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14688=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14688;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14689=((1.0)*cj5);
IkReal x14690=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14689)));
j4eval[0]=x14690;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14689)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14691=cj5*cj5;
IkReal x14692=r01*r01;
IkReal x14693=(cj5*r00);
IkReal x14694=(r01*sj5);
IkReal x14695=((((-2.0)*x14693*x14694))+(((-1.0)*x14691*x14692))+((x14691*(r00*r00)))+x14692+(r02*r02));
j4eval[0]=x14695;
j4eval[1]=IKsign(x14695);
j4eval[2]=((IKabs(r02))+(IKabs((x14694+(((-1.0)*x14693))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14696=cj5*cj5;
IkReal x14697=r01*r01;
IkReal x14698=(r01*sj5);
IkReal x14699=(cj5*r00);
CheckValue<IkReal> x14700=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14696*x14697))+((x14696*(r00*r00)))+x14697+(((-2.0)*x14698*x14699))+(r02*r02))),-1);
if(!x14700.valid){
continue;
}
CheckValue<IkReal> x14701 = IKatan2WithCheck(IkReal((x14698+(((-1.0)*x14699)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14700.value)))+(x14701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14702=IKcos(j4);
IkReal x14703=IKsin(j4);
IkReal x14704=(cj5*r00);
IkReal x14705=(cj5*r10);
IkReal x14706=(r21*sj5);
IkReal x14707=((1.0)*cj2);
IkReal x14708=(cj5*r20);
IkReal x14709=((1.0)*x14702);
IkReal x14710=((1.0)*x14703);
IkReal x14711=(sj5*x14703);
IkReal x14712=(sj5*x14702);
evalcond[0]=((((-1.0)*x14704*x14709))+((r01*x14712))+((r02*x14703)));
evalcond[1]=((((-1.0)*x14708*x14710))+(((-1.0)*r22*x14709))+((x14703*x14706)));
evalcond[2]=(((r11*x14711))+(((-1.0)*r12*x14709))+(((-1.0)*x14705*x14710)));
evalcond[3]=((-1.0)+((r01*x14711))+(((-1.0)*x14704*x14710))+(((-1.0)*r02*x14709)));
evalcond[4]=((((-1.0)*x14708*x14709))+((sj1*sj2))+(((-1.0)*cj1*x14707))+((r22*x14703))+((x14702*x14706)));
evalcond[5]=(((r11*x14712))+(((-1.0)*x14705*x14709))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14707))+((r12*x14703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14713=((1.0)*cj5);
CheckValue<IkReal> x14714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14713)))),-1);
if(!x14714.valid){
continue;
}
CheckValue<IkReal> x14715 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14714.value)))+(x14715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14716=IKcos(j4);
IkReal x14717=IKsin(j4);
IkReal x14718=(cj5*r00);
IkReal x14719=(cj5*r10);
IkReal x14720=(r21*sj5);
IkReal x14721=((1.0)*cj2);
IkReal x14722=(cj5*r20);
IkReal x14723=((1.0)*x14716);
IkReal x14724=((1.0)*x14717);
IkReal x14725=(sj5*x14717);
IkReal x14726=(sj5*x14716);
evalcond[0]=((((-1.0)*x14718*x14723))+((r01*x14726))+((r02*x14717)));
evalcond[1]=((((-1.0)*x14722*x14724))+((x14717*x14720))+(((-1.0)*r22*x14723)));
evalcond[2]=((((-1.0)*r12*x14723))+(((-1.0)*x14719*x14724))+((r11*x14725)));
evalcond[3]=((-1.0)+(((-1.0)*x14718*x14724))+((r01*x14725))+(((-1.0)*r02*x14723)));
evalcond[4]=((((-1.0)*x14722*x14723))+((r22*x14717))+((sj1*sj2))+(((-1.0)*cj1*x14721))+((x14716*x14720)));
evalcond[5]=(((r12*x14717))+(((-1.0)*x14719*x14723))+(((-1.0)*sj1*x14721))+(((-1.0)*cj1*sj2))+((r11*x14726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14727=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14727.valid){
continue;
}
CheckValue<IkReal> x14728 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14727.value)))+(x14728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14729=IKcos(j4);
IkReal x14730=IKsin(j4);
IkReal x14731=(cj5*r00);
IkReal x14732=(cj5*r10);
IkReal x14733=(r21*sj5);
IkReal x14734=((1.0)*cj2);
IkReal x14735=(cj5*r20);
IkReal x14736=((1.0)*x14729);
IkReal x14737=((1.0)*x14730);
IkReal x14738=(sj5*x14730);
IkReal x14739=(sj5*x14729);
evalcond[0]=(((r01*x14739))+((r02*x14730))+(((-1.0)*x14731*x14736)));
evalcond[1]=(((x14730*x14733))+(((-1.0)*r22*x14736))+(((-1.0)*x14735*x14737)));
evalcond[2]=((((-1.0)*r12*x14736))+(((-1.0)*x14732*x14737))+((r11*x14738)));
evalcond[3]=((-1.0)+((r01*x14738))+(((-1.0)*r02*x14736))+(((-1.0)*x14731*x14737)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x14734))+((r22*x14730))+(((-1.0)*x14735*x14736))+((x14729*x14733)));
evalcond[5]=((((-1.0)*sj1*x14734))+(((-1.0)*x14732*x14736))+(((-1.0)*cj1*sj2))+((r11*x14739))+((r12*x14730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14741 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14741)==0){
continue;
}
IkReal x14740=pow(x14741,-0.5);
CheckValue<IkReal> x14742 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14742.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14742.value));
IkReal gconst49=((-1.0)*r21*x14740);
IkReal gconst50=(r20*x14740);
CheckValue<IkReal> x14743 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14743.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14743.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14746 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14746.valid){
continue;
}
IkReal x14744=((-1.0)*(x14746.value));
IkReal x14745=x14740;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14744;
IkReal gconst48=x14744;
IkReal gconst49=((-1.0)*r21*x14745);
IkReal gconst50=(r20*x14745);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14749 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14749.valid){
continue;
}
IkReal x14747=((-1.0)*(x14749.value));
IkReal x14748=x14740;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14747;
IkReal gconst48=x14747;
IkReal gconst49=((-1.0)*r21*x14748);
IkReal gconst50=(r20*x14748);
CheckValue<IkReal> x14757=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14757.valid){
continue;
}
IkReal x14750=x14757.value;
IkReal x14751=(sj3*x14750);
IkReal x14752=(r11*x14751);
IkReal x14753=(r00*x14751);
IkReal x14754=(r01*x14751);
IkReal x14755=(r10*x14751);
IkReal x14756=(r20*r21*x14751);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14753*(r20*r20)))+((r01*x14752*(r21*r21)))+((r00*r20*r21*x14752))+((r10*r20*r21*x14754))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14758=gconst49*gconst49;
IkReal x14759=gconst50*gconst50;
IkReal x14760=((1.0)*cj3);
IkReal x14761=(gconst50*r01);
IkReal x14762=(gconst49*r10);
IkReal x14763=(r12*sj3);
IkReal x14764=(gconst49*r00);
IkReal x14765=(r00*sj3);
IkReal x14766=(r11*x14758);
IkReal x14767=(r10*x14759);
CheckValue<IkReal> x14768 = IKatan2WithCheck(IkReal((((x14761*x14763))+((x14763*x14764)))),IkReal(((((-1.0)*gconst50*x14762*x14765))+((gconst49*r11*sj3*x14761))+((x14765*x14766))+(((-1.0)*r01*sj3*x14767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14768.valid){
continue;
}
CheckValue<IkReal> x14769=IKPowWithIntegerCheck(IKsign((((cj3*x14761*x14762))+(((-1.0)*r02*r12*x14760))+(((-1.0)*r00*x14760*x14767))+(((-1.0)*r01*x14760*x14766))+((cj3*gconst50*r11*x14764)))),-1);
if(!x14769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14768.value)+(((1.5707963267949)*(x14769.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14770=IKsin(j4);
IkReal x14771=IKcos(j4);
IkReal x14772=(sj1*sj2);
IkReal x14773=(gconst50*r20);
IkReal x14774=(gconst50*sj3);
IkReal x14775=(cj3*r01);
IkReal x14776=(gconst50*r10);
IkReal x14777=(gconst49*sj3);
IkReal x14778=((1.0)*cj2);
IkReal x14779=(cj1*sj2);
IkReal x14780=(cj3*r11);
IkReal x14781=(gconst50*r00);
IkReal x14782=(cj3*r21);
IkReal x14783=(cj3*gconst49);
IkReal x14784=(cj1*x14778);
IkReal x14785=((1.0)*x14771);
IkReal x14786=((1.0)*x14770);
IkReal x14787=(gconst49*x14770);
IkReal x14788=(gconst49*x14771);
IkReal x14789=(cj3*x14770);
evalcond[0]=((((-1.0)*x14773*x14786))+((r21*x14787))+(((-1.0)*r22*x14785)));
evalcond[1]=((((-1.0)*x14776*x14786))+(((-1.0)*r12*x14785))+((r11*x14787)));
evalcond[2]=((-1.0)+((r01*x14787))+(((-1.0)*x14781*x14786))+(((-1.0)*r02*x14785)));
evalcond[3]=((((-1.0)*cj3*x14781*x14785))+((r00*x14777))+((r01*x14774))+((r02*x14789))+((x14775*x14788)));
evalcond[4]=(((r00*x14783))+(((-1.0)*r02*sj3*x14786))+(((-1.0)*r01*x14777*x14785))+((r00*x14771*x14774))+((gconst50*x14775)));
evalcond[5]=(((cj2*sj1))+((x14782*x14788))+(((-1.0)*cj3*x14773*x14785))+((r21*x14774))+x14779+((r20*x14777))+((r22*x14789)));
evalcond[6]=(((x14780*x14788))+((r11*x14774))+(((-1.0)*cj3*x14776*x14785))+((r10*x14777))+((r12*x14789))+x14772+(((-1.0)*x14784)));
evalcond[7]=(((gconst50*x14782))+(((-1.0)*r21*x14777*x14785))+(((-1.0)*r22*sj3*x14786))+((r20*x14783))+((sj3*x14771*x14773))+x14772+(((-1.0)*x14784)));
evalcond[8]=(((r10*x14783))+((gconst50*x14780))+(((-1.0)*r12*sj3*x14786))+(((-1.0)*x14779))+((r10*x14771*x14774))+(((-1.0)*sj1*x14778))+(((-1.0)*r11*x14777*x14785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14790=gconst49*gconst49;
IkReal x14791=gconst50*gconst50;
IkReal x14792=(cj3*r12);
IkReal x14793=(gconst49*r00);
IkReal x14794=(r01*r11);
IkReal x14795=(r00*r11);
IkReal x14796=(cj3*gconst50);
IkReal x14797=((1.0)*r01*r10);
IkReal x14798=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14799 = IKatan2WithCheck(IkReal((((x14792*x14793))+((gconst50*r01*x14792)))),IkReal((((gconst49*x14794*x14796))+(((-1.0)*cj3*x14791*x14797))+(((-1.0)*r10*x14793*x14796))+((cj3*x14790*x14795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14799.valid){
continue;
}
CheckValue<IkReal> x14800=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14797*x14798))+(((-1.0)*gconst50*r11*sj3*x14793))+((sj3*x14790*x14794))+((r00*r10*sj3*x14791)))),-1);
if(!x14800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14799.value)+(((1.5707963267949)*(x14800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14801=IKsin(j4);
IkReal x14802=IKcos(j4);
IkReal x14803=(sj1*sj2);
IkReal x14804=(gconst50*r20);
IkReal x14805=(gconst50*sj3);
IkReal x14806=(cj3*r01);
IkReal x14807=(gconst50*r10);
IkReal x14808=(gconst49*sj3);
IkReal x14809=((1.0)*cj2);
IkReal x14810=(cj1*sj2);
IkReal x14811=(cj3*r11);
IkReal x14812=(gconst50*r00);
IkReal x14813=(cj3*r21);
IkReal x14814=(cj3*gconst49);
IkReal x14815=(cj1*x14809);
IkReal x14816=((1.0)*x14802);
IkReal x14817=((1.0)*x14801);
IkReal x14818=(gconst49*x14801);
IkReal x14819=(gconst49*x14802);
IkReal x14820=(cj3*x14801);
evalcond[0]=((((-1.0)*r22*x14816))+((r21*x14818))+(((-1.0)*x14804*x14817)));
evalcond[1]=((((-1.0)*x14807*x14817))+(((-1.0)*r12*x14816))+((r11*x14818)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14816))+((r01*x14818))+(((-1.0)*x14812*x14817)));
evalcond[3]=(((r02*x14820))+(((-1.0)*cj3*x14812*x14816))+((x14806*x14819))+((r01*x14805))+((r00*x14808)));
evalcond[4]=((((-1.0)*r02*sj3*x14817))+(((-1.0)*r01*x14808*x14816))+((r00*x14814))+((r00*x14802*x14805))+((gconst50*x14806)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14804*x14816))+((r21*x14805))+x14810+((x14813*x14819))+((r22*x14820))+((r20*x14808)));
evalcond[6]=(x14803+((r10*x14808))+(((-1.0)*x14815))+((x14811*x14819))+((r12*x14820))+(((-1.0)*cj3*x14807*x14816))+((r11*x14805)));
evalcond[7]=(x14803+(((-1.0)*x14815))+((sj3*x14802*x14804))+(((-1.0)*r21*x14808*x14816))+(((-1.0)*r22*sj3*x14817))+((r20*x14814))+((gconst50*x14813)));
evalcond[8]=(((r10*x14814))+(((-1.0)*r11*x14808*x14816))+(((-1.0)*r12*sj3*x14817))+(((-1.0)*x14810))+((r10*x14802*x14805))+(((-1.0)*sj1*x14809))+((gconst50*x14811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14821=((1.0)*gconst50);
CheckValue<IkReal> x14822=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14821)))),-1);
if(!x14822.valid){
continue;
}
CheckValue<IkReal> x14823 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14822.value)))+(x14823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14824=IKsin(j4);
IkReal x14825=IKcos(j4);
IkReal x14826=(sj1*sj2);
IkReal x14827=(gconst50*r20);
IkReal x14828=(gconst50*sj3);
IkReal x14829=(cj3*r01);
IkReal x14830=(gconst50*r10);
IkReal x14831=(gconst49*sj3);
IkReal x14832=((1.0)*cj2);
IkReal x14833=(cj1*sj2);
IkReal x14834=(cj3*r11);
IkReal x14835=(gconst50*r00);
IkReal x14836=(cj3*r21);
IkReal x14837=(cj3*gconst49);
IkReal x14838=(cj1*x14832);
IkReal x14839=((1.0)*x14825);
IkReal x14840=((1.0)*x14824);
IkReal x14841=(gconst49*x14824);
IkReal x14842=(gconst49*x14825);
IkReal x14843=(cj3*x14824);
evalcond[0]=((((-1.0)*x14827*x14840))+(((-1.0)*r22*x14839))+((r21*x14841)));
evalcond[1]=((((-1.0)*r12*x14839))+(((-1.0)*x14830*x14840))+((r11*x14841)));
evalcond[2]=((-1.0)+(((-1.0)*x14835*x14840))+(((-1.0)*r02*x14839))+((r01*x14841)));
evalcond[3]=(((r02*x14843))+((r01*x14828))+((x14829*x14842))+(((-1.0)*cj3*x14835*x14839))+((r00*x14831)));
evalcond[4]=((((-1.0)*r02*sj3*x14840))+(((-1.0)*r01*x14831*x14839))+((r00*x14825*x14828))+((gconst50*x14829))+((r00*x14837)));
evalcond[5]=(((cj2*sj1))+((x14836*x14842))+((r21*x14828))+x14833+((r20*x14831))+(((-1.0)*cj3*x14827*x14839))+((r22*x14843)));
evalcond[6]=(x14826+((x14834*x14842))+((r12*x14843))+((r10*x14831))+(((-1.0)*cj3*x14830*x14839))+(((-1.0)*x14838))+((r11*x14828)));
evalcond[7]=(((gconst50*x14836))+((sj3*x14825*x14827))+x14826+((r20*x14837))+(((-1.0)*r21*x14831*x14839))+(((-1.0)*x14838))+(((-1.0)*r22*sj3*x14840)));
evalcond[8]=((((-1.0)*x14833))+((gconst50*x14834))+((r10*x14825*x14828))+(((-1.0)*sj1*x14832))+(((-1.0)*r11*x14831*x14839))+((r10*x14837))+(((-1.0)*r12*sj3*x14840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14845 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14845)==0){
continue;
}
IkReal x14844=pow(x14845,-0.5);
CheckValue<IkReal> x14846 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14846.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14846.value))));
IkReal gconst52=((1.0)*r21*x14844);
IkReal gconst53=((-1.0)*r20*x14844);
CheckValue<IkReal> x14847 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14847.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14850 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14850.valid){
continue;
}
IkReal x14848=((1.0)*(x14850.value));
IkReal x14849=x14844;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14848)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14848)));
IkReal gconst52=((1.0)*r21*x14849);
IkReal gconst53=((-1.0)*r20*x14849);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14853 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14853.valid){
continue;
}
IkReal x14851=((1.0)*(x14853.value));
IkReal x14852=x14844;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14851)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14851)));
IkReal gconst52=((1.0)*r21*x14852);
IkReal gconst53=((-1.0)*r20*x14852);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14856 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14856.valid){
continue;
}
IkReal x14854=((1.0)*(x14856.value));
IkReal x14855=x14844;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14854)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14854)));
IkReal gconst52=((1.0)*r21*x14855);
IkReal gconst53=((-1.0)*r20*x14855);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14857=gconst52*gconst52;
IkReal x14858=gconst53*gconst53;
IkReal x14859=(gconst53*r01);
IkReal x14860=(cj3*r20);
IkReal x14861=(r22*sj3);
IkReal x14862=((1.0)*cj3);
IkReal x14863=(gconst52*sj3);
IkReal x14864=((1.0)*r00);
IkReal x14865=(gconst52*r00);
IkReal x14866=(r21*x14857);
CheckValue<IkReal> x14867 = IKatan2WithCheck(IkReal((((x14859*x14861))+((x14861*x14865)))),IkReal((((r21*x14859*x14863))+(((-1.0)*gconst53*r20*x14863*x14864))+((r00*sj3*x14866))+(((-1.0)*r01*r20*sj3*x14858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14867.valid){
continue;
}
CheckValue<IkReal> x14868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14862))+((cj3*gconst53*r21*x14865))+(((-1.0)*x14858*x14860*x14864))+(((-1.0)*r01*x14862*x14866))+((gconst52*x14859*x14860)))),-1);
if(!x14868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14867.value)+(((1.5707963267949)*(x14868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14869=IKsin(j4);
IkReal x14870=IKcos(j4);
IkReal x14871=(sj1*sj2);
IkReal x14872=((1.0)*cj1);
IkReal x14873=(cj3*gconst52);
IkReal x14874=(gconst53*sj3);
IkReal x14875=(cj3*gconst53);
IkReal x14876=(cj2*sj1);
IkReal x14877=(gconst52*sj3);
IkReal x14878=(cj2*x14872);
IkReal x14879=((1.0)*x14870);
IkReal x14880=((1.0)*x14869);
IkReal x14881=(gconst52*x14869);
IkReal x14882=(cj3*x14869);
evalcond[0]=((((-1.0)*r22*x14879))+((r21*x14881))+(((-1.0)*gconst53*r20*x14880)));
evalcond[1]=(((r11*x14881))+(((-1.0)*gconst53*r10*x14880))+(((-1.0)*r12*x14879)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14879))+((r01*x14881))+(((-1.0)*gconst53*r00*x14880)));
evalcond[3]=(((r00*x14877))+((r01*x14874))+(((-1.0)*r00*x14875*x14879))+((r01*x14870*x14873))+((r02*x14882)));
evalcond[4]=((((-1.0)*r01*x14877*x14879))+((r00*x14873))+((r01*x14875))+(((-1.0)*r02*sj3*x14880))+((r00*x14870*x14874)));
evalcond[5]=(((r22*x14882))+x14876+((cj1*sj2))+((r21*x14870*x14873))+((r21*x14874))+(((-1.0)*r20*x14875*x14879))+((r20*x14877)));
evalcond[6]=(((r11*x14874))+((r10*x14877))+((r12*x14882))+x14871+(((-1.0)*x14878))+((r11*x14870*x14873))+(((-1.0)*r10*x14875*x14879)));
evalcond[7]=((((-1.0)*r22*sj3*x14880))+x14871+((r20*x14870*x14874))+((r21*x14875))+(((-1.0)*x14878))+((r20*x14873))+(((-1.0)*r21*x14877*x14879)));
evalcond[8]=(((r11*x14875))+((r10*x14873))+((r10*x14870*x14874))+(((-1.0)*r12*sj3*x14880))+(((-1.0)*sj2*x14872))+(((-1.0)*r11*x14877*x14879))+(((-1.0)*x14876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14883=((1.0)*gconst53);
CheckValue<IkReal> x14884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14883))+(((-1.0)*gconst52*r10)))),-1);
if(!x14884.valid){
continue;
}
CheckValue<IkReal> x14885 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14884.value)))+(x14885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14886=IKsin(j4);
IkReal x14887=IKcos(j4);
IkReal x14888=(sj1*sj2);
IkReal x14889=((1.0)*cj1);
IkReal x14890=(cj3*gconst52);
IkReal x14891=(gconst53*sj3);
IkReal x14892=(cj3*gconst53);
IkReal x14893=(cj2*sj1);
IkReal x14894=(gconst52*sj3);
IkReal x14895=(cj2*x14889);
IkReal x14896=((1.0)*x14887);
IkReal x14897=((1.0)*x14886);
IkReal x14898=(gconst52*x14886);
IkReal x14899=(cj3*x14886);
evalcond[0]=((((-1.0)*r22*x14896))+((r21*x14898))+(((-1.0)*gconst53*r20*x14897)));
evalcond[1]=(((r11*x14898))+(((-1.0)*gconst53*r10*x14897))+(((-1.0)*r12*x14896)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14897))+((r01*x14898))+(((-1.0)*r02*x14896)));
evalcond[3]=(((r02*x14899))+((r01*x14887*x14890))+((r01*x14891))+((r00*x14894))+(((-1.0)*r00*x14892*x14896)));
evalcond[4]=(((r01*x14892))+((r00*x14890))+((r00*x14887*x14891))+(((-1.0)*r02*sj3*x14897))+(((-1.0)*r01*x14894*x14896)));
evalcond[5]=(x14893+((cj1*sj2))+((r21*x14891))+((r22*x14899))+((r21*x14887*x14890))+(((-1.0)*r20*x14892*x14896))+((r20*x14894)));
evalcond[6]=(((r10*x14894))+((r12*x14899))+((r11*x14887*x14890))+((r11*x14891))+x14888+(((-1.0)*r10*x14892*x14896))+(((-1.0)*x14895)));
evalcond[7]=(x14888+((r21*x14892))+(((-1.0)*r21*x14894*x14896))+(((-1.0)*x14895))+((r20*x14890))+((r20*x14887*x14891))+(((-1.0)*r22*sj3*x14897)));
evalcond[8]=(((r10*x14890))+(((-1.0)*r11*x14894*x14896))+(((-1.0)*r12*sj3*x14897))+((r11*x14892))+((r10*x14887*x14891))+(((-1.0)*x14893))+(((-1.0)*sj2*x14889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14900 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14900.valid){
continue;
}
CheckValue<IkReal> x14901=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14900.value)+(((1.5707963267949)*(x14901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14902=IKsin(j4);
IkReal x14903=IKcos(j4);
IkReal x14904=(sj1*sj2);
IkReal x14905=((1.0)*cj1);
IkReal x14906=(cj3*gconst52);
IkReal x14907=(gconst53*sj3);
IkReal x14908=(cj3*gconst53);
IkReal x14909=(cj2*sj1);
IkReal x14910=(gconst52*sj3);
IkReal x14911=(cj2*x14905);
IkReal x14912=((1.0)*x14903);
IkReal x14913=((1.0)*x14902);
IkReal x14914=(gconst52*x14902);
IkReal x14915=(cj3*x14902);
evalcond[0]=(((r21*x14914))+(((-1.0)*r22*x14912))+(((-1.0)*gconst53*r20*x14913)));
evalcond[1]=((((-1.0)*r12*x14912))+((r11*x14914))+(((-1.0)*gconst53*r10*x14913)));
evalcond[2]=((-1.0)+((r01*x14914))+(((-1.0)*r02*x14912))+(((-1.0)*gconst53*r00*x14913)));
evalcond[3]=(((r00*x14910))+((r01*x14903*x14906))+((r01*x14907))+((r02*x14915))+(((-1.0)*r00*x14908*x14912)));
evalcond[4]=(((r00*x14906))+((r00*x14903*x14907))+((r01*x14908))+(((-1.0)*r02*sj3*x14913))+(((-1.0)*r01*x14910*x14912)));
evalcond[5]=((((-1.0)*r20*x14908*x14912))+((r22*x14915))+((r21*x14907))+x14909+((cj1*sj2))+((r21*x14903*x14906))+((r20*x14910)));
evalcond[6]=(((r10*x14910))+(((-1.0)*x14911))+((r11*x14907))+(((-1.0)*r10*x14908*x14912))+x14904+((r12*x14915))+((r11*x14903*x14906)));
evalcond[7]=(((r21*x14908))+(((-1.0)*x14911))+x14904+(((-1.0)*r22*sj3*x14913))+((r20*x14903*x14907))+((r20*x14906))+(((-1.0)*r21*x14910*x14912)));
evalcond[8]=((((-1.0)*r12*sj3*x14913))+((r11*x14908))+(((-1.0)*x14909))+((r10*x14903*x14907))+(((-1.0)*r11*x14910*x14912))+((r10*x14906))+(((-1.0)*sj2*x14905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14916=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14916);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14916);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14917=(r01*sj5);
IkReal x14918=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14918))+x14917);
j4eval[1]=(((cj3*x14917))+(((-1.0)*cj3*x14918)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14919=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14919);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14919);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14920=(cj5*r00);
IkReal x14921=(r01*sj5);
j4eval[0]=((((-1.0)*x14920))+x14921);
j4eval[1]=(((sj3*x14920))+(((-1.0)*sj3*x14921)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14922=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14922);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14922);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14923=((1.0)*r00);
CheckValue<IkReal> x14924=IKPowWithIntegerCheck(cj3,-1);
if(!x14924.valid){
continue;
}
CheckValue<IkReal> x14925=IKPowWithIntegerCheck(r22,-1);
if(!x14925.valid){
continue;
}
CheckValue<IkReal> x14926=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14923))),-1);
if(!x14926.valid){
continue;
}
if( IKabs(((x14924.value)*(x14925.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14926.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14923)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14924.value)*(x14925.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14926.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14923))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x14924.value)*(x14925.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14926.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14923))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14927=IKsin(j4);
IkReal x14928=IKcos(j4);
IkReal x14929=(sj1*sj2);
IkReal x14930=(cj5*sj3);
IkReal x14931=(r11*sj5);
IkReal x14932=(cj3*cj5);
IkReal x14933=((1.0)*cj1);
IkReal x14934=(cj3*sj5);
IkReal x14935=(sj3*sj5);
IkReal x14936=(cj2*sj1);
IkReal x14937=(r01*sj5);
IkReal x14938=((1.0)*sj3);
IkReal x14939=(cj2*x14933);
IkReal x14940=(r10*x14928);
IkReal x14941=(r22*x14927);
IkReal x14942=(cj3*x14928);
IkReal x14943=((1.0)*cj5*x14927);
evalcond[0]=((-1.0)*r22*x14928);
evalcond[1]=(x14936+((cj1*sj2))+((cj3*x14941)));
evalcond[2]=(((x14927*x14931))+(((-1.0)*r10*x14943)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14943))+((x14927*x14937)));
evalcond[4]=(x14929+(((-1.0)*x14939))+(((-1.0)*x14938*x14941)));
evalcond[5]=(((r01*x14928*x14934))+((r01*x14930))+((r00*x14935))+(((-1.0)*r00*x14928*x14932)));
evalcond[6]=(((r01*x14932))+((r00*x14928*x14930))+((r00*x14934))+(((-1.0)*r01*x14928*x14935)));
evalcond[7]=(x14929+((r10*x14935))+(((-1.0)*x14939))+(((-1.0)*x14932*x14940))+((r11*x14930))+((x14931*x14942)));
evalcond[8]=((((-1.0)*x14936))+((r10*x14934))+(((-1.0)*x14928*x14931*x14938))+(((-1.0)*sj2*x14933))+((r11*x14932))+((x14930*x14940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14944=((1.0)*cj3);
IkReal x14945=(cj5*r00);
IkReal x14946=(r01*sj5);
CheckValue<IkReal> x14947=IKPowWithIntegerCheck((x14946+(((-1.0)*x14945))),-1);
if(!x14947.valid){
continue;
}
CheckValue<IkReal> x14948=IKPowWithIntegerCheck((((sj3*x14945))+(((-1.0)*sj3*x14946))),-1);
if(!x14948.valid){
continue;
}
if( IKabs(x14947.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14948.value)*(((((-1.0)*cj5*r01*x14944))+(((-1.0)*r00*sj5*x14944)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14947.value)+IKsqr(((x14948.value)*(((((-1.0)*cj5*r01*x14944))+(((-1.0)*r00*sj5*x14944))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(x14947.value, ((x14948.value)*(((((-1.0)*cj5*r01*x14944))+(((-1.0)*r00*sj5*x14944))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14949=IKsin(j4);
IkReal x14950=IKcos(j4);
IkReal x14951=(sj1*sj2);
IkReal x14952=(cj5*sj3);
IkReal x14953=(r11*sj5);
IkReal x14954=(cj3*cj5);
IkReal x14955=((1.0)*cj1);
IkReal x14956=(cj3*sj5);
IkReal x14957=(sj3*sj5);
IkReal x14958=(cj2*sj1);
IkReal x14959=(r01*sj5);
IkReal x14960=((1.0)*sj3);
IkReal x14961=(cj2*x14955);
IkReal x14962=(r10*x14950);
IkReal x14963=(r22*x14949);
IkReal x14964=(cj3*x14950);
IkReal x14965=((1.0)*cj5*x14949);
evalcond[0]=((-1.0)*r22*x14950);
evalcond[1]=(((cj3*x14963))+x14958+((cj1*sj2)));
evalcond[2]=(((x14949*x14953))+(((-1.0)*r10*x14965)));
evalcond[3]=((-1.0)+((x14949*x14959))+(((-1.0)*r00*x14965)));
evalcond[4]=(x14951+(((-1.0)*x14961))+(((-1.0)*x14960*x14963)));
evalcond[5]=((((-1.0)*r00*x14950*x14954))+((r01*x14950*x14956))+((r01*x14952))+((r00*x14957)));
evalcond[6]=(((r01*x14954))+((r00*x14956))+((r00*x14950*x14952))+(((-1.0)*r01*x14950*x14957)));
evalcond[7]=(x14951+((r10*x14957))+(((-1.0)*x14961))+((x14953*x14964))+(((-1.0)*x14954*x14962))+((r11*x14952)));
evalcond[8]=((((-1.0)*x14950*x14953*x14960))+(((-1.0)*sj2*x14955))+((r10*x14956))+((x14952*x14962))+(((-1.0)*x14958))+((r11*x14954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14966=((1.0)*sj3);
IkReal x14967=(r01*sj5);
IkReal x14968=((1.0)*cj5*r00);
CheckValue<IkReal> x14969=IKPowWithIntegerCheck((x14967+(((-1.0)*x14968))),-1);
if(!x14969.valid){
continue;
}
CheckValue<IkReal> x14970=IKPowWithIntegerCheck((((cj3*x14967))+(((-1.0)*cj3*x14968))),-1);
if(!x14970.valid){
continue;
}
if( IKabs(x14969.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14970.value)*(((((-1.0)*cj5*r01*x14966))+(((-1.0)*r00*sj5*x14966)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14969.value)+IKsqr(((x14970.value)*(((((-1.0)*cj5*r01*x14966))+(((-1.0)*r00*sj5*x14966))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(x14969.value, ((x14970.value)*(((((-1.0)*cj5*r01*x14966))+(((-1.0)*r00*sj5*x14966))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14971=IKsin(j4);
IkReal x14972=IKcos(j4);
IkReal x14973=(sj1*sj2);
IkReal x14974=(cj5*sj3);
IkReal x14975=(r11*sj5);
IkReal x14976=(cj3*cj5);
IkReal x14977=((1.0)*cj1);
IkReal x14978=(cj3*sj5);
IkReal x14979=(sj3*sj5);
IkReal x14980=(cj2*sj1);
IkReal x14981=(r01*sj5);
IkReal x14982=((1.0)*sj3);
IkReal x14983=(cj2*x14977);
IkReal x14984=(r10*x14972);
IkReal x14985=(r22*x14971);
IkReal x14986=(cj3*x14972);
IkReal x14987=((1.0)*cj5*x14971);
evalcond[0]=((-1.0)*r22*x14972);
evalcond[1]=(x14980+((cj1*sj2))+((cj3*x14985)));
evalcond[2]=(((x14971*x14975))+(((-1.0)*r10*x14987)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14987))+((x14971*x14981)));
evalcond[4]=(x14973+(((-1.0)*x14983))+(((-1.0)*x14982*x14985)));
evalcond[5]=(((r01*x14972*x14978))+(((-1.0)*r00*x14972*x14976))+((r01*x14974))+((r00*x14979)));
evalcond[6]=(((r00*x14972*x14974))+(((-1.0)*r01*x14972*x14979))+((r01*x14976))+((r00*x14978)));
evalcond[7]=((((-1.0)*x14976*x14984))+x14973+((r11*x14974))+(((-1.0)*x14983))+((x14975*x14986))+((r10*x14979)));
evalcond[8]=((((-1.0)*sj2*x14977))+(((-1.0)*x14972*x14975*x14982))+((r11*x14976))+((x14974*x14984))+(((-1.0)*x14980))+((r10*x14978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14988=cj5*cj5;
IkReal x14989=(cj3*r20);
IkReal x14990=(r21*sj3);
IkReal x14991=((1.0)*cj3);
IkReal x14992=(r01*r21);
IkReal x14993=(r01*sj3);
IkReal x14994=(r00*sj5);
IkReal x14995=(cj5*r01*sj5);
IkReal x14996=((1.0)*x14988);
CheckValue<IkReal> x14997=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14991*x14992))+(((-1.0)*r02*r22*x14991))+((cj3*x14988*x14992))+(((-1.0)*r00*x14989*x14996))+((x14989*x14995))+((cj3*cj5*r21*x14994)))),-1);
if(!x14997.valid){
continue;
}
CheckValue<IkReal> x14998 = IKatan2WithCheck(IkReal((((cj5*r22*x14993))+((r22*sj3*x14994)))),IkReal(((((-1.0)*r20*x14993*x14996))+(((-1.0)*r00*x14990*x14996))+((x14990*x14995))+((r00*x14990))+(((-1.0)*cj5*r20*sj3*x14994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14997.value)))+(x14998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14999=IKsin(j4);
IkReal x15000=IKcos(j4);
IkReal x15001=(sj1*sj2);
IkReal x15002=(r11*sj5);
IkReal x15003=(cj5*r10);
IkReal x15004=(cj5*r01);
IkReal x15005=(cj5*r00);
IkReal x15006=((1.0)*cj1);
IkReal x15007=(cj3*sj5);
IkReal x15008=(r21*sj5);
IkReal x15009=(cj5*sj3);
IkReal x15010=(sj3*sj5);
IkReal x15011=(cj2*sj1);
IkReal x15012=(r01*sj5);
IkReal x15013=(cj3*cj5);
IkReal x15014=(cj5*r20);
IkReal x15015=(cj2*x15006);
IkReal x15016=((1.0)*x15000);
IkReal x15017=((1.0)*x14999);
IkReal x15018=(cj3*x15000);
IkReal x15019=(sj3*x15000);
IkReal x15020=(cj3*x14999);
evalcond[0]=(((x14999*x15008))+(((-1.0)*x15014*x15017))+(((-1.0)*r22*x15016)));
evalcond[1]=((((-1.0)*r12*x15016))+((x14999*x15002))+(((-1.0)*x15003*x15017)));
evalcond[2]=((-1.0)+(((-1.0)*x15005*x15017))+((x14999*x15012))+(((-1.0)*r02*x15016)));
evalcond[3]=(((r01*x15000*x15007))+((sj3*x15004))+((r02*x15020))+((r00*x15010))+(((-1.0)*cj3*x15005*x15016)));
evalcond[4]=(((r00*x15007))+(((-1.0)*r01*x15010*x15016))+((x15005*x15019))+((cj3*x15004))+(((-1.0)*r02*sj3*x15017)));
evalcond[5]=((((-1.0)*r20*x15013*x15016))+((cj1*sj2))+x15011+((r22*x15020))+((r20*x15010))+((r21*x15000*x15007))+((r21*x15009)));
evalcond[6]=((((-1.0)*x15015))+((r10*x15010))+x15001+((r11*x15009))+(((-1.0)*cj3*x15003*x15016))+((r12*x15020))+((x15002*x15018)));
evalcond[7]=((((-1.0)*x15015))+((r20*x15007))+x15001+(((-1.0)*sj3*x15008*x15016))+((r20*x15000*x15009))+((r21*x15013))+(((-1.0)*r22*sj3*x15017)));
evalcond[8]=((((-1.0)*x15011))+(((-1.0)*sj2*x15006))+(((-1.0)*r12*sj3*x15017))+(((-1.0)*sj3*x15002*x15016))+((r10*x15007))+((r11*x15013))+((x15003*x15019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15021=((1.0)*cj5);
CheckValue<IkReal> x15022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15021)))),-1);
if(!x15022.valid){
continue;
}
CheckValue<IkReal> x15023 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15022.value)))+(x15023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15024=IKsin(j4);
IkReal x15025=IKcos(j4);
IkReal x15026=(sj1*sj2);
IkReal x15027=(r11*sj5);
IkReal x15028=(cj5*r10);
IkReal x15029=(cj5*r01);
IkReal x15030=(cj5*r00);
IkReal x15031=((1.0)*cj1);
IkReal x15032=(cj3*sj5);
IkReal x15033=(r21*sj5);
IkReal x15034=(cj5*sj3);
IkReal x15035=(sj3*sj5);
IkReal x15036=(cj2*sj1);
IkReal x15037=(r01*sj5);
IkReal x15038=(cj3*cj5);
IkReal x15039=(cj5*r20);
IkReal x15040=(cj2*x15031);
IkReal x15041=((1.0)*x15025);
IkReal x15042=((1.0)*x15024);
IkReal x15043=(cj3*x15025);
IkReal x15044=(sj3*x15025);
IkReal x15045=(cj3*x15024);
evalcond[0]=(((x15024*x15033))+(((-1.0)*r22*x15041))+(((-1.0)*x15039*x15042)));
evalcond[1]=((((-1.0)*x15028*x15042))+(((-1.0)*r12*x15041))+((x15024*x15027)));
evalcond[2]=((-1.0)+(((-1.0)*x15030*x15042))+((x15024*x15037))+(((-1.0)*r02*x15041)));
evalcond[3]=(((r02*x15045))+((r01*x15025*x15032))+((r00*x15035))+(((-1.0)*cj3*x15030*x15041))+((sj3*x15029)));
evalcond[4]=(((r00*x15032))+(((-1.0)*r01*x15035*x15041))+((cj3*x15029))+((x15030*x15044))+(((-1.0)*r02*sj3*x15042)));
evalcond[5]=(((r21*x15034))+((r22*x15045))+((cj1*sj2))+((r21*x15025*x15032))+x15036+((r20*x15035))+(((-1.0)*r20*x15038*x15041)));
evalcond[6]=((((-1.0)*x15040))+((x15027*x15043))+((r12*x15045))+x15026+((r10*x15035))+((r11*x15034))+(((-1.0)*cj3*x15028*x15041)));
evalcond[7]=((((-1.0)*x15040))+((r21*x15038))+(((-1.0)*sj3*x15033*x15041))+(((-1.0)*r22*sj3*x15042))+x15026+((r20*x15032))+((r20*x15025*x15034)));
evalcond[8]=((((-1.0)*sj2*x15031))+(((-1.0)*sj3*x15027*x15041))+(((-1.0)*r12*sj3*x15042))+(((-1.0)*x15036))+((x15028*x15044))+((r10*x15032))+((r11*x15038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15046=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15046.valid){
continue;
}
CheckValue<IkReal> x15047 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15046.value)))+(x15047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15048=IKsin(j4);
IkReal x15049=IKcos(j4);
IkReal x15050=(sj1*sj2);
IkReal x15051=(r11*sj5);
IkReal x15052=(cj5*r10);
IkReal x15053=(cj5*r01);
IkReal x15054=(cj5*r00);
IkReal x15055=((1.0)*cj1);
IkReal x15056=(cj3*sj5);
IkReal x15057=(r21*sj5);
IkReal x15058=(cj5*sj3);
IkReal x15059=(sj3*sj5);
IkReal x15060=(cj2*sj1);
IkReal x15061=(r01*sj5);
IkReal x15062=(cj3*cj5);
IkReal x15063=(cj5*r20);
IkReal x15064=(cj2*x15055);
IkReal x15065=((1.0)*x15049);
IkReal x15066=((1.0)*x15048);
IkReal x15067=(cj3*x15049);
IkReal x15068=(sj3*x15049);
IkReal x15069=(cj3*x15048);
evalcond[0]=((((-1.0)*x15063*x15066))+(((-1.0)*r22*x15065))+((x15048*x15057)));
evalcond[1]=((((-1.0)*x15052*x15066))+(((-1.0)*r12*x15065))+((x15048*x15051)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15065))+((x15048*x15061))+(((-1.0)*x15054*x15066)));
evalcond[3]=(((r01*x15049*x15056))+((r02*x15069))+((sj3*x15053))+(((-1.0)*cj3*x15054*x15065))+((r00*x15059)));
evalcond[4]=((((-1.0)*r02*sj3*x15066))+((x15054*x15068))+(((-1.0)*r01*x15059*x15065))+((cj3*x15053))+((r00*x15056)));
evalcond[5]=(((r20*x15059))+((cj1*sj2))+((r21*x15049*x15056))+x15060+((r21*x15058))+(((-1.0)*r20*x15062*x15065))+((r22*x15069)));
evalcond[6]=(((x15051*x15067))+((r10*x15059))+x15050+((r12*x15069))+(((-1.0)*cj3*x15052*x15065))+((r11*x15058))+(((-1.0)*x15064)));
evalcond[7]=(((r20*x15056))+((r21*x15062))+x15050+((r20*x15049*x15058))+(((-1.0)*x15064))+(((-1.0)*sj3*x15057*x15065))+(((-1.0)*r22*sj3*x15066)));
evalcond[8]=(((r10*x15056))+(((-1.0)*r12*sj3*x15066))+((x15052*x15068))+(((-1.0)*x15060))+((r11*x15062))+(((-1.0)*sj2*x15055))+(((-1.0)*sj3*x15051*x15065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15070=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15070;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15071=((1.0)*cj5);
IkReal x15072=((((-1.0)*r21*x15071))+(((-1.0)*r20*sj5)));
j4eval[0]=x15072;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15071))))));
j4eval[2]=IKsign(x15072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15073=cj5*cj5;
IkReal x15074=(cj3*r01);
IkReal x15075=(cj5*sj5);
IkReal x15076=((1.0)*cj3);
IkReal x15077=(((r21*x15073*x15074))+(((-1.0)*r02*r22*x15076))+((cj3*r00*r21*x15075))+(((-1.0)*r00*r20*x15073*x15076))+((r20*x15074*x15075))+(((-1.0)*r21*x15074)));
j4eval[0]=x15077;
j4eval[1]=IKsign(x15077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15078=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15078;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15079=((1.0)*cj5);
IkReal x15080=((((-1.0)*r21*x15079))+(((-1.0)*r20*sj5)));
j4eval[0]=x15080;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x15079)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15081=cj5*cj5;
IkReal x15082=r01*r01;
IkReal x15083=(cj5*r00);
IkReal x15084=(r01*sj5);
IkReal x15085=((((-1.0)*x15081*x15082))+((x15081*(r00*r00)))+x15082+(r02*r02)+(((-2.0)*x15083*x15084)));
j4eval[0]=x15085;
j4eval[1]=((IKabs(r02))+(IKabs((x15083+(((-1.0)*x15084))))));
j4eval[2]=IKsign(x15085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15086=cj5*cj5;
IkReal x15087=r01*r01;
IkReal x15088=(r01*sj5);
IkReal x15089=(cj5*r00);
CheckValue<IkReal> x15090=IKPowWithIntegerCheck(IKsign((((x15086*(r00*r00)))+(((-2.0)*x15088*x15089))+x15087+(((-1.0)*x15086*x15087))+(r02*r02))),-1);
if(!x15090.valid){
continue;
}
CheckValue<IkReal> x15091 = IKatan2WithCheck(IkReal((x15089+(((-1.0)*x15088)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15090.value)))+(x15091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15092=IKsin(j4);
IkReal x15093=IKcos(j4);
IkReal x15094=(cj5*r10);
IkReal x15095=(r01*sj5);
IkReal x15096=(cj5*r00);
IkReal x15097=(cj5*r20);
IkReal x15098=((1.0)*x15093);
IkReal x15099=((1.0)*x15092);
IkReal x15100=(sj5*x15092);
evalcond[0]=(((r21*x15100))+(((-1.0)*r22*x15098))+(((-1.0)*x15097*x15099)));
evalcond[1]=((((-1.0)*x15094*x15099))+(((-1.0)*r12*x15098))+((r11*x15100)));
evalcond[2]=((((-1.0)*r02*x15099))+(((-1.0)*x15095*x15098))+((x15093*x15096)));
evalcond[3]=((1.0)+(((-1.0)*x15096*x15099))+((x15092*x15095))+(((-1.0)*r02*x15098)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15098))+(((-1.0)*r12*x15099))+((x15093*x15094)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15099))+(((-1.0)*r21*sj5*x15098))+((x15093*x15097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15101=((1.0)*cj5);
CheckValue<IkReal> x15102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15101))+(((-1.0)*r20*sj5)))),-1);
if(!x15102.valid){
continue;
}
CheckValue<IkReal> x15103 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15101))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15102.value)))+(x15103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15104=IKsin(j4);
IkReal x15105=IKcos(j4);
IkReal x15106=(cj5*r10);
IkReal x15107=(r01*sj5);
IkReal x15108=(cj5*r00);
IkReal x15109=(cj5*r20);
IkReal x15110=((1.0)*x15105);
IkReal x15111=((1.0)*x15104);
IkReal x15112=(sj5*x15104);
evalcond[0]=((((-1.0)*x15109*x15111))+(((-1.0)*r22*x15110))+((r21*x15112)));
evalcond[1]=(((r11*x15112))+(((-1.0)*r12*x15110))+(((-1.0)*x15106*x15111)));
evalcond[2]=((((-1.0)*r02*x15111))+((x15105*x15108))+(((-1.0)*x15107*x15110)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15110))+(((-1.0)*x15108*x15111))+((x15104*x15107)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15110))+((cj1*sj2))+(((-1.0)*r12*x15111))+((x15105*x15106)));
evalcond[5]=((((-1.0)*r21*sj5*x15110))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15105*x15109))+(((-1.0)*r22*x15111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15113 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15113.valid){
continue;
}
CheckValue<IkReal> x15114=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15113.value)+(((1.5707963267949)*(x15114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15115=IKsin(j4);
IkReal x15116=IKcos(j4);
IkReal x15117=(cj5*r10);
IkReal x15118=(r01*sj5);
IkReal x15119=(cj5*r00);
IkReal x15120=(cj5*r20);
IkReal x15121=((1.0)*x15116);
IkReal x15122=((1.0)*x15115);
IkReal x15123=(sj5*x15115);
evalcond[0]=(((r21*x15123))+(((-1.0)*r22*x15121))+(((-1.0)*x15120*x15122)));
evalcond[1]=((((-1.0)*r12*x15121))+(((-1.0)*x15117*x15122))+((r11*x15123)));
evalcond[2]=((((-1.0)*r02*x15122))+((x15116*x15119))+(((-1.0)*x15118*x15121)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15121))+(((-1.0)*x15119*x15122))+((x15115*x15118)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15122))+((x15116*x15117))+(((-1.0)*r11*sj5*x15121)));
evalcond[5]=((((-1.0)*r21*sj5*x15121))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15122))+((x15116*x15120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15124=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15124;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15125=((1.0)*cj5);
IkReal x15126=((((-1.0)*r21*x15125))+(((-1.0)*r20*sj5)));
j4eval[0]=x15126;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15125))+((r11*sj5))))));
j4eval[2]=IKsign(x15126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15127=cj5*cj5;
IkReal x15128=r01*r01;
IkReal x15129=(r01*sj5);
IkReal x15130=(cj5*r00);
IkReal x15131=((((2.0)*x15129*x15130))+((x15127*x15128))+(((-1.0)*(r02*r02)))+(((-1.0)*x15128))+(((-1.0)*x15127*(r00*r00))));
j4eval[0]=x15131;
j4eval[1]=IKsign(x15131);
j4eval[2]=((IKabs(r02))+(IKabs((x15129+(((-1.0)*x15130))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15132=cj5*cj5;
IkReal x15133=r01*r01;
IkReal x15134=(r01*sj5);
IkReal x15135=(cj5*r00);
CheckValue<IkReal> x15136=IKPowWithIntegerCheck(IKsign((((x15132*x15133))+(((-1.0)*x15132*(r00*r00)))+(((2.0)*x15134*x15135))+(((-1.0)*(r02*r02)))+(((-1.0)*x15133)))),-1);
if(!x15136.valid){
continue;
}
CheckValue<IkReal> x15137 = IKatan2WithCheck(IkReal((x15134+(((-1.0)*x15135)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15136.value)))+(x15137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15138=IKcos(j4);
IkReal x15139=IKsin(j4);
IkReal x15140=(cj5*r00);
IkReal x15141=(cj5*r10);
IkReal x15142=(r21*sj5);
IkReal x15143=(cj5*r20);
IkReal x15144=((1.0)*x15138);
IkReal x15145=((1.0)*x15139);
IkReal x15146=(sj5*x15139);
IkReal x15147=(sj5*x15138);
evalcond[0]=((((-1.0)*x15140*x15144))+((r01*x15147))+((r02*x15139)));
evalcond[1]=(((x15139*x15142))+(((-1.0)*x15143*x15145))+(((-1.0)*r22*x15144)));
evalcond[2]=(((r11*x15146))+(((-1.0)*x15141*x15145))+(((-1.0)*r12*x15144)));
evalcond[3]=((1.0)+(((-1.0)*x15140*x15145))+(((-1.0)*r02*x15144))+((r01*x15146)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15147))+(((-1.0)*x15141*x15144))+((r12*x15139)));
evalcond[5]=(((r22*x15139))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15143*x15144))+((x15138*x15142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15148=((1.0)*cj5);
CheckValue<IkReal> x15149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15148))+(((-1.0)*r20*sj5)))),-1);
if(!x15149.valid){
continue;
}
CheckValue<IkReal> x15150 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15148))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15149.value)))+(x15150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15151=IKcos(j4);
IkReal x15152=IKsin(j4);
IkReal x15153=(cj5*r00);
IkReal x15154=(cj5*r10);
IkReal x15155=(r21*sj5);
IkReal x15156=(cj5*r20);
IkReal x15157=((1.0)*x15151);
IkReal x15158=((1.0)*x15152);
IkReal x15159=(sj5*x15152);
IkReal x15160=(sj5*x15151);
evalcond[0]=((((-1.0)*x15153*x15157))+((r02*x15152))+((r01*x15160)));
evalcond[1]=(((x15152*x15155))+(((-1.0)*x15156*x15158))+(((-1.0)*r22*x15157)));
evalcond[2]=((((-1.0)*r12*x15157))+(((-1.0)*x15154*x15158))+((r11*x15159)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15157))+((r01*x15159))+(((-1.0)*x15153*x15158)));
evalcond[4]=(((cj2*sj1))+((r11*x15160))+((cj1*sj2))+((r12*x15152))+(((-1.0)*x15154*x15157)));
evalcond[5]=(((x15151*x15155))+(((-1.0)*x15156*x15157))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15161 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15161.valid){
continue;
}
CheckValue<IkReal> x15162=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15161.value)+(((1.5707963267949)*(x15162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15163=IKcos(j4);
IkReal x15164=IKsin(j4);
IkReal x15165=(cj5*r00);
IkReal x15166=(cj5*r10);
IkReal x15167=(r21*sj5);
IkReal x15168=(cj5*r20);
IkReal x15169=((1.0)*x15163);
IkReal x15170=((1.0)*x15164);
IkReal x15171=(sj5*x15164);
IkReal x15172=(sj5*x15163);
evalcond[0]=(((r02*x15164))+(((-1.0)*x15165*x15169))+((r01*x15172)));
evalcond[1]=(((x15164*x15167))+(((-1.0)*r22*x15169))+(((-1.0)*x15168*x15170)));
evalcond[2]=(((r11*x15171))+(((-1.0)*x15166*x15170))+(((-1.0)*r12*x15169)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15169))+(((-1.0)*x15165*x15170))+((r01*x15171)));
evalcond[4]=(((cj2*sj1))+((r11*x15172))+((cj1*sj2))+((r12*x15164))+(((-1.0)*x15166*x15169)));
evalcond[5]=(((x15163*x15167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15168*x15169))+((r22*x15164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15174 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15174)==0){
continue;
}
IkReal x15173=pow(x15174,-0.5);
CheckValue<IkReal> x15175 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15175.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15175.value));
IkReal gconst61=((-1.0)*r11*x15173);
IkReal gconst62=(r10*x15173);
CheckValue<IkReal> x15176 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15176.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15176.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15179 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15179.valid){
continue;
}
IkReal x15177=((-1.0)*(x15179.value));
IkReal x15178=x15173;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15177;
IkReal gconst60=x15177;
IkReal gconst61=((-1.0)*r11*x15178);
IkReal gconst62=(r10*x15178);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15182 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15182.valid){
continue;
}
IkReal x15180=((-1.0)*(x15182.value));
IkReal x15181=x15173;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15180;
IkReal gconst60=x15180;
IkReal gconst61=((-1.0)*r11*x15181);
IkReal gconst62=(r10*x15181);
CheckValue<IkReal> x15190=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15190.valid){
continue;
}
IkReal x15183=x15190.value;
IkReal x15184=(sj3*x15183);
IkReal x15185=(r20*x15184);
IkReal x15186=(r00*x15184);
IkReal x15187=(r01*x15184);
IkReal x15188=(r21*x15184);
IkReal x15189=(r10*r11*x15184);
j4eval[0]=IKsign((((r01*r10*r11*x15185))+((r10*r11*r21*x15186))+((r00*x15185*(r10*r10)))+((r21*x15187*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15191=gconst61*gconst61;
IkReal x15192=gconst62*gconst62;
IkReal x15193=(cj3*r01);
IkReal x15194=(r22*sj3);
IkReal x15195=(gconst61*r00);
IkReal x15196=((1.0)*cj3);
IkReal x15197=(gconst62*r01);
IkReal x15198=((1.0)*sj3);
IkReal x15199=(gconst61*gconst62*r20);
IkReal x15200=(r21*x15191);
IkReal x15201=(r20*x15192);
CheckValue<IkReal> x15202 = IKatan2WithCheck(IkReal((((x15194*x15195))+((x15194*x15197)))),IkReal(((((-1.0)*r01*x15198*x15201))+(((-1.0)*gconst62*r20*x15195*x15198))+((gconst61*r21*sj3*x15197))+((r00*sj3*x15200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15202.valid){
continue;
}
CheckValue<IkReal> x15203=IKPowWithIntegerCheck(IKsign((((x15193*x15199))+(((-1.0)*r02*r22*x15196))+((cj3*gconst62*r21*x15195))+(((-1.0)*x15193*x15200))+(((-1.0)*r00*x15196*x15201)))),-1);
if(!x15203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15202.value)+(((1.5707963267949)*(x15203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15204=IKsin(j4);
IkReal x15205=IKcos(j4);
IkReal x15206=(cj2*sj1);
IkReal x15207=(cj1*sj2);
IkReal x15208=(gconst61*sj3);
IkReal x15209=(cj3*gconst61);
IkReal x15210=(cj3*gconst62);
IkReal x15211=(sj1*sj2);
IkReal x15212=(gconst62*sj3);
IkReal x15213=(cj1*cj2);
IkReal x15214=((1.0)*x15205);
IkReal x15215=((1.0)*x15204);
IkReal x15216=(gconst61*x15204);
IkReal x15217=(cj3*x15204);
IkReal x15218=(x15207+x15206);
evalcond[0]=((((-1.0)*r22*x15214))+((r21*x15216))+(((-1.0)*gconst62*r20*x15215)));
evalcond[1]=(((r11*x15216))+(((-1.0)*r12*x15214))+(((-1.0)*gconst62*r10*x15215)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15214))+((r01*x15216))+(((-1.0)*gconst62*r00*x15215)));
evalcond[3]=(((r00*x15208))+((r01*x15212))+((r01*x15205*x15209))+((r02*x15217))+(((-1.0)*r00*x15210*x15214)));
evalcond[4]=((((-1.0)*r01*x15208*x15214))+(((-1.0)*r02*sj3*x15215))+((r00*x15205*x15212))+((r00*x15209))+((r01*x15210)));
evalcond[5]=(((r20*x15208))+(((-1.0)*r20*x15210*x15214))+x15218+((r22*x15217))+((r21*x15212))+((r21*x15205*x15209)));
evalcond[6]=(((r10*x15208))+((r11*x15212))+(((-1.0)*x15211))+x15213+((r12*x15217))+((r11*x15205*x15209))+(((-1.0)*r10*x15210*x15214)));
evalcond[7]=(((r10*x15209))+((r11*x15210))+x15218+(((-1.0)*r11*x15208*x15214))+((r10*x15205*x15212))+(((-1.0)*r12*sj3*x15215)));
evalcond[8]=(((r20*x15205*x15212))+((r20*x15209))+(((-1.0)*x15213))+x15211+((r21*x15210))+(((-1.0)*r22*sj3*x15215))+(((-1.0)*r21*x15208*x15214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15219=gconst61*gconst61;
IkReal x15220=gconst62*gconst62;
IkReal x15221=(cj3*r22);
IkReal x15222=(gconst62*r01);
IkReal x15223=(gconst61*r00);
IkReal x15224=((1.0)*r20);
IkReal x15225=(cj3*r21);
IkReal x15226=(r21*sj3);
CheckValue<IkReal> x15227 = IKatan2WithCheck(IkReal((((x15221*x15223))+((x15221*x15222)))),IkReal(((((-1.0)*cj3*r01*x15220*x15224))+((gconst61*x15222*x15225))+((r00*x15219*x15225))+(((-1.0)*cj3*gconst62*x15223*x15224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15227.valid){
continue;
}
CheckValue<IkReal> x15228=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15223*x15226))+(((-1.0)*gconst61*sj3*x15222*x15224))+((r00*r20*sj3*x15220))+((r01*x15219*x15226))+((r02*r22*sj3)))),-1);
if(!x15228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15227.value)+(((1.5707963267949)*(x15228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15229=IKsin(j4);
IkReal x15230=IKcos(j4);
IkReal x15231=(cj2*sj1);
IkReal x15232=(cj1*sj2);
IkReal x15233=(gconst61*sj3);
IkReal x15234=(cj3*gconst61);
IkReal x15235=(cj3*gconst62);
IkReal x15236=(sj1*sj2);
IkReal x15237=(gconst62*sj3);
IkReal x15238=(cj1*cj2);
IkReal x15239=((1.0)*x15230);
IkReal x15240=((1.0)*x15229);
IkReal x15241=(gconst61*x15229);
IkReal x15242=(cj3*x15229);
IkReal x15243=(x15232+x15231);
evalcond[0]=((((-1.0)*gconst62*r20*x15240))+((r21*x15241))+(((-1.0)*r22*x15239)));
evalcond[1]=((((-1.0)*gconst62*r10*x15240))+(((-1.0)*r12*x15239))+((r11*x15241)));
evalcond[2]=((1.0)+((r01*x15241))+(((-1.0)*r02*x15239))+(((-1.0)*gconst62*r00*x15240)));
evalcond[3]=(((r00*x15233))+((r01*x15237))+((r01*x15230*x15234))+(((-1.0)*r00*x15235*x15239))+((r02*x15242)));
evalcond[4]=(((r00*x15234))+((r01*x15235))+(((-1.0)*r01*x15233*x15239))+((r00*x15230*x15237))+(((-1.0)*r02*sj3*x15240)));
evalcond[5]=((((-1.0)*r20*x15235*x15239))+x15243+((r21*x15237))+((r21*x15230*x15234))+((r22*x15242))+((r20*x15233)));
evalcond[6]=((((-1.0)*r10*x15235*x15239))+(((-1.0)*x15236))+x15238+((r11*x15230*x15234))+((r10*x15233))+((r12*x15242))+((r11*x15237)));
evalcond[7]=((((-1.0)*r12*sj3*x15240))+x15243+((r10*x15230*x15237))+((r10*x15234))+(((-1.0)*r11*x15233*x15239))+((r11*x15235)));
evalcond[8]=((((-1.0)*x15238))+x15236+((r21*x15235))+(((-1.0)*r21*x15233*x15239))+((r20*x15230*x15237))+(((-1.0)*r22*sj3*x15240))+((r20*x15234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15244=((1.0)*gconst62);
CheckValue<IkReal> x15245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15244)))),-1);
if(!x15245.valid){
continue;
}
CheckValue<IkReal> x15246 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15244))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15245.value)))+(x15246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15247=IKsin(j4);
IkReal x15248=IKcos(j4);
IkReal x15249=(cj2*sj1);
IkReal x15250=(cj1*sj2);
IkReal x15251=(gconst61*sj3);
IkReal x15252=(cj3*gconst61);
IkReal x15253=(cj3*gconst62);
IkReal x15254=(sj1*sj2);
IkReal x15255=(gconst62*sj3);
IkReal x15256=(cj1*cj2);
IkReal x15257=((1.0)*x15248);
IkReal x15258=((1.0)*x15247);
IkReal x15259=(gconst61*x15247);
IkReal x15260=(cj3*x15247);
IkReal x15261=(x15249+x15250);
evalcond[0]=((((-1.0)*gconst62*r20*x15258))+(((-1.0)*r22*x15257))+((r21*x15259)));
evalcond[1]=((((-1.0)*gconst62*r10*x15258))+(((-1.0)*r12*x15257))+((r11*x15259)));
evalcond[2]=((1.0)+((r01*x15259))+(((-1.0)*r02*x15257))+(((-1.0)*gconst62*r00*x15258)));
evalcond[3]=(((r00*x15251))+((r01*x15255))+(((-1.0)*r00*x15253*x15257))+((r01*x15248*x15252))+((r02*x15260)));
evalcond[4]=(((r00*x15248*x15255))+((r00*x15252))+((r01*x15253))+(((-1.0)*r01*x15251*x15257))+(((-1.0)*r02*sj3*x15258)));
evalcond[5]=((((-1.0)*r20*x15253*x15257))+((r21*x15248*x15252))+x15261+((r22*x15260))+((r21*x15255))+((r20*x15251)));
evalcond[6]=((((-1.0)*r10*x15253*x15257))+((r12*x15260))+(((-1.0)*x15254))+((r11*x15248*x15252))+x15256+((r11*x15255))+((r10*x15251)));
evalcond[7]=((((-1.0)*r12*sj3*x15258))+((r10*x15248*x15255))+x15261+((r11*x15253))+(((-1.0)*r11*x15251*x15257))+((r10*x15252)));
evalcond[8]=((((-1.0)*x15256))+x15254+((r21*x15253))+((r20*x15252))+((r20*x15248*x15255))+(((-1.0)*r22*sj3*x15258))+(((-1.0)*r21*x15251*x15257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15263 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15263)==0){
continue;
}
IkReal x15262=pow(x15263,-0.5);
CheckValue<IkReal> x15264 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15264.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15264.value))));
IkReal gconst64=((1.0)*r11*x15262);
IkReal gconst65=((-1.0)*r10*x15262);
CheckValue<IkReal> x15265 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15265.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15268 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15268.valid){
continue;
}
IkReal x15266=((1.0)*(x15268.value));
IkReal x15267=x15262;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15266)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15266)));
IkReal gconst64=((1.0)*r11*x15267);
IkReal gconst65=((-1.0)*r10*x15267);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15269=gconst64*gconst64;
IkReal x15270=gconst65*gconst65;
IkReal x15271=(gconst65*r01);
IkReal x15272=(cj3*r22);
IkReal x15273=(gconst64*r00);
IkReal x15274=(cj3*r21);
IkReal x15275=((1.0)*gconst64*sj3);
IkReal x15276=((1.0)*cj3*r20);
CheckValue<IkReal> x15277 = IKatan2WithCheck(IkReal((((x15271*x15272))+((x15272*x15273)))),IkReal(((((-1.0)*gconst65*x15273*x15276))+((gconst64*x15271*x15274))+((r00*x15269*x15274))+(((-1.0)*r01*x15270*x15276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15277.valid){
continue;
}
CheckValue<IkReal> x15278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21*sj3*x15273))+(((-1.0)*r20*x15271*x15275))+((r00*r20*sj3*x15270))+((r02*r22*sj3))+((r01*r21*sj3*x15269)))),-1);
if(!x15278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15277.value)+(((1.5707963267949)*(x15278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15279=IKsin(j4);
IkReal x15280=IKcos(j4);
IkReal x15281=(cj2*sj1);
IkReal x15282=(cj1*sj2);
IkReal x15283=(cj3*gconst64);
IkReal x15284=(gconst65*r21);
IkReal x15285=(sj1*sj2);
IkReal x15286=(gconst65*sj3);
IkReal x15287=(gconst64*sj3);
IkReal x15288=(cj3*gconst65);
IkReal x15289=(cj1*cj2);
IkReal x15290=((1.0)*x15280);
IkReal x15291=((1.0)*x15279);
IkReal x15292=(cj3*x15279);
IkReal x15293=(gconst64*x15279);
IkReal x15294=(x15282+x15281);
evalcond[0]=((((-1.0)*r22*x15290))+((r21*x15293))+(((-1.0)*gconst65*r20*x15291)));
evalcond[1]=(((r11*x15293))+(((-1.0)*r12*x15290))+(((-1.0)*gconst65*r10*x15291)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15291))+((r01*x15293))+(((-1.0)*r02*x15290)));
evalcond[3]=(((r01*x15286))+((r00*x15287))+(((-1.0)*r00*x15288*x15290))+((r01*x15280*x15283))+((r02*x15292)));
evalcond[4]=(((r01*x15288))+((r00*x15283))+(((-1.0)*r01*x15287*x15290))+(((-1.0)*r02*sj3*x15291))+((r00*x15280*x15286)));
evalcond[5]=(x15294+((r21*x15280*x15283))+((r22*x15292))+((r20*x15287))+((sj3*x15284))+(((-1.0)*r20*x15288*x15290)));
evalcond[6]=(x15289+(((-1.0)*r10*x15288*x15290))+((r12*x15292))+((r10*x15287))+((r11*x15286))+((r11*x15280*x15283))+(((-1.0)*x15285)));
evalcond[7]=((((-1.0)*r11*x15287*x15290))+x15294+((r10*x15283))+((r10*x15280*x15286))+((r11*x15288))+(((-1.0)*r12*sj3*x15291)));
evalcond[8]=((((-1.0)*r21*x15287*x15290))+x15285+((cj3*x15284))+(((-1.0)*r22*sj3*x15291))+((r20*x15283))+((r20*x15280*x15286))+(((-1.0)*x15289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15295=((1.0)*gconst65);
CheckValue<IkReal> x15296 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15296.valid){
continue;
}
CheckValue<IkReal> x15297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15295))+(((-1.0)*gconst64*r20)))),-1);
if(!x15297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15296.value)+(((1.5707963267949)*(x15297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15298=IKsin(j4);
IkReal x15299=IKcos(j4);
IkReal x15300=(cj2*sj1);
IkReal x15301=(cj1*sj2);
IkReal x15302=(cj3*gconst64);
IkReal x15303=(gconst65*r21);
IkReal x15304=(sj1*sj2);
IkReal x15305=(gconst65*sj3);
IkReal x15306=(gconst64*sj3);
IkReal x15307=(cj3*gconst65);
IkReal x15308=(cj1*cj2);
IkReal x15309=((1.0)*x15299);
IkReal x15310=((1.0)*x15298);
IkReal x15311=(cj3*x15298);
IkReal x15312=(gconst64*x15298);
IkReal x15313=(x15300+x15301);
evalcond[0]=((((-1.0)*gconst65*r20*x15310))+((r21*x15312))+(((-1.0)*r22*x15309)));
evalcond[1]=(((r11*x15312))+(((-1.0)*gconst65*r10*x15310))+(((-1.0)*r12*x15309)));
evalcond[2]=((1.0)+((r01*x15312))+(((-1.0)*gconst65*r00*x15310))+(((-1.0)*r02*x15309)));
evalcond[3]=((((-1.0)*r00*x15307*x15309))+((r01*x15299*x15302))+((r00*x15306))+((r01*x15305))+((r02*x15311)));
evalcond[4]=(((r00*x15299*x15305))+((r00*x15302))+((r01*x15307))+(((-1.0)*r01*x15306*x15309))+(((-1.0)*r02*sj3*x15310)));
evalcond[5]=(((r20*x15306))+((sj3*x15303))+x15313+((r22*x15311))+(((-1.0)*r20*x15307*x15309))+((r21*x15299*x15302)));
evalcond[6]=(((r11*x15299*x15302))+((r12*x15311))+(((-1.0)*x15304))+x15308+((r10*x15306))+(((-1.0)*r10*x15307*x15309))+((r11*x15305)));
evalcond[7]=(x15313+((r10*x15299*x15305))+(((-1.0)*r12*sj3*x15310))+((r10*x15302))+(((-1.0)*r11*x15306*x15309))+((r11*x15307)));
evalcond[8]=(((r20*x15299*x15305))+((r20*x15302))+(((-1.0)*x15308))+x15304+(((-1.0)*r21*x15306*x15309))+(((-1.0)*r22*sj3*x15310))+((cj3*x15303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15314=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15314);
rxp0_2=(py*r00);
rxp1_0=(r21*x15314);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15315=(r01*sj5);
IkReal x15316=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15316))+x15315);
j4eval[1]=((((-1.0)*cj3*x15316))+((cj3*x15315)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15317=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15317);
rxp0_2=(py*r00);
rxp1_0=(r21*x15317);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15318=(cj5*r00);
IkReal x15319=(r01*sj5);
j4eval[0]=((((-1.0)*x15318))+x15319);
j4eval[1]=(((sj3*x15318))+(((-1.0)*sj3*x15319)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15320=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15320);
rxp0_2=(py*r00);
rxp1_0=(r21*x15320);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15321=((1.0)*r00);
CheckValue<IkReal> x15322=IKPowWithIntegerCheck(cj3,-1);
if(!x15322.valid){
continue;
}
CheckValue<IkReal> x15323=IKPowWithIntegerCheck(r12,-1);
if(!x15323.valid){
continue;
}
CheckValue<IkReal> x15324=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15321))),-1);
if(!x15324.valid){
continue;
}
if( IKabs(((x15322.value)*(x15323.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15324.value)*(((((-1.0)*sj3*sj5*x15321))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15322.value)*(x15323.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15324.value)*(((((-1.0)*sj3*sj5*x15321))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x15322.value)*(x15323.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15324.value)*(((((-1.0)*sj3*sj5*x15321))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15325=IKsin(j4);
IkReal x15326=IKcos(j4);
IkReal x15327=(cj2*sj1);
IkReal x15328=(cj1*sj2);
IkReal x15329=(sj1*sj2);
IkReal x15330=(cj5*sj3);
IkReal x15331=(cj3*cj5);
IkReal x15332=(r21*sj5);
IkReal x15333=(cj1*cj2);
IkReal x15334=(r00*sj5);
IkReal x15335=(r01*sj5);
IkReal x15336=(r20*sj5);
IkReal x15337=((1.0)*x15325);
IkReal x15338=(r20*x15326);
IkReal x15339=(r00*x15326);
IkReal x15340=(cj3*x15326);
IkReal x15341=(x15327+x15328);
IkReal x15342=((1.0)*sj3*x15326);
evalcond[0]=((-1.0)*r12*x15326);
evalcond[1]=(((x15325*x15332))+(((-1.0)*cj5*r20*x15337)));
evalcond[2]=((((-1.0)*x15329))+x15333+((cj3*r12*x15325)));
evalcond[3]=((((-1.0)*r12*sj3*x15337))+x15341);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15337))+((x15325*x15335)));
evalcond[5]=((((-1.0)*x15331*x15339))+((r01*x15330))+((sj3*x15334))+((x15335*x15340)));
evalcond[6]=(((cj3*x15334))+((r01*x15331))+((x15330*x15339))+(((-1.0)*x15335*x15342)));
evalcond[7]=((((-1.0)*x15331*x15338))+((sj3*x15336))+x15341+((x15332*x15340))+((r21*x15330)));
evalcond[8]=((((-1.0)*x15333))+((cj3*x15336))+((x15330*x15338))+x15329+((r21*x15331))+(((-1.0)*x15332*x15342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15343=((1.0)*r01);
IkReal x15344=(cj5*r00);
CheckValue<IkReal> x15345=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15344))),-1);
if(!x15345.valid){
continue;
}
CheckValue<IkReal> x15346=IKPowWithIntegerCheck((((sj3*x15344))+(((-1.0)*sj3*sj5*x15343))),-1);
if(!x15346.valid){
continue;
}
if( IKabs(((-1.0)*(x15345.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15346.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15343)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15345.value)))+IKsqr(((x15346.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15343))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x15345.value)), ((x15346.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15343))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15347=IKsin(j4);
IkReal x15348=IKcos(j4);
IkReal x15349=(cj2*sj1);
IkReal x15350=(cj1*sj2);
IkReal x15351=(sj1*sj2);
IkReal x15352=(cj5*sj3);
IkReal x15353=(cj3*cj5);
IkReal x15354=(r21*sj5);
IkReal x15355=(cj1*cj2);
IkReal x15356=(r00*sj5);
IkReal x15357=(r01*sj5);
IkReal x15358=(r20*sj5);
IkReal x15359=((1.0)*x15347);
IkReal x15360=(r20*x15348);
IkReal x15361=(r00*x15348);
IkReal x15362=(cj3*x15348);
IkReal x15363=(x15350+x15349);
IkReal x15364=((1.0)*sj3*x15348);
evalcond[0]=((-1.0)*r12*x15348);
evalcond[1]=(((x15347*x15354))+(((-1.0)*cj5*r20*x15359)));
evalcond[2]=(x15355+(((-1.0)*x15351))+((cj3*r12*x15347)));
evalcond[3]=((((-1.0)*r12*sj3*x15359))+x15363);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15359))+((x15347*x15357)));
evalcond[5]=(((x15357*x15362))+(((-1.0)*x15353*x15361))+((sj3*x15356))+((r01*x15352)));
evalcond[6]=(((x15352*x15361))+((cj3*x15356))+(((-1.0)*x15357*x15364))+((r01*x15353)));
evalcond[7]=(x15363+((x15354*x15362))+(((-1.0)*x15353*x15360))+((sj3*x15358))+((r21*x15352)));
evalcond[8]=(((x15352*x15360))+((cj3*x15358))+x15351+(((-1.0)*x15354*x15364))+(((-1.0)*x15355))+((r21*x15353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15365=((1.0)*r00);
IkReal x15366=(r01*sj5);
CheckValue<IkReal> x15367=IKPowWithIntegerCheck(((((-1.0)*cj5*x15365))+x15366),-1);
if(!x15367.valid){
continue;
}
CheckValue<IkReal> x15368=IKPowWithIntegerCheck((((cj3*x15366))+(((-1.0)*cj3*cj5*x15365))),-1);
if(!x15368.valid){
continue;
}
if( IKabs(((-1.0)*(x15367.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15368.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15365)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15367.value)))+IKsqr(((x15368.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15365))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*(x15367.value)), ((x15368.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15365))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15369=IKsin(j4);
IkReal x15370=IKcos(j4);
IkReal x15371=(cj2*sj1);
IkReal x15372=(cj1*sj2);
IkReal x15373=(sj1*sj2);
IkReal x15374=(cj5*sj3);
IkReal x15375=(cj3*cj5);
IkReal x15376=(r21*sj5);
IkReal x15377=(cj1*cj2);
IkReal x15378=(r00*sj5);
IkReal x15379=(r01*sj5);
IkReal x15380=(r20*sj5);
IkReal x15381=((1.0)*x15369);
IkReal x15382=(r20*x15370);
IkReal x15383=(r00*x15370);
IkReal x15384=(cj3*x15370);
IkReal x15385=(x15372+x15371);
IkReal x15386=((1.0)*sj3*x15370);
evalcond[0]=((-1.0)*r12*x15370);
evalcond[1]=(((x15369*x15376))+(((-1.0)*cj5*r20*x15381)));
evalcond[2]=((((-1.0)*x15373))+x15377+((cj3*r12*x15369)));
evalcond[3]=((((-1.0)*r12*sj3*x15381))+x15385);
evalcond[4]=((1.0)+((x15369*x15379))+(((-1.0)*cj5*r00*x15381)));
evalcond[5]=((((-1.0)*x15375*x15383))+((sj3*x15378))+((r01*x15374))+((x15379*x15384)));
evalcond[6]=((((-1.0)*x15379*x15386))+((r01*x15375))+((cj3*x15378))+((x15374*x15383)));
evalcond[7]=((((-1.0)*x15375*x15382))+((x15376*x15384))+((r21*x15374))+x15385+((sj3*x15380)));
evalcond[8]=((((-1.0)*x15377))+((r21*x15375))+((cj3*x15380))+x15373+(((-1.0)*x15376*x15386))+((x15374*x15382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15387=cj5*cj5;
IkReal x15388=(cj3*r20);
IkReal x15389=(r21*sj3);
IkReal x15390=((1.0)*cj3);
IkReal x15391=(r01*r21);
IkReal x15392=(r01*sj3);
IkReal x15393=(r00*sj5);
IkReal x15394=(cj5*r01*sj5);
IkReal x15395=((1.0)*x15387);
CheckValue<IkReal> x15396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15388*x15395))+((cj3*cj5*r21*x15393))+(((-1.0)*r02*r22*x15390))+((cj3*x15387*x15391))+(((-1.0)*x15390*x15391))+((x15388*x15394)))),-1);
if(!x15396.valid){
continue;
}
CheckValue<IkReal> x15397 = IKatan2WithCheck(IkReal((((r22*sj3*x15393))+((cj5*r22*x15392)))),IkReal(((((-1.0)*r00*x15389*x15395))+(((-1.0)*r20*x15392*x15395))+(((-1.0)*cj5*r20*sj3*x15393))+((x15389*x15394))+((r00*x15389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15396.value)))+(x15397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15398=IKsin(j4);
IkReal x15399=IKcos(j4);
IkReal x15400=(cj2*sj1);
IkReal x15401=(cj1*sj2);
IkReal x15402=(r11*sj5);
IkReal x15403=(cj5*r10);
IkReal x15404=(sj1*sj2);
IkReal x15405=(cj5*r01);
IkReal x15406=(cj5*r00);
IkReal x15407=(cj3*sj5);
IkReal x15408=(r21*sj5);
IkReal x15409=(cj1*cj2);
IkReal x15410=(cj5*sj3);
IkReal x15411=(sj3*sj5);
IkReal x15412=(r01*sj5);
IkReal x15413=(cj3*cj5);
IkReal x15414=(cj5*r20);
IkReal x15415=((1.0)*x15399);
IkReal x15416=((1.0)*x15398);
IkReal x15417=(cj3*x15399);
IkReal x15418=(sj3*x15399);
IkReal x15419=(cj3*x15398);
IkReal x15420=(x15401+x15400);
evalcond[0]=((((-1.0)*r22*x15415))+((x15398*x15408))+(((-1.0)*x15414*x15416)));
evalcond[1]=((((-1.0)*r12*x15415))+((x15398*x15402))+(((-1.0)*x15403*x15416)));
evalcond[2]=((1.0)+(((-1.0)*x15406*x15416))+((x15398*x15412))+(((-1.0)*r02*x15415)));
evalcond[3]=((((-1.0)*cj3*x15406*x15415))+((sj3*x15405))+((r00*x15411))+((r01*x15399*x15407))+((r02*x15419)));
evalcond[4]=((((-1.0)*r01*x15411*x15415))+((r00*x15407))+(((-1.0)*r02*sj3*x15416))+((x15406*x15418))+((cj3*x15405)));
evalcond[5]=(((r21*x15399*x15407))+((r20*x15411))+(((-1.0)*r20*x15413*x15415))+x15420+((r22*x15419))+((r21*x15410)));
evalcond[6]=(((r11*x15410))+((r12*x15419))+(((-1.0)*x15404))+(((-1.0)*cj3*x15403*x15415))+((x15402*x15417))+x15409+((r10*x15411)));
evalcond[7]=(((r11*x15413))+((x15403*x15418))+x15420+((r10*x15407))+(((-1.0)*sj3*x15402*x15415))+(((-1.0)*r12*sj3*x15416)));
evalcond[8]=((((-1.0)*x15409))+(((-1.0)*sj3*x15408*x15415))+((r20*x15407))+x15404+(((-1.0)*r22*sj3*x15416))+((r21*x15413))+((r20*x15399*x15410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15421=((1.0)*cj5);
CheckValue<IkReal> x15422 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15422.valid){
continue;
}
CheckValue<IkReal> x15423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15421))+(((-1.0)*r20*sj5)))),-1);
if(!x15423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15422.value)+(((1.5707963267949)*(x15423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15424=IKsin(j4);
IkReal x15425=IKcos(j4);
IkReal x15426=(cj2*sj1);
IkReal x15427=(cj1*sj2);
IkReal x15428=(r11*sj5);
IkReal x15429=(cj5*r10);
IkReal x15430=(sj1*sj2);
IkReal x15431=(cj5*r01);
IkReal x15432=(cj5*r00);
IkReal x15433=(cj3*sj5);
IkReal x15434=(r21*sj5);
IkReal x15435=(cj1*cj2);
IkReal x15436=(cj5*sj3);
IkReal x15437=(sj3*sj5);
IkReal x15438=(r01*sj5);
IkReal x15439=(cj3*cj5);
IkReal x15440=(cj5*r20);
IkReal x15441=((1.0)*x15425);
IkReal x15442=((1.0)*x15424);
IkReal x15443=(cj3*x15425);
IkReal x15444=(sj3*x15425);
IkReal x15445=(cj3*x15424);
IkReal x15446=(x15427+x15426);
evalcond[0]=((((-1.0)*r22*x15441))+(((-1.0)*x15440*x15442))+((x15424*x15434)));
evalcond[1]=(((x15424*x15428))+(((-1.0)*r12*x15441))+(((-1.0)*x15429*x15442)));
evalcond[2]=((1.0)+(((-1.0)*x15432*x15442))+(((-1.0)*r02*x15441))+((x15424*x15438)));
evalcond[3]=(((sj3*x15431))+((r01*x15425*x15433))+(((-1.0)*cj3*x15432*x15441))+((r02*x15445))+((r00*x15437)));
evalcond[4]=(((x15432*x15444))+(((-1.0)*r02*sj3*x15442))+((cj3*x15431))+(((-1.0)*r01*x15437*x15441))+((r00*x15433)));
evalcond[5]=(((r21*x15436))+(((-1.0)*r20*x15439*x15441))+((r21*x15425*x15433))+((r22*x15445))+x15446+((r20*x15437)));
evalcond[6]=(((r10*x15437))+((r12*x15445))+(((-1.0)*x15430))+((r11*x15436))+x15435+((x15428*x15443))+(((-1.0)*cj3*x15429*x15441)));
evalcond[7]=(((r10*x15433))+((r11*x15439))+(((-1.0)*sj3*x15428*x15441))+x15446+((x15429*x15444))+(((-1.0)*r12*sj3*x15442)));
evalcond[8]=(((r21*x15439))+(((-1.0)*r22*sj3*x15442))+(((-1.0)*sj3*x15434*x15441))+(((-1.0)*x15435))+x15430+((r20*x15425*x15436))+((r20*x15433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15447 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15447.valid){
continue;
}
CheckValue<IkReal> x15448=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15447.value)+(((1.5707963267949)*(x15448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15449=IKsin(j4);
IkReal x15450=IKcos(j4);
IkReal x15451=(cj2*sj1);
IkReal x15452=(cj1*sj2);
IkReal x15453=(r11*sj5);
IkReal x15454=(cj5*r10);
IkReal x15455=(sj1*sj2);
IkReal x15456=(cj5*r01);
IkReal x15457=(cj5*r00);
IkReal x15458=(cj3*sj5);
IkReal x15459=(r21*sj5);
IkReal x15460=(cj1*cj2);
IkReal x15461=(cj5*sj3);
IkReal x15462=(sj3*sj5);
IkReal x15463=(r01*sj5);
IkReal x15464=(cj3*cj5);
IkReal x15465=(cj5*r20);
IkReal x15466=((1.0)*x15450);
IkReal x15467=((1.0)*x15449);
IkReal x15468=(cj3*x15450);
IkReal x15469=(sj3*x15450);
IkReal x15470=(cj3*x15449);
IkReal x15471=(x15452+x15451);
evalcond[0]=(((x15449*x15459))+(((-1.0)*r22*x15466))+(((-1.0)*x15465*x15467)));
evalcond[1]=(((x15449*x15453))+(((-1.0)*x15454*x15467))+(((-1.0)*r12*x15466)));
evalcond[2]=((1.0)+((x15449*x15463))+(((-1.0)*x15457*x15467))+(((-1.0)*r02*x15466)));
evalcond[3]=(((r02*x15470))+((r01*x15450*x15458))+((sj3*x15456))+(((-1.0)*cj3*x15457*x15466))+((r00*x15462)));
evalcond[4]=(((cj3*x15456))+((r00*x15458))+((x15457*x15469))+(((-1.0)*r01*x15462*x15466))+(((-1.0)*r02*sj3*x15467)));
evalcond[5]=(((r22*x15470))+((r21*x15461))+((r21*x15450*x15458))+(((-1.0)*r20*x15464*x15466))+x15471+((r20*x15462)));
evalcond[6]=(((x15453*x15468))+((r12*x15470))+x15460+((r11*x15461))+((r10*x15462))+(((-1.0)*cj3*x15454*x15466))+(((-1.0)*x15455)));
evalcond[7]=(((x15454*x15469))+((r10*x15458))+(((-1.0)*sj3*x15453*x15466))+x15471+((r11*x15464))+(((-1.0)*r12*sj3*x15467)));
evalcond[8]=(((r20*x15458))+(((-1.0)*x15460))+(((-1.0)*sj3*x15459*x15466))+((r21*x15464))+x15455+((r20*x15450*x15461))+(((-1.0)*r22*sj3*x15467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15472=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15472);
rxp1_1=(px*r21);
rxp1_2=(r11*x15472);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15473=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15473);
rxp1_1=(px*r21);
rxp1_2=(r11*x15473);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15474=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15474)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15474)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15475=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15475);
rxp1_1=(px*r21);
rxp1_2=(r11*x15475);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15476=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15476);
rxp1_1=(px*r21);
rxp1_2=(r11*x15476);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15477=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15477);
rxp1_1=(px*r21);
rxp1_2=(r11*x15477);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15478=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15478);
rxp1_1=(px*r21);
rxp1_2=(r11*x15478);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15481=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15481.valid){
continue;
}
IkReal x15479=x15481.value;
IkReal x15480=(sj0*x15479);
cj4array[0]=(((cj2*sj1*x15480))+((cj1*sj2*x15480)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15482=IKsin(j4);
IkReal x15483=IKcos(j4);
IkReal x15484=(cj5*r20);
IkReal x15485=(r21*sj5);
IkReal x15486=((1.0)*x15482);
IkReal x15487=((1.0)*x15483);
evalcond[0]=((-1.0)*r02*x15482);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15487)));
evalcond[2]=(((x15482*x15485))+(((-1.0)*x15484*x15486)));
evalcond[3]=((((-1.0)*cj5*r10*x15486))+((r11*sj5*x15482)));
evalcond[4]=(((x15483*x15484))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15485*x15487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15489=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15489.valid){
continue;
}
IkReal x15488=x15489.value;
cj4array[0]=(((cj1*cj2*x15488))+(((-1.0)*sj1*sj2*x15488)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15490=IKsin(j4);
IkReal x15491=IKcos(j4);
IkReal x15492=(r11*sj5);
IkReal x15493=((1.0)*sj0);
IkReal x15494=((1.0)*x15491);
IkReal x15495=((1.0)*cj5*x15490);
evalcond[0]=((-1.0)*r02*x15490);
evalcond[1]=((((-1.0)*r02*x15494))+(((-1.0)*x15493)));
evalcond[2]=((((-1.0)*r20*x15495))+((r21*sj5*x15490)));
evalcond[3]=(((x15490*x15492))+(((-1.0)*r10*x15495)));
evalcond[4]=((((-1.0)*cj1*sj2*x15493))+(((-1.0)*x15492*x15494))+((cj5*r10*x15491))+(((-1.0)*cj2*sj1*x15493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15496=IKPowWithIntegerCheck(r02,-1);
if(!x15496.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15496.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15497=IKsin(j4);
IkReal x15498=IKcos(j4);
IkReal x15499=((1.0)*sj0);
IkReal x15500=(cj5*x15498);
IkReal x15501=(sj5*x15497);
IkReal x15502=((1.0)*sj5*x15498);
IkReal x15503=((1.0)*cj5*x15497);
evalcond[0]=((-1.0)*r02*x15497);
evalcond[1]=((((-1.0)*r20*x15503))+((r21*x15501)));
evalcond[2]=(((r11*x15501))+(((-1.0)*r10*x15503)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15502))+((r20*x15500)));
evalcond[4]=(((r10*x15500))+(((-1.0)*cj1*sj2*x15499))+(((-1.0)*r11*x15502))+(((-1.0)*cj2*sj1*x15499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15504=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15504);
rxp1_1=(px*r21);
rxp1_2=(r11*x15504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15505=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15505);
rxp1_1=(px*r21);
rxp1_2=(r11*x15505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15506=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15506);
rxp1_1=(px*r21);
rxp1_2=(r11*x15506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15509=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15509.valid){
continue;
}
IkReal x15507=x15509.value;
IkReal x15508=(sj0*x15507);
cj4array[0]=(((cj1*sj2*x15508))+((cj2*sj1*x15508)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15510=IKsin(j4);
IkReal x15511=IKcos(j4);
IkReal x15512=(r21*sj5);
IkReal x15513=((1.0)*cj5*r20);
evalcond[0]=(r02*x15510);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15511)));
evalcond[2]=((((-1.0)*x15510*x15513))+((x15510*x15512)));
evalcond[3]=(((r11*sj5*x15510))+(((-1.0)*cj5*r10*x15510)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15511*x15513))+((x15511*x15512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15515=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15515.valid){
continue;
}
IkReal x15514=x15515.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15514))+((cj1*cj2*x15514)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15516=IKsin(j4);
IkReal x15517=IKcos(j4);
IkReal x15518=((1.0)*sj0);
IkReal x15519=((1.0)*cj5);
IkReal x15520=(sj5*x15516);
evalcond[0]=(r02*x15516);
evalcond[1]=((((-1.0)*r02*x15517))+(((-1.0)*x15518)));
evalcond[2]=((((-1.0)*r20*x15516*x15519))+((r21*x15520)));
evalcond[3]=((((-1.0)*r10*x15516*x15519))+((r11*x15520)));
evalcond[4]=(((r11*sj5*x15517))+(((-1.0)*r10*x15517*x15519))+(((-1.0)*cj1*sj2*x15518))+(((-1.0)*cj2*sj1*x15518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15521=IKPowWithIntegerCheck(r02,-1);
if(!x15521.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15521.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
j4valid[0] = j4valid[1] = true;
j4array[0] = IKacos(cj4array[0]);
sj4array[0] = IKsin(j4array[0]);
cj4array[1] = cj4array[0];
j4array[1] = -j4array[0];
sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
// probably any value will work
j4valid[0] = true;
cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15522=IKsin(j4);
IkReal x15523=IKcos(j4);
IkReal x15524=((1.0)*cj1);
IkReal x15525=(r21*sj5);
IkReal x15526=((1.0)*cj5);
IkReal x15527=(r11*sj5);
evalcond[0]=(r02*x15522);
evalcond[1]=(((x15522*x15525))+(((-1.0)*r20*x15522*x15526)));
evalcond[2]=((((-1.0)*r10*x15522*x15526))+((x15522*x15527)));
evalcond[3]=(((x15523*x15525))+((sj1*sj2))+(((-1.0)*cj2*x15524))+(((-1.0)*r20*x15523*x15526)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15523*x15526))+((x15523*x15527))+(((-1.0)*sj0*sj2*x15524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15528 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15528.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15528.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15529 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15529.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15529.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15530=((-1.0)*r10);
CheckValue<IkReal> x15532 = IKatan2WithCheck(IkReal(x15530),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15532.valid){
continue;
}
IkReal x15531=((-1.0)*(x15532.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15530);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15531;
IkReal gconst66=x15531;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15533=((-1.0)*r10);
CheckValue<IkReal> x15535 = IKatan2WithCheck(IkReal(x15533),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15535.valid){
continue;
}
IkReal x15534=((-1.0)*(x15535.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15533);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15534;
IkReal gconst66=x15534;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15536=((-1.0)*r10);
CheckValue<IkReal> x15538 = IKatan2WithCheck(IkReal(x15536),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15538.valid){
continue;
}
IkReal x15537=((-1.0)*(x15538.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15536);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15537;
IkReal gconst66=x15537;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15539=((1.0)*gconst67);
IkReal x15540=(cj1*cj2);
IkReal x15541=((1.0)*sj1*sj2);
CheckValue<IkReal> x15542=IKPowWithIntegerCheck(cj3,-1);
if(!x15542.valid){
continue;
}
CheckValue<IkReal> x15543=IKPowWithIntegerCheck(r02,-1);
if(!x15543.valid){
continue;
}
CheckValue<IkReal> x15544=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15539))+((gconst68*r20*sj3))),-1);
if(!x15544.valid){
continue;
}
if( IKabs(((x15542.value)*(x15543.value)*(((((-1.0)*cj0*x15541))+((cj0*x15540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15544.value)*(((((-1.0)*x15541))+(((-1.0)*cj3*r20*x15539))+x15540+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15542.value)*(x15543.value)*(((((-1.0)*cj0*x15541))+((cj0*x15540))))))+IKsqr(((x15544.value)*(((((-1.0)*x15541))+(((-1.0)*cj3*r20*x15539))+x15540+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x15542.value)*(x15543.value)*(((((-1.0)*cj0*x15541))+((cj0*x15540))))), ((x15544.value)*(((((-1.0)*x15541))+(((-1.0)*cj3*r20*x15539))+x15540+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15545=IKsin(j4);
IkReal x15546=IKcos(j4);
IkReal x15547=(sj1*sj2);
IkReal x15548=(gconst68*sj3);
IkReal x15549=(gconst67*r11);
IkReal x15550=(gconst67*sj3);
IkReal x15551=((1.0)*gconst68);
IkReal x15552=(cj2*sj1);
IkReal x15553=((1.0)*cj0);
IkReal x15554=((1.0)*sj0);
IkReal x15555=(cj3*gconst67);
IkReal x15556=(cj3*gconst68);
IkReal x15557=(cj1*sj2);
IkReal x15558=(gconst67*r21);
IkReal x15559=((1.0)*cj1*cj2);
IkReal x15560=(cj3*x15546);
IkReal x15561=((1.0)*x15546);
IkReal x15562=(r02*x15545);
evalcond[0]=((((-1.0)*r02*x15561))+(((-1.0)*x15554)));
evalcond[1]=((((-1.0)*r20*x15545*x15551))+((x15545*x15558)));
evalcond[2]=((((-1.0)*r10*x15545*x15551))+cj0+((x15545*x15549)));
evalcond[3]=((((-1.0)*cj1*cj2*x15553))+((cj0*x15547))+((cj3*x15562)));
evalcond[4]=((((-1.0)*x15552*x15553))+(((-1.0)*x15553*x15557))+(((-1.0)*sj3*x15562)));
evalcond[5]=((((-1.0)*r20*x15551*x15560))+((r21*x15548))+((r20*x15550))+((r21*x15546*x15555))+x15557+x15552);
evalcond[6]=(((r20*x15546*x15548))+((r21*x15556))+((r20*x15555))+x15547+(((-1.0)*r21*x15550*x15561))+(((-1.0)*x15559)));
evalcond[7]=(((sj0*x15547))+(((-1.0)*cj1*cj2*x15554))+((r10*x15550))+((r11*x15548))+((x15549*x15560))+(((-1.0)*r10*x15551*x15560)));
evalcond[8]=(((r11*x15556))+(((-1.0)*x15552*x15554))+(((-1.0)*sj3*x15549*x15561))+(((-1.0)*x15554*x15557))+((r10*x15555))+((r10*x15546*x15548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15565=IKPowWithIntegerCheck(r02,-1);
if(!x15565.valid){
continue;
}
IkReal x15563=x15565.value;
IkReal x15564=((1.0)*cj0);
CheckValue<IkReal> x15566=IKPowWithIntegerCheck(sj3,-1);
if(!x15566.valid){
continue;
}
if( IKabs((x15563*(x15566.value)*(((((-1.0)*cj1*sj2*x15564))+(((-1.0)*cj2*sj1*x15564)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15563)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15563*(x15566.value)*(((((-1.0)*cj1*sj2*x15564))+(((-1.0)*cj2*sj1*x15564))))))+IKsqr(((-1.0)*sj0*x15563))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x15563*(x15566.value)*(((((-1.0)*cj1*sj2*x15564))+(((-1.0)*cj2*sj1*x15564))))), ((-1.0)*sj0*x15563));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15567=IKsin(j4);
IkReal x15568=IKcos(j4);
IkReal x15569=(sj1*sj2);
IkReal x15570=(gconst68*sj3);
IkReal x15571=(gconst67*r11);
IkReal x15572=(gconst67*sj3);
IkReal x15573=((1.0)*gconst68);
IkReal x15574=(cj2*sj1);
IkReal x15575=((1.0)*cj0);
IkReal x15576=((1.0)*sj0);
IkReal x15577=(cj3*gconst67);
IkReal x15578=(cj3*gconst68);
IkReal x15579=(cj1*sj2);
IkReal x15580=(gconst67*r21);
IkReal x15581=((1.0)*cj1*cj2);
IkReal x15582=(cj3*x15568);
IkReal x15583=((1.0)*x15568);
IkReal x15584=(r02*x15567);
evalcond[0]=((((-1.0)*r02*x15583))+(((-1.0)*x15576)));
evalcond[1]=(((x15567*x15580))+(((-1.0)*r20*x15567*x15573)));
evalcond[2]=(cj0+((x15567*x15571))+(((-1.0)*r10*x15567*x15573)));
evalcond[3]=(((cj0*x15569))+(((-1.0)*cj1*cj2*x15575))+((cj3*x15584)));
evalcond[4]=((((-1.0)*x15574*x15575))+(((-1.0)*sj3*x15584))+(((-1.0)*x15575*x15579)));
evalcond[5]=(((r21*x15570))+((r20*x15572))+(((-1.0)*r20*x15573*x15582))+((r21*x15568*x15577))+x15574+x15579);
evalcond[6]=((((-1.0)*x15581))+((r20*x15568*x15570))+((r21*x15578))+((r20*x15577))+x15569+(((-1.0)*r21*x15572*x15583)));
evalcond[7]=(((sj0*x15569))+((r10*x15572))+(((-1.0)*cj1*cj2*x15576))+((r11*x15570))+(((-1.0)*r10*x15573*x15582))+((x15571*x15582)));
evalcond[8]=((((-1.0)*x15574*x15576))+((r10*x15577))+((r10*x15568*x15570))+((r11*x15578))+(((-1.0)*sj3*x15571*x15583))+(((-1.0)*x15576*x15579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15586=IKPowWithIntegerCheck(r02,-1);
if(!x15586.valid){
continue;
}
IkReal x15585=x15586.value;
CheckValue<IkReal> x15587=IKPowWithIntegerCheck(cj3,-1);
if(!x15587.valid){
continue;
}
if( IKabs((x15585*(x15587.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15585)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15585*(x15587.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15585))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x15585*(x15587.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15585));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15588=IKsin(j4);
IkReal x15589=IKcos(j4);
IkReal x15590=(sj1*sj2);
IkReal x15591=(gconst68*sj3);
IkReal x15592=(gconst67*r11);
IkReal x15593=(gconst67*sj3);
IkReal x15594=((1.0)*gconst68);
IkReal x15595=(cj2*sj1);
IkReal x15596=((1.0)*cj0);
IkReal x15597=((1.0)*sj0);
IkReal x15598=(cj3*gconst67);
IkReal x15599=(cj3*gconst68);
IkReal x15600=(cj1*sj2);
IkReal x15601=(gconst67*r21);
IkReal x15602=((1.0)*cj1*cj2);
IkReal x15603=(cj3*x15589);
IkReal x15604=((1.0)*x15589);
IkReal x15605=(r02*x15588);
evalcond[0]=((((-1.0)*r02*x15604))+(((-1.0)*x15597)));
evalcond[1]=(((x15588*x15601))+(((-1.0)*r20*x15588*x15594)));
evalcond[2]=(cj0+(((-1.0)*r10*x15588*x15594))+((x15588*x15592)));
evalcond[3]=(((cj0*x15590))+(((-1.0)*cj1*cj2*x15596))+((cj3*x15605)));
evalcond[4]=((((-1.0)*x15596*x15600))+(((-1.0)*sj3*x15605))+(((-1.0)*x15595*x15596)));
evalcond[5]=(((r21*x15591))+(((-1.0)*r20*x15594*x15603))+((r20*x15593))+x15600+x15595+((r21*x15589*x15598)));
evalcond[6]=(((r20*x15589*x15591))+((r21*x15599))+(((-1.0)*r21*x15593*x15604))+(((-1.0)*x15602))+((r20*x15598))+x15590);
evalcond[7]=(((sj0*x15590))+((x15592*x15603))+(((-1.0)*r10*x15594*x15603))+(((-1.0)*cj1*cj2*x15597))+((r11*x15591))+((r10*x15593)));
evalcond[8]=(((r10*x15589*x15591))+(((-1.0)*sj3*x15592*x15604))+((r11*x15599))+((r10*x15598))+(((-1.0)*x15595*x15597))+(((-1.0)*x15597*x15600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15606=((-1.0)*r10);
CheckValue<IkReal> x15607 = IKatan2WithCheck(IkReal(x15606),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15607.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15607.value))));
IkReal gconst70=x15606;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15608 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15608.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15608.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15609=((-1.0)*r10);
IkReal x15610=((-1.0)*r11);
CheckValue<IkReal> x15612 = IKatan2WithCheck(IkReal(x15609),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15612.valid){
continue;
}
IkReal x15611=((1.0)*(x15612.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15609);
rxp1_1=(px*r21);
rxp1_2=(px*x15610);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15611)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15611)));
IkReal gconst70=x15609;
IkReal gconst71=x15610;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15613=((-1.0)*r10);
IkReal x15614=((-1.0)*r11);
CheckValue<IkReal> x15616 = IKatan2WithCheck(IkReal(x15613),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15616.valid){
continue;
}
IkReal x15615=((1.0)*(x15616.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15613);
rxp1_1=(px*r21);
rxp1_2=(px*x15614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15615)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15615)));
IkReal gconst70=x15613;
IkReal gconst71=x15614;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15617=((-1.0)*r10);
IkReal x15618=((-1.0)*r11);
CheckValue<IkReal> x15620 = IKatan2WithCheck(IkReal(x15617),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15620.valid){
continue;
}
IkReal x15619=((1.0)*(x15620.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15617);
rxp1_1=(px*r21);
rxp1_2=(px*x15618);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15619)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15619)));
IkReal gconst70=x15617;
IkReal gconst71=x15618;
IkReal x15621=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15621))+((r10*r21*x15621)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15622=((1.0)*r21);
IkReal x15623=(cj1*cj2);
IkReal x15624=((1.0)*sj1*sj2);
CheckValue<IkReal> x15625=IKPowWithIntegerCheck(cj3,-1);
if(!x15625.valid){
continue;
}
CheckValue<IkReal> x15626=IKPowWithIntegerCheck(r02,-1);
if(!x15626.valid){
continue;
}
CheckValue<IkReal> x15627=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15622))+((gconst71*r20*sj3))),-1);
if(!x15627.valid){
continue;
}
if( IKabs(((x15625.value)*(x15626.value)*((((cj0*x15623))+(((-1.0)*cj0*x15624)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15627.value)*(((((-1.0)*cj3*gconst71*x15622))+(((-1.0)*x15624))+x15623+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15625.value)*(x15626.value)*((((cj0*x15623))+(((-1.0)*cj0*x15624))))))+IKsqr(((x15627.value)*(((((-1.0)*cj3*gconst71*x15622))+(((-1.0)*x15624))+x15623+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((x15625.value)*(x15626.value)*((((cj0*x15623))+(((-1.0)*cj0*x15624))))), ((x15627.value)*(((((-1.0)*cj3*gconst71*x15622))+(((-1.0)*x15624))+x15623+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15628=IKsin(j4);
IkReal x15629=IKcos(j4);
IkReal x15630=(cj3*gconst70);
IkReal x15631=(sj1*sj2);
IkReal x15632=((1.0)*gconst71);
IkReal x15633=(gconst71*sj3);
IkReal x15634=(cj2*sj1);
IkReal x15635=((1.0)*sj0);
IkReal x15636=(gconst70*r11);
IkReal x15637=(gconst70*sj3);
IkReal x15638=((1.0)*cj0);
IkReal x15639=(cj3*gconst71);
IkReal x15640=(cj1*sj2);
IkReal x15641=((1.0)*cj1*cj2);
IkReal x15642=(r21*x15629);
IkReal x15643=(r10*x15629);
IkReal x15644=((1.0)*x15629);
IkReal x15645=(r02*x15628);
IkReal x15646=(r20*x15629);
evalcond[0]=((((-1.0)*r02*x15644))+(((-1.0)*x15635)));
evalcond[1]=(((gconst70*r21*x15628))+(((-1.0)*r20*x15628*x15632)));
evalcond[2]=(cj0+(((-1.0)*r10*x15628*x15632))+((x15628*x15636)));
evalcond[3]=((((-1.0)*cj1*cj2*x15638))+((cj3*x15645))+((cj0*x15631)));
evalcond[4]=((((-1.0)*x15638*x15640))+(((-1.0)*sj3*x15645))+(((-1.0)*x15634*x15638)));
evalcond[5]=(((r20*x15637))+(((-1.0)*cj3*x15632*x15646))+x15634+x15640+((r21*x15633))+((x15630*x15642)));
evalcond[6]=(((r20*x15630))+(((-1.0)*x15637*x15642))+x15631+((x15633*x15646))+((r21*x15639))+(((-1.0)*x15641)));
evalcond[7]=((((-1.0)*cj1*cj2*x15635))+(((-1.0)*cj3*x15632*x15643))+((r11*x15629*x15630))+((r11*x15633))+((sj0*x15631))+((r10*x15637)));
evalcond[8]=((((-1.0)*sj3*x15636*x15644))+(((-1.0)*x15634*x15635))+(((-1.0)*x15635*x15640))+((r11*x15639))+((x15633*x15643))+((r10*x15630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15649=IKPowWithIntegerCheck(r02,-1);
if(!x15649.valid){
continue;
}
IkReal x15647=x15649.value;
IkReal x15648=((1.0)*cj0);
CheckValue<IkReal> x15650=IKPowWithIntegerCheck(sj3,-1);
if(!x15650.valid){
continue;
}
if( IKabs((x15647*(x15650.value)*(((((-1.0)*cj2*sj1*x15648))+(((-1.0)*cj1*sj2*x15648)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15647)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15647*(x15650.value)*(((((-1.0)*cj2*sj1*x15648))+(((-1.0)*cj1*sj2*x15648))))))+IKsqr(((-1.0)*sj0*x15647))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x15647*(x15650.value)*(((((-1.0)*cj2*sj1*x15648))+(((-1.0)*cj1*sj2*x15648))))), ((-1.0)*sj0*x15647));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15651=IKsin(j4);
IkReal x15652=IKcos(j4);
IkReal x15653=(cj3*gconst70);
IkReal x15654=(sj1*sj2);
IkReal x15655=((1.0)*gconst71);
IkReal x15656=(gconst71*sj3);
IkReal x15657=(cj2*sj1);
IkReal x15658=((1.0)*sj0);
IkReal x15659=(gconst70*r11);
IkReal x15660=(gconst70*sj3);
IkReal x15661=((1.0)*cj0);
IkReal x15662=(cj3*gconst71);
IkReal x15663=(cj1*sj2);
IkReal x15664=((1.0)*cj1*cj2);
IkReal x15665=(r21*x15652);
IkReal x15666=(r10*x15652);
IkReal x15667=((1.0)*x15652);
IkReal x15668=(r02*x15651);
IkReal x15669=(r20*x15652);
evalcond[0]=((((-1.0)*x15658))+(((-1.0)*r02*x15667)));
evalcond[1]=((((-1.0)*r20*x15651*x15655))+((gconst70*r21*x15651)));
evalcond[2]=(cj0+((x15651*x15659))+(((-1.0)*r10*x15651*x15655)));
evalcond[3]=(((cj3*x15668))+(((-1.0)*cj1*cj2*x15661))+((cj0*x15654)));
evalcond[4]=((((-1.0)*x15661*x15663))+(((-1.0)*x15657*x15661))+(((-1.0)*sj3*x15668)));
evalcond[5]=(((r20*x15660))+x15657+x15663+(((-1.0)*cj3*x15655*x15669))+((x15653*x15665))+((r21*x15656)));
evalcond[6]=((((-1.0)*x15664))+x15654+((r21*x15662))+((x15656*x15669))+((r20*x15653))+(((-1.0)*x15660*x15665)));
evalcond[7]=((((-1.0)*cj1*cj2*x15658))+((r10*x15660))+((r11*x15656))+(((-1.0)*cj3*x15655*x15666))+((sj0*x15654))+((r11*x15652*x15653)));
evalcond[8]=(((r10*x15653))+(((-1.0)*sj3*x15659*x15667))+(((-1.0)*x15658*x15663))+((r11*x15662))+(((-1.0)*x15657*x15658))+((x15656*x15666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15671=IKPowWithIntegerCheck(r02,-1);
if(!x15671.valid){
continue;
}
IkReal x15670=x15671.value;
CheckValue<IkReal> x15672=IKPowWithIntegerCheck(cj3,-1);
if(!x15672.valid){
continue;
}
if( IKabs((x15670*(x15672.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15670)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15670*(x15672.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15670))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x15670*(x15672.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15670));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15673=IKsin(j4);
IkReal x15674=IKcos(j4);
IkReal x15675=(cj3*gconst70);
IkReal x15676=(sj1*sj2);
IkReal x15677=((1.0)*gconst71);
IkReal x15678=(gconst71*sj3);
IkReal x15679=(cj2*sj1);
IkReal x15680=((1.0)*sj0);
IkReal x15681=(gconst70*r11);
IkReal x15682=(gconst70*sj3);
IkReal x15683=((1.0)*cj0);
IkReal x15684=(cj3*gconst71);
IkReal x15685=(cj1*sj2);
IkReal x15686=((1.0)*cj1*cj2);
IkReal x15687=(r21*x15674);
IkReal x15688=(r10*x15674);
IkReal x15689=((1.0)*x15674);
IkReal x15690=(r02*x15673);
IkReal x15691=(r20*x15674);
evalcond[0]=((((-1.0)*r02*x15689))+(((-1.0)*x15680)));
evalcond[1]=(((gconst70*r21*x15673))+(((-1.0)*r20*x15673*x15677)));
evalcond[2]=(cj0+(((-1.0)*r10*x15673*x15677))+((x15673*x15681)));
evalcond[3]=(((cj3*x15690))+((cj0*x15676))+(((-1.0)*cj1*cj2*x15683)));
evalcond[4]=((((-1.0)*x15683*x15685))+(((-1.0)*x15679*x15683))+(((-1.0)*sj3*x15690)));
evalcond[5]=(((r20*x15682))+(((-1.0)*cj3*x15677*x15691))+x15679+x15685+((r21*x15678))+((x15675*x15687)));
evalcond[6]=(((r20*x15675))+(((-1.0)*x15682*x15687))+x15676+((x15678*x15691))+(((-1.0)*x15686))+((r21*x15684)));
evalcond[7]=((((-1.0)*cj3*x15677*x15688))+((r10*x15682))+((r11*x15674*x15675))+((r11*x15678))+((sj0*x15676))+(((-1.0)*cj1*cj2*x15680)));
evalcond[8]=(((r10*x15675))+((r11*x15684))+(((-1.0)*x15679*x15680))+((x15678*x15688))+(((-1.0)*x15680*x15685))+(((-1.0)*sj3*x15681*x15689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15693=IKPowWithIntegerCheck(r02,-1);
if(!x15693.valid){
continue;
}
IkReal x15692=x15693.value;
CheckValue<IkReal> x15694=IKPowWithIntegerCheck(cj3,-1);
if(!x15694.valid){
continue;
}
if( IKabs((x15692*(x15694.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15692)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15692*(x15694.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15692))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2((x15692*(x15694.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15692));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15695=IKsin(j4);
IkReal x15696=IKcos(j4);
IkReal x15697=(cj5*r10);
IkReal x15698=(sj1*sj2);
IkReal x15699=(cj5*sj3);
IkReal x15700=(r11*sj5);
IkReal x15701=(cj3*cj5);
IkReal x15702=(cj3*sj5);
IkReal x15703=(r21*sj5);
IkReal x15704=(cj2*sj1);
IkReal x15705=((1.0)*sj0);
IkReal x15706=((1.0)*cj0);
IkReal x15707=(sj3*sj5);
IkReal x15708=(cj1*sj2);
IkReal x15709=((1.0)*cj1*cj2);
IkReal x15710=((1.0)*x15695);
IkReal x15711=(r20*x15696);
IkReal x15712=(cj3*x15696);
IkReal x15713=(sj3*x15696);
evalcond[0]=((((-1.0)*x15705))+(((-1.0)*r02*x15696)));
evalcond[1]=(((x15695*x15703))+(((-1.0)*cj5*r20*x15710)));
evalcond[2]=(cj0+(((-1.0)*x15697*x15710))+((x15695*x15700)));
evalcond[3]=((((-1.0)*cj1*cj2*x15706))+((cj3*r02*x15695))+((cj0*x15698)));
evalcond[4]=((((-1.0)*x15704*x15706))+(((-1.0)*r02*sj3*x15710))+(((-1.0)*x15706*x15708)));
evalcond[5]=(((r20*x15707))+(((-1.0)*x15701*x15711))+((r21*x15699))+((r21*x15696*x15702))+x15708+x15704);
evalcond[6]=((((-1.0)*x15709))+((r20*x15702))+x15698+((x15699*x15711))+(((-1.0)*x15703*x15713))+((r21*x15701)));
evalcond[7]=((((-1.0)*x15697*x15712))+((r11*x15699))+((x15700*x15712))+((sj0*x15698))+(((-1.0)*cj1*cj2*x15705))+((r10*x15707)));
evalcond[8]=(((r11*x15701))+(((-1.0)*x15705*x15708))+(((-1.0)*x15704*x15705))+(((-1.0)*x15700*x15713))+((r10*x15702))+((x15697*x15713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15714=((1.0)*sj3);
IkReal x15715=((1.0)*cj5);
CheckValue<IkReal> x15716=IKPowWithIntegerCheck(((((-1.0)*r10*x15715))+((r11*sj5))),-1);
if(!x15716.valid){
continue;
}
CheckValue<IkReal> x15717=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15715))+((cj3*r21*sj5))),-1);
if(!x15717.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15716.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15717.value)*(((((-1.0)*r20*sj5*x15714))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15714)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15716.value)))+IKsqr(((x15717.value)*(((((-1.0)*r20*sj5*x15714))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15714))))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15716.value)), ((x15717.value)*(((((-1.0)*r20*sj5*x15714))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15714))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15718=IKsin(j4);
IkReal x15719=IKcos(j4);
IkReal x15720=(cj5*r10);
IkReal x15721=(sj1*sj2);
IkReal x15722=(cj5*sj3);
IkReal x15723=(r11*sj5);
IkReal x15724=(cj3*cj5);
IkReal x15725=(cj3*sj5);
IkReal x15726=(r21*sj5);
IkReal x15727=(cj2*sj1);
IkReal x15728=((1.0)*sj0);
IkReal x15729=((1.0)*cj0);
IkReal x15730=(sj3*sj5);
IkReal x15731=(cj1*sj2);
IkReal x15732=((1.0)*cj1*cj2);
IkReal x15733=((1.0)*x15718);
IkReal x15734=(r20*x15719);
IkReal x15735=(cj3*x15719);
IkReal x15736=(sj3*x15719);
evalcond[0]=((((-1.0)*x15728))+(((-1.0)*r02*x15719)));
evalcond[1]=(((x15718*x15726))+(((-1.0)*cj5*r20*x15733)));
evalcond[2]=(((x15718*x15723))+cj0+(((-1.0)*x15720*x15733)));
evalcond[3]=((((-1.0)*cj1*cj2*x15729))+((cj3*r02*x15718))+((cj0*x15721)));
evalcond[4]=((((-1.0)*r02*sj3*x15733))+(((-1.0)*x15727*x15729))+(((-1.0)*x15729*x15731)));
evalcond[5]=(((r20*x15730))+((r21*x15722))+x15731+x15727+((r21*x15719*x15725))+(((-1.0)*x15724*x15734)));
evalcond[6]=(((x15722*x15734))+(((-1.0)*x15732))+((r20*x15725))+((r21*x15724))+(((-1.0)*x15726*x15736))+x15721);
evalcond[7]=(((x15723*x15735))+((r11*x15722))+(((-1.0)*cj1*cj2*x15728))+((sj0*x15721))+(((-1.0)*x15720*x15735))+((r10*x15730)));
evalcond[8]=((((-1.0)*x15723*x15736))+((r11*x15724))+((x15720*x15736))+(((-1.0)*x15728*x15731))+(((-1.0)*x15727*x15728))+((r10*x15725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15737=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15737.valid){
continue;
}
CheckValue<IkReal> x15738=IKPowWithIntegerCheck(r02,-1);
if(!x15738.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15737.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15737.value)))+IKsqr(((-1.0)*sj0*(x15738.value)))-1) <= IKFAST_SINCOS_THRESH )
continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15737.value)), ((-1.0)*sj0*(x15738.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15739=IKsin(j4);
IkReal x15740=IKcos(j4);
IkReal x15741=(cj5*r10);
IkReal x15742=(sj1*sj2);
IkReal x15743=(cj5*sj3);
IkReal x15744=(r11*sj5);
IkReal x15745=(cj3*cj5);
IkReal x15746=(cj3*sj5);
IkReal x15747=(r21*sj5);
IkReal x15748=(cj2*sj1);
IkReal x15749=((1.0)*sj0);
IkReal x15750=((1.0)*cj0);
IkReal x15751=(sj3*sj5);
IkReal x15752=(cj1*sj2);
IkReal x15753=((1.0)*cj1*cj2);
IkReal x15754=((1.0)*x15739);
IkReal x15755=(r20*x15740);
IkReal x15756=(cj3*x15740);
IkReal x15757=(sj3*x15740);
evalcond[0]=((((-1.0)*r02*x15740))+(((-1.0)*x15749)));
evalcond[1]=((((-1.0)*cj5*r20*x15754))+((x15739*x15747)));
evalcond[2]=(((x15739*x15744))+cj0+(((-1.0)*x15741*x15754)));
evalcond[3]=(((cj3*r02*x15739))+((cj0*x15742))+(((-1.0)*cj1*cj2*x15750)));
evalcond[4]=((((-1.0)*r02*sj3*x15754))+(((-1.0)*x15750*x15752))+(((-1.0)*x15748*x15750)));
evalcond[5]=(((r21*x15740*x15746))+((r20*x15751))+((r21*x15743))+x15748+x15752+(((-1.0)*x15745*x15755)));
evalcond[6]=(((x15743*x15755))+(((-1.0)*x15753))+((r21*x15745))+x15742+((r20*x15746))+(((-1.0)*x15747*x15757)));
evalcond[7]=(((r10*x15751))+(((-1.0)*x15741*x15756))+((x15744*x15756))+((r11*x15743))+((sj0*x15742))+(((-1.0)*cj1*cj2*x15749)));
evalcond[8]=(((x15741*x15757))+(((-1.0)*x15749*x15752))+((r11*x15745))+(((-1.0)*x15744*x15757))+((r10*x15746))+(((-1.0)*x15748*x15749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15758=((1.0)*sj0);
IkReal x15759=((1.0)*cj0);
CheckValue<IkReal> x15760 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15759))+(((-1.0)*r12*x15758)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x15759))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x15758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15760.valid){
continue;
}
CheckValue<IkReal> x15761=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15760.value)+(((1.5707963267949)*(x15761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15762=IKsin(j4);
IkReal x15763=IKcos(j4);
IkReal x15764=(r11*sj5);
IkReal x15765=(cj5*r10);
IkReal x15766=(sj1*sj2);
IkReal x15767=(cj5*sj3);
IkReal x15768=((1.0)*sj0);
IkReal x15769=(cj3*cj5);
IkReal x15770=(cj3*sj5);
IkReal x15771=(r21*sj5);
IkReal x15772=(cj2*sj1);
IkReal x15773=(sj3*sj5);
IkReal x15774=(r01*sj5);
IkReal x15775=((1.0)*cj0);
IkReal x15776=(cj1*sj2);
IkReal x15777=((1.0)*x15763);
IkReal x15778=((1.0)*x15762);
IkReal x15779=(cj3*x15763);
IkReal x15780=((1.0)*cj1*cj2);
IkReal x15781=(cj3*x15762);
evalcond[0]=((((-1.0)*r22*x15777))+((x15762*x15771))+(((-1.0)*cj5*r20*x15778)));
evalcond[1]=(cj0+((x15762*x15764))+(((-1.0)*x15765*x15778))+(((-1.0)*r12*x15777)));
evalcond[2]=((((-1.0)*cj5*r00*x15778))+(((-1.0)*x15768))+((x15762*x15774))+(((-1.0)*r02*x15777)));
evalcond[3]=(((r21*x15767))+((r22*x15781))+((r20*x15773))+x15776+x15772+((r21*x15763*x15770))+(((-1.0)*r20*x15769*x15777)));
evalcond[4]=(((r21*x15769))+((r20*x15770))+x15766+((r20*x15763*x15767))+(((-1.0)*r22*sj3*x15778))+(((-1.0)*x15780))+(((-1.0)*sj3*x15771*x15777)));
evalcond[5]=((((-1.0)*r00*x15769*x15777))+((r01*x15767))+((r00*x15773))+((r02*x15781))+((cj0*x15766))+(((-1.0)*cj1*cj2*x15775))+((r01*x15763*x15770)));
evalcond[6]=(((r10*x15773))+((sj0*x15766))+((r12*x15781))+(((-1.0)*cj1*cj2*x15768))+((x15764*x15779))+(((-1.0)*cj3*x15765*x15777))+((r11*x15767)));
evalcond[7]=((((-1.0)*x15772*x15775))+(((-1.0)*r02*sj3*x15778))+((r00*x15763*x15767))+((r01*x15769))+((r00*x15770))+(((-1.0)*x15775*x15776))+(((-1.0)*r01*x15773*x15777)));
evalcond[8]=(((r10*x15770))+((sj3*x15763*x15765))+(((-1.0)*x15768*x15776))+(((-1.0)*x15768*x15772))+(((-1.0)*r12*sj3*x15778))+((r11*x15769))+(((-1.0)*sj3*x15764*x15777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15782=((1.0)*cj5);
CheckValue<IkReal> x15783 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15782))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15783.valid){
continue;
}
CheckValue<IkReal> x15784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15782)))),-1);
if(!x15784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15783.value)+(((1.5707963267949)*(x15784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15785=IKsin(j4);
IkReal x15786=IKcos(j4);
IkReal x15787=(r11*sj5);
IkReal x15788=(cj5*r10);
IkReal x15789=(sj1*sj2);
IkReal x15790=(cj5*sj3);
IkReal x15791=((1.0)*sj0);
IkReal x15792=(cj3*cj5);
IkReal x15793=(cj3*sj5);
IkReal x15794=(r21*sj5);
IkReal x15795=(cj2*sj1);
IkReal x15796=(sj3*sj5);
IkReal x15797=(r01*sj5);
IkReal x15798=((1.0)*cj0);
IkReal x15799=(cj1*sj2);
IkReal x15800=((1.0)*x15786);
IkReal x15801=((1.0)*x15785);
IkReal x15802=(cj3*x15786);
IkReal x15803=((1.0)*cj1*cj2);
IkReal x15804=(cj3*x15785);
evalcond[0]=((((-1.0)*cj5*r20*x15801))+(((-1.0)*r22*x15800))+((x15785*x15794)));
evalcond[1]=((((-1.0)*r12*x15800))+cj0+(((-1.0)*x15788*x15801))+((x15785*x15787)));
evalcond[2]=((((-1.0)*cj5*r00*x15801))+(((-1.0)*x15791))+(((-1.0)*r02*x15800))+((x15785*x15797)));
evalcond[3]=(((r21*x15786*x15793))+((r20*x15796))+((r21*x15790))+x15795+x15799+((r22*x15804))+(((-1.0)*r20*x15792*x15800)));
evalcond[4]=((((-1.0)*x15803))+((r20*x15786*x15790))+((r20*x15793))+((r21*x15792))+x15789+(((-1.0)*r22*sj3*x15801))+(((-1.0)*sj3*x15794*x15800)));
evalcond[5]=(((r01*x15786*x15793))+(((-1.0)*cj1*cj2*x15798))+((r01*x15790))+((r02*x15804))+((r00*x15796))+((cj0*x15789))+(((-1.0)*r00*x15792*x15800)));
evalcond[6]=(((r12*x15804))+((r11*x15790))+((sj0*x15789))+(((-1.0)*cj1*cj2*x15791))+(((-1.0)*cj3*x15788*x15800))+((r10*x15796))+((x15787*x15802)));
evalcond[7]=((((-1.0)*r01*x15796*x15800))+(((-1.0)*x15795*x15798))+(((-1.0)*r02*sj3*x15801))+((r01*x15792))+((r00*x15793))+(((-1.0)*x15798*x15799))+((r00*x15786*x15790)));
evalcond[8]=((((-1.0)*sj3*x15787*x15800))+((r11*x15792))+((r10*x15793))+((sj3*x15786*x15788))+(((-1.0)*x15791*x15795))+(((-1.0)*x15791*x15799))+(((-1.0)*r12*sj3*x15801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15805=((1.0)*cj5);
CheckValue<IkReal> x15806=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15805))+(((-1.0)*r00*sj5)))),-1);
if(!x15806.valid){
continue;
}
CheckValue<IkReal> x15807 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15806.value)))+(x15807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15808=IKsin(j4);
IkReal x15809=IKcos(j4);
IkReal x15810=(r11*sj5);
IkReal x15811=(cj5*r10);
IkReal x15812=(sj1*sj2);
IkReal x15813=(cj5*sj3);
IkReal x15814=((1.0)*sj0);
IkReal x15815=(cj3*cj5);
IkReal x15816=(cj3*sj5);
IkReal x15817=(r21*sj5);
IkReal x15818=(cj2*sj1);
IkReal x15819=(sj3*sj5);
IkReal x15820=(r01*sj5);
IkReal x15821=((1.0)*cj0);
IkReal x15822=(cj1*sj2);
IkReal x15823=((1.0)*x15809);
IkReal x15824=((1.0)*x15808);
IkReal x15825=(cj3*x15809);
IkReal x15826=((1.0)*cj1*cj2);
IkReal x15827=(cj3*x15808);
evalcond[0]=((((-1.0)*cj5*r20*x15824))+((x15808*x15817))+(((-1.0)*r22*x15823)));
evalcond[1]=(cj0+(((-1.0)*x15811*x15824))+(((-1.0)*r12*x15823))+((x15808*x15810)));
evalcond[2]=((((-1.0)*r02*x15823))+((x15808*x15820))+(((-1.0)*x15814))+(((-1.0)*cj5*r00*x15824)));
evalcond[3]=(((r22*x15827))+((r21*x15809*x15816))+(((-1.0)*r20*x15815*x15823))+((r21*x15813))+((r20*x15819))+x15818+x15822);
evalcond[4]=(((r20*x15809*x15813))+(((-1.0)*sj3*x15817*x15823))+(((-1.0)*x15826))+(((-1.0)*r22*sj3*x15824))+((r21*x15815))+((r20*x15816))+x15812);
evalcond[5]=(((r02*x15827))+((cj0*x15812))+(((-1.0)*cj1*cj2*x15821))+((r01*x15809*x15816))+((r00*x15819))+((r01*x15813))+(((-1.0)*r00*x15815*x15823)));
evalcond[6]=(((r11*x15813))+(((-1.0)*cj1*cj2*x15814))+((sj0*x15812))+((r10*x15819))+(((-1.0)*cj3*x15811*x15823))+((x15810*x15825))+((r12*x15827)));
evalcond[7]=((((-1.0)*x15818*x15821))+((r00*x15809*x15813))+(((-1.0)*r02*sj3*x15824))+(((-1.0)*x15821*x15822))+(((-1.0)*r01*x15819*x15823))+((r00*x15816))+((r01*x15815)));
evalcond[8]=((((-1.0)*x15814*x15822))+((r11*x15815))+(((-1.0)*x15814*x15818))+((r10*x15816))+(((-1.0)*sj3*x15810*x15823))+((sj3*x15809*x15811))+(((-1.0)*r12*sj3*x15824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15828=cj5*cj5;
IkReal x15829=r21*r21;
IkReal x15830=r20*r20;
IkReal x15831=(r20*r21);
IkReal x15832=((1.0)*cj3);
IkReal x15833=((1.0)*cj5);
IkReal x15834=(cj1*sj2);
IkReal x15835=(cj5*sj5);
IkReal x15836=(sj3*sj5);
IkReal x15837=(cj2*sj1);
IkReal x15838=(r21*sj5);
CheckValue<IkReal> x15839=IKPowWithIntegerCheck(IKsign((((cj3*x15828*x15829))+(((-1.0)*x15832*(r22*r22)))+(((-1.0)*x15829*x15832))+(((2.0)*cj3*x15831*x15835))+(((-1.0)*x15828*x15830*x15832)))),-1);
if(!x15839.valid){
continue;
}
CheckValue<IkReal> x15840 = IKatan2WithCheck(IkReal((((r22*x15834))+((r22*x15837))+((cj5*r21*r22*sj3))+((r20*r22*x15836)))),IkReal((((x15834*x15838))+(((-1.0)*x15830*x15833*x15836))+((sj3*x15829*x15835))+((x15837*x15838))+(((-1.0)*r20*x15833*x15837))+(((-1.0)*r20*x15833*x15834))+(((-2.0)*sj3*x15828*x15831))+((sj3*x15831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15839.value)))+(x15840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15841=IKsin(j4);
IkReal x15842=IKcos(j4);
IkReal x15843=(cj3*r21);
IkReal x15844=(r21*sj5);
IkReal x15845=(r20*sj5);
IkReal x15846=(cj5*r20);
IkReal x15847=((1.0)*x15842);
IkReal x15848=((1.0)*x15841);
evalcond[0]=(((x15841*x15844))+(((-1.0)*r22*x15847))+(((-1.0)*x15846*x15848)));
evalcond[1]=(((cj2*sj1))+((sj5*x15842*x15843))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15845))+((cj3*r22*x15841))+(((-1.0)*cj3*x15846*x15847)));
evalcond[2]=(((sj3*x15842*x15846))+((cj3*x15845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15848))+(((-1.0)*sj3*x15844*x15847))+((cj5*x15843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15849=(cj5*sj4);
IkReal x15850=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15849))+((r01*x15850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15849))+(((-1.0)*r11*x15850))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15849))+((r01*x15850))))+IKsqr((((r10*x15849))+(((-1.0)*r11*x15850))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15849))+((r01*x15850))), (((r10*x15849))+(((-1.0)*r11*x15850))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15851=IKcos(j0);
IkReal x15852=IKsin(j0);
IkReal x15853=(cj5*r01);
IkReal x15854=((1.0)*sj3);
IkReal x15855=(r12*sj4);
IkReal x15856=((1.0)*cj3);
IkReal x15857=(r11*sj5);
IkReal x15858=(cj3*cj4);
IkReal x15859=(r02*sj4);
IkReal x15860=(r01*sj5);
IkReal x15861=(r10*sj5);
IkReal x15862=(cj5*r11);
IkReal x15863=(r00*sj5);
IkReal x15864=((1.0)*cj2);
IkReal x15865=((0.5723)*sj2);
IkReal x15866=((1.0)*cj4);
IkReal x15867=((0.5723)*cj2);
IkReal x15868=(cj4*cj5*r00);
IkReal x15869=((1.0)*cj1*sj2);
IkReal x15870=(cj4*cj5*r10);
IkReal x15871=(sj1*x15851);
IkReal x15872=(cj1*x15852);
IkReal x15873=((1.0)*cj5*sj4);
IkReal x15874=(cj1*x15851);
IkReal x15875=(sj1*x15852);
evalcond[0]=(((sj4*x15857))+(((-1.0)*r10*x15873))+x15851+(((-1.0)*r12*x15866)));
evalcond[1]=((((-1.0)*r02*x15866))+((sj4*x15860))+(((-1.0)*r00*x15873))+(((-1.0)*x15852)));
evalcond[2]=((((-0.163941)*x15852))+(((0.612)*x15874))+(((-0.1157)*x15863))+(((-1.0)*px))+((x15867*x15874))+(((-0.1157)*x15853))+(((-1.0)*x15865*x15871)));
evalcond[3]=((((0.612)*x15872))+(((-0.1157)*x15862))+(((-0.1157)*x15861))+(((-1.0)*py))+((x15867*x15872))+(((-1.0)*x15865*x15875))+(((0.163941)*x15851)));
evalcond[4]=(((cj3*x15859))+((sj3*x15863))+((x15858*x15860))+(((-1.0)*x15856*x15868))+((sj3*x15853))+((sj2*x15871))+(((-1.0)*x15864*x15874)));
evalcond[5]=(((x15857*x15858))+((cj3*x15855))+((sj3*x15861))+((sj3*x15862))+((sj2*x15875))+(((-1.0)*x15864*x15872))+(((-1.0)*x15856*x15870)));
evalcond[6]=(((cj3*x15853))+((sj3*x15868))+(((-1.0)*x15854*x15859))+(((-1.0)*cj4*x15854*x15860))+(((-1.0)*x15851*x15869))+(((-1.0)*x15864*x15871))+((cj3*x15863)));
evalcond[7]=((((-1.0)*x15854*x15855))+(((-1.0)*x15852*x15869))+(((-1.0)*x15864*x15875))+((cj3*x15861))+((cj3*x15862))+((sj3*x15870))+(((-1.0)*cj4*x15854*x15857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15876=cj5*cj5;
IkReal x15877=r21*r21;
IkReal x15878=r20*r20;
IkReal x15879=(r20*r21);
IkReal x15880=(sj1*sj2);
IkReal x15881=(r21*sj5);
IkReal x15882=(cj1*cj2);
IkReal x15883=(cj5*r20);
IkReal x15884=(cj5*sj5);
IkReal x15885=(cj3*r22);
IkReal x15886=(sj3*x15877);
CheckValue<IkReal> x15887=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15876*x15878))+(((-2.0)*sj3*x15879*x15884))+(((-1.0)*x15876*x15886))+x15886)),-1);
if(!x15887.valid){
continue;
}
CheckValue<IkReal> x15888 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15882))+((r20*sj5*x15885))+((cj5*r21*x15885))+((r22*x15880)))),IkReal((((cj3*x15879))+(((-1.0)*x15880*x15883))+((x15882*x15883))+(((-2.0)*cj3*x15876*x15879))+((cj3*x15877*x15884))+(((-1.0)*cj3*x15878*x15884))+(((-1.0)*x15881*x15882))+((x15880*x15881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15887.value)))+(x15888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15889=IKsin(j4);
IkReal x15890=IKcos(j4);
IkReal x15891=(cj3*r21);
IkReal x15892=(r21*sj5);
IkReal x15893=(r20*sj5);
IkReal x15894=(cj5*r20);
IkReal x15895=((1.0)*x15890);
IkReal x15896=((1.0)*x15889);
evalcond[0]=((((-1.0)*x15894*x15896))+(((-1.0)*r22*x15895))+((x15889*x15892)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15893))+((sj5*x15890*x15891))+(((-1.0)*cj3*x15894*x15895))+((cj3*r22*x15889)));
evalcond[2]=((((-1.0)*sj3*x15892*x15895))+((sj3*x15890*x15894))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x15893))+(((-1.0)*r22*sj3*x15896))+((cj5*x15891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15897=(cj5*sj4);
IkReal x15898=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15898))+(((-1.0)*r00*x15897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15897))+(((-1.0)*r11*x15898))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15898))+(((-1.0)*r00*x15897))))+IKsqr((((r10*x15897))+(((-1.0)*r11*x15898))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15898))+(((-1.0)*r00*x15897))), (((r10*x15897))+(((-1.0)*r11*x15898))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15899=IKcos(j0);
IkReal x15900=IKsin(j0);
IkReal x15901=(cj5*r01);
IkReal x15902=((1.0)*sj3);
IkReal x15903=(r12*sj4);
IkReal x15904=((1.0)*cj3);
IkReal x15905=(r11*sj5);
IkReal x15906=(cj3*cj4);
IkReal x15907=(r02*sj4);
IkReal x15908=(r01*sj5);
IkReal x15909=(r10*sj5);
IkReal x15910=(cj5*r11);
IkReal x15911=(r00*sj5);
IkReal x15912=((1.0)*cj2);
IkReal x15913=((0.5723)*sj2);
IkReal x15914=((1.0)*cj4);
IkReal x15915=((0.5723)*cj2);
IkReal x15916=(cj4*cj5*r00);
IkReal x15917=((1.0)*cj1*sj2);
IkReal x15918=(cj4*cj5*r10);
IkReal x15919=(sj1*x15899);
IkReal x15920=(cj1*x15900);
IkReal x15921=((1.0)*cj5*sj4);
IkReal x15922=(cj1*x15899);
IkReal x15923=(sj1*x15900);
evalcond[0]=((((-1.0)*r10*x15921))+(((-1.0)*r12*x15914))+((sj4*x15905))+x15899);
evalcond[1]=((((-1.0)*x15900))+(((-1.0)*r02*x15914))+((sj4*x15908))+(((-1.0)*r00*x15921)));
evalcond[2]=((((-0.163941)*x15900))+(((0.612)*x15922))+(((-1.0)*px))+((x15915*x15922))+(((-1.0)*x15913*x15919))+(((-0.1157)*x15901))+(((-0.1157)*x15911)));
evalcond[3]=((((0.612)*x15920))+(((-1.0)*py))+((x15915*x15920))+(((-0.1157)*x15909))+(((-0.1157)*x15910))+(((0.163941)*x15899))+(((-1.0)*x15913*x15923)));
evalcond[4]=((((-1.0)*x15912*x15922))+((sj3*x15911))+((sj3*x15901))+((sj2*x15919))+((cj3*x15907))+(((-1.0)*x15904*x15916))+((x15906*x15908)));
evalcond[5]=((((-1.0)*x15912*x15920))+((sj3*x15910))+((sj3*x15909))+((sj2*x15923))+((cj3*x15903))+(((-1.0)*x15904*x15918))+((x15905*x15906)));
evalcond[6]=(((sj3*x15916))+(((-1.0)*x15902*x15907))+(((-1.0)*cj4*x15902*x15908))+((cj3*x15911))+((cj3*x15901))+(((-1.0)*x15912*x15919))+(((-1.0)*x15899*x15917)));
evalcond[7]=((((-1.0)*x15912*x15923))+((sj3*x15918))+(((-1.0)*x15900*x15917))+(((-1.0)*x15902*x15903))+(((-1.0)*cj4*x15902*x15905))+((cj3*x15910))+((cj3*x15909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
IkReal norm = 0.1;
for(int i = 0; i < 7; ++i) {
norm += IKabs(Breal[i]);
}
// HACK should be 1e-5*norm
IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
int n = D;
int info;
IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
int ipiv[D];
dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
if( info != 0 ) {
return false;
}
int worksize=D*D*(D-1);
dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
IkReal IKFAST_ALIGNED16(A[8*8]);
IkReal IKFAST_ALIGNED16(work[16*16*15]);
int ipiv[8];
int info, coeffindex;
const int worksize=16*16*15;
const int matrixdim = 8;
const int matrixdim2 = 16;
numroots = 0;
// first setup M = [0 I; -C -B] and A
coeffindex = 0;
for(int j = 0; j < 4; ++j) {
for(int k = 0; k < 6; ++k) {
M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
}
}
for(int j = 0; j < 4; ++j) {
for(int k = 0; k < 6; ++k) {
M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
}
}
for(int j = 0; j < 4; ++j) {
for(int k = 0; k < 6; ++k) {
A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
}
for(int k = 0; k < 2; ++k) {
A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
}
}
const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
int lfindex = -1;
bool bsingular = true;
do {
dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
if( info == 0 ) {
bsingular = false;
for(int j = 0; j < matrixdim; ++j) {
if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
bsingular = true;
break;
}
}
if( !bsingular ) {
break;
}
}
if( lfindex == 3 ) {
break;
}
// transform by the linear functional
lfindex++;
const IkReal* lf = lfpossibilities[lfindex];
// have to reinitialize A
coeffindex = 0;
for(int j = 0; j < 4; ++j) {
for(int k = 0; k < 6; ++k) {
IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
coeffindex++;
}
for(int k = 0; k < 2; ++k) {
A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
}
}
} while(lfindex<4);

if( bsingular ) {
return;
}
dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
if( info != 0 ) {
return;
}

// set identity in upper corner
for(int j = 0; j < matrixdim; ++j) {
M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
}
IkReal IKFAST_ALIGNED16(wr[16]);
IkReal IKFAST_ALIGNED16(wi[16]);
IkReal IKFAST_ALIGNED16(vr[16*16]);
int one=1;
dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
if( info != 0 ) {
return;
}
IkReal Breal[matrixdim-1];
for(int i = 0; i < matrixdim2; ++i) {
// HACK should be tol*100
if( IKabs(wi[i]) < 5e-5 ) {
IkReal* ev = vr+matrixdim2*i;
if( IKabs(wr[i]) > 1 ) {
ev += matrixdim;
}
// consistency has to be checked!!
if( IKabs(ev[0]) < tol ) {
continue;
}
IkReal iconst = 1/ev[0];
for(int j = 1; j < matrixdim; ++j) {
Breal[j-1] = ev[j]*iconst;
}
if( checkconsistency8(Breal) ) {
if( lfindex >= 0 ) {
const IkReal* lf = lfpossibilities[lfindex];
rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
}
else {
rawroots[numroots++] = wr[i];
}
bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
if( bsmall0 && bsmall1 ) {
rawroots[numroots++] = ev[2]/ev[0];
rawroots[numroots++] = ev[1]/ev[0];
}
else if( bsmall0 && !bsmall1 ) {
rawroots[numroots++] = ev[3]/ev[1];
rawroots[numroots++] = ev[1]/ev[0];
}
else if( !bsmall0 && bsmall1 ) {
rawroots[numroots++] = ev[6]/ev[4];
rawroots[numroots++] = ev[7]/ev[6];
}
else if( !bsmall0 && !bsmall1 ) {
rawroots[numroots++] = ev[7]/ev[5];
rawroots[numroots++] = ev[7]/ev[6];
}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10 (2dfe21c55533d00254ff7c09021198bd)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
if( argc != 12+GetNumFreeParameters()+1 ) {
printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
"Returns the ik solutions given the transformation of the end effector specified by\n"
"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
"There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
return 1;
}

IkSolutionList<IkReal> solutions;
std::vector<IkReal> vfree(GetNumFreeParameters());
IkReal eerot[9],eetrans[3];
eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
for(std::size_t i = 0; i < vfree.size(); ++i)
vfree[i] = atof(argv[13+i]);
bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

if( !bSuccess ) {
fprintf(stderr,"Failed to get ik solution\n");
return -1;
}

printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
std::vector<IkReal> solvalues(GetNumJoints());
for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
std::vector<IkReal> vsolfree(sol.GetFree().size());
sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
for( std::size_t j = 0; j < solvalues.size(); ++j)
printf("%.15f, ", solvalues[j]);
printf("\n");
}
return 0;
}

#endif



/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-12-07 17:01:13.982774
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include <ur10_ikfast_manipulator_plugin/ikfast.h> // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.1157)*x4);
x13=((0.5723)*x1);
x14=((0.1157)*x1);
x15=((1.0)*x9);
x16=((1.0)*x6);
x17=((1.0)*x5);
x18=((1.0)*x4);
x19=(x0*x3);
x20=(x0*x1);
x21=(x0*x2);
x22=(x2*x9);
x23=(x3*x4);
x24=(x3*x9);
x25=(x1*x2);
x26=((1.0)*x1*x3);
x27=(x21*x4);
x28=((1.0)*x1*x19);
x29=(x1*x15*x3);
x30=(x25+x23);
x31=((((-1.0)*x18*x2))+x26);
x32=((((-1.0)*x18*x3))+(((-1.0)*x25)));
x33=(x31*x5);
x34=((((-1.0)*x28))+x27);
x35=(((x22*x4))+(((-1.0)*x29)));
x36=(x32*x6);
x37=((((-1.0)*x18*x21))+x28);
x38=(x29+(((-1.0)*x15*x2*x4)));
x39=(((x18*x19))+(((1.0)*x2*x20)));
x40=(x15*((x25+x23)));
x41=(((x31*x6))+((x30*x5)));
x42=(x41*x8);
x43=(((x8*((((x34*x5))+((x39*x6))))))+(((-1.0)*x15*x7)));
x44=(((x0*x7))+((x8*((((x35*x5))+((x40*x6)))))));
eerot[0]=(((x10*((((x39*x5))+((x37*x6))))))+((x11*x43)));
eerot[1]=(((x7*(((((-1.0)*x17*x34))+(((-1.0)*x16*x39))))))+(((-1.0)*x15*x8)));
eerot[2]=(((x11*(((((-1.0)*x17*x39))+(((-1.0)*x16*x37))))))+((x10*x43)));
IkReal x45=((1.0)*x19);
eetrans[0]=((((-0.163941)*x9))+(((0.612)*x20))+(((-0.5723)*x27))+((x6*((((x12*x21))+(((-1.0)*x14*x45))))))+((x13*x19))+((x5*(((((-1.0)*x14*x21))+(((-1.0)*x12*x45)))))));
eerot[3]=(((x11*x44))+((x10*((((x40*x5))+((x38*x6)))))));
eerot[4]=(((x0*x8))+((x7*(((((-1.0)*x17*x35))+(((-1.0)*x16*x40)))))));
eerot[5]=(((x11*(((((-1.0)*x17*x40))+(((-1.0)*x16*x38))))))+((x10*x44)));
IkReal x46=((1.0)*x24);
eetrans[1]=((((-0.5723)*x22*x4))+(((0.612)*x1*x9))+((x6*((((x12*x22))+(((-1.0)*x14*x46))))))+((x13*x24))+((x5*(((((-1.0)*x14*x22))+(((-1.0)*x12*x46))))))+(((0.163941)*x0)));
eerot[6]=(((x10*((x33+x36))))+((x11*x42)));
eerot[7]=(x7*(((((-1.0)*x17*x30))+(((-1.0)*x16*x31)))));
eerot[8]=(((x11*(((((-1.0)*x36))+(((-1.0)*x33))))))+((x10*x42)));
eetrans[2]=((0.1273)+(((-0.612)*x4))+((x5*(((((-1.0)*x14*x3))+((x12*x2))))))+((x6*((((x14*x2))+((x12*x3))))))+(((-0.5723)*x23))+(((-1.0)*x13*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=px;
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=py;
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.1273)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x50=((0.2314)*npx);
IkReal x51=((0.2314)*npy);
IkReal x52=((0.1157)*r22);
IkReal x53=((0.1157)*r21);
IkReal x54=((-0.1157)*r20);
IkReal x55=((-1.0)*r20);
IkReal x56=((-1.0)*rxp0_2);
IkReal x57=((-0.1157)*r21);
IkReal x58=((-1.0)*r21);
IkReal x59=((-1.0)*rxp1_2);
IkReal x60=((-1.0)*npx);
IkReal x61=((-1.0)*r22);
IkReal x62=((-1.0)*npz);
matrixinvcoeffs[0]=x54;
matrixinvcoeffs[1]=x50;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x55;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x56;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x54;
matrixinvcoeffs[19]=x50;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x55;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x56;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x51;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x58;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x59;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x51;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x58;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x59;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x61;
matrixinvcoeffs[76]=x52;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x62;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x52;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x59;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x57;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x59;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x53;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x55;
matrixinvcoeffs[133]=x60;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1157)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x55;
matrixinvcoeffs[151]=x60;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x54;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x61;
matrixinvcoeffs[165]=x62;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x52;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x61;
matrixinvcoeffs[183]=x62;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1157)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x58;
matrixinvcoeffs[204]=x53;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x59;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x53;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x60;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x54;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x55;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x54;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x56;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x63=pz*pz;
IkReal x64=pp*pp;
IkReal x65=((0.2314)*pz);
IkReal x66=(pp*r21);
IkReal x67=((0.2314)*rxp0_2);
IkReal x68=((0.01338649)*r22);
IkReal x69=(gclwh9_0*pz);
IkReal x70=(gclwh4_3*r22);
IkReal x71=(pp*r20);
IkReal x72=((0.327882)*gclwh14_14);
IkReal x73=(npy*pz);
IkReal x74=((0.01338649)*r21);
IkReal x75=((0.26486044)*rxp0_2);
IkReal x76=((0.00219459455709)*r21);
IkReal x77=(npz*pz);
IkReal x78=(pp*r22);
IkReal x79=(gclwh15_1*r20);
IkReal x80=(gclwh14_8*r20);
IkReal x81=(gclwh13_9*r21);
IkReal x82=((0.27404702)*rxp2_2);
IkReal x83=((0.02677298)*r22);
IkReal x84=((2.0)*gclwh11_10);
IkReal x85=((0.26486044)*rxp2_2);
IkReal x86=(gclwh14_2*pz);
IkReal x87=(gclwh11_0*pz);
IkReal x88=((1.0)*pz);
IkReal x89=(gclwh5_15*rxp2_2);
IkReal x90=((0.00219459455709)*r20);
IkReal x91=((2.0)*gclwh4_11);
IkReal x92=((0.000201684224787892)*r20);
IkReal x93=((4.7372)*npx);
IkReal x94=(gclwh13_1*r21);
IkReal x95=((0.2314)*rxp2_2);
IkReal x96=(gclwh11_13*r22);
IkReal x97=((0.01338649)*r20);
IkReal x98=(npx*pz);
IkReal x99=((0.327882)*gclwh15_15);
IkReal x100=((0.327675509152703)*rxp0_2);
IkReal x101=((0.9256)*rxp2_2);
IkReal x102=((0.0379359474)*rxp1_2);
IkReal x103=(gclwh4_14*rxp2_2);
IkReal x104=(gclwh13_0*rxp1_2);
IkReal x105=(gclwh12_8*r21);
IkReal x106=(gclwh6_2*r21);
IkReal x107=(gclwh14_11*rxp0_2);
IkReal x108=((0.1517437896)*rxp1_2);
IkReal x109=((0.031707240214)*r22);
IkReal x110=((0.015322176454)*r22);
IkReal x111=((0.015322176454)*r20);
IkReal x112=((0.001062887306)*r22);
IkReal x113=((2.0)*gclwh9_10);
IkReal x114=(gclwh12_3*rxp1_2);
IkReal x115=((0.2832336)*rxp2_2);
IkReal x116=((0.02677298)*r20);
IkReal x117=(gclwh6_12*r21);
IkReal x118=(gclwh12_3*r21);
IkReal x119=(gclwh15_9*r20);
IkReal x120=((0.05354596)*r20);
IkReal x121=((0.02677298)*r21);
IkReal x122=((0.0379359474)*rxp0_2);
IkReal x123=(gclwh5_0*rxp2_2);
IkReal x124=((0.00918658)*rxp2_2);
IkReal x125=(gclwh4_3*rxp2_2);
IkReal x126=((0.031707240214)*r21);
IkReal x127=((2.0)*gclwh10_11);
IkReal x128=((4.0)*gclwh8_11);
IkReal x129=((2.0)*pp);
IkReal x130=((4.0)*gclwh11_10);
IkReal x131=(gclwh13_9*rxp1_2);
IkReal x132=((0.00918658)*rxp0_2);
IkReal x133=((0.015853620107)*r22);
IkReal x134=(gclwh7_13*r21);
IkReal x135=(gclwh1_2*pz);
IkReal x136=((2.0)*gclwh7_10);
IkReal x137=((0.030644352908)*r20);
IkReal x138=((0.2314)*rxp1_2);
IkReal x139=(gclwh5_1*rxp2_2);
IkReal x140=(gclwh12_2*rxp1_2);
IkReal x141=(gclwh15_0*pz);
IkReal x142=(gclwh15_9*rxp0_2);
IkReal x143=(gclwh4_2*rxp2_2);
IkReal x144=(gclwh5_9*r22);
IkReal x145=(gclwh12_8*rxp1_2);
IkReal x146=((0.4628)*rxp1_2);
IkReal x147=(gclwh7_13*rxp1_2);
IkReal x148=((0.26486044)*rxp1_2);
IkReal x149=(gclwh6_2*rxp1_2);
IkReal x150=((0.05354596)*r21);
IkReal x151=(gclwh8_2*pz);
IkReal x152=((0.05354596)*r22);
IkReal x153=((4.0)*gclwh9_10);
IkReal x154=(gclwh5_0*pz);
IkReal x155=((0.54809404)*rxp0_2);
IkReal x156=(gclwh4_2*pz);
IkReal x157=((0.015322176454)*r21);
IkReal x158=(gclwh9_0*r20);
IkReal x159=(gclwh15_15*rxp0_2);
IkReal x160=((4.0)*gclwh7_10);
IkReal x161=(gclwh10_2*pz);
IkReal x162=((0.327882)*gclwh12_14);
IkReal x163=(gclwh10_12*r22);
IkReal x164=(gclwh13_1*rxp1_2);
IkReal x165=((0.4628)*rxp0_2);
IkReal x166=(gclwh13_0*pz);
IkReal x167=((0.0189560282044839)*r20);
IkReal x168=((0.031707240214)*r20);
IkReal x169=(gclwh8_12*r20);
IkReal x170=((2.0)*gclwh6_11);
IkReal x171=((2.2892)*npx);
IkReal x172=(gclwh2_1*r21);
IkReal x173=((2.0)*gclwh12_11);
IkReal x174=((0.00438918911418)*r21);
IkReal x175=(gclwh14_14*rxp0_2);
IkReal x176=((0.27404702)*rxp0_2);
IkReal x177=((0.327882)*gclwh5_15);
IkReal x178=((0.0379359474)*rxp2_2);
IkReal x179=((2.0)*gclwh8_11);
IkReal x180=((4.0)*gclwh10_11);
IkReal x181=(gclwh3_3*r21);
IkReal x182=(gclwh9_13*r20);
IkReal x183=(gclwh5_1*r22);
IkReal x184=((0.00438918911418)*r22);
IkReal x185=((2.0)*gclwh5_10);
IkReal x186=(gclwh6_12*rxp1_2);
IkReal x187=((2.0)*gclwh15_10);
IkReal x188=((0.0758718948)*rxp1_2);
IkReal x189=((0.327882)*gclwh4_14);
IkReal x190=((0.00438918911418)*r20);
IkReal x191=((0.4628)*rxp2_2);
IkReal x192=((4.0)*gclwh6_11);
IkReal x193=((0.327882)*gclwh13_15);
IkReal x194=((0.01837316)*rxp0_2);
IkReal x195=((0.9256)*rxp1_2);
IkReal x196=((2.0)*gclwh13_10);
IkReal x197=((0.0034863305927034)*rxp0_2);
IkReal x198=((0.00219459455709)*r22);
IkReal x199=(gclwh14_8*rxp0_2);
IkReal x200=(gclwh4_8*r22);
IkReal x201=((0.02677298)*rxp2_2);
IkReal x202=((2.0)*gclwh14_11);
IkReal x203=(gclwh14_14*x122);
IkReal x204=(gclwh6_5*x76);
IkReal x205=(gclwh10_5*x198);
IkReal x206=(gclwh12_14*x102);
IkReal x207=(gclwh8_5*x90);
IkReal x208=((0.0379359474)*x103);
IkReal x209=(gclwh4_11*x95);
IkReal x210=(gclwh12_11*x138);
IkReal x211=(gclwh6_11*x74);
IkReal x212=(gclwh4_8*x201);
IkReal x213=((0.02677298)*x145);
IkReal x214=(gclwh14_11*x67);
IkReal x215=(gclwh10_11*x68);
IkReal x216=(gclwh8_11*x97);
IkReal x217=((0.02677298)*x199);
IkReal x218=(gclwh11_10*x68);
IkReal x219=(gclwh9_10*x97);
IkReal x220=((0.02677298)*x131);
IkReal x221=(gclwh15_10*x67);
IkReal x222=(gclwh5_9*x201);
IkReal x223=(gclwh5_10*x95);
IkReal x224=(gclwh13_10*x138);
IkReal x225=((0.02677298)*x142);
IkReal x226=(gclwh7_10*x74);
IkReal x227=(gclwh15_15*x122);
IkReal x228=(gclwh7_7*x76);
IkReal x229=(gclwh9_7*x90);
IkReal x230=((0.0379359474)*x89);
IkReal x231=(gclwh13_15*x102);
IkReal x232=(gclwh11_7*x198);
IkReal x233=(gclwh8_5*x122);
IkReal x234=(gclwh14_14*x90);
IkReal x235=(gclwh10_5*x178);
IkReal x236=(gclwh4_14*x198);
IkReal x237=(gclwh6_5*x102);
IkReal x238=(gclwh12_14*x76);
IkReal x239=(gclwh4_11*x68);
IkReal x240=(gclwh12_11*x74);
IkReal x241=((0.001548816893)*x105);
IkReal x242=(gclwh8_11*x67);
IkReal x243=((0.001548816893)*x200);
IkReal x244=(gclwh10_11*x95);
IkReal x245=(gclwh14_11*x97);
IkReal x246=(gclwh6_11*x138);
IkReal x247=((0.001548816893)*x80);
IkReal x248=(gclwh5_10*x68);
IkReal x249=((0.001548816893)*x119);
IkReal x250=(gclwh9_10*x67);
IkReal x251=(gclwh11_10*x95);
IkReal x252=(gclwh13_10*x74);
IkReal x253=((0.001548816893)*x144);
IkReal x254=((0.001548816893)*x81);
IkReal x255=(gclwh7_10*x138);
IkReal x256=(gclwh15_10*x97);
IkReal x257=(gclwh7_7*x102);
IkReal x258=(gclwh5_15*x198);
IkReal x259=(gclwh13_15*x76);
IkReal x260=(gclwh9_7*x122);
IkReal x261=(gclwh11_7*x178);
IkReal x262=(gclwh15_15*x90);
IkReal x263=((0.4628)*x107);
IkReal x264=(gclwh10_11*x83);
IkReal x265=(gclwh8_11*x116);
IkReal x266=((0.0758718948)*x175);
IkReal x267=((0.0758718948)*x103);
IkReal x268=(gclwh12_14*x188);
IkReal x269=(gclwh4_11*x191);
IkReal x270=(gclwh6_11*x121);
IkReal x271=(gclwh12_11*x146);
IkReal x272=(gclwh13_15*x188);
IkReal x273=((0.0758718948)*x89);
IkReal x274=((0.0758718948)*x159);
IkReal x275=(gclwh15_10*x165);
IkReal x276=(gclwh11_10*x83);
IkReal x277=(gclwh9_10*x116);
IkReal x278=(gclwh13_10*x146);
IkReal x279=(gclwh7_10*x121);
IkReal x280=(gclwh5_10*x191);
IkReal x281=(gclwh6_11*x146);
IkReal x282=(gclwh14_11*x116);
IkReal x283=(gclwh14_14*x190);
IkReal x284=(gclwh4_14*x184);
IkReal x285=(gclwh12_14*x174);
IkReal x286=(pp*x138);
IkReal x287=((2.0)*x63);
IkReal x288=((1.0)*x64);
IkReal x289=(r20*x64);
IkReal x290=((0.163941)*gclwh6_5*x66);
IkReal x291=((0.327882)*gclwh10_5*x77);
IkReal x292=((0.327882)*gclwh8_5*x98);
IkReal x293=((0.163941)*gclwh10_5*x78);
IkReal x294=((0.327882)*gclwh6_5*x73);
IkReal x295=((0.163941)*gclwh8_5*x71);
IkReal x296=(gclwh14_2*rxp0_2*x65);
IkReal x297=((0.2314)*pp*x114);
IkReal x298=(x161*x68);
IkReal x299=(x127*x77);
IkReal x300=(x179*x98);
IkReal x301=(x161*x78);
IkReal x302=(gclwh4_3*pp*x95);
IkReal x303=(x151*x71);
IkReal x304=(x151*x97);
IkReal x305=(x170*x73);
IkReal x306=(gclwh14_3*pp*x67);
IkReal x307=(x143*x65);
IkReal x308=(x140*x65);
IkReal x309=(gclwh6_2*pz*x74);
IkReal x310=(x68*x87);
IkReal x311=(gclwh13_1*x286);
IkReal x312=(gclwh15_0*rxp0_2*x65);
IkReal x313=(gclwh5_1*pp*x95);
IkReal x314=(x69*x97);
IkReal x315=(x78*x87);
IkReal x316=(x136*x73);
IkReal x317=(x69*x71);
IkReal x318=(gclwh7_0*pz*x74);
IkReal x319=(x77*x84);
IkReal x320=(x104*x65);
IkReal x321=(x113*x98);
IkReal x322=(gclwh15_1*pp*x67);
IkReal x323=(x123*x65);
IkReal x324=((0.327882)*gclwh11_7*x77);
IkReal x325=((0.163941)*gclwh7_7*x66);
IkReal x326=((0.327882)*gclwh9_7*x98);
IkReal x327=((0.163941)*gclwh11_7*x78);
IkReal x328=((0.327882)*gclwh7_7*x73);
IkReal x329=((0.163941)*gclwh9_7*x71);
IkReal x330=((0.163941)*gclwh14_14*x71);
IkReal x331=(x162*x73);
IkReal x332=(x189*x77);
IkReal x333=((0.163941)*gclwh12_14*x66);
IkReal x334=((0.163941)*gclwh4_14*x78);
IkReal x335=(x72*x98);
IkReal x336=(x71*x86);
IkReal x337=((0.1157)*gclwh4_8*x78);
IkReal x338=(x149*x65);
IkReal x339=(x118*x64);
IkReal x340=(x135*x97);
IkReal x341=((0.1157)*gclwh12_8*x66);
IkReal x342=(x86*x97);
IkReal x343=(gclwh14_8*npx*x65);
IkReal x344=(x181*x64);
IkReal x345=(gclwh1_3*x289);
IkReal x346=(x202*x98);
IkReal x347=(gclwh3_2*pz*x74);
IkReal x348=(x64*x70);
IkReal x349=(gclwh12_2*pz*x74);
IkReal x350=(x77*x91);
IkReal x351=(gclwh12_8*npy*x65);
IkReal x352=(gclwh10_2*rxp2_2*x65);
IkReal x353=(x156*x68);
IkReal x354=(gclwh4_8*npz*x65);
IkReal x355=(x173*x73);
IkReal x356=((0.1157)*gclwh14_8*x71);
IkReal x357=(gclwh8_2*rxp0_2*x65);
IkReal x358=(gclwh2_0*pz*x74);
IkReal x359=(x64*x79);
IkReal x360=(gclwh11_0*rxp2_2*x65);
IkReal x361=(x154*x78);
IkReal x362=(x166*x66);
IkReal x363=(gclwh0_0*pz*x97);
IkReal x364=(gclwh5_9*npz*x65);
IkReal x365=(x154*x68);
IkReal x366=(x166*x74);
IkReal x367=(gclwh13_9*npy*x65);
IkReal x368=((0.1157)*gclwh15_9*x71);
IkReal x369=(x187*x98);
IkReal x370=(gclwh9_0*rxp0_2*x65);
IkReal x371=(x172*x64);
IkReal x372=(gclwh0_1*x289);
IkReal x373=((0.1157)*gclwh5_9*x78);
IkReal x374=(x185*x77);
IkReal x375=((0.1157)*gclwh13_9*x66);
IkReal x376=(x196*x73);
IkReal x377=(gclwh7_0*rxp1_2*x65);
IkReal x378=(gclwh15_9*npx*x65);
IkReal x379=(x141*x97);
IkReal x380=((0.163941)*gclwh13_15*x66);
IkReal x381=((0.163941)*gclwh5_15*x78);
IkReal x382=(x98*x99);
IkReal x383=(x193*x73);
IkReal x384=((0.163941)*gclwh15_15*x71);
IkReal x385=(x177*x77);
IkReal x386=(x179*x71);
IkReal x387=(x127*x78);
IkReal x388=(x192*x73);
IkReal x389=(x128*x98);
IkReal x390=(x170*x66);
IkReal x391=(x180*x77);
IkReal x392=(x78*x84);
IkReal x393=(x160*x73);
IkReal x394=(x113*x71);
IkReal x395=(x136*x66);
IkReal x396=(x153*x98);
IkReal x397=(x130*x77);
IkReal x398=(x202*x71);
IkReal x399=((4.0)*gclwh12_11*x73);
IkReal x400=((4.0)*gclwh4_11*x77);
IkReal x401=(x71*x72);
IkReal x402=((0.655764)*gclwh12_14*x73);
IkReal x403=((0.655764)*gclwh4_14*x77);
IkReal x404=((0.655764)*gclwh14_14*x98);
IkReal x405=(x162*x66);
IkReal x406=(x189*x78);
IkReal x407=(gclwh6_2*npy*x287);
IkReal x408=(gclwh6_2*x66*x88);
IkReal x409=(gclwh10_2*npz*x287);
IkReal x410=(gclwh8_2*npx*x287);
IkReal x411=(gclwh7_0*npy*x287);
IkReal x412=(gclwh9_0*npx*x287);
IkReal x413=(gclwh11_0*npz*x287);
IkReal x414=(gclwh7_0*x66*x88);
IkReal x415=(gclwh12_2*npy*x287);
IkReal x416=(gclwh3_2*npy*x287);
IkReal x417=(gclwh1_2*npx*x287);
IkReal x418=(gclwh14_3*x129*x98);
IkReal x419=(gclwh4_2*npz*x287);
IkReal x420=(gclwh4_3*x129*x77);
IkReal x421=(gclwh12_2*x66*x88);
IkReal x422=(gclwh1_2*x71*x88);
IkReal x423=(gclwh3_3*x129*x73);
IkReal x424=(gclwh4_2*x78*x88);
IkReal x425=(gclwh1_3*x129*x98);
IkReal x426=(gclwh3_2*x66*x88);
IkReal x427=(gclwh12_3*x129*x73);
IkReal x428=(gclwh14_2*npx*x287);
IkReal x429=(gclwh14_3*r20*x288);
IkReal x430=(gclwh0_0*npx*x287);
IkReal x431=(gclwh2_0*npy*x287);
IkReal x432=(gclwh5_1*x129*x77);
IkReal x433=(gclwh13_1*x129*x73);
IkReal x434=(gclwh15_0*npx*x287);
IkReal x435=(gclwh2_1*x129*x73);
IkReal x436=(gclwh0_1*x129*x98);
IkReal x437=(gclwh5_0*npz*x287);
IkReal x438=(gclwh13_0*npy*x287);
IkReal x439=(gclwh0_0*x71*x88);
IkReal x440=(gclwh15_0*x71*x88);
IkReal x441=(gclwh2_0*x66*x88);
IkReal x442=(x288*x94);
IkReal x443=(x183*x288);
IkReal x444=(gclwh15_1*x129*x98);
IkReal x445=(x230+x231);
IkReal x446=(x261+x260);
IkReal x447=(x267+x268);
IkReal x448=(x272+x273);
IkReal x449=(x206+x208);
IkReal x450=(x233+x235);
IkReal x451=(x305+x214+x215+x216);
IkReal x452=(x316+x218+x219+x221);
IkReal x453=(x350+x355+x246+x245);
IkReal x454=(x376+x374+x255+x256);
IkReal x455=(x324+x325+x326+x228);
IkReal x456=(x384+x385+x383+x262);
IkReal x457=(x204+x290+x291+x292);
IkReal x458=(x283+x401+x403+x402);
IkReal x459=(x332+x331+x330+x234);
IkReal x460=(x346+x239+x242+x240+x244);
IkReal x461=(x369+x250+x251+x252+x248);
IkReal x462=(x321+x319+x223+x224+x226);
IkReal x463=(x300+x210+x211+x209+x299);
IkReal x464=(x382+x380+x381+x258+x259);
IkReal x465=(x327+x328+x329+x229+x232);
IkReal x466=(x207+x205+x293+x294+x295);
IkReal x467=(x399+x398+x282+x281+x400);
IkReal x468=(x285+x284+x405+x404+x406);
IkReal x469=(x333+x335+x334+x238+x236);
IkReal x470=(x389+x391+x390+x269+x270+x271);
IkReal x471=(x395+x397+x396+x278+x279+x280);
IkReal x472=(x394+x393+x392+x276+x277+x275);
IkReal x473=(x386+x387+x388+x265+x264+x263);
IkReal x474=(((gclwh10_11*x191))+((x78*x91))+((gclwh4_11*x83))+((x173*x66))+((gclwh8_11*x165))+(((4.0)*gclwh14_11*x98))+((gclwh12_11*x121)));
IkReal x475=(x320+x322+x323+x318+x225+x412+x413+x414);
IkReal x476=(x308+x309+x306+x307+x217+x409+x408+x410);
IkReal x477=(x304+x302+x303+x301+x212+x213+x298+x296+x297+x407);
IkReal x478=(x315+x314+x317+x311+x310+x313+x312+x220+x222+x411);
IkReal x479=(x379+x378+x377+x375+x373+x254+x253+x438+x439+x435+x436+x437+x444+x441+x440+x443+x442);
IkReal x480=(x339+x338+x337+x336+x342+x343+x340+x341+x347+x344+x345+x348+x243+x241+x416+x417+x415+x418+x419+x65);
IkReal x481=(x351+x353+x352+x354+x357+x356+x349+x247+x429+x428+x427+x426+x425+x424+x423+x422+x421+x420);
IkReal x482=(x359+x358+x372+x371+x370+x368+x360+x361+x362+x363+x364+x365+x366+x367+x249+x430+x431+x432+x433+x434+x65);
op[0]=((((-1.0)*gclwh10_12*x133))+(((0.015853620107)*x117))+(((2.3686)*gclwh8_12*x98))+(((-1.0)*x466))+(((-0.27404702)*x145))+(((-1.0)*gclwh4_8*x82))+(((-1.0)*x203))+(((2.3686)*gclwh10_12*x77))+x449+x457+(((-2.3686)*gclwh6_12*x73))+((gclwh14_8*x176))+(((-1.1843)*gclwh8_12*x71))+(((-0.015853620107)*x169))+(((-1.1843)*gclwh10_12*x78))+(((1.1843)*gclwh6_12*x66)));
op[1]=((((-0.327675509152703)*x114))+(((-0.327675509152703)*x125))+((gclwh14_3*x100))+(((-1.0)*x476))+((gclwh10_11*x78))+(((-1.0)*x463))+(((-1.0)*gclwh6_11*x66))+x451+x477+((gclwh8_11*x71)));
op[2]=((-0.3752937372)+(((-1.0)*x470))+x473);
op[3]=((((-1.0)*x447))+(((1.1446)*gclwh10_2*x78))+(((-1.0)*gclwh4_2*x85))+(((-1.1446)*gclwh6_2*x66))+((gclwh14_2*x75))+((gclwh8_2*x111))+(((0.2832336)*x145))+(((1.1446)*gclwh8_2*x71))+(((2.2892)*gclwh6_2*x73))+(((-2.2892)*gclwh8_2*x98))+(((-0.015322176454)*x106))+x266+((gclwh4_8*x115))+(((-0.26486044)*x140))+(((-0.2832336)*x199))+(((-2.2892)*gclwh10_2*x77))+((gclwh10_2*x110)));
op[4]=((((-1.0)*gclwh14_8*x132))+(((-1.0)*x449))+(((-0.0397)*gclwh8_12*x71))+(((0.0397)*gclwh6_12*x66))+(((-0.0397)*gclwh10_12*x78))+(((0.00918658)*x145))+(((-0.000531443653)*x163))+(((-0.000531443653)*x169))+(((-1.0)*x466))+(((0.000531443653)*x117))+(((-0.0794)*gclwh6_12*x73))+(((0.0794)*gclwh10_12*x77))+x203+x457+(((0.0794)*gclwh8_12*x98))+((gclwh4_8*x124)));
op[5]=((((-1.0)*gclwh10_11*x78))+(((-1.0)*x476))+(((-1.0)*x451))+x463+x477+(((-0.0034863305927034)*x114))+((gclwh14_3*x197))+((gclwh6_11*x66))+(((-0.0034863305927034)*x125))+(((-1.0)*gclwh8_11*x71)));
op[6]=(((gclwh7_10*x66))+(((-1.0)*x475))+(((-0.327675509152703)*x139))+((gclwh15_1*x100))+(((-1.0)*gclwh11_10*x78))+(((-1.0)*x452))+x462+x478+(((-0.327675509152703)*x164))+(((-1.0)*gclwh9_10*x71)));
op[7]=((((-1.1843)*gclwh9_13*x71))+(((2.3686)*gclwh11_13*x77))+(((0.015853620107)*x134))+(((2.3686)*gclwh9_13*x98))+(((-1.0)*x465))+(((-1.0)*gclwh5_9*x82))+(((1.1843)*gclwh7_13*x66))+(((0.27404702)*x142))+x445+x455+(((-1.1843)*gclwh11_13*x78))+(((-0.015853620107)*x182))+(((-0.27404702)*x131))+(((-2.3686)*gclwh7_13*x73))+(((-0.015853620107)*x96))+(((-1.0)*x227)));
op[8]=((((-1.0)*gclwh5_9*x115))+(((0.2832336)*x142))+((gclwh11_0*x110))+(((-0.2832336)*x131))+x448+(((-1.0)*gclwh7_0*x157))+(((1.1446)*gclwh11_0*x78))+(((-1.0)*x274))+((gclwh9_0*x111))+(((-1.0)*gclwh5_0*x85))+(((-1.1446)*gclwh7_0*x66))+(((1.1446)*gclwh9_0*x71))+(((-1.0)*x171*x69))+((gclwh15_0*x75))+(((2.2892)*gclwh7_0*x73))+(((-0.26486044)*x104))+(((-2.2892)*gclwh11_0*x77)));
op[9]=((-0.3752937372)+(((-1.0)*x471))+x472);
op[10]=(((gclwh11_10*x78))+(((-1.0)*x475))+(((-1.0)*x462))+(((-1.0)*gclwh7_10*x66))+((gclwh15_1*x197))+x452+x478+(((-0.0034863305927034)*x164))+((gclwh9_10*x71))+(((-0.0034863305927034)*x139)));
op[11]=((((-1.0)*x445))+(((0.0794)*gclwh9_13*x98))+(((-0.0794)*gclwh7_13*x73))+((gclwh5_9*x124))+(((0.0397)*gclwh7_13*x66))+(((0.000531443653)*x134))+(((0.00918658)*x131))+(((-1.0)*x465))+(((-0.000531443653)*x182))+x227+x455+(((-0.0397)*gclwh11_13*x78))+(((-1.0)*gclwh15_9*x132))+(((-0.000531443653)*x96))+(((-0.0397)*gclwh9_13*x71))+(((0.0794)*gclwh11_13*x77)));
op[12]=((((2.3686)*gclwh12_8*x73))+(((-0.015853620107)*x105))+(((0.015853620107)*x80))+(((2.3686)*gclwh4_8*x77))+(((-2.3686)*gclwh14_8*x98))+(((-0.27404702)*x186))+(((-1.0)*x459))+(((-1.0)*gclwh4_8*x133))+((gclwh10_12*x82))+(((-1.0)*x237))+x450+x469+((gclwh8_12*x176))+(((-1.1843)*gclwh4_8*x78))+(((-1.1843)*gclwh12_8*x66))+(((1.1843)*gclwh14_8*x71)));
op[13]=((-1.429443141481)+(((-0.0189560282044839)*x70))+(((-1.0)*gclwh12_11*x66))+(((0.0189560282044839)*x181))+(((-1.429443141481)*gclwh1_3*x71))+(((-1.0)*x481))+(((2.832113302962)*gclwh4_3*x77))+(((2.832113302962)*gclwh1_3*x98))+(((-1.429443141481)*gclwh3_3*x66))+(((1.402670161481)*gclwh14_3*x71))+(((-1.0)*x460))+(((2.832113302962)*gclwh3_3*x73))+(((-0.0189560282044839)*x118))+x480+x453+((gclwh14_11*x71))+(((-2.832113302962)*gclwh14_3*x98))+((gclwh1_3*x167))+(((2.832113302962)*gclwh12_3*x73))+((gclwh14_3*x167))+(((-1.402670161481)*gclwh12_3*x66))+(((-1.402670161481)*pp*x70))+(((-1.0)*gclwh4_11*x78)));
op[14]=((-0.147786722962)+(((-1.0)*x474))+x467);
op[15]=((((1.224)*gclwh12_8*x66))+(((-2.448)*gclwh12_8*x73))+(((-1.1446)*gclwh4_2*x78))+(((0.01638506376)*x200))+(((1.224)*gclwh4_8*x78))+(((-1.0)*gclwh12_2*x157))+(((-1.0)*gclwh4_2*x110))+(((-1.0)*x171*x86))+(((-0.01638506376)*x80))+(((1.1446)*gclwh14_2*x71))+((gclwh14_2*x111))+(((-1.0)*x468))+(((-1.0)*gclwh10_2*x85))+(((-2.448)*gclwh4_8*x77))+(((-1.1446)*gclwh3_2*x66))+x458+(((-1.1446)*gclwh12_2*x66))+(((2.2892)*gclwh4_2*x77))+(((2.2892)*gclwh3_2*x73))+((gclwh1_2*x111))+((gclwh3_2*x157))+(((2.2892)*gclwh12_2*x73))+(((-1.224)*gclwh14_8*x71))+(((2.448)*gclwh14_8*x98))+(((0.01638506376)*x105))+(((-1.0)*gclwh8_2*x75))+((gclwh6_2*x148))+(((2.2892)*gclwh1_2*x98))+(((-1.1446)*gclwh1_2*x71)));
op[16]=(((gclwh8_12*x132))+(((-0.00918658)*x186))+(((-0.0794)*gclwh4_8*x77))+(((-0.0794)*gclwh12_8*x73))+(((0.000531443653)*x105))+((gclwh10_12*x124))+(((0.000531443653)*x200))+(((-1.0)*x469))+(((-1.0)*x237))+(((0.0397)*gclwh4_8*x78))+x459+x450+(((-0.0397)*gclwh14_8*x71))+(((0.0397)*gclwh12_8*x66))+(((-0.000531443653)*x80))+(((0.0794)*gclwh14_8*x98)));
op[17]=((0.028452741481)+(((-0.028452741481)*gclwh1_3*x71))+(((-0.001679761481)*gclwh12_3*x66))+(((-1.0)*x481))+(((-0.000201684224787892)*x118))+(((0.000201684224787892)*x181))+(((-0.028452741481)*gclwh3_3*x66))+(((0.030132502962)*gclwh4_3*x77))+(((0.030132502962)*gclwh12_3*x73))+(((-1.0)*x453))+x480+x460+(((0.030132502962)*gclwh3_3*x73))+(((0.001679761481)*gclwh14_3*x71))+((gclwh1_3*x92))+((gclwh14_3*x92))+(((-0.030132502962)*gclwh14_3*x98))+(((-0.001679761481)*pp*x70))+(((0.030132502962)*gclwh1_3*x98))+(((-0.000201684224787892)*x70))+((gclwh12_11*x66))+(((-1.0)*gclwh14_11*x71))+((gclwh4_11*x78)));
op[18]=((1.429443141481)+(((1.402670161481)*gclwh5_1*x78))+(((2.832113302962)*gclwh0_1*x98))+(((-0.0189560282044839)*x79))+(((-1.402670161481)*gclwh15_1*x71))+(((0.0189560282044839)*x183))+(((0.0189560282044839)*x172))+(((-1.0)*x479))+(((2.832113302962)*gclwh2_1*x73))+(((-1.0)*x461))+(((-1.429443141481)*gclwh0_1*x71))+(((-1.0)*gclwh5_10*x78))+(((-1.429443141481)*gclwh2_1*x66))+x482+x454+((gclwh0_1*x167))+(((-2.832113302962)*gclwh13_1*x73))+(((-2.832113302962)*gclwh5_1*x77))+(((-1.0)*gclwh13_10*x66))+((gclwh15_10*x71))+(((2.832113302962)*gclwh15_1*x98))+(((1.402670161481)*gclwh13_1*x66))+(((0.0189560282044839)*x94)));
op[19]=((((-1.0)*x446))+(((-0.015853620107)*x119))+(((-2.3686)*gclwh5_9*x77))+(((-1.1843)*gclwh15_9*x71))+(((1.1843)*gclwh13_9*x66))+((gclwh5_9*x133))+(((0.015853620107)*x81))+(((-1.0)*gclwh9_13*x176))+(((-1.0)*x464))+(((-1.0)*gclwh11_13*x82))+x257+(((0.27404702)*x147))+x456+(((-2.3686)*gclwh13_9*x73))+(((1.1843)*gclwh5_9*x78))+(((2.3686)*gclwh15_9*x98)));
op[20]=((((-1.1446)*gclwh0_0*x71))+((x71*x99))+((gclwh0_0*x111))+(((0.01638506376)*x144))+(((-2.448)*gclwh13_9*x73))+(((2.2892)*gclwh2_0*x73))+(((-2.448)*gclwh5_9*x77))+(((-1.0)*gclwh15_0*x111))+(((0.01638506376)*x81))+((gclwh2_0*x157))+(((-1.224)*gclwh15_9*x71))+(((1.224)*gclwh13_9*x66))+(((2.448)*gclwh15_9*x98))+(((1.224)*gclwh5_9*x78))+(((1.1446)*gclwh13_0*x66))+(((-1.0)*gclwh13_15*x174))+(((-1.1446)*gclwh2_0*x66))+(((-1.0)*gclwh7_0*x148))+(((-2.2892)*gclwh13_0*x73))+((gclwh11_0*x85))+(((0.655764)*gclwh5_15*x77))+(((-1.1446)*gclwh15_0*x71))+(((-2.2892)*gclwh5_0*x77))+(((-1.0)*x177*x78))+(((-1.0)*x193*x66))+((gclwh15_15*x190))+(((0.655764)*gclwh13_15*x73))+((gclwh13_0*x157))+(((2.2892)*gclwh15_0*x98))+(((-1.0)*gclwh5_15*x184))+((gclwh9_0*x75))+(((2.2892)*gclwh0_0*x98))+(((1.1446)*gclwh5_0*x78))+((gclwh5_0*x110))+(((-0.01638506376)*x119))+(((-0.655764)*gclwh15_15*x98)));
op[21]=((-0.147786722962)+(((4.0)*gclwh15_10*x98))+((gclwh5_10*x83))+((gclwh11_10*x191))+((gclwh9_10*x165))+(((-4.0)*gclwh13_10*x73))+((x185*x78))+((x196*x66))+((gclwh13_10*x121))+(((-1.0)*gclwh7_10*x146))+(((-1.0)*gclwh15_10*x116))+(((-4.0)*gclwh5_10*x77))+(((-1.0)*x187*x71)));
op[22]=((-0.028452741481)+((gclwh13_10*x66))+(((0.001679761481)*gclwh5_1*x78))+(((0.000201684224787892)*x172))+(((0.001679761481)*gclwh13_1*x66))+(((0.000201684224787892)*x183))+(((-0.028452741481)*gclwh2_1*x66))+(((-1.0)*x479))+((gclwh0_1*x92))+(((0.000201684224787892)*x94))+((gclwh5_10*x78))+(((-1.0)*x454))+(((0.030132502962)*gclwh2_1*x73))+(((0.030132502962)*gclwh15_1*x98))+(((0.030132502962)*gclwh0_1*x98))+(((-0.001679761481)*gclwh15_1*x71))+x482+x461+(((-0.030132502962)*gclwh5_1*x77))+(((-0.028452741481)*gclwh0_1*x71))+(((-0.000201684224787892)*x79))+(((-1.0)*gclwh15_10*x71))+(((-0.030132502962)*gclwh13_1*x73)));
op[23]=((((-1.0)*x446))+(((-1.0)*gclwh11_13*x124))+(((-0.000531443653)*x144))+(((0.00918658)*x147))+(((-0.0397)*gclwh13_9*x66))+(((0.000531443653)*x119))+(((-1.0)*x456))+(((0.0794)*gclwh5_9*x77))+x257+x464+(((-1.0)*gclwh9_13*x132))+(((-0.0794)*gclwh15_9*x98))+(((0.0794)*gclwh13_9*x73))+(((-0.000531443653)*x81))+(((0.0397)*gclwh15_9*x71))+(((-0.0397)*gclwh5_9*x78)));
op[24]=((-0.7766213052)+(((-1.0)*x470))+x473);
op[25]=((((2.3686)*gclwh10_2*x78))+(((-1.0)*x151*x93))+(((-1.0)*x447))+(((-0.031707240214)*x106))+((gclwh8_2*x168))+x266+((gclwh14_2*x155))+(((4.7372)*gclwh6_2*x73))+(((2.3686)*gclwh8_2*x71))+(((-4.7372)*gclwh10_2*x77))+((gclwh10_2*x109))+(((-2.3686)*gclwh6_2*x66))+(((-0.54809404)*x140))+(((-0.54809404)*x143)));
op[26]=(((gclwh8_12*x137))+(((2.2892)*gclwh8_12*x71))+(((0.030644352908)*x163))+(((-4.5784)*gclwh8_12*x98))+(((-0.030644352908)*x117))+(((-4.5784)*gclwh10_12*x77))+(((-1.0)*gclwh12_14*x108))+(((0.1517437896)*x175))+(((-0.1517437896)*x103))+(((2.2892)*gclwh10_12*x78))+(((-2.2892)*gclwh6_12*x66))+(((4.5784)*gclwh6_12*x73)));
op[27]=((((8.0)*gclwh10_11*x77))+(((-1.0)*gclwh8_11*x120))+(((-1.0)*x128*x71))+((gclwh4_11*x101))+(((8.0)*gclwh8_11*x98))+(((-0.9256)*x107))+(((-1.0)*gclwh10_11*x152))+((x192*x66))+((gclwh12_11*x195))+(((-8.0)*gclwh6_11*x73))+(((-1.0)*x180*x78))+((gclwh6_11*x150)));
op[28]=((-0.0260338308)+(((-1.0)*x473))+x470);
op[29]=((((0.0794)*gclwh8_2*x71))+(((0.1588)*gclwh6_2*x73))+(((-0.01837316)*x143))+(((-0.01837316)*x140))+(((-0.1588)*gclwh8_2*x98))+x447+(((-0.1588)*gclwh10_2*x77))+(((0.0794)*gclwh10_2*x78))+(((-0.001062887306)*x106))+(((0.001062887306)*gclwh8_2*r20))+(((-0.0794)*gclwh6_2*x66))+(((-1.0)*x266))+((gclwh14_2*x194))+((gclwh10_2*x112)));
op[30]=((((2.3686)*gclwh11_0*x78))+(((0.031707240214)*x158))+(((-0.54809404)*x104))+(((-1.0)*gclwh7_0*x126))+((gclwh11_0*x109))+(((-0.54809404)*x123))+(((2.3686)*gclwh9_0*x71))+x448+(((-2.3686)*gclwh7_0*x66))+((gclwh15_0*x155))+(((-1.0)*x274))+(((-4.7372)*gclwh11_0*x77))+(((4.7372)*gclwh7_0*x73))+(((-1.0)*x69*x93)));
op[31]=((-0.7766213052)+(((-1.0)*x471))+x472);
op[32]=(((x153*x71))+(((-1.0)*x160*x66))+((gclwh11_10*x152))+((x130*x78))+(((-1.0)*gclwh13_10*x195))+(((-8.0)*gclwh11_10*x77))+(((8.0)*gclwh7_10*x73))+(((-1.0)*gclwh7_10*x150))+(((0.9256)*gclwh15_10*rxp0_2))+(((-8.0)*gclwh9_10*x98))+((gclwh9_10*x120))+(((-1.0)*gclwh5_10*x101)));
op[33]=((((-0.1517437896)*x89))+(((-2.2892)*gclwh7_13*x66))+(((-0.030644352908)*x134))+(((0.030644352908)*x96))+(((2.2892)*gclwh9_13*x71))+(((0.1517437896)*x159))+(((2.2892)*gclwh11_13*x78))+((gclwh9_13*x137))+(((-4.5784)*gclwh9_13*x98))+(((4.5784)*gclwh7_13*x73))+(((-4.5784)*gclwh11_13*x77))+(((-1.0)*gclwh13_15*x108)));
op[34]=((((-0.01837316)*x104))+(((-1.0)*x448))+(((-0.0794)*gclwh7_0*x66))+(((-0.1588)*gclwh11_0*x77))+(((-0.001062887306)*gclwh7_0*r21))+(((0.0794)*gclwh9_0*x71))+((gclwh11_0*x112))+(((0.001062887306)*x158))+((gclwh15_0*x194))+x274+(((0.1588)*gclwh7_0*x73))+(((0.0794)*gclwh11_0*x78))+(((-0.01837316)*x123))+(((-0.1588)*npx*x69)));
op[35]=((-0.0260338308)+(((-1.0)*x472))+x471);
op[36]=((2.751379677038)+(((-1.0)*x474))+x467);
op[37]=((((4.7372)*gclwh12_2*x73))+((gclwh1_2*x168))+((gclwh3_2*x126))+(((-1.0)*gclwh4_2*x109))+(((-2.3686)*gclwh1_2*x71))+((x135*x93))+(((-1.0)*gclwh12_2*x126))+(((-2.3686)*gclwh3_2*x66))+(((-1.0)*x468))+(((-1.0)*x86*x93))+x458+(((0.54809404)*x149))+(((4.7372)*gclwh3_2*x73))+(((2.3686)*gclwh14_2*x71))+((gclwh14_2*x168))+(((-2.3686)*gclwh12_2*x66))+(((-2.3686)*gclwh4_2*x78))+(((-0.54809404)*gclwh10_2*rxp2_2))+(((-1.0)*gclwh8_2*x155))+(((4.7372)*gclwh4_2*x77)));
IkReal x483=pz*pz;
IkReal x484=pp*pp;
IkReal x485=((0.2314)*pz);
IkReal x486=(pp*r21);
IkReal x487=((0.2314)*rxp0_2);
IkReal x488=((0.01338649)*r22);
IkReal x489=(gclwh9_0*pz);
IkReal x490=(gclwh4_3*r22);
IkReal x491=(pp*r20);
IkReal x492=((0.327882)*gclwh14_14);
IkReal x493=(npy*pz);
IkReal x494=((0.655764)*gclwh12_14);
IkReal x495=((0.01338649)*r21);
IkReal x496=((4.0)*gclwh12_11);
IkReal x497=((0.26486044)*rxp0_2);
IkReal x498=((0.01837316)*rxp1_2);
IkReal x499=((0.00219459455709)*r21);
IkReal x500=(npz*pz);
IkReal x501=(gclwh15_1*r20);
IkReal x502=(gclwh14_8*r20);
IkReal x503=(gclwh13_9*r21);
IkReal x504=(pp*r22);
IkReal x505=((0.27404702)*rxp2_2);
IkReal x506=(npx*pz);
IkReal x507=((0.02677298)*r22);
IkReal x508=((2.0)*gclwh11_10);
IkReal x509=((0.26486044)*rxp2_2);
IkReal x510=(gclwh14_2*pz);
IkReal x511=(gclwh11_0*pz);
IkReal x512=((0.001062887306)*r20);
IkReal x513=((0.0379359474)*rxp1_2);
IkReal x514=((0.00219459455709)*r20);
IkReal x515=((2.0)*gclwh4_11);
IkReal x516=((0.000201684224787892)*r20);
IkReal x517=(gclwh13_1*r21);
IkReal x518=((0.2314)*rxp2_2);
IkReal x519=(gclwh11_13*r22);
IkReal x520=((0.01338649)*r20);
IkReal x521=((0.327882)*gclwh15_15);
IkReal x522=(gclwh12_8*r21);
IkReal x523=((0.655764)*gclwh14_14);
IkReal x524=(gclwh2_0*pz);
IkReal x525=((0.655764)*gclwh5_15);
IkReal x526=((0.015322176454)*r22);
IkReal x527=(gclwh15_0*r20);
IkReal x528=((2.0)*gclwh9_10);
IkReal x529=(gclwh12_3*rxp1_2);
IkReal x530=((2.0)*gclwh15_10);
IkReal x531=(gclwh15_10*r20);
IkReal x532=((4.0)*gclwh14_11);
IkReal x533=(gclwh12_3*r21);
IkReal x534=((0.655764)*gclwh15_15);
IkReal x535=((0.02677298)*r21);
IkReal x536=((0.0379359474)*rxp0_2);
IkReal x537=(gclwh11_13*rxp2_2);
IkReal x538=((0.05354596)*r22);
IkReal x539=(gclwh4_3*rxp2_2);
IkReal x540=(gclwh12_14*r21);
IkReal x541=((2.0)*gclwh10_11);
IkReal x542=((2.0)*pp);
IkReal x543=(gclwh13_9*rxp1_2);
IkReal x544=((0.0758718948)*rxp2_2);
IkReal x545=(gclwh14_8*rxp0_2);
IkReal x546=((0.015853620107)*r22);
IkReal x547=((0.001062887306)*r22);
IkReal x548=(gclwh7_13*r21);
IkReal x549=(gclwh1_2*pz);
IkReal x550=((2.0)*gclwh7_10);
IkReal x551=((1.0)*pz);
IkReal x552=((0.2314)*rxp1_2);
IkReal x553=(gclwh13_0*pz);
IkReal x554=((4.0)*gclwh15_10);
IkReal x555=(gclwh5_1*rxp2_2);
IkReal x556=(gclwh12_2*pz);
IkReal x557=(gclwh15_0*pz);
IkReal x558=((0.9256)*rxp0_2);
IkReal x559=(gclwh15_9*rxp0_2);
IkReal x560=((0.0189560282044839)*r21);
IkReal x561=(gclwh5_9*r22);
IkReal x562=(gclwh12_8*rxp1_2);
IkReal x563=((0.4628)*rxp1_2);
IkReal x564=(gclwh7_13*rxp1_2);
IkReal x565=((0.327882)*gclwh5_15);
IkReal x566=((0.26486044)*rxp1_2);
IkReal x567=(gclwh6_2*pz);
IkReal x568=(gclwh8_2*pz);
IkReal x569=(gclwh5_0*pz);
IkReal x570=((0.015322176454)*r20);
IkReal x571=(gclwh4_2*pz);
IkReal x572=(gclwh6_12*r21);
IkReal x573=(gclwh11_0*rxp2_2);
IkReal x574=((0.00918658)*rxp2_2);
IkReal x575=(gclwh13_0*r21);
IkReal x576=((0.0758718948)*rxp0_2);
IkReal x577=(gclwh10_2*pz);
IkReal x578=((0.001062887306)*r21);
IkReal x579=((0.015322176454)*r21);
IkReal x580=(gclwh10_11*rxp2_2);
IkReal x581=((0.327882)*gclwh12_14);
IkReal x582=((4.0)*gclwh4_11);
IkReal x583=(gclwh13_1*rxp1_2);
IkReal x584=((0.327675509152703)*rxp0_2);
IkReal x585=((0.4628)*rxp0_2);
IkReal x586=((0.0189560282044839)*r20);
IkReal x587=(gclwh8_12*r20);
IkReal x588=((2.0)*gclwh6_11);
IkReal x589=(gclwh8_12*rxp0_2);
IkReal x590=((2.0)*gclwh12_11);
IkReal x591=((0.9256)*rxp1_2);
IkReal x592=(gclwh9_13*rxp0_2);
IkReal x593=((0.0379359474)*rxp2_2);
IkReal x594=(gclwh5_15*r22);
IkReal x595=((0.05354596)*r21);
IkReal x596=((0.655764)*gclwh13_15);
IkReal x597=(gclwh13_15*r21);
IkReal x598=((0.02677298)*r20);
IkReal x599=((2.0)*gclwh8_11);
IkReal x600=((0.000201684224787892)*r21);
IkReal x601=((0.000531443653)*r20);
IkReal x602=((4.0)*gclwh5_10);
IkReal x603=(gclwh5_1*r22);
IkReal x604=((2.0)*gclwh5_10);
IkReal x605=(gclwh6_12*rxp1_2);
IkReal x606=((0.2832336)*rxp2_2);
IkReal x607=((4.0)*gclwh13_10);
IkReal x608=((0.0758718948)*rxp1_2);
IkReal x609=((0.327882)*gclwh4_14);
IkReal x610=((0.00438918911418)*r20);
IkReal x611=((0.4628)*rxp2_2);
IkReal x612=((0.000531443653)*r22);
IkReal x613=((0.327882)*gclwh13_15);
IkReal x614=((2.0)*gclwh13_10);
IkReal x615=(gclwh4_14*r22);
IkReal x616=(gclwh15_9*r20);
IkReal x617=((0.0034863305927034)*rxp0_2);
IkReal x618=((0.00219459455709)*r22);
IkReal x619=((0.655764)*gclwh4_14);
IkReal x620=(gclwh7_0*pz);
IkReal x621=((0.00877837822836)*r20);
IkReal x622=((0.01837316)*rxp0_2);
IkReal x623=(gclwh4_8*r22);
IkReal x624=((0.02677298)*rxp2_2);
IkReal x625=((2.0)*gclwh14_11);
IkReal x626=((0.00438918911418)*x597);
IkReal x627=((0.00438918911418)*x594);
IkReal x628=(gclwh15_15*x610);
IkReal x629=((0.02677298)*x531);
IkReal x630=(gclwh7_10*x563);
IkReal x631=(gclwh11_10*x611);
IkReal x632=(gclwh9_10*x585);
IkReal x633=(gclwh13_10*x535);
IkReal x634=(gclwh5_10*x507);
IkReal x635=(gclwh12_14*x513);
IkReal x636=(gclwh6_5*x499);
IkReal x637=(gclwh4_14*x593);
IkReal x638=(gclwh10_5*x618);
IkReal x639=(gclwh14_14*x536);
IkReal x640=(gclwh8_5*x514);
IkReal x641=(gclwh14_11*x487);
IkReal x642=(gclwh10_11*x488);
IkReal x643=(gclwh4_8*x624);
IkReal x644=(gclwh8_11*x520);
IkReal x645=((0.02677298)*x562);
IkReal x646=(gclwh4_11*x518);
IkReal x647=(gclwh12_11*x552);
IkReal x648=(gclwh6_11*x495);
IkReal x649=((0.02677298)*x545);
IkReal x650=(gclwh5_10*x518);
IkReal x651=(gclwh13_10*x552);
IkReal x652=((0.02677298)*x543);
IkReal x653=(gclwh5_9*x624);
IkReal x654=(gclwh7_10*x495);
IkReal x655=(gclwh11_10*x488);
IkReal x656=(gclwh9_10*x520);
IkReal x657=(gclwh15_10*x487);
IkReal x658=((0.02677298)*x559);
IkReal x659=(gclwh5_15*x593);
IkReal x660=(gclwh13_15*x513);
IkReal x661=(gclwh7_7*x499);
IkReal x662=(gclwh9_7*x514);
IkReal x663=(gclwh11_7*x618);
IkReal x664=(gclwh15_15*x536);
IkReal x665=(gclwh4_11*x507);
IkReal x666=((0.4628)*x580);
IkReal x667=(gclwh8_11*x585);
IkReal x668=(gclwh12_11*x535);
IkReal x669=((0.00438918911418)*x615);
IkReal x670=((0.00438918911418)*x540);
IkReal x671=(gclwh14_14*x610);
IkReal x672=(gclwh8_5*x536);
IkReal x673=((0.00219459455709)*x615);
IkReal x674=(gclwh12_14*x499);
IkReal x675=(gclwh10_5*x593);
IkReal x676=(gclwh14_14*x514);
IkReal x677=(gclwh6_5*x513);
IkReal x678=(gclwh14_11*x520);
IkReal x679=((0.001548816893)*x522);
IkReal x680=(gclwh6_11*x552);
IkReal x681=((0.001548816893)*x623);
IkReal x682=(gclwh4_11*x488);
IkReal x683=(gclwh12_11*x495);
IkReal x684=(gclwh8_11*x487);
IkReal x685=(gclwh10_11*x518);
IkReal x686=((0.001548816893)*x502);
IkReal x687=((0.001548816893)*x616);
IkReal x688=(gclwh7_10*x552);
IkReal x689=(gclwh15_10*x520);
IkReal x690=((0.001548816893)*x561);
IkReal x691=(gclwh5_10*x488);
IkReal x692=((0.001548816893)*x503);
IkReal x693=(gclwh9_10*x487);
IkReal x694=(gclwh11_10*x518);
IkReal x695=(gclwh13_10*x495);
IkReal x696=(gclwh7_7*x513);
IkReal x697=(gclwh15_15*x514);
IkReal x698=(gclwh9_7*x536);
IkReal x699=(gclwh11_7*x593);
IkReal x700=((0.00219459455709)*x594);
IkReal x701=(gclwh13_15*x499);
IkReal x702=(pp*x552);
IkReal x703=((2.0)*x483);
IkReal x704=((1.0)*x484);
IkReal x705=(r20*x484);
IkReal x706=(r21*x484);
IkReal x707=(x506*x534);
IkReal x708=(x504*x565);
IkReal x709=(x486*x613);
IkReal x710=(x491*x521);
IkReal x711=(x500*x525);
IkReal x712=(x493*x596);
IkReal x713=(x491*x530);
IkReal x714=(x500*x602);
IkReal x715=(x493*x607);
IkReal x716=(x486*x614);
IkReal x717=(x506*x554);
IkReal x718=(x504*x604);
IkReal x719=((0.163941)*gclwh6_5*x486);
IkReal x720=((0.327882)*gclwh10_5*x500);
IkReal x721=((0.327882)*gclwh8_5*x506);
IkReal x722=((0.163941)*gclwh10_5*x504);
IkReal x723=((0.327882)*gclwh6_5*x493);
IkReal x724=((0.163941)*gclwh8_5*x491);
IkReal x725=(gclwh14_2*rxp0_2*x485);
IkReal x726=((0.2314)*pp*x529);
IkReal x727=(x488*x577);
IkReal x728=(x493*x588);
IkReal x729=(x504*x577);
IkReal x730=(gclwh4_3*pp*x518);
IkReal x731=(x491*x568);
IkReal x732=(x520*x568);
IkReal x733=(x500*x541);
IkReal x734=(gclwh14_3*pp*x487);
IkReal x735=(gclwh4_2*rxp2_2*x485);
IkReal x736=(gclwh12_2*rxp1_2*x485);
IkReal x737=(x506*x599);
IkReal x738=(x495*x567);
IkReal x739=(x488*x511);
IkReal x740=(gclwh13_1*x702);
IkReal x741=(x500*x508);
IkReal x742=(x506*x528);
IkReal x743=(gclwh15_0*rxp0_2*x485);
IkReal x744=(gclwh5_1*pp*x518);
IkReal x745=(x489*x520);
IkReal x746=(x504*x511);
IkReal x747=(x489*x491);
IkReal x748=(x495*x620);
IkReal x749=(gclwh13_0*rxp1_2*x485);
IkReal x750=(gclwh15_1*pp*x487);
IkReal x751=(gclwh5_0*rxp2_2*x485);
IkReal x752=(x493*x550);
IkReal x753=((0.327882)*gclwh11_7*x500);
IkReal x754=((0.163941)*gclwh7_7*x486);
IkReal x755=((0.327882)*gclwh9_7*x506);
IkReal x756=((0.163941)*gclwh11_7*x504);
IkReal x757=((0.327882)*gclwh7_7*x493);
IkReal x758=((0.163941)*gclwh9_7*x491);
IkReal x759=(x504*x515);
IkReal x760=(x486*x590);
IkReal x761=(x506*x532);
IkReal x762=(x506*x523);
IkReal x763=(x486*x581);
IkReal x764=(x504*x609);
IkReal x765=(x491*x492);
IkReal x766=(x493*x494);
IkReal x767=(x500*x619);
IkReal x768=((0.163941)*gclwh12_14*x486);
IkReal x769=((0.163941)*gclwh4_14*x504);
IkReal x770=(x492*x506);
IkReal x771=((0.163941)*gclwh14_14*x491);
IkReal x772=(x493*x581);
IkReal x773=(x500*x609);
IkReal x774=(x491*x510);
IkReal x775=((0.1157)*gclwh4_8*x504);
IkReal x776=(gclwh6_2*rxp1_2*x485);
IkReal x777=(x484*x533);
IkReal x778=(x520*x549);
IkReal x779=((0.1157)*gclwh12_8*x486);
IkReal x780=(x500*x515);
IkReal x781=(x510*x520);
IkReal x782=(gclwh14_8*npx*x485);
IkReal x783=(gclwh3_3*x706);
IkReal x784=(gclwh1_3*x705);
IkReal x785=(gclwh3_2*pz*x495);
IkReal x786=(x484*x490);
IkReal x787=(x493*x590);
IkReal x788=(x495*x556);
IkReal x789=(gclwh12_8*npy*x485);
IkReal x790=(gclwh10_2*rxp2_2*x485);
IkReal x791=(x506*x625);
IkReal x792=(x488*x571);
IkReal x793=(gclwh4_8*npz*x485);
IkReal x794=((0.1157)*gclwh14_8*x491);
IkReal x795=(gclwh8_2*rxp0_2*x485);
IkReal x796=(x495*x524);
IkReal x797=(x484*x501);
IkReal x798=(x485*x573);
IkReal x799=(x504*x569);
IkReal x800=(x486*x553);
IkReal x801=(gclwh0_0*pz*x520);
IkReal x802=(gclwh5_9*npz*x485);
IkReal x803=(x488*x569);
IkReal x804=(x495*x553);
IkReal x805=(gclwh13_9*npy*x485);
IkReal x806=((0.1157)*gclwh15_9*x491);
IkReal x807=(gclwh9_0*rxp0_2*x485);
IkReal x808=(gclwh2_1*x706);
IkReal x809=(x500*x604);
IkReal x810=(x493*x614);
IkReal x811=(gclwh0_1*x705);
IkReal x812=((0.1157)*gclwh5_9*x504);
IkReal x813=(x506*x530);
IkReal x814=((0.1157)*gclwh13_9*x486);
IkReal x815=(gclwh7_0*rxp1_2*x485);
IkReal x816=(gclwh15_9*npx*x485);
IkReal x817=(x520*x557);
IkReal x818=(x493*x613);
IkReal x819=((0.163941)*gclwh15_15*x491);
IkReal x820=(x500*x565);
IkReal x821=((0.163941)*gclwh13_15*x486);
IkReal x822=((0.163941)*gclwh5_15*x504);
IkReal x823=(x506*x521);
IkReal x824=(gclwh6_2*npy*x703);
IkReal x825=(gclwh6_2*x486*x551);
IkReal x826=(gclwh10_2*npz*x703);
IkReal x827=(gclwh8_2*npx*x703);
IkReal x828=(gclwh7_0*npy*x703);
IkReal x829=(gclwh9_0*npx*x703);
IkReal x830=(gclwh11_0*npz*x703);
IkReal x831=(gclwh7_0*x486*x551);
IkReal x832=(gclwh12_2*npy*x703);
IkReal x833=(gclwh3_2*npy*x703);
IkReal x834=(gclwh1_2*npx*x703);
IkReal x835=(gclwh14_3*x506*x542);
IkReal x836=(gclwh4_2*npz*x703);
IkReal x837=(gclwh4_3*x500*x542);
IkReal x838=(gclwh12_2*x486*x551);
IkReal x839=((1.0)*x491*x549);
IkReal x840=(gclwh3_3*x493*x542);
IkReal x841=(gclwh4_2*x504*x551);
IkReal x842=(gclwh1_3*x506*x542);
IkReal x843=(gclwh3_2*x486*x551);
IkReal x844=(gclwh12_3*x493*x542);
IkReal x845=(gclwh14_2*npx*x703);
IkReal x846=(gclwh14_3*r20*x704);
IkReal x847=(gclwh0_0*npx*x703);
IkReal x848=(gclwh2_0*npy*x703);
IkReal x849=(gclwh5_1*x500*x542);
IkReal x850=(gclwh13_1*x493*x542);
IkReal x851=(gclwh15_0*npx*x703);
IkReal x852=(gclwh2_1*x493*x542);
IkReal x853=(gclwh0_1*x506*x542);
IkReal x854=(gclwh5_0*npz*x703);
IkReal x855=(gclwh13_0*npy*x703);
IkReal x856=(gclwh0_0*x491*x551);
IkReal x857=(gclwh15_0*x491*x551);
IkReal x858=((1.0)*x486*x524);
IkReal x859=(x517*x704);
IkReal x860=(x603*x704);
IkReal x861=(gclwh15_1*x506*x542);
IkReal x862=(x659+x660);
IkReal x863=(x698+x699);
IkReal x864=(x637+x635);
IkReal x865=(x672+x675);
IkReal x866=(x655+x656+x657+x752);
IkReal x867=(x644+x642+x641+x728);
IkReal x868=(x678+x680+x780+x787);
IkReal x869=(x689+x688+x810+x809);
IkReal x870=(x661+x755+x754+x753);
IkReal x871=(x628+x711+x710+x712);
IkReal x872=(x697+x818+x819+x820);
IkReal x873=(x676+x773+x772+x771);
IkReal x874=(x671+x765+x766+x767);
IkReal x875=(x636+x719+x720+x721);
IkReal x876=(x683+x682+x685+x684+x791);
IkReal x877=(x694+x695+x691+x693+x813);
IkReal x878=(x650+x651+x654+x742+x741);
IkReal x879=(x647+x646+x648+x737+x733);
IkReal x880=(((x493*x496))+((gclwh6_11*x563))+((gclwh14_11*x598))+((x500*x582))+((x491*x625)));
IkReal x881=(x663+x662+x757+x756+x758);
IkReal x882=(x627+x626+x708+x709+x707);
IkReal x883=(x700+x701+x823+x822+x821);
IkReal x884=(x640+x638+x722+x723+x724);
IkReal x885=(x669+x670+x764+x762+x763);
IkReal x886=(x629+x630+x713+x715+x714);
IkReal x887=(x673+x674+x770+x768+x769);
IkReal x888=(x634+x632+x633+x631+x718+x717+x716);
IkReal x889=(x668+x665+x667+x666+x759+x760+x761);
IkReal x890=(x658+x751+x750+x748+x749+x829+x830+x831);
IkReal x891=(x649+x736+x735+x734+x738+x827+x826+x825);
IkReal x892=(x652+x653+x739+x746+x747+x744+x745+x743+x740+x828);
IkReal x893=(x645+x643+x732+x731+x730+x725+x726+x727+x729+x824);
IkReal x894=(x690+x692+x852+x853+x856+x857+x854+x855+x858+x859+x861+x860+x816+x817+x814+x815+x812);
IkReal x895=(x485+x679+x681+x777+x776+x775+x774+x779+x778+x782+x783+x781+x786+x784+x785+x834+x835+x836+x832+x833);
IkReal x896=(x686+x790+x793+x792+x795+x794+x788+x789+x837+x838+x839+x841+x840+x843+x842+x845+x844+x846);
IkReal x897=(x485+x687+x797+x796+x799+x798+x850+x851+x811+x847+x849+x848+x808+x805+x804+x807+x806+x801+x800+x803+x802);
op[38]=((((-0.00877837822836)*x615))+(((1.311528)*gclwh4_14*x500))+(((1.311528)*gclwh12_14*x493))+(((0.52972088)*x605))+(((-1.0)*x486*x494))+(((-0.52972088)*gclwh10_12*rxp2_2))+(((-1.311528)*gclwh14_14*x506))+((x491*x523))+((gclwh14_14*x621))+(((-1.0)*x504*x619))+(((-0.52972088)*x589))+(((-0.00877837822836)*x540)));
op[39]=((-0.080560234076)+(((-0.05354596)*gclwh14_11*r20))+((x504*x582))+(((-8.0)*gclwh12_11*x493))+((gclwh8_11*x558))+(((-1.0)*gclwh6_11*x591))+((gclwh12_11*x595))+(((8.0)*gclwh14_11*x506))+(((-8.0)*gclwh4_11*x500))+((gclwh4_11*x538))+((x486*x496))+(((0.9256)*x580))+(((-1.0)*x491*x532)));
op[40]=((0.050601122962)+(((-1.0)*x880))+x889);
op[41]=((((-1.0)*gclwh12_2*x578))+(((-0.0794)*gclwh1_2*x491))+(((0.1588)*gclwh12_2*x493))+(((-0.0794)*gclwh3_2*x486))+(((0.0794)*gclwh14_2*x491))+(((-1.0)*gclwh8_2*x622))+(((-0.0794)*gclwh4_2*x504))+(((-0.1588)*gclwh14_2*x506))+(((0.1588)*gclwh1_2*x506))+(((0.1588)*gclwh4_2*x500))+((gclwh6_2*x498))+((gclwh14_2*x512))+((gclwh1_2*x512))+(((0.1588)*gclwh3_2*x493))+(((-0.0794)*gclwh12_2*x486))+(((-0.01837316)*gclwh10_2*rxp2_2))+((gclwh3_2*x578))+x885+(((-1.0)*x874))+(((-1.0)*gclwh4_2*x547)));
op[42]=((((0.54809404)*x573))+(((0.031707240214)*gclwh0_0*r20))+(((-4.7372)*gclwh13_0*x493))+(((-2.3686)*gclwh0_0*x491))+(((2.3686)*gclwh13_0*x486))+(((-2.3686)*gclwh15_0*x491))+(((2.3686)*gclwh5_0*x504))+(((0.54809404)*gclwh9_0*rxp0_2))+(((-0.031707240214)*x527))+(((4.7372)*gclwh0_0*x506))+(((4.7372)*gclwh15_0*x506))+(((-1.0)*x882))+(((4.7372)*gclwh2_0*x493))+(((-4.7372)*gclwh5_0*x500))+(((0.031707240214)*x575))+(((0.031707240214)*gclwh5_0*r22))+(((0.031707240214)*gclwh2_0*r21))+(((-2.3686)*gclwh2_0*x486))+x871+(((-0.54809404)*gclwh7_0*rxp1_2)));
op[43]=((2.751379677038)+(((-1.0)*x886))+x888);
op[44]=((0.080560234076)+(((-0.05354596)*x531))+((x486*x607))+(((-8.0)*gclwh5_10*x500))+((gclwh13_10*x595))+(((8.0)*gclwh15_10*x506))+((gclwh5_10*x538))+((x504*x602))+(((-1.0)*gclwh7_10*x591))+(((-8.0)*gclwh13_10*x493))+(((-1.0)*x491*x554))+(((0.9256)*gclwh11_10*rxp2_2))+((gclwh9_10*x558)));
op[45]=((((-0.52972088)*x564))+((x486*x596))+(((0.00877837822836)*x597))+(((0.00877837822836)*x594))+(((-1.311528)*gclwh13_15*x493))+(((-1.311528)*gclwh5_15*x500))+(((0.52972088)*x592))+(((-1.0)*gclwh15_15*x621))+((x504*x525))+(((1.311528)*gclwh15_15*x506))+(((0.52972088)*x537))+(((-1.0)*x491*x534)));
op[46]=((((0.1588)*gclwh0_0*x506))+(((-0.1588)*gclwh13_0*x493))+((gclwh2_0*x578))+(((-1.0)*gclwh15_0*x512))+((gclwh0_0*x512))+(((0.1588)*gclwh15_0*x506))+(((-0.0794)*gclwh2_0*x486))+(((-0.0794)*gclwh15_0*x491))+((gclwh5_0*x547))+(((0.001062887306)*x575))+((gclwh9_0*x622))+(((0.0794)*gclwh13_0*x486))+(((-1.0)*gclwh7_0*x498))+(((0.1588)*gclwh2_0*x493))+(((0.01837316)*x573))+(((0.0794)*gclwh5_0*x504))+x882+(((-0.1588)*gclwh5_0*x500))+(((-0.0794)*gclwh0_0*x491))+(((-1.0)*x871)));
op[47]=((0.050601122962)+(((-1.0)*x888))+x886);
op[48]=((((1.1843)*gclwh10_12*x504))+(((-0.27404702)*x562))+(((-2.3686)*gclwh10_12*x500))+(((-1.0)*x864))+(((1.1843)*gclwh8_12*x491))+(((0.015853620107)*x587))+((gclwh10_12*x546))+(((-2.3686)*gclwh8_12*x506))+(((2.3686)*gclwh6_12*x493))+(((-1.0)*x884))+(((-1.1843)*gclwh6_12*x486))+x639+(((-0.015853620107)*x572))+x875+(((-1.0)*gclwh4_8*x505))+(((0.27404702)*x545)));
op[49]=((((-1.0)*x867))+(((-1.0)*gclwh10_11*x504))+((gclwh6_11*x486))+(((-1.0)*x891))+(((-1.0)*gclwh8_11*x491))+(((-0.327675509152703)*x539))+(((-0.327675509152703)*x529))+x879+x893+((gclwh14_3*x584)));
op[50]=((0.3752937372)+((gclwh6_11*x535))+(((-1.0)*x491*x599))+(((-1.0)*x504*x541))+((x486*x588))+(((-1.0)*gclwh8_11*x598))+(((-1.0)*gclwh14_11*x585))+(((-4.0)*gclwh6_11*x493))+(((4.0)*gclwh8_11*x506))+(((4.0)*gclwh10_11*x500))+((gclwh12_11*x563))+(((-1.0)*gclwh10_11*x507))+((gclwh4_11*x611)));
op[51]=((((-1.1446)*gclwh8_2*x491))+(((-1.0)*gclwh8_2*x570))+(((2.2892)*gclwh8_2*x506))+(((-1.0)*gclwh10_2*x526))+((gclwh12_2*x566))+(((-0.2832336)*x545))+(((-1.0)*gclwh14_2*x497))+(((-1.0)*gclwh14_14*x576))+(((-2.2892)*gclwh6_2*x493))+(((0.2832336)*x562))+((gclwh4_8*x606))+((gclwh12_14*x608))+((gclwh4_14*x544))+((gclwh6_2*x579))+(((1.1446)*gclwh6_2*x486))+((gclwh4_2*x509))+(((2.2892)*gclwh10_2*x500))+(((-1.1446)*gclwh10_2*x504)));
op[52]=((((0.00918658)*x562))+(((0.0397)*gclwh8_12*x491))+(((-0.00918658)*x545))+(((0.0397)*gclwh10_12*x504))+((gclwh4_8*x574))+(((-0.0794)*gclwh8_12*x506))+(((-1.0)*x639))+(((-0.0397)*gclwh6_12*x486))+(((-1.0)*x884))+(((-0.000531443653)*x572))+(((0.000531443653)*x587))+x864+x875+(((0.0794)*gclwh6_12*x493))+(((-0.0794)*gclwh10_12*x500))+((gclwh10_12*x612)));
op[53]=(((gclwh14_3*x617))+(((-1.0)*x891))+((gclwh10_11*x504))+(((-0.0034863305927034)*x539))+(((-0.0034863305927034)*x529))+(((-1.0)*gclwh6_11*x486))+x867+x893+((gclwh8_11*x491))+(((-1.0)*x879)));
op[54]=(((gclwh11_10*x504))+((gclwh9_10*x491))+((gclwh15_1*x584))+(((-1.0)*x890))+x866+x892+(((-1.0)*gclwh7_10*x486))+(((-0.327675509152703)*x583))+(((-0.327675509152703)*x555))+(((-1.0)*x878)));
op[55]=((((2.3686)*gclwh7_13*x493))+(((-1.0)*x862))+(((0.27404702)*x559))+(((-2.3686)*gclwh11_13*x500))+(((1.1843)*gclwh11_13*x504))+(((-0.27404702)*x543))+(((0.015853620107)*gclwh9_13*r20))+(((-1.0)*x881))+(((0.015853620107)*x519))+(((-0.015853620107)*x548))+x664+(((-1.1843)*gclwh7_13*x486))+x870+(((-1.0)*gclwh5_9*x505))+(((-2.3686)*gclwh9_13*x506))+(((1.1843)*gclwh9_13*x491)));
op[56]=(((gclwh15_15*x576))+(((-2.2892)*gclwh7_0*x493))+(((-1.0)*gclwh5_15*x544))+(((-0.2832336)*x543))+(((2.2892)*npx*x489))+(((2.2892)*gclwh11_0*x500))+(((-1.0)*gclwh9_0*x570))+(((-1.1446)*gclwh11_0*x504))+(((-1.0)*gclwh15_0*x497))+((gclwh13_0*x566))+(((-1.0)*gclwh5_9*x606))+((gclwh5_0*x509))+((gclwh7_0*x579))+(((-1.0)*gclwh13_15*x608))+(((-1.0)*gclwh11_0*x526))+(((-1.1446)*gclwh9_0*x491))+(((0.2832336)*x559))+(((1.1446)*gclwh7_0*x486)));
op[57]=((0.3752937372)+(((4.0)*gclwh11_10*x500))+((x486*x550))+(((-1.0)*gclwh15_10*x585))+(((-4.0)*gclwh7_10*x493))+((gclwh13_10*x563))+((gclwh5_10*x611))+((gclwh7_10*x535))+(((4.0)*gclwh9_10*x506))+(((-1.0)*x504*x508))+(((-1.0)*gclwh11_10*x507))+(((-1.0)*x491*x528))+(((-1.0)*gclwh9_10*x598)));
op[58]=((((-1.0)*x866))+((gclwh15_1*x617))+(((-1.0)*gclwh11_10*x504))+(((-1.0)*x890))+(((-1.0)*gclwh9_10*x491))+(((-0.0034863305927034)*x583))+(((-0.0034863305927034)*x555))+((gclwh7_10*x486))+x878+x892);
op[59]=((((-0.0397)*gclwh7_13*x486))+(((0.000531443653)*x519))+(((-0.000531443653)*x548))+(((-0.0794)*gclwh11_13*x500))+(((0.0794)*gclwh7_13*x493))+(((-1.0)*x881))+(((-0.00918658)*x559))+(((-0.0794)*gclwh9_13*x506))+(((-1.0)*x664))+(((0.00918658)*x543))+(((0.0397)*gclwh11_13*x504))+x862+x870+(((0.0397)*gclwh9_13*x491))+((gclwh9_13*x601))+((gclwh5_9*x574)));
op[60]=((((2.3686)*gclwh4_8*x500))+(((-1.0)*gclwh4_8*x546))+(((-1.1843)*gclwh4_8*x504))+(((0.015853620107)*x502))+(((-2.3686)*gclwh14_8*x506))+(((0.27404702)*x605))+(((-0.27404702)*x589))+(((-1.0)*gclwh10_12*x505))+(((-1.0)*x887))+(((-1.1843)*gclwh12_8*x486))+(((-0.015853620107)*x522))+(((1.1843)*gclwh14_8*x491))+x865+x873+(((2.3686)*gclwh12_8*x493))+(((-1.0)*x677)));
op[61]=((1.429443141481)+(((-2.832113302962)*gclwh14_3*x506))+(((2.832113302962)*gclwh1_3*x506))+(((-1.0)*x868))+(((-1.429443141481)*gclwh3_3*x486))+(((-1.429443141481)*gclwh1_3*x491))+((gclwh1_3*x586))+(((-0.0189560282044839)*x533))+((gclwh3_3*x560))+((gclwh12_11*x486))+(((2.832113302962)*gclwh3_3*x493))+(((-1.0)*x896))+(((-0.0189560282044839)*x490))+(((2.832113302962)*gclwh12_3*x493))+(((-1.402670161481)*gclwh12_3*x486))+(((1.402670161481)*gclwh14_3*x491))+(((-1.0)*gclwh14_11*x491))+(((-1.402670161481)*pp*x490))+(((2.832113302962)*gclwh4_3*x500))+x876+x895+((gclwh14_3*x586))+((gclwh4_11*x504)));
op[62]=((0.147786722962)+(((-1.0)*x880))+x889);
op[63]=((((2.2892)*gclwh14_2*x506))+(((1.1446)*gclwh4_2*x504))+(((1.224)*gclwh12_8*x486))+(((-2.448)*gclwh12_8*x493))+((gclwh10_2*x509))+(((0.01638506376)*x522))+(((-1.0)*gclwh14_2*x570))+(((-1.0)*gclwh1_2*x570))+(((-2.2892)*gclwh1_2*x506))+(((1.224)*gclwh4_8*x504))+(((1.1446)*gclwh1_2*x491))+(((1.1446)*gclwh12_2*x486))+(((-1.0)*gclwh6_2*x566))+(((-1.0)*gclwh3_2*x579))+(((0.01638506376)*x623))+(((-2.2892)*gclwh3_2*x493))+(((-2.2892)*gclwh4_2*x500))+(((-1.224)*gclwh14_8*x491))+(((-2.448)*gclwh4_8*x500))+((gclwh8_2*x497))+((gclwh4_2*x526))+x885+(((-1.1446)*gclwh14_2*x491))+(((1.1446)*gclwh3_2*x486))+(((2.448)*gclwh14_8*x506))+((gclwh12_2*x579))+(((-2.2892)*gclwh12_2*x493))+(((-1.0)*x874))+(((-0.01638506376)*x502)));
op[64]=((((0.0397)*gclwh12_8*x486))+(((-0.000531443653)*x502))+(((-1.0)*gclwh10_12*x574))+(((-0.0794)*gclwh4_8*x500))+(((-0.00918658)*x589))+((gclwh4_8*x612))+(((0.00918658)*x605))+(((0.0397)*gclwh4_8*x504))+(((-0.0794)*gclwh12_8*x493))+(((0.000531443653)*x522))+(((-0.0397)*gclwh14_8*x491))+(((0.0794)*gclwh14_8*x506))+x865+x887+(((-1.0)*x677))+(((-1.0)*x873)));
op[65]=((-0.028452741481)+(((-0.028452741481)*gclwh3_3*x486))+((gclwh14_11*x491))+(((-0.030132502962)*gclwh14_3*x506))+(((-0.001679761481)*gclwh12_3*x486))+(((-0.001679761481)*pp*x490))+(((0.030132502962)*gclwh4_3*x500))+(((-1.0)*x896))+((gclwh14_3*x516))+(((-1.0)*gclwh4_11*x504))+(((-0.028452741481)*gclwh1_3*x491))+(((0.001679761481)*gclwh14_3*x491))+((gclwh3_3*x600))+(((-1.0)*gclwh12_11*x486))+(((-0.000201684224787892)*x490))+(((-0.000201684224787892)*x533))+(((0.030132502962)*gclwh12_3*x493))+(((0.030132502962)*gclwh3_3*x493))+x868+x895+(((0.030132502962)*gclwh1_3*x506))+(((-1.0)*x876))+((gclwh1_3*x516)));
op[66]=((-1.429443141481)+(((-0.0189560282044839)*x501))+(((-1.0)*x869))+(((0.0189560282044839)*x603))+(((0.0189560282044839)*x517))+(((-2.832113302962)*gclwh5_1*x500))+((gclwh2_1*x560))+(((2.832113302962)*gclwh0_1*x506))+(((-1.429443141481)*gclwh0_1*x491))+(((-1.0)*x894))+((gclwh0_1*x586))+(((2.832113302962)*gclwh15_1*x506))+(((-1.0)*gclwh15_10*x491))+((gclwh5_10*x504))+(((1.402670161481)*gclwh5_1*x504))+(((1.402670161481)*gclwh13_1*x486))+((gclwh13_10*x486))+(((2.832113302962)*gclwh2_1*x493))+(((-1.429443141481)*gclwh2_1*x486))+x877+x897+(((-1.402670161481)*gclwh15_1*x491))+(((-2.832113302962)*gclwh13_1*x493)));
op[67]=((((-0.27404702)*x564))+(((-1.0)*x863))+(((2.3686)*gclwh15_9*x506))+(((0.015853620107)*x503))+(((1.1843)*gclwh13_9*x486))+(((-1.1843)*gclwh15_9*x491))+(((-0.015853620107)*x616))+(((1.1843)*gclwh5_9*x504))+x696+(((0.27404702)*x592))+(((-2.3686)*gclwh5_9*x500))+((gclwh11_13*x505))+x883+((gclwh5_9*x546))+(((-2.3686)*gclwh13_9*x493))+(((-1.0)*x872)));
op[68]=((((1.224)*gclwh13_9*x486))+(((-2.2892)*gclwh0_0*x506))+(((2.2892)*gclwh13_0*x493))+(((0.015322176454)*x527))+(((-2.448)*gclwh13_9*x493))+(((1.1446)*gclwh2_0*x486))+(((-2.2892)*gclwh15_0*x506))+(((-1.1446)*gclwh13_0*x486))+(((-1.0)*gclwh2_0*x579))+(((1.1446)*gclwh15_0*x491))+(((-1.0)*gclwh9_0*x497))+(((1.224)*gclwh5_9*x504))+(((2.448)*gclwh15_9*x506))+(((-1.224)*gclwh15_9*x491))+(((-0.015322176454)*x575))+(((-2.448)*gclwh5_9*x500))+(((0.01638506376)*x503))+(((-1.0)*gclwh5_0*x526))+(((-1.0)*gclwh11_0*x509))+(((-0.01638506376)*x616))+(((0.01638506376)*x561))+(((1.1446)*gclwh0_0*x491))+x882+(((-2.2892)*gclwh2_0*x493))+(((-1.0)*gclwh0_0*x570))+((gclwh7_0*x566))+(((2.2892)*gclwh5_0*x500))+(((-1.1446)*gclwh5_0*x504))+(((-1.0)*x871)));
op[69]=((0.147786722962)+(((-1.0)*x888))+x886);
op[70]=((0.028452741481)+(((0.030132502962)*gclwh15_1*x506))+((gclwh0_1*x516))+(((0.001679761481)*gclwh5_1*x504))+(((-1.0)*gclwh13_10*x486))+((gclwh15_10*x491))+(((-0.028452741481)*gclwh2_1*x486))+(((0.030132502962)*gclwh2_1*x493))+(((0.000201684224787892)*x603))+(((-1.0)*gclwh5_10*x504))+(((0.001679761481)*gclwh13_1*x486))+((gclwh2_1*x600))+(((-0.000201684224787892)*x501))+(((-1.0)*x894))+(((0.030132502962)*gclwh0_1*x506))+(((0.000201684224787892)*x517))+(((-0.001679761481)*gclwh15_1*x491))+(((-0.030132502962)*gclwh5_1*x500))+x869+x897+(((-0.030132502962)*gclwh13_1*x493))+(((-0.028452741481)*gclwh0_1*x491))+(((-1.0)*x877)));
op[71]=((((-0.00918658)*x564))+(((-0.0397)*gclwh5_9*x504))+(((-1.0)*x863))+(((-0.0794)*gclwh15_9*x506))+(((0.0794)*gclwh13_9*x493))+(((-0.000531443653)*x503))+((gclwh15_9*x601))+(((0.0397)*gclwh15_9*x491))+(((-1.0)*x883))+(((0.00918658)*x537))+x696+(((-0.0397)*gclwh13_9*x486))+x872+(((0.0794)*gclwh5_9*x500))+(((0.00918658)*x592))+(((-0.000531443653)*x561)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x898=htj1*htj1;
CheckValue<IkReal> x899=IKPowWithIntegerCheck(((1.0)+x898),-1);
if(!x899.valid){
continue;
}
cj1array[numsolutions]=((x899.value)*(((1.0)+(((-1.0)*x898)))));
CheckValue<IkReal> x900=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x900.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x900.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x901=htj2*htj2;
CheckValue<IkReal> x902=IKPowWithIntegerCheck(((1.0)+x901),-1);
if(!x902.valid){
continue;
}
cj2array[numsolutions]=((x902.value)*(((1.0)+(((-1.0)*x901)))));
CheckValue<IkReal> x903=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x903.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x903.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x904=htj3*htj3;
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+x904),-1);
if(!x905.valid){
continue;
}
cj3array[numsolutions]=((x905.value)*(((1.0)+(((-1.0)*x904)))));
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x906.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x906.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break;
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x907=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x907);
rxp1_0=(pz*r11);
rxp1_1=(r01*x907);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x908=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x908);
rxp1_0=(pz*r11);
rxp1_1=(r01*x908);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(r22,-1);
if(!x909.valid){
continue;
}
CheckValue<IkReal> x910=IKPowWithIntegerCheck(sj3,-1);
if(!x910.valid){
continue;
}
sj4array[0]=((x909.value)*(x910.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x911=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x911);
rxp1_0=(pz*r11);
rxp1_1=(r01*x911);
IkReal x912=((16.0)*sj4);
IkReal x913=(cj1*cj2);
IkReal x914=((4.0)*sj3);
IkReal x915=((8.0)*sj4);
IkReal x916=((4.0)*cj4);
IkReal x917=(sj1*sj2);
IkReal x918=((4.0)*sj4);
IkReal x919=(cj3*r02);
IkReal x920=((16.0)*sj3);
IkReal x921=((8.0)*sj3);
IkReal x922=((12.0)*cj4);
IkReal x923=((12.0)*sj4);
IkReal x924=(cj3*r12);
IkReal x925=(r11*x914);
IkReal x926=(r01*x914);
IkReal x927=(r01*x917);
IkReal x928=(cj3*cj4*r01);
IkReal x929=(cj3*cj4*r11);
IkReal x930=(cj3*r10*x916);
IkReal x931=(x923*x924);
IkReal x932=(cj3*r00*x916);
IkReal x933=(x919*x923);
IkReal x934=(r00*x917*x918);
IkReal x935=(r02*x917*x922);
IkReal x936=(r00*x913*x918);
IkReal x937=(r02*x913*x922);
IkReal x938=(r10*x917*x918);
IkReal x939=(r12*x913*x922);
IkReal x940=(r12*x917*x922);
IkReal x941=(r10*x913*x918);
IkReal x942=(x936+x925);
IkReal x943=(x938+x926);
IkReal x944=(x934+x930);
IkReal x945=(x937+x931);
IkReal x946=(x932+x941);
IkReal x947=(x933+x940);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x947))+(((-1.0)*x946))+x939+x943)))))+(IKabs(((((-1.0)*r10*x921))+(((-8.0)*x929))+((r01*x913*x915))+(((-1.0)*x915*x927)))))+(((0.5)*(IKabs(((((-1.0)*r11*x912*x913))+((r11*x912*x917))+(((-16.0)*x928))+(((-1.0)*r00*x920)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x920))+(((-1.0)*x912*x927))+((r01*x912*x913))+(((-16.0)*x929)))))))+(((0.5)*(IKabs(((((-1.0)*x945))+(((-1.0)*x944))+x935+x942)))))+(((0.5)*(IKabs(((((-1.0)*x944))+((r02*x916*x917))+(((-1.0)*x918*x924))+(((-1.0)*r02*x913*x916))+x942)))))+(((0.5)*(IKabs(((((-1.0)*x947))+(((-1.0)*x943))+x939+x946)))))+(((0.5)*(IKabs(((((-1.0)*x945))+(((-1.0)*x942))+x935+x944)))))+(IKabs(((((-1.0)*r11*x913*x915))+(((-8.0)*x928))+((r11*x915*x917))+(((-1.0)*r00*x921)))))+(((0.5)*(IKabs(((((-1.0)*x918*x919))+(((-1.0)*x946))+x943+(((-1.0)*r12*x916*x917))+((r12*x913*x916))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x948=(r10*sj3);
IkReal x949=(r01*sj4);
IkReal x950=(cj1*cj2);
IkReal x951=(cj3*cj4);
IkReal x952=(sj1*sj2);
IkReal x953=(cj4*r02);
IkReal x954=((4.0)*r11*sj3);
IkReal x955=(cj3*r12*sj4);
IkReal x956=((4.0)*r00*sj4);
IkReal x957=((4.0)*r10*x951);
IkReal x958=((12.0)*x955);
IkReal x959=((4.0)*x955);
IkReal x960=(x950*x956);
IkReal x961=(x952*x956);
IkReal x962=((12.0)*x952*x953);
IkReal x963=((12.0)*x950*x953);
IkReal x964=((4.0)*x952*x953);
IkReal x965=((4.0)*x950*x953);
IkReal x966=(x960+x954);
IkReal x967=(x961+x957);
IkReal x968=(x965+x959);
IkReal x969=(x963+x958);
IkReal x970=((((-8.0)*x949*x952))+(((-8.0)*x948))+(((8.0)*x949*x950))+(((-8.0)*r11*x951)));
op[0]=(x966+x964+(((-1.0)*x967))+(((-1.0)*x968)));
op[1]=x970;
op[2]=(x962+x966+(((-1.0)*x967))+(((-1.0)*x969)));
op[3]=((((-16.0)*r11*x951))+(((16.0)*x949*x950))+(((-16.0)*x948))+(((-16.0)*x949*x952)));
op[4]=(x962+x967+(((-1.0)*x966))+(((-1.0)*x969)));
op[5]=x970;
op[6]=(x967+x964+(((-1.0)*x966))+(((-1.0)*x968)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x971=(cj1*cj2);
IkReal x972=((4.0)*cj4);
IkReal x973=(sj1*sj2);
IkReal x974=((4.0)*sj4);
IkReal x975=(r00*sj3);
IkReal x976=(cj3*r02);
IkReal x977=((4.0)*r01*sj3);
IkReal x978=((16.0)*r11*sj4);
IkReal x979=(cj3*cj4*r01);
IkReal x980=((12.0)*cj4*r12);
IkReal x981=((8.0)*r11*sj4);
IkReal x982=(cj3*r00*x972);
IkReal x983=((12.0)*sj4*x976);
IkReal x984=(x974*x976);
IkReal x985=(r10*x971*x974);
IkReal x986=(r10*x973*x974);
IkReal x987=(x971*x980);
IkReal x988=(x973*x980);
IkReal x989=(r12*x971*x972);
IkReal x990=(r12*x972*x973);
IkReal x991=(x986+x977);
IkReal x992=(x985+x982);
IkReal x993=(x990+x984);
IkReal x994=(x988+x983);
IkReal x995=((((-8.0)*x979))+(((-8.0)*x975))+((x973*x981))+(((-1.0)*x971*x981)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x991))+(((-1.0)*x994))+x992+x987))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x992))+(((-1.0)*x994))+x991+x987))))+((x995*(htj5*htj5*htj5*htj5*htj5)))+(((-1.0)*x991))+(((-1.0)*x993))+((htj5*x995))+x992+x989+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x992))+(((-1.0)*x993))+x991+x989))))+(((htj5*htj5*htj5)*(((((-1.0)*x971*x978))+((x973*x978))+(((-16.0)*x979))+(((-16.0)*x975)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x996=(cj5*sj4);
IkReal x997=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x997))+(((-1.0)*r00*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x996))+(((-1.0)*r11*x997))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x997))+(((-1.0)*r00*x996))))+IKsqr((((r10*x996))+(((-1.0)*r11*x997))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x997))+(((-1.0)*r00*x996))), (((r10*x996))+(((-1.0)*r11*x997))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x998=IKcos(j0);
IkReal x999=IKsin(j0);
IkReal x1000=(cj5*r01);
IkReal x1001=((1.0)*sj3);
IkReal x1002=(r12*sj4);
IkReal x1003=((1.0)*cj3);
IkReal x1004=(r11*sj5);
IkReal x1005=(cj3*cj4);
IkReal x1006=(r02*sj4);
IkReal x1007=(r01*sj5);
IkReal x1008=(r10*sj5);
IkReal x1009=(cj5*r11);
IkReal x1010=(r00*sj5);
IkReal x1011=((1.0)*cj2);
IkReal x1012=((0.5723)*sj2);
IkReal x1013=((1.0)*cj4);
IkReal x1014=((0.5723)*cj2);
IkReal x1015=(cj4*cj5*r00);
IkReal x1016=((1.0)*cj1*sj2);
IkReal x1017=(cj4*cj5*r10);
IkReal x1018=(sj1*x998);
IkReal x1019=(cj1*x999);
IkReal x1020=((1.0)*cj5*sj4);
IkReal x1021=(cj1*x998);
IkReal x1022=(sj1*x999);
evalcond[0]=(((sj4*x1004))+(((-1.0)*r10*x1020))+(((-1.0)*r12*x1013))+x998);
evalcond[1]=(((sj4*x1007))+(((-1.0)*x999))+(((-1.0)*r02*x1013))+(((-1.0)*r00*x1020)));
evalcond[2]=((((-1.0)*x1012*x1018))+((x1014*x1021))+(((0.612)*x1021))+(((-0.163941)*x999))+(((-1.0)*px))+(((-0.1157)*x1000))+(((-0.1157)*x1010)));
evalcond[3]=(((x1014*x1019))+(((-1.0)*py))+(((0.612)*x1019))+(((-0.1157)*x1009))+(((-0.1157)*x1008))+(((0.163941)*x998))+(((-1.0)*x1012*x1022)));
evalcond[4]=(((cj3*x1006))+((sj3*x1000))+((sj2*x1018))+((sj3*x1010))+(((-1.0)*x1003*x1015))+((x1005*x1007))+(((-1.0)*x1011*x1021)));
evalcond[5]=(((cj3*x1002))+(((-1.0)*x1011*x1019))+((sj3*x1008))+((sj3*x1009))+((x1004*x1005))+(((-1.0)*x1003*x1017))+((sj2*x1022)));
evalcond[6]=((((-1.0)*x1016*x998))+((cj3*x1000))+(((-1.0)*x1011*x1018))+(((-1.0)*cj4*x1001*x1007))+((cj3*x1010))+((sj3*x1015))+(((-1.0)*x1001*x1006)));
evalcond[7]=((((-1.0)*x1016*x999))+((cj3*x1008))+((cj3*x1009))+(((-1.0)*cj4*x1001*x1004))+((sj3*x1017))+(((-1.0)*x1001*x1002))+(((-1.0)*x1011*x1022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1023=IKPowWithIntegerCheck(cj3,-1);
if(!x1023.valid){
continue;
}
CheckValue<IkReal> x1024=IKPowWithIntegerCheck(r22,-1);
if(!x1024.valid){
continue;
}
sj4array[0]=((-1.0)*(x1023.value)*(x1024.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1025=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1025);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1025);
IkReal x1026=((16.0)*sj4);
IkReal x1027=(cj1*cj2);
IkReal x1028=((4.0)*sj3);
IkReal x1029=((8.0)*sj4);
IkReal x1030=((4.0)*cj4);
IkReal x1031=(sj1*sj2);
IkReal x1032=((4.0)*sj4);
IkReal x1033=(cj3*r02);
IkReal x1034=((16.0)*sj3);
IkReal x1035=((8.0)*sj3);
IkReal x1036=((12.0)*cj4);
IkReal x1037=((12.0)*sj4);
IkReal x1038=(cj3*r12);
IkReal x1039=(r11*x1028);
IkReal x1040=(r01*x1028);
IkReal x1041=(r01*x1031);
IkReal x1042=(cj3*cj4*r01);
IkReal x1043=(cj3*cj4*r11);
IkReal x1044=(cj3*r10*x1030);
IkReal x1045=(x1037*x1038);
IkReal x1046=(cj3*r00*x1030);
IkReal x1047=(x1033*x1037);
IkReal x1048=(r00*x1031*x1032);
IkReal x1049=(r02*x1031*x1036);
IkReal x1050=(r00*x1027*x1032);
IkReal x1051=(r02*x1027*x1036);
IkReal x1052=(r10*x1031*x1032);
IkReal x1053=(r12*x1027*x1036);
IkReal x1054=(r12*x1031*x1036);
IkReal x1055=(r10*x1027*x1032);
IkReal x1056=(x1050+x1039);
IkReal x1057=(x1052+x1040);
IkReal x1058=(x1044+x1048);
IkReal x1059=(x1051+x1045);
IkReal x1060=(x1055+x1046);
IkReal x1061=(x1054+x1047);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x1057))+x1053+x1060+(((-1.0)*x1061)))))))+(((0.5)*(IKabs(((((-1.0)*x1059))+(((-1.0)*x1056))+x1058+x1049)))))+(IKabs(((((-8.0)*x1042))+(((-1.0)*r11*x1027*x1029))+(((-1.0)*r00*x1035))+((r11*x1029*x1031)))))+(((0.5)*(IKabs(((((-1.0)*x1058))+x1056+(((-1.0)*x1032*x1038))+((r02*x1030*x1031))+(((-1.0)*r02*x1027*x1030)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1034))+((r01*x1026*x1027))+(((-1.0)*x1026*x1041))+(((-16.0)*x1043)))))))+(((0.5)*(IKabs((x1057+(((-1.0)*x1032*x1033))+(((-1.0)*r12*x1030*x1031))+(((-1.0)*x1060))+((r12*x1027*x1030)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x1026*x1027))+((r11*x1026*x1031))+(((-16.0)*x1042))+(((-1.0)*r00*x1034)))))))+(IKabs(((((-1.0)*r10*x1035))+(((-8.0)*x1043))+((r01*x1027*x1029))+(((-1.0)*x1029*x1041)))))+(((0.5)*(IKabs((x1053+x1057+(((-1.0)*x1061))+(((-1.0)*x1060)))))))+(((0.5)*(IKabs(((((-1.0)*x1059))+(((-1.0)*x1058))+x1056+x1049))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1062=(r10*sj3);
IkReal x1063=(r01*sj4);
IkReal x1064=(cj1*cj2);
IkReal x1065=(cj3*cj4);
IkReal x1066=(sj1*sj2);
IkReal x1067=(cj4*r02);
IkReal x1068=((4.0)*r11*sj3);
IkReal x1069=(cj3*r12*sj4);
IkReal x1070=((4.0)*r00*sj4);
IkReal x1071=((4.0)*r10*x1065);
IkReal x1072=((12.0)*x1069);
IkReal x1073=((4.0)*x1069);
IkReal x1074=(x1064*x1070);
IkReal x1075=(x1066*x1070);
IkReal x1076=((12.0)*x1066*x1067);
IkReal x1077=((12.0)*x1064*x1067);
IkReal x1078=((4.0)*x1066*x1067);
IkReal x1079=((4.0)*x1064*x1067);
IkReal x1080=(x1074+x1068);
IkReal x1081=(x1075+x1071);
IkReal x1082=(x1079+x1073);
IkReal x1083=(x1077+x1072);
IkReal x1084=((((-8.0)*r11*x1065))+(((-8.0)*x1063*x1066))+(((8.0)*x1063*x1064))+(((-8.0)*x1062)));
op[0]=(x1078+x1080+(((-1.0)*x1081))+(((-1.0)*x1082)));
op[1]=x1084;
op[2]=(x1076+x1080+(((-1.0)*x1083))+(((-1.0)*x1081)));
op[3]=((((-16.0)*x1063*x1066))+(((16.0)*x1063*x1064))+(((-16.0)*r11*x1065))+(((-16.0)*x1062)));
op[4]=(x1076+x1081+(((-1.0)*x1083))+(((-1.0)*x1080)));
op[5]=x1084;
op[6]=(x1078+x1081+(((-1.0)*x1080))+(((-1.0)*x1082)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1085=(cj1*cj2);
IkReal x1086=((4.0)*cj4);
IkReal x1087=(sj1*sj2);
IkReal x1088=((4.0)*sj4);
IkReal x1089=(r00*sj3);
IkReal x1090=(cj3*r02);
IkReal x1091=((4.0)*r01*sj3);
IkReal x1092=((16.0)*r11*sj4);
IkReal x1093=(cj3*cj4*r01);
IkReal x1094=((12.0)*cj4*r12);
IkReal x1095=((8.0)*r11*sj4);
IkReal x1096=(cj3*r00*x1086);
IkReal x1097=((12.0)*sj4*x1090);
IkReal x1098=(x1088*x1090);
IkReal x1099=(r10*x1085*x1088);
IkReal x1100=(r10*x1087*x1088);
IkReal x1101=(x1085*x1094);
IkReal x1102=(x1087*x1094);
IkReal x1103=(r12*x1085*x1086);
IkReal x1104=(r12*x1086*x1087);
IkReal x1105=(x1100+x1091);
IkReal x1106=(x1096+x1099);
IkReal x1107=(x1104+x1098);
IkReal x1108=(x1102+x1097);
IkReal x1109=(((x1087*x1095))+(((-8.0)*x1093))+(((-1.0)*x1085*x1095))+(((-8.0)*x1089)));
j5evalpoly[0]=(x1106+x1103+(((htj5*htj5*htj5*htj5)*((x1105+x1101+(((-1.0)*x1106))+(((-1.0)*x1108))))))+(((-1.0)*x1105))+(((-1.0)*x1107))+((htj5*x1109))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1105+x1103+(((-1.0)*x1107))+(((-1.0)*x1106))))))+((x1109*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*((((x1087*x1092))+(((-1.0)*x1085*x1092))+(((-16.0)*x1093))+(((-16.0)*x1089))))))+(((htj5*htj5)*((x1106+x1101+(((-1.0)*x1105))+(((-1.0)*x1108)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1110=(cj5*sj4);
IkReal x1111=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1111))+(((-1.0)*r00*x1110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1111))+((cj4*r12))+((r10*x1110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1111))+(((-1.0)*r00*x1110))))+IKsqr(((((-1.0)*r11*x1111))+((cj4*r12))+((r10*x1110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1111))+(((-1.0)*r00*x1110))), ((((-1.0)*r11*x1111))+((cj4*r12))+((r10*x1110))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1112=IKcos(j0);
IkReal x1113=IKsin(j0);
IkReal x1114=(cj5*r01);
IkReal x1115=((1.0)*sj3);
IkReal x1116=(r12*sj4);
IkReal x1117=((1.0)*cj3);
IkReal x1118=(r11*sj5);
IkReal x1119=(cj3*cj4);
IkReal x1120=(r02*sj4);
IkReal x1121=(r01*sj5);
IkReal x1122=(r10*sj5);
IkReal x1123=(cj5*r11);
IkReal x1124=(r00*sj5);
IkReal x1125=((1.0)*cj2);
IkReal x1126=((0.5723)*sj2);
IkReal x1127=((1.0)*cj4);
IkReal x1128=((0.5723)*cj2);
IkReal x1129=(cj4*cj5*r00);
IkReal x1130=((1.0)*cj1*sj2);
IkReal x1131=(cj4*cj5*r10);
IkReal x1132=(sj1*x1112);
IkReal x1133=(cj1*x1113);
IkReal x1134=((1.0)*cj5*sj4);
IkReal x1135=(cj1*x1112);
IkReal x1136=(sj1*x1113);
evalcond[0]=(x1112+(((-1.0)*r12*x1127))+(((-1.0)*r10*x1134))+((sj4*x1118)));
evalcond[1]=(((sj4*x1121))+(((-1.0)*x1113))+(((-1.0)*r02*x1127))+(((-1.0)*r00*x1134)));
evalcond[2]=((((-0.163941)*x1113))+(((-1.0)*x1126*x1132))+(((-1.0)*px))+(((-0.1157)*x1114))+(((-0.1157)*x1124))+((x1128*x1135))+(((0.612)*x1135)));
evalcond[3]=((((-1.0)*x1126*x1136))+(((-1.0)*py))+(((0.163941)*x1112))+(((-0.1157)*x1122))+(((-0.1157)*x1123))+((x1128*x1133))+(((0.612)*x1133)));
evalcond[4]=(((sj3*x1114))+(((-1.0)*x1117*x1129))+((x1119*x1121))+((sj2*x1132))+((sj3*x1124))+(((-1.0)*x1125*x1135))+((cj3*x1120)));
evalcond[5]=((((-1.0)*x1117*x1131))+((sj2*x1136))+((sj3*x1123))+((sj3*x1122))+((cj3*x1116))+(((-1.0)*x1125*x1133))+((x1118*x1119)));
evalcond[6]=((((-1.0)*x1112*x1130))+((sj3*x1129))+(((-1.0)*cj4*x1115*x1121))+((cj3*x1114))+(((-1.0)*x1125*x1132))+(((-1.0)*x1115*x1120))+((cj3*x1124)));
evalcond[7]=((((-1.0)*cj4*x1115*x1118))+(((-1.0)*x1113*x1130))+((sj3*x1131))+(((-1.0)*x1125*x1136))+(((-1.0)*x1115*x1116))+((cj3*x1123))+((cj3*x1122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1137=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1137);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1137);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1138=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1138);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1138);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1139=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1139);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1139);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1140=IKPowWithIntegerCheck(r22,-1);
if(!x1140.valid){
continue;
}
sj4array[0]=((-1.0)*(x1140.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1141=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1141);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1141);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
IkReal x1142=x1143.value;
j5array[0]=((-1.0)*x1142);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1142)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1144=(cj5*sj4);
IkReal x1145=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1144))+((r01*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1145))+((r10*x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1144))+((r01*x1145))))+IKsqr(((((-1.0)*r11*x1145))+((r10*x1144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1144))+((r01*x1145))), ((((-1.0)*r11*x1145))+((r10*x1144))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1146=IKcos(j0);
IkReal x1147=IKsin(j0);
IkReal x1148=(cj5*r01);
IkReal x1149=(sj4*sj5);
IkReal x1150=((0.1157)*sj5);
IkReal x1151=((0.612)*cj1);
IkReal x1152=(cj5*r11);
IkReal x1153=((1.0)*cj1*sj2);
IkReal x1154=((1.0)*cj2*sj1);
IkReal x1155=((1.0)*cj5*sj4);
evalcond[0]=(x1146+((r11*x1149))+(((-1.0)*r10*x1155)));
evalcond[1]=((((-1.0)*r00*x1155))+(((-1.0)*x1147))+((r01*x1149)));
evalcond[2]=(((r00*sj5))+x1148+(((-1.0)*x1146*x1153))+(((-1.0)*x1146*x1154)));
evalcond[3]=(x1152+((r10*sj5))+(((-1.0)*x1147*x1154))+(((-1.0)*x1147*x1153)));
evalcond[4]=(((x1146*x1151))+(((-1.0)*r00*x1150))+(((-1.0)*px))+(((-0.163941)*x1147))+(((-0.1157)*x1148)));
evalcond[5]=((((0.163941)*x1146))+(((-1.0)*py))+((x1147*x1151))+(((-1.0)*r10*x1150))+(((-0.1157)*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1156=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1156);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1156);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(r22,-1);
if(!x1157.valid){
continue;
}
sj4array[0]=((x1157.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1160 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1160.valid){
continue;
}
IkReal x1159=x1160.value;
j5array[0]=((-1.0)*x1159);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1159)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1161=(cj5*sj4);
IkReal x1162=(sj4*sj5);
if( IKabs((((r01*x1162))+(((-1.0)*r00*x1161)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1161))+(((-1.0)*r11*x1162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1162))+(((-1.0)*r00*x1161))))+IKsqr((((r10*x1161))+(((-1.0)*r11*x1162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1162))+(((-1.0)*r00*x1161))), (((r10*x1161))+(((-1.0)*r11*x1162))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1163=IKcos(j0);
IkReal x1164=IKsin(j0);
IkReal x1165=(cj5*r01);
IkReal x1166=(sj4*sj5);
IkReal x1167=((1.0)*sj5);
IkReal x1168=((1.0)*cj5);
IkReal x1169=((0.1157)*sj5);
IkReal x1170=((0.612)*cj1);
IkReal x1171=((1.0)*cj1*sj2);
IkReal x1172=((1.0)*cj2*sj1);
evalcond[0]=(x1163+(((-1.0)*r10*sj4*x1168))+((r11*x1166)));
evalcond[1]=(((r01*x1166))+(((-1.0)*x1164))+(((-1.0)*r00*sj4*x1168)));
evalcond[2]=(((x1163*x1170))+(((-0.163941)*x1164))+(((-1.0)*px))+(((-0.1157)*x1165))+(((-1.0)*r00*x1169)));
evalcond[3]=(((x1164*x1170))+(((-1.0)*r10*x1169))+(((-1.0)*py))+(((0.163941)*x1163))+(((-0.1157)*cj5*r11)));
evalcond[4]=((((-1.0)*x1163*x1171))+(((-1.0)*x1163*x1172))+(((-1.0)*r00*x1167))+(((-1.0)*x1165)));
evalcond[5]=((((-1.0)*r10*x1167))+(((-1.0)*r11*x1168))+(((-1.0)*x1164*x1172))+(((-1.0)*x1164*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1173=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1173);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1173);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(r22,-1);
if(!x1174.valid){
continue;
}
sj4array[0]=((x1174.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1175=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1175);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1175);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1177 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1177.valid){
continue;
}
IkReal x1176=x1177.value;
j5array[0]=((-1.0)*x1176);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1176)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1178=(cj5*sj4);
IkReal x1179=(sj4*sj5);
if( IKabs((((r01*x1179))+(((-1.0)*r00*x1178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1178))+(((-1.0)*r11*x1179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1179))+(((-1.0)*r00*x1178))))+IKsqr((((r10*x1178))+(((-1.0)*r11*x1179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1179))+(((-1.0)*r00*x1178))), (((r10*x1178))+(((-1.0)*r11*x1179))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1180=IKcos(j0);
IkReal x1181=IKsin(j0);
IkReal x1182=(cj5*r01);
IkReal x1183=(sj4*sj5);
IkReal x1184=((0.1157)*sj5);
IkReal x1185=(cj5*r11);
IkReal x1186=((1.0)*x1181);
IkReal x1187=(cj1*x1181);
IkReal x1188=((1.0)*cj5*sj4);
IkReal x1189=(sj1*sj2*x1180);
IkReal x1190=(cj1*cj2*x1180);
IkReal x1191=(sj1*sj2*x1181);
evalcond[0]=(x1180+(((-1.0)*r10*x1188))+((r11*x1183)));
evalcond[1]=(((r01*x1183))+(((-1.0)*x1186))+(((-1.0)*r00*x1188)));
evalcond[2]=(((r00*sj5))+x1189+x1182+(((-1.0)*x1190)));
evalcond[3]=(x1185+x1191+((r10*sj5))+(((-1.0)*cj1*cj2*x1186)));
evalcond[4]=((((0.612)*cj1*x1180))+(((-0.163941)*x1181))+(((0.5723)*x1190))+(((-1.0)*px))+(((-0.1157)*x1182))+(((-1.0)*r00*x1184))+(((-0.5723)*x1189)));
evalcond[5]=((((-0.5723)*x1191))+(((0.163941)*x1180))+(((-1.0)*r10*x1184))+(((-1.0)*py))+(((-0.1157)*x1185))+(((0.5723)*cj2*x1187))+(((0.612)*x1187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1192=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1192);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1192);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(r22,-1);
if(!x1193.valid){
continue;
}
sj4array[0]=((-1.0)*(x1193.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1194=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1194);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1194);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
IkReal x1195=x1196.value;
j5array[0]=((-1.0)*x1195);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1195)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1197=(cj5*sj4);
IkReal x1198=(sj4*sj5);
if( IKabs((((r01*x1198))+(((-1.0)*r00*x1197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1197))+(((-1.0)*r11*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1198))+(((-1.0)*r00*x1197))))+IKsqr((((r10*x1197))+(((-1.0)*r11*x1198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1198))+(((-1.0)*r00*x1197))), (((r10*x1197))+(((-1.0)*r11*x1198))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1199=IKcos(j0);
IkReal x1200=IKsin(j0);
IkReal x1201=(cj5*r01);
IkReal x1202=(sj4*sj5);
IkReal x1203=((1.0)*cj5);
IkReal x1204=(r10*sj5);
IkReal x1205=(r00*sj5);
IkReal x1206=(cj1*x1200);
IkReal x1207=(sj1*sj2*x1199);
IkReal x1208=(cj1*cj2*x1199);
IkReal x1209=(sj1*sj2*x1200);
evalcond[0]=(x1199+(((-1.0)*r10*sj4*x1203))+((r11*x1202)));
evalcond[1]=((((-1.0)*r00*sj4*x1203))+(((-1.0)*x1200))+((r01*x1202)));
evalcond[2]=(x1207+(((-1.0)*x1208))+(((-1.0)*x1201))+(((-1.0)*x1205)));
evalcond[3]=(x1209+(((-1.0)*cj2*x1206))+(((-1.0)*x1204))+(((-1.0)*r11*x1203)));
evalcond[4]=((((0.612)*cj1*x1199))+(((-0.1157)*x1201))+(((-0.1157)*x1205))+(((-0.5723)*x1207))+(((0.5723)*x1208))+(((-1.0)*px))+(((-0.163941)*x1200)));
evalcond[5]=((((0.612)*x1206))+(((-0.1157)*x1204))+(((-0.5723)*x1209))+(((0.163941)*x1199))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+(((0.5723)*cj2*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(r22,-1);
if(!x1210.valid){
continue;
}
CheckValue<IkReal> x1211=IKPowWithIntegerCheck(sj3,-1);
if(!x1211.valid){
continue;
}
sj4array[0]=((x1210.value)*(x1211.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1212=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1212);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1212);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1213=((4.0)*r01);
IkReal x1214=((16.0)*r00);
IkReal x1215=(cj3*sj2);
IkReal x1216=((8.0)*r00);
IkReal x1217=(cj2*cj3);
IkReal x1218=(cj4*r01);
IkReal x1219=((16.0)*cj1);
IkReal x1220=((8.0)*sj1);
IkReal x1221=((16.0)*sj1);
IkReal x1222=((8.0)*cj1);
IkReal x1223=(sj2*sj3);
IkReal x1224=(cj2*sj3);
IkReal x1225=(sj1*x1224);
IkReal x1226=((4.0)*cj4*r00);
IkReal x1227=(((sj1*x1223*x1226))+((sj1*x1213*x1215))+((cj1*x1213*x1223))+((x1213*x1225)));
IkReal x1228=(((cj1*x1224*x1226))+((cj1*x1215*x1226))+((cj1*x1213*x1217))+((sj1*x1217*x1226)));
IkReal x1229=(x1228+(((-1.0)*x1227)));
IkReal x1230=(((x1217*x1218*x1220))+((sj1*x1215*x1216))+((x1216*x1225))+((cj1*x1216*x1223))+(((-1.0)*x1218*x1220*x1223))+((x1218*x1222*x1224))+(((-1.0)*cj1*x1216*x1217))+((x1215*x1218*x1222)));
IkReal x1231=(x1227+(((-1.0)*x1228)));
op[0]=x1229;
op[1]=x1230;
op[2]=x1229;
op[3]=(((x1214*x1225))+((x1217*x1218*x1221))+((x1218*x1219*x1224))+(((-1.0)*x1218*x1221*x1223))+((x1215*x1218*x1219))+((cj1*x1214*x1223))+(((-1.0)*cj1*x1214*x1217))+((sj1*x1214*x1215)));
op[4]=x1231;
op[5]=x1230;
op[6]=x1231;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1232=(cj5*sj4);
IkReal x1233=(sj4*sj5);
if( IKabs((((r01*x1233))+(((-1.0)*r00*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1233))+((r10*x1232)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1233))+(((-1.0)*r00*x1232))))+IKsqr(((((-1.0)*r11*x1233))+((r10*x1232))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1233))+(((-1.0)*r00*x1232))), ((((-1.0)*r11*x1233))+((r10*x1232))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1234=IKcos(j0);
IkReal x1235=IKsin(j0);
IkReal x1236=(cj5*r01);
IkReal x1237=((1.0)*cj3);
IkReal x1238=(r11*sj5);
IkReal x1239=(r01*sj5);
IkReal x1240=(r10*sj5);
IkReal x1241=(cj5*r11);
IkReal x1242=(cj3*cj4);
IkReal x1243=(r00*sj5);
IkReal x1244=((1.0)*cj2);
IkReal x1245=((0.5723)*cj2);
IkReal x1246=((0.5723)*sj2);
IkReal x1247=(cj4*cj5*r00);
IkReal x1248=((1.0)*cj1*sj2);
IkReal x1249=(cj4*cj5*r10);
IkReal x1250=((1.0)*cj4*sj3);
IkReal x1251=(sj1*x1234);
IkReal x1252=(cj1*x1235);
IkReal x1253=((1.0)*cj5*sj4);
IkReal x1254=(cj1*x1234);
IkReal x1255=(sj1*x1235);
evalcond[0]=(x1234+((sj4*x1238))+(((-1.0)*r10*x1253)));
evalcond[1]=((((-1.0)*x1235))+(((-1.0)*r00*x1253))+((sj4*x1239)));
evalcond[2]=(((sj3*x1236))+((x1239*x1242))+((sj3*x1243))+(((-1.0)*x1244*x1254))+(((-1.0)*x1237*x1247))+((sj2*x1251)));
evalcond[3]=(((sj3*x1241))+((sj3*x1240))+(((-1.0)*x1244*x1252))+((x1238*x1242))+(((-1.0)*x1237*x1249))+((sj2*x1255)));
evalcond[4]=(((cj3*x1236))+((sj3*x1247))+(((-1.0)*x1239*x1250))+(((-1.0)*x1244*x1251))+((cj3*x1243))+(((-1.0)*x1234*x1248)));
evalcond[5]=((((-1.0)*x1238*x1250))+((sj3*x1249))+(((-1.0)*x1235*x1248))+(((-1.0)*x1244*x1255))+((cj3*x1241))+((cj3*x1240)));
evalcond[6]=((((0.612)*x1254))+((x1245*x1254))+(((-1.0)*x1246*x1251))+(((-0.163941)*x1235))+(((-0.1157)*x1243))+(((-1.0)*px))+(((-0.1157)*x1236)));
evalcond[7]=((((0.612)*x1252))+((x1245*x1252))+(((-1.0)*x1246*x1255))+(((-0.1157)*x1240))+(((-0.1157)*x1241))+(((-1.0)*py))+(((0.163941)*x1234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1256=IKPowWithIntegerCheck(cj3,-1);
if(!x1256.valid){
continue;
}
CheckValue<IkReal> x1257=IKPowWithIntegerCheck(r22,-1);
if(!x1257.valid){
continue;
}
sj4array[0]=((-1.0)*(x1256.value)*(x1257.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1258=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1258);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1258);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1259=((4.0)*r01);
IkReal x1260=((16.0)*r00);
IkReal x1261=(cj3*sj2);
IkReal x1262=((8.0)*r00);
IkReal x1263=(cj2*cj3);
IkReal x1264=(cj4*r01);
IkReal x1265=((16.0)*cj1);
IkReal x1266=((8.0)*sj1);
IkReal x1267=((16.0)*sj1);
IkReal x1268=((8.0)*cj1);
IkReal x1269=(sj2*sj3);
IkReal x1270=(cj2*sj3);
IkReal x1271=(sj1*x1270);
IkReal x1272=((4.0)*cj4*r00);
IkReal x1273=(((cj1*x1259*x1269))+((x1259*x1271))+((sj1*x1269*x1272))+((sj1*x1259*x1261)));
IkReal x1274=(((cj1*x1259*x1263))+((cj1*x1261*x1272))+((sj1*x1263*x1272))+((cj1*x1270*x1272)));
IkReal x1275=(x1274+(((-1.0)*x1273)));
IkReal x1276=(((sj1*x1261*x1262))+((x1264*x1268*x1270))+(((-1.0)*cj1*x1262*x1263))+((x1262*x1271))+((x1263*x1264*x1266))+((cj1*x1262*x1269))+(((-1.0)*x1264*x1266*x1269))+((x1261*x1264*x1268)));
IkReal x1277=(x1273+(((-1.0)*x1274)));
op[0]=x1275;
op[1]=x1276;
op[2]=x1275;
op[3]=(((cj1*x1260*x1269))+(((-1.0)*cj1*x1260*x1263))+(((-1.0)*x1264*x1267*x1269))+((x1260*x1271))+((x1264*x1265*x1270))+((sj1*x1260*x1261))+((x1263*x1264*x1267))+((x1261*x1264*x1265)));
op[4]=x1277;
op[5]=x1276;
op[6]=x1277;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1278=(cj5*sj4);
IkReal x1279=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1278))+((r01*x1279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1278))+(((-1.0)*r11*x1279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1278))+((r01*x1279))))+IKsqr((((r10*x1278))+(((-1.0)*r11*x1279))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1278))+((r01*x1279))), (((r10*x1278))+(((-1.0)*r11*x1279))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1280=IKcos(j0);
IkReal x1281=IKsin(j0);
IkReal x1282=(cj5*r01);
IkReal x1283=((1.0)*cj3);
IkReal x1284=(r11*sj5);
IkReal x1285=(r01*sj5);
IkReal x1286=(r10*sj5);
IkReal x1287=(cj5*r11);
IkReal x1288=(cj3*cj4);
IkReal x1289=(r00*sj5);
IkReal x1290=((1.0)*cj2);
IkReal x1291=((0.5723)*cj2);
IkReal x1292=((0.5723)*sj2);
IkReal x1293=(cj4*cj5*r00);
IkReal x1294=((1.0)*cj1*sj2);
IkReal x1295=(cj4*cj5*r10);
IkReal x1296=((1.0)*cj4*sj3);
IkReal x1297=(sj1*x1280);
IkReal x1298=(cj1*x1281);
IkReal x1299=((1.0)*cj5*sj4);
IkReal x1300=(cj1*x1280);
IkReal x1301=(sj1*x1281);
evalcond[0]=(x1280+((sj4*x1284))+(((-1.0)*r10*x1299)));
evalcond[1]=((((-1.0)*x1281))+(((-1.0)*r00*x1299))+((sj4*x1285)));
evalcond[2]=(((x1285*x1288))+((sj2*x1297))+(((-1.0)*x1283*x1293))+((sj3*x1282))+((sj3*x1289))+(((-1.0)*x1290*x1300)));
evalcond[3]=(((sj2*x1301))+(((-1.0)*x1283*x1295))+((x1284*x1288))+(((-1.0)*x1290*x1298))+((sj3*x1286))+((sj3*x1287)));
evalcond[4]=(((sj3*x1293))+(((-1.0)*x1280*x1294))+(((-1.0)*x1290*x1297))+((cj3*x1282))+((cj3*x1289))+(((-1.0)*x1285*x1296)));
evalcond[5]=((((-1.0)*x1284*x1296))+((sj3*x1295))+(((-1.0)*x1281*x1294))+((cj3*x1286))+((cj3*x1287))+(((-1.0)*x1290*x1301)));
evalcond[6]=(((x1291*x1300))+(((0.612)*x1300))+(((-0.163941)*x1281))+(((-0.1157)*x1289))+(((-0.1157)*x1282))+(((-1.0)*px))+(((-1.0)*x1292*x1297)));
evalcond[7]=((((-0.1157)*x1287))+(((-0.1157)*x1286))+((x1291*x1298))+(((-1.0)*py))+(((0.163941)*x1280))+(((-1.0)*x1292*x1301))+(((0.612)*x1298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1304 = IKatan2WithCheck(IkReal(((-0.1157)*r21)),IkReal(((-0.1157)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1304.valid){
continue;
}
IkReal x1302=((1.0)*(x1304.value));
if((((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1305=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21)))))),-1);
if(!x1305.valid){
continue;
}
if( (((-1.0)*(x1305.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1305.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1303=((-1.0)*(IKasin(((-1.0)*(x1305.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1))))))));
j5array[0]=((((-1.0)*x1303))+(((-1.0)*x1302)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1302))+(((1.0)*x1303)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break;
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1306=cj5*cj5;
IkReal x1307=r21*r21;
IkReal x1308=(sj3*x1306);
IkReal x1309=(((sj3*(r22*r22)))+((x1308*(r20*r20)))+((sj3*x1307))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1307*x1308)));
j4eval[0]=x1309;
j4eval[1]=IKsign(x1309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1310=cj5*cj5;
IkReal x1311=r21*r21;
IkReal x1312=((1.0)*cj3);
IkReal x1313=(cj3*x1310);
IkReal x1314=((((-1.0)*x1311*x1312))+((x1311*x1313))+(((-1.0)*x1312*(r22*r22)))+(((-1.0)*x1310*x1312*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1315=cj1*cj1;
IkReal x1316=cj2*cj2;
IkReal x1317=(cj1*sj1*sj2);
IkReal x1318=(cj2*x1315);
IkReal x1319=(x1315*x1316);
j0eval[0]=((7.53782945427275)+x1315+(((-6.96618904215118)*x1316))+(((13.9323780843024)*x1319))+(((14.8988561726246)*x1318))+(((-14.8988561726246)*x1317))+(((-13.9323780843024)*cj2*x1317)));
j0eval[1]=IKsign(((354403941481.0)+(((-327527290000.0)*x1316))+(((-700495200000.0)*x1317))+(((655054580000.0)*x1319))+(((700495200000.0)*x1318))+(((-655054580000.0)*cj2*x1317))+(((47016710000.0)*x1315))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1320=((1.0)*cj5);
IkReal x1321=((1.0)*sj5);
IkReal x1322=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1322;
j0eval[1]=((IKabs(((((-1.0)*r01*x1320))+(((-1.0)*r00*x1321)))))+(IKabs(((((-1.0)*r11*x1320))+(((-1.0)*r10*x1321))))));
j0eval[2]=IKsign(x1322);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1323=cj5*cj5;
IkReal x1324=r21*r21;
IkReal x1325=(sj1*sj2);
IkReal x1326=(r21*sj5);
IkReal x1327=(cj5*r20);
IkReal x1328=(cj1*cj2);
IkReal x1329=(x1324+(((-1.0)*x1323*x1324))+((x1323*(r20*r20)))+(r22*r22)+(((-2.0)*x1326*x1327)));
j4eval[0]=x1329;
j4eval[1]=IKsign(x1329);
j4eval[2]=((IKabs(((((-1.0)*r22*x1328))+((r22*x1325)))))+(IKabs((((x1327*x1328))+((x1325*x1326))+(((-1.0)*x1325*x1327))+(((-1.0)*x1326*x1328))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1330=IKsin(j0);
IkReal x1331=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x1330))+(((0.612)*x1331)));
evalcond[1]=((((0.163941)*x1331))+(((-1.0)*py))+(((0.612)*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1332=((1.0)*cj5);
IkReal x1333=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1332)));
j4eval[0]=x1333;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1332)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1333);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1334=((1.0)*cj5);
IkReal x1335=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1334)));
j4eval[0]=x1335;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1334))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1336=cj5*cj5;
IkReal x1337=((1.0)*sj5);
IkReal x1338=(cj5*r20);
IkReal x1339=(r11*r21);
IkReal x1340=(x1339+((r10*r20*x1336))+((r12*r22))+(((-1.0)*x1336*x1339))+(((-1.0)*cj5*r10*r21*x1337))+(((-1.0)*r11*x1337*x1338)));
j4eval[0]=x1340;
j4eval[1]=IKsign(x1340);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1337))+((cj0*x1338)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1341=cj5*cj5;
IkReal x1342=((1.0)*sj5);
IkReal x1343=(cj5*r20);
IkReal x1344=(r11*r21);
CheckValue<IkReal> x1345 = IKatan2WithCheck(IkReal((((cj0*x1343))+(((-1.0)*cj0*r21*x1342)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1345.valid){
continue;
}
CheckValue<IkReal> x1346=IKPowWithIntegerCheck(IKsign((x1344+(((-1.0)*r11*x1342*x1343))+(((-1.0)*cj5*r10*r21*x1342))+(((-1.0)*x1341*x1344))+((r12*r22))+((r10*r20*x1341)))),-1);
if(!x1346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1345.value)+(((1.5707963267949)*(x1346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1347=IKsin(j4);
IkReal x1348=IKcos(j4);
IkReal x1349=((1.0)*sj0);
IkReal x1350=(cj5*r00);
IkReal x1351=(r11*sj5);
IkReal x1352=(cj5*r10);
IkReal x1353=(r21*sj5);
IkReal x1354=(cj5*r20);
IkReal x1355=(r01*sj5);
IkReal x1356=((1.0)*x1348);
IkReal x1357=((1.0)*x1347);
evalcond[0]=((((-1.0)*x1354*x1357))+(((-1.0)*r22*x1356))+((x1347*x1353)));
evalcond[1]=((((-1.0)*r22*x1357))+((x1348*x1354))+(((-1.0)*x1353*x1356)));
evalcond[2]=((((-1.0)*r12*x1356))+(((-1.0)*x1352*x1357))+cj0+((x1347*x1351)));
evalcond[3]=((((-1.0)*x1349))+(((-1.0)*r02*x1356))+(((-1.0)*x1350*x1357))+((x1347*x1355)));
evalcond[4]=((((-1.0)*r02*x1357))+(((-1.0)*x1355*x1356))+((x1348*x1350))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1357))+(((-1.0)*x1349))+((x1348*x1352))+(((-1.0)*x1351*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1358=((1.0)*cj5);
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1358)))),-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1359.value)))+(x1360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1361=IKsin(j4);
IkReal x1362=IKcos(j4);
IkReal x1363=((1.0)*sj0);
IkReal x1364=(cj5*r00);
IkReal x1365=(r11*sj5);
IkReal x1366=(cj5*r10);
IkReal x1367=(r21*sj5);
IkReal x1368=(cj5*r20);
IkReal x1369=(r01*sj5);
IkReal x1370=((1.0)*x1362);
IkReal x1371=((1.0)*x1361);
evalcond[0]=(((x1361*x1367))+(((-1.0)*r22*x1370))+(((-1.0)*x1368*x1371)));
evalcond[1]=((((-1.0)*r22*x1371))+(((-1.0)*x1367*x1370))+((x1362*x1368)));
evalcond[2]=(cj0+((x1361*x1365))+(((-1.0)*r12*x1370))+(((-1.0)*x1366*x1371)));
evalcond[3]=(((x1361*x1369))+(((-1.0)*r02*x1370))+(((-1.0)*x1364*x1371))+(((-1.0)*x1363)));
evalcond[4]=((((-1.0)*r02*x1371))+(((-1.0)*x1369*x1370))+(((-1.0)*cj0))+((x1362*x1364)));
evalcond[5]=((((-1.0)*x1365*x1370))+(((-1.0)*r12*x1371))+((x1362*x1366))+(((-1.0)*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1372=((1.0)*cj5);
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1372))+(((-1.0)*r00*sj5)))),-1);
if(!x1374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1373.value)+(((1.5707963267949)*(x1374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1375=IKsin(j4);
IkReal x1376=IKcos(j4);
IkReal x1377=((1.0)*sj0);
IkReal x1378=(cj5*r00);
IkReal x1379=(r11*sj5);
IkReal x1380=(cj5*r10);
IkReal x1381=(r21*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=(r01*sj5);
IkReal x1384=((1.0)*x1376);
IkReal x1385=((1.0)*x1375);
evalcond[0]=((((-1.0)*x1382*x1385))+((x1375*x1381))+(((-1.0)*r22*x1384)));
evalcond[1]=(((x1376*x1382))+(((-1.0)*x1381*x1384))+(((-1.0)*r22*x1385)));
evalcond[2]=((((-1.0)*r12*x1384))+((x1375*x1379))+cj0+(((-1.0)*x1380*x1385)));
evalcond[3]=((((-1.0)*r02*x1384))+(((-1.0)*x1377))+((x1375*x1383))+(((-1.0)*x1378*x1385)));
evalcond[4]=(((x1376*x1378))+(((-1.0)*x1383*x1384))+(((-1.0)*r02*x1385))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1385))+(((-1.0)*x1377))+((x1376*x1380))+(((-1.0)*x1379*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1386=IKsin(j0);
IkReal x1387=IKcos(j0);
evalcond[0]=((((-0.163941)*x1386))+(((-1.0)*px))+(((0.612)*x1387)));
evalcond[1]=((((0.163941)*x1387))+(((-1.0)*py))+(((0.612)*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1388=((1.0)*cj5);
IkReal x1389=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1388)));
j4eval[0]=x1389;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1388))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1390=cj5*cj5;
IkReal x1391=((1.0)*r21);
IkReal x1392=(cj5*sj5);
IkReal x1393=((1.0)*r20);
IkReal x1394=((((-1.0)*r01*x1390*x1391))+(((-1.0)*r01*x1392*x1393))+((r01*r21))+(((-1.0)*r00*x1391*x1392))+((r02*r22))+((r00*r20*x1390)));
j4eval[0]=x1394;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1393)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1395=cj5*cj5;
IkReal x1396=(r21*sj5);
IkReal x1397=(r11*r21);
IkReal x1398=((1.0)*cj5*r20);
IkReal x1399=(x1397+((r12*r22))+(((-1.0)*r11*sj5*x1398))+((r10*r20*x1395))+(((-1.0)*cj5*r10*x1396))+(((-1.0)*x1395*x1397)));
j4eval[0]=x1399;
j4eval[1]=((IKabs((((sj0*x1396))+(((-1.0)*sj0*x1398)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1400=cj5*cj5;
IkReal x1401=(r21*sj5);
IkReal x1402=(r11*r21);
IkReal x1403=((1.0)*cj5*r20);
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1403))+((sj0*x1401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1401))+(((-1.0)*r11*sj5*x1403))+((r10*r20*x1400))+((r12*r22))+(((-1.0)*x1400*x1402))+x1402)),-1);
if(!x1405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1404.value)+(((1.5707963267949)*(x1405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j4);
IkReal x1407=IKcos(j4);
IkReal x1408=(r11*sj5);
IkReal x1409=(cj5*r00);
IkReal x1410=(cj5*r10);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r01*sj5);
IkReal x1414=((1.0)*x1407);
IkReal x1415=((1.0)*x1406);
evalcond[0]=((((-1.0)*x1412*x1415))+(((-1.0)*r22*x1414))+((x1406*x1411)));
evalcond[1]=(((x1407*x1412))+(((-1.0)*r22*x1415))+(((-1.0)*x1411*x1414)));
evalcond[2]=(cj0+((x1406*x1408))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1414)));
evalcond[3]=(cj0+(((-1.0)*x1413*x1414))+(((-1.0)*r02*x1415))+((x1407*x1409)));
evalcond[4]=(((x1407*x1410))+sj0+(((-1.0)*x1408*x1414))+(((-1.0)*r12*x1415)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1414))+((x1406*x1413))+(((-1.0)*x1409*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=cj5*cj5;
IkReal x1417=((1.0)*r21);
IkReal x1418=(cj5*sj5);
IkReal x1419=((1.0)*r20);
CheckValue<IkReal> x1420 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1417*x1418))+((r01*r21))+(((-1.0)*r01*x1416*x1417))+((r00*r20*x1416))+((r02*r22))+(((-1.0)*r01*x1418*x1419)))),-1);
if(!x1421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1420.value)+(((1.5707963267949)*(x1421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1422=IKsin(j4);
IkReal x1423=IKcos(j4);
IkReal x1424=(r11*sj5);
IkReal x1425=(cj5*r00);
IkReal x1426=(cj5*r10);
IkReal x1427=(r21*sj5);
IkReal x1428=(cj5*r20);
IkReal x1429=(r01*sj5);
IkReal x1430=((1.0)*x1423);
IkReal x1431=((1.0)*x1422);
evalcond[0]=(((x1422*x1427))+(((-1.0)*r22*x1430))+(((-1.0)*x1428*x1431)));
evalcond[1]=(((x1423*x1428))+(((-1.0)*r22*x1431))+(((-1.0)*x1427*x1430)));
evalcond[2]=((((-1.0)*r12*x1430))+((x1422*x1424))+cj0+(((-1.0)*x1426*x1431)));
evalcond[3]=(cj0+((x1423*x1425))+(((-1.0)*x1429*x1430))+(((-1.0)*r02*x1431)));
evalcond[4]=((((-1.0)*r12*x1431))+sj0+((x1423*x1426))+(((-1.0)*x1424*x1430)));
evalcond[5]=((((-1.0)*sj0))+((x1422*x1429))+(((-1.0)*r02*x1430))+(((-1.0)*x1425*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1432=((1.0)*cj5);
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1432)))),-1);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1433.value)))+(x1434.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1435=IKsin(j4);
IkReal x1436=IKcos(j4);
IkReal x1437=(r11*sj5);
IkReal x1438=(cj5*r00);
IkReal x1439=(cj5*r10);
IkReal x1440=(r21*sj5);
IkReal x1441=(cj5*r20);
IkReal x1442=(r01*sj5);
IkReal x1443=((1.0)*x1436);
IkReal x1444=((1.0)*x1435);
evalcond[0]=((((-1.0)*r22*x1443))+((x1435*x1440))+(((-1.0)*x1441*x1444)));
evalcond[1]=((((-1.0)*r22*x1444))+((x1436*x1441))+(((-1.0)*x1440*x1443)));
evalcond[2]=(cj0+(((-1.0)*r12*x1443))+((x1435*x1437))+(((-1.0)*x1439*x1444)));
evalcond[3]=(((x1436*x1438))+cj0+(((-1.0)*r02*x1444))+(((-1.0)*x1442*x1443)));
evalcond[4]=(((x1436*x1439))+sj0+(((-1.0)*r12*x1444))+(((-1.0)*x1437*x1443)));
evalcond[5]=((((-1.0)*sj0))+((x1435*x1442))+(((-1.0)*x1438*x1444))+(((-1.0)*r02*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1445=((1.0)*cj5);
IkReal x1446=((((-1.0)*r01*x1445))+(((-1.0)*r00*sj5)));
j4eval[0]=x1446;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1445))))));
j4eval[2]=IKsign(x1446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1447=((1.0)*cj5);
IkReal x1448=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1447)));
j4eval[0]=x1448;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1447))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1449=cj5*cj5;
IkReal x1450=((1.0)*sj5);
IkReal x1451=(cj5*r20);
IkReal x1452=(r11*r21);
IkReal x1453=(((r12*r22))+(((-1.0)*r11*x1450*x1451))+x1452+(((-1.0)*x1449*x1452))+(((-1.0)*cj5*r10*r21*x1450))+((r10*r20*x1449)));
j4eval[0]=x1453;
j4eval[1]=IKsign(x1453);
j4eval[2]=((IKabs((((cj0*x1451))+(((-1.0)*cj0*r21*x1450)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1454=cj5*cj5;
IkReal x1455=((1.0)*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(r11*r21);
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((((cj0*x1456))+(((-1.0)*cj0*r21*x1455)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(IKsign((((r10*r20*x1454))+((r12*r22))+(((-1.0)*x1454*x1457))+(((-1.0)*r11*x1455*x1456))+x1457+(((-1.0)*cj5*r10*r21*x1455)))),-1);
if(!x1459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1458.value)+(((1.5707963267949)*(x1459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1460=IKsin(j4);
IkReal x1461=IKcos(j4);
IkReal x1462=((1.0)*sj0);
IkReal x1463=(cj5*r00);
IkReal x1464=(r11*sj5);
IkReal x1465=(cj5*r10);
IkReal x1466=(r21*sj5);
IkReal x1467=(cj5*r20);
IkReal x1468=(r01*sj5);
IkReal x1469=((1.0)*x1461);
IkReal x1470=((1.0)*x1460);
evalcond[0]=((((-1.0)*r22*x1469))+(((-1.0)*x1467*x1470))+((x1460*x1466)));
evalcond[1]=((((-1.0)*r22*x1470))+((x1461*x1467))+(((-1.0)*x1466*x1469)));
evalcond[2]=(cj0+(((-1.0)*x1465*x1470))+((x1460*x1464))+(((-1.0)*r12*x1469)));
evalcond[3]=((((-1.0)*r02*x1469))+(((-1.0)*x1462))+((x1460*x1468))+(((-1.0)*x1463*x1470)));
evalcond[4]=(((x1461*x1463))+(((-1.0)*r02*x1470))+(((-1.0)*cj0))+(((-1.0)*x1468*x1469)));
evalcond[5]=((((-1.0)*x1462))+((x1461*x1465))+(((-1.0)*r12*x1470))+(((-1.0)*x1464*x1469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1471=((1.0)*cj5);
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1471)))),-1);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1471))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1472.value)))+(x1473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1474=IKsin(j4);
IkReal x1475=IKcos(j4);
IkReal x1476=((1.0)*sj0);
IkReal x1477=(cj5*r00);
IkReal x1478=(r11*sj5);
IkReal x1479=(cj5*r10);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj5*r20);
IkReal x1482=(r01*sj5);
IkReal x1483=((1.0)*x1475);
IkReal x1484=((1.0)*x1474);
evalcond[0]=((((-1.0)*x1481*x1484))+((x1474*x1480))+(((-1.0)*r22*x1483)));
evalcond[1]=((((-1.0)*x1480*x1483))+(((-1.0)*r22*x1484))+((x1475*x1481)));
evalcond[2]=((((-1.0)*x1479*x1484))+cj0+(((-1.0)*r12*x1483))+((x1474*x1478)));
evalcond[3]=((((-1.0)*r02*x1483))+((x1474*x1482))+(((-1.0)*x1476))+(((-1.0)*x1477*x1484)));
evalcond[4]=((((-1.0)*x1482*x1483))+(((-1.0)*r02*x1484))+((x1475*x1477))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1484))+(((-1.0)*x1476))+((x1475*x1479))+(((-1.0)*x1478*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1485=((1.0)*cj5);
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1485))+(((-1.0)*r00*sj5)))),-1);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1486.value)))+(x1487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1488=IKsin(j4);
IkReal x1489=IKcos(j4);
IkReal x1490=((1.0)*sj0);
IkReal x1491=(cj5*r00);
IkReal x1492=(r11*sj5);
IkReal x1493=(cj5*r10);
IkReal x1494=(r21*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r01*sj5);
IkReal x1497=((1.0)*x1489);
IkReal x1498=((1.0)*x1488);
evalcond[0]=((((-1.0)*x1495*x1498))+(((-1.0)*r22*x1497))+((x1488*x1494)));
evalcond[1]=((((-1.0)*x1494*x1497))+((x1489*x1495))+(((-1.0)*r22*x1498)));
evalcond[2]=((((-1.0)*r12*x1497))+cj0+(((-1.0)*x1493*x1498))+((x1488*x1492)));
evalcond[3]=((((-1.0)*x1490))+(((-1.0)*r02*x1497))+(((-1.0)*x1491*x1498))+((x1488*x1496)));
evalcond[4]=(((x1489*x1491))+(((-1.0)*x1496*x1497))+(((-1.0)*r02*x1498))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1498))+((x1489*x1493))+(((-1.0)*x1490))+(((-1.0)*x1492*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1499=((1.0)*cj5);
IkReal x1500=((((-1.0)*r01*x1499))+(((-1.0)*r00*sj5)));
j4eval[0]=x1500;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1499)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1501=cj5*cj5;
IkReal x1502=((1.0)*r21);
IkReal x1503=(cj5*sj5);
IkReal x1504=((1.0)*r20);
IkReal x1505=((((-1.0)*r00*x1502*x1503))+((r01*r21))+((r00*r20*x1501))+((r02*r22))+(((-1.0)*r01*x1501*x1502))+(((-1.0)*r01*x1503*x1504)));
j4eval[0]=x1505;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1504)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1506=cj5*cj5;
IkReal x1507=(r21*sj5);
IkReal x1508=(r11*r21);
IkReal x1509=((1.0)*cj5*r20);
IkReal x1510=((((-1.0)*r11*sj5*x1509))+((r12*r22))+x1508+((r10*r20*x1506))+(((-1.0)*cj5*r10*x1507))+(((-1.0)*x1506*x1508)));
j4eval[0]=x1510;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1509))+((sj0*x1507))))));
j4eval[2]=IKsign(x1510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1511=cj5*cj5;
IkReal x1512=(r21*sj5);
IkReal x1513=(r11*r21);
IkReal x1514=((1.0)*cj5*r20);
CheckValue<IkReal> x1515=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1511*x1513))+((r12*r22))+(((-1.0)*r11*sj5*x1514))+x1513+((r10*r20*x1511))+(((-1.0)*cj5*r10*x1512)))),-1);
if(!x1515.valid){
continue;
}
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1514))+((sj0*x1512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1515.value)))+(x1516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1517=IKsin(j4);
IkReal x1518=IKcos(j4);
IkReal x1519=(r11*sj5);
IkReal x1520=(cj5*r00);
IkReal x1521=(cj5*r10);
IkReal x1522=(r21*sj5);
IkReal x1523=(cj5*r20);
IkReal x1524=(r01*sj5);
IkReal x1525=((1.0)*x1518);
IkReal x1526=((1.0)*x1517);
evalcond[0]=((((-1.0)*r22*x1525))+((x1517*x1522))+(((-1.0)*x1523*x1526)));
evalcond[1]=(((x1518*x1523))+(((-1.0)*r22*x1526))+(((-1.0)*x1522*x1525)));
evalcond[2]=((((-1.0)*r12*x1525))+cj0+((x1517*x1519))+(((-1.0)*x1521*x1526)));
evalcond[3]=((((-1.0)*x1524*x1525))+cj0+((x1518*x1520))+(((-1.0)*r02*x1526)));
evalcond[4]=((((-1.0)*r12*x1526))+sj0+((x1518*x1521))+(((-1.0)*x1519*x1525)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1525))+((x1517*x1524))+(((-1.0)*x1520*x1526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1527=cj5*cj5;
IkReal x1528=((1.0)*r21);
IkReal x1529=(cj5*sj5);
IkReal x1530=((1.0)*r20);
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign((((r00*r20*x1527))+((r01*r21))+(((-1.0)*r01*x1529*x1530))+(((-1.0)*r00*x1528*x1529))+((r02*r22))+(((-1.0)*r01*x1527*x1528)))),-1);
if(!x1531.valid){
continue;
}
CheckValue<IkReal> x1532 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1531.value)))+(x1532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1533=IKsin(j4);
IkReal x1534=IKcos(j4);
IkReal x1535=(r11*sj5);
IkReal x1536=(cj5*r00);
IkReal x1537=(cj5*r10);
IkReal x1538=(r21*sj5);
IkReal x1539=(cj5*r20);
IkReal x1540=(r01*sj5);
IkReal x1541=((1.0)*x1534);
IkReal x1542=((1.0)*x1533);
evalcond[0]=((((-1.0)*r22*x1541))+(((-1.0)*x1539*x1542))+((x1533*x1538)));
evalcond[1]=((((-1.0)*r22*x1542))+((x1534*x1539))+(((-1.0)*x1538*x1541)));
evalcond[2]=(cj0+(((-1.0)*x1537*x1542))+((x1533*x1535))+(((-1.0)*r12*x1541)));
evalcond[3]=((((-1.0)*r02*x1542))+cj0+(((-1.0)*x1540*x1541))+((x1534*x1536)));
evalcond[4]=((((-1.0)*x1535*x1541))+sj0+((x1534*x1537))+(((-1.0)*r12*x1542)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1541))+((x1533*x1540))+(((-1.0)*x1536*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1543=((1.0)*cj5);
CheckValue<IkReal> x1544 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1543)))),-1);
if(!x1545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1544.value)+(((1.5707963267949)*(x1545.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1546=IKsin(j4);
IkReal x1547=IKcos(j4);
IkReal x1548=(r11*sj5);
IkReal x1549=(cj5*r00);
IkReal x1550=(cj5*r10);
IkReal x1551=(r21*sj5);
IkReal x1552=(cj5*r20);
IkReal x1553=(r01*sj5);
IkReal x1554=((1.0)*x1547);
IkReal x1555=((1.0)*x1546);
evalcond[0]=((((-1.0)*r22*x1554))+(((-1.0)*x1552*x1555))+((x1546*x1551)));
evalcond[1]=(((x1547*x1552))+(((-1.0)*r22*x1555))+(((-1.0)*x1551*x1554)));
evalcond[2]=(cj0+((x1546*x1548))+(((-1.0)*r12*x1554))+(((-1.0)*x1550*x1555)));
evalcond[3]=(cj0+(((-1.0)*r02*x1555))+((x1547*x1549))+(((-1.0)*x1553*x1554)));
evalcond[4]=(((x1547*x1550))+sj0+(((-1.0)*x1548*x1554))+(((-1.0)*r12*x1555)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1549*x1555))+(((-1.0)*r02*x1554))+((x1546*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1556=IKcos(j0);
IkReal x1557=IKsin(j0);
evalcond[0]=((((-0.612)*x1556))+(((-1.0)*px))+(((-0.163941)*x1557)));
evalcond[1]=((((0.163941)*x1556))+(((-0.612)*x1557))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1558=((1.0)*cj5);
IkReal x1559=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1558)));
j4eval[0]=x1559;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1558)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1560=cj5*cj5;
IkReal x1561=((1.0)*r21);
IkReal x1562=(cj5*sj5);
IkReal x1563=((1.0)*r20);
IkReal x1564=((((-1.0)*r01*x1562*x1563))+((r01*r21))+((r00*r20*x1560))+(((-1.0)*r00*x1561*x1562))+((r02*r22))+(((-1.0)*r01*x1560*x1561)));
j4eval[0]=x1564;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1563))))));
j4eval[2]=IKsign(x1564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1565=cj5*cj5;
IkReal x1566=(r21*sj5);
IkReal x1567=(r11*r21);
IkReal x1568=((1.0)*cj5*r20);
IkReal x1569=((((-1.0)*cj5*r10*x1566))+(((-1.0)*r11*sj5*x1568))+((r12*r22))+x1567+(((-1.0)*x1565*x1567))+((r10*r20*x1565)));
j4eval[0]=x1569;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1566))+(((-1.0)*sj0*x1568))))));
j4eval[2]=IKsign(x1569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1570=cj5*cj5;
IkReal x1571=(r21*sj5);
IkReal x1572=(r11*r21);
IkReal x1573=((1.0)*cj5*r20);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1571))+(((-1.0)*sj0*x1573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1571))+(((-1.0)*x1570*x1572))+(((-1.0)*r11*sj5*x1573))+((r12*r22))+x1572+((r10*r20*x1570)))),-1);
if(!x1575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1574.value)+(((1.5707963267949)*(x1575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j4);
IkReal x1577=IKcos(j4);
IkReal x1578=(r11*sj5);
IkReal x1579=(cj5*r00);
IkReal x1580=(cj5*r10);
IkReal x1581=(r21*sj5);
IkReal x1582=(cj5*r20);
IkReal x1583=(r01*sj5);
IkReal x1584=((1.0)*x1577);
IkReal x1585=((1.0)*x1576);
evalcond[0]=(((x1576*x1581))+(((-1.0)*r22*x1584))+(((-1.0)*x1582*x1585)));
evalcond[1]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1581*x1584)));
evalcond[2]=(((x1576*x1578))+(((-1.0)*x1580*x1585))+cj0+(((-1.0)*r12*x1584)));
evalcond[3]=(cj0+(((-1.0)*r02*x1585))+((x1577*x1579))+(((-1.0)*x1583*x1584)));
evalcond[4]=((((-1.0)*x1578*x1584))+sj0+((x1577*x1580))+(((-1.0)*r12*x1585)));
evalcond[5]=((((-1.0)*sj0))+((x1576*x1583))+(((-1.0)*r02*x1584))+(((-1.0)*x1579*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1586=cj5*cj5;
IkReal x1587=((1.0)*r21);
IkReal x1588=(cj5*sj5);
IkReal x1589=((1.0)*r20);
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r00*x1587*x1588))+(((-1.0)*r01*x1586*x1587))+((r00*r20*x1586))+((r02*r22))+(((-1.0)*r01*x1588*x1589)))),-1);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x1589))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1590.value)))+(x1591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1592=IKsin(j4);
IkReal x1593=IKcos(j4);
IkReal x1594=(r11*sj5);
IkReal x1595=(cj5*r00);
IkReal x1596=(cj5*r10);
IkReal x1597=(r21*sj5);
IkReal x1598=(cj5*r20);
IkReal x1599=(r01*sj5);
IkReal x1600=((1.0)*x1593);
IkReal x1601=((1.0)*x1592);
evalcond[0]=(((x1592*x1597))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1601)));
evalcond[1]=(((x1593*x1598))+(((-1.0)*r22*x1601))+(((-1.0)*x1597*x1600)));
evalcond[2]=(cj0+((x1592*x1594))+(((-1.0)*x1596*x1601))+(((-1.0)*r12*x1600)));
evalcond[3]=(cj0+((x1593*x1595))+(((-1.0)*x1599*x1600))+(((-1.0)*r02*x1601)));
evalcond[4]=(sj0+(((-1.0)*x1594*x1600))+((x1593*x1596))+(((-1.0)*r12*x1601)));
evalcond[5]=((((-1.0)*sj0))+((x1592*x1599))+(((-1.0)*x1595*x1601))+(((-1.0)*r02*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1602=((1.0)*cj5);
CheckValue<IkReal> x1603=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1602)))),-1);
if(!x1603.valid){
continue;
}
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1602))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1603.value)))+(x1604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1605=IKsin(j4);
IkReal x1606=IKcos(j4);
IkReal x1607=(r11*sj5);
IkReal x1608=(cj5*r00);
IkReal x1609=(cj5*r10);
IkReal x1610=(r21*sj5);
IkReal x1611=(cj5*r20);
IkReal x1612=(r01*sj5);
IkReal x1613=((1.0)*x1606);
IkReal x1614=((1.0)*x1605);
evalcond[0]=((((-1.0)*x1611*x1614))+(((-1.0)*r22*x1613))+((x1605*x1610)));
evalcond[1]=((((-1.0)*x1610*x1613))+(((-1.0)*r22*x1614))+((x1606*x1611)));
evalcond[2]=((((-1.0)*r12*x1613))+cj0+(((-1.0)*x1609*x1614))+((x1605*x1607)));
evalcond[3]=(cj0+(((-1.0)*r02*x1614))+((x1606*x1608))+(((-1.0)*x1612*x1613)));
evalcond[4]=((((-1.0)*r12*x1614))+sj0+(((-1.0)*x1607*x1613))+((x1606*x1609)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1613))+(((-1.0)*x1608*x1614))+((x1605*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1615=IKcos(j0);
IkReal x1616=IKsin(j0);
evalcond[0]=((((-0.163941)*x1616))+(((-0.612)*x1615))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x1615))+(((-0.612)*x1616))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1617=((1.0)*cj5);
IkReal x1618=((((-1.0)*r01*x1617))+(((-1.0)*r00*sj5)));
j4eval[0]=x1618;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1617)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1619=((1.0)*cj5);
IkReal x1620=((((-1.0)*r11*x1619))+(((-1.0)*r10*sj5)));
j4eval[0]=x1620;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1619))))));
j4eval[2]=IKsign(x1620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1621=cj5*cj5;
IkReal x1622=((1.0)*sj5);
IkReal x1623=(cj5*r20);
IkReal x1624=(r11*r21);
IkReal x1625=((((-1.0)*r11*x1622*x1623))+x1624+((r10*r20*x1621))+(((-1.0)*x1621*x1624))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1622)));
j4eval[0]=x1625;
j4eval[1]=IKsign(x1625);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1623))+(((-1.0)*cj0*r21*x1622))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1626=cj5*cj5;
IkReal x1627=((1.0)*sj5);
IkReal x1628=(cj5*r20);
IkReal x1629=(r11*r21);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal((((cj0*x1628))+(((-1.0)*cj0*r21*x1627)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(IKsign((x1629+(((-1.0)*x1626*x1629))+((r10*r20*x1626))+((r12*r22))+(((-1.0)*r11*x1627*x1628))+(((-1.0)*cj5*r10*r21*x1627)))),-1);
if(!x1631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1630.value)+(((1.5707963267949)*(x1631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1632=IKsin(j4);
IkReal x1633=IKcos(j4);
IkReal x1634=((1.0)*sj0);
IkReal x1635=(cj5*r00);
IkReal x1636=(r11*sj5);
IkReal x1637=(cj5*r10);
IkReal x1638=(r21*sj5);
IkReal x1639=(cj5*r20);
IkReal x1640=(r01*sj5);
IkReal x1641=((1.0)*x1633);
IkReal x1642=((1.0)*x1632);
evalcond[0]=((((-1.0)*r22*x1641))+(((-1.0)*x1639*x1642))+((x1632*x1638)));
evalcond[1]=((((-1.0)*r22*x1642))+(((-1.0)*x1638*x1641))+((x1633*x1639)));
evalcond[2]=(cj0+(((-1.0)*r12*x1641))+(((-1.0)*x1637*x1642))+((x1632*x1636)));
evalcond[3]=((((-1.0)*x1635*x1642))+(((-1.0)*x1634))+((x1632*x1640))+(((-1.0)*r02*x1641)));
evalcond[4]=((((-1.0)*x1640*x1641))+((x1633*x1635))+(((-1.0)*r02*x1642))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1642))+(((-1.0)*x1634))+(((-1.0)*x1636*x1641))+((x1633*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1643=((1.0)*cj5);
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1643))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
CheckValue<IkReal> x1645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1643)))),-1);
if(!x1645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1644.value)+(((1.5707963267949)*(x1645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1646=IKsin(j4);
IkReal x1647=IKcos(j4);
IkReal x1648=((1.0)*sj0);
IkReal x1649=(cj5*r00);
IkReal x1650=(r11*sj5);
IkReal x1651=(cj5*r10);
IkReal x1652=(r21*sj5);
IkReal x1653=(cj5*r20);
IkReal x1654=(r01*sj5);
IkReal x1655=((1.0)*x1647);
IkReal x1656=((1.0)*x1646);
evalcond[0]=((((-1.0)*r22*x1655))+(((-1.0)*x1653*x1656))+((x1646*x1652)));
evalcond[1]=((((-1.0)*x1652*x1655))+(((-1.0)*r22*x1656))+((x1647*x1653)));
evalcond[2]=(cj0+(((-1.0)*r12*x1655))+((x1646*x1650))+(((-1.0)*x1651*x1656)));
evalcond[3]=(((x1646*x1654))+(((-1.0)*x1648))+(((-1.0)*x1649*x1656))+(((-1.0)*r02*x1655)));
evalcond[4]=((((-1.0)*x1654*x1655))+((x1647*x1649))+(((-1.0)*r02*x1656))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1650*x1655))+((x1647*x1651))+(((-1.0)*r12*x1656))+(((-1.0)*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1657=((1.0)*cj5);
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1657))+(((-1.0)*r00*sj5)))),-1);
if(!x1659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1658.value)+(((1.5707963267949)*(x1659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1660=IKsin(j4);
IkReal x1661=IKcos(j4);
IkReal x1662=((1.0)*sj0);
IkReal x1663=(cj5*r00);
IkReal x1664=(r11*sj5);
IkReal x1665=(cj5*r10);
IkReal x1666=(r21*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=(r01*sj5);
IkReal x1669=((1.0)*x1661);
IkReal x1670=((1.0)*x1660);
evalcond[0]=(((x1660*x1666))+(((-1.0)*x1667*x1670))+(((-1.0)*r22*x1669)));
evalcond[1]=(((x1661*x1667))+(((-1.0)*x1666*x1669))+(((-1.0)*r22*x1670)));
evalcond[2]=(((x1660*x1664))+cj0+(((-1.0)*r12*x1669))+(((-1.0)*x1665*x1670)));
evalcond[3]=(((x1660*x1668))+(((-1.0)*x1663*x1670))+(((-1.0)*x1662))+(((-1.0)*r02*x1669)));
evalcond[4]=((((-1.0)*r02*x1670))+(((-1.0)*x1668*x1669))+((x1661*x1663))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1670))+(((-1.0)*x1662))+((x1661*x1665))+(((-1.0)*x1664*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1671=((1.0)*cj5);
IkReal x1672=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1671)));
j4eval[0]=x1672;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1671)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1673=cj5*cj5;
IkReal x1674=((1.0)*r21);
IkReal x1675=(cj5*sj5);
IkReal x1676=((1.0)*r20);
IkReal x1677=((((-1.0)*r01*x1675*x1676))+(((-1.0)*r01*x1673*x1674))+((r01*r21))+(((-1.0)*r00*x1674*x1675))+((r02*r22))+((r00*r20*x1673)));
j4eval[0]=x1677;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1676))))));
j4eval[2]=IKsign(x1677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1678=cj5*cj5;
IkReal x1679=(r21*sj5);
IkReal x1680=(r11*r21);
IkReal x1681=((1.0)*cj5*r20);
IkReal x1682=((((-1.0)*cj5*r10*x1679))+(((-1.0)*r11*sj5*x1681))+x1680+((r12*r22))+(((-1.0)*x1678*x1680))+((r10*r20*x1678)));
j4eval[0]=x1682;
j4eval[1]=((IKabs((((sj0*x1679))+(((-1.0)*sj0*x1681)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1683=cj5*cj5;
IkReal x1684=(r21*sj5);
IkReal x1685=(r11*r21);
IkReal x1686=((1.0)*cj5*r20);
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1686))+((sj0*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1684))+(((-1.0)*r11*sj5*x1686))+x1685+((r12*r22))+(((-1.0)*x1683*x1685))+((r10*r20*x1683)))),-1);
if(!x1688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1687.value)+(((1.5707963267949)*(x1688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1689=IKsin(j4);
IkReal x1690=IKcos(j4);
IkReal x1691=(r11*sj5);
IkReal x1692=(cj5*r00);
IkReal x1693=(cj5*r10);
IkReal x1694=(r21*sj5);
IkReal x1695=(cj5*r20);
IkReal x1696=(r01*sj5);
IkReal x1697=((1.0)*x1690);
IkReal x1698=((1.0)*x1689);
evalcond[0]=(((x1689*x1694))+(((-1.0)*r22*x1697))+(((-1.0)*x1695*x1698)));
evalcond[1]=(((x1690*x1695))+(((-1.0)*x1694*x1697))+(((-1.0)*r22*x1698)));
evalcond[2]=(cj0+(((-1.0)*r12*x1697))+((x1689*x1691))+(((-1.0)*x1693*x1698)));
evalcond[3]=((((-1.0)*x1696*x1697))+((x1690*x1692))+cj0+(((-1.0)*r02*x1698)));
evalcond[4]=(((x1690*x1693))+sj0+(((-1.0)*r12*x1698))+(((-1.0)*x1691*x1697)));
evalcond[5]=((((-1.0)*x1692*x1698))+(((-1.0)*sj0))+((x1689*x1696))+(((-1.0)*r02*x1697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1699=cj5*cj5;
IkReal x1700=((1.0)*r21);
IkReal x1701=(cj5*sj5);
IkReal x1702=((1.0)*r20);
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1701*x1702))+((r01*r21))+(((-1.0)*r00*x1700*x1701))+((r00*r20*x1699))+(((-1.0)*r01*x1699*x1700))+((r02*r22)))),-1);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1703.value)))+(x1704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKsin(j4);
IkReal x1706=IKcos(j4);
IkReal x1707=(r11*sj5);
IkReal x1708=(cj5*r00);
IkReal x1709=(cj5*r10);
IkReal x1710=(r21*sj5);
IkReal x1711=(cj5*r20);
IkReal x1712=(r01*sj5);
IkReal x1713=((1.0)*x1706);
IkReal x1714=((1.0)*x1705);
evalcond[0]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1713))+((x1705*x1710)));
evalcond[1]=((((-1.0)*x1710*x1713))+(((-1.0)*r22*x1714))+((x1706*x1711)));
evalcond[2]=(cj0+(((-1.0)*x1709*x1714))+((x1705*x1707))+(((-1.0)*r12*x1713)));
evalcond[3]=(cj0+(((-1.0)*x1712*x1713))+((x1706*x1708))+(((-1.0)*r02*x1714)));
evalcond[4]=(sj0+(((-1.0)*x1707*x1713))+((x1706*x1709))+(((-1.0)*r12*x1714)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1708*x1714))+(((-1.0)*r02*x1713))+((x1705*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1715=((1.0)*cj5);
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1715)))),-1);
if(!x1717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1716.value)+(((1.5707963267949)*(x1717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1718=IKsin(j4);
IkReal x1719=IKcos(j4);
IkReal x1720=(r11*sj5);
IkReal x1721=(cj5*r00);
IkReal x1722=(cj5*r10);
IkReal x1723=(r21*sj5);
IkReal x1724=(cj5*r20);
IkReal x1725=(r01*sj5);
IkReal x1726=((1.0)*x1719);
IkReal x1727=((1.0)*x1718);
evalcond[0]=((((-1.0)*r22*x1726))+((x1718*x1723))+(((-1.0)*x1724*x1727)));
evalcond[1]=((((-1.0)*r22*x1727))+(((-1.0)*x1723*x1726))+((x1719*x1724)));
evalcond[2]=(cj0+(((-1.0)*r12*x1726))+(((-1.0)*x1722*x1727))+((x1718*x1720)));
evalcond[3]=(cj0+(((-1.0)*x1725*x1726))+((x1719*x1721))+(((-1.0)*r02*x1727)));
evalcond[4]=(sj0+(((-1.0)*r12*x1727))+(((-1.0)*x1720*x1726))+((x1719*x1722)));
evalcond[5]=((((-1.0)*sj0))+((x1718*x1725))+(((-1.0)*x1721*x1727))+(((-1.0)*r02*x1726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1728=((1.0)*cj5);
IkReal x1729=((((-1.0)*r01*x1728))+(((-1.0)*r00*sj5)));
j4eval[0]=x1729;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1728))))));
j4eval[2]=IKsign(x1729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1730=((1.0)*cj5);
IkReal x1731=((((-1.0)*r11*x1730))+(((-1.0)*r10*sj5)));
j4eval[0]=x1731;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1730)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1732=cj5*cj5;
IkReal x1733=((1.0)*sj5);
IkReal x1734=(cj5*r20);
IkReal x1735=(r11*r21);
IkReal x1736=((((-1.0)*cj5*r10*r21*x1733))+x1735+(((-1.0)*x1732*x1735))+((r12*r22))+(((-1.0)*r11*x1733*x1734))+((r10*r20*x1732)));
j4eval[0]=x1736;
j4eval[1]=IKsign(x1736);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1734))+(((-1.0)*cj0*r21*x1733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1737=cj5*cj5;
IkReal x1738=((1.0)*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r11*r21);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1738))+x1740+((r12*r22))+(((-1.0)*r11*x1738*x1739))+(((-1.0)*x1737*x1740))+((r10*r20*x1737)))),-1);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal((((cj0*x1739))+(((-1.0)*cj0*r21*x1738)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1741.value)))+(x1742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1743=IKsin(j4);
IkReal x1744=IKcos(j4);
IkReal x1745=((1.0)*sj0);
IkReal x1746=(cj5*r00);
IkReal x1747=(r11*sj5);
IkReal x1748=(cj5*r10);
IkReal x1749=(r21*sj5);
IkReal x1750=(cj5*r20);
IkReal x1751=(r01*sj5);
IkReal x1752=((1.0)*x1744);
IkReal x1753=((1.0)*x1743);
evalcond[0]=((((-1.0)*r22*x1752))+(((-1.0)*x1750*x1753))+((x1743*x1749)));
evalcond[1]=(((x1744*x1750))+(((-1.0)*r22*x1753))+(((-1.0)*x1749*x1752)));
evalcond[2]=((((-1.0)*x1748*x1753))+(((-1.0)*r12*x1752))+cj0+((x1743*x1747)));
evalcond[3]=((((-1.0)*x1746*x1753))+(((-1.0)*x1745))+((x1743*x1751))+(((-1.0)*r02*x1752)));
evalcond[4]=(((x1744*x1746))+(((-1.0)*x1751*x1752))+(((-1.0)*r02*x1753))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1753))+((x1744*x1748))+(((-1.0)*x1747*x1752))+(((-1.0)*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1754=((1.0)*cj5);
CheckValue<IkReal> x1755 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1754))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1755.valid){
continue;
}
CheckValue<IkReal> x1756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1754))+(((-1.0)*r10*sj5)))),-1);
if(!x1756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1755.value)+(((1.5707963267949)*(x1756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1757=IKsin(j4);
IkReal x1758=IKcos(j4);
IkReal x1759=((1.0)*sj0);
IkReal x1760=(cj5*r00);
IkReal x1761=(r11*sj5);
IkReal x1762=(cj5*r10);
IkReal x1763=(r21*sj5);
IkReal x1764=(cj5*r20);
IkReal x1765=(r01*sj5);
IkReal x1766=((1.0)*x1758);
IkReal x1767=((1.0)*x1757);
evalcond[0]=(((x1757*x1763))+(((-1.0)*x1764*x1767))+(((-1.0)*r22*x1766)));
evalcond[1]=((((-1.0)*x1763*x1766))+((x1758*x1764))+(((-1.0)*r22*x1767)));
evalcond[2]=((((-1.0)*x1762*x1767))+cj0+((x1757*x1761))+(((-1.0)*r12*x1766)));
evalcond[3]=((((-1.0)*r02*x1766))+((x1757*x1765))+(((-1.0)*x1760*x1767))+(((-1.0)*x1759)));
evalcond[4]=((((-1.0)*r02*x1767))+(((-1.0)*x1765*x1766))+((x1758*x1760))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1761*x1766))+(((-1.0)*r12*x1767))+((x1758*x1762))+(((-1.0)*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1768=((1.0)*cj5);
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1768))+(((-1.0)*r00*sj5)))),-1);
if(!x1770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1769.value)+(((1.5707963267949)*(x1770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1771=IKsin(j4);
IkReal x1772=IKcos(j4);
IkReal x1773=((1.0)*sj0);
IkReal x1774=(cj5*r00);
IkReal x1775=(r11*sj5);
IkReal x1776=(cj5*r10);
IkReal x1777=(r21*sj5);
IkReal x1778=(cj5*r20);
IkReal x1779=(r01*sj5);
IkReal x1780=((1.0)*x1772);
IkReal x1781=((1.0)*x1771);
evalcond[0]=((((-1.0)*r22*x1780))+((x1771*x1777))+(((-1.0)*x1778*x1781)));
evalcond[1]=((((-1.0)*r22*x1781))+(((-1.0)*x1777*x1780))+((x1772*x1778)));
evalcond[2]=(cj0+((x1771*x1775))+(((-1.0)*r12*x1780))+(((-1.0)*x1776*x1781)));
evalcond[3]=(((x1771*x1779))+(((-1.0)*x1774*x1781))+(((-1.0)*x1773))+(((-1.0)*r02*x1780)));
evalcond[4]=((((-1.0)*x1779*x1780))+((x1772*x1774))+(((-1.0)*r02*x1781))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1775*x1780))+(((-1.0)*r12*x1781))+(((-1.0)*x1773))+((x1772*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1782=(sj1*sj2);
IkReal x1783=(r00*sj5);
IkReal x1784=((612000.0)*cj1);
IkReal x1785=(cj1*cj2);
IkReal x1786=(cj5*r01);
IkReal x1787=((1000000.0)*px);
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(((((163941.0)*x1782))+(((-163941.0)*x1785))),-1);
if(!x1788.valid){
continue;
}
CheckValue<IkReal> x1789=IKPowWithIntegerCheck((x1782+(((-1.0)*x1785))),-1);
if(!x1789.valid){
continue;
}
if( IKabs(((x1788.value)*(((((-1.0)*x1783*x1784))+(((456600.0)*x1782*x1783))+(((456600.0)*x1782*x1786))+(((-456600.0)*x1785*x1786))+(((-456600.0)*x1783*x1785))+(((-1.0)*x1784*x1786))+((x1785*x1787))+(((-1.0)*x1782*x1787)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1789.value)*(((((-1.0)*x1786))+(((-1.0)*x1783)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1788.value)*(((((-1.0)*x1783*x1784))+(((456600.0)*x1782*x1783))+(((456600.0)*x1782*x1786))+(((-456600.0)*x1785*x1786))+(((-456600.0)*x1783*x1785))+(((-1.0)*x1784*x1786))+((x1785*x1787))+(((-1.0)*x1782*x1787))))))+IKsqr(((x1789.value)*(((((-1.0)*x1786))+(((-1.0)*x1783))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1788.value)*(((((-1.0)*x1783*x1784))+(((456600.0)*x1782*x1783))+(((456600.0)*x1782*x1786))+(((-456600.0)*x1785*x1786))+(((-456600.0)*x1783*x1785))+(((-1.0)*x1784*x1786))+((x1785*x1787))+(((-1.0)*x1782*x1787))))), ((x1789.value)*(((((-1.0)*x1786))+(((-1.0)*x1783))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1790=IKcos(j0);
IkReal x1791=IKsin(j0);
IkReal x1792=(cj5*r01);
IkReal x1793=(sj1*sj2);
IkReal x1794=((0.1157)*sj5);
IkReal x1795=(cj5*r11);
IkReal x1796=(cj1*cj2);
IkReal x1797=((0.5723)*x1791);
IkReal x1798=(cj1*x1791);
IkReal x1799=((0.5723)*x1790);
evalcond[0]=(((r00*sj5))+x1792+(((-1.0)*x1790*x1796))+((x1790*x1793)));
evalcond[1]=(((r10*sj5))+x1795+(((-1.0)*x1791*x1796))+((x1791*x1793)));
evalcond[2]=((((-1.0)*r00*x1794))+(((-0.1157)*x1792))+(((-1.0)*x1793*x1799))+((x1796*x1799))+(((-1.0)*px))+(((0.612)*cj1*x1790))+(((-0.163941)*x1791)));
evalcond[3]=((((-1.0)*r10*x1794))+(((-0.1157)*x1795))+(((-1.0)*x1793*x1797))+((x1796*x1797))+(((-1.0)*py))+(((0.163941)*x1790))+(((0.612)*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1800=((1.0)*cj5);
IkReal x1801=((((-1.0)*r01*x1800))+(((-1.0)*r00*sj5)));
j4eval[0]=x1801;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1800))))));
j4eval[2]=IKsign(x1801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1802=((1.0)*cj5);
IkReal x1803=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1802)));
j4eval[0]=x1803;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1802))))));
j4eval[2]=IKsign(x1803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1804=((1.0)*sj0);
IkReal x1805=((1.0)*cj0);
IkReal x1806=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1806;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x1804))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1805)))))+(IKabs(((((-1.0)*r02*x1805))+(((-1.0)*r12*x1804))))));
j4eval[2]=IKsign(x1806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1807=((-1.0)*r20);
IkReal x1809 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1809)==0){
continue;
}
IkReal x1808=pow(x1809,-0.5);
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1807),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1810.value));
IkReal gconst79=(r21*x1808);
IkReal gconst80=(x1807*x1808);
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1811.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1812=((-1.0)*r20);
IkReal x1813=x1808;
CheckValue<IkReal> x1815 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1812),IKFAST_ATAN2_MAGTHRESH);
if(!x1815.valid){
continue;
}
IkReal x1814=((-1.0)*(x1815.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1814;
IkReal gconst78=x1814;
IkReal gconst79=(r21*x1813);
IkReal gconst80=(x1812*x1813);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1816=((-1.0)*r20);
IkReal x1817=x1808;
CheckValue<IkReal> x1819 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1816),IKFAST_ATAN2_MAGTHRESH);
if(!x1819.valid){
continue;
}
IkReal x1818=((-1.0)*(x1819.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1818;
IkReal gconst78=x1818;
IkReal gconst79=(r21*x1817);
IkReal gconst80=(x1816*x1817);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1820=((-1.0)*r20);
IkReal x1821=x1808;
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1820),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
IkReal x1822=((-1.0)*(x1823.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1822;
IkReal gconst78=x1822;
IkReal gconst79=(r21*x1821);
IkReal gconst80=(x1820*x1821);
IkReal x1824=r22*r22;
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1824))),-1);
if(!x1827.valid){
continue;
}
IkReal x1825=x1827.value;
IkReal x1826=((((2.0)*x1825*(r20*r20)*(r21*r21)))+((x1825*(r21*r21*r21*r21)))+((x1825*(r20*r20*r20*r20)))+x1824);
j4eval[0]=x1826;
j4eval[1]=IKsign(x1826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1828=(sj1*sj2);
IkReal x1829=(gconst80*r20);
IkReal x1830=(gconst79*r21);
IkReal x1831=(cj1*cj2);
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1829*x1830))+(r22*r22)+(x1829*x1829)+(x1830*x1830))),-1);
if(!x1832.valid){
continue;
}
CheckValue<IkReal> x1833 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1831))+((r22*x1828)))),IkReal((((x1829*x1831))+(((-1.0)*x1830*x1831))+((x1828*x1830))+(((-1.0)*x1828*x1829)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1832.value)))+(x1833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1834=IKsin(j4);
IkReal x1835=IKcos(j4);
IkReal x1836=(gconst79*r01);
IkReal x1837=(gconst79*r21);
IkReal x1838=((1.0)*cj2);
IkReal x1839=(gconst79*r11);
IkReal x1840=((1.0)*sj0);
IkReal x1841=(cj1*sj2);
IkReal x1842=((1.0)*x1835);
IkReal x1843=(gconst80*x1835);
IkReal x1844=((1.0)*x1834);
IkReal x1845=(gconst80*x1844);
evalcond[0]=((((-1.0)*r22*x1842))+(((-1.0)*r20*x1845))+((x1834*x1837)));
evalcond[1]=(cj0+(((-1.0)*r10*x1845))+(((-1.0)*r12*x1842))+((x1834*x1839)));
evalcond[2]=((((-1.0)*x1840))+(((-1.0)*r00*x1845))+(((-1.0)*r02*x1842))+((x1834*x1836)));
evalcond[3]=((((-1.0)*r22*x1844))+((sj1*sj2))+((r20*x1843))+(((-1.0)*x1837*x1842))+(((-1.0)*cj1*x1838)));
evalcond[4]=((((-1.0)*r02*x1844))+(((-1.0)*cj0*x1841))+(((-1.0)*cj0*sj1*x1838))+((r00*x1843))+(((-1.0)*x1836*x1842)));
evalcond[5]=((((-1.0)*x1839*x1842))+((r10*x1843))+(((-1.0)*r12*x1844))+(((-1.0)*x1840*x1841))+(((-1.0)*sj0*sj1*x1838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1846=((1.0)*gconst80);
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1846))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
CheckValue<IkReal> x1848=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1846)))),-1);
if(!x1848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1847.value)+(((1.5707963267949)*(x1848.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1849=IKsin(j4);
IkReal x1850=IKcos(j4);
IkReal x1851=(gconst79*r01);
IkReal x1852=(gconst79*r21);
IkReal x1853=((1.0)*cj2);
IkReal x1854=(gconst79*r11);
IkReal x1855=((1.0)*sj0);
IkReal x1856=(cj1*sj2);
IkReal x1857=((1.0)*x1850);
IkReal x1858=(gconst80*x1850);
IkReal x1859=((1.0)*x1849);
IkReal x1860=(gconst80*x1859);
evalcond[0]=(((x1849*x1852))+(((-1.0)*r22*x1857))+(((-1.0)*r20*x1860)));
evalcond[1]=(cj0+((x1849*x1854))+(((-1.0)*r12*x1857))+(((-1.0)*r10*x1860)));
evalcond[2]=(((x1849*x1851))+(((-1.0)*r02*x1857))+(((-1.0)*r00*x1860))+(((-1.0)*x1855)));
evalcond[3]=((((-1.0)*x1852*x1857))+((sj1*sj2))+(((-1.0)*r22*x1859))+((r20*x1858))+(((-1.0)*cj1*x1853)));
evalcond[4]=(((r00*x1858))+(((-1.0)*x1851*x1857))+(((-1.0)*r02*x1859))+(((-1.0)*cj0*sj1*x1853))+(((-1.0)*cj0*x1856)));
evalcond[5]=((((-1.0)*sj0*sj1*x1853))+((r10*x1858))+(((-1.0)*r12*x1859))+(((-1.0)*x1855*x1856))+(((-1.0)*x1854*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1861=((1.0)*gconst80);
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1861)))),-1);
if(!x1862.valid){
continue;
}
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1862.value)))+(x1863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1864=IKsin(j4);
IkReal x1865=IKcos(j4);
IkReal x1866=(gconst79*r01);
IkReal x1867=(gconst79*r21);
IkReal x1868=((1.0)*cj2);
IkReal x1869=(gconst79*r11);
IkReal x1870=((1.0)*sj0);
IkReal x1871=(cj1*sj2);
IkReal x1872=((1.0)*x1865);
IkReal x1873=(gconst80*x1865);
IkReal x1874=((1.0)*x1864);
IkReal x1875=(gconst80*x1874);
evalcond[0]=(((x1864*x1867))+(((-1.0)*r22*x1872))+(((-1.0)*r20*x1875)));
evalcond[1]=(((x1864*x1869))+cj0+(((-1.0)*r10*x1875))+(((-1.0)*r12*x1872)));
evalcond[2]=(((x1864*x1866))+(((-1.0)*x1870))+(((-1.0)*r02*x1872))+(((-1.0)*r00*x1875)));
evalcond[3]=((((-1.0)*r22*x1874))+((sj1*sj2))+((r20*x1873))+(((-1.0)*x1867*x1872))+(((-1.0)*cj1*x1868)));
evalcond[4]=((((-1.0)*cj0*x1871))+(((-1.0)*r02*x1874))+(((-1.0)*x1866*x1872))+(((-1.0)*cj0*sj1*x1868))+((r00*x1873)));
evalcond[5]=((((-1.0)*x1869*x1872))+(((-1.0)*x1870*x1871))+(((-1.0)*r12*x1874))+((r10*x1873))+(((-1.0)*sj0*sj1*x1868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1876=((-1.0)*r21);
IkReal x1878 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1878)==0){
continue;
}
IkReal x1877=pow(x1878,-0.5);
CheckValue<IkReal> x1879 = IKatan2WithCheck(IkReal(x1876),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1879.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1879.value))));
IkReal gconst82=(x1876*x1877);
IkReal gconst83=((1.0)*r20*x1877);
CheckValue<IkReal> x1880 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1880.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1880.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1881=((-1.0)*r21);
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal(x1881),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
IkReal x1882=((1.0)*(x1884.value));
IkReal x1883=x1877;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1882)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1882)));
IkReal gconst82=(x1881*x1883);
IkReal gconst83=((1.0)*r20*x1883);
IkReal x1885=r22*r22;
IkReal x1886=((1.0)*x1885);
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(((-1.0)+x1885),-1);
if(!x1890.valid){
continue;
}
IkReal x1887=x1890.value;
if((((1.0)+(((-1.0)*x1886)))) < -0.00001)
continue;
IkReal x1888=IKsqrt(((1.0)+(((-1.0)*x1886))));
IkReal x1889=(cj0*x1887*x1888);
j4eval[0]=((IKabs((x1889+(((-1.0)*x1886*x1889)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1891=((-1.0)*r21);
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(x1891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
IkReal x1892=((1.0)*(x1894.value));
IkReal x1893=x1877;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1892)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1892)));
IkReal gconst82=(x1891*x1893);
IkReal gconst83=((1.0)*r20*x1893);
IkReal x1895=r22*r22;
IkReal x1896=((1.0)*x1895);
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(((-1.0)+x1895),-1);
if(!x1900.valid){
continue;
}
IkReal x1897=x1900.value;
if((((1.0)+(((-1.0)*x1896)))) < -0.00001)
continue;
IkReal x1898=IKsqrt(((1.0)+(((-1.0)*x1896))));
IkReal x1899=(sj0*x1897*x1898);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1899+(((-1.0)*x1896*x1899))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1901=((-1.0)*r21);
CheckValue<IkReal> x1904 = IKatan2WithCheck(IkReal(x1901),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1904.valid){
continue;
}
IkReal x1902=((1.0)*(x1904.value));
IkReal x1903=x1877;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1902)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1902)));
IkReal gconst82=(x1901*x1903);
IkReal gconst83=((1.0)*r20*x1903);
IkReal x1905=r22*r22;
IkReal x1906=(r12*sj0);
IkReal x1907=(cj0*r02);
CheckValue<IkReal> x1911=IKPowWithIntegerCheck(((-1.0)+x1905),-1);
if(!x1911.valid){
continue;
}
IkReal x1908=x1911.value;
if((((1.0)+(((-1.0)*x1905)))) < -0.00001)
continue;
IkReal x1909=IKsqrt(((1.0)+(((-1.0)*x1905))));
IkReal x1910=(r22*x1908*x1909);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1907*x1910))+((x1906*x1910)))))+(IKabs(((((-1.0)*x1907))+(((-1.0)*x1906))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1912=((1.0)*sj0);
IkReal x1913=((1.0)*cj0);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1913))+(((-1.0)*r12*x1912)))),IkReal(((((-1.0)*gconst82*r11*x1912))+(((-1.0)*gconst82*r01*x1913))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=(gconst82*r11);
IkReal x1919=((1.0)*cj2);
IkReal x1920=((1.0)*sj0);
IkReal x1921=(cj1*sj2);
IkReal x1922=((1.0)*x1917);
IkReal x1923=(gconst83*x1917);
IkReal x1924=(gconst82*x1916);
IkReal x1925=((1.0)*x1916);
evalcond[0]=((((-1.0)*gconst83*r20*x1925))+(((-1.0)*r22*x1922))+((r21*x1924)));
evalcond[1]=((((-1.0)*r12*x1922))+((x1916*x1918))+cj0+(((-1.0)*gconst83*r10*x1925)));
evalcond[2]=(((r01*x1924))+(((-1.0)*x1920))+(((-1.0)*gconst83*r00*x1925))+(((-1.0)*r02*x1922)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1919))+((r20*x1923))+(((-1.0)*r22*x1925))+(((-1.0)*gconst82*r21*x1922)));
evalcond[4]=(((r00*x1923))+(((-1.0)*cj0*x1921))+(((-1.0)*cj0*sj1*x1919))+(((-1.0)*r02*x1925))+(((-1.0)*gconst82*r01*x1922)));
evalcond[5]=((((-1.0)*r12*x1925))+(((-1.0)*x1918*x1922))+(((-1.0)*sj0*sj1*x1919))+((r10*x1923))+(((-1.0)*x1920*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1926=((1.0)*gconst83);
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1926))+(((-1.0)*gconst82*r10)))),-1);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1927.value)+(((1.5707963267949)*(x1928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(gconst82*r11);
IkReal x1932=((1.0)*cj2);
IkReal x1933=((1.0)*sj0);
IkReal x1934=(cj1*sj2);
IkReal x1935=((1.0)*x1930);
IkReal x1936=(gconst83*x1930);
IkReal x1937=(gconst82*x1929);
IkReal x1938=((1.0)*x1929);
evalcond[0]=((((-1.0)*r22*x1935))+((r21*x1937))+(((-1.0)*gconst83*r20*x1938)));
evalcond[1]=(cj0+(((-1.0)*r12*x1935))+((x1929*x1931))+(((-1.0)*gconst83*r10*x1938)));
evalcond[2]=((((-1.0)*gconst83*r00*x1938))+((r01*x1937))+(((-1.0)*r02*x1935))+(((-1.0)*x1933)));
evalcond[3]=((((-1.0)*cj1*x1932))+((sj1*sj2))+(((-1.0)*r22*x1938))+(((-1.0)*gconst82*r21*x1935))+((r20*x1936)));
evalcond[4]=(((r00*x1936))+(((-1.0)*cj0*x1934))+(((-1.0)*gconst82*r01*x1935))+(((-1.0)*cj0*sj1*x1932))+(((-1.0)*r02*x1938)));
evalcond[5]=((((-1.0)*x1933*x1934))+(((-1.0)*r12*x1938))+(((-1.0)*x1931*x1935))+((r10*x1936))+(((-1.0)*sj0*sj1*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1939=((1.0)*gconst83);
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1939))+(((-1.0)*gconst82*r00)))),-1);
if(!x1941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1940.value)+(((1.5707963267949)*(x1941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1942=IKsin(j4);
IkReal x1943=IKcos(j4);
IkReal x1944=(gconst82*r11);
IkReal x1945=((1.0)*cj2);
IkReal x1946=((1.0)*sj0);
IkReal x1947=(cj1*sj2);
IkReal x1948=((1.0)*x1943);
IkReal x1949=(gconst83*x1943);
IkReal x1950=(gconst82*x1942);
IkReal x1951=((1.0)*x1942);
evalcond[0]=((((-1.0)*r22*x1948))+((r21*x1950))+(((-1.0)*gconst83*r20*x1951)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1951))+(((-1.0)*r12*x1948))+((x1942*x1944)));
evalcond[2]=((((-1.0)*x1946))+(((-1.0)*r02*x1948))+((r01*x1950))+(((-1.0)*gconst83*r00*x1951)));
evalcond[3]=((((-1.0)*r22*x1951))+((r20*x1949))+(((-1.0)*gconst82*r21*x1948))+((sj1*sj2))+(((-1.0)*cj1*x1945)));
evalcond[4]=((((-1.0)*cj0*x1947))+(((-1.0)*r02*x1951))+(((-1.0)*gconst82*r01*x1948))+((r00*x1949))+(((-1.0)*cj0*sj1*x1945)));
evalcond[5]=((((-1.0)*sj0*sj1*x1945))+((r10*x1949))+(((-1.0)*x1944*x1948))+(((-1.0)*x1946*x1947))+(((-1.0)*r12*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1952=((-1.0)*r10);
IkReal x1954 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1954)==0){
continue;
}
IkReal x1953=pow(x1954,-0.5);
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1952),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1955.value));
IkReal gconst85=(r11*x1953);
IkReal gconst86=(x1952*x1953);
CheckValue<IkReal> x1956 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1956.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1956.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1957=((-1.0)*r10);
IkReal x1958=x1953;
CheckValue<IkReal> x1960 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1957),IKFAST_ATAN2_MAGTHRESH);
if(!x1960.valid){
continue;
}
IkReal x1959=((-1.0)*(x1960.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1959;
IkReal gconst84=x1959;
IkReal gconst85=(r11*x1958);
IkReal gconst86=(x1957*x1958);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1961=((1.0)*sj0);
IkReal x1962=((1.0)*gconst85);
CheckValue<IkReal> x1963=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1962)))),-1);
if(!x1963.valid){
continue;
}
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1961)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1962))+(((-1.0)*gconst85*r11*x1961))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1963.value)))+(x1964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1965=IKsin(j4);
IkReal x1966=IKcos(j4);
IkReal x1967=(gconst85*r21);
IkReal x1968=(gconst86*r00);
IkReal x1969=(gconst86*r10);
IkReal x1970=((1.0)*cj2);
IkReal x1971=(gconst85*r11);
IkReal x1972=(gconst85*r01);
IkReal x1973=((1.0)*sj0);
IkReal x1974=(gconst86*r20);
IkReal x1975=(cj1*sj2);
IkReal x1976=((1.0)*x1966);
IkReal x1977=((1.0)*x1965);
evalcond[0]=((((-1.0)*x1974*x1977))+(((-1.0)*r22*x1976))+((x1965*x1967)));
evalcond[1]=(cj0+((x1965*x1971))+(((-1.0)*r12*x1976))+(((-1.0)*x1969*x1977)));
evalcond[2]=((((-1.0)*r02*x1976))+(((-1.0)*x1973))+(((-1.0)*x1968*x1977))+((x1965*x1972)));
evalcond[3]=((((-1.0)*r22*x1977))+((sj1*sj2))+((x1966*x1974))+(((-1.0)*cj1*x1970))+(((-1.0)*x1967*x1976)));
evalcond[4]=((((-1.0)*cj0*x1975))+(((-1.0)*cj0*sj1*x1970))+(((-1.0)*r02*x1977))+(((-1.0)*x1972*x1976))+((x1966*x1968)));
evalcond[5]=((((-1.0)*sj0*sj1*x1970))+(((-1.0)*x1973*x1975))+(((-1.0)*x1971*x1976))+((x1966*x1969))+(((-1.0)*r12*x1977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1978=((1.0)*gconst86);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1978))+(((-1.0)*gconst85*r00)))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1978))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1981=IKsin(j4);
IkReal x1982=IKcos(j4);
IkReal x1983=(gconst85*r21);
IkReal x1984=(gconst86*r00);
IkReal x1985=(gconst86*r10);
IkReal x1986=((1.0)*cj2);
IkReal x1987=(gconst85*r11);
IkReal x1988=(gconst85*r01);
IkReal x1989=((1.0)*sj0);
IkReal x1990=(gconst86*r20);
IkReal x1991=(cj1*sj2);
IkReal x1992=((1.0)*x1982);
IkReal x1993=((1.0)*x1981);
evalcond[0]=(((x1981*x1983))+(((-1.0)*x1990*x1993))+(((-1.0)*r22*x1992)));
evalcond[1]=(cj0+((x1981*x1987))+(((-1.0)*x1985*x1993))+(((-1.0)*r12*x1992)));
evalcond[2]=((((-1.0)*x1989))+((x1981*x1988))+(((-1.0)*r02*x1992))+(((-1.0)*x1984*x1993)));
evalcond[3]=((((-1.0)*x1983*x1992))+((sj1*sj2))+((x1982*x1990))+(((-1.0)*cj1*x1986))+(((-1.0)*r22*x1993)));
evalcond[4]=((((-1.0)*cj0*x1991))+(((-1.0)*r02*x1993))+((x1982*x1984))+(((-1.0)*cj0*sj1*x1986))+(((-1.0)*x1988*x1992)));
evalcond[5]=((((-1.0)*x1989*x1991))+(((-1.0)*x1987*x1992))+((x1982*x1985))+(((-1.0)*sj0*sj1*x1986))+(((-1.0)*r12*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1994=((-1.0)*r11);
IkReal x1996 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1996)==0){
continue;
}
IkReal x1995=pow(x1996,-0.5);
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(x1994),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1997.value))));
IkReal gconst88=(x1994*x1995);
IkReal gconst89=((1.0)*r10*x1995);
CheckValue<IkReal> x1998 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1998.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1998.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1999=((-1.0)*r11);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(x1999),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
IkReal x2000=((1.0)*(x2002.value));
IkReal x2001=x1995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2000)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2000)));
IkReal gconst88=(x1999*x2001);
IkReal gconst89=((1.0)*r10*x2001);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2003=((-1.0)*r11);
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(x2003),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
IkReal x2004=((1.0)*(x2006.value));
IkReal x2005=x1995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2004)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2004)));
IkReal gconst88=(x2003*x2005);
IkReal gconst89=((1.0)*r10*x2005);
IkReal x2007=r12*r12;
IkReal x2008=((1.0)*sj0);
IkReal x2009=(cj0*r02);
IkReal x2010=x1995;
j4eval[0]=((IKabs(((((-1.0)*x2008*x2010))+((r12*x2009*x2010))+((sj0*x2007*x2010)))))+(IKabs(((((-1.0)*r12*x2008))+(((-1.0)*x2009))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2011=((-1.0)*r11);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal(x2011),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
IkReal x2012=((1.0)*(x2014.value));
IkReal x2013=x1995;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2012)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2012)));
IkReal gconst88=(x2011*x2013);
IkReal gconst89=((1.0)*r10*x2013);
IkReal x2015=r12*r12;
IkReal x2016=(cj1*cj2*r22);
IkReal x2017=(r22*sj1*sj2);
CheckValue<IkReal> x2021=IKPowWithIntegerCheck(((-1.0)+x2015),-1);
if(!x2021.valid){
continue;
}
IkReal x2018=x2021.value;
if((((1.0)+(((-1.0)*x2015)))) < -0.00001)
continue;
IkReal x2019=IKsqrt(((1.0)+(((-1.0)*x2015))));
IkReal x2020=(r12*x2018*x2019);
j4eval[0]=((IKabs(((((-1.0)*x2017*x2020))+((x2016*x2020)))))+(IKabs((x2017+(((-1.0)*x2016))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2022=(cj1*cj2);
IkReal x2023=(gconst89*r20);
IkReal x2024=(gconst88*r21);
IkReal x2025=(sj1*sj2);
CheckValue<IkReal> x2026 = IKatan2WithCheck(IkReal((((r22*x2025))+(((-1.0)*r22*x2022)))),IkReal((((x2024*x2025))+(((-1.0)*x2023*x2025))+(((-1.0)*x2022*x2024))+((x2022*x2023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2026.valid){
continue;
}
CheckValue<IkReal> x2027=IKPowWithIntegerCheck(IKsign(((x2024*x2024)+(r22*r22)+(x2023*x2023)+(((-2.0)*x2023*x2024)))),-1);
if(!x2027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2026.value)+(((1.5707963267949)*(x2027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2028=IKsin(j4);
IkReal x2029=IKcos(j4);
IkReal x2030=((1.0)*sj0);
IkReal x2031=((1.0)*cj2);
IkReal x2032=(gconst89*r20);
IkReal x2033=(gconst89*r10);
IkReal x2034=(gconst89*r00);
IkReal x2035=(cj1*sj2);
IkReal x2036=((1.0)*x2029);
IkReal x2037=((1.0)*x2028);
IkReal x2038=(gconst88*x2028);
evalcond[0]=(((r21*x2038))+(((-1.0)*r22*x2036))+(((-1.0)*x2032*x2037)));
evalcond[1]=(cj0+(((-1.0)*r12*x2036))+(((-1.0)*x2033*x2037))+((r11*x2038)));
evalcond[2]=(((r01*x2038))+(((-1.0)*r02*x2036))+(((-1.0)*x2030))+(((-1.0)*x2034*x2037)));
evalcond[3]=((((-1.0)*r22*x2037))+(((-1.0)*cj1*x2031))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2036))+((x2029*x2032)));
evalcond[4]=((((-1.0)*r02*x2037))+(((-1.0)*cj0*x2035))+(((-1.0)*cj0*sj1*x2031))+((x2029*x2034))+(((-1.0)*gconst88*r01*x2036)));
evalcond[5]=((((-1.0)*r12*x2037))+(((-1.0)*cj2*sj1*x2030))+(((-1.0)*gconst88*r11*x2036))+(((-1.0)*x2030*x2035))+((x2029*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2039=((1.0)*sj0);
IkReal x2040=((1.0)*cj0);
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2039))+(((-1.0)*r02*x2040)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2039))+(((-1.0)*gconst88*r01*x2040))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2041.value)+(((1.5707963267949)*(x2042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2043=IKsin(j4);
IkReal x2044=IKcos(j4);
IkReal x2045=((1.0)*sj0);
IkReal x2046=((1.0)*cj2);
IkReal x2047=(gconst89*r20);
IkReal x2048=(gconst89*r10);
IkReal x2049=(gconst89*r00);
IkReal x2050=(cj1*sj2);
IkReal x2051=((1.0)*x2044);
IkReal x2052=((1.0)*x2043);
IkReal x2053=(gconst88*x2043);
evalcond[0]=((((-1.0)*r22*x2051))+(((-1.0)*x2047*x2052))+((r21*x2053)));
evalcond[1]=(((r11*x2053))+cj0+(((-1.0)*r12*x2051))+(((-1.0)*x2048*x2052)));
evalcond[2]=(((r01*x2053))+(((-1.0)*x2045))+(((-1.0)*r02*x2051))+(((-1.0)*x2049*x2052)));
evalcond[3]=((((-1.0)*r22*x2052))+((sj1*sj2))+((x2044*x2047))+(((-1.0)*gconst88*r21*x2051))+(((-1.0)*cj1*x2046)));
evalcond[4]=((((-1.0)*gconst88*r01*x2051))+(((-1.0)*r02*x2052))+(((-1.0)*cj0*sj1*x2046))+(((-1.0)*cj0*x2050))+((x2044*x2049)));
evalcond[5]=((((-1.0)*cj2*sj1*x2045))+(((-1.0)*x2045*x2050))+(((-1.0)*r12*x2052))+(((-1.0)*gconst88*r11*x2051))+((x2044*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2054=((1.0)*gconst89);
CheckValue<IkReal> x2055 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2054))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2055.valid){
continue;
}
CheckValue<IkReal> x2056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2054))+(((-1.0)*gconst88*r00)))),-1);
if(!x2056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2055.value)+(((1.5707963267949)*(x2056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2057=IKsin(j4);
IkReal x2058=IKcos(j4);
IkReal x2059=((1.0)*sj0);
IkReal x2060=((1.0)*cj2);
IkReal x2061=(gconst89*r20);
IkReal x2062=(gconst89*r10);
IkReal x2063=(gconst89*r00);
IkReal x2064=(cj1*sj2);
IkReal x2065=((1.0)*x2058);
IkReal x2066=((1.0)*x2057);
IkReal x2067=(gconst88*x2057);
evalcond[0]=(((r21*x2067))+(((-1.0)*r22*x2065))+(((-1.0)*x2061*x2066)));
evalcond[1]=((((-1.0)*r12*x2065))+cj0+((r11*x2067))+(((-1.0)*x2062*x2066)));
evalcond[2]=((((-1.0)*x2063*x2066))+(((-1.0)*r02*x2065))+((r01*x2067))+(((-1.0)*x2059)));
evalcond[3]=((((-1.0)*gconst88*r21*x2065))+(((-1.0)*r22*x2066))+((sj1*sj2))+((x2058*x2061))+(((-1.0)*cj1*x2060)));
evalcond[4]=((((-1.0)*cj0*x2064))+(((-1.0)*r02*x2066))+((x2058*x2063))+(((-1.0)*cj0*sj1*x2060))+(((-1.0)*gconst88*r01*x2065)));
evalcond[5]=((((-1.0)*r12*x2066))+(((-1.0)*cj2*sj1*x2059))+((x2058*x2062))+(((-1.0)*x2059*x2064))+(((-1.0)*gconst88*r11*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2068=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2068;
j4eval[1]=IKsign(x2068);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2069=((1.0)*cj5);
IkReal x2070=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2069)));
j4eval[0]=x2070;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2069)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2071=cj5*cj5;
IkReal x2072=r11*r11;
IkReal x2073=(r11*sj5);
IkReal x2074=(cj5*r10);
IkReal x2075=((r12*r12)+x2072+(((-1.0)*x2071*x2072))+(((-2.0)*x2073*x2074))+((x2071*(r10*r10))));
j4eval[0]=x2075;
j4eval[1]=IKsign(x2075);
j4eval[2]=((IKabs(r12))+(IKabs((x2074+(((-1.0)*x2073))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2076=cj5*cj5;
IkReal x2077=r11*r11;
IkReal x2078=(cj5*r10);
IkReal x2079=(r11*sj5);
CheckValue<IkReal> x2080 = IKatan2WithCheck(IkReal((x2078+(((-1.0)*x2079)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2080.valid){
continue;
}
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2077+(((-1.0)*x2076*x2077))+((x2076*(r10*r10)))+(((-2.0)*x2078*x2079)))),-1);
if(!x2081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2080.value)+(((1.5707963267949)*(x2081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2082=IKsin(j4);
IkReal x2083=IKcos(j4);
IkReal x2084=(cj5*r10);
IkReal x2085=(r01*sj5);
IkReal x2086=((1.0)*cj2);
IkReal x2087=(cj5*r00);
IkReal x2088=(cj5*r20);
IkReal x2089=((1.0)*x2083);
IkReal x2090=((1.0)*x2082);
IkReal x2091=(sj5*x2082);
evalcond[0]=((((-1.0)*r22*x2089))+(((-1.0)*x2088*x2090))+((r21*x2091)));
evalcond[1]=((((-1.0)*r02*x2089))+(((-1.0)*x2087*x2090))+((x2082*x2085)));
evalcond[2]=(((x2083*x2084))+(((-1.0)*r11*sj5*x2089))+(((-1.0)*r12*x2090)));
evalcond[3]=((1.0)+(((-1.0)*x2084*x2090))+(((-1.0)*r12*x2089))+((r11*x2091)));
evalcond[4]=((((-1.0)*cj1*x2086))+(((-1.0)*r21*sj5*x2089))+((sj1*sj2))+((x2083*x2088))+(((-1.0)*r22*x2090)));
evalcond[5]=((((-1.0)*sj1*x2086))+(((-1.0)*x2085*x2089))+(((-1.0)*cj1*sj2))+((x2083*x2087))+(((-1.0)*r02*x2090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2092=((1.0)*cj5);
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2092)))),-1);
if(!x2093.valid){
continue;
}
CheckValue<IkReal> x2094 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2092))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2093.value)))+(x2094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2095=IKsin(j4);
IkReal x2096=IKcos(j4);
IkReal x2097=(cj5*r10);
IkReal x2098=(r01*sj5);
IkReal x2099=((1.0)*cj2);
IkReal x2100=(cj5*r00);
IkReal x2101=(cj5*r20);
IkReal x2102=((1.0)*x2096);
IkReal x2103=((1.0)*x2095);
IkReal x2104=(sj5*x2095);
evalcond[0]=((((-1.0)*r22*x2102))+((r21*x2104))+(((-1.0)*x2101*x2103)));
evalcond[1]=((((-1.0)*r02*x2102))+(((-1.0)*x2100*x2103))+((x2095*x2098)));
evalcond[2]=((((-1.0)*r12*x2103))+((x2096*x2097))+(((-1.0)*r11*sj5*x2102)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2102))+((r11*x2104))+(((-1.0)*x2097*x2103)));
evalcond[4]=((((-1.0)*r22*x2103))+((sj1*sj2))+(((-1.0)*r21*sj5*x2102))+(((-1.0)*cj1*x2099))+((x2096*x2101)));
evalcond[5]=((((-1.0)*r02*x2103))+(((-1.0)*cj1*sj2))+((x2096*x2100))+(((-1.0)*x2098*x2102))+(((-1.0)*sj1*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2105=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2105.valid){
continue;
}
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2105.value)))+(x2106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2107=IKsin(j4);
IkReal x2108=IKcos(j4);
IkReal x2109=(cj5*r10);
IkReal x2110=(r01*sj5);
IkReal x2111=((1.0)*cj2);
IkReal x2112=(cj5*r00);
IkReal x2113=(cj5*r20);
IkReal x2114=((1.0)*x2108);
IkReal x2115=((1.0)*x2107);
IkReal x2116=(sj5*x2107);
evalcond[0]=(((r21*x2116))+(((-1.0)*r22*x2114))+(((-1.0)*x2113*x2115)));
evalcond[1]=((((-1.0)*x2112*x2115))+((x2107*x2110))+(((-1.0)*r02*x2114)));
evalcond[2]=(((x2108*x2109))+(((-1.0)*r11*sj5*x2114))+(((-1.0)*r12*x2115)));
evalcond[3]=((1.0)+(((-1.0)*x2109*x2115))+(((-1.0)*r12*x2114))+((r11*x2116)));
evalcond[4]=((((-1.0)*r21*sj5*x2114))+((sj1*sj2))+(((-1.0)*r22*x2115))+(((-1.0)*cj1*x2111))+((x2108*x2113)));
evalcond[5]=((((-1.0)*sj1*x2111))+(((-1.0)*cj1*sj2))+(((-1.0)*x2110*x2114))+(((-1.0)*r02*x2115))+((x2108*x2112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2117=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2117;
j4eval[1]=IKsign(x2117);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2118=((1.0)*cj5);
IkReal x2119=((((-1.0)*r21*x2118))+(((-1.0)*r20*sj5)));
j4eval[0]=x2119;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2118))+((r01*sj5))))));
j4eval[2]=IKsign(x2119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2120=cj5*cj5;
IkReal x2121=r11*r11;
IkReal x2122=(cj5*r10);
IkReal x2123=(r11*sj5);
IkReal x2124=((((-1.0)*x2121))+((x2120*x2121))+(((-1.0)*x2120*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2122*x2123)));
j4eval[0]=x2124;
j4eval[1]=((IKabs(r12))+(IKabs((x2122+(((-1.0)*x2123))))));
j4eval[2]=IKsign(x2124);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2125=cj5*cj5;
IkReal x2126=r11*r11;
IkReal x2127=(cj5*r10);
IkReal x2128=(r11*sj5);
CheckValue<IkReal> x2129=IKPowWithIntegerCheck(IKsign((((x2125*x2126))+(((2.0)*x2127*x2128))+(((-1.0)*x2126))+(((-1.0)*(r12*r12)))+(((-1.0)*x2125*(r10*r10))))),-1);
if(!x2129.valid){
continue;
}
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal((x2127+(((-1.0)*x2128)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2129.value)))+(x2130.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2131=IKsin(j4);
IkReal x2132=IKcos(j4);
IkReal x2133=(cj5*r10);
IkReal x2134=(r01*sj5);
IkReal x2135=(cj5*r00);
IkReal x2136=(cj5*r20);
IkReal x2137=((1.0)*x2132);
IkReal x2138=((1.0)*x2131);
IkReal x2139=(sj5*x2131);
evalcond[0]=((((-1.0)*r22*x2137))+((r21*x2139))+(((-1.0)*x2136*x2138)));
evalcond[1]=(((x2131*x2134))+(((-1.0)*x2135*x2138))+(((-1.0)*r02*x2137)));
evalcond[2]=((((-1.0)*r12*x2138))+(((-1.0)*r11*sj5*x2137))+((x2132*x2133)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2137))+((r11*x2139))+(((-1.0)*x2133*x2138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2134*x2137))+((x2132*x2135))+(((-1.0)*r02*x2138)));
evalcond[5]=((((-1.0)*r22*x2138))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2137))+((x2132*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2140=((1.0)*cj5);
CheckValue<IkReal> x2141 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2141.valid){
continue;
}
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2140))+(((-1.0)*r20*sj5)))),-1);
if(!x2142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2141.value)+(((1.5707963267949)*(x2142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2143=IKsin(j4);
IkReal x2144=IKcos(j4);
IkReal x2145=(cj5*r10);
IkReal x2146=(r01*sj5);
IkReal x2147=(cj5*r00);
IkReal x2148=(cj5*r20);
IkReal x2149=((1.0)*x2144);
IkReal x2150=((1.0)*x2143);
IkReal x2151=(sj5*x2143);
evalcond[0]=((((-1.0)*x2148*x2150))+(((-1.0)*r22*x2149))+((r21*x2151)));
evalcond[1]=((((-1.0)*r02*x2149))+((x2143*x2146))+(((-1.0)*x2147*x2150)));
evalcond[2]=((((-1.0)*r11*sj5*x2149))+(((-1.0)*r12*x2150))+((x2144*x2145)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2149))+((r11*x2151))+(((-1.0)*x2145*x2150)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2150))+((x2144*x2147))+(((-1.0)*x2146*x2149)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2144*x2148))+(((-1.0)*r21*sj5*x2149))+(((-1.0)*r22*x2150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
CheckValue<IkReal> x2153=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2152.value)+(((1.5707963267949)*(x2153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2154=IKsin(j4);
IkReal x2155=IKcos(j4);
IkReal x2156=(cj5*r10);
IkReal x2157=(r01*sj5);
IkReal x2158=(cj5*r00);
IkReal x2159=(cj5*r20);
IkReal x2160=((1.0)*x2155);
IkReal x2161=((1.0)*x2154);
IkReal x2162=(sj5*x2154);
evalcond[0]=(((r21*x2162))+(((-1.0)*x2159*x2161))+(((-1.0)*r22*x2160)));
evalcond[1]=(((x2154*x2157))+(((-1.0)*x2158*x2161))+(((-1.0)*r02*x2160)));
evalcond[2]=((((-1.0)*r11*sj5*x2160))+((x2155*x2156))+(((-1.0)*r12*x2161)));
evalcond[3]=((-1.0)+(((-1.0)*x2156*x2161))+(((-1.0)*r12*x2160))+((r11*x2162)));
evalcond[4]=(((cj2*sj1))+((x2155*x2158))+((cj1*sj2))+(((-1.0)*x2157*x2160))+(((-1.0)*r02*x2161)));
evalcond[5]=((((-1.0)*r21*sj5*x2160))+((x2155*x2159))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2163=((-1.0)*r00);
IkReal x2165 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2165)==0){
continue;
}
IkReal x2164=pow(x2165,-0.5);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2163),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2166.value));
IkReal gconst91=(r01*x2164);
IkReal gconst92=(x2163*x2164);
CheckValue<IkReal> x2167 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2167.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2167.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2168=((-1.0)*r00);
IkReal x2169=x2164;
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2168),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
IkReal x2170=((-1.0)*(x2171.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2170;
IkReal gconst90=x2170;
IkReal gconst91=(r01*x2169);
IkReal gconst92=(x2168*x2169);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=((1.0)*sj0);
IkReal x2173=((1.0)*cj0);
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2173))+(((-1.0)*r12*x2172)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2173))+(((-1.0)*gconst91*r11*x2172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2174.value)))+(x2175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2176=IKsin(j4);
IkReal x2177=IKcos(j4);
IkReal x2178=((1.0)*cj2);
IkReal x2179=(gconst92*r00);
IkReal x2180=(gconst92*r20);
IkReal x2181=((1.0)*sj0);
IkReal x2182=(gconst92*r10);
IkReal x2183=(cj1*sj2);
IkReal x2184=((1.0)*x2177);
IkReal x2185=(gconst91*x2176);
IkReal x2186=((1.0)*x2176);
evalcond[0]=((((-1.0)*x2180*x2186))+((r21*x2185))+(((-1.0)*r22*x2184)));
evalcond[1]=(cj0+((r11*x2185))+(((-1.0)*x2182*x2186))+(((-1.0)*r12*x2184)));
evalcond[2]=((((-1.0)*r02*x2184))+(((-1.0)*x2181))+(((-1.0)*x2179*x2186))+((r01*x2185)));
evalcond[3]=(((sj1*sj2))+((x2177*x2180))+(((-1.0)*gconst91*r21*x2184))+(((-1.0)*r22*x2186))+(((-1.0)*cj1*x2178)));
evalcond[4]=(((x2177*x2179))+(((-1.0)*cj0*sj1*x2178))+(((-1.0)*r02*x2186))+(((-1.0)*cj0*x2183))+(((-1.0)*gconst91*r01*x2184)));
evalcond[5]=((((-1.0)*sj0*sj1*x2178))+((x2177*x2182))+(((-1.0)*x2181*x2183))+(((-1.0)*r12*x2186))+(((-1.0)*gconst91*r11*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2187=((1.0)*gconst92);
CheckValue<IkReal> x2188 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2187))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2188.valid){
continue;
}
CheckValue<IkReal> x2189=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2187)))),-1);
if(!x2189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2188.value)+(((1.5707963267949)*(x2189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2190=IKsin(j4);
IkReal x2191=IKcos(j4);
IkReal x2192=((1.0)*cj2);
IkReal x2193=(gconst92*r00);
IkReal x2194=(gconst92*r20);
IkReal x2195=((1.0)*sj0);
IkReal x2196=(gconst92*r10);
IkReal x2197=(cj1*sj2);
IkReal x2198=((1.0)*x2191);
IkReal x2199=(gconst91*x2190);
IkReal x2200=((1.0)*x2190);
evalcond[0]=((((-1.0)*x2194*x2200))+((r21*x2199))+(((-1.0)*r22*x2198)));
evalcond[1]=(cj0+(((-1.0)*x2196*x2200))+((r11*x2199))+(((-1.0)*r12*x2198)));
evalcond[2]=((((-1.0)*x2193*x2200))+(((-1.0)*r02*x2198))+(((-1.0)*x2195))+((r01*x2199)));
evalcond[3]=(((x2191*x2194))+(((-1.0)*r22*x2200))+(((-1.0)*gconst91*r21*x2198))+((sj1*sj2))+(((-1.0)*cj1*x2192)));
evalcond[4]=(((x2191*x2193))+(((-1.0)*cj0*sj1*x2192))+(((-1.0)*cj0*x2197))+(((-1.0)*gconst91*r01*x2198))+(((-1.0)*r02*x2200)));
evalcond[5]=(((x2191*x2196))+(((-1.0)*x2195*x2197))+(((-1.0)*r12*x2200))+(((-1.0)*sj0*sj1*x2192))+(((-1.0)*gconst91*r11*x2198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2201=((-1.0)*r01);
IkReal x2203 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2203)==0){
continue;
}
IkReal x2202=pow(x2203,-0.5);
CheckValue<IkReal> x2204 = IKatan2WithCheck(IkReal(x2201),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2204.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2204.value))));
IkReal gconst94=(x2201*x2202);
IkReal gconst95=((1.0)*r00*x2202);
CheckValue<IkReal> x2205 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2205.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2205.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2206=((-1.0)*r01);
CheckValue<IkReal> x2209 = IKatan2WithCheck(IkReal(x2206),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2209.valid){
continue;
}
IkReal x2207=((1.0)*(x2209.value));
IkReal x2208=x2202;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2207)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2207)));
IkReal gconst94=(x2206*x2208);
IkReal gconst95=((1.0)*r00*x2208);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2210=((-1.0)*r01);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(x2210),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
IkReal x2211=((1.0)*(x2213.value));
IkReal x2212=x2202;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2211)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2211)));
IkReal gconst94=(x2210*x2212);
IkReal gconst95=((1.0)*r00*x2212);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2214=((-1.0)*r01);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(x2214),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal x2215=((1.0)*(x2217.value));
IkReal x2216=x2202;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2215)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2215)));
IkReal gconst94=(x2214*x2216);
IkReal gconst95=((1.0)*r00*x2216);
IkReal x2218=r02*r02;
IkReal x2219=(r12*sj0);
IkReal x2220=((1.0)*cj0);
IkReal x2221=x2202;
j4eval[0]=((IKabs(((((-1.0)*x2220*x2221))+((cj0*x2218*x2221))+((r02*x2219*x2221)))))+(IKabs(((((-1.0)*x2219))+(((-1.0)*r02*x2220))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2222=((1.0)*sj0);
IkReal x2223=((1.0)*cj0);
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2224.valid){
continue;
}
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2223))+(((-1.0)*r12*x2222)))),IkReal(((((-1.0)*gconst94*r11*x2222))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2223))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2224.value)))+(x2225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2226=IKsin(j4);
IkReal x2227=IKcos(j4);
IkReal x2228=(gconst94*r11);
IkReal x2229=((1.0)*cj2);
IkReal x2230=(gconst94*r21);
IkReal x2231=((1.0)*sj0);
IkReal x2232=(gconst94*r01);
IkReal x2233=(cj1*sj2);
IkReal x2234=((1.0)*x2227);
IkReal x2235=(gconst95*x2227);
IkReal x2236=((1.0)*x2226);
IkReal x2237=(gconst95*x2236);
evalcond[0]=((((-1.0)*r20*x2237))+((x2226*x2230))+(((-1.0)*r22*x2234)));
evalcond[1]=((((-1.0)*r10*x2237))+((x2226*x2228))+cj0+(((-1.0)*r12*x2234)));
evalcond[2]=(((x2226*x2232))+(((-1.0)*r02*x2234))+(((-1.0)*r00*x2237))+(((-1.0)*x2231)));
evalcond[3]=(((sj1*sj2))+((r20*x2235))+(((-1.0)*r22*x2236))+(((-1.0)*x2230*x2234))+(((-1.0)*cj1*x2229)));
evalcond[4]=((((-1.0)*r02*x2236))+(((-1.0)*x2232*x2234))+(((-1.0)*cj0*x2233))+(((-1.0)*cj0*sj1*x2229))+((r00*x2235)));
evalcond[5]=((((-1.0)*sj0*sj1*x2229))+((r10*x2235))+(((-1.0)*x2228*x2234))+(((-1.0)*r12*x2236))+(((-1.0)*x2231*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2238=((1.0)*gconst95);
CheckValue<IkReal> x2239=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2238)))),-1);
if(!x2239.valid){
continue;
}
CheckValue<IkReal> x2240 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2239.value)))+(x2240.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2241=IKsin(j4);
IkReal x2242=IKcos(j4);
IkReal x2243=(gconst94*r11);
IkReal x2244=((1.0)*cj2);
IkReal x2245=(gconst94*r21);
IkReal x2246=((1.0)*sj0);
IkReal x2247=(gconst94*r01);
IkReal x2248=(cj1*sj2);
IkReal x2249=((1.0)*x2242);
IkReal x2250=(gconst95*x2242);
IkReal x2251=((1.0)*x2241);
IkReal x2252=(gconst95*x2251);
evalcond[0]=(((x2241*x2245))+(((-1.0)*r22*x2249))+(((-1.0)*r20*x2252)));
evalcond[1]=(((x2241*x2243))+cj0+(((-1.0)*r10*x2252))+(((-1.0)*r12*x2249)));
evalcond[2]=(((x2241*x2247))+(((-1.0)*r02*x2249))+(((-1.0)*r00*x2252))+(((-1.0)*x2246)));
evalcond[3]=((((-1.0)*r22*x2251))+((sj1*sj2))+((r20*x2250))+(((-1.0)*cj1*x2244))+(((-1.0)*x2245*x2249)));
evalcond[4]=((((-1.0)*x2247*x2249))+(((-1.0)*r02*x2251))+(((-1.0)*cj0*x2248))+((r00*x2250))+(((-1.0)*cj0*sj1*x2244)));
evalcond[5]=(((r10*x2250))+(((-1.0)*sj0*sj1*x2244))+(((-1.0)*r12*x2251))+(((-1.0)*x2243*x2249))+(((-1.0)*x2246*x2248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2253=((1.0)*gconst95);
CheckValue<IkReal> x2254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2253)))),-1);
if(!x2254.valid){
continue;
}
CheckValue<IkReal> x2255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2253))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2254.value)))+(x2255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2256=IKsin(j4);
IkReal x2257=IKcos(j4);
IkReal x2258=(gconst94*r11);
IkReal x2259=((1.0)*cj2);
IkReal x2260=(gconst94*r21);
IkReal x2261=((1.0)*sj0);
IkReal x2262=(gconst94*r01);
IkReal x2263=(cj1*sj2);
IkReal x2264=((1.0)*x2257);
IkReal x2265=(gconst95*x2257);
IkReal x2266=((1.0)*x2256);
IkReal x2267=(gconst95*x2266);
evalcond[0]=(((x2256*x2260))+(((-1.0)*r20*x2267))+(((-1.0)*r22*x2264)));
evalcond[1]=(cj0+((x2256*x2258))+(((-1.0)*r10*x2267))+(((-1.0)*r12*x2264)));
evalcond[2]=(((x2256*x2262))+(((-1.0)*r00*x2267))+(((-1.0)*r02*x2264))+(((-1.0)*x2261)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2260*x2264))+(((-1.0)*r22*x2266))+((r20*x2265))+(((-1.0)*cj1*x2259)));
evalcond[4]=(((r00*x2265))+(((-1.0)*cj0*sj1*x2259))+(((-1.0)*r02*x2266))+(((-1.0)*cj0*x2263))+(((-1.0)*x2262*x2264)));
evalcond[5]=((((-1.0)*sj0*sj1*x2259))+(((-1.0)*x2258*x2264))+((r10*x2265))+(((-1.0)*x2261*x2263))+(((-1.0)*r12*x2266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2268=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2268;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2269=((1.0)*cj5);
IkReal x2270=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2269)));
j4eval[0]=x2270;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2269))))));
j4eval[2]=IKsign(x2270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2271=cj5*cj5;
IkReal x2272=r01*r01;
IkReal x2273=(r01*sj5);
IkReal x2274=(cj5*r00);
IkReal x2275=((((2.0)*x2273*x2274))+(((-1.0)*(r02*r02)))+(((-1.0)*x2272))+(((-1.0)*x2271*(r00*r00)))+((x2271*x2272)));
j4eval[0]=x2275;
j4eval[1]=IKsign(x2275);
j4eval[2]=((IKabs(r02))+(IKabs((x2274+(((-1.0)*x2273))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2276=cj5*cj5;
IkReal x2277=r01*r01;
IkReal x2278=(r01*sj5);
IkReal x2279=(cj5*r00);
CheckValue<IkReal> x2280=IKPowWithIntegerCheck(IKsign(((((2.0)*x2278*x2279))+(((-1.0)*(r02*r02)))+((x2276*x2277))+(((-1.0)*x2276*(r00*r00)))+(((-1.0)*x2277)))),-1);
if(!x2280.valid){
continue;
}
CheckValue<IkReal> x2281 = IKatan2WithCheck(IkReal((x2279+(((-1.0)*x2278)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2280.value)))+(x2281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2282=IKsin(j4);
IkReal x2283=IKcos(j4);
IkReal x2284=(cj5*r10);
IkReal x2285=(r01*sj5);
IkReal x2286=((1.0)*cj2);
IkReal x2287=(cj5*r00);
IkReal x2288=(cj5*r20);
IkReal x2289=((1.0)*x2283);
IkReal x2290=((1.0)*x2282);
IkReal x2291=(sj5*x2282);
evalcond[0]=(((r21*x2291))+(((-1.0)*x2288*x2290))+(((-1.0)*r22*x2289)));
evalcond[1]=((((-1.0)*r12*x2289))+(((-1.0)*x2284*x2290))+((r11*x2291)));
evalcond[2]=((((-1.0)*r02*x2290))+((x2283*x2287))+(((-1.0)*x2285*x2289)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2289))+((x2282*x2285))+(((-1.0)*x2287*x2290)));
evalcond[4]=((((-1.0)*r21*sj5*x2289))+((sj1*sj2))+((x2283*x2288))+(((-1.0)*cj1*x2286))+(((-1.0)*r22*x2290)));
evalcond[5]=((((-1.0)*sj1*x2286))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2289))+((x2283*x2284))+(((-1.0)*r12*x2290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2292=((1.0)*cj5);
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2292)))),-1);
if(!x2294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2293.value)+(((1.5707963267949)*(x2294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2295=IKsin(j4);
IkReal x2296=IKcos(j4);
IkReal x2297=(cj5*r10);
IkReal x2298=(r01*sj5);
IkReal x2299=((1.0)*cj2);
IkReal x2300=(cj5*r00);
IkReal x2301=(cj5*r20);
IkReal x2302=((1.0)*x2296);
IkReal x2303=((1.0)*x2295);
IkReal x2304=(sj5*x2295);
evalcond[0]=((((-1.0)*x2301*x2303))+(((-1.0)*r22*x2302))+((r21*x2304)));
evalcond[1]=(((r11*x2304))+(((-1.0)*x2297*x2303))+(((-1.0)*r12*x2302)));
evalcond[2]=(((x2296*x2300))+(((-1.0)*x2298*x2302))+(((-1.0)*r02*x2303)));
evalcond[3]=((-1.0)+(((-1.0)*x2300*x2303))+((x2295*x2298))+(((-1.0)*r02*x2302)));
evalcond[4]=((((-1.0)*r22*x2303))+((sj1*sj2))+(((-1.0)*r21*sj5*x2302))+((x2296*x2301))+(((-1.0)*cj1*x2299)));
evalcond[5]=(((x2296*x2297))+(((-1.0)*r11*sj5*x2302))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2299))+(((-1.0)*r12*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2305=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2305.valid){
continue;
}
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2305.value)))+(x2306.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2307=IKsin(j4);
IkReal x2308=IKcos(j4);
IkReal x2309=(cj5*r10);
IkReal x2310=(r01*sj5);
IkReal x2311=((1.0)*cj2);
IkReal x2312=(cj5*r00);
IkReal x2313=(cj5*r20);
IkReal x2314=((1.0)*x2308);
IkReal x2315=((1.0)*x2307);
IkReal x2316=(sj5*x2307);
evalcond[0]=((((-1.0)*r22*x2314))+((r21*x2316))+(((-1.0)*x2313*x2315)));
evalcond[1]=((((-1.0)*x2309*x2315))+((r11*x2316))+(((-1.0)*r12*x2314)));
evalcond[2]=(((x2308*x2312))+(((-1.0)*x2310*x2314))+(((-1.0)*r02*x2315)));
evalcond[3]=((-1.0)+(((-1.0)*x2312*x2315))+(((-1.0)*r02*x2314))+((x2307*x2310)));
evalcond[4]=((((-1.0)*r22*x2315))+((x2308*x2313))+((sj1*sj2))+(((-1.0)*cj1*x2311))+(((-1.0)*r21*sj5*x2314)));
evalcond[5]=(((x2308*x2309))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2314))+(((-1.0)*r12*x2315))+(((-1.0)*sj1*x2311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2317=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2317;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2317);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2318=((1.0)*cj5);
IkReal x2319=((((-1.0)*r21*x2318))+(((-1.0)*r20*sj5)));
j4eval[0]=x2319;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2318))+((r11*sj5))))));
j4eval[2]=IKsign(x2319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2320=cj5*cj5;
IkReal x2321=r01*r01;
IkReal x2322=(cj5*r00);
IkReal x2323=(r01*sj5);
IkReal x2324=(x2321+(((-1.0)*x2320*x2321))+(((-2.0)*x2322*x2323))+((x2320*(r00*r00)))+(r02*r02));
j4eval[0]=x2324;
j4eval[1]=((IKabs(r02))+(IKabs((x2322+(((-1.0)*x2323))))));
j4eval[2]=IKsign(x2324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2325=cj5*cj5;
IkReal x2326=r01*r01;
IkReal x2327=(r01*sj5);
IkReal x2328=(cj5*r00);
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2327*x2328))+x2326+(((-1.0)*x2325*x2326))+((x2325*(r00*r00)))+(r02*r02))),-1);
if(!x2329.valid){
continue;
}
CheckValue<IkReal> x2330 = IKatan2WithCheck(IkReal((x2328+(((-1.0)*x2327)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2329.value)))+(x2330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2331=IKsin(j4);
IkReal x2332=IKcos(j4);
IkReal x2333=(cj5*r10);
IkReal x2334=(r01*sj5);
IkReal x2335=(cj5*r00);
IkReal x2336=(cj5*r20);
IkReal x2337=((1.0)*x2332);
IkReal x2338=((1.0)*x2331);
IkReal x2339=(sj5*x2331);
evalcond[0]=(((r21*x2339))+(((-1.0)*r22*x2337))+(((-1.0)*x2336*x2338)));
evalcond[1]=(((r11*x2339))+(((-1.0)*x2333*x2338))+(((-1.0)*r12*x2337)));
evalcond[2]=(((x2332*x2335))+(((-1.0)*r02*x2338))+(((-1.0)*x2334*x2337)));
evalcond[3]=((1.0)+((x2331*x2334))+(((-1.0)*r02*x2337))+(((-1.0)*x2335*x2338)));
evalcond[4]=(((cj2*sj1))+((x2332*x2333))+((cj1*sj2))+(((-1.0)*r11*sj5*x2337))+(((-1.0)*r12*x2338)));
evalcond[5]=(((x2332*x2336))+(((-1.0)*r22*x2338))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2340=((1.0)*cj5);
CheckValue<IkReal> x2341 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2341.valid){
continue;
}
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2340))+(((-1.0)*r20*sj5)))),-1);
if(!x2342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2341.value)+(((1.5707963267949)*(x2342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2343=IKsin(j4);
IkReal x2344=IKcos(j4);
IkReal x2345=(cj5*r10);
IkReal x2346=(r01*sj5);
IkReal x2347=(cj5*r00);
IkReal x2348=(cj5*r20);
IkReal x2349=((1.0)*x2344);
IkReal x2350=((1.0)*x2343);
IkReal x2351=(sj5*x2343);
evalcond[0]=((((-1.0)*x2348*x2350))+(((-1.0)*r22*x2349))+((r21*x2351)));
evalcond[1]=((((-1.0)*x2345*x2350))+((r11*x2351))+(((-1.0)*r12*x2349)));
evalcond[2]=((((-1.0)*x2346*x2349))+((x2344*x2347))+(((-1.0)*r02*x2350)));
evalcond[3]=((1.0)+(((-1.0)*x2347*x2350))+((x2343*x2346))+(((-1.0)*r02*x2349)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2349))+((x2344*x2345))+(((-1.0)*r12*x2350)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2344*x2348))+(((-1.0)*r22*x2350))+(((-1.0)*r21*sj5*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
CheckValue<IkReal> x2353=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2352.value)+(((1.5707963267949)*(x2353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2354=IKsin(j4);
IkReal x2355=IKcos(j4);
IkReal x2356=(cj5*r10);
IkReal x2357=(r01*sj5);
IkReal x2358=(cj5*r00);
IkReal x2359=(cj5*r20);
IkReal x2360=((1.0)*x2355);
IkReal x2361=((1.0)*x2354);
IkReal x2362=(sj5*x2354);
evalcond[0]=((((-1.0)*x2359*x2361))+(((-1.0)*r22*x2360))+((r21*x2362)));
evalcond[1]=(((r11*x2362))+(((-1.0)*x2356*x2361))+(((-1.0)*r12*x2360)));
evalcond[2]=(((x2355*x2358))+(((-1.0)*x2357*x2360))+(((-1.0)*r02*x2361)));
evalcond[3]=((1.0)+((x2354*x2357))+(((-1.0)*x2358*x2361))+(((-1.0)*r02*x2360)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2360))+((cj1*sj2))+((x2355*x2356))+(((-1.0)*r12*x2361)));
evalcond[5]=((((-1.0)*r21*sj5*x2360))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2355*x2359))+(((-1.0)*r22*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2363=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2363);
rxp1_1=(px*r21);
rxp1_2=(r11*x2363);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2364=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2364);
rxp1_1=(px*r21);
rxp1_2=(r11*x2364);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2365=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2365);
rxp1_1=(px*r21);
rxp1_2=(r11*x2365);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2368=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2368.valid){
continue;
}
IkReal x2366=x2368.value;
IkReal x2367=(sj0*x2366);
cj4array[0]=(((cj1*sj2*x2367))+((cj2*sj1*x2367)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2369=IKsin(j4);
IkReal x2370=IKcos(j4);
IkReal x2371=(cj5*r20);
IkReal x2372=(r21*sj5);
IkReal x2373=((1.0)*x2369);
IkReal x2374=((1.0)*x2370);
evalcond[0]=((-1.0)*r02*x2369);
evalcond[1]=((((-1.0)*r02*x2374))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2371*x2373))+((x2369*x2372)));
evalcond[3]=(((r11*sj5*x2369))+(((-1.0)*cj5*r10*x2373)));
evalcond[4]=(((x2370*x2371))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2372*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2376=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2376.valid){
continue;
}
IkReal x2375=x2376.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2375))+((cj1*cj2*x2375)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2377=IKsin(j4);
IkReal x2378=IKcos(j4);
IkReal x2379=(r11*sj5);
IkReal x2380=((1.0)*sj0);
IkReal x2381=((1.0)*x2378);
IkReal x2382=((1.0)*cj5*x2377);
evalcond[0]=((-1.0)*r02*x2377);
evalcond[1]=((((-1.0)*r02*x2381))+(((-1.0)*x2380)));
evalcond[2]=((((-1.0)*r20*x2382))+((r21*sj5*x2377)));
evalcond[3]=((((-1.0)*r10*x2382))+((x2377*x2379)));
evalcond[4]=((((-1.0)*cj1*sj2*x2380))+(((-1.0)*cj2*sj1*x2380))+(((-1.0)*x2379*x2381))+((cj5*r10*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(r02,-1);
if(!x2383.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2383.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2384=IKsin(j4);
IkReal x2385=IKcos(j4);
IkReal x2386=((1.0)*sj0);
IkReal x2387=(cj5*x2385);
IkReal x2388=(sj5*x2384);
IkReal x2389=((1.0)*sj5*x2385);
IkReal x2390=((1.0)*cj5*x2384);
evalcond[0]=((-1.0)*r02*x2384);
evalcond[1]=((((-1.0)*r20*x2390))+((r21*x2388)));
evalcond[2]=((((-1.0)*r10*x2390))+((r11*x2388)));
evalcond[3]=((((-1.0)*r21*x2389))+((r20*x2387))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x2386))+(((-1.0)*cj2*sj1*x2386))+((r10*x2387))+(((-1.0)*r11*x2389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2391=((1.0)*sj0);
IkReal x2392=((1.0)*cj0);
CheckValue<IkReal> x2393 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2392))+(((-1.0)*r12*x2391)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2392))+(((-1.0)*r11*sj5*x2391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2393.valid){
continue;
}
CheckValue<IkReal> x2394=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2393.value)+(((1.5707963267949)*(x2394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2395=IKsin(j4);
IkReal x2396=IKcos(j4);
IkReal x2397=(cj5*r10);
IkReal x2398=(r01*sj5);
IkReal x2399=((1.0)*cj2);
IkReal x2400=(cj5*r00);
IkReal x2401=((1.0)*sj0);
IkReal x2402=(cj5*r20);
IkReal x2403=(cj1*sj2);
IkReal x2404=((1.0)*x2396);
IkReal x2405=((1.0)*x2395);
IkReal x2406=(sj5*x2395);
evalcond[0]=((((-1.0)*x2402*x2405))+((r21*x2406))+(((-1.0)*r22*x2404)));
evalcond[1]=(cj0+((r11*x2406))+(((-1.0)*x2397*x2405))+(((-1.0)*r12*x2404)));
evalcond[2]=((((-1.0)*x2400*x2405))+(((-1.0)*x2401))+(((-1.0)*r02*x2404))+((x2395*x2398)));
evalcond[3]=((((-1.0)*r21*sj5*x2404))+(((-1.0)*cj1*x2399))+((sj1*sj2))+((x2396*x2402))+(((-1.0)*r22*x2405)));
evalcond[4]=((((-1.0)*cj0*sj1*x2399))+(((-1.0)*r02*x2405))+((x2396*x2400))+(((-1.0)*cj0*x2403))+(((-1.0)*x2398*x2404)));
evalcond[5]=((((-1.0)*x2401*x2403))+((x2396*x2397))+(((-1.0)*r11*sj5*x2404))+(((-1.0)*r12*x2405))+(((-1.0)*sj0*sj1*x2399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2407=((1.0)*cj5);
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2407)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2407)))),-1);
if(!x2409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2408.value)+(((1.5707963267949)*(x2409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2410=IKsin(j4);
IkReal x2411=IKcos(j4);
IkReal x2412=(cj5*r10);
IkReal x2413=(r01*sj5);
IkReal x2414=((1.0)*cj2);
IkReal x2415=(cj5*r00);
IkReal x2416=((1.0)*sj0);
IkReal x2417=(cj5*r20);
IkReal x2418=(cj1*sj2);
IkReal x2419=((1.0)*x2411);
IkReal x2420=((1.0)*x2410);
IkReal x2421=(sj5*x2410);
evalcond[0]=(((r21*x2421))+(((-1.0)*x2417*x2420))+(((-1.0)*r22*x2419)));
evalcond[1]=(cj0+(((-1.0)*r12*x2419))+((r11*x2421))+(((-1.0)*x2412*x2420)));
evalcond[2]=(((x2410*x2413))+(((-1.0)*r02*x2419))+(((-1.0)*x2416))+(((-1.0)*x2415*x2420)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2420))+(((-1.0)*r21*sj5*x2419))+((x2411*x2417))+(((-1.0)*cj1*x2414)));
evalcond[4]=((((-1.0)*cj0*x2418))+(((-1.0)*r02*x2420))+(((-1.0)*cj0*sj1*x2414))+((x2411*x2415))+(((-1.0)*x2413*x2419)));
evalcond[5]=((((-1.0)*x2416*x2418))+(((-1.0)*r12*x2420))+(((-1.0)*sj0*sj1*x2414))+(((-1.0)*r11*sj5*x2419))+((x2411*x2412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2422=((1.0)*cj5);
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2422))+(((-1.0)*r00*sj5)))),-1);
if(!x2423.valid){
continue;
}
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2422))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2423.value)))+(x2424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2425=IKsin(j4);
IkReal x2426=IKcos(j4);
IkReal x2427=(cj5*r10);
IkReal x2428=(r01*sj5);
IkReal x2429=((1.0)*cj2);
IkReal x2430=(cj5*r00);
IkReal x2431=((1.0)*sj0);
IkReal x2432=(cj5*r20);
IkReal x2433=(cj1*sj2);
IkReal x2434=((1.0)*x2426);
IkReal x2435=((1.0)*x2425);
IkReal x2436=(sj5*x2425);
evalcond[0]=((((-1.0)*r22*x2434))+(((-1.0)*x2432*x2435))+((r21*x2436)));
evalcond[1]=(((r11*x2436))+cj0+(((-1.0)*x2427*x2435))+(((-1.0)*r12*x2434)));
evalcond[2]=((((-1.0)*x2431))+(((-1.0)*x2430*x2435))+(((-1.0)*r02*x2434))+((x2425*x2428)));
evalcond[3]=((((-1.0)*r22*x2435))+(((-1.0)*r21*sj5*x2434))+((sj1*sj2))+((x2426*x2432))+(((-1.0)*cj1*x2429)));
evalcond[4]=((((-1.0)*cj0*x2433))+(((-1.0)*cj0*sj1*x2429))+(((-1.0)*r02*x2435))+(((-1.0)*x2428*x2434))+((x2426*x2430)));
evalcond[5]=(((x2426*x2427))+(((-1.0)*x2431*x2433))+(((-1.0)*r11*sj5*x2434))+(((-1.0)*sj0*sj1*x2429))+(((-1.0)*r12*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2437=cj5*cj5;
IkReal x2438=r21*r21;
IkReal x2439=(sj1*sj2);
IkReal x2440=(r21*sj5);
IkReal x2441=(cj1*cj2);
IkReal x2442=(cj5*r20);
CheckValue<IkReal> x2443=IKPowWithIntegerCheck(IKsign((x2438+(r22*r22)+(((-1.0)*x2437*x2438))+((x2437*(r20*r20)))+(((-2.0)*x2440*x2442)))),-1);
if(!x2443.valid){
continue;
}
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2441))+((r22*x2439)))),IkReal(((((-1.0)*x2439*x2442))+(((-1.0)*x2440*x2441))+((x2439*x2440))+((x2441*x2442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2443.value)))+(x2444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2445=IKsin(j4);
IkReal x2446=IKcos(j4);
IkReal x2447=(r21*sj5);
IkReal x2448=(cj5*r20);
IkReal x2449=((1.0)*x2446);
IkReal x2450=((1.0)*x2445);
evalcond[0]=((((-1.0)*x2448*x2450))+((x2445*x2447))+(((-1.0)*r22*x2449)));
evalcond[1]=(((x2446*x2448))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2450))+(((-1.0)*x2447*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2451=(cj5*sj4);
IkReal x2452=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2452))+(((-1.0)*r00*x2451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2452))+((r10*x2451))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2452))+(((-1.0)*r00*x2451))))+IKsqr(((((-1.0)*r11*x2452))+((r10*x2451))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2452))+(((-1.0)*r00*x2451))), ((((-1.0)*r11*x2452))+((r10*x2451))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2453=IKcos(j0);
IkReal x2454=IKsin(j0);
IkReal x2455=(cj4*cj5);
IkReal x2456=(cj5*r01);
IkReal x2457=(r11*sj5);
IkReal x2458=((0.1157)*sj5);
IkReal x2459=((1.0)*sj4);
IkReal x2460=((1.0)*cj2);
IkReal x2461=((0.5723)*sj2);
IkReal x2462=(cj5*r11);
IkReal x2463=((1.0)*cj4);
IkReal x2464=((0.5723)*cj2);
IkReal x2465=(r01*sj5);
IkReal x2466=((1.0)*cj1*sj2);
IkReal x2467=(sj1*x2453);
IkReal x2468=(cj1*x2453);
IkReal x2469=(cj1*x2454);
IkReal x2470=(sj1*x2454);
evalcond[0]=(x2453+(((-1.0)*cj5*r10*x2459))+(((-1.0)*r12*x2463))+((sj4*x2457)));
evalcond[1]=((((-1.0)*cj5*r00*x2459))+(((-1.0)*x2454))+(((-1.0)*r02*x2463))+((sj4*x2465)));
evalcond[2]=(((r00*sj5))+x2456+((sj2*x2467))+(((-1.0)*x2460*x2468)));
evalcond[3]=(x2462+((r10*sj5))+((sj2*x2470))+(((-1.0)*x2460*x2469)));
evalcond[4]=((((-1.0)*x2463*x2465))+((r00*x2455))+(((-1.0)*x2460*x2467))+(((-1.0)*r02*x2459))+(((-1.0)*x2453*x2466)));
evalcond[5]=((((-1.0)*x2460*x2470))+(((-1.0)*x2454*x2466))+(((-1.0)*x2457*x2463))+((r10*x2455))+(((-1.0)*r12*x2459)));
evalcond[6]=((((0.612)*x2468))+(((-0.1157)*x2456))+((x2464*x2468))+(((-1.0)*px))+(((-0.163941)*x2454))+(((-1.0)*r00*x2458))+(((-1.0)*x2461*x2467)));
evalcond[7]=((((-1.0)*r10*x2458))+(((0.612)*x2469))+(((-0.1157)*x2462))+(((0.163941)*x2453))+((x2464*x2469))+(((-1.0)*py))+(((-1.0)*x2461*x2470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2471=((1.0)*cj5);
IkReal x2472=((1.0)*sj5);
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2471))+(((-1.0)*r10*x2472)))),IkReal(((((-1.0)*r01*x2471))+(((-1.0)*r00*x2472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
CheckValue<IkReal> x2474=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2474.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2473.value)+(((1.5707963267949)*(x2474.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2475=IKcos(j0);
IkReal x2476=IKsin(j0);
IkReal x2477=(cj5*r01);
IkReal x2478=(sj1*sj2);
IkReal x2479=((0.1157)*sj5);
IkReal x2480=(cj5*r11);
IkReal x2481=(cj1*cj2);
IkReal x2482=((0.5723)*x2476);
IkReal x2483=(cj1*x2476);
IkReal x2484=((0.5723)*x2475);
evalcond[0]=(((r00*sj5))+x2477+(((-1.0)*x2475*x2481))+((x2475*x2478)));
evalcond[1]=(x2480+((r10*sj5))+(((-1.0)*x2476*x2481))+((x2476*x2478)));
evalcond[2]=((((-1.0)*r00*x2479))+(((0.612)*cj1*x2475))+((x2481*x2484))+(((-0.1157)*x2477))+(((-1.0)*px))+(((-0.163941)*x2476))+(((-1.0)*x2478*x2484)));
evalcond[3]=((((-0.1157)*x2480))+((x2481*x2482))+(((0.612)*x2483))+(((-1.0)*py))+(((-1.0)*r10*x2479))+(((-1.0)*x2478*x2482))+(((0.163941)*x2475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2485=((1.0)*cj5);
IkReal x2486=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2485)));
j4eval[0]=x2486;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x2485))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2487=((1.0)*cj5);
IkReal x2488=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2487)));
j4eval[0]=x2488;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2487)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x2488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2489=((1.0)*sj0);
IkReal x2490=((1.0)*cj0);
IkReal x2491=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2491;
j4eval[1]=((IKabs(((((-1.0)*r02*x2490))+(((-1.0)*r12*x2489)))))+(IKabs(((((-1.0)*r01*sj5*x2490))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2489))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x2491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2492=((-1.0)*r20);
IkReal x2494 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2494)==0){
continue;
}
IkReal x2493=pow(x2494,-0.5);
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2492),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2495.value));
IkReal gconst79=(r21*x2493);
IkReal gconst80=(x2492*x2493);
CheckValue<IkReal> x2496 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2496.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2496.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2497=((-1.0)*r20);
IkReal x2498=x2493;
CheckValue<IkReal> x2500 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2497),IKFAST_ATAN2_MAGTHRESH);
if(!x2500.valid){
continue;
}
IkReal x2499=((-1.0)*(x2500.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2499;
IkReal gconst78=x2499;
IkReal gconst79=(r21*x2498);
IkReal gconst80=(x2497*x2498);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2501=((-1.0)*r20);
IkReal x2502=x2493;
CheckValue<IkReal> x2504 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2501),IKFAST_ATAN2_MAGTHRESH);
if(!x2504.valid){
continue;
}
IkReal x2503=((-1.0)*(x2504.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2503;
IkReal gconst78=x2503;
IkReal gconst79=(r21*x2502);
IkReal gconst80=(x2501*x2502);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2505=((-1.0)*r20);
IkReal x2506=x2493;
CheckValue<IkReal> x2508 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2505),IKFAST_ATAN2_MAGTHRESH);
if(!x2508.valid){
continue;
}
IkReal x2507=((-1.0)*(x2508.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2507;
IkReal gconst78=x2507;
IkReal gconst79=(r21*x2506);
IkReal gconst80=(x2505*x2506);
IkReal x2509=r22*r22;
CheckValue<IkReal> x2512=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2509))),-1);
if(!x2512.valid){
continue;
}
IkReal x2510=x2512.value;
IkReal x2511=(x2509+((x2510*(r20*r20*r20*r20)))+((x2510*(r21*r21*r21*r21)))+(((2.0)*x2510*(r20*r20)*(r21*r21))));
j4eval[0]=x2511;
j4eval[1]=IKsign(x2511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2513=(sj1*sj2);
IkReal x2514=(gconst80*r20);
IkReal x2515=(gconst79*r21);
IkReal x2516=(cj1*cj2);
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(IKsign(((x2515*x2515)+(r22*r22)+(((-2.0)*x2514*x2515))+(x2514*x2514))),-1);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal((((r22*x2513))+(((-1.0)*r22*x2516)))),IkReal(((((-1.0)*x2515*x2516))+((x2514*x2516))+((x2513*x2515))+(((-1.0)*x2513*x2514)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2517.value)))+(x2518.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2519=IKsin(j4);
IkReal x2520=IKcos(j4);
IkReal x2521=(gconst79*r01);
IkReal x2522=(gconst79*r21);
IkReal x2523=((1.0)*cj2);
IkReal x2524=(gconst79*r11);
IkReal x2525=((1.0)*sj0);
IkReal x2526=(cj1*sj2);
IkReal x2527=((1.0)*x2520);
IkReal x2528=(gconst80*x2520);
IkReal x2529=((1.0)*x2519);
IkReal x2530=(gconst80*x2529);
evalcond[0]=((((-1.0)*r20*x2530))+((x2519*x2522))+(((-1.0)*r22*x2527)));
evalcond[1]=(cj0+(((-1.0)*r12*x2527))+((x2519*x2524))+(((-1.0)*r10*x2530)));
evalcond[2]=((((-1.0)*r00*x2530))+((x2519*x2521))+(((-1.0)*r02*x2527))+(((-1.0)*x2525)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2523))+(((-1.0)*x2522*x2527))+((r20*x2528))+(((-1.0)*r22*x2529)));
evalcond[4]=((((-1.0)*cj0*sj1*x2523))+((r00*x2528))+(((-1.0)*cj0*x2526))+(((-1.0)*r02*x2529))+(((-1.0)*x2521*x2527)));
evalcond[5]=((((-1.0)*x2524*x2527))+(((-1.0)*r12*x2529))+(((-1.0)*x2525*x2526))+(((-1.0)*sj0*sj1*x2523))+((r10*x2528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2531=((1.0)*gconst80);
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2531))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2531)))),-1);
if(!x2533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2532.value)+(((1.5707963267949)*(x2533.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2534=IKsin(j4);
IkReal x2535=IKcos(j4);
IkReal x2536=(gconst79*r01);
IkReal x2537=(gconst79*r21);
IkReal x2538=((1.0)*cj2);
IkReal x2539=(gconst79*r11);
IkReal x2540=((1.0)*sj0);
IkReal x2541=(cj1*sj2);
IkReal x2542=((1.0)*x2535);
IkReal x2543=(gconst80*x2535);
IkReal x2544=((1.0)*x2534);
IkReal x2545=(gconst80*x2544);
evalcond[0]=((((-1.0)*r20*x2545))+(((-1.0)*r22*x2542))+((x2534*x2537)));
evalcond[1]=((((-1.0)*r12*x2542))+(((-1.0)*r10*x2545))+cj0+((x2534*x2539)));
evalcond[2]=((((-1.0)*r00*x2545))+(((-1.0)*x2540))+(((-1.0)*r02*x2542))+((x2534*x2536)));
evalcond[3]=(((sj1*sj2))+((r20*x2543))+(((-1.0)*r22*x2544))+(((-1.0)*x2537*x2542))+(((-1.0)*cj1*x2538)));
evalcond[4]=((((-1.0)*x2536*x2542))+(((-1.0)*cj0*sj1*x2538))+((r00*x2543))+(((-1.0)*cj0*x2541))+(((-1.0)*r02*x2544)));
evalcond[5]=((((-1.0)*r12*x2544))+(((-1.0)*sj0*sj1*x2538))+(((-1.0)*x2539*x2542))+(((-1.0)*x2540*x2541))+((r10*x2543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2546=((1.0)*gconst80);
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2546)))),-1);
if(!x2547.valid){
continue;
}
CheckValue<IkReal> x2548 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2546))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2547.value)))+(x2548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2549=IKsin(j4);
IkReal x2550=IKcos(j4);
IkReal x2551=(gconst79*r01);
IkReal x2552=(gconst79*r21);
IkReal x2553=((1.0)*cj2);
IkReal x2554=(gconst79*r11);
IkReal x2555=((1.0)*sj0);
IkReal x2556=(cj1*sj2);
IkReal x2557=((1.0)*x2550);
IkReal x2558=(gconst80*x2550);
IkReal x2559=((1.0)*x2549);
IkReal x2560=(gconst80*x2559);
evalcond[0]=((((-1.0)*r20*x2560))+((x2549*x2552))+(((-1.0)*r22*x2557)));
evalcond[1]=(cj0+(((-1.0)*r12*x2557))+((x2549*x2554))+(((-1.0)*r10*x2560)));
evalcond[2]=((((-1.0)*r00*x2560))+((x2549*x2551))+(((-1.0)*r02*x2557))+(((-1.0)*x2555)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2553))+(((-1.0)*x2552*x2557))+((r20*x2558))+(((-1.0)*r22*x2559)));
evalcond[4]=((((-1.0)*cj0*sj1*x2553))+(((-1.0)*cj0*x2556))+((r00*x2558))+(((-1.0)*r02*x2559))+(((-1.0)*x2551*x2557)));
evalcond[5]=((((-1.0)*x2554*x2557))+(((-1.0)*r12*x2559))+(((-1.0)*x2555*x2556))+(((-1.0)*sj0*sj1*x2553))+((r10*x2558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2561=((-1.0)*r21);
IkReal x2563 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2563)==0){
continue;
}
IkReal x2562=pow(x2563,-0.5);
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(x2561),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2564.value))));
IkReal gconst82=(x2561*x2562);
IkReal gconst83=((1.0)*r20*x2562);
CheckValue<IkReal> x2565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2565.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2565.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2566=((-1.0)*r21);
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal(x2566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
IkReal x2567=((1.0)*(x2569.value));
IkReal x2568=x2562;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2567)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2567)));
IkReal gconst82=(x2566*x2568);
IkReal gconst83=((1.0)*r20*x2568);
IkReal x2570=r22*r22;
IkReal x2571=((1.0)*x2570);
CheckValue<IkReal> x2575=IKPowWithIntegerCheck(((-1.0)+x2570),-1);
if(!x2575.valid){
continue;
}
IkReal x2572=x2575.value;
if((((1.0)+(((-1.0)*x2571)))) < -0.00001)
continue;
IkReal x2573=IKsqrt(((1.0)+(((-1.0)*x2571))));
IkReal x2574=(cj0*x2572*x2573);
j4eval[0]=((IKabs((x2574+(((-1.0)*x2571*x2574)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2576=((-1.0)*r21);
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(x2576),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
IkReal x2577=((1.0)*(x2579.value));
IkReal x2578=x2562;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2577)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2577)));
IkReal gconst82=(x2576*x2578);
IkReal gconst83=((1.0)*r20*x2578);
IkReal x2580=r22*r22;
IkReal x2581=((1.0)*x2580);
CheckValue<IkReal> x2585=IKPowWithIntegerCheck(((-1.0)+x2580),-1);
if(!x2585.valid){
continue;
}
IkReal x2582=x2585.value;
if((((1.0)+(((-1.0)*x2581)))) < -0.00001)
continue;
IkReal x2583=IKsqrt(((1.0)+(((-1.0)*x2581))));
IkReal x2584=(sj0*x2582*x2583);
j4eval[0]=((IKabs((x2584+(((-1.0)*x2581*x2584)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2586=((-1.0)*r21);
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal(x2586),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
IkReal x2587=((1.0)*(x2589.value));
IkReal x2588=x2562;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2587)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2587)));
IkReal gconst82=(x2586*x2588);
IkReal gconst83=((1.0)*r20*x2588);
IkReal x2590=r22*r22;
IkReal x2591=(r12*sj0);
IkReal x2592=(cj0*r02);
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(((-1.0)+x2590),-1);
if(!x2596.valid){
continue;
}
IkReal x2593=x2596.value;
if((((1.0)+(((-1.0)*x2590)))) < -0.00001)
continue;
IkReal x2594=IKsqrt(((1.0)+(((-1.0)*x2590))));
IkReal x2595=(r22*x2593*x2594);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x2591*x2595))+((x2592*x2595)))))+(IKabs(((((-1.0)*x2591))+(((-1.0)*x2592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2597=((1.0)*sj0);
IkReal x2598=((1.0)*cj0);
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2599.valid){
continue;
}
CheckValue<IkReal> x2600 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2598))+(((-1.0)*r12*x2597)))),IkReal(((((-1.0)*gconst82*r11*x2597))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x2598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2599.value)))+(x2600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2601=IKsin(j4);
IkReal x2602=IKcos(j4);
IkReal x2603=(gconst82*r11);
IkReal x2604=((1.0)*cj2);
IkReal x2605=((1.0)*sj0);
IkReal x2606=(cj1*sj2);
IkReal x2607=((1.0)*x2602);
IkReal x2608=(gconst83*x2602);
IkReal x2609=(gconst82*x2601);
IkReal x2610=((1.0)*x2601);
evalcond[0]=((((-1.0)*gconst83*r20*x2610))+(((-1.0)*r22*x2607))+((r21*x2609)));
evalcond[1]=(cj0+(((-1.0)*r12*x2607))+((x2601*x2603))+(((-1.0)*gconst83*r10*x2610)));
evalcond[2]=((((-1.0)*r02*x2607))+(((-1.0)*gconst83*r00*x2610))+((r01*x2609))+(((-1.0)*x2605)));
evalcond[3]=(((r20*x2608))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2607))+(((-1.0)*r22*x2610))+(((-1.0)*cj1*x2604)));
evalcond[4]=((((-1.0)*cj0*x2606))+(((-1.0)*gconst82*r01*x2607))+(((-1.0)*r02*x2610))+(((-1.0)*cj0*sj1*x2604))+((r00*x2608)));
evalcond[5]=((((-1.0)*r12*x2610))+((r10*x2608))+(((-1.0)*x2603*x2607))+(((-1.0)*sj0*sj1*x2604))+(((-1.0)*x2605*x2606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2611=((1.0)*gconst83);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2611))+(((-1.0)*gconst82*r10)))),-1);
if(!x2612.valid){
continue;
}
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2611))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2612.value)))+(x2613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2614=IKsin(j4);
IkReal x2615=IKcos(j4);
IkReal x2616=(gconst82*r11);
IkReal x2617=((1.0)*cj2);
IkReal x2618=((1.0)*sj0);
IkReal x2619=(cj1*sj2);
IkReal x2620=((1.0)*x2615);
IkReal x2621=(gconst83*x2615);
IkReal x2622=(gconst82*x2614);
IkReal x2623=((1.0)*x2614);
evalcond[0]=((((-1.0)*gconst83*r20*x2623))+(((-1.0)*r22*x2620))+((r21*x2622)));
evalcond[1]=((((-1.0)*gconst83*r10*x2623))+cj0+(((-1.0)*r12*x2620))+((x2614*x2616)));
evalcond[2]=(((r01*x2622))+(((-1.0)*gconst83*r00*x2623))+(((-1.0)*r02*x2620))+(((-1.0)*x2618)));
evalcond[3]=(((r20*x2621))+(((-1.0)*gconst82*r21*x2620))+((sj1*sj2))+(((-1.0)*r22*x2623))+(((-1.0)*cj1*x2617)));
evalcond[4]=(((r00*x2621))+(((-1.0)*gconst82*r01*x2620))+(((-1.0)*cj0*x2619))+(((-1.0)*cj0*sj1*x2617))+(((-1.0)*r02*x2623)));
evalcond[5]=((((-1.0)*x2618*x2619))+(((-1.0)*r12*x2623))+(((-1.0)*sj0*sj1*x2617))+((r10*x2621))+(((-1.0)*x2616*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2624=((1.0)*gconst83);
CheckValue<IkReal> x2625 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2624))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2625.valid){
continue;
}
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2624))+(((-1.0)*gconst82*r00)))),-1);
if(!x2626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2625.value)+(((1.5707963267949)*(x2626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2627=IKsin(j4);
IkReal x2628=IKcos(j4);
IkReal x2629=(gconst82*r11);
IkReal x2630=((1.0)*cj2);
IkReal x2631=((1.0)*sj0);
IkReal x2632=(cj1*sj2);
IkReal x2633=((1.0)*x2628);
IkReal x2634=(gconst83*x2628);
IkReal x2635=(gconst82*x2627);
IkReal x2636=((1.0)*x2627);
evalcond[0]=(((r21*x2635))+(((-1.0)*gconst83*r20*x2636))+(((-1.0)*r22*x2633)));
evalcond[1]=(cj0+((x2627*x2629))+(((-1.0)*gconst83*r10*x2636))+(((-1.0)*r12*x2633)));
evalcond[2]=((((-1.0)*r02*x2633))+(((-1.0)*gconst83*r00*x2636))+(((-1.0)*x2631))+((r01*x2635)));
evalcond[3]=((((-1.0)*cj1*x2630))+((sj1*sj2))+((r20*x2634))+(((-1.0)*gconst82*r21*x2633))+(((-1.0)*r22*x2636)));
evalcond[4]=((((-1.0)*cj0*sj1*x2630))+(((-1.0)*r02*x2636))+(((-1.0)*gconst82*r01*x2633))+((r00*x2634))+(((-1.0)*cj0*x2632)));
evalcond[5]=((((-1.0)*sj0*sj1*x2630))+((r10*x2634))+(((-1.0)*x2629*x2633))+(((-1.0)*r12*x2636))+(((-1.0)*x2631*x2632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2637=((-1.0)*r10);
IkReal x2639 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2639)==0){
continue;
}
IkReal x2638=pow(x2639,-0.5);
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2637),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2640.value));
IkReal gconst85=(r11*x2638);
IkReal gconst86=(x2637*x2638);
CheckValue<IkReal> x2641 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2641.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2641.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2642=((-1.0)*r10);
IkReal x2643=x2638;
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2642),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
IkReal x2644=((-1.0)*(x2645.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2644;
IkReal gconst84=x2644;
IkReal gconst85=(r11*x2643);
IkReal gconst86=(x2642*x2643);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2646=((1.0)*sj0);
IkReal x2647=((1.0)*gconst85);
CheckValue<IkReal> x2648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2647)))),-1);
if(!x2648.valid){
continue;
}
CheckValue<IkReal> x2649 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2646))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2646))+(((-1.0)*cj0*r01*x2647))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2648.value)))+(x2649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2650=IKsin(j4);
IkReal x2651=IKcos(j4);
IkReal x2652=(gconst85*r21);
IkReal x2653=(gconst86*r00);
IkReal x2654=(gconst86*r10);
IkReal x2655=((1.0)*cj2);
IkReal x2656=(gconst85*r11);
IkReal x2657=(gconst85*r01);
IkReal x2658=((1.0)*sj0);
IkReal x2659=(gconst86*r20);
IkReal x2660=(cj1*sj2);
IkReal x2661=((1.0)*x2651);
IkReal x2662=((1.0)*x2650);
evalcond[0]=((((-1.0)*x2659*x2662))+((x2650*x2652))+(((-1.0)*r22*x2661)));
evalcond[1]=((((-1.0)*r12*x2661))+cj0+(((-1.0)*x2654*x2662))+((x2650*x2656)));
evalcond[2]=((((-1.0)*x2653*x2662))+(((-1.0)*r02*x2661))+(((-1.0)*x2658))+((x2650*x2657)));
evalcond[3]=((((-1.0)*x2652*x2661))+(((-1.0)*cj1*x2655))+((sj1*sj2))+((x2651*x2659))+(((-1.0)*r22*x2662)));
evalcond[4]=((((-1.0)*cj0*x2660))+(((-1.0)*r02*x2662))+(((-1.0)*cj0*sj1*x2655))+(((-1.0)*x2657*x2661))+((x2651*x2653)));
evalcond[5]=((((-1.0)*r12*x2662))+(((-1.0)*sj0*sj1*x2655))+(((-1.0)*x2658*x2660))+((x2651*x2654))+(((-1.0)*x2656*x2661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2663=((1.0)*gconst86);
CheckValue<IkReal> x2664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2664.valid){
continue;
}
CheckValue<IkReal> x2665=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2663))+(((-1.0)*gconst85*r00)))),-1);
if(!x2665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2664.value)+(((1.5707963267949)*(x2665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2666=IKsin(j4);
IkReal x2667=IKcos(j4);
IkReal x2668=(gconst85*r21);
IkReal x2669=(gconst86*r00);
IkReal x2670=(gconst86*r10);
IkReal x2671=((1.0)*cj2);
IkReal x2672=(gconst85*r11);
IkReal x2673=(gconst85*r01);
IkReal x2674=((1.0)*sj0);
IkReal x2675=(gconst86*r20);
IkReal x2676=(cj1*sj2);
IkReal x2677=((1.0)*x2667);
IkReal x2678=((1.0)*x2666);
evalcond[0]=((((-1.0)*x2675*x2678))+((x2666*x2668))+(((-1.0)*r22*x2677)));
evalcond[1]=((((-1.0)*r12*x2677))+cj0+(((-1.0)*x2670*x2678))+((x2666*x2672)));
evalcond[2]=(((x2666*x2673))+(((-1.0)*r02*x2677))+(((-1.0)*x2674))+(((-1.0)*x2669*x2678)));
evalcond[3]=(((x2667*x2675))+(((-1.0)*cj1*x2671))+((sj1*sj2))+(((-1.0)*r22*x2678))+(((-1.0)*x2668*x2677)));
evalcond[4]=((((-1.0)*cj0*x2676))+(((-1.0)*cj0*sj1*x2671))+((x2667*x2669))+(((-1.0)*x2673*x2677))+(((-1.0)*r02*x2678)));
evalcond[5]=((((-1.0)*r12*x2678))+((x2667*x2670))+(((-1.0)*sj0*sj1*x2671))+(((-1.0)*x2674*x2676))+(((-1.0)*x2672*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2679=((-1.0)*r11);
IkReal x2681 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2681)==0){
continue;
}
IkReal x2680=pow(x2681,-0.5);
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal(x2679),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2682.value))));
IkReal gconst88=(x2679*x2680);
IkReal gconst89=((1.0)*r10*x2680);
CheckValue<IkReal> x2683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2683.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2683.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2684=((-1.0)*r11);
CheckValue<IkReal> x2687 = IKatan2WithCheck(IkReal(x2684),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2687.valid){
continue;
}
IkReal x2685=((1.0)*(x2687.value));
IkReal x2686=x2680;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2685)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2685)));
IkReal gconst88=(x2684*x2686);
IkReal gconst89=((1.0)*r10*x2686);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2688=((-1.0)*r11);
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(x2688),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
IkReal x2689=((1.0)*(x2691.value));
IkReal x2690=x2680;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2689)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2689)));
IkReal gconst88=(x2688*x2690);
IkReal gconst89=((1.0)*r10*x2690);
IkReal x2692=r12*r12;
IkReal x2693=((1.0)*sj0);
IkReal x2694=(cj0*r02);
IkReal x2695=x2680;
j4eval[0]=((IKabs((((sj0*x2692*x2695))+((r12*x2694*x2695))+(((-1.0)*x2693*x2695)))))+(IKabs(((((-1.0)*r12*x2693))+(((-1.0)*x2694))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2696=((-1.0)*r11);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(x2696),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
IkReal x2697=((1.0)*(x2699.value));
IkReal x2698=x2680;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2697)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2697)));
IkReal gconst88=(x2696*x2698);
IkReal gconst89=((1.0)*r10*x2698);
IkReal x2700=r12*r12;
IkReal x2701=(cj1*cj2*r22);
IkReal x2702=(r22*sj1*sj2);
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(((-1.0)+x2700),-1);
if(!x2706.valid){
continue;
}
IkReal x2703=x2706.value;
if((((1.0)+(((-1.0)*x2700)))) < -0.00001)
continue;
IkReal x2704=IKsqrt(((1.0)+(((-1.0)*x2700))));
IkReal x2705=(r12*x2703*x2704);
j4eval[0]=((IKabs(((((-1.0)*x2702*x2705))+((x2701*x2705)))))+(IKabs((x2702+(((-1.0)*x2701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2707=(cj1*cj2);
IkReal x2708=(gconst89*r20);
IkReal x2709=(gconst88*r21);
IkReal x2710=(sj1*sj2);
CheckValue<IkReal> x2711 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2707))+((r22*x2710)))),IkReal(((((-1.0)*x2707*x2709))+((x2709*x2710))+((x2707*x2708))+(((-1.0)*x2708*x2710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2711.valid){
continue;
}
CheckValue<IkReal> x2712=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2708*x2709))+(x2708*x2708)+(x2709*x2709))),-1);
if(!x2712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2711.value)+(((1.5707963267949)*(x2712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2713=IKsin(j4);
IkReal x2714=IKcos(j4);
IkReal x2715=((1.0)*sj0);
IkReal x2716=((1.0)*cj2);
IkReal x2717=(gconst89*r20);
IkReal x2718=(gconst89*r10);
IkReal x2719=(gconst89*r00);
IkReal x2720=(cj1*sj2);
IkReal x2721=((1.0)*x2714);
IkReal x2722=((1.0)*x2713);
IkReal x2723=(gconst88*x2713);
evalcond[0]=(((r21*x2723))+(((-1.0)*r22*x2721))+(((-1.0)*x2717*x2722)));
evalcond[1]=((((-1.0)*x2718*x2722))+cj0+(((-1.0)*r12*x2721))+((r11*x2723)));
evalcond[2]=((((-1.0)*x2715))+(((-1.0)*x2719*x2722))+((r01*x2723))+(((-1.0)*r02*x2721)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2722))+(((-1.0)*gconst88*r21*x2721))+((x2714*x2717))+(((-1.0)*cj1*x2716)));
evalcond[4]=((((-1.0)*cj0*sj1*x2716))+(((-1.0)*cj0*x2720))+(((-1.0)*gconst88*r01*x2721))+(((-1.0)*r02*x2722))+((x2714*x2719)));
evalcond[5]=((((-1.0)*gconst88*r11*x2721))+(((-1.0)*r12*x2722))+(((-1.0)*x2715*x2720))+((x2714*x2718))+(((-1.0)*cj2*sj1*x2715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2724=((1.0)*sj0);
IkReal x2725=((1.0)*cj0);
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2724))+(((-1.0)*r02*x2725)))),IkReal(((((-1.0)*gconst88*r11*x2724))+((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2725))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
CheckValue<IkReal> x2727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2726.value)+(((1.5707963267949)*(x2727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2728=IKsin(j4);
IkReal x2729=IKcos(j4);
IkReal x2730=((1.0)*sj0);
IkReal x2731=((1.0)*cj2);
IkReal x2732=(gconst89*r20);
IkReal x2733=(gconst89*r10);
IkReal x2734=(gconst89*r00);
IkReal x2735=(cj1*sj2);
IkReal x2736=((1.0)*x2729);
IkReal x2737=((1.0)*x2728);
IkReal x2738=(gconst88*x2728);
evalcond[0]=(((r21*x2738))+(((-1.0)*r22*x2736))+(((-1.0)*x2732*x2737)));
evalcond[1]=(cj0+(((-1.0)*x2733*x2737))+(((-1.0)*r12*x2736))+((r11*x2738)));
evalcond[2]=((((-1.0)*x2734*x2737))+((r01*x2738))+(((-1.0)*r02*x2736))+(((-1.0)*x2730)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2737))+(((-1.0)*gconst88*r21*x2736))+(((-1.0)*cj1*x2731))+((x2729*x2732)));
evalcond[4]=((((-1.0)*cj0*sj1*x2731))+(((-1.0)*cj0*x2735))+(((-1.0)*r02*x2737))+(((-1.0)*gconst88*r01*x2736))+((x2729*x2734)));
evalcond[5]=((((-1.0)*x2730*x2735))+(((-1.0)*cj2*sj1*x2730))+(((-1.0)*r12*x2737))+(((-1.0)*gconst88*r11*x2736))+((x2729*x2733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2739=((1.0)*gconst89);
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2739))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2739))+(((-1.0)*gconst88*r00)))),-1);
if(!x2741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2740.value)+(((1.5707963267949)*(x2741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2742=IKsin(j4);
IkReal x2743=IKcos(j4);
IkReal x2744=((1.0)*sj0);
IkReal x2745=((1.0)*cj2);
IkReal x2746=(gconst89*r20);
IkReal x2747=(gconst89*r10);
IkReal x2748=(gconst89*r00);
IkReal x2749=(cj1*sj2);
IkReal x2750=((1.0)*x2743);
IkReal x2751=((1.0)*x2742);
IkReal x2752=(gconst88*x2742);
evalcond[0]=((((-1.0)*r22*x2750))+((r21*x2752))+(((-1.0)*x2746*x2751)));
evalcond[1]=(((r11*x2752))+cj0+(((-1.0)*r12*x2750))+(((-1.0)*x2747*x2751)));
evalcond[2]=((((-1.0)*x2748*x2751))+((r01*x2752))+(((-1.0)*x2744))+(((-1.0)*r02*x2750)));
evalcond[3]=((((-1.0)*r22*x2751))+((x2743*x2746))+(((-1.0)*gconst88*r21*x2750))+((sj1*sj2))+(((-1.0)*cj1*x2745)));
evalcond[4]=((((-1.0)*gconst88*r01*x2750))+((x2743*x2748))+(((-1.0)*cj0*x2749))+(((-1.0)*r02*x2751))+(((-1.0)*cj0*sj1*x2745)));
evalcond[5]=((((-1.0)*gconst88*r11*x2750))+(((-1.0)*x2744*x2749))+((x2743*x2747))+(((-1.0)*cj2*sj1*x2744))+(((-1.0)*r12*x2751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2753=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2753;
j4eval[1]=IKsign(x2753);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2754=((1.0)*cj5);
IkReal x2755=((((-1.0)*r01*x2754))+(((-1.0)*r00*sj5)));
j4eval[0]=x2755;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2754)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2755);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2756=cj5*cj5;
IkReal x2757=r11*r11;
IkReal x2758=(r11*sj5);
IkReal x2759=(cj5*r10);
IkReal x2760=(x2757+(r12*r12)+(((-1.0)*x2756*x2757))+((x2756*(r10*r10)))+(((-2.0)*x2758*x2759)));
j4eval[0]=x2760;
j4eval[1]=IKsign(x2760);
j4eval[2]=((IKabs(r12))+(IKabs((x2759+(((-1.0)*x2758))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2761=cj5*cj5;
IkReal x2762=r11*r11;
IkReal x2763=(cj5*r10);
IkReal x2764=(r11*sj5);
CheckValue<IkReal> x2765 = IKatan2WithCheck(IkReal((x2763+(((-1.0)*x2764)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2765.valid){
continue;
}
CheckValue<IkReal> x2766=IKPowWithIntegerCheck(IKsign((x2762+(r12*r12)+((x2761*(r10*r10)))+(((-1.0)*x2761*x2762))+(((-2.0)*x2763*x2764)))),-1);
if(!x2766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2765.value)+(((1.5707963267949)*(x2766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2767=IKsin(j4);
IkReal x2768=IKcos(j4);
IkReal x2769=(cj5*r10);
IkReal x2770=(r01*sj5);
IkReal x2771=((1.0)*cj2);
IkReal x2772=(cj5*r00);
IkReal x2773=(cj5*r20);
IkReal x2774=((1.0)*x2768);
IkReal x2775=((1.0)*x2767);
IkReal x2776=(sj5*x2767);
evalcond[0]=((((-1.0)*x2773*x2775))+((r21*x2776))+(((-1.0)*r22*x2774)));
evalcond[1]=((((-1.0)*r02*x2774))+(((-1.0)*x2772*x2775))+((x2767*x2770)));
evalcond[2]=((((-1.0)*r11*sj5*x2774))+(((-1.0)*r12*x2775))+((x2768*x2769)));
evalcond[3]=((1.0)+((r11*x2776))+(((-1.0)*x2769*x2775))+(((-1.0)*r12*x2774)));
evalcond[4]=(((x2768*x2773))+((sj1*sj2))+(((-1.0)*cj1*x2771))+(((-1.0)*r21*sj5*x2774))+(((-1.0)*r22*x2775)));
evalcond[5]=(((x2768*x2772))+(((-1.0)*r02*x2775))+(((-1.0)*cj1*sj2))+(((-1.0)*x2770*x2774))+(((-1.0)*sj1*x2771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2777=((1.0)*cj5);
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2777))+(((-1.0)*r00*sj5)))),-1);
if(!x2778.valid){
continue;
}
CheckValue<IkReal> x2779 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2778.value)))+(x2779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2780=IKsin(j4);
IkReal x2781=IKcos(j4);
IkReal x2782=(cj5*r10);
IkReal x2783=(r01*sj5);
IkReal x2784=((1.0)*cj2);
IkReal x2785=(cj5*r00);
IkReal x2786=(cj5*r20);
IkReal x2787=((1.0)*x2781);
IkReal x2788=((1.0)*x2780);
IkReal x2789=(sj5*x2780);
evalcond[0]=(((r21*x2789))+(((-1.0)*x2786*x2788))+(((-1.0)*r22*x2787)));
evalcond[1]=(((x2780*x2783))+(((-1.0)*x2785*x2788))+(((-1.0)*r02*x2787)));
evalcond[2]=((((-1.0)*r12*x2788))+((x2781*x2782))+(((-1.0)*r11*sj5*x2787)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2787))+(((-1.0)*x2782*x2788))+((r11*x2789)));
evalcond[4]=((((-1.0)*cj1*x2784))+((x2781*x2786))+(((-1.0)*r21*sj5*x2787))+((sj1*sj2))+(((-1.0)*r22*x2788)));
evalcond[5]=(((x2781*x2785))+(((-1.0)*sj1*x2784))+(((-1.0)*cj1*sj2))+(((-1.0)*x2783*x2787))+(((-1.0)*r02*x2788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2790=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2790.valid){
continue;
}
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2790.value)))+(x2791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2792=IKsin(j4);
IkReal x2793=IKcos(j4);
IkReal x2794=(cj5*r10);
IkReal x2795=(r01*sj5);
IkReal x2796=((1.0)*cj2);
IkReal x2797=(cj5*r00);
IkReal x2798=(cj5*r20);
IkReal x2799=((1.0)*x2793);
IkReal x2800=((1.0)*x2792);
IkReal x2801=(sj5*x2792);
evalcond[0]=((((-1.0)*r22*x2799))+(((-1.0)*x2798*x2800))+((r21*x2801)));
evalcond[1]=(((x2792*x2795))+(((-1.0)*x2797*x2800))+(((-1.0)*r02*x2799)));
evalcond[2]=((((-1.0)*r11*sj5*x2799))+((x2793*x2794))+(((-1.0)*r12*x2800)));
evalcond[3]=((1.0)+(((-1.0)*x2794*x2800))+(((-1.0)*r12*x2799))+((r11*x2801)));
evalcond[4]=((((-1.0)*r21*sj5*x2799))+((sj1*sj2))+((x2793*x2798))+(((-1.0)*r22*x2800))+(((-1.0)*cj1*x2796)));
evalcond[5]=((((-1.0)*x2795*x2799))+(((-1.0)*sj1*x2796))+(((-1.0)*cj1*sj2))+((x2793*x2797))+(((-1.0)*r02*x2800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2802=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2802;
j4eval[1]=IKsign(x2802);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2803=((1.0)*cj5);
IkReal x2804=((((-1.0)*r21*x2803))+(((-1.0)*r20*sj5)));
j4eval[0]=x2804;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2803))))));
j4eval[2]=IKsign(x2804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2805=cj5*cj5;
IkReal x2806=r11*r11;
IkReal x2807=(cj5*r10);
IkReal x2808=(r11*sj5);
IkReal x2809=((((-1.0)*x2806))+((x2805*x2806))+(((-1.0)*(r12*r12)))+(((-1.0)*x2805*(r10*r10)))+(((2.0)*x2807*x2808)));
j4eval[0]=x2809;
j4eval[1]=((IKabs(((((-1.0)*x2808))+x2807)))+(IKabs(r12)));
j4eval[2]=IKsign(x2809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2810=cj5*cj5;
IkReal x2811=r11*r11;
IkReal x2812=(cj5*r10);
IkReal x2813=(r11*sj5);
CheckValue<IkReal> x2814 = IKatan2WithCheck(IkReal(((((-1.0)*x2813))+x2812)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2814.valid){
continue;
}
CheckValue<IkReal> x2815=IKPowWithIntegerCheck(IKsign((((x2810*x2811))+(((-1.0)*x2811))+(((2.0)*x2812*x2813))+(((-1.0)*(r12*r12)))+(((-1.0)*x2810*(r10*r10))))),-1);
if(!x2815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2814.value)+(((1.5707963267949)*(x2815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2816=IKsin(j4);
IkReal x2817=IKcos(j4);
IkReal x2818=(cj5*r10);
IkReal x2819=(r01*sj5);
IkReal x2820=(cj5*r00);
IkReal x2821=(cj5*r20);
IkReal x2822=((1.0)*x2817);
IkReal x2823=((1.0)*x2816);
IkReal x2824=(sj5*x2816);
evalcond[0]=((((-1.0)*x2821*x2823))+((r21*x2824))+(((-1.0)*r22*x2822)));
evalcond[1]=((((-1.0)*x2820*x2823))+(((-1.0)*r02*x2822))+((x2816*x2819)));
evalcond[2]=((((-1.0)*r12*x2823))+(((-1.0)*r11*sj5*x2822))+((x2817*x2818)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2822))+(((-1.0)*x2818*x2823))+((r11*x2824)));
evalcond[4]=(((cj2*sj1))+((x2817*x2820))+((cj1*sj2))+(((-1.0)*r02*x2823))+(((-1.0)*x2819*x2822)));
evalcond[5]=(((x2817*x2821))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2823))+(((-1.0)*r21*sj5*x2822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2825=((1.0)*cj5);
CheckValue<IkReal> x2826 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2826.valid){
continue;
}
CheckValue<IkReal> x2827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2825))+(((-1.0)*r20*sj5)))),-1);
if(!x2827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2826.value)+(((1.5707963267949)*(x2827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2828=IKsin(j4);
IkReal x2829=IKcos(j4);
IkReal x2830=(cj5*r10);
IkReal x2831=(r01*sj5);
IkReal x2832=(cj5*r00);
IkReal x2833=(cj5*r20);
IkReal x2834=((1.0)*x2829);
IkReal x2835=((1.0)*x2828);
IkReal x2836=(sj5*x2828);
evalcond[0]=((((-1.0)*x2833*x2835))+(((-1.0)*r22*x2834))+((r21*x2836)));
evalcond[1]=(((x2828*x2831))+(((-1.0)*x2832*x2835))+(((-1.0)*r02*x2834)));
evalcond[2]=(((x2829*x2830))+(((-1.0)*r12*x2835))+(((-1.0)*r11*sj5*x2834)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2834))+((r11*x2836))+(((-1.0)*x2830*x2835)));
evalcond[4]=(((cj2*sj1))+((x2829*x2832))+((cj1*sj2))+(((-1.0)*x2831*x2834))+(((-1.0)*r02*x2835)));
evalcond[5]=(((x2829*x2833))+(((-1.0)*r21*sj5*x2834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
CheckValue<IkReal> x2838=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2837.value)+(((1.5707963267949)*(x2838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2839=IKsin(j4);
IkReal x2840=IKcos(j4);
IkReal x2841=(cj5*r10);
IkReal x2842=(r01*sj5);
IkReal x2843=(cj5*r00);
IkReal x2844=(cj5*r20);
IkReal x2845=((1.0)*x2840);
IkReal x2846=((1.0)*x2839);
IkReal x2847=(sj5*x2839);
evalcond[0]=(((r21*x2847))+(((-1.0)*x2844*x2846))+(((-1.0)*r22*x2845)));
evalcond[1]=((((-1.0)*x2843*x2846))+(((-1.0)*r02*x2845))+((x2839*x2842)));
evalcond[2]=((((-1.0)*r12*x2846))+((x2840*x2841))+(((-1.0)*r11*sj5*x2845)));
evalcond[3]=((-1.0)+((r11*x2847))+(((-1.0)*r12*x2845))+(((-1.0)*x2841*x2846)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2842*x2845))+((cj1*sj2))+((x2840*x2843))+(((-1.0)*r02*x2846)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2840*x2844))+(((-1.0)*r22*x2846))+(((-1.0)*r21*sj5*x2845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2848=((-1.0)*r00);
IkReal x2850 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2850)==0){
continue;
}
IkReal x2849=pow(x2850,-0.5);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2848),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2851.value));
IkReal gconst91=(r01*x2849);
IkReal gconst92=(x2848*x2849);
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2852.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2853=((-1.0)*r00);
IkReal x2854=x2849;
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2853),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
IkReal x2855=((-1.0)*(x2856.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2855;
IkReal gconst90=x2855;
IkReal gconst91=(r01*x2854);
IkReal gconst92=(x2853*x2854);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2857=((1.0)*sj0);
IkReal x2858=((1.0)*cj0);
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2859.valid){
continue;
}
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2857))+(((-1.0)*r02*x2858)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2858))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2859.value)))+(x2860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2861=IKsin(j4);
IkReal x2862=IKcos(j4);
IkReal x2863=((1.0)*cj2);
IkReal x2864=(gconst92*r00);
IkReal x2865=(gconst92*r20);
IkReal x2866=((1.0)*sj0);
IkReal x2867=(gconst92*r10);
IkReal x2868=(cj1*sj2);
IkReal x2869=((1.0)*x2862);
IkReal x2870=(gconst91*x2861);
IkReal x2871=((1.0)*x2861);
evalcond[0]=((((-1.0)*x2865*x2871))+(((-1.0)*r22*x2869))+((r21*x2870)));
evalcond[1]=((((-1.0)*r12*x2869))+cj0+((r11*x2870))+(((-1.0)*x2867*x2871)));
evalcond[2]=((((-1.0)*r02*x2869))+((r01*x2870))+(((-1.0)*x2864*x2871))+(((-1.0)*x2866)));
evalcond[3]=((((-1.0)*cj1*x2863))+(((-1.0)*r22*x2871))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2869))+((x2862*x2865)));
evalcond[4]=((((-1.0)*cj0*x2868))+(((-1.0)*r02*x2871))+(((-1.0)*gconst91*r01*x2869))+(((-1.0)*cj0*sj1*x2863))+((x2862*x2864)));
evalcond[5]=((((-1.0)*gconst91*r11*x2869))+(((-1.0)*sj0*sj1*x2863))+((x2862*x2867))+(((-1.0)*r12*x2871))+(((-1.0)*x2866*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2872=((1.0)*gconst92);
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2872)))),-1);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2873.value)))+(x2874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2875=IKsin(j4);
IkReal x2876=IKcos(j4);
IkReal x2877=((1.0)*cj2);
IkReal x2878=(gconst92*r00);
IkReal x2879=(gconst92*r20);
IkReal x2880=((1.0)*sj0);
IkReal x2881=(gconst92*r10);
IkReal x2882=(cj1*sj2);
IkReal x2883=((1.0)*x2876);
IkReal x2884=(gconst91*x2875);
IkReal x2885=((1.0)*x2875);
evalcond[0]=((((-1.0)*r22*x2883))+((r21*x2884))+(((-1.0)*x2879*x2885)));
evalcond[1]=(cj0+((r11*x2884))+(((-1.0)*r12*x2883))+(((-1.0)*x2881*x2885)));
evalcond[2]=((((-1.0)*r02*x2883))+((r01*x2884))+(((-1.0)*x2878*x2885))+(((-1.0)*x2880)));
evalcond[3]=((((-1.0)*gconst91*r21*x2883))+(((-1.0)*r22*x2885))+((x2876*x2879))+(((-1.0)*cj1*x2877))+((sj1*sj2)));
evalcond[4]=(((x2876*x2878))+(((-1.0)*cj0*sj1*x2877))+(((-1.0)*r02*x2885))+(((-1.0)*cj0*x2882))+(((-1.0)*gconst91*r01*x2883)));
evalcond[5]=((((-1.0)*sj0*sj1*x2877))+(((-1.0)*gconst91*r11*x2883))+((x2876*x2881))+(((-1.0)*x2880*x2882))+(((-1.0)*r12*x2885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2886=((-1.0)*r01);
IkReal x2888 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2888)==0){
continue;
}
IkReal x2887=pow(x2888,-0.5);
CheckValue<IkReal> x2889 = IKatan2WithCheck(IkReal(x2886),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2889.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2889.value))));
IkReal gconst94=(x2886*x2887);
IkReal gconst95=((1.0)*r00*x2887);
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2890.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2891=((-1.0)*r01);
CheckValue<IkReal> x2894 = IKatan2WithCheck(IkReal(x2891),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2894.valid){
continue;
}
IkReal x2892=((1.0)*(x2894.value));
IkReal x2893=x2887;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2892)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2892)));
IkReal gconst94=(x2891*x2893);
IkReal gconst95=((1.0)*r00*x2893);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2895=((-1.0)*r01);
CheckValue<IkReal> x2898 = IKatan2WithCheck(IkReal(x2895),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2898.valid){
continue;
}
IkReal x2896=((1.0)*(x2898.value));
IkReal x2897=x2887;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2896)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2896)));
IkReal gconst94=(x2895*x2897);
IkReal gconst95=((1.0)*r00*x2897);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2899=((-1.0)*r01);
CheckValue<IkReal> x2902 = IKatan2WithCheck(IkReal(x2899),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2902.valid){
continue;
}
IkReal x2900=((1.0)*(x2902.value));
IkReal x2901=x2887;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2900)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2900)));
IkReal gconst94=(x2899*x2901);
IkReal gconst95=((1.0)*r00*x2901);
IkReal x2903=r02*r02;
IkReal x2904=(r12*sj0);
IkReal x2905=((1.0)*cj0);
IkReal x2906=x2887;
j4eval[0]=((IKabs(((((-1.0)*x2905*x2906))+((r02*x2904*x2906))+((cj0*x2903*x2906)))))+(IKabs(((((-1.0)*r02*x2905))+(((-1.0)*x2904))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2907=((1.0)*sj0);
IkReal x2908=((1.0)*cj0);
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2909.valid){
continue;
}
CheckValue<IkReal> x2910 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2908))+(((-1.0)*r12*x2907)))),IkReal(((((-1.0)*gconst94*r01*x2908))+(((-1.0)*gconst94*r11*x2907))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2909.value)))+(x2910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2911=IKsin(j4);
IkReal x2912=IKcos(j4);
IkReal x2913=(gconst94*r11);
IkReal x2914=((1.0)*cj2);
IkReal x2915=(gconst94*r21);
IkReal x2916=((1.0)*sj0);
IkReal x2917=(gconst94*r01);
IkReal x2918=(cj1*sj2);
IkReal x2919=((1.0)*x2912);
IkReal x2920=(gconst95*x2912);
IkReal x2921=((1.0)*x2911);
IkReal x2922=(gconst95*x2921);
evalcond[0]=((((-1.0)*r20*x2922))+((x2911*x2915))+(((-1.0)*r22*x2919)));
evalcond[1]=(cj0+(((-1.0)*r10*x2922))+(((-1.0)*r12*x2919))+((x2911*x2913)));
evalcond[2]=((((-1.0)*r00*x2922))+((x2911*x2917))+(((-1.0)*r02*x2919))+(((-1.0)*x2916)));
evalcond[3]=((((-1.0)*x2915*x2919))+((sj1*sj2))+(((-1.0)*cj1*x2914))+((r20*x2920))+(((-1.0)*r22*x2921)));
evalcond[4]=((((-1.0)*cj0*sj1*x2914))+(((-1.0)*r02*x2921))+(((-1.0)*x2917*x2919))+((r00*x2920))+(((-1.0)*cj0*x2918)));
evalcond[5]=((((-1.0)*x2913*x2919))+((r10*x2920))+(((-1.0)*r12*x2921))+(((-1.0)*sj0*sj1*x2914))+(((-1.0)*x2916*x2918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2923=((1.0)*gconst95);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
CheckValue<IkReal> x2925=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2923)))),-1);
if(!x2925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2924.value)+(((1.5707963267949)*(x2925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2926=IKsin(j4);
IkReal x2927=IKcos(j4);
IkReal x2928=(gconst94*r11);
IkReal x2929=((1.0)*cj2);
IkReal x2930=(gconst94*r21);
IkReal x2931=((1.0)*sj0);
IkReal x2932=(gconst94*r01);
IkReal x2933=(cj1*sj2);
IkReal x2934=((1.0)*x2927);
IkReal x2935=(gconst95*x2927);
IkReal x2936=((1.0)*x2926);
IkReal x2937=(gconst95*x2936);
evalcond[0]=((((-1.0)*r20*x2937))+((x2926*x2930))+(((-1.0)*r22*x2934)));
evalcond[1]=(cj0+((x2926*x2928))+(((-1.0)*r12*x2934))+(((-1.0)*r10*x2937)));
evalcond[2]=((((-1.0)*x2931))+(((-1.0)*r00*x2937))+((x2926*x2932))+(((-1.0)*r02*x2934)));
evalcond[3]=((((-1.0)*x2930*x2934))+((sj1*sj2))+((r20*x2935))+(((-1.0)*cj1*x2929))+(((-1.0)*r22*x2936)));
evalcond[4]=((((-1.0)*cj0*x2933))+(((-1.0)*cj0*sj1*x2929))+((r00*x2935))+(((-1.0)*x2932*x2934))+(((-1.0)*r02*x2936)));
evalcond[5]=((((-1.0)*x2931*x2933))+((r10*x2935))+(((-1.0)*sj0*sj1*x2929))+(((-1.0)*r12*x2936))+(((-1.0)*x2928*x2934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2938=((1.0)*gconst95);
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2938))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
CheckValue<IkReal> x2940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2938)))),-1);
if(!x2940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2939.value)+(((1.5707963267949)*(x2940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2941=IKsin(j4);
IkReal x2942=IKcos(j4);
IkReal x2943=(gconst94*r11);
IkReal x2944=((1.0)*cj2);
IkReal x2945=(gconst94*r21);
IkReal x2946=((1.0)*sj0);
IkReal x2947=(gconst94*r01);
IkReal x2948=(cj1*sj2);
IkReal x2949=((1.0)*x2942);
IkReal x2950=(gconst95*x2942);
IkReal x2951=((1.0)*x2941);
IkReal x2952=(gconst95*x2951);
evalcond[0]=((((-1.0)*r20*x2952))+((x2941*x2945))+(((-1.0)*r22*x2949)));
evalcond[1]=((((-1.0)*r12*x2949))+(((-1.0)*r10*x2952))+cj0+((x2941*x2943)));
evalcond[2]=((((-1.0)*r02*x2949))+((x2941*x2947))+(((-1.0)*x2946))+(((-1.0)*r00*x2952)));
evalcond[3]=(((sj1*sj2))+((r20*x2950))+(((-1.0)*cj1*x2944))+(((-1.0)*r22*x2951))+(((-1.0)*x2945*x2949)));
evalcond[4]=((((-1.0)*r02*x2951))+(((-1.0)*cj0*x2948))+((r00*x2950))+(((-1.0)*x2947*x2949))+(((-1.0)*cj0*sj1*x2944)));
evalcond[5]=(((r10*x2950))+(((-1.0)*x2943*x2949))+(((-1.0)*x2946*x2948))+(((-1.0)*r12*x2951))+(((-1.0)*sj0*sj1*x2944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2953=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2953;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2954=((1.0)*cj5);
IkReal x2955=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2954)));
j4eval[0]=x2955;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2954))+((r21*sj5))))));
j4eval[2]=IKsign(x2955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2956=cj5*cj5;
IkReal x2957=r01*r01;
IkReal x2958=(r01*sj5);
IkReal x2959=(cj5*r00);
IkReal x2960=((((-1.0)*x2957))+(((2.0)*x2958*x2959))+(((-1.0)*x2956*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2956*x2957)));
j4eval[0]=x2960;
j4eval[1]=IKsign(x2960);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2958))+x2959))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2961=cj5*cj5;
IkReal x2962=r01*r01;
IkReal x2963=(r01*sj5);
IkReal x2964=(cj5*r00);
CheckValue<IkReal> x2965=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2962))+(((-1.0)*(r02*r02)))+((x2961*x2962))+(((2.0)*x2963*x2964))+(((-1.0)*x2961*(r00*r00))))),-1);
if(!x2965.valid){
continue;
}
CheckValue<IkReal> x2966 = IKatan2WithCheck(IkReal(((((-1.0)*x2963))+x2964)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2965.value)))+(x2966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2967=IKsin(j4);
IkReal x2968=IKcos(j4);
IkReal x2969=(cj5*r10);
IkReal x2970=(r01*sj5);
IkReal x2971=((1.0)*cj2);
IkReal x2972=(cj5*r00);
IkReal x2973=(cj5*r20);
IkReal x2974=((1.0)*x2968);
IkReal x2975=((1.0)*x2967);
IkReal x2976=(sj5*x2967);
evalcond[0]=((((-1.0)*r22*x2974))+(((-1.0)*x2973*x2975))+((r21*x2976)));
evalcond[1]=((((-1.0)*r12*x2974))+(((-1.0)*x2969*x2975))+((r11*x2976)));
evalcond[2]=((((-1.0)*r02*x2975))+((x2968*x2972))+(((-1.0)*x2970*x2974)));
evalcond[3]=((-1.0)+(((-1.0)*x2972*x2975))+(((-1.0)*r02*x2974))+((x2967*x2970)));
evalcond[4]=((((-1.0)*r21*sj5*x2974))+((sj1*sj2))+((x2968*x2973))+(((-1.0)*r22*x2975))+(((-1.0)*cj1*x2971)));
evalcond[5]=((((-1.0)*r12*x2975))+(((-1.0)*r11*sj5*x2974))+(((-1.0)*cj1*sj2))+((x2968*x2969))+(((-1.0)*sj1*x2971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2977=((1.0)*cj5);
CheckValue<IkReal> x2978 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2978.valid){
continue;
}
CheckValue<IkReal> x2979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2977))+(((-1.0)*r10*sj5)))),-1);
if(!x2979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2978.value)+(((1.5707963267949)*(x2979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2980=IKsin(j4);
IkReal x2981=IKcos(j4);
IkReal x2982=(cj5*r10);
IkReal x2983=(r01*sj5);
IkReal x2984=((1.0)*cj2);
IkReal x2985=(cj5*r00);
IkReal x2986=(cj5*r20);
IkReal x2987=((1.0)*x2981);
IkReal x2988=((1.0)*x2980);
IkReal x2989=(sj5*x2980);
evalcond[0]=((((-1.0)*r22*x2987))+(((-1.0)*x2986*x2988))+((r21*x2989)));
evalcond[1]=((((-1.0)*x2982*x2988))+((r11*x2989))+(((-1.0)*r12*x2987)));
evalcond[2]=(((x2981*x2985))+(((-1.0)*x2983*x2987))+(((-1.0)*r02*x2988)));
evalcond[3]=((-1.0)+(((-1.0)*x2985*x2988))+((x2980*x2983))+(((-1.0)*r02*x2987)));
evalcond[4]=((((-1.0)*r21*sj5*x2987))+(((-1.0)*cj1*x2984))+((sj1*sj2))+((x2981*x2986))+(((-1.0)*r22*x2988)));
evalcond[5]=((((-1.0)*r12*x2988))+(((-1.0)*cj1*sj2))+((x2981*x2982))+(((-1.0)*sj1*x2984))+(((-1.0)*r11*sj5*x2987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2990=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2990.valid){
continue;
}
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2990.value)))+(x2991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2992=IKsin(j4);
IkReal x2993=IKcos(j4);
IkReal x2994=(cj5*r10);
IkReal x2995=(r01*sj5);
IkReal x2996=((1.0)*cj2);
IkReal x2997=(cj5*r00);
IkReal x2998=(cj5*r20);
IkReal x2999=((1.0)*x2993);
IkReal x3000=((1.0)*x2992);
IkReal x3001=(sj5*x2992);
evalcond[0]=((((-1.0)*r22*x2999))+(((-1.0)*x2998*x3000))+((r21*x3001)));
evalcond[1]=((((-1.0)*r12*x2999))+(((-1.0)*x2994*x3000))+((r11*x3001)));
evalcond[2]=((((-1.0)*x2995*x2999))+(((-1.0)*r02*x3000))+((x2993*x2997)));
evalcond[3]=((-1.0)+(((-1.0)*x2997*x3000))+((x2992*x2995))+(((-1.0)*r02*x2999)));
evalcond[4]=((((-1.0)*r22*x3000))+((sj1*sj2))+(((-1.0)*cj1*x2996))+((x2993*x2998))+(((-1.0)*r21*sj5*x2999)));
evalcond[5]=((((-1.0)*sj1*x2996))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3000))+((x2993*x2994))+(((-1.0)*r11*sj5*x2999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3002=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3002;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3003=((1.0)*cj5);
IkReal x3004=((((-1.0)*r21*x3003))+(((-1.0)*r20*sj5)));
j4eval[0]=x3004;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3003))+((r11*sj5))))));
j4eval[2]=IKsign(x3004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3005=cj5*cj5;
IkReal x3006=r01*r01;
IkReal x3007=(cj5*r00);
IkReal x3008=(r01*sj5);
IkReal x3009=(x3006+(((-2.0)*x3007*x3008))+(((-1.0)*x3005*x3006))+(r02*r02)+((x3005*(r00*r00))));
j4eval[0]=x3009;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3008))+x3007))));
j4eval[2]=IKsign(x3009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3010=cj5*cj5;
IkReal x3011=r01*r01;
IkReal x3012=(r01*sj5);
IkReal x3013=(cj5*r00);
CheckValue<IkReal> x3014=IKPowWithIntegerCheck(IKsign((x3011+(((-1.0)*x3010*x3011))+(((-2.0)*x3012*x3013))+(r02*r02)+((x3010*(r00*r00))))),-1);
if(!x3014.valid){
continue;
}
CheckValue<IkReal> x3015 = IKatan2WithCheck(IkReal((x3013+(((-1.0)*x3012)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3014.value)))+(x3015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3016=IKsin(j4);
IkReal x3017=IKcos(j4);
IkReal x3018=(cj5*r10);
IkReal x3019=(r01*sj5);
IkReal x3020=(cj5*r00);
IkReal x3021=(cj5*r20);
IkReal x3022=((1.0)*x3017);
IkReal x3023=((1.0)*x3016);
IkReal x3024=(sj5*x3016);
evalcond[0]=((((-1.0)*x3021*x3023))+((r21*x3024))+(((-1.0)*r22*x3022)));
evalcond[1]=((((-1.0)*r12*x3022))+(((-1.0)*x3018*x3023))+((r11*x3024)));
evalcond[2]=(((x3017*x3020))+(((-1.0)*x3019*x3022))+(((-1.0)*r02*x3023)));
evalcond[3]=((1.0)+((x3016*x3019))+(((-1.0)*x3020*x3023))+(((-1.0)*r02*x3022)));
evalcond[4]=((((-1.0)*r12*x3023))+((cj2*sj1))+(((-1.0)*r11*sj5*x3022))+((cj1*sj2))+((x3017*x3018)));
evalcond[5]=(((x3017*x3021))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3023))+(((-1.0)*r21*sj5*x3022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3025=((1.0)*cj5);
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3025))+(((-1.0)*r20*sj5)))),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3028=IKsin(j4);
IkReal x3029=IKcos(j4);
IkReal x3030=(cj5*r10);
IkReal x3031=(r01*sj5);
IkReal x3032=(cj5*r00);
IkReal x3033=(cj5*r20);
IkReal x3034=((1.0)*x3029);
IkReal x3035=((1.0)*x3028);
IkReal x3036=(sj5*x3028);
evalcond[0]=(((r21*x3036))+(((-1.0)*x3033*x3035))+(((-1.0)*r22*x3034)));
evalcond[1]=((((-1.0)*x3030*x3035))+((r11*x3036))+(((-1.0)*r12*x3034)));
evalcond[2]=((((-1.0)*r02*x3035))+(((-1.0)*x3031*x3034))+((x3029*x3032)));
evalcond[3]=((1.0)+((x3028*x3031))+(((-1.0)*r02*x3034))+(((-1.0)*x3032*x3035)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x3035))+((x3029*x3030))+(((-1.0)*r11*sj5*x3034)));
evalcond[5]=((((-1.0)*r21*sj5*x3034))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3035))+((x3029*x3033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
CheckValue<IkReal> x3038=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3037.value)+(((1.5707963267949)*(x3038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3039=IKsin(j4);
IkReal x3040=IKcos(j4);
IkReal x3041=(cj5*r10);
IkReal x3042=(r01*sj5);
IkReal x3043=(cj5*r00);
IkReal x3044=(cj5*r20);
IkReal x3045=((1.0)*x3040);
IkReal x3046=((1.0)*x3039);
IkReal x3047=(sj5*x3039);
evalcond[0]=(((r21*x3047))+(((-1.0)*r22*x3045))+(((-1.0)*x3044*x3046)));
evalcond[1]=((((-1.0)*r12*x3045))+(((-1.0)*x3041*x3046))+((r11*x3047)));
evalcond[2]=((((-1.0)*x3042*x3045))+((x3040*x3043))+(((-1.0)*r02*x3046)));
evalcond[3]=((1.0)+((x3039*x3042))+(((-1.0)*r02*x3045))+(((-1.0)*x3043*x3046)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3046))+((cj1*sj2))+((x3040*x3041))+(((-1.0)*r11*sj5*x3045)));
evalcond[5]=((((-1.0)*r22*x3046))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3040*x3044))+(((-1.0)*r21*sj5*x3045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3048=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3048);
rxp1_1=(px*r21);
rxp1_2=(r11*x3048);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3049=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3049);
rxp1_1=(px*r21);
rxp1_2=(r11*x3049);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3050=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3050);
rxp1_1=(px*r21);
rxp1_2=(r11*x3050);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3053=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3053.valid){
continue;
}
IkReal x3051=x3053.value;
IkReal x3052=(sj0*x3051);
cj4array[0]=(((cj1*sj2*x3052))+((cj2*sj1*x3052)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3054=IKsin(j4);
IkReal x3055=IKcos(j4);
IkReal x3056=(cj5*r20);
IkReal x3057=(r21*sj5);
IkReal x3058=((1.0)*x3054);
IkReal x3059=((1.0)*x3055);
evalcond[0]=((-1.0)*r02*x3054);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3059)));
evalcond[2]=((((-1.0)*x3056*x3058))+((x3054*x3057)));
evalcond[3]=((((-1.0)*cj5*r10*x3058))+((r11*sj5*x3054)));
evalcond[4]=((((-1.0)*cj1*cj2))+(((-1.0)*x3057*x3059))+((sj1*sj2))+((x3055*x3056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3061=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3061.valid){
continue;
}
IkReal x3060=x3061.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3060))+((cj1*cj2*x3060)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3062=IKsin(j4);
IkReal x3063=IKcos(j4);
IkReal x3064=(r11*sj5);
IkReal x3065=((1.0)*sj0);
IkReal x3066=((1.0)*x3063);
IkReal x3067=((1.0)*cj5*x3062);
evalcond[0]=((-1.0)*r02*x3062);
evalcond[1]=((((-1.0)*x3065))+(((-1.0)*r02*x3066)));
evalcond[2]=(((r21*sj5*x3062))+(((-1.0)*r20*x3067)));
evalcond[3]=((((-1.0)*r10*x3067))+((x3062*x3064)));
evalcond[4]=((((-1.0)*cj1*sj2*x3065))+((cj5*r10*x3063))+(((-1.0)*cj2*sj1*x3065))+(((-1.0)*x3064*x3066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3068=IKPowWithIntegerCheck(r02,-1);
if(!x3068.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3068.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3069=IKsin(j4);
IkReal x3070=IKcos(j4);
IkReal x3071=((1.0)*sj0);
IkReal x3072=(cj5*x3070);
IkReal x3073=(sj5*x3069);
IkReal x3074=((1.0)*sj5*x3070);
IkReal x3075=((1.0)*cj5*x3069);
evalcond[0]=((-1.0)*r02*x3069);
evalcond[1]=(((r21*x3073))+(((-1.0)*r20*x3075)));
evalcond[2]=((((-1.0)*r10*x3075))+((r11*x3073)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3072))+(((-1.0)*r21*x3074)));
evalcond[4]=(((r10*x3072))+(((-1.0)*r11*x3074))+(((-1.0)*cj1*sj2*x3071))+(((-1.0)*cj2*sj1*x3071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3076=((1.0)*sj0);
IkReal x3077=((1.0)*cj0);
CheckValue<IkReal> x3078 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3077))+(((-1.0)*r12*x3076)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3076))+(((-1.0)*r01*sj5*x3077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3078.valid){
continue;
}
CheckValue<IkReal> x3079=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3078.value)+(((1.5707963267949)*(x3079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3080=IKsin(j4);
IkReal x3081=IKcos(j4);
IkReal x3082=(cj5*r10);
IkReal x3083=(r01*sj5);
IkReal x3084=((1.0)*cj2);
IkReal x3085=(cj5*r00);
IkReal x3086=((1.0)*sj0);
IkReal x3087=(cj5*r20);
IkReal x3088=(cj1*sj2);
IkReal x3089=((1.0)*x3081);
IkReal x3090=((1.0)*x3080);
IkReal x3091=(sj5*x3080);
evalcond[0]=(((r21*x3091))+(((-1.0)*r22*x3089))+(((-1.0)*x3087*x3090)));
evalcond[1]=(cj0+(((-1.0)*x3082*x3090))+((r11*x3091))+(((-1.0)*r12*x3089)));
evalcond[2]=((((-1.0)*x3085*x3090))+(((-1.0)*x3086))+((x3080*x3083))+(((-1.0)*r02*x3089)));
evalcond[3]=(((x3081*x3087))+(((-1.0)*r22*x3090))+(((-1.0)*cj1*x3084))+((sj1*sj2))+(((-1.0)*r21*sj5*x3089)));
evalcond[4]=((((-1.0)*r02*x3090))+((x3081*x3085))+(((-1.0)*x3083*x3089))+(((-1.0)*cj0*sj1*x3084))+(((-1.0)*cj0*x3088)));
evalcond[5]=(((x3081*x3082))+(((-1.0)*r12*x3090))+(((-1.0)*sj0*sj1*x3084))+(((-1.0)*r11*sj5*x3089))+(((-1.0)*x3086*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3092=((1.0)*cj5);
CheckValue<IkReal> x3093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3092))+(((-1.0)*r10*sj5)))),-1);
if(!x3093.valid){
continue;
}
CheckValue<IkReal> x3094 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3093.value)))+(x3094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3095=IKsin(j4);
IkReal x3096=IKcos(j4);
IkReal x3097=(cj5*r10);
IkReal x3098=(r01*sj5);
IkReal x3099=((1.0)*cj2);
IkReal x3100=(cj5*r00);
IkReal x3101=((1.0)*sj0);
IkReal x3102=(cj5*r20);
IkReal x3103=(cj1*sj2);
IkReal x3104=((1.0)*x3096);
IkReal x3105=((1.0)*x3095);
IkReal x3106=(sj5*x3095);
evalcond[0]=(((r21*x3106))+(((-1.0)*x3102*x3105))+(((-1.0)*r22*x3104)));
evalcond[1]=(((r11*x3106))+cj0+(((-1.0)*r12*x3104))+(((-1.0)*x3097*x3105)));
evalcond[2]=((((-1.0)*x3101))+(((-1.0)*x3100*x3105))+((x3095*x3098))+(((-1.0)*r02*x3104)));
evalcond[3]=(((sj1*sj2))+((x3096*x3102))+(((-1.0)*cj1*x3099))+(((-1.0)*r22*x3105))+(((-1.0)*r21*sj5*x3104)));
evalcond[4]=(((x3096*x3100))+(((-1.0)*cj0*sj1*x3099))+(((-1.0)*x3098*x3104))+(((-1.0)*r02*x3105))+(((-1.0)*cj0*x3103)));
evalcond[5]=((((-1.0)*r12*x3105))+((x3096*x3097))+(((-1.0)*sj0*sj1*x3099))+(((-1.0)*r11*sj5*x3104))+(((-1.0)*x3101*x3103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3107=((1.0)*cj5);
CheckValue<IkReal> x3108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3107))+(((-1.0)*r00*sj5)))),-1);
if(!x3108.valid){
continue;
}
CheckValue<IkReal> x3109 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3107)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3108.value)))+(x3109.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3110=IKsin(j4);
IkReal x3111=IKcos(j4);
IkReal x3112=(cj5*r10);
IkReal x3113=(r01*sj5);
IkReal x3114=((1.0)*cj2);
IkReal x3115=(cj5*r00);
IkReal x3116=((1.0)*sj0);
IkReal x3117=(cj5*r20);
IkReal x3118=(cj1*sj2);
IkReal x3119=((1.0)*x3111);
IkReal x3120=((1.0)*x3110);
IkReal x3121=(sj5*x3110);
evalcond[0]=((((-1.0)*x3117*x3120))+((r21*x3121))+(((-1.0)*r22*x3119)));
evalcond[1]=(cj0+(((-1.0)*r12*x3119))+(((-1.0)*x3112*x3120))+((r11*x3121)));
evalcond[2]=((((-1.0)*r02*x3119))+(((-1.0)*x3116))+(((-1.0)*x3115*x3120))+((x3110*x3113)));
evalcond[3]=(((x3111*x3117))+(((-1.0)*cj1*x3114))+((sj1*sj2))+(((-1.0)*r22*x3120))+(((-1.0)*r21*sj5*x3119)));
evalcond[4]=((((-1.0)*x3113*x3119))+(((-1.0)*cj0*x3118))+(((-1.0)*r02*x3120))+((x3111*x3115))+(((-1.0)*cj0*sj1*x3114)));
evalcond[5]=(((x3111*x3112))+(((-1.0)*sj0*sj1*x3114))+(((-1.0)*r11*sj5*x3119))+(((-1.0)*r12*x3120))+(((-1.0)*x3116*x3118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3122=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3122;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3122);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3123=r21*r21;
IkReal x3124=cj5*cj5;
IkReal x3125=(sj1*sj2);
IkReal x3126=(r21*sj5);
IkReal x3127=(cj5*r20);
IkReal x3128=(cj1*cj2);
IkReal x3129=((((-1.0)*x3123))+(((-1.0)*x3124*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x3126*x3127))+((x3123*x3124)));
j4eval[0]=x3129;
j4eval[1]=((IKabs(((((-1.0)*x3125*x3127))+((x3125*x3126))+((x3127*x3128))+(((-1.0)*x3126*x3128)))))+(IKabs((((r22*x3125))+(((-1.0)*r22*x3128))))));
j4eval[2]=IKsign(x3129);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3130=IKsin(j0);
IkReal x3131=IKcos(j0);
evalcond[0]=((((0.612)*x3131))+(((-0.163941)*x3130))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x3131))+(((0.612)*x3130))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3132=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3132;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3133=((1.0)*cj5);
IkReal x3134=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3133)));
j4eval[0]=x3134;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3133)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3134);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3135=((1.0)*cj5);
IkReal x3136=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3135)));
j4eval[0]=x3136;
j4eval[1]=IKsign(x3136);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3135))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3137=((1.0)*cj5);
CheckValue<IkReal> x3138 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3137))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3138.valid){
continue;
}
CheckValue<IkReal> x3139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3137)))),-1);
if(!x3139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3138.value)+(((1.5707963267949)*(x3139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3140=IKcos(j4);
IkReal x3141=IKsin(j4);
IkReal x3142=((1.0)*sj0);
IkReal x3143=(cj5*r00);
IkReal x3144=(cj5*r10);
IkReal x3145=(cj5*r20);
IkReal x3146=((1.0)*x3140);
IkReal x3147=((1.0)*x3141);
IkReal x3148=(sj5*x3140);
IkReal x3149=(sj5*x3141);
evalcond[0]=(((r22*x3141))+(((-1.0)*x3145*x3146))+((r21*x3148)));
evalcond[1]=((((-1.0)*r22*x3146))+(((-1.0)*x3145*x3147))+((r21*x3149)));
evalcond[2]=((((-1.0)*r12*x3146))+cj0+(((-1.0)*x3144*x3147))+((r11*x3149)));
evalcond[3]=((((-1.0)*x3143*x3146))+((r02*x3141))+((r01*x3148))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3142))+((r12*x3141))+(((-1.0)*x3144*x3146))+((r11*x3148)));
evalcond[5]=((((-1.0)*x3143*x3147))+(((-1.0)*x3142))+((r01*x3149))+(((-1.0)*r02*x3146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3150=((1.0)*cj5);
CheckValue<IkReal> x3151 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3151.valid){
continue;
}
CheckValue<IkReal> x3152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3150)))),-1);
if(!x3152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3151.value)+(((1.5707963267949)*(x3152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3153=IKcos(j4);
IkReal x3154=IKsin(j4);
IkReal x3155=((1.0)*sj0);
IkReal x3156=(cj5*r00);
IkReal x3157=(cj5*r10);
IkReal x3158=(cj5*r20);
IkReal x3159=((1.0)*x3153);
IkReal x3160=((1.0)*x3154);
IkReal x3161=(sj5*x3153);
IkReal x3162=(sj5*x3154);
evalcond[0]=(((r22*x3154))+(((-1.0)*x3158*x3159))+((r21*x3161)));
evalcond[1]=((((-1.0)*r22*x3159))+(((-1.0)*x3158*x3160))+((r21*x3162)));
evalcond[2]=((((-1.0)*x3157*x3160))+cj0+((r11*x3162))+(((-1.0)*r12*x3159)));
evalcond[3]=(((r02*x3154))+(((-1.0)*x3156*x3159))+((r01*x3161))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3155))+(((-1.0)*x3157*x3159))+((r11*x3161))+((r12*x3154)));
evalcond[5]=((((-1.0)*x3155))+(((-1.0)*x3156*x3160))+((r01*x3162))+(((-1.0)*r02*x3159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3163 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3163.valid){
continue;
}
CheckValue<IkReal> x3164=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3163.value)+(((1.5707963267949)*(x3164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3165=IKcos(j4);
IkReal x3166=IKsin(j4);
IkReal x3167=((1.0)*sj0);
IkReal x3168=(cj5*r00);
IkReal x3169=(cj5*r10);
IkReal x3170=(cj5*r20);
IkReal x3171=((1.0)*x3165);
IkReal x3172=((1.0)*x3166);
IkReal x3173=(sj5*x3165);
IkReal x3174=(sj5*x3166);
evalcond[0]=(((r22*x3166))+((r21*x3173))+(((-1.0)*x3170*x3171)));
evalcond[1]=(((r21*x3174))+(((-1.0)*r22*x3171))+(((-1.0)*x3170*x3172)));
evalcond[2]=(((r11*x3174))+(((-1.0)*x3169*x3172))+cj0+(((-1.0)*r12*x3171)));
evalcond[3]=(((r02*x3166))+(((-1.0)*x3168*x3171))+((r01*x3173))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3173))+(((-1.0)*x3169*x3171))+((r12*x3166))+(((-1.0)*x3167)));
evalcond[5]=((((-1.0)*x3168*x3172))+((r01*x3174))+(((-1.0)*r02*x3171))+(((-1.0)*x3167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3175=IKsin(j0);
IkReal x3176=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.612)*x3176))+(((-0.163941)*x3175)));
evalcond[1]=((((-1.0)*py))+(((0.612)*x3175))+(((0.163941)*x3176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3177=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3177;
j4eval[1]=IKsign(x3177);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3178=((1.0)*cj5);
IkReal x3179=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3178)));
j4eval[0]=x3179;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3178)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3179);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3180=cj5*cj5;
IkReal x3181=((1.0)*r20);
IkReal x3182=(r01*r21);
IkReal x3183=(r21*sj5);
IkReal x3184=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3180*x3181))+((cj5*r00*x3183))+((x3180*x3182))+(((-1.0)*x3182)));
j4eval[0]=x3184;
j4eval[1]=((IKabs((((cj0*x3183))+(((-1.0)*cj0*cj5*x3181)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3185=cj5*cj5;
IkReal x3186=((1.0)*r20);
IkReal x3187=(r01*r21);
IkReal x3188=(r21*sj5);
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3188))+(((-1.0)*cj0*cj5*x3186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3185*x3186))+((x3185*x3187))+((cj5*r00*x3188))+(((-1.0)*x3187)))),-1);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3189.value)+(((1.5707963267949)*(x3190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=(cj5*r00);
IkReal x3194=(cj5*r10);
IkReal x3195=(cj5*r20);
IkReal x3196=((1.0)*x3191);
IkReal x3197=((1.0)*x3192);
IkReal x3198=(sj5*x3191);
IkReal x3199=(sj5*x3192);
evalcond[0]=(((r21*x3198))+((r22*x3192))+(((-1.0)*x3195*x3196)));
evalcond[1]=((((-1.0)*r22*x3196))+((r21*x3199))+(((-1.0)*x3195*x3197)));
evalcond[2]=(cj0+(((-1.0)*x3193*x3196))+((r01*x3198))+((r02*x3192)));
evalcond[3]=(sj0+((r11*x3198))+((r12*x3192))+(((-1.0)*x3194*x3196)));
evalcond[4]=(cj0+((r11*x3199))+(((-1.0)*r12*x3196))+(((-1.0)*x3194*x3197)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3193*x3197))+((r01*x3199))+(((-1.0)*r02*x3196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3200=((1.0)*cj5);
CheckValue<IkReal> x3201=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3200)))),-1);
if(!x3201.valid){
continue;
}
CheckValue<IkReal> x3202 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3200)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3201.value)))+(x3202.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3203=IKcos(j4);
IkReal x3204=IKsin(j4);
IkReal x3205=(cj5*r00);
IkReal x3206=(cj5*r10);
IkReal x3207=(cj5*r20);
IkReal x3208=((1.0)*x3203);
IkReal x3209=((1.0)*x3204);
IkReal x3210=(sj5*x3203);
IkReal x3211=(sj5*x3204);
evalcond[0]=((((-1.0)*x3207*x3208))+((r22*x3204))+((r21*x3210)));
evalcond[1]=((((-1.0)*x3207*x3209))+(((-1.0)*r22*x3208))+((r21*x3211)));
evalcond[2]=(cj0+((r01*x3210))+((r02*x3204))+(((-1.0)*x3205*x3208)));
evalcond[3]=(sj0+((r12*x3204))+((r11*x3210))+(((-1.0)*x3206*x3208)));
evalcond[4]=(cj0+(((-1.0)*r12*x3208))+((r11*x3211))+(((-1.0)*x3206*x3209)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3208))+((r01*x3211))+(((-1.0)*x3205*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3212 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3212.valid){
continue;
}
CheckValue<IkReal> x3213=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3212.value)+(((1.5707963267949)*(x3213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3214=IKcos(j4);
IkReal x3215=IKsin(j4);
IkReal x3216=(cj5*r00);
IkReal x3217=(cj5*r10);
IkReal x3218=(cj5*r20);
IkReal x3219=((1.0)*x3214);
IkReal x3220=((1.0)*x3215);
IkReal x3221=(sj5*x3214);
IkReal x3222=(sj5*x3215);
evalcond[0]=(((r22*x3215))+((r21*x3221))+(((-1.0)*x3218*x3219)));
evalcond[1]=(((r21*x3222))+(((-1.0)*x3218*x3220))+(((-1.0)*r22*x3219)));
evalcond[2]=(cj0+(((-1.0)*x3216*x3219))+((r01*x3221))+((r02*x3215)));
evalcond[3]=(sj0+((r11*x3221))+((r12*x3215))+(((-1.0)*x3217*x3219)));
evalcond[4]=(cj0+((r11*x3222))+(((-1.0)*r12*x3219))+(((-1.0)*x3217*x3220)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3216*x3220))+((r01*x3222))+(((-1.0)*r02*x3219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3223=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3223;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3224=((1.0)*cj5);
IkReal x3225=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3224)));
j4eval[0]=x3225;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3224))))));
j4eval[2]=IKsign(x3225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3226=((1.0)*cj5);
IkReal x3227=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3226)));
j4eval[0]=x3227;
j4eval[1]=IKsign(x3227);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3226))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3228=((1.0)*cj5);
CheckValue<IkReal> x3229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3228)))),-1);
if(!x3229.valid){
continue;
}
CheckValue<IkReal> x3230 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3228))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3229.value)))+(x3230.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3231=IKcos(j4);
IkReal x3232=IKsin(j4);
IkReal x3233=((1.0)*sj0);
IkReal x3234=(cj5*r00);
IkReal x3235=(cj5*r10);
IkReal x3236=(cj5*r20);
IkReal x3237=((1.0)*x3231);
IkReal x3238=((1.0)*x3232);
IkReal x3239=(sj5*x3231);
IkReal x3240=(sj5*x3232);
evalcond[0]=(((r22*x3232))+(((-1.0)*x3236*x3237))+((r21*x3239)));
evalcond[1]=(((r21*x3240))+(((-1.0)*x3236*x3238))+(((-1.0)*r22*x3237)));
evalcond[2]=(cj0+(((-1.0)*x3235*x3238))+(((-1.0)*r12*x3237))+((r11*x3240)));
evalcond[3]=(((r01*x3239))+(((-1.0)*x3234*x3237))+((r02*x3232))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3235*x3237))+((r11*x3239))+((r12*x3232))+(((-1.0)*x3233)));
evalcond[5]=(((r01*x3240))+(((-1.0)*r02*x3237))+(((-1.0)*x3233))+(((-1.0)*x3234*x3238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3241=((1.0)*cj5);
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3241))+(((-1.0)*r00*sj5)))),-1);
if(!x3242.valid){
continue;
}
CheckValue<IkReal> x3243 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3242.value)))+(x3243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3244=IKcos(j4);
IkReal x3245=IKsin(j4);
IkReal x3246=((1.0)*sj0);
IkReal x3247=(cj5*r00);
IkReal x3248=(cj5*r10);
IkReal x3249=(cj5*r20);
IkReal x3250=((1.0)*x3244);
IkReal x3251=((1.0)*x3245);
IkReal x3252=(sj5*x3244);
IkReal x3253=(sj5*x3245);
evalcond[0]=(((r22*x3245))+(((-1.0)*x3249*x3250))+((r21*x3252)));
evalcond[1]=((((-1.0)*x3249*x3251))+((r21*x3253))+(((-1.0)*r22*x3250)));
evalcond[2]=(cj0+((r11*x3253))+(((-1.0)*x3248*x3251))+(((-1.0)*r12*x3250)));
evalcond[3]=((((-1.0)*x3247*x3250))+((r01*x3252))+((r02*x3245))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3252))+(((-1.0)*x3248*x3250))+(((-1.0)*x3246))+((r12*x3245)));
evalcond[5]=((((-1.0)*r02*x3250))+(((-1.0)*x3247*x3251))+((r01*x3253))+(((-1.0)*x3246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3254 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3254.valid){
continue;
}
CheckValue<IkReal> x3255=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3254.value)+(((1.5707963267949)*(x3255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3256=IKcos(j4);
IkReal x3257=IKsin(j4);
IkReal x3258=((1.0)*sj0);
IkReal x3259=(cj5*r00);
IkReal x3260=(cj5*r10);
IkReal x3261=(cj5*r20);
IkReal x3262=((1.0)*x3256);
IkReal x3263=((1.0)*x3257);
IkReal x3264=(sj5*x3256);
IkReal x3265=(sj5*x3257);
evalcond[0]=((((-1.0)*x3261*x3262))+((r21*x3264))+((r22*x3257)));
evalcond[1]=((((-1.0)*x3261*x3263))+((r21*x3265))+(((-1.0)*r22*x3262)));
evalcond[2]=((((-1.0)*x3260*x3263))+cj0+(((-1.0)*r12*x3262))+((r11*x3265)));
evalcond[3]=(((r01*x3264))+((r02*x3257))+(((-1.0)*x3259*x3262))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3260*x3262))+((r12*x3257))+((r11*x3264))+(((-1.0)*x3258)));
evalcond[5]=(((r01*x3265))+(((-1.0)*r02*x3262))+(((-1.0)*x3259*x3263))+(((-1.0)*x3258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3266=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3266;
j4eval[1]=IKsign(x3266);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3267=((1.0)*cj5);
IkReal x3268=((((-1.0)*r11*x3267))+(((-1.0)*r10*sj5)));
j4eval[0]=x3268;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3267))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3269=cj5*cj5;
IkReal x3270=((1.0)*r20);
IkReal x3271=(r01*r21);
IkReal x3272=(r21*sj5);
IkReal x3273=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3271))+(((-1.0)*r00*x3269*x3270))+((cj5*r00*x3272))+((x3269*x3271)));
j4eval[0]=x3273;
j4eval[1]=((IKabs((((cj0*x3272))+(((-1.0)*cj0*cj5*x3270)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3274=cj5*cj5;
IkReal x3275=((1.0)*r20);
IkReal x3276=(r01*r21);
IkReal x3277=(r21*sj5);
CheckValue<IkReal> x3278 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3277))+(((-1.0)*cj0*cj5*x3275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3278.valid){
continue;
}
CheckValue<IkReal> x3279=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3276))+(((-1.0)*r00*x3274*x3275))+((x3274*x3276))+((cj5*r00*x3277)))),-1);
if(!x3279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3278.value)+(((1.5707963267949)*(x3279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3280=IKcos(j4);
IkReal x3281=IKsin(j4);
IkReal x3282=(cj5*r00);
IkReal x3283=(cj5*r10);
IkReal x3284=(cj5*r20);
IkReal x3285=((1.0)*x3280);
IkReal x3286=((1.0)*x3281);
IkReal x3287=(sj5*x3280);
IkReal x3288=(sj5*x3281);
evalcond[0]=(((r22*x3281))+((r21*x3287))+(((-1.0)*x3284*x3285)));
evalcond[1]=((((-1.0)*r22*x3285))+((r21*x3288))+(((-1.0)*x3284*x3286)));
evalcond[2]=(cj0+((r02*x3281))+(((-1.0)*x3282*x3285))+((r01*x3287)));
evalcond[3]=(sj0+(((-1.0)*x3283*x3285))+((r11*x3287))+((r12*x3281)));
evalcond[4]=((((-1.0)*r12*x3285))+cj0+(((-1.0)*x3283*x3286))+((r11*x3288)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3282*x3286))+(((-1.0)*r02*x3285))+((r01*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3289=((1.0)*cj5);
CheckValue<IkReal> x3290=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3289)))),-1);
if(!x3290.valid){
continue;
}
CheckValue<IkReal> x3291 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3289))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3290.value)))+(x3291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3292=IKcos(j4);
IkReal x3293=IKsin(j4);
IkReal x3294=(cj5*r00);
IkReal x3295=(cj5*r10);
IkReal x3296=(cj5*r20);
IkReal x3297=((1.0)*x3292);
IkReal x3298=((1.0)*x3293);
IkReal x3299=(sj5*x3292);
IkReal x3300=(sj5*x3293);
evalcond[0]=(((r21*x3299))+((r22*x3293))+(((-1.0)*x3296*x3297)));
evalcond[1]=(((r21*x3300))+(((-1.0)*r22*x3297))+(((-1.0)*x3296*x3298)));
evalcond[2]=(((r01*x3299))+cj0+((r02*x3293))+(((-1.0)*x3294*x3297)));
evalcond[3]=(sj0+(((-1.0)*x3295*x3297))+((r11*x3299))+((r12*x3293)));
evalcond[4]=((((-1.0)*r12*x3297))+cj0+((r11*x3300))+(((-1.0)*x3295*x3298)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3297))+(((-1.0)*x3294*x3298))+((r01*x3300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3301 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3301.valid){
continue;
}
CheckValue<IkReal> x3302=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3301.value)+(((1.5707963267949)*(x3302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3303=IKcos(j4);
IkReal x3304=IKsin(j4);
IkReal x3305=(cj5*r00);
IkReal x3306=(cj5*r10);
IkReal x3307=(cj5*r20);
IkReal x3308=((1.0)*x3303);
IkReal x3309=((1.0)*x3304);
IkReal x3310=(sj5*x3303);
IkReal x3311=(sj5*x3304);
evalcond[0]=(((r21*x3310))+((r22*x3304))+(((-1.0)*x3307*x3308)));
evalcond[1]=(((r21*x3311))+(((-1.0)*r22*x3308))+(((-1.0)*x3307*x3309)));
evalcond[2]=(cj0+(((-1.0)*x3305*x3308))+((r02*x3304))+((r01*x3310)));
evalcond[3]=(sj0+((r11*x3310))+(((-1.0)*x3306*x3308))+((r12*x3304)));
evalcond[4]=(cj0+((r11*x3311))+(((-1.0)*x3306*x3309))+(((-1.0)*r12*x3308)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3305*x3309))+(((-1.0)*r02*x3308))+((r01*x3311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3312=IKcos(j0);
IkReal x3313=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x3313))+(((-0.612)*x3312)));
evalcond[1]=((((-1.0)*py))+(((-0.612)*x3313))+(((0.163941)*x3312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3314=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3314;
j4eval[1]=IKsign(x3314);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3315=((1.0)*cj5);
IkReal x3316=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3315)));
j4eval[0]=x3316;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3315))))));
j4eval[2]=IKsign(x3316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3317=cj5*cj5;
IkReal x3318=((1.0)*r20);
IkReal x3319=(r01*r21);
IkReal x3320=(r21*sj5);
IkReal x3321=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3317*x3318))+(((-1.0)*r02*r22))+((x3317*x3319))+((cj5*r00*x3320))+(((-1.0)*x3319)));
j4eval[0]=x3321;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3318))+((cj0*x3320)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3322=cj5*cj5;
IkReal x3323=((1.0)*r20);
IkReal x3324=(r01*r21);
IkReal x3325=(r21*sj5);
CheckValue<IkReal> x3326=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3324))+(((-1.0)*r00*x3322*x3323))+(((-1.0)*r02*r22))+((cj5*r00*x3325))+((x3322*x3324)))),-1);
if(!x3326.valid){
continue;
}
CheckValue<IkReal> x3327 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3323))+((cj0*x3325)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3326.value)))+(x3327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3328=IKcos(j4);
IkReal x3329=IKsin(j4);
IkReal x3330=(cj5*r00);
IkReal x3331=(cj5*r10);
IkReal x3332=(cj5*r20);
IkReal x3333=((1.0)*x3328);
IkReal x3334=((1.0)*x3329);
IkReal x3335=(sj5*x3328);
IkReal x3336=(sj5*x3329);
evalcond[0]=(((r22*x3329))+((r21*x3335))+(((-1.0)*x3332*x3333)));
evalcond[1]=(((r21*x3336))+(((-1.0)*r22*x3333))+(((-1.0)*x3332*x3334)));
evalcond[2]=((((-1.0)*x3330*x3333))+cj0+((r01*x3335))+((r02*x3329)));
evalcond[3]=(((r12*x3329))+sj0+(((-1.0)*x3331*x3333))+((r11*x3335)));
evalcond[4]=((((-1.0)*x3331*x3334))+cj0+((r11*x3336))+(((-1.0)*r12*x3333)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3330*x3334))+(((-1.0)*r02*x3333))+((r01*x3336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3337=((1.0)*cj5);
CheckValue<IkReal> x3338 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3337)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3338.valid){
continue;
}
CheckValue<IkReal> x3339=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3337)))),-1);
if(!x3339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3338.value)+(((1.5707963267949)*(x3339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3340=IKcos(j4);
IkReal x3341=IKsin(j4);
IkReal x3342=(cj5*r00);
IkReal x3343=(cj5*r10);
IkReal x3344=(cj5*r20);
IkReal x3345=((1.0)*x3340);
IkReal x3346=((1.0)*x3341);
IkReal x3347=(sj5*x3340);
IkReal x3348=(sj5*x3341);
evalcond[0]=(((r22*x3341))+((r21*x3347))+(((-1.0)*x3344*x3345)));
evalcond[1]=(((r21*x3348))+(((-1.0)*x3344*x3346))+(((-1.0)*r22*x3345)));
evalcond[2]=(cj0+((r02*x3341))+(((-1.0)*x3342*x3345))+((r01*x3347)));
evalcond[3]=(sj0+(((-1.0)*x3343*x3345))+((r11*x3347))+((r12*x3341)));
evalcond[4]=((((-1.0)*x3343*x3346))+cj0+(((-1.0)*r12*x3345))+((r11*x3348)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3345))+(((-1.0)*x3342*x3346))+((r01*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3349 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3349.valid){
continue;
}
CheckValue<IkReal> x3350=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3349.value)+(((1.5707963267949)*(x3350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3351=IKcos(j4);
IkReal x3352=IKsin(j4);
IkReal x3353=(cj5*r00);
IkReal x3354=(cj5*r10);
IkReal x3355=(cj5*r20);
IkReal x3356=((1.0)*x3351);
IkReal x3357=((1.0)*x3352);
IkReal x3358=(sj5*x3351);
IkReal x3359=(sj5*x3352);
evalcond[0]=((((-1.0)*x3355*x3356))+((r21*x3358))+((r22*x3352)));
evalcond[1]=((((-1.0)*x3355*x3357))+((r21*x3359))+(((-1.0)*r22*x3356)));
evalcond[2]=(cj0+((r01*x3358))+(((-1.0)*x3353*x3356))+((r02*x3352)));
evalcond[3]=(((r12*x3352))+sj0+((r11*x3358))+(((-1.0)*x3354*x3356)));
evalcond[4]=(cj0+((r11*x3359))+(((-1.0)*x3354*x3357))+(((-1.0)*r12*x3356)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3356))+((r01*x3359))+(((-1.0)*x3353*x3357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3360=IKcos(j0);
IkReal x3361=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.612)*x3360))+(((-0.163941)*x3361)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x3360))+(((-0.612)*x3361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3362=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3362;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3363=((1.0)*cj5);
IkReal x3364=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3363)));
j4eval[0]=x3364;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3363)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3365=((1.0)*cj5);
IkReal x3366=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3365)));
j4eval[0]=x3366;
j4eval[1]=IKsign(x3366);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3365))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3367=((1.0)*cj5);
CheckValue<IkReal> x3368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3367)))),-1);
if(!x3368.valid){
continue;
}
CheckValue<IkReal> x3369 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3367))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3368.value)))+(x3369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3370=IKcos(j4);
IkReal x3371=IKsin(j4);
IkReal x3372=((1.0)*sj0);
IkReal x3373=(cj5*r00);
IkReal x3374=(cj5*r10);
IkReal x3375=(cj5*r20);
IkReal x3376=((1.0)*x3370);
IkReal x3377=((1.0)*x3371);
IkReal x3378=(sj5*x3370);
IkReal x3379=(sj5*x3371);
evalcond[0]=(((r22*x3371))+(((-1.0)*x3375*x3376))+((r21*x3378)));
evalcond[1]=((((-1.0)*r22*x3376))+(((-1.0)*x3375*x3377))+((r21*x3379)));
evalcond[2]=((((-1.0)*x3374*x3377))+cj0+(((-1.0)*r12*x3376))+((r11*x3379)));
evalcond[3]=(((r01*x3378))+(((-1.0)*x3373*x3376))+((r02*x3371))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3371))+(((-1.0)*x3374*x3376))+(((-1.0)*x3372))+((r11*x3378)));
evalcond[5]=(((r01*x3379))+(((-1.0)*x3373*x3377))+(((-1.0)*x3372))+(((-1.0)*r02*x3376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3380=((1.0)*cj5);
CheckValue<IkReal> x3381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3380)))),-1);
if(!x3381.valid){
continue;
}
CheckValue<IkReal> x3382 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3381.value)))+(x3382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3383=IKcos(j4);
IkReal x3384=IKsin(j4);
IkReal x3385=((1.0)*sj0);
IkReal x3386=(cj5*r00);
IkReal x3387=(cj5*r10);
IkReal x3388=(cj5*r20);
IkReal x3389=((1.0)*x3383);
IkReal x3390=((1.0)*x3384);
IkReal x3391=(sj5*x3383);
IkReal x3392=(sj5*x3384);
evalcond[0]=(((r21*x3391))+((r22*x3384))+(((-1.0)*x3388*x3389)));
evalcond[1]=((((-1.0)*r22*x3389))+((r21*x3392))+(((-1.0)*x3388*x3390)));
evalcond[2]=((((-1.0)*x3387*x3390))+cj0+((r11*x3392))+(((-1.0)*r12*x3389)));
evalcond[3]=(((r01*x3391))+((r02*x3384))+(((-1.0)*x3386*x3389))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3387*x3389))+((r11*x3391))+((r12*x3384))+(((-1.0)*x3385)));
evalcond[5]=(((r01*x3392))+(((-1.0)*r02*x3389))+(((-1.0)*x3386*x3390))+(((-1.0)*x3385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3393 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3393.valid){
continue;
}
CheckValue<IkReal> x3394=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3393.value)+(((1.5707963267949)*(x3394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3395=IKcos(j4);
IkReal x3396=IKsin(j4);
IkReal x3397=((1.0)*sj0);
IkReal x3398=(cj5*r00);
IkReal x3399=(cj5*r10);
IkReal x3400=(cj5*r20);
IkReal x3401=((1.0)*x3395);
IkReal x3402=((1.0)*x3396);
IkReal x3403=(sj5*x3395);
IkReal x3404=(sj5*x3396);
evalcond[0]=((((-1.0)*x3400*x3401))+((r21*x3403))+((r22*x3396)));
evalcond[1]=((((-1.0)*x3400*x3402))+((r21*x3404))+(((-1.0)*r22*x3401)));
evalcond[2]=(cj0+((r11*x3404))+(((-1.0)*x3399*x3402))+(((-1.0)*r12*x3401)));
evalcond[3]=((((-1.0)*x3398*x3401))+((r02*x3396))+((r01*x3403))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3403))+(((-1.0)*x3399*x3401))+(((-1.0)*x3397))+((r12*x3396)));
evalcond[5]=((((-1.0)*x3398*x3402))+(((-1.0)*r02*x3401))+(((-1.0)*x3397))+((r01*x3404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3405=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3405;
j4eval[1]=IKsign(x3405);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3406=((1.0)*cj5);
IkReal x3407=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3406)));
j4eval[0]=x3407;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3406)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3407);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3408=cj5*cj5;
IkReal x3409=((1.0)*r20);
IkReal x3410=(r01*r21);
IkReal x3411=(r21*sj5);
IkReal x3412=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3408*x3409))+(((-1.0)*r02*r22))+(((-1.0)*x3410))+((x3408*x3410))+((cj5*r00*x3411)));
j4eval[0]=x3412;
j4eval[1]=((IKabs((((cj0*x3411))+(((-1.0)*cj0*cj5*x3409)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3413=cj5*cj5;
IkReal x3414=((1.0)*r20);
IkReal x3415=(r01*r21);
IkReal x3416=(r21*sj5);
CheckValue<IkReal> x3417=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3415))+(((-1.0)*r00*x3413*x3414))+((x3413*x3415))+((cj5*r00*x3416)))),-1);
if(!x3417.valid){
continue;
}
CheckValue<IkReal> x3418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3416))+(((-1.0)*cj0*cj5*x3414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3417.value)))+(x3418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3419=IKcos(j4);
IkReal x3420=IKsin(j4);
IkReal x3421=(cj5*r00);
IkReal x3422=(cj5*r10);
IkReal x3423=(cj5*r20);
IkReal x3424=((1.0)*x3419);
IkReal x3425=((1.0)*x3420);
IkReal x3426=(sj5*x3419);
IkReal x3427=(sj5*x3420);
evalcond[0]=(((r21*x3426))+(((-1.0)*x3423*x3424))+((r22*x3420)));
evalcond[1]=((((-1.0)*r22*x3424))+((r21*x3427))+(((-1.0)*x3423*x3425)));
evalcond[2]=(cj0+((r02*x3420))+(((-1.0)*x3421*x3424))+((r01*x3426)));
evalcond[3]=(sj0+(((-1.0)*x3422*x3424))+((r12*x3420))+((r11*x3426)));
evalcond[4]=((((-1.0)*r12*x3424))+cj0+(((-1.0)*x3422*x3425))+((r11*x3427)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3421*x3425))+(((-1.0)*r02*x3424))+((r01*x3427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3428=((1.0)*cj5);
CheckValue<IkReal> x3429 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3428)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3429.valid){
continue;
}
CheckValue<IkReal> x3430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3428))+(((-1.0)*r10*sj5)))),-1);
if(!x3430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3429.value)+(((1.5707963267949)*(x3430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3431=IKcos(j4);
IkReal x3432=IKsin(j4);
IkReal x3433=(cj5*r00);
IkReal x3434=(cj5*r10);
IkReal x3435=(cj5*r20);
IkReal x3436=((1.0)*x3431);
IkReal x3437=((1.0)*x3432);
IkReal x3438=(sj5*x3431);
IkReal x3439=(sj5*x3432);
evalcond[0]=((((-1.0)*x3435*x3436))+((r21*x3438))+((r22*x3432)));
evalcond[1]=((((-1.0)*x3435*x3437))+(((-1.0)*r22*x3436))+((r21*x3439)));
evalcond[2]=(((r01*x3438))+cj0+(((-1.0)*x3433*x3436))+((r02*x3432)));
evalcond[3]=(sj0+(((-1.0)*x3434*x3436))+((r12*x3432))+((r11*x3438)));
evalcond[4]=((((-1.0)*r12*x3436))+cj0+(((-1.0)*x3434*x3437))+((r11*x3439)));
evalcond[5]=(((r01*x3439))+(((-1.0)*sj0))+(((-1.0)*x3433*x3437))+(((-1.0)*r02*x3436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3440.value)+(((1.5707963267949)*(x3441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3442=IKcos(j4);
IkReal x3443=IKsin(j4);
IkReal x3444=(cj5*r00);
IkReal x3445=(cj5*r10);
IkReal x3446=(cj5*r20);
IkReal x3447=((1.0)*x3442);
IkReal x3448=((1.0)*x3443);
IkReal x3449=(sj5*x3442);
IkReal x3450=(sj5*x3443);
evalcond[0]=(((r21*x3449))+((r22*x3443))+(((-1.0)*x3446*x3447)));
evalcond[1]=(((r21*x3450))+(((-1.0)*x3446*x3448))+(((-1.0)*r22*x3447)));
evalcond[2]=(cj0+((r02*x3443))+(((-1.0)*x3444*x3447))+((r01*x3449)));
evalcond[3]=(((r11*x3449))+sj0+((r12*x3443))+(((-1.0)*x3445*x3447)));
evalcond[4]=(cj0+(((-1.0)*r12*x3447))+(((-1.0)*x3445*x3448))+((r11*x3450)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3444*x3448))+(((-1.0)*r02*x3447))+((r01*x3450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3451=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3451;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3452=((1.0)*cj5);
IkReal x3453=((((-1.0)*r01*x3452))+(((-1.0)*r00*sj5)));
j4eval[0]=x3453;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x3452))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x3453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3454=((1.0)*cj5);
IkReal x3455=((((-1.0)*r01*x3454))+(((-1.0)*r00*sj5)));
j4eval[0]=x3455;
j4eval[1]=IKsign(x3455);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x3454))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3456=((1.0)*cj5);
CheckValue<IkReal> x3457 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3456))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3457.valid){
continue;
}
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3456))+(((-1.0)*r00*sj5)))),-1);
if(!x3458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3457.value)+(((1.5707963267949)*(x3458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3459=IKcos(j4);
IkReal x3460=IKsin(j4);
IkReal x3461=((1.0)*sj0);
IkReal x3462=(cj5*r00);
IkReal x3463=(cj5*r10);
IkReal x3464=(cj5*r20);
IkReal x3465=((1.0)*x3459);
IkReal x3466=((1.0)*x3460);
IkReal x3467=(sj5*x3459);
IkReal x3468=(sj5*x3460);
evalcond[0]=(((r21*x3467))+(((-1.0)*x3464*x3465))+((r22*x3460)));
evalcond[1]=((((-1.0)*r22*x3465))+((r21*x3468))+(((-1.0)*x3464*x3466)));
evalcond[2]=((((-1.0)*x3463*x3466))+cj0+(((-1.0)*r12*x3465))+((r11*x3468)));
evalcond[3]=((((-1.0)*x3462*x3465))+((r01*x3467))+((r02*x3460))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3463*x3465))+((r12*x3460))+((r11*x3467))+(((-1.0)*x3461)));
evalcond[5]=((((-1.0)*x3462*x3466))+(((-1.0)*r02*x3465))+((r01*x3468))+(((-1.0)*x3461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3469=((1.0)*cj5);
CheckValue<IkReal> x3470 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3470.valid){
continue;
}
CheckValue<IkReal> x3471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3469)))),-1);
if(!x3471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3470.value)+(((1.5707963267949)*(x3471.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3472=IKcos(j4);
IkReal x3473=IKsin(j4);
IkReal x3474=((1.0)*sj0);
IkReal x3475=(cj5*r00);
IkReal x3476=(cj5*r10);
IkReal x3477=(cj5*r20);
IkReal x3478=((1.0)*x3472);
IkReal x3479=((1.0)*x3473);
IkReal x3480=(sj5*x3472);
IkReal x3481=(sj5*x3473);
evalcond[0]=(((r21*x3480))+(((-1.0)*x3477*x3478))+((r22*x3473)));
evalcond[1]=((((-1.0)*r22*x3478))+((r21*x3481))+(((-1.0)*x3477*x3479)));
evalcond[2]=(cj0+(((-1.0)*r12*x3478))+((r11*x3481))+(((-1.0)*x3476*x3479)));
evalcond[3]=(((r01*x3480))+(((-1.0)*x3475*x3478))+((r02*x3473))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3473))+((r11*x3480))+(((-1.0)*x3474))+(((-1.0)*x3476*x3478)));
evalcond[5]=((((-1.0)*r02*x3478))+((r01*x3481))+(((-1.0)*x3475*x3479))+(((-1.0)*x3474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3482 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3482.valid){
continue;
}
CheckValue<IkReal> x3483=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3482.value)+(((1.5707963267949)*(x3483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3484=IKcos(j4);
IkReal x3485=IKsin(j4);
IkReal x3486=((1.0)*sj0);
IkReal x3487=(cj5*r00);
IkReal x3488=(cj5*r10);
IkReal x3489=(cj5*r20);
IkReal x3490=((1.0)*x3484);
IkReal x3491=((1.0)*x3485);
IkReal x3492=(sj5*x3484);
IkReal x3493=(sj5*x3485);
evalcond[0]=((((-1.0)*x3489*x3490))+((r21*x3492))+((r22*x3485)));
evalcond[1]=((((-1.0)*x3489*x3491))+(((-1.0)*r22*x3490))+((r21*x3493)));
evalcond[2]=((((-1.0)*r12*x3490))+cj0+(((-1.0)*x3488*x3491))+((r11*x3493)));
evalcond[3]=(((r01*x3492))+(((-1.0)*x3487*x3490))+((r02*x3485))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3488*x3490))+((r12*x3485))+((r11*x3492))+(((-1.0)*x3486)));
evalcond[5]=((((-1.0)*r02*x3490))+((r01*x3493))+(((-1.0)*x3487*x3491))+(((-1.0)*x3486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3494=(r00*sj5);
IkReal x3495=((612000.0)*cj1);
IkReal x3496=(cj5*r01);
IkReal x3497=(sj1*sj2);
IkReal x3498=(cj1*cj2);
IkReal x3499=((1000000.0)*px);
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(((((-163941.0)*x3498))+(((163941.0)*x3497))),-1);
if(!x3500.valid){
continue;
}
CheckValue<IkReal> x3501=IKPowWithIntegerCheck((x3497+(((-1.0)*x3498))),-1);
if(!x3501.valid){
continue;
}
if( IKabs(((x3500.value)*((((x3498*x3499))+(((-1.0)*x3497*x3499))+((x3494*x3495))+(((-688000.0)*x3494*x3497))+(((-688000.0)*x3496*x3497))+(((688000.0)*x3496*x3498))+(((688000.0)*x3494*x3498))+((x3495*x3496)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3501.value)*((x3496+x3494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3500.value)*((((x3498*x3499))+(((-1.0)*x3497*x3499))+((x3494*x3495))+(((-688000.0)*x3494*x3497))+(((-688000.0)*x3496*x3497))+(((688000.0)*x3496*x3498))+(((688000.0)*x3494*x3498))+((x3495*x3496))))))+IKsqr(((x3501.value)*((x3496+x3494))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3500.value)*((((x3498*x3499))+(((-1.0)*x3497*x3499))+((x3494*x3495))+(((-688000.0)*x3494*x3497))+(((-688000.0)*x3496*x3497))+(((688000.0)*x3496*x3498))+(((688000.0)*x3494*x3498))+((x3495*x3496))))), ((x3501.value)*((x3496+x3494))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3502=IKcos(j0);
IkReal x3503=IKsin(j0);
IkReal x3504=(cj5*r01);
IkReal x3505=(sj1*sj2);
IkReal x3506=(cj5*r11);
IkReal x3507=(r10*sj5);
IkReal x3508=(r00*sj5);
IkReal x3509=(cj1*cj2);
IkReal x3510=((0.5723)*x3503);
IkReal x3511=(cj1*x3503);
IkReal x3512=((0.5723)*x3502);
evalcond[0]=((((-1.0)*x3502*x3509))+((x3502*x3505))+(((-1.0)*x3504))+(((-1.0)*x3508)));
evalcond[1]=(((x3503*x3505))+(((-1.0)*x3506))+(((-1.0)*x3507))+(((-1.0)*x3503*x3509)));
evalcond[2]=((((0.612)*cj1*x3502))+(((-0.1157)*x3504))+(((-0.1157)*x3508))+(((-0.163941)*x3503))+(((-1.0)*px))+((x3509*x3512))+(((-1.0)*x3505*x3512)));
evalcond[3]=((((-0.1157)*x3506))+(((-0.1157)*x3507))+(((-1.0)*py))+((x3509*x3510))+(((-1.0)*x3505*x3510))+(((0.612)*x3511))+(((0.163941)*x3502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3513=((1.0)*cj5);
IkReal x3514=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3513)));
j4eval[0]=x3514;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3513)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3515=((1.0)*cj5);
IkReal x3516=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3515)));
j4eval[0]=x3516;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3515))))));
j4eval[2]=IKsign(x3516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3517=((1.0)*sj0);
IkReal x3518=((1.0)*cj0);
IkReal x3519=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3519;
j4eval[1]=((IKabs(((((-1.0)*r02*x3518))+(((-1.0)*r12*x3517)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3518))+(((-1.0)*r11*sj5*x3517))))));
j4eval[2]=IKsign(x3519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3520=((-1.0)*r20);
IkReal x3522 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3522)==0){
continue;
}
IkReal x3521=pow(x3522,-0.5);
CheckValue<IkReal> x3523 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3520),IKFAST_ATAN2_MAGTHRESH);
if(!x3523.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3523.value));
IkReal gconst97=(r21*x3521);
IkReal gconst98=(x3520*x3521);
CheckValue<IkReal> x3524 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3525=((-1.0)*r20);
IkReal x3526=x3521;
CheckValue<IkReal> x3528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3525),IKFAST_ATAN2_MAGTHRESH);
if(!x3528.valid){
continue;
}
IkReal x3527=((-1.0)*(x3528.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3527;
IkReal gconst96=x3527;
IkReal gconst97=(r21*x3526);
IkReal gconst98=(x3525*x3526);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3529=((-1.0)*r20);
IkReal x3530=x3521;
CheckValue<IkReal> x3532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3529),IKFAST_ATAN2_MAGTHRESH);
if(!x3532.valid){
continue;
}
IkReal x3531=((-1.0)*(x3532.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3531;
IkReal gconst96=x3531;
IkReal gconst97=(r21*x3530);
IkReal gconst98=(x3529*x3530);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3533=((-1.0)*r20);
IkReal x3534=x3521;
CheckValue<IkReal> x3536 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3533),IKFAST_ATAN2_MAGTHRESH);
if(!x3536.valid){
continue;
}
IkReal x3535=((-1.0)*(x3536.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3535;
IkReal gconst96=x3535;
IkReal gconst97=(r21*x3534);
IkReal gconst98=(x3533*x3534);
IkReal x3537=((1.0)*(r22*r22));
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3537))),-1);
if(!x3541.valid){
continue;
}
IkReal x3538=x3541.value;
IkReal x3539=((1.0)*x3538);
IkReal x3540=((((-1.0)*x3539*(r21*r21*r21*r21)))+(((-2.0)*x3538*(r20*r20)*(r21*r21)))+(((-1.0)*x3539*(r20*r20*r20*r20)))+(((-1.0)*x3537)));
j4eval[0]=x3540;
j4eval[1]=IKsign(x3540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3542=(cj1*cj2);
IkReal x3543=(gconst98*r20);
IkReal x3544=(sj1*sj2);
IkReal x3545=(gconst97*r21);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal((((r22*x3544))+(((-1.0)*r22*x3542)))),IkReal((((x3542*x3543))+(((-1.0)*x3543*x3544))+(((-1.0)*x3542*x3545))+((x3544*x3545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
CheckValue<IkReal> x3547=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3545*x3545)))+(((-1.0)*(x3543*x3543)))+(((2.0)*x3543*x3545))+(((-1.0)*(r22*r22))))),-1);
if(!x3547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3546.value)+(((1.5707963267949)*(x3547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3548=IKsin(j4);
IkReal x3549=IKcos(j4);
IkReal x3550=(gconst98*r10);
IkReal x3551=(gconst97*r21);
IkReal x3552=(gconst98*r20);
IkReal x3553=((1.0)*cj2);
IkReal x3554=((1.0)*sj0);
IkReal x3555=(gconst98*r00);
IkReal x3556=(cj1*sj2);
IkReal x3557=((1.0)*x3549);
IkReal x3558=((1.0)*x3548);
IkReal x3559=(gconst97*x3548);
IkReal x3560=(gconst97*x3549);
evalcond[0]=(((x3548*x3551))+(((-1.0)*r22*x3557))+(((-1.0)*x3552*x3558)));
evalcond[1]=(cj0+(((-1.0)*x3550*x3558))+(((-1.0)*r12*x3557))+((r11*x3559)));
evalcond[2]=((((-1.0)*x3555*x3558))+((r01*x3559))+(((-1.0)*x3554))+(((-1.0)*r02*x3557)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3553))+((r22*x3548))+(((-1.0)*x3552*x3557))+((x3549*x3551)));
evalcond[4]=(((r02*x3548))+(((-1.0)*x3555*x3557))+((r01*x3560))+(((-1.0)*cj0*x3556))+(((-1.0)*cj0*sj1*x3553)));
evalcond[5]=((((-1.0)*x3554*x3556))+((r12*x3548))+(((-1.0)*sj0*sj1*x3553))+((r11*x3560))+(((-1.0)*x3550*x3557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3561=((1.0)*gconst98);
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3561))+(((-1.0)*gconst97*r10)))),-1);
if(!x3562.valid){
continue;
}
CheckValue<IkReal> x3563 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3562.value)))+(x3563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3564=IKsin(j4);
IkReal x3565=IKcos(j4);
IkReal x3566=(gconst98*r10);
IkReal x3567=(gconst97*r21);
IkReal x3568=(gconst98*r20);
IkReal x3569=((1.0)*cj2);
IkReal x3570=((1.0)*sj0);
IkReal x3571=(gconst98*r00);
IkReal x3572=(cj1*sj2);
IkReal x3573=((1.0)*x3565);
IkReal x3574=((1.0)*x3564);
IkReal x3575=(gconst97*x3564);
IkReal x3576=(gconst97*x3565);
evalcond[0]=((((-1.0)*x3568*x3574))+(((-1.0)*r22*x3573))+((x3564*x3567)));
evalcond[1]=(cj0+(((-1.0)*x3566*x3574))+((r11*x3575))+(((-1.0)*r12*x3573)));
evalcond[2]=(((r01*x3575))+(((-1.0)*x3570))+(((-1.0)*x3571*x3574))+(((-1.0)*r02*x3573)));
evalcond[3]=((((-1.0)*x3568*x3573))+((x3565*x3567))+((sj1*sj2))+((r22*x3564))+(((-1.0)*cj1*x3569)));
evalcond[4]=(((r01*x3576))+(((-1.0)*cj0*x3572))+(((-1.0)*x3571*x3573))+(((-1.0)*cj0*sj1*x3569))+((r02*x3564)));
evalcond[5]=((((-1.0)*x3566*x3573))+(((-1.0)*sj0*sj1*x3569))+((r11*x3576))+((r12*x3564))+(((-1.0)*x3570*x3572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3577=((1.0)*gconst98);
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3577))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
CheckValue<IkReal> x3579=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3577))+(((-1.0)*gconst97*r00)))),-1);
if(!x3579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3578.value)+(((1.5707963267949)*(x3579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3580=IKsin(j4);
IkReal x3581=IKcos(j4);
IkReal x3582=(gconst98*r10);
IkReal x3583=(gconst97*r21);
IkReal x3584=(gconst98*r20);
IkReal x3585=((1.0)*cj2);
IkReal x3586=((1.0)*sj0);
IkReal x3587=(gconst98*r00);
IkReal x3588=(cj1*sj2);
IkReal x3589=((1.0)*x3581);
IkReal x3590=((1.0)*x3580);
IkReal x3591=(gconst97*x3580);
IkReal x3592=(gconst97*x3581);
evalcond[0]=((((-1.0)*r22*x3589))+(((-1.0)*x3584*x3590))+((x3580*x3583)));
evalcond[1]=(cj0+(((-1.0)*x3582*x3590))+((r11*x3591))+(((-1.0)*r12*x3589)));
evalcond[2]=((((-1.0)*x3587*x3590))+(((-1.0)*r02*x3589))+((r01*x3591))+(((-1.0)*x3586)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3584*x3589))+(((-1.0)*cj1*x3585))+((x3581*x3583))+((r22*x3580)));
evalcond[4]=((((-1.0)*cj0*x3588))+(((-1.0)*cj0*sj1*x3585))+(((-1.0)*x3587*x3589))+((r02*x3580))+((r01*x3592)));
evalcond[5]=(((r12*x3580))+((r11*x3592))+(((-1.0)*x3582*x3589))+(((-1.0)*x3586*x3588))+(((-1.0)*sj0*sj1*x3585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3593=((-1.0)*r21);
IkReal x3595 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3595)==0){
continue;
}
IkReal x3594=pow(x3595,-0.5);
CheckValue<IkReal> x3596 = IKatan2WithCheck(IkReal(x3593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3596.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3596.value))));
IkReal gconst100=(x3593*x3594);
IkReal gconst101=((1.0)*r20*x3594);
CheckValue<IkReal> x3597 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3597.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3597.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3598=((-1.0)*r21);
CheckValue<IkReal> x3601 = IKatan2WithCheck(IkReal(x3598),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3601.valid){
continue;
}
IkReal x3599=((1.0)*(x3601.value));
IkReal x3600=x3594;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3599)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3599)));
IkReal gconst100=(x3598*x3600);
IkReal gconst101=((1.0)*r20*x3600);
IkReal x3602=r22*r22;
IkReal x3603=((1.0)*x3602);
CheckValue<IkReal> x3607=IKPowWithIntegerCheck(((-1.0)+x3602),-1);
if(!x3607.valid){
continue;
}
IkReal x3604=x3607.value;
if((((1.0)+(((-1.0)*x3603)))) < -0.00001)
continue;
IkReal x3605=IKsqrt(((1.0)+(((-1.0)*x3603))));
IkReal x3606=(cj0*x3604*x3605);
j4eval[0]=((IKabs((x3606+(((-1.0)*x3603*x3606)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3608=((-1.0)*r21);
CheckValue<IkReal> x3611 = IKatan2WithCheck(IkReal(x3608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3611.valid){
continue;
}
IkReal x3609=((1.0)*(x3611.value));
IkReal x3610=x3594;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3609)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3609)));
IkReal gconst100=(x3608*x3610);
IkReal gconst101=((1.0)*r20*x3610);
IkReal x3612=r22*r22;
IkReal x3613=((1.0)*x3612);
CheckValue<IkReal> x3617=IKPowWithIntegerCheck(((-1.0)+x3612),-1);
if(!x3617.valid){
continue;
}
IkReal x3614=x3617.value;
if((((1.0)+(((-1.0)*x3613)))) < -0.00001)
continue;
IkReal x3615=IKsqrt(((1.0)+(((-1.0)*x3613))));
IkReal x3616=(sj0*x3614*x3615);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3616+(((-1.0)*x3613*x3616))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3618=((-1.0)*r21);
CheckValue<IkReal> x3621 = IKatan2WithCheck(IkReal(x3618),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3621.valid){
continue;
}
IkReal x3619=((1.0)*(x3621.value));
IkReal x3620=x3594;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3619)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3619)));
IkReal gconst100=(x3618*x3620);
IkReal gconst101=((1.0)*r20*x3620);
IkReal x3622=r22*r22;
IkReal x3623=(r12*sj0);
IkReal x3624=(cj0*r02);
CheckValue<IkReal> x3628=IKPowWithIntegerCheck(((-1.0)+x3622),-1);
if(!x3628.valid){
continue;
}
IkReal x3625=x3628.value;
if((((1.0)+(((-1.0)*x3622)))) < -0.00001)
continue;
IkReal x3626=IKsqrt(((1.0)+(((-1.0)*x3622))));
IkReal x3627=(r22*x3625*x3626);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x3623))+(((-1.0)*x3624)))))+(IKabs((((x3624*x3627))+((x3623*x3627))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3629=((1.0)*sj0);
IkReal x3630=((1.0)*gconst100);
CheckValue<IkReal> x3631 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3629)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3630))+(((-1.0)*gconst100*r11*x3629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3631.valid){
continue;
}
CheckValue<IkReal> x3632=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x3630)))),-1);
if(!x3632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3631.value)+(((1.5707963267949)*(x3632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3633=IKsin(j4);
IkReal x3634=IKcos(j4);
IkReal x3635=(gconst101*r20);
IkReal x3636=(gconst101*r10);
IkReal x3637=((1.0)*cj2);
IkReal x3638=(gconst101*r00);
IkReal x3639=((1.0)*sj0);
IkReal x3640=(cj1*sj2);
IkReal x3641=((1.0)*x3634);
IkReal x3642=((1.0)*x3633);
IkReal x3643=(gconst100*x3633);
IkReal x3644=(gconst100*x3634);
evalcond[0]=((((-1.0)*x3635*x3642))+((r21*x3643))+(((-1.0)*r22*x3641)));
evalcond[1]=(((r11*x3643))+cj0+(((-1.0)*r12*x3641))+(((-1.0)*x3636*x3642)));
evalcond[2]=(((r01*x3643))+(((-1.0)*x3639))+(((-1.0)*x3638*x3642))+(((-1.0)*r02*x3641)));
evalcond[3]=((((-1.0)*cj1*x3637))+((r22*x3633))+(((-1.0)*x3635*x3641))+((sj1*sj2))+((r21*x3644)));
evalcond[4]=(((r02*x3633))+((r01*x3644))+(((-1.0)*cj0*x3640))+(((-1.0)*cj0*sj1*x3637))+(((-1.0)*x3638*x3641)));
evalcond[5]=(((r12*x3633))+((r11*x3644))+(((-1.0)*x3639*x3640))+(((-1.0)*x3636*x3641))+(((-1.0)*sj0*sj1*x3637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3645=((1.0)*gconst101);
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3645)))),-1);
if(!x3646.valid){
continue;
}
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3645))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3646.value)))+(x3647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3648=IKsin(j4);
IkReal x3649=IKcos(j4);
IkReal x3650=(gconst101*r20);
IkReal x3651=(gconst101*r10);
IkReal x3652=((1.0)*cj2);
IkReal x3653=(gconst101*r00);
IkReal x3654=((1.0)*sj0);
IkReal x3655=(cj1*sj2);
IkReal x3656=((1.0)*x3649);
IkReal x3657=((1.0)*x3648);
IkReal x3658=(gconst100*x3648);
IkReal x3659=(gconst100*x3649);
evalcond[0]=(((r21*x3658))+(((-1.0)*x3650*x3657))+(((-1.0)*r22*x3656)));
evalcond[1]=(cj0+((r11*x3658))+(((-1.0)*x3651*x3657))+(((-1.0)*r12*x3656)));
evalcond[2]=((((-1.0)*x3653*x3657))+(((-1.0)*r02*x3656))+((r01*x3658))+(((-1.0)*x3654)));
evalcond[3]=(((sj1*sj2))+((r21*x3659))+(((-1.0)*x3650*x3656))+(((-1.0)*cj1*x3652))+((r22*x3648)));
evalcond[4]=((((-1.0)*cj0*x3655))+(((-1.0)*x3653*x3656))+((r02*x3648))+(((-1.0)*cj0*sj1*x3652))+((r01*x3659)));
evalcond[5]=((((-1.0)*sj0*sj1*x3652))+((r12*x3648))+((r11*x3659))+(((-1.0)*x3654*x3655))+(((-1.0)*x3651*x3656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3660=((1.0)*gconst101);
CheckValue<IkReal> x3661 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3661.valid){
continue;
}
CheckValue<IkReal> x3662=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3660)))),-1);
if(!x3662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3661.value)+(((1.5707963267949)*(x3662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3663=IKsin(j4);
IkReal x3664=IKcos(j4);
IkReal x3665=(gconst101*r20);
IkReal x3666=(gconst101*r10);
IkReal x3667=((1.0)*cj2);
IkReal x3668=(gconst101*r00);
IkReal x3669=((1.0)*sj0);
IkReal x3670=(cj1*sj2);
IkReal x3671=((1.0)*x3664);
IkReal x3672=((1.0)*x3663);
IkReal x3673=(gconst100*x3663);
IkReal x3674=(gconst100*x3664);
evalcond[0]=((((-1.0)*x3665*x3672))+((r21*x3673))+(((-1.0)*r22*x3671)));
evalcond[1]=(cj0+((r11*x3673))+(((-1.0)*r12*x3671))+(((-1.0)*x3666*x3672)));
evalcond[2]=(((r01*x3673))+(((-1.0)*x3669))+(((-1.0)*x3668*x3672))+(((-1.0)*r02*x3671)));
evalcond[3]=(((r22*x3663))+(((-1.0)*x3665*x3671))+((sj1*sj2))+((r21*x3674))+(((-1.0)*cj1*x3667)));
evalcond[4]=(((r01*x3674))+(((-1.0)*cj0*sj1*x3667))+(((-1.0)*cj0*x3670))+((r02*x3663))+(((-1.0)*x3668*x3671)));
evalcond[5]=(((r11*x3674))+(((-1.0)*sj0*sj1*x3667))+((r12*x3663))+(((-1.0)*x3666*x3671))+(((-1.0)*x3669*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3675=((-1.0)*r10);
IkReal x3677 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3677)==0){
continue;
}
IkReal x3676=pow(x3677,-0.5);
CheckValue<IkReal> x3678 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3675),IKFAST_ATAN2_MAGTHRESH);
if(!x3678.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3678.value));
IkReal gconst103=(r11*x3676);
IkReal gconst104=(x3675*x3676);
CheckValue<IkReal> x3679 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3680=((-1.0)*r10);
IkReal x3681=x3676;
CheckValue<IkReal> x3683 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3680),IKFAST_ATAN2_MAGTHRESH);
if(!x3683.valid){
continue;
}
IkReal x3682=((-1.0)*(x3683.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3682;
IkReal gconst102=x3682;
IkReal gconst103=(r11*x3681);
IkReal gconst104=(x3680*x3681);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3684=((1.0)*sj0);
IkReal x3685=((1.0)*gconst103);
CheckValue<IkReal> x3686 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3684)))),IkReal(((((-1.0)*cj0*r01*x3685))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3684))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3686.valid){
continue;
}
CheckValue<IkReal> x3687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3685))+(((-1.0)*gconst104*r21)))),-1);
if(!x3687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3686.value)+(((1.5707963267949)*(x3687.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3688=IKsin(j4);
IkReal x3689=IKcos(j4);
IkReal x3690=(gconst103*r11);
IkReal x3691=((1.0)*cj2);
IkReal x3692=((1.0)*sj0);
IkReal x3693=(cj1*sj2);
IkReal x3694=((1.0)*x3689);
IkReal x3695=(gconst103*x3689);
IkReal x3696=(gconst103*x3688);
IkReal x3697=((1.0)*gconst104*x3688);
evalcond[0]=((((-1.0)*r20*x3697))+(((-1.0)*r22*x3694))+((r21*x3696)));
evalcond[1]=(cj0+((x3688*x3690))+(((-1.0)*r12*x3694))+(((-1.0)*r10*x3697)));
evalcond[2]=(((r01*x3696))+(((-1.0)*r02*x3694))+(((-1.0)*x3692))+(((-1.0)*r00*x3697)));
evalcond[3]=((((-1.0)*gconst104*r20*x3694))+(((-1.0)*cj1*x3691))+((sj1*sj2))+((r21*x3695))+((r22*x3688)));
evalcond[4]=(((r01*x3695))+(((-1.0)*cj0*x3693))+(((-1.0)*cj0*sj1*x3691))+(((-1.0)*gconst104*r00*x3694))+((r02*x3688)));
evalcond[5]=(((x3689*x3690))+(((-1.0)*gconst104*r10*x3694))+((r12*x3688))+(((-1.0)*sj0*sj1*x3691))+(((-1.0)*x3692*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3698=((1.0)*gconst104);
CheckValue<IkReal> x3699 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3698))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3699.valid){
continue;
}
CheckValue<IkReal> x3700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3698)))),-1);
if(!x3700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3699.value)+(((1.5707963267949)*(x3700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3701=IKsin(j4);
IkReal x3702=IKcos(j4);
IkReal x3703=(gconst103*r11);
IkReal x3704=((1.0)*cj2);
IkReal x3705=((1.0)*sj0);
IkReal x3706=(cj1*sj2);
IkReal x3707=((1.0)*x3702);
IkReal x3708=(gconst103*x3702);
IkReal x3709=(gconst103*x3701);
IkReal x3710=((1.0)*gconst104*x3701);
evalcond[0]=(((r21*x3709))+(((-1.0)*r20*x3710))+(((-1.0)*r22*x3707)));
evalcond[1]=(cj0+(((-1.0)*r10*x3710))+(((-1.0)*r12*x3707))+((x3701*x3703)));
evalcond[2]=((((-1.0)*r02*x3707))+((r01*x3709))+(((-1.0)*r00*x3710))+(((-1.0)*x3705)));
evalcond[3]=((((-1.0)*gconst104*r20*x3707))+(((-1.0)*cj1*x3704))+((sj1*sj2))+((r21*x3708))+((r22*x3701)));
evalcond[4]=((((-1.0)*cj0*x3706))+(((-1.0)*cj0*sj1*x3704))+((r01*x3708))+(((-1.0)*gconst104*r00*x3707))+((r02*x3701)));
evalcond[5]=(((r12*x3701))+(((-1.0)*x3705*x3706))+((x3702*x3703))+(((-1.0)*sj0*sj1*x3704))+(((-1.0)*gconst104*r10*x3707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3711=((-1.0)*r11);
IkReal x3713 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3713)==0){
continue;
}
IkReal x3712=pow(x3713,-0.5);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(x3711),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3714.value))));
IkReal gconst106=(x3711*x3712);
IkReal gconst107=((1.0)*r10*x3712);
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3715.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3716=((-1.0)*r11);
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(x3716),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
IkReal x3717=((1.0)*(x3719.value));
IkReal x3718=x3712;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3717)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3717)));
IkReal gconst106=(x3716*x3718);
IkReal gconst107=((1.0)*r10*x3718);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3720=((-1.0)*r11);
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(x3720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
IkReal x3721=((1.0)*(x3723.value));
IkReal x3722=x3712;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3721)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3721)));
IkReal gconst106=(x3720*x3722);
IkReal gconst107=((1.0)*r10*x3722);
IkReal x3724=r12*r12;
IkReal x3725=((1.0)*sj0);
IkReal x3726=(cj0*r02);
IkReal x3727=x3712;
j4eval[0]=((IKabs((((r12*x3726*x3727))+(((-1.0)*x3725*x3727))+((sj0*x3724*x3727)))))+(IKabs(((((-1.0)*r12*x3725))+(((-1.0)*x3726))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3728=((-1.0)*r11);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal(x3728),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
IkReal x3729=((1.0)*(x3731.value));
IkReal x3730=x3712;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3729)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3729)));
IkReal gconst106=(x3728*x3730);
IkReal gconst107=((1.0)*r10*x3730);
IkReal x3732=r12*r12;
IkReal x3733=((1.0)+(((-1.0)*x3732)));
IkReal x3734=(r22*sj1*sj2);
IkReal x3735=(cj1*cj2*r22);
CheckValue<IkReal> x3742=IKPowWithIntegerCheck(x3733,-1);
if(!x3742.valid){
continue;
}
IkReal x3736=x3742.value;
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(((-1.0)+x3732),-1);
if(!x3743.valid){
continue;
}
IkReal x3737=x3743.value;
IkReal x3738=((1.0)*x3736);
if((x3733) < -0.00001)
continue;
IkReal x3739=IKsqrt(x3733);
IkReal x3740=(r12*x3737*x3739);
IkReal x3741=((((-1.0)*x3738*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x3736))+(((-1.0)*(r22*r22)))+(((-1.0)*x3738*(r11*r11)*(r21*r21))));
j4eval[0]=x3741;
j4eval[1]=((IKabs((((x3735*x3740))+(((-1.0)*x3734*x3740)))))+(IKabs((x3734+(((-1.0)*x3735))))));
j4eval[2]=IKsign(x3741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3744=(sj1*sj2);
IkReal x3745=(gconst106*r21);
IkReal x3746=(gconst107*r20);
IkReal x3747=(cj1*cj2);
CheckValue<IkReal> x3748 = IKatan2WithCheck(IkReal((((r22*x3744))+(((-1.0)*r22*x3747)))),IkReal((((x3744*x3745))+((x3746*x3747))+(((-1.0)*x3745*x3747))+(((-1.0)*x3744*x3746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3748.valid){
continue;
}
CheckValue<IkReal> x3749=IKPowWithIntegerCheck(IKsign(((((2.0)*x3745*x3746))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3745*x3745)))+(((-1.0)*(x3746*x3746))))),-1);
if(!x3749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3748.value)+(((1.5707963267949)*(x3749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3750=IKsin(j4);
IkReal x3751=IKcos(j4);
IkReal x3752=(gconst107*r10);
IkReal x3753=(gconst107*r00);
IkReal x3754=((1.0)*cj2);
IkReal x3755=(gconst107*r20);
IkReal x3756=((1.0)*sj0);
IkReal x3757=(cj1*sj2);
IkReal x3758=((1.0)*x3751);
IkReal x3759=(gconst106*x3751);
IkReal x3760=(gconst106*x3750);
IkReal x3761=((1.0)*x3750);
evalcond[0]=((((-1.0)*r22*x3758))+((r21*x3760))+(((-1.0)*x3755*x3761)));
evalcond[1]=(cj0+(((-1.0)*x3752*x3761))+(((-1.0)*r12*x3758))+((r11*x3760)));
evalcond[2]=((((-1.0)*x3756))+(((-1.0)*x3753*x3761))+(((-1.0)*r02*x3758))+((r01*x3760)));
evalcond[3]=((((-1.0)*cj1*x3754))+(((-1.0)*x3755*x3758))+((sj1*sj2))+((r22*x3750))+((r21*x3759)));
evalcond[4]=(((r01*x3759))+(((-1.0)*cj0*x3757))+(((-1.0)*x3753*x3758))+((r02*x3750))+(((-1.0)*cj0*sj1*x3754)));
evalcond[5]=((((-1.0)*x3752*x3758))+(((-1.0)*x3756*x3757))+(((-1.0)*sj0*sj1*x3754))+((r12*x3750))+((r11*x3759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3762=((1.0)*sj0);
IkReal x3763=((1.0)*gconst106);
CheckValue<IkReal> x3764=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3763))+(((-1.0)*gconst107*r21)))),-1);
if(!x3764.valid){
continue;
}
CheckValue<IkReal> x3765 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3762)))),IkReal(((((-1.0)*cj0*r01*x3763))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3762))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3764.value)))+(x3765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3766=IKsin(j4);
IkReal x3767=IKcos(j4);
IkReal x3768=(gconst107*r10);
IkReal x3769=(gconst107*r00);
IkReal x3770=((1.0)*cj2);
IkReal x3771=(gconst107*r20);
IkReal x3772=((1.0)*sj0);
IkReal x3773=(cj1*sj2);
IkReal x3774=((1.0)*x3767);
IkReal x3775=(gconst106*x3767);
IkReal x3776=(gconst106*x3766);
IkReal x3777=((1.0)*x3766);
evalcond[0]=(((r21*x3776))+(((-1.0)*r22*x3774))+(((-1.0)*x3771*x3777)));
evalcond[1]=(cj0+((r11*x3776))+(((-1.0)*x3768*x3777))+(((-1.0)*r12*x3774)));
evalcond[2]=((((-1.0)*r02*x3774))+(((-1.0)*x3769*x3777))+(((-1.0)*x3772))+((r01*x3776)));
evalcond[3]=(((r22*x3766))+((r21*x3775))+((sj1*sj2))+(((-1.0)*x3771*x3774))+(((-1.0)*cj1*x3770)));
evalcond[4]=(((r02*x3766))+(((-1.0)*cj0*sj1*x3770))+(((-1.0)*x3769*x3774))+(((-1.0)*cj0*x3773))+((r01*x3775)));
evalcond[5]=(((r11*x3775))+(((-1.0)*sj0*sj1*x3770))+((r12*x3766))+(((-1.0)*x3768*x3774))+(((-1.0)*x3772*x3773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3778=((1.0)*gconst107);
CheckValue<IkReal> x3779 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3779.valid){
continue;
}
CheckValue<IkReal> x3780=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3778)))),-1);
if(!x3780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3779.value)+(((1.5707963267949)*(x3780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3781=IKsin(j4);
IkReal x3782=IKcos(j4);
IkReal x3783=(gconst107*r10);
IkReal x3784=(gconst107*r00);
IkReal x3785=((1.0)*cj2);
IkReal x3786=(gconst107*r20);
IkReal x3787=((1.0)*sj0);
IkReal x3788=(cj1*sj2);
IkReal x3789=((1.0)*x3782);
IkReal x3790=(gconst106*x3782);
IkReal x3791=(gconst106*x3781);
IkReal x3792=((1.0)*x3781);
evalcond[0]=(((r21*x3791))+(((-1.0)*x3786*x3792))+(((-1.0)*r22*x3789)));
evalcond[1]=((((-1.0)*x3783*x3792))+cj0+(((-1.0)*r12*x3789))+((r11*x3791)));
evalcond[2]=((((-1.0)*r02*x3789))+(((-1.0)*x3787))+(((-1.0)*x3784*x3792))+((r01*x3791)));
evalcond[3]=(((r21*x3790))+((r22*x3781))+((sj1*sj2))+(((-1.0)*cj1*x3785))+(((-1.0)*x3786*x3789)));
evalcond[4]=((((-1.0)*x3784*x3789))+((r02*x3781))+(((-1.0)*cj0*x3788))+((r01*x3790))+(((-1.0)*cj0*sj1*x3785)));
evalcond[5]=(((r12*x3781))+(((-1.0)*sj0*sj1*x3785))+(((-1.0)*x3783*x3789))+((r11*x3790))+(((-1.0)*x3787*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3793=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3793;
j4eval[1]=IKsign(x3793);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3794=((1.0)*cj5);
IkReal x3795=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3794)));
j4eval[0]=x3795;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3794))))));
j4eval[2]=IKsign(x3795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3796=(sj1*sj2);
IkReal x3797=(cj5*r10);
IkReal x3798=(r11*sj5);
IkReal x3799=(cj1*cj2);
IkReal x3800=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3800;
j4eval[1]=((IKabs(((((-1.0)*r12*x3796))+((r12*x3799)))))+(IKabs((((x3796*x3798))+(((-1.0)*x3798*x3799))+(((-1.0)*x3796*x3797))+((x3797*x3799))))));
j4eval[2]=IKsign(x3800);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3801=(sj1*sj2);
IkReal x3802=(cj5*r10);
IkReal x3803=(r11*sj5);
IkReal x3804=(cj1*cj2);
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3805.valid){
continue;
}
CheckValue<IkReal> x3806 = IKatan2WithCheck(IkReal(((((-1.0)*x3803*x3804))+((x3802*x3804))+((x3801*x3803))+(((-1.0)*x3801*x3802)))),IkReal(((((-1.0)*r12*x3801))+((r12*x3804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3805.value)))+(x3806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3807=IKcos(j4);
IkReal x3808=IKsin(j4);
IkReal x3809=(cj5*r00);
IkReal x3810=(cj5*r10);
IkReal x3811=(r21*sj5);
IkReal x3812=((1.0)*cj2);
IkReal x3813=(cj5*r20);
IkReal x3814=((1.0)*x3807);
IkReal x3815=((1.0)*x3808);
IkReal x3816=(sj5*x3808);
IkReal x3817=(sj5*x3807);
evalcond[0]=(((r11*x3817))+((r12*x3808))+(((-1.0)*x3810*x3814)));
evalcond[1]=((((-1.0)*r22*x3814))+(((-1.0)*x3813*x3815))+((x3808*x3811)));
evalcond[2]=((((-1.0)*r02*x3814))+(((-1.0)*x3809*x3815))+((r01*x3816)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3814))+((r11*x3816))+(((-1.0)*x3810*x3815)));
evalcond[4]=(((r22*x3808))+((x3807*x3811))+(((-1.0)*cj1*x3812))+((sj1*sj2))+(((-1.0)*x3813*x3814)));
evalcond[5]=((((-1.0)*sj1*x3812))+(((-1.0)*cj1*sj2))+(((-1.0)*x3809*x3814))+((r02*x3808))+((r01*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3818=((1.0)*cj5);
CheckValue<IkReal> x3819 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3819.valid){
continue;
}
CheckValue<IkReal> x3820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3818))+(((-1.0)*r00*sj5)))),-1);
if(!x3820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3819.value)+(((1.5707963267949)*(x3820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3821=IKcos(j4);
IkReal x3822=IKsin(j4);
IkReal x3823=(cj5*r00);
IkReal x3824=(cj5*r10);
IkReal x3825=(r21*sj5);
IkReal x3826=((1.0)*cj2);
IkReal x3827=(cj5*r20);
IkReal x3828=((1.0)*x3821);
IkReal x3829=((1.0)*x3822);
IkReal x3830=(sj5*x3822);
IkReal x3831=(sj5*x3821);
evalcond[0]=(((r12*x3822))+(((-1.0)*x3824*x3828))+((r11*x3831)));
evalcond[1]=((((-1.0)*r22*x3828))+(((-1.0)*x3827*x3829))+((x3822*x3825)));
evalcond[2]=((((-1.0)*r02*x3828))+((r01*x3830))+(((-1.0)*x3823*x3829)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3828))+(((-1.0)*x3824*x3829))+((r11*x3830)));
evalcond[4]=((((-1.0)*x3827*x3828))+((sj1*sj2))+(((-1.0)*cj1*x3826))+((r22*x3822))+((x3821*x3825)));
evalcond[5]=((((-1.0)*sj1*x3826))+((r01*x3831))+(((-1.0)*cj1*sj2))+(((-1.0)*x3823*x3828))+((r02*x3822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3832=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3832.valid){
continue;
}
CheckValue<IkReal> x3833 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3832.value)))+(x3833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3834=IKcos(j4);
IkReal x3835=IKsin(j4);
IkReal x3836=(cj5*r00);
IkReal x3837=(cj5*r10);
IkReal x3838=(r21*sj5);
IkReal x3839=((1.0)*cj2);
IkReal x3840=(cj5*r20);
IkReal x3841=((1.0)*x3834);
IkReal x3842=((1.0)*x3835);
IkReal x3843=(sj5*x3835);
IkReal x3844=(sj5*x3834);
evalcond[0]=(((r12*x3835))+(((-1.0)*x3837*x3841))+((r11*x3844)));
evalcond[1]=(((x3835*x3838))+(((-1.0)*x3840*x3842))+(((-1.0)*r22*x3841)));
evalcond[2]=((((-1.0)*r02*x3841))+((r01*x3843))+(((-1.0)*x3836*x3842)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3841))+(((-1.0)*x3837*x3842))+((r11*x3843)));
evalcond[4]=(((x3834*x3838))+(((-1.0)*x3840*x3841))+((sj1*sj2))+(((-1.0)*cj1*x3839))+((r22*x3835)));
evalcond[5]=(((r02*x3835))+(((-1.0)*cj1*sj2))+((r01*x3844))+(((-1.0)*sj1*x3839))+(((-1.0)*x3836*x3841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3845=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3845;
j4eval[1]=IKsign(x3845);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3846=((1.0)*cj5);
IkReal x3847=((((-1.0)*r21*x3846))+(((-1.0)*r20*sj5)));
j4eval[0]=x3847;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3846))))));
j4eval[2]=IKsign(x3847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3848=cj5*cj5;
IkReal x3849=r11*r11;
IkReal x3850=(r11*sj5);
IkReal x3851=(cj5*r10);
IkReal x3852=((r12*r12)+((x3848*(r10*r10)))+x3849+(((-1.0)*x3848*x3849))+(((-2.0)*x3850*x3851)));
j4eval[0]=x3852;
j4eval[1]=IKsign(x3852);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3851))+x3850))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3853=cj5*cj5;
IkReal x3854=r11*r11;
IkReal x3855=(cj5*r10);
IkReal x3856=(r11*sj5);
CheckValue<IkReal> x3857 = IKatan2WithCheck(IkReal(((((-1.0)*x3855))+x3856)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3857.valid){
continue;
}
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3855*x3856))+((x3853*(r10*r10)))+(((-1.0)*x3853*x3854))+x3854)),-1);
if(!x3858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3857.value)+(((1.5707963267949)*(x3858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3859=IKcos(j4);
IkReal x3860=IKsin(j4);
IkReal x3861=(cj5*r00);
IkReal x3862=(cj5*r10);
IkReal x3863=(r21*sj5);
IkReal x3864=(cj5*r20);
IkReal x3865=((1.0)*x3859);
IkReal x3866=((1.0)*x3860);
IkReal x3867=(sj5*x3860);
IkReal x3868=(sj5*x3859);
evalcond[0]=(((r11*x3868))+(((-1.0)*x3862*x3865))+((r12*x3860)));
evalcond[1]=(((x3860*x3863))+(((-1.0)*x3864*x3866))+(((-1.0)*r22*x3865)));
evalcond[2]=((((-1.0)*r02*x3865))+(((-1.0)*x3861*x3866))+((r01*x3867)));
evalcond[3]=((-1.0)+((r11*x3867))+(((-1.0)*r12*x3865))+(((-1.0)*x3862*x3866)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3861*x3865))+((r02*x3860))+((cj1*sj2))+((r01*x3868)));
evalcond[5]=((((-1.0)*x3864*x3865))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3859*x3863))+((r22*x3860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3869=((1.0)*cj5);
CheckValue<IkReal> x3870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3869))+(((-1.0)*r20*sj5)))),-1);
if(!x3870.valid){
continue;
}
CheckValue<IkReal> x3871 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3870.value)))+(x3871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3872=IKcos(j4);
IkReal x3873=IKsin(j4);
IkReal x3874=(cj5*r00);
IkReal x3875=(cj5*r10);
IkReal x3876=(r21*sj5);
IkReal x3877=(cj5*r20);
IkReal x3878=((1.0)*x3872);
IkReal x3879=((1.0)*x3873);
IkReal x3880=(sj5*x3873);
IkReal x3881=(sj5*x3872);
evalcond[0]=(((r11*x3881))+(((-1.0)*x3875*x3878))+((r12*x3873)));
evalcond[1]=((((-1.0)*x3877*x3879))+((x3873*x3876))+(((-1.0)*r22*x3878)));
evalcond[2]=((((-1.0)*x3874*x3879))+(((-1.0)*r02*x3878))+((r01*x3880)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3878))+((r11*x3880))+(((-1.0)*x3875*x3879)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3874*x3878))+((r01*x3881))+((r02*x3873)));
evalcond[5]=((((-1.0)*x3877*x3878))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3872*x3876))+((r22*x3873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3882 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3882.valid){
continue;
}
CheckValue<IkReal> x3883=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3882.value)+(((1.5707963267949)*(x3883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3884=IKcos(j4);
IkReal x3885=IKsin(j4);
IkReal x3886=(cj5*r00);
IkReal x3887=(cj5*r10);
IkReal x3888=(r21*sj5);
IkReal x3889=(cj5*r20);
IkReal x3890=((1.0)*x3884);
IkReal x3891=((1.0)*x3885);
IkReal x3892=(sj5*x3885);
IkReal x3893=(sj5*x3884);
evalcond[0]=(((r12*x3885))+(((-1.0)*x3887*x3890))+((r11*x3893)));
evalcond[1]=((((-1.0)*x3889*x3891))+(((-1.0)*r22*x3890))+((x3885*x3888)));
evalcond[2]=(((r01*x3892))+(((-1.0)*x3886*x3891))+(((-1.0)*r02*x3890)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3890))+(((-1.0)*x3887*x3891))+((r11*x3892)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3893))+((r02*x3885))+(((-1.0)*x3886*x3890)));
evalcond[5]=((((-1.0)*x3889*x3890))+((r22*x3885))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3884*x3888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3894=((-1.0)*r00);
IkReal x3896 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3896)==0){
continue;
}
IkReal x3895=pow(x3896,-0.5);
CheckValue<IkReal> x3897 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3894),IKFAST_ATAN2_MAGTHRESH);
if(!x3897.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3897.value));
IkReal gconst109=(r01*x3895);
IkReal gconst110=(x3894*x3895);
CheckValue<IkReal> x3898 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3898.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3898.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3899=((-1.0)*r00);
IkReal x3900=x3895;
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3899),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
IkReal x3901=((-1.0)*(x3902.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3901;
IkReal gconst108=x3901;
IkReal gconst109=(r01*x3900);
IkReal gconst110=(x3899*x3900);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3903=((1.0)*sj0);
IkReal x3904=((1.0)*gconst109);
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3903))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3904))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x3903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
CheckValue<IkReal> x3906=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst110*r21))+(((-1.0)*r20*x3904)))),-1);
if(!x3906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3905.value)+(((1.5707963267949)*(x3906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3907=IKsin(j4);
IkReal x3908=IKcos(j4);
IkReal x3909=(gconst109*r21);
IkReal x3910=((1.0)*cj2);
IkReal x3911=((1.0)*sj0);
IkReal x3912=(cj1*sj2);
IkReal x3913=((1.0)*x3908);
IkReal x3914=(gconst109*x3907);
IkReal x3915=(gconst109*x3908);
IkReal x3916=((1.0)*gconst110*x3907);
evalcond[0]=((((-1.0)*r20*x3916))+(((-1.0)*r22*x3913))+((x3907*x3909)));
evalcond[1]=(cj0+((r11*x3914))+(((-1.0)*r12*x3913))+(((-1.0)*r10*x3916)));
evalcond[2]=((((-1.0)*x3911))+(((-1.0)*r02*x3913))+((r01*x3914))+(((-1.0)*r00*x3916)));
evalcond[3]=((((-1.0)*gconst110*r20*x3913))+((r22*x3907))+((sj1*sj2))+((x3908*x3909))+(((-1.0)*cj1*x3910)));
evalcond[4]=((((-1.0)*gconst110*r00*x3913))+(((-1.0)*cj0*sj1*x3910))+((r01*x3915))+((r02*x3907))+(((-1.0)*cj0*x3912)));
evalcond[5]=((((-1.0)*x3911*x3912))+((r12*x3907))+((r11*x3915))+(((-1.0)*gconst110*r10*x3913))+(((-1.0)*sj0*sj1*x3910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3917=((1.0)*gconst110);
CheckValue<IkReal> x3918 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3918.valid){
continue;
}
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3917)))),-1);
if(!x3919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3918.value)+(((1.5707963267949)*(x3919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3920=IKsin(j4);
IkReal x3921=IKcos(j4);
IkReal x3922=(gconst109*r21);
IkReal x3923=((1.0)*cj2);
IkReal x3924=((1.0)*sj0);
IkReal x3925=(cj1*sj2);
IkReal x3926=((1.0)*x3921);
IkReal x3927=(gconst109*x3920);
IkReal x3928=(gconst109*x3921);
IkReal x3929=((1.0)*gconst110*x3920);
evalcond[0]=(((x3920*x3922))+(((-1.0)*r20*x3929))+(((-1.0)*r22*x3926)));
evalcond[1]=(((r11*x3927))+(((-1.0)*r10*x3929))+cj0+(((-1.0)*r12*x3926)));
evalcond[2]=((((-1.0)*x3924))+(((-1.0)*r02*x3926))+(((-1.0)*r00*x3929))+((r01*x3927)));
evalcond[3]=(((x3921*x3922))+(((-1.0)*gconst110*r20*x3926))+(((-1.0)*cj1*x3923))+((sj1*sj2))+((r22*x3920)));
evalcond[4]=((((-1.0)*cj0*x3925))+(((-1.0)*gconst110*r00*x3926))+((r02*x3920))+(((-1.0)*cj0*sj1*x3923))+((r01*x3928)));
evalcond[5]=(((r11*x3928))+((r12*x3920))+(((-1.0)*x3924*x3925))+(((-1.0)*sj0*sj1*x3923))+(((-1.0)*gconst110*r10*x3926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3930=((-1.0)*r01);
IkReal x3932 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3932)==0){
continue;
}
IkReal x3931=pow(x3932,-0.5);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal(x3930),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3933.value))));
IkReal gconst112=(x3930*x3931);
IkReal gconst113=((1.0)*r00*x3931);
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3934.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3935=((-1.0)*r01);
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(x3935),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
IkReal x3936=((1.0)*(x3938.value));
IkReal x3937=x3931;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3936)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3936)));
IkReal gconst112=(x3935*x3937);
IkReal gconst113=((1.0)*r00*x3937);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3939=((-1.0)*r01);
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(x3939),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
IkReal x3940=((1.0)*(x3942.value));
IkReal x3941=x3931;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3940)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3940)));
IkReal gconst112=(x3939*x3941);
IkReal gconst113=((1.0)*r00*x3941);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3943=((-1.0)*r01);
CheckValue<IkReal> x3946 = IKatan2WithCheck(IkReal(x3943),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3946.valid){
continue;
}
IkReal x3944=((1.0)*(x3946.value));
IkReal x3945=x3931;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3944)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3944)));
IkReal gconst112=(x3943*x3945);
IkReal gconst113=((1.0)*r00*x3945);
IkReal x3947=r02*r02;
IkReal x3948=(r12*sj0);
IkReal x3949=((1.0)*cj0);
IkReal x3950=x3931;
j4eval[0]=((IKabs(((((-1.0)*x3948))+(((-1.0)*r02*x3949)))))+(IKabs(((((-1.0)*x3949*x3950))+((r02*x3948*x3950))+((cj0*x3947*x3950))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3951=((1.0)*sj0);
IkReal x3952=((1.0)*gconst112);
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3951)))),IkReal(((((-1.0)*cj0*r01*x3952))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
CheckValue<IkReal> x3954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3952)))),-1);
if(!x3954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3953.value)+(((1.5707963267949)*(x3954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3955=IKsin(j4);
IkReal x3956=IKcos(j4);
IkReal x3957=(gconst113*r20);
IkReal x3958=(gconst112*r21);
IkReal x3959=((1.0)*cj2);
IkReal x3960=(gconst113*r00);
IkReal x3961=(gconst113*r10);
IkReal x3962=((1.0)*sj0);
IkReal x3963=(cj1*sj2);
IkReal x3964=((1.0)*x3956);
IkReal x3965=((1.0)*x3955);
IkReal x3966=(gconst112*x3956);
IkReal x3967=(gconst112*x3955);
evalcond[0]=((((-1.0)*r22*x3964))+(((-1.0)*x3957*x3965))+((x3955*x3958)));
evalcond[1]=(cj0+((r11*x3967))+(((-1.0)*x3961*x3965))+(((-1.0)*r12*x3964)));
evalcond[2]=((((-1.0)*x3962))+(((-1.0)*r02*x3964))+(((-1.0)*x3960*x3965))+((r01*x3967)));
evalcond[3]=(((x3956*x3958))+((sj1*sj2))+(((-1.0)*cj1*x3959))+(((-1.0)*x3957*x3964))+((r22*x3955)));
evalcond[4]=((((-1.0)*cj0*x3963))+(((-1.0)*cj0*sj1*x3959))+(((-1.0)*x3960*x3964))+((r02*x3955))+((r01*x3966)));
evalcond[5]=((((-1.0)*x3962*x3963))+((r11*x3966))+(((-1.0)*x3961*x3964))+(((-1.0)*sj0*sj1*x3959))+((r12*x3955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3968=((1.0)*gconst113);
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
CheckValue<IkReal> x3970=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x3968)))),-1);
if(!x3970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3969.value)+(((1.5707963267949)*(x3970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3971=IKsin(j4);
IkReal x3972=IKcos(j4);
IkReal x3973=(gconst113*r20);
IkReal x3974=(gconst112*r21);
IkReal x3975=((1.0)*cj2);
IkReal x3976=(gconst113*r00);
IkReal x3977=(gconst113*r10);
IkReal x3978=((1.0)*sj0);
IkReal x3979=(cj1*sj2);
IkReal x3980=((1.0)*x3972);
IkReal x3981=((1.0)*x3971);
IkReal x3982=(gconst112*x3972);
IkReal x3983=(gconst112*x3971);
evalcond[0]=((((-1.0)*x3973*x3981))+((x3971*x3974))+(((-1.0)*r22*x3980)));
evalcond[1]=((((-1.0)*r12*x3980))+((r11*x3983))+cj0+(((-1.0)*x3977*x3981)));
evalcond[2]=((((-1.0)*x3978))+(((-1.0)*x3976*x3981))+((r01*x3983))+(((-1.0)*r02*x3980)));
evalcond[3]=((((-1.0)*cj1*x3975))+(((-1.0)*x3973*x3980))+((sj1*sj2))+((r22*x3971))+((x3972*x3974)));
evalcond[4]=(((r02*x3971))+(((-1.0)*x3976*x3980))+((r01*x3982))+(((-1.0)*cj0*sj1*x3975))+(((-1.0)*cj0*x3979)));
evalcond[5]=(((r11*x3982))+(((-1.0)*x3977*x3980))+(((-1.0)*x3978*x3979))+((r12*x3971))+(((-1.0)*sj0*sj1*x3975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3984=((1.0)*gconst113);
CheckValue<IkReal> x3985 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x3984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3985.valid){
continue;
}
CheckValue<IkReal> x3986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x3984)))),-1);
if(!x3986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3985.value)+(((1.5707963267949)*(x3986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3987=IKsin(j4);
IkReal x3988=IKcos(j4);
IkReal x3989=(gconst113*r20);
IkReal x3990=(gconst112*r21);
IkReal x3991=((1.0)*cj2);
IkReal x3992=(gconst113*r00);
IkReal x3993=(gconst113*r10);
IkReal x3994=((1.0)*sj0);
IkReal x3995=(cj1*sj2);
IkReal x3996=((1.0)*x3988);
IkReal x3997=((1.0)*x3987);
IkReal x3998=(gconst112*x3988);
IkReal x3999=(gconst112*x3987);
evalcond[0]=(((x3987*x3990))+(((-1.0)*x3989*x3997))+(((-1.0)*r22*x3996)));
evalcond[1]=((((-1.0)*x3993*x3997))+cj0+(((-1.0)*r12*x3996))+((r11*x3999)));
evalcond[2]=((((-1.0)*x3994))+(((-1.0)*r02*x3996))+(((-1.0)*x3992*x3997))+((r01*x3999)));
evalcond[3]=((((-1.0)*x3989*x3996))+((sj1*sj2))+((x3988*x3990))+((r22*x3987))+(((-1.0)*cj1*x3991)));
evalcond[4]=((((-1.0)*cj0*sj1*x3991))+(((-1.0)*x3992*x3996))+(((-1.0)*cj0*x3995))+((r01*x3998))+((r02*x3987)));
evalcond[5]=((((-1.0)*x3993*x3996))+((r11*x3998))+(((-1.0)*sj0*sj1*x3991))+(((-1.0)*x3994*x3995))+((r12*x3987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4000=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4000;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4001=((1.0)*cj5);
IkReal x4002=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4001)));
j4eval[0]=x4002;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4001))))));
j4eval[2]=IKsign(x4002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4003=cj5*cj5;
IkReal x4004=r01*r01;
IkReal x4005=(cj5*r00);
IkReal x4006=(r01*sj5);
IkReal x4007=((((-1.0)*x4003*x4004))+x4004+((x4003*(r00*r00)))+(((-2.0)*x4005*x4006))+(r02*r02));
j4eval[0]=x4007;
j4eval[1]=IKsign(x4007);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4005))+x4006))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4008=cj5*cj5;
IkReal x4009=r01*r01;
IkReal x4010=(r01*sj5);
IkReal x4011=(cj5*r00);
CheckValue<IkReal> x4012=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4010*x4011))+(((-1.0)*x4008*x4009))+((x4008*(r00*r00)))+x4009+(r02*r02))),-1);
if(!x4012.valid){
continue;
}
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal(((((-1.0)*x4011))+x4010)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4012.value)))+(x4013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4014=IKcos(j4);
IkReal x4015=IKsin(j4);
IkReal x4016=(cj5*r00);
IkReal x4017=(cj5*r10);
IkReal x4018=(r21*sj5);
IkReal x4019=((1.0)*cj2);
IkReal x4020=(cj5*r20);
IkReal x4021=((1.0)*x4014);
IkReal x4022=((1.0)*x4015);
IkReal x4023=(sj5*x4015);
IkReal x4024=(sj5*x4014);
evalcond[0]=(((r02*x4015))+((r01*x4024))+(((-1.0)*x4016*x4021)));
evalcond[1]=((((-1.0)*r22*x4021))+((x4015*x4018))+(((-1.0)*x4020*x4022)));
evalcond[2]=((((-1.0)*r12*x4021))+((r11*x4023))+(((-1.0)*x4017*x4022)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4021))+((r01*x4023))+(((-1.0)*x4016*x4022)));
evalcond[4]=((((-1.0)*cj1*x4019))+((sj1*sj2))+((r22*x4015))+((x4014*x4018))+(((-1.0)*x4020*x4021)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x4015))+(((-1.0)*sj1*x4019))+((r11*x4024))+(((-1.0)*x4017*x4021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4025=((1.0)*cj5);
CheckValue<IkReal> x4026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4025))+(((-1.0)*r10*sj5)))),-1);
if(!x4026.valid){
continue;
}
CheckValue<IkReal> x4027 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4026.value)))+(x4027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4028=IKcos(j4);
IkReal x4029=IKsin(j4);
IkReal x4030=(cj5*r00);
IkReal x4031=(cj5*r10);
IkReal x4032=(r21*sj5);
IkReal x4033=((1.0)*cj2);
IkReal x4034=(cj5*r20);
IkReal x4035=((1.0)*x4028);
IkReal x4036=((1.0)*x4029);
IkReal x4037=(sj5*x4029);
IkReal x4038=(sj5*x4028);
evalcond[0]=((((-1.0)*x4030*x4035))+((r01*x4038))+((r02*x4029)));
evalcond[1]=((((-1.0)*x4034*x4036))+(((-1.0)*r22*x4035))+((x4029*x4032)));
evalcond[2]=((((-1.0)*x4031*x4036))+(((-1.0)*r12*x4035))+((r11*x4037)));
evalcond[3]=((-1.0)+(((-1.0)*x4030*x4036))+((r01*x4037))+(((-1.0)*r02*x4035)));
evalcond[4]=((((-1.0)*x4034*x4035))+((x4028*x4032))+(((-1.0)*cj1*x4033))+((sj1*sj2))+((r22*x4029)));
evalcond[5]=((((-1.0)*x4031*x4035))+(((-1.0)*cj1*sj2))+((r12*x4029))+((r11*x4038))+(((-1.0)*sj1*x4033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4039=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4039.valid){
continue;
}
CheckValue<IkReal> x4040 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4039.value)))+(x4040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4041=IKcos(j4);
IkReal x4042=IKsin(j4);
IkReal x4043=(cj5*r00);
IkReal x4044=(cj5*r10);
IkReal x4045=(r21*sj5);
IkReal x4046=((1.0)*cj2);
IkReal x4047=(cj5*r20);
IkReal x4048=((1.0)*x4041);
IkReal x4049=((1.0)*x4042);
IkReal x4050=(sj5*x4042);
IkReal x4051=(sj5*x4041);
evalcond[0]=((((-1.0)*x4043*x4048))+((r02*x4042))+((r01*x4051)));
evalcond[1]=((((-1.0)*x4047*x4049))+((x4042*x4045))+(((-1.0)*r22*x4048)));
evalcond[2]=((((-1.0)*x4044*x4049))+(((-1.0)*r12*x4048))+((r11*x4050)));
evalcond[3]=((-1.0)+(((-1.0)*x4043*x4049))+(((-1.0)*r02*x4048))+((r01*x4050)));
evalcond[4]=(((r22*x4042))+((x4041*x4045))+(((-1.0)*x4047*x4048))+((sj1*sj2))+(((-1.0)*cj1*x4046)));
evalcond[5]=((((-1.0)*sj1*x4046))+(((-1.0)*x4044*x4048))+(((-1.0)*cj1*sj2))+((r11*x4051))+((r12*x4042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4052=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4052;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4053=((1.0)*cj5);
IkReal x4054=((((-1.0)*r21*x4053))+(((-1.0)*r20*sj5)));
j4eval[0]=x4054;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4053))))));
j4eval[2]=IKsign(x4054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4055=cj5*cj5;
IkReal x4056=r01*r01;
IkReal x4057=(r01*sj5);
IkReal x4058=(cj5*r00);
IkReal x4059=((((-1.0)*x4055*(r00*r00)))+(((2.0)*x4057*x4058))+(((-1.0)*(r02*r02)))+((x4055*x4056))+(((-1.0)*x4056)));
j4eval[0]=x4059;
j4eval[1]=IKsign(x4059);
j4eval[2]=((IKabs((x4057+(((-1.0)*x4058)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4060=cj5*cj5;
IkReal x4061=r01*r01;
IkReal x4062=(r01*sj5);
IkReal x4063=(cj5*r00);
CheckValue<IkReal> x4064 = IKatan2WithCheck(IkReal((x4062+(((-1.0)*x4063)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4064.valid){
continue;
}
CheckValue<IkReal> x4065=IKPowWithIntegerCheck(IKsign((((x4060*x4061))+(((2.0)*x4062*x4063))+(((-1.0)*(r02*r02)))+(((-1.0)*x4061))+(((-1.0)*x4060*(r00*r00))))),-1);
if(!x4065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4064.value)+(((1.5707963267949)*(x4065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4066=IKcos(j4);
IkReal x4067=IKsin(j4);
IkReal x4068=(cj5*r00);
IkReal x4069=(cj5*r10);
IkReal x4070=(r21*sj5);
IkReal x4071=(cj5*r20);
IkReal x4072=((1.0)*x4066);
IkReal x4073=((1.0)*x4067);
IkReal x4074=(sj5*x4067);
IkReal x4075=(sj5*x4066);
evalcond[0]=((((-1.0)*x4068*x4072))+((r02*x4067))+((r01*x4075)));
evalcond[1]=((((-1.0)*x4071*x4073))+(((-1.0)*r22*x4072))+((x4067*x4070)));
evalcond[2]=((((-1.0)*x4069*x4073))+(((-1.0)*r12*x4072))+((r11*x4074)));
evalcond[3]=((1.0)+(((-1.0)*x4068*x4073))+(((-1.0)*r02*x4072))+((r01*x4074)));
evalcond[4]=((((-1.0)*x4069*x4072))+((cj2*sj1))+((cj1*sj2))+((r12*x4067))+((r11*x4075)));
evalcond[5]=((((-1.0)*x4071*x4072))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4066*x4070))+((r22*x4067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4076=((1.0)*cj5);
CheckValue<IkReal> x4077 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4076))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4077.valid){
continue;
}
CheckValue<IkReal> x4078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4076))+(((-1.0)*r20*sj5)))),-1);
if(!x4078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4077.value)+(((1.5707963267949)*(x4078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4079=IKcos(j4);
IkReal x4080=IKsin(j4);
IkReal x4081=(cj5*r00);
IkReal x4082=(cj5*r10);
IkReal x4083=(r21*sj5);
IkReal x4084=(cj5*r20);
IkReal x4085=((1.0)*x4079);
IkReal x4086=((1.0)*x4080);
IkReal x4087=(sj5*x4080);
IkReal x4088=(sj5*x4079);
evalcond[0]=(((r01*x4088))+((r02*x4080))+(((-1.0)*x4081*x4085)));
evalcond[1]=(((x4080*x4083))+(((-1.0)*r22*x4085))+(((-1.0)*x4084*x4086)));
evalcond[2]=((((-1.0)*r12*x4085))+(((-1.0)*x4082*x4086))+((r11*x4087)));
evalcond[3]=((1.0)+((r01*x4087))+(((-1.0)*r02*x4085))+(((-1.0)*x4081*x4086)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4080))+(((-1.0)*x4082*x4085))+((r11*x4088)));
evalcond[5]=(((x4079*x4083))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4084*x4085))+((r22*x4080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
CheckValue<IkReal> x4090=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4089.value)+(((1.5707963267949)*(x4090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4091=IKcos(j4);
IkReal x4092=IKsin(j4);
IkReal x4093=(cj5*r00);
IkReal x4094=(cj5*r10);
IkReal x4095=(r21*sj5);
IkReal x4096=(cj5*r20);
IkReal x4097=((1.0)*x4091);
IkReal x4098=((1.0)*x4092);
IkReal x4099=(sj5*x4092);
IkReal x4100=(sj5*x4091);
evalcond[0]=((((-1.0)*x4093*x4097))+((r02*x4092))+((r01*x4100)));
evalcond[1]=((((-1.0)*r22*x4097))+(((-1.0)*x4096*x4098))+((x4092*x4095)));
evalcond[2]=((((-1.0)*r12*x4097))+((r11*x4099))+(((-1.0)*x4094*x4098)));
evalcond[3]=((1.0)+((r01*x4099))+(((-1.0)*x4093*x4098))+(((-1.0)*r02*x4097)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4092))+((r11*x4100))+(((-1.0)*x4094*x4097)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4092))+(((-1.0)*x4096*x4097))+((x4091*x4095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4101=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4101);
rxp1_1=(px*r21);
rxp1_2=(r11*x4101);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4102=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4102);
rxp1_1=(px*r21);
rxp1_2=(r11*x4102);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4103=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4103);
rxp1_1=(px*r21);
rxp1_2=(r11*x4103);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4106=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4106.valid){
continue;
}
IkReal x4104=x4106.value;
IkReal x4105=(sj0*x4104);
cj4array[0]=(((cj1*sj2*x4105))+((cj2*sj1*x4105)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4107=IKsin(j4);
IkReal x4108=IKcos(j4);
IkReal x4109=(r21*sj5);
IkReal x4110=((1.0)*cj5*r20);
evalcond[0]=(r02*x4107);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4108)));
evalcond[2]=(((x4107*x4109))+(((-1.0)*x4107*x4110)));
evalcond[3]=((((-1.0)*cj5*r10*x4107))+((r11*sj5*x4107)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4108*x4110))+((x4108*x4109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4112=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4112.valid){
continue;
}
IkReal x4111=x4112.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4111))+((cj1*cj2*x4111)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4113=IKsin(j4);
IkReal x4114=IKcos(j4);
IkReal x4115=((1.0)*sj0);
IkReal x4116=((1.0)*cj5);
IkReal x4117=(sj5*x4113);
evalcond[0]=(r02*x4113);
evalcond[1]=((((-1.0)*r02*x4114))+(((-1.0)*x4115)));
evalcond[2]=(((r21*x4117))+(((-1.0)*r20*x4113*x4116)));
evalcond[3]=((((-1.0)*r10*x4113*x4116))+((r11*x4117)));
evalcond[4]=(((r11*sj5*x4114))+(((-1.0)*cj2*sj1*x4115))+(((-1.0)*r10*x4114*x4116))+(((-1.0)*cj1*sj2*x4115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4118=IKPowWithIntegerCheck(r02,-1);
if(!x4118.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4118.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4119=IKsin(j4);
IkReal x4120=IKcos(j4);
IkReal x4121=((1.0)*cj1);
IkReal x4122=(r21*sj5);
IkReal x4123=((1.0)*cj5);
IkReal x4124=(r11*sj5);
evalcond[0]=(r02*x4119);
evalcond[1]=(((x4119*x4122))+(((-1.0)*r20*x4119*x4123)));
evalcond[2]=((((-1.0)*r10*x4119*x4123))+((x4119*x4124)));
evalcond[3]=(((x4120*x4122))+(((-1.0)*cj2*x4121))+(((-1.0)*r20*x4120*x4123))+((sj1*sj2)));
evalcond[4]=(((x4120*x4124))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4120*x4123))+(((-1.0)*sj0*sj2*x4121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4125=((1.0)*sj0);
IkReal x4126=((1.0)*cj0);
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4125))+(((-1.0)*r02*x4126)))),IkReal(((((-1.0)*r11*sj5*x4125))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
CheckValue<IkReal> x4128=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4127.value)+(((1.5707963267949)*(x4128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4129=IKsin(j4);
IkReal x4130=IKcos(j4);
IkReal x4131=(cj5*r00);
IkReal x4132=(cj5*r10);
IkReal x4133=(r21*sj5);
IkReal x4134=((1.0)*cj2);
IkReal x4135=((1.0)*sj0);
IkReal x4136=(cj1*sj2);
IkReal x4137=(cj5*r20);
IkReal x4138=((1.0)*x4130);
IkReal x4139=((1.0)*x4129);
IkReal x4140=(sj5*x4129);
IkReal x4141=(sj5*x4130);
evalcond[0]=(((x4129*x4133))+(((-1.0)*x4137*x4139))+(((-1.0)*r22*x4138)));
evalcond[1]=(cj0+((r11*x4140))+(((-1.0)*r12*x4138))+(((-1.0)*x4132*x4139)));
evalcond[2]=((((-1.0)*x4131*x4139))+((r01*x4140))+(((-1.0)*r02*x4138))+(((-1.0)*x4135)));
evalcond[3]=(((x4130*x4133))+((sj1*sj2))+(((-1.0)*cj1*x4134))+((r22*x4129))+(((-1.0)*x4137*x4138)));
evalcond[4]=((((-1.0)*cj0*x4136))+(((-1.0)*x4131*x4138))+((r01*x4141))+((r02*x4129))+(((-1.0)*cj0*sj1*x4134)));
evalcond[5]=(((r12*x4129))+(((-1.0)*sj0*sj1*x4134))+(((-1.0)*x4135*x4136))+((r11*x4141))+(((-1.0)*x4132*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4142=((1.0)*cj5);
CheckValue<IkReal> x4143 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4142))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4143.valid){
continue;
}
CheckValue<IkReal> x4144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4142)))),-1);
if(!x4144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4143.value)+(((1.5707963267949)*(x4144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4145=IKsin(j4);
IkReal x4146=IKcos(j4);
IkReal x4147=(cj5*r00);
IkReal x4148=(cj5*r10);
IkReal x4149=(r21*sj5);
IkReal x4150=((1.0)*cj2);
IkReal x4151=((1.0)*sj0);
IkReal x4152=(cj1*sj2);
IkReal x4153=(cj5*r20);
IkReal x4154=((1.0)*x4146);
IkReal x4155=((1.0)*x4145);
IkReal x4156=(sj5*x4145);
IkReal x4157=(sj5*x4146);
evalcond[0]=(((x4145*x4149))+(((-1.0)*x4153*x4155))+(((-1.0)*r22*x4154)));
evalcond[1]=(cj0+(((-1.0)*x4148*x4155))+((r11*x4156))+(((-1.0)*r12*x4154)));
evalcond[2]=((((-1.0)*x4147*x4155))+((r01*x4156))+(((-1.0)*r02*x4154))+(((-1.0)*x4151)));
evalcond[3]=((((-1.0)*x4153*x4154))+((sj1*sj2))+(((-1.0)*cj1*x4150))+((r22*x4145))+((x4146*x4149)));
evalcond[4]=(((r02*x4145))+(((-1.0)*x4147*x4154))+((r01*x4157))+(((-1.0)*cj0*sj1*x4150))+(((-1.0)*cj0*x4152)));
evalcond[5]=(((r12*x4145))+(((-1.0)*x4148*x4154))+((r11*x4157))+(((-1.0)*sj0*sj1*x4150))+(((-1.0)*x4151*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4158=((1.0)*cj5);
CheckValue<IkReal> x4159 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4159.valid){
continue;
}
CheckValue<IkReal> x4160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4158)))),-1);
if(!x4160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4159.value)+(((1.5707963267949)*(x4160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4161=IKsin(j4);
IkReal x4162=IKcos(j4);
IkReal x4163=(cj5*r00);
IkReal x4164=(cj5*r10);
IkReal x4165=(r21*sj5);
IkReal x4166=((1.0)*cj2);
IkReal x4167=((1.0)*sj0);
IkReal x4168=(cj1*sj2);
IkReal x4169=(cj5*r20);
IkReal x4170=((1.0)*x4162);
IkReal x4171=((1.0)*x4161);
IkReal x4172=(sj5*x4161);
IkReal x4173=(sj5*x4162);
evalcond[0]=((((-1.0)*x4169*x4171))+(((-1.0)*r22*x4170))+((x4161*x4165)));
evalcond[1]=(((r11*x4172))+cj0+(((-1.0)*x4164*x4171))+(((-1.0)*r12*x4170)));
evalcond[2]=((((-1.0)*x4167))+(((-1.0)*x4163*x4171))+((r01*x4172))+(((-1.0)*r02*x4170)));
evalcond[3]=(((r22*x4161))+(((-1.0)*cj1*x4166))+((sj1*sj2))+(((-1.0)*x4169*x4170))+((x4162*x4165)));
evalcond[4]=((((-1.0)*cj0*sj1*x4166))+(((-1.0)*x4163*x4170))+((r02*x4161))+(((-1.0)*cj0*x4168))+((r01*x4173)));
evalcond[5]=(((r11*x4173))+(((-1.0)*x4164*x4170))+((r12*x4161))+(((-1.0)*x4167*x4168))+(((-1.0)*sj0*sj1*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4174=r21*r21;
IkReal x4175=cj5*cj5;
IkReal x4176=(sj1*sj2);
IkReal x4177=(r21*sj5);
IkReal x4178=(cj1*cj2);
IkReal x4179=(cj5*r20);
CheckValue<IkReal> x4180=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4174))+(((-1.0)*(r22*r22)))+(((-1.0)*x4175*(r20*r20)))+(((2.0)*x4177*x4179))+((x4174*x4175)))),-1);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4178))+((r22*x4176)))),IkReal(((((-1.0)*x4177*x4178))+((x4178*x4179))+(((-1.0)*x4176*x4179))+((x4176*x4177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4180.value)))+(x4181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4182=IKsin(j4);
IkReal x4183=IKcos(j4);
IkReal x4184=(r21*sj5);
IkReal x4185=(cj5*r20);
IkReal x4186=((1.0)*x4183);
evalcond[0]=((((-1.0)*r22*x4186))+((x4182*x4184))+(((-1.0)*x4182*x4185)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4182))+((x4183*x4184))+(((-1.0)*x4185*x4186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4187=(cj5*sj4);
IkReal x4188=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4187))+((r01*x4188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4188))+((r10*x4187))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4187))+((r01*x4188))))+IKsqr(((((-1.0)*r11*x4188))+((r10*x4187))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4187))+((r01*x4188))), ((((-1.0)*r11*x4188))+((r10*x4187))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4189=IKcos(j0);
IkReal x4190=IKsin(j0);
IkReal x4191=(cj5*r01);
IkReal x4192=(r11*sj5);
IkReal x4193=((1.0)*sj5);
IkReal x4194=((1.0)*cj5);
IkReal x4195=((0.1157)*sj5);
IkReal x4196=((1.0)*cj2);
IkReal x4197=((0.5723)*sj2);
IkReal x4198=((1.0)*cj4);
IkReal x4199=(r01*sj5);
IkReal x4200=((0.5723)*cj2);
IkReal x4201=((1.0)*cj1*sj2);
IkReal x4202=(cj4*x4194);
IkReal x4203=(sj1*x4189);
IkReal x4204=(cj1*x4190);
IkReal x4205=(cj1*x4189);
IkReal x4206=(sj1*x4190);
evalcond[0]=((((-1.0)*r12*x4198))+x4189+((sj4*x4192))+(((-1.0)*r10*sj4*x4194)));
evalcond[1]=((((-1.0)*r00*sj4*x4194))+(((-1.0)*x4190))+(((-1.0)*r02*x4198))+((sj4*x4199)));
evalcond[2]=((((-1.0)*r00*x4193))+((sj2*x4203))+(((-1.0)*x4191))+(((-1.0)*x4196*x4205)));
evalcond[3]=((((-1.0)*r11*x4194))+((sj2*x4206))+(((-1.0)*x4196*x4204))+(((-1.0)*r10*x4193)));
evalcond[4]=((((-1.0)*r00*x4202))+((r02*sj4))+(((-1.0)*x4196*x4203))+((cj4*x4199))+(((-1.0)*x4189*x4201)));
evalcond[5]=((((-1.0)*r10*x4202))+(((-1.0)*x4190*x4201))+((r12*sj4))+(((-1.0)*x4196*x4206))+((cj4*x4192)));
evalcond[6]=((((-1.0)*r00*x4195))+(((-0.163941)*x4190))+(((-1.0)*x4197*x4203))+(((-1.0)*px))+(((0.612)*x4205))+(((-0.1157)*x4191))+((x4200*x4205)));
evalcond[7]=((((0.163941)*x4189))+(((-1.0)*x4197*x4206))+(((-1.0)*py))+(((0.612)*x4204))+((x4200*x4204))+(((-0.1157)*cj5*r11))+(((-1.0)*r10*x4195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4207 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4207.valid){
continue;
}
CheckValue<IkReal> x4208=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4208.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4207.value)+(((1.5707963267949)*(x4208.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4209=IKcos(j0);
IkReal x4210=IKsin(j0);
IkReal x4211=(cj5*r01);
IkReal x4212=(sj1*sj2);
IkReal x4213=(cj5*r11);
IkReal x4214=(r10*sj5);
IkReal x4215=(r00*sj5);
IkReal x4216=(cj1*cj2);
IkReal x4217=((0.5723)*x4210);
IkReal x4218=(cj1*x4210);
IkReal x4219=((0.5723)*x4209);
evalcond[0]=(((x4209*x4212))+(((-1.0)*x4209*x4216))+(((-1.0)*x4211))+(((-1.0)*x4215)));
evalcond[1]=((((-1.0)*x4210*x4216))+((x4210*x4212))+(((-1.0)*x4213))+(((-1.0)*x4214)));
evalcond[2]=((((-1.0)*x4212*x4219))+(((-0.1157)*x4215))+(((-0.1157)*x4211))+(((-1.0)*px))+(((0.612)*cj1*x4209))+((x4216*x4219))+(((-0.163941)*x4210)));
evalcond[3]=((((-1.0)*x4212*x4217))+(((0.612)*x4218))+(((-0.1157)*x4214))+(((-0.1157)*x4213))+(((-1.0)*py))+((x4216*x4217))+(((0.163941)*x4209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4220=((1.0)*cj5);
IkReal x4221=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4220)));
j4eval[0]=x4221;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4220)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4222=((1.0)*cj5);
IkReal x4223=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4222)));
j4eval[0]=x4223;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4222))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4224=((1.0)*sj0);
IkReal x4225=((1.0)*cj0);
IkReal x4226=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4226;
j4eval[1]=((IKabs(((((-1.0)*r12*x4224))+(((-1.0)*r02*x4225)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4224))+(((-1.0)*r01*sj5*x4225))))));
j4eval[2]=IKsign(x4226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4227=((-1.0)*r20);
IkReal x4229 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4229)==0){
continue;
}
IkReal x4228=pow(x4229,-0.5);
CheckValue<IkReal> x4230 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4227),IKFAST_ATAN2_MAGTHRESH);
if(!x4230.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4230.value));
IkReal gconst97=(r21*x4228);
IkReal gconst98=(x4227*x4228);
CheckValue<IkReal> x4231 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4231.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4231.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4232=((-1.0)*r20);
IkReal x4233=x4228;
CheckValue<IkReal> x4235 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4232),IKFAST_ATAN2_MAGTHRESH);
if(!x4235.valid){
continue;
}
IkReal x4234=((-1.0)*(x4235.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4234;
IkReal gconst96=x4234;
IkReal gconst97=(r21*x4233);
IkReal gconst98=(x4232*x4233);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4236=((-1.0)*r20);
IkReal x4237=x4228;
CheckValue<IkReal> x4239 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4236),IKFAST_ATAN2_MAGTHRESH);
if(!x4239.valid){
continue;
}
IkReal x4238=((-1.0)*(x4239.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4238;
IkReal gconst96=x4238;
IkReal gconst97=(r21*x4237);
IkReal gconst98=(x4236*x4237);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4240=((-1.0)*r20);
IkReal x4241=x4228;
CheckValue<IkReal> x4243 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4240),IKFAST_ATAN2_MAGTHRESH);
if(!x4243.valid){
continue;
}
IkReal x4242=((-1.0)*(x4243.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4242;
IkReal gconst96=x4242;
IkReal gconst97=(r21*x4241);
IkReal gconst98=(x4240*x4241);
IkReal x4244=((1.0)*(r22*r22));
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4244))),-1);
if(!x4248.valid){
continue;
}
IkReal x4245=x4248.value;
IkReal x4246=((1.0)*x4245);
IkReal x4247=((((-1.0)*x4244))+(((-1.0)*x4246*(r21*r21*r21*r21)))+(((-1.0)*x4246*(r20*r20*r20*r20)))+(((-2.0)*x4245*(r20*r20)*(r21*r21))));
j4eval[0]=x4247;
j4eval[1]=IKsign(x4247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4249=(cj1*cj2);
IkReal x4250=(gconst98*r20);
IkReal x4251=(sj1*sj2);
IkReal x4252=(gconst97*r21);
CheckValue<IkReal> x4253 = IKatan2WithCheck(IkReal((((r22*x4251))+(((-1.0)*r22*x4249)))),IkReal(((((-1.0)*x4250*x4251))+((x4249*x4250))+((x4251*x4252))+(((-1.0)*x4249*x4252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4253.valid){
continue;
}
CheckValue<IkReal> x4254=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4250*x4250)))+(((2.0)*x4250*x4252))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4252*x4252))))),-1);
if(!x4254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4253.value)+(((1.5707963267949)*(x4254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4255=IKsin(j4);
IkReal x4256=IKcos(j4);
IkReal x4257=(gconst98*r10);
IkReal x4258=(gconst97*r21);
IkReal x4259=(gconst98*r20);
IkReal x4260=((1.0)*cj2);
IkReal x4261=((1.0)*sj0);
IkReal x4262=(gconst98*r00);
IkReal x4263=(cj1*sj2);
IkReal x4264=((1.0)*x4256);
IkReal x4265=((1.0)*x4255);
IkReal x4266=(gconst97*x4255);
IkReal x4267=(gconst97*x4256);
evalcond[0]=((((-1.0)*x4259*x4265))+(((-1.0)*r22*x4264))+((x4255*x4258)));
evalcond[1]=((((-1.0)*r12*x4264))+((r11*x4266))+cj0+(((-1.0)*x4257*x4265)));
evalcond[2]=(((r01*x4266))+(((-1.0)*r02*x4264))+(((-1.0)*x4262*x4265))+(((-1.0)*x4261)));
evalcond[3]=(((r22*x4255))+(((-1.0)*x4259*x4264))+((sj1*sj2))+((x4256*x4258))+(((-1.0)*cj1*x4260)));
evalcond[4]=(((r01*x4267))+((r02*x4255))+(((-1.0)*cj0*x4263))+(((-1.0)*cj0*sj1*x4260))+(((-1.0)*x4262*x4264)));
evalcond[5]=(((r11*x4267))+(((-1.0)*sj0*sj1*x4260))+((r12*x4255))+(((-1.0)*x4261*x4263))+(((-1.0)*x4257*x4264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4268=((1.0)*gconst98);
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4268))+((gconst97*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4268))+(((-1.0)*gconst97*r10)))),-1);
if(!x4270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4269.value)+(((1.5707963267949)*(x4270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4271=IKsin(j4);
IkReal x4272=IKcos(j4);
IkReal x4273=(gconst98*r10);
IkReal x4274=(gconst97*r21);
IkReal x4275=(gconst98*r20);
IkReal x4276=((1.0)*cj2);
IkReal x4277=((1.0)*sj0);
IkReal x4278=(gconst98*r00);
IkReal x4279=(cj1*sj2);
IkReal x4280=((1.0)*x4272);
IkReal x4281=((1.0)*x4271);
IkReal x4282=(gconst97*x4271);
IkReal x4283=(gconst97*x4272);
evalcond[0]=((((-1.0)*x4275*x4281))+(((-1.0)*r22*x4280))+((x4271*x4274)));
evalcond[1]=((((-1.0)*x4273*x4281))+cj0+((r11*x4282))+(((-1.0)*r12*x4280)));
evalcond[2]=((((-1.0)*r02*x4280))+(((-1.0)*x4278*x4281))+(((-1.0)*x4277))+((r01*x4282)));
evalcond[3]=((((-1.0)*cj1*x4276))+(((-1.0)*x4275*x4280))+((sj1*sj2))+((x4272*x4274))+((r22*x4271)));
evalcond[4]=(((r02*x4271))+(((-1.0)*cj0*x4279))+(((-1.0)*x4278*x4280))+(((-1.0)*cj0*sj1*x4276))+((r01*x4283)));
evalcond[5]=((((-1.0)*x4273*x4280))+((r11*x4283))+((r12*x4271))+(((-1.0)*sj0*sj1*x4276))+(((-1.0)*x4277*x4279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4284=((1.0)*gconst98);
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4284))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
CheckValue<IkReal> x4286=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4284))+(((-1.0)*gconst97*r00)))),-1);
if(!x4286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4285.value)+(((1.5707963267949)*(x4286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4287=IKsin(j4);
IkReal x4288=IKcos(j4);
IkReal x4289=(gconst98*r10);
IkReal x4290=(gconst97*r21);
IkReal x4291=(gconst98*r20);
IkReal x4292=((1.0)*cj2);
IkReal x4293=((1.0)*sj0);
IkReal x4294=(gconst98*r00);
IkReal x4295=(cj1*sj2);
IkReal x4296=((1.0)*x4288);
IkReal x4297=((1.0)*x4287);
IkReal x4298=(gconst97*x4287);
IkReal x4299=(gconst97*x4288);
evalcond[0]=((((-1.0)*r22*x4296))+(((-1.0)*x4291*x4297))+((x4287*x4290)));
evalcond[1]=(cj0+(((-1.0)*x4289*x4297))+(((-1.0)*r12*x4296))+((r11*x4298)));
evalcond[2]=(((r01*x4298))+(((-1.0)*x4293))+(((-1.0)*x4294*x4297))+(((-1.0)*r02*x4296)));
evalcond[3]=(((r22*x4287))+(((-1.0)*x4291*x4296))+((x4288*x4290))+((sj1*sj2))+(((-1.0)*cj1*x4292)));
evalcond[4]=(((r01*x4299))+(((-1.0)*cj0*sj1*x4292))+((r02*x4287))+(((-1.0)*cj0*x4295))+(((-1.0)*x4294*x4296)));
evalcond[5]=(((r12*x4287))+(((-1.0)*x4289*x4296))+(((-1.0)*x4293*x4295))+((r11*x4299))+(((-1.0)*sj0*sj1*x4292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4300=((-1.0)*r21);
IkReal x4302 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4302)==0){
continue;
}
IkReal x4301=pow(x4302,-0.5);
CheckValue<IkReal> x4303 = IKatan2WithCheck(IkReal(x4300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4303.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4303.value))));
IkReal gconst100=(x4300*x4301);
IkReal gconst101=((1.0)*r20*x4301);
CheckValue<IkReal> x4304 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4304.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4304.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4305=((-1.0)*r21);
CheckValue<IkReal> x4308 = IKatan2WithCheck(IkReal(x4305),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4308.valid){
continue;
}
IkReal x4306=((1.0)*(x4308.value));
IkReal x4307=x4301;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4306)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4306)));
IkReal gconst100=(x4305*x4307);
IkReal gconst101=((1.0)*r20*x4307);
IkReal x4309=r22*r22;
IkReal x4310=((1.0)*x4309);
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(((-1.0)+x4309),-1);
if(!x4314.valid){
continue;
}
IkReal x4311=x4314.value;
if((((1.0)+(((-1.0)*x4310)))) < -0.00001)
continue;
IkReal x4312=IKsqrt(((1.0)+(((-1.0)*x4310))));
IkReal x4313=(cj0*x4311*x4312);
j4eval[0]=((IKabs(((((-1.0)*x4310*x4313))+x4313)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4315=((-1.0)*r21);
CheckValue<IkReal> x4318 = IKatan2WithCheck(IkReal(x4315),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4318.valid){
continue;
}
IkReal x4316=((1.0)*(x4318.value));
IkReal x4317=x4301;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4316)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4316)));
IkReal gconst100=(x4315*x4317);
IkReal gconst101=((1.0)*r20*x4317);
IkReal x4319=r22*r22;
IkReal x4320=((1.0)*x4319);
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(((-1.0)+x4319),-1);
if(!x4324.valid){
continue;
}
IkReal x4321=x4324.value;
if((((1.0)+(((-1.0)*x4320)))) < -0.00001)
continue;
IkReal x4322=IKsqrt(((1.0)+(((-1.0)*x4320))));
IkReal x4323=(sj0*x4321*x4322);
j4eval[0]=((IKabs(((((-1.0)*x4320*x4323))+x4323)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4325=((-1.0)*r21);
CheckValue<IkReal> x4328 = IKatan2WithCheck(IkReal(x4325),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4328.valid){
continue;
}
IkReal x4326=((1.0)*(x4328.value));
IkReal x4327=x4301;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4326)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4326)));
IkReal gconst100=(x4325*x4327);
IkReal gconst101=((1.0)*r20*x4327);
IkReal x4329=r22*r22;
IkReal x4330=(r12*sj0);
IkReal x4331=(cj0*r02);
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(((-1.0)+x4329),-1);
if(!x4335.valid){
continue;
}
IkReal x4332=x4335.value;
if((((1.0)+(((-1.0)*x4329)))) < -0.00001)
continue;
IkReal x4333=IKsqrt(((1.0)+(((-1.0)*x4329))));
IkReal x4334=(r22*x4332*x4333);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x4331))+(((-1.0)*x4330)))))+(IKabs((((x4331*x4334))+((x4330*x4334))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4336=((1.0)*sj0);
IkReal x4337=((1.0)*gconst100);
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4337))+(((-1.0)*gconst101*r21)))),-1);
if(!x4338.valid){
continue;
}
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4336)))),IkReal(((((-1.0)*gconst100*r11*x4336))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4338.value)))+(x4339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4340=IKsin(j4);
IkReal x4341=IKcos(j4);
IkReal x4342=(gconst101*r20);
IkReal x4343=(gconst101*r10);
IkReal x4344=((1.0)*cj2);
IkReal x4345=(gconst101*r00);
IkReal x4346=((1.0)*sj0);
IkReal x4347=(cj1*sj2);
IkReal x4348=((1.0)*x4341);
IkReal x4349=((1.0)*x4340);
IkReal x4350=(gconst100*x4340);
IkReal x4351=(gconst100*x4341);
evalcond[0]=((((-1.0)*x4342*x4349))+((r21*x4350))+(((-1.0)*r22*x4348)));
evalcond[1]=(cj0+(((-1.0)*x4343*x4349))+(((-1.0)*r12*x4348))+((r11*x4350)));
evalcond[2]=((((-1.0)*r02*x4348))+(((-1.0)*x4346))+(((-1.0)*x4345*x4349))+((r01*x4350)));
evalcond[3]=((((-1.0)*x4342*x4348))+((sj1*sj2))+((r22*x4340))+((r21*x4351))+(((-1.0)*cj1*x4344)));
evalcond[4]=(((r02*x4340))+(((-1.0)*x4345*x4348))+(((-1.0)*cj0*sj1*x4344))+(((-1.0)*cj0*x4347))+((r01*x4351)));
evalcond[5]=((((-1.0)*x4346*x4347))+(((-1.0)*x4343*x4348))+(((-1.0)*sj0*sj1*x4344))+((r12*x4340))+((r11*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4352=((1.0)*gconst101);
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4352))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
CheckValue<IkReal> x4354=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4352)))),-1);
if(!x4354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4353.value)+(((1.5707963267949)*(x4354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4355=IKsin(j4);
IkReal x4356=IKcos(j4);
IkReal x4357=(gconst101*r20);
IkReal x4358=(gconst101*r10);
IkReal x4359=((1.0)*cj2);
IkReal x4360=(gconst101*r00);
IkReal x4361=((1.0)*sj0);
IkReal x4362=(cj1*sj2);
IkReal x4363=((1.0)*x4356);
IkReal x4364=((1.0)*x4355);
IkReal x4365=(gconst100*x4355);
IkReal x4366=(gconst100*x4356);
evalcond[0]=((((-1.0)*x4357*x4364))+(((-1.0)*r22*x4363))+((r21*x4365)));
evalcond[1]=(cj0+((r11*x4365))+(((-1.0)*x4358*x4364))+(((-1.0)*r12*x4363)));
evalcond[2]=((((-1.0)*x4360*x4364))+(((-1.0)*x4361))+((r01*x4365))+(((-1.0)*r02*x4363)));
evalcond[3]=((((-1.0)*x4357*x4363))+((r21*x4366))+((r22*x4355))+((sj1*sj2))+(((-1.0)*cj1*x4359)));
evalcond[4]=((((-1.0)*x4360*x4363))+(((-1.0)*cj0*x4362))+((r01*x4366))+((r02*x4355))+(((-1.0)*cj0*sj1*x4359)));
evalcond[5]=((((-1.0)*x4361*x4362))+((r11*x4366))+(((-1.0)*sj0*sj1*x4359))+(((-1.0)*x4358*x4363))+((r12*x4355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4367=((1.0)*gconst101);
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4367)))),-1);
if(!x4369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4368.value)+(((1.5707963267949)*(x4369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4370=IKsin(j4);
IkReal x4371=IKcos(j4);
IkReal x4372=(gconst101*r20);
IkReal x4373=(gconst101*r10);
IkReal x4374=((1.0)*cj2);
IkReal x4375=(gconst101*r00);
IkReal x4376=((1.0)*sj0);
IkReal x4377=(cj1*sj2);
IkReal x4378=((1.0)*x4371);
IkReal x4379=((1.0)*x4370);
IkReal x4380=(gconst100*x4370);
IkReal x4381=(gconst100*x4371);
evalcond[0]=((((-1.0)*r22*x4378))+((r21*x4380))+(((-1.0)*x4372*x4379)));
evalcond[1]=(cj0+(((-1.0)*x4373*x4379))+((r11*x4380))+(((-1.0)*r12*x4378)));
evalcond[2]=((((-1.0)*x4375*x4379))+(((-1.0)*r02*x4378))+(((-1.0)*x4376))+((r01*x4380)));
evalcond[3]=(((r22*x4370))+((sj1*sj2))+((r21*x4381))+(((-1.0)*cj1*x4374))+(((-1.0)*x4372*x4378)));
evalcond[4]=((((-1.0)*x4375*x4378))+(((-1.0)*cj0*sj1*x4374))+((r02*x4370))+(((-1.0)*cj0*x4377))+((r01*x4381)));
evalcond[5]=(((r12*x4370))+(((-1.0)*x4376*x4377))+(((-1.0)*x4373*x4378))+(((-1.0)*sj0*sj1*x4374))+((r11*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4382=((-1.0)*r10);
IkReal x4384 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4384)==0){
continue;
}
IkReal x4383=pow(x4384,-0.5);
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4382),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4385.value));
IkReal gconst103=(r11*x4383);
IkReal gconst104=(x4382*x4383);
CheckValue<IkReal> x4386 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4386.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4386.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4387=((-1.0)*r10);
IkReal x4388=x4383;
CheckValue<IkReal> x4390 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4387),IKFAST_ATAN2_MAGTHRESH);
if(!x4390.valid){
continue;
}
IkReal x4389=((-1.0)*(x4390.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4389;
IkReal gconst102=x4389;
IkReal gconst103=(r11*x4388);
IkReal gconst104=(x4387*x4388);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4391=((1.0)*sj0);
IkReal x4392=((1.0)*gconst103);
CheckValue<IkReal> x4393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4392)))),-1);
if(!x4393.valid){
continue;
}
CheckValue<IkReal> x4394 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4391))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4391))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x4392))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4393.value)))+(x4394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4395=IKsin(j4);
IkReal x4396=IKcos(j4);
IkReal x4397=(gconst103*r11);
IkReal x4398=((1.0)*cj2);
IkReal x4399=((1.0)*sj0);
IkReal x4400=(cj1*sj2);
IkReal x4401=((1.0)*x4396);
IkReal x4402=(gconst103*x4396);
IkReal x4403=(gconst103*x4395);
IkReal x4404=((1.0)*gconst104*x4395);
evalcond[0]=(((r21*x4403))+(((-1.0)*r20*x4404))+(((-1.0)*r22*x4401)));
evalcond[1]=(cj0+(((-1.0)*r10*x4404))+(((-1.0)*r12*x4401))+((x4395*x4397)));
evalcond[2]=((((-1.0)*x4399))+(((-1.0)*r00*x4404))+((r01*x4403))+(((-1.0)*r02*x4401)));
evalcond[3]=(((r21*x4402))+((r22*x4395))+((sj1*sj2))+(((-1.0)*cj1*x4398))+(((-1.0)*gconst104*r20*x4401)));
evalcond[4]=((((-1.0)*cj0*sj1*x4398))+(((-1.0)*cj0*x4400))+((r02*x4395))+((r01*x4402))+(((-1.0)*gconst104*r00*x4401)));
evalcond[5]=((((-1.0)*sj0*sj1*x4398))+(((-1.0)*gconst104*r10*x4401))+(((-1.0)*x4399*x4400))+((x4396*x4397))+((r12*x4395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4405=((1.0)*gconst104);
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4405))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
CheckValue<IkReal> x4407=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4405)))),-1);
if(!x4407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4406.value)+(((1.5707963267949)*(x4407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4408=IKsin(j4);
IkReal x4409=IKcos(j4);
IkReal x4410=(gconst103*r11);
IkReal x4411=((1.0)*cj2);
IkReal x4412=((1.0)*sj0);
IkReal x4413=(cj1*sj2);
IkReal x4414=((1.0)*x4409);
IkReal x4415=(gconst103*x4409);
IkReal x4416=(gconst103*x4408);
IkReal x4417=((1.0)*gconst104*x4408);
evalcond[0]=(((r21*x4416))+(((-1.0)*r20*x4417))+(((-1.0)*r22*x4414)));
evalcond[1]=(cj0+(((-1.0)*r10*x4417))+(((-1.0)*r12*x4414))+((x4408*x4410)));
evalcond[2]=(((r01*x4416))+(((-1.0)*r02*x4414))+(((-1.0)*r00*x4417))+(((-1.0)*x4412)));
evalcond[3]=(((r21*x4415))+((r22*x4408))+((sj1*sj2))+(((-1.0)*cj1*x4411))+(((-1.0)*gconst104*r20*x4414)));
evalcond[4]=((((-1.0)*cj0*sj1*x4411))+(((-1.0)*cj0*x4413))+((r01*x4415))+(((-1.0)*gconst104*r00*x4414))+((r02*x4408)));
evalcond[5]=(((r12*x4408))+(((-1.0)*x4412*x4413))+(((-1.0)*sj0*sj1*x4411))+((x4409*x4410))+(((-1.0)*gconst104*r10*x4414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4418=((-1.0)*r11);
IkReal x4420 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4420)==0){
continue;
}
IkReal x4419=pow(x4420,-0.5);
CheckValue<IkReal> x4421 = IKatan2WithCheck(IkReal(x4418),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4421.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4421.value))));
IkReal gconst106=(x4418*x4419);
IkReal gconst107=((1.0)*r10*x4419);
CheckValue<IkReal> x4422 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4422.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4422.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4423=((-1.0)*r11);
CheckValue<IkReal> x4426 = IKatan2WithCheck(IkReal(x4423),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4426.valid){
continue;
}
IkReal x4424=((1.0)*(x4426.value));
IkReal x4425=x4419;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4424)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4424)));
IkReal gconst106=(x4423*x4425);
IkReal gconst107=((1.0)*r10*x4425);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4427=((-1.0)*r11);
CheckValue<IkReal> x4430 = IKatan2WithCheck(IkReal(x4427),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4430.valid){
continue;
}
IkReal x4428=((1.0)*(x4430.value));
IkReal x4429=x4419;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4428)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4428)));
IkReal gconst106=(x4427*x4429);
IkReal gconst107=((1.0)*r10*x4429);
IkReal x4431=r12*r12;
IkReal x4432=((1.0)*sj0);
IkReal x4433=(cj0*r02);
IkReal x4434=x4419;
j4eval[0]=((IKabs(((((-1.0)*x4433))+(((-1.0)*r12*x4432)))))+(IKabs(((((-1.0)*x4432*x4434))+((sj0*x4431*x4434))+((r12*x4433*x4434))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4435=((-1.0)*r11);
CheckValue<IkReal> x4438 = IKatan2WithCheck(IkReal(x4435),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4438.valid){
continue;
}
IkReal x4436=((1.0)*(x4438.value));
IkReal x4437=x4419;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4436)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4436)));
IkReal gconst106=(x4435*x4437);
IkReal gconst107=((1.0)*r10*x4437);
IkReal x4439=r12*r12;
IkReal x4440=((1.0)+(((-1.0)*x4439)));
IkReal x4441=(r22*sj1*sj2);
IkReal x4442=(cj1*cj2*r22);
CheckValue<IkReal> x4449=IKPowWithIntegerCheck(x4440,-1);
if(!x4449.valid){
continue;
}
IkReal x4443=x4449.value;
CheckValue<IkReal> x4450=IKPowWithIntegerCheck(((-1.0)+x4439),-1);
if(!x4450.valid){
continue;
}
IkReal x4444=x4450.value;
IkReal x4445=((1.0)*x4443);
if((x4440) < -0.00001)
continue;
IkReal x4446=IKsqrt(x4440);
IkReal x4447=(r12*x4444*x4446);
IkReal x4448=((((-2.0)*r10*r11*r20*r21*x4443))+(((-1.0)*x4445*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x4445*(r11*r11)*(r21*r21))));
j4eval[0]=x4448;
j4eval[1]=((IKabs((x4441+(((-1.0)*x4442)))))+(IKabs((((x4442*x4447))+(((-1.0)*x4441*x4447))))));
j4eval[2]=IKsign(x4448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4451=(sj1*sj2);
IkReal x4452=(gconst106*r21);
IkReal x4453=(gconst107*r20);
IkReal x4454=(cj1*cj2);
CheckValue<IkReal> x4455=IKPowWithIntegerCheck(IKsign(((((2.0)*x4452*x4453))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4453*x4453)))+(((-1.0)*(x4452*x4452))))),-1);
if(!x4455.valid){
continue;
}
CheckValue<IkReal> x4456 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4454))+((r22*x4451)))),IkReal(((((-1.0)*x4451*x4453))+((x4451*x4452))+((x4453*x4454))+(((-1.0)*x4452*x4454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4455.value)))+(x4456.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4457=IKsin(j4);
IkReal x4458=IKcos(j4);
IkReal x4459=(gconst107*r10);
IkReal x4460=(gconst107*r00);
IkReal x4461=((1.0)*cj2);
IkReal x4462=(gconst107*r20);
IkReal x4463=((1.0)*sj0);
IkReal x4464=(cj1*sj2);
IkReal x4465=((1.0)*x4458);
IkReal x4466=(gconst106*x4458);
IkReal x4467=(gconst106*x4457);
IkReal x4468=((1.0)*x4457);
evalcond[0]=((((-1.0)*x4462*x4468))+(((-1.0)*r22*x4465))+((r21*x4467)));
evalcond[1]=(cj0+((r11*x4467))+(((-1.0)*x4459*x4468))+(((-1.0)*r12*x4465)));
evalcond[2]=(((r01*x4467))+(((-1.0)*r02*x4465))+(((-1.0)*x4463))+(((-1.0)*x4460*x4468)));
evalcond[3]=((((-1.0)*x4462*x4465))+((sj1*sj2))+(((-1.0)*cj1*x4461))+((r21*x4466))+((r22*x4457)));
evalcond[4]=(((r01*x4466))+(((-1.0)*cj0*sj1*x4461))+((r02*x4457))+(((-1.0)*x4460*x4465))+(((-1.0)*cj0*x4464)));
evalcond[5]=((((-1.0)*x4463*x4464))+((r11*x4466))+(((-1.0)*sj0*sj1*x4461))+(((-1.0)*x4459*x4465))+((r12*x4457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4469=((1.0)*sj0);
IkReal x4470=((1.0)*gconst106);
CheckValue<IkReal> x4471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4470))+(((-1.0)*gconst107*r21)))),-1);
if(!x4471.valid){
continue;
}
CheckValue<IkReal> x4472 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4469)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x4469))+(((-1.0)*cj0*r01*x4470))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4471.value)))+(x4472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4473=IKsin(j4);
IkReal x4474=IKcos(j4);
IkReal x4475=(gconst107*r10);
IkReal x4476=(gconst107*r00);
IkReal x4477=((1.0)*cj2);
IkReal x4478=(gconst107*r20);
IkReal x4479=((1.0)*sj0);
IkReal x4480=(cj1*sj2);
IkReal x4481=((1.0)*x4474);
IkReal x4482=(gconst106*x4474);
IkReal x4483=(gconst106*x4473);
IkReal x4484=((1.0)*x4473);
evalcond[0]=(((r21*x4483))+(((-1.0)*x4478*x4484))+(((-1.0)*r22*x4481)));
evalcond[1]=(((r11*x4483))+(((-1.0)*r12*x4481))+cj0+(((-1.0)*x4475*x4484)));
evalcond[2]=((((-1.0)*x4479))+(((-1.0)*x4476*x4484))+((r01*x4483))+(((-1.0)*r02*x4481)));
evalcond[3]=((((-1.0)*cj1*x4477))+((r21*x4482))+((sj1*sj2))+(((-1.0)*x4478*x4481))+((r22*x4473)));
evalcond[4]=((((-1.0)*cj0*x4480))+(((-1.0)*cj0*sj1*x4477))+(((-1.0)*x4476*x4481))+((r02*x4473))+((r01*x4482)));
evalcond[5]=(((r11*x4482))+(((-1.0)*x4475*x4481))+(((-1.0)*x4479*x4480))+(((-1.0)*sj0*sj1*x4477))+((r12*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4485=((1.0)*gconst107);
CheckValue<IkReal> x4486=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4485)))),-1);
if(!x4486.valid){
continue;
}
CheckValue<IkReal> x4487 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x4485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4486.value)))+(x4487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4488=IKsin(j4);
IkReal x4489=IKcos(j4);
IkReal x4490=(gconst107*r10);
IkReal x4491=(gconst107*r00);
IkReal x4492=((1.0)*cj2);
IkReal x4493=(gconst107*r20);
IkReal x4494=((1.0)*sj0);
IkReal x4495=(cj1*sj2);
IkReal x4496=((1.0)*x4489);
IkReal x4497=(gconst106*x4489);
IkReal x4498=(gconst106*x4488);
IkReal x4499=((1.0)*x4488);
evalcond[0]=(((r21*x4498))+(((-1.0)*r22*x4496))+(((-1.0)*x4493*x4499)));
evalcond[1]=(cj0+(((-1.0)*x4490*x4499))+((r11*x4498))+(((-1.0)*r12*x4496)));
evalcond[2]=((((-1.0)*r02*x4496))+(((-1.0)*x4491*x4499))+(((-1.0)*x4494))+((r01*x4498)));
evalcond[3]=((((-1.0)*cj1*x4492))+((sj1*sj2))+((r21*x4497))+((r22*x4488))+(((-1.0)*x4493*x4496)));
evalcond[4]=((((-1.0)*cj0*x4495))+((r02*x4488))+(((-1.0)*x4491*x4496))+(((-1.0)*cj0*sj1*x4492))+((r01*x4497)));
evalcond[5]=((((-1.0)*sj0*sj1*x4492))+(((-1.0)*x4490*x4496))+(((-1.0)*x4494*x4495))+((r11*x4497))+((r12*x4488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4500=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4500;
j4eval[1]=IKsign(x4500);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4501=((1.0)*cj5);
IkReal x4502=((((-1.0)*r01*x4501))+(((-1.0)*r00*sj5)));
j4eval[0]=x4502;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4501))))));
j4eval[2]=IKsign(x4502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4503=(sj1*sj2);
IkReal x4504=(cj5*r10);
IkReal x4505=(r11*sj5);
IkReal x4506=(cj1*cj2);
IkReal x4507=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4507;
j4eval[1]=((IKabs((((r12*x4506))+(((-1.0)*r12*x4503)))))+(IKabs(((((-1.0)*x4505*x4506))+((x4503*x4505))+((x4504*x4506))+(((-1.0)*x4503*x4504))))));
j4eval[2]=IKsign(x4507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4508=(sj1*sj2);
IkReal x4509=(cj5*r10);
IkReal x4510=(r11*sj5);
IkReal x4511=(cj1*cj2);
CheckValue<IkReal> x4512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4512.valid){
continue;
}
CheckValue<IkReal> x4513 = IKatan2WithCheck(IkReal(((((-1.0)*x4510*x4511))+(((-1.0)*x4508*x4509))+((x4508*x4510))+((x4509*x4511)))),IkReal(((((-1.0)*r12*x4508))+((r12*x4511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4512.value)))+(x4513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4514=IKcos(j4);
IkReal x4515=IKsin(j4);
IkReal x4516=(cj5*r00);
IkReal x4517=(cj5*r10);
IkReal x4518=(r21*sj5);
IkReal x4519=((1.0)*cj2);
IkReal x4520=(cj5*r20);
IkReal x4521=((1.0)*x4514);
IkReal x4522=((1.0)*x4515);
IkReal x4523=(sj5*x4515);
IkReal x4524=(sj5*x4514);
evalcond[0]=(((r11*x4524))+(((-1.0)*x4517*x4521))+((r12*x4515)));
evalcond[1]=((((-1.0)*x4520*x4522))+(((-1.0)*r22*x4521))+((x4515*x4518)));
evalcond[2]=(((r01*x4523))+(((-1.0)*x4516*x4522))+(((-1.0)*r02*x4521)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4521))+((r11*x4523))+(((-1.0)*x4517*x4522)));
evalcond[4]=((((-1.0)*cj1*x4519))+(((-1.0)*x4520*x4521))+((sj1*sj2))+((r22*x4515))+((x4514*x4518)));
evalcond[5]=(((r02*x4515))+((r01*x4524))+(((-1.0)*cj1*sj2))+(((-1.0)*x4516*x4521))+(((-1.0)*sj1*x4519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4525=((1.0)*cj5);
CheckValue<IkReal> x4526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4525))+(((-1.0)*r00*sj5)))),-1);
if(!x4526.valid){
continue;
}
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4526.value)))+(x4527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4528=IKcos(j4);
IkReal x4529=IKsin(j4);
IkReal x4530=(cj5*r00);
IkReal x4531=(cj5*r10);
IkReal x4532=(r21*sj5);
IkReal x4533=((1.0)*cj2);
IkReal x4534=(cj5*r20);
IkReal x4535=((1.0)*x4528);
IkReal x4536=((1.0)*x4529);
IkReal x4537=(sj5*x4529);
IkReal x4538=(sj5*x4528);
evalcond[0]=(((r12*x4529))+(((-1.0)*x4531*x4535))+((r11*x4538)));
evalcond[1]=(((x4529*x4532))+(((-1.0)*r22*x4535))+(((-1.0)*x4534*x4536)));
evalcond[2]=((((-1.0)*x4530*x4536))+((r01*x4537))+(((-1.0)*r02*x4535)));
evalcond[3]=((1.0)+(((-1.0)*x4531*x4536))+(((-1.0)*r12*x4535))+((r11*x4537)));
evalcond[4]=(((x4528*x4532))+(((-1.0)*cj1*x4533))+((sj1*sj2))+((r22*x4529))+(((-1.0)*x4534*x4535)));
evalcond[5]=((((-1.0)*x4530*x4535))+((r01*x4538))+(((-1.0)*sj1*x4533))+(((-1.0)*cj1*sj2))+((r02*x4529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4539=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4539.valid){
continue;
}
CheckValue<IkReal> x4540 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4539.value)))+(x4540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4541=IKcos(j4);
IkReal x4542=IKsin(j4);
IkReal x4543=(cj5*r00);
IkReal x4544=(cj5*r10);
IkReal x4545=(r21*sj5);
IkReal x4546=((1.0)*cj2);
IkReal x4547=(cj5*r20);
IkReal x4548=((1.0)*x4541);
IkReal x4549=((1.0)*x4542);
IkReal x4550=(sj5*x4542);
IkReal x4551=(sj5*x4541);
evalcond[0]=((((-1.0)*x4544*x4548))+((r11*x4551))+((r12*x4542)));
evalcond[1]=((((-1.0)*r22*x4548))+(((-1.0)*x4547*x4549))+((x4542*x4545)));
evalcond[2]=((((-1.0)*r02*x4548))+((r01*x4550))+(((-1.0)*x4543*x4549)));
evalcond[3]=((1.0)+(((-1.0)*x4544*x4549))+((r11*x4550))+(((-1.0)*r12*x4548)));
evalcond[4]=(((r22*x4542))+(((-1.0)*x4547*x4548))+((sj1*sj2))+((x4541*x4545))+(((-1.0)*cj1*x4546)));
evalcond[5]=(((r01*x4551))+((r02*x4542))+(((-1.0)*cj1*sj2))+(((-1.0)*x4543*x4548))+(((-1.0)*sj1*x4546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4552=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4552;
j4eval[1]=IKsign(x4552);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4553=((1.0)*cj5);
IkReal x4554=((((-1.0)*r21*x4553))+(((-1.0)*r20*sj5)));
j4eval[0]=x4554;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4553))+((r01*sj5))))));
j4eval[2]=IKsign(x4554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4555=cj5*cj5;
IkReal x4556=r11*r11;
IkReal x4557=(r11*sj5);
IkReal x4558=(cj5*r10);
IkReal x4559=((r12*r12)+((x4555*(r10*r10)))+x4556+(((-2.0)*x4557*x4558))+(((-1.0)*x4555*x4556)));
j4eval[0]=x4559;
j4eval[1]=IKsign(x4559);
j4eval[2]=((IKabs(r12))+(IKabs((x4557+(((-1.0)*x4558))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4560=cj5*cj5;
IkReal x4561=r11*r11;
IkReal x4562=(cj5*r10);
IkReal x4563=(r11*sj5);
CheckValue<IkReal> x4564=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4561+((x4560*(r10*r10)))+(((-2.0)*x4562*x4563))+(((-1.0)*x4560*x4561)))),-1);
if(!x4564.valid){
continue;
}
CheckValue<IkReal> x4565 = IKatan2WithCheck(IkReal((x4563+(((-1.0)*x4562)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4564.value)))+(x4565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4566=IKcos(j4);
IkReal x4567=IKsin(j4);
IkReal x4568=(cj5*r00);
IkReal x4569=(cj5*r10);
IkReal x4570=(r21*sj5);
IkReal x4571=(cj5*r20);
IkReal x4572=((1.0)*x4566);
IkReal x4573=((1.0)*x4567);
IkReal x4574=(sj5*x4567);
IkReal x4575=(sj5*x4566);
evalcond[0]=((((-1.0)*x4569*x4572))+((r12*x4567))+((r11*x4575)));
evalcond[1]=(((x4567*x4570))+(((-1.0)*x4571*x4573))+(((-1.0)*r22*x4572)));
evalcond[2]=((((-1.0)*r02*x4572))+(((-1.0)*x4568*x4573))+((r01*x4574)));
evalcond[3]=((-1.0)+(((-1.0)*x4569*x4573))+((r11*x4574))+(((-1.0)*r12*x4572)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x4567))+(((-1.0)*x4568*x4572))+((r01*x4575)));
evalcond[5]=(((r22*x4567))+(((-1.0)*x4571*x4572))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4566*x4570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4576=((1.0)*cj5);
CheckValue<IkReal> x4577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4576))+(((-1.0)*r20*sj5)))),-1);
if(!x4577.valid){
continue;
}
CheckValue<IkReal> x4578 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x4576))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4577.value)))+(x4578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4579=IKcos(j4);
IkReal x4580=IKsin(j4);
IkReal x4581=(cj5*r00);
IkReal x4582=(cj5*r10);
IkReal x4583=(r21*sj5);
IkReal x4584=(cj5*r20);
IkReal x4585=((1.0)*x4579);
IkReal x4586=((1.0)*x4580);
IkReal x4587=(sj5*x4580);
IkReal x4588=(sj5*x4579);
evalcond[0]=(((r11*x4588))+((r12*x4580))+(((-1.0)*x4582*x4585)));
evalcond[1]=((((-1.0)*r22*x4585))+(((-1.0)*x4584*x4586))+((x4580*x4583)));
evalcond[2]=((((-1.0)*r02*x4585))+(((-1.0)*x4581*x4586))+((r01*x4587)));
evalcond[3]=((-1.0)+((r11*x4587))+(((-1.0)*r12*x4585))+(((-1.0)*x4582*x4586)));
evalcond[4]=(((cj2*sj1))+((r02*x4580))+((cj1*sj2))+(((-1.0)*x4581*x4585))+((r01*x4588)));
evalcond[5]=(((r22*x4580))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4579*x4583))+(((-1.0)*x4584*x4585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4589 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4589.valid){
continue;
}
CheckValue<IkReal> x4590=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4589.value)+(((1.5707963267949)*(x4590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4591=IKcos(j4);
IkReal x4592=IKsin(j4);
IkReal x4593=(cj5*r00);
IkReal x4594=(cj5*r10);
IkReal x4595=(r21*sj5);
IkReal x4596=(cj5*r20);
IkReal x4597=((1.0)*x4591);
IkReal x4598=((1.0)*x4592);
IkReal x4599=(sj5*x4592);
IkReal x4600=(sj5*x4591);
evalcond[0]=(((r11*x4600))+(((-1.0)*x4594*x4597))+((r12*x4592)));
evalcond[1]=((((-1.0)*r22*x4597))+(((-1.0)*x4596*x4598))+((x4592*x4595)));
evalcond[2]=((((-1.0)*x4593*x4598))+(((-1.0)*r02*x4597))+((r01*x4599)));
evalcond[3]=((-1.0)+(((-1.0)*x4594*x4598))+((r11*x4599))+(((-1.0)*r12*x4597)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4600))+((r02*x4592))+(((-1.0)*x4593*x4597)));
evalcond[5]=(((r22*x4592))+(((-1.0)*x4596*x4597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4591*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4601=((-1.0)*r00);
IkReal x4603 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4603)==0){
continue;
}
IkReal x4602=pow(x4603,-0.5);
CheckValue<IkReal> x4604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4601),IKFAST_ATAN2_MAGTHRESH);
if(!x4604.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4604.value));
IkReal gconst109=(r01*x4602);
IkReal gconst110=(x4601*x4602);
CheckValue<IkReal> x4605 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4606=((-1.0)*r00);
IkReal x4607=x4602;
CheckValue<IkReal> x4609 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4606),IKFAST_ATAN2_MAGTHRESH);
if(!x4609.valid){
continue;
}
IkReal x4608=((-1.0)*(x4609.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4608;
IkReal gconst108=x4608;
IkReal gconst109=(r01*x4607);
IkReal gconst110=(x4606*x4607);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4610=((1.0)*sj0);
IkReal x4611=((1.0)*gconst109);
CheckValue<IkReal> x4612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4611))+(((-1.0)*gconst110*r21)))),-1);
if(!x4612.valid){
continue;
}
CheckValue<IkReal> x4613 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4610))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4611))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4612.value)))+(x4613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4614=IKsin(j4);
IkReal x4615=IKcos(j4);
IkReal x4616=(gconst109*r21);
IkReal x4617=((1.0)*cj2);
IkReal x4618=((1.0)*sj0);
IkReal x4619=(cj1*sj2);
IkReal x4620=((1.0)*x4615);
IkReal x4621=(gconst109*x4614);
IkReal x4622=(gconst109*x4615);
IkReal x4623=((1.0)*gconst110*x4614);
evalcond[0]=((((-1.0)*r22*x4620))+((x4614*x4616))+(((-1.0)*r20*x4623)));
evalcond[1]=(cj0+((r11*x4621))+(((-1.0)*r12*x4620))+(((-1.0)*r10*x4623)));
evalcond[2]=((((-1.0)*r02*x4620))+(((-1.0)*r00*x4623))+(((-1.0)*x4618))+((r01*x4621)));
evalcond[3]=((((-1.0)*gconst110*r20*x4620))+((sj1*sj2))+((x4615*x4616))+((r22*x4614))+(((-1.0)*cj1*x4617)));
evalcond[4]=((((-1.0)*cj0*x4619))+((r02*x4614))+(((-1.0)*gconst110*r00*x4620))+(((-1.0)*cj0*sj1*x4617))+((r01*x4622)));
evalcond[5]=(((r11*x4622))+((r12*x4614))+(((-1.0)*sj0*sj1*x4617))+(((-1.0)*gconst110*r10*x4620))+(((-1.0)*x4618*x4619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4624=((1.0)*gconst110);
CheckValue<IkReal> x4625 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4625.valid){
continue;
}
CheckValue<IkReal> x4626=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x4624)))),-1);
if(!x4626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4625.value)+(((1.5707963267949)*(x4626.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4627=IKsin(j4);
IkReal x4628=IKcos(j4);
IkReal x4629=(gconst109*r21);
IkReal x4630=((1.0)*cj2);
IkReal x4631=((1.0)*sj0);
IkReal x4632=(cj1*sj2);
IkReal x4633=((1.0)*x4628);
IkReal x4634=(gconst109*x4627);
IkReal x4635=(gconst109*x4628);
IkReal x4636=((1.0)*gconst110*x4627);
evalcond[0]=((((-1.0)*r20*x4636))+((x4627*x4629))+(((-1.0)*r22*x4633)));
evalcond[1]=(cj0+((r11*x4634))+(((-1.0)*r10*x4636))+(((-1.0)*r12*x4633)));
evalcond[2]=(((r01*x4634))+(((-1.0)*x4631))+(((-1.0)*r02*x4633))+(((-1.0)*r00*x4636)));
evalcond[3]=((((-1.0)*gconst110*r20*x4633))+(((-1.0)*cj1*x4630))+((sj1*sj2))+((x4628*x4629))+((r22*x4627)));
evalcond[4]=(((r01*x4635))+(((-1.0)*gconst110*r00*x4633))+(((-1.0)*cj0*sj1*x4630))+((r02*x4627))+(((-1.0)*cj0*x4632)));
evalcond[5]=(((r12*x4627))+(((-1.0)*gconst110*r10*x4633))+((r11*x4635))+(((-1.0)*sj0*sj1*x4630))+(((-1.0)*x4631*x4632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4637=((-1.0)*r01);
IkReal x4639 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4639)==0){
continue;
}
IkReal x4638=pow(x4639,-0.5);
CheckValue<IkReal> x4640 = IKatan2WithCheck(IkReal(x4637),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4640.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4640.value))));
IkReal gconst112=(x4637*x4638);
IkReal gconst113=((1.0)*r00*x4638);
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4641.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4642=((-1.0)*r01);
CheckValue<IkReal> x4645 = IKatan2WithCheck(IkReal(x4642),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4645.valid){
continue;
}
IkReal x4643=((1.0)*(x4645.value));
IkReal x4644=x4638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4643)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4643)));
IkReal gconst112=(x4642*x4644);
IkReal gconst113=((1.0)*r00*x4644);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4646=((-1.0)*r01);
CheckValue<IkReal> x4649 = IKatan2WithCheck(IkReal(x4646),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4649.valid){
continue;
}
IkReal x4647=((1.0)*(x4649.value));
IkReal x4648=x4638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4647)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4647)));
IkReal gconst112=(x4646*x4648);
IkReal gconst113=((1.0)*r00*x4648);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4650=((-1.0)*r01);
CheckValue<IkReal> x4653 = IKatan2WithCheck(IkReal(x4650),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4653.valid){
continue;
}
IkReal x4651=((1.0)*(x4653.value));
IkReal x4652=x4638;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4651)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4651)));
IkReal gconst112=(x4650*x4652);
IkReal gconst113=((1.0)*r00*x4652);
IkReal x4654=r02*r02;
IkReal x4655=(r12*sj0);
IkReal x4656=((1.0)*cj0);
IkReal x4657=x4638;
j4eval[0]=((IKabs(((((-1.0)*r02*x4656))+(((-1.0)*x4655)))))+(IKabs((((cj0*x4654*x4657))+(((-1.0)*x4656*x4657))+((r02*x4655*x4657))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4658=((1.0)*sj0);
IkReal x4659=((1.0)*gconst112);
CheckValue<IkReal> x4660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4659))+(((-1.0)*gconst113*r21)))),-1);
if(!x4660.valid){
continue;
}
CheckValue<IkReal> x4661 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4658)))),IkReal(((((-1.0)*cj0*r01*x4659))+(((-1.0)*gconst112*r11*x4658))+((gconst113*r10*sj0))+((cj0*gconst113*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4661.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4660.value)))+(x4661.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4662=IKsin(j4);
IkReal x4663=IKcos(j4);
IkReal x4664=(gconst113*r20);
IkReal x4665=(gconst112*r21);
IkReal x4666=((1.0)*cj2);
IkReal x4667=(gconst113*r00);
IkReal x4668=(gconst113*r10);
IkReal x4669=((1.0)*sj0);
IkReal x4670=(cj1*sj2);
IkReal x4671=((1.0)*x4663);
IkReal x4672=((1.0)*x4662);
IkReal x4673=(gconst112*x4663);
IkReal x4674=(gconst112*x4662);
evalcond[0]=(((x4662*x4665))+(((-1.0)*x4664*x4672))+(((-1.0)*r22*x4671)));
evalcond[1]=(cj0+((r11*x4674))+(((-1.0)*r12*x4671))+(((-1.0)*x4668*x4672)));
evalcond[2]=((((-1.0)*r02*x4671))+(((-1.0)*x4667*x4672))+((r01*x4674))+(((-1.0)*x4669)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x4664*x4671))+((x4663*x4665))+((r22*x4662))+(((-1.0)*cj1*x4666)));
evalcond[4]=((((-1.0)*cj0*x4670))+((r02*x4662))+(((-1.0)*x4667*x4671))+(((-1.0)*cj0*sj1*x4666))+((r01*x4673)));
evalcond[5]=(((r12*x4662))+((r11*x4673))+(((-1.0)*sj0*sj1*x4666))+(((-1.0)*x4669*x4670))+(((-1.0)*x4668*x4671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4675=((1.0)*gconst113);
CheckValue<IkReal> x4676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4675))+(((-1.0)*gconst112*r10)))),-1);
if(!x4676.valid){
continue;
}
CheckValue<IkReal> x4677 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4676.value)))+(x4677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4678=IKsin(j4);
IkReal x4679=IKcos(j4);
IkReal x4680=(gconst113*r20);
IkReal x4681=(gconst112*r21);
IkReal x4682=((1.0)*cj2);
IkReal x4683=(gconst113*r00);
IkReal x4684=(gconst113*r10);
IkReal x4685=((1.0)*sj0);
IkReal x4686=(cj1*sj2);
IkReal x4687=((1.0)*x4679);
IkReal x4688=((1.0)*x4678);
IkReal x4689=(gconst112*x4679);
IkReal x4690=(gconst112*x4678);
evalcond[0]=(((x4678*x4681))+(((-1.0)*x4680*x4688))+(((-1.0)*r22*x4687)));
evalcond[1]=((((-1.0)*x4684*x4688))+cj0+((r11*x4690))+(((-1.0)*r12*x4687)));
evalcond[2]=((((-1.0)*x4683*x4688))+((r01*x4690))+(((-1.0)*r02*x4687))+(((-1.0)*x4685)));
evalcond[3]=((((-1.0)*cj1*x4682))+((sj1*sj2))+(((-1.0)*x4680*x4687))+((r22*x4678))+((x4679*x4681)));
evalcond[4]=(((r02*x4678))+(((-1.0)*cj0*sj1*x4682))+(((-1.0)*x4683*x4687))+(((-1.0)*cj0*x4686))+((r01*x4689)));
evalcond[5]=((((-1.0)*x4684*x4687))+(((-1.0)*sj0*sj1*x4682))+((r12*x4678))+(((-1.0)*x4685*x4686))+((r11*x4689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4691=((1.0)*gconst113);
CheckValue<IkReal> x4692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4691))+(((-1.0)*gconst112*r00)))),-1);
if(!x4692.valid){
continue;
}
CheckValue<IkReal> x4693 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4692.value)))+(x4693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4694=IKsin(j4);
IkReal x4695=IKcos(j4);
IkReal x4696=(gconst113*r20);
IkReal x4697=(gconst112*r21);
IkReal x4698=((1.0)*cj2);
IkReal x4699=(gconst113*r00);
IkReal x4700=(gconst113*r10);
IkReal x4701=((1.0)*sj0);
IkReal x4702=(cj1*sj2);
IkReal x4703=((1.0)*x4695);
IkReal x4704=((1.0)*x4694);
IkReal x4705=(gconst112*x4695);
IkReal x4706=(gconst112*x4694);
evalcond[0]=((((-1.0)*r22*x4703))+(((-1.0)*x4696*x4704))+((x4694*x4697)));
evalcond[1]=((((-1.0)*x4700*x4704))+cj0+(((-1.0)*r12*x4703))+((r11*x4706)));
evalcond[2]=((((-1.0)*r02*x4703))+((r01*x4706))+(((-1.0)*x4699*x4704))+(((-1.0)*x4701)));
evalcond[3]=((((-1.0)*x4696*x4703))+(((-1.0)*cj1*x4698))+((sj1*sj2))+((x4695*x4697))+((r22*x4694)));
evalcond[4]=(((r02*x4694))+(((-1.0)*cj0*sj1*x4698))+(((-1.0)*cj0*x4702))+((r01*x4705))+(((-1.0)*x4699*x4703)));
evalcond[5]=((((-1.0)*x4700*x4703))+(((-1.0)*sj0*sj1*x4698))+((r12*x4694))+((r11*x4705))+(((-1.0)*x4701*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4707=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4707;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4708=((1.0)*cj5);
IkReal x4709=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4708)));
j4eval[0]=x4709;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4708)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4710=cj5*cj5;
IkReal x4711=r01*r01;
IkReal x4712=(cj5*r00);
IkReal x4713=(r01*sj5);
IkReal x4714=((((-1.0)*x4710*x4711))+(((-2.0)*x4712*x4713))+((x4710*(r00*r00)))+x4711+(r02*r02));
j4eval[0]=x4714;
j4eval[1]=IKsign(x4714);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4712))+x4713))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4715=cj5*cj5;
IkReal x4716=r01*r01;
IkReal x4717=(r01*sj5);
IkReal x4718=(cj5*r00);
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal(((((-1.0)*x4718))+x4717)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
CheckValue<IkReal> x4720=IKPowWithIntegerCheck(IKsign((((x4715*(r00*r00)))+(((-1.0)*x4715*x4716))+x4716+(((-2.0)*x4717*x4718))+(r02*r02))),-1);
if(!x4720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4719.value)+(((1.5707963267949)*(x4720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4721=IKcos(j4);
IkReal x4722=IKsin(j4);
IkReal x4723=(cj5*r00);
IkReal x4724=(cj5*r10);
IkReal x4725=(r21*sj5);
IkReal x4726=((1.0)*cj2);
IkReal x4727=(cj5*r20);
IkReal x4728=((1.0)*x4721);
IkReal x4729=((1.0)*x4722);
IkReal x4730=(sj5*x4722);
IkReal x4731=(sj5*x4721);
evalcond[0]=((((-1.0)*x4723*x4728))+((r02*x4722))+((r01*x4731)));
evalcond[1]=((((-1.0)*x4727*x4729))+((x4722*x4725))+(((-1.0)*r22*x4728)));
evalcond[2]=(((r11*x4730))+(((-1.0)*x4724*x4729))+(((-1.0)*r12*x4728)));
evalcond[3]=((-1.0)+(((-1.0)*x4723*x4729))+(((-1.0)*r02*x4728))+((r01*x4730)));
evalcond[4]=(((x4721*x4725))+(((-1.0)*cj1*x4726))+(((-1.0)*x4727*x4728))+((sj1*sj2))+((r22*x4722)));
evalcond[5]=(((r11*x4731))+(((-1.0)*sj1*x4726))+(((-1.0)*cj1*sj2))+(((-1.0)*x4724*x4728))+((r12*x4722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4732=((1.0)*cj5);
CheckValue<IkReal> x4733=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4732)))),-1);
if(!x4733.valid){
continue;
}
CheckValue<IkReal> x4734 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4733.value)))+(x4734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4735=IKcos(j4);
IkReal x4736=IKsin(j4);
IkReal x4737=(cj5*r00);
IkReal x4738=(cj5*r10);
IkReal x4739=(r21*sj5);
IkReal x4740=((1.0)*cj2);
IkReal x4741=(cj5*r20);
IkReal x4742=((1.0)*x4735);
IkReal x4743=((1.0)*x4736);
IkReal x4744=(sj5*x4736);
IkReal x4745=(sj5*x4735);
evalcond[0]=(((r01*x4745))+(((-1.0)*x4737*x4742))+((r02*x4736)));
evalcond[1]=(((x4736*x4739))+(((-1.0)*r22*x4742))+(((-1.0)*x4741*x4743)));
evalcond[2]=(((r11*x4744))+(((-1.0)*r12*x4742))+(((-1.0)*x4738*x4743)));
evalcond[3]=((-1.0)+((r01*x4744))+(((-1.0)*x4737*x4743))+(((-1.0)*r02*x4742)));
evalcond[4]=(((x4735*x4739))+(((-1.0)*cj1*x4740))+((sj1*sj2))+(((-1.0)*x4741*x4742))+((r22*x4736)));
evalcond[5]=(((r11*x4745))+(((-1.0)*sj1*x4740))+(((-1.0)*cj1*sj2))+(((-1.0)*x4738*x4742))+((r12*x4736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4746=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4746.valid){
continue;
}
CheckValue<IkReal> x4747 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4746.value)))+(x4747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4748=IKcos(j4);
IkReal x4749=IKsin(j4);
IkReal x4750=(cj5*r00);
IkReal x4751=(cj5*r10);
IkReal x4752=(r21*sj5);
IkReal x4753=((1.0)*cj2);
IkReal x4754=(cj5*r20);
IkReal x4755=((1.0)*x4748);
IkReal x4756=((1.0)*x4749);
IkReal x4757=(sj5*x4749);
IkReal x4758=(sj5*x4748);
evalcond[0]=(((r01*x4758))+(((-1.0)*x4750*x4755))+((r02*x4749)));
evalcond[1]=((((-1.0)*x4754*x4756))+(((-1.0)*r22*x4755))+((x4749*x4752)));
evalcond[2]=(((r11*x4757))+(((-1.0)*r12*x4755))+(((-1.0)*x4751*x4756)));
evalcond[3]=((-1.0)+((r01*x4757))+(((-1.0)*x4750*x4756))+(((-1.0)*r02*x4755)));
evalcond[4]=((((-1.0)*x4754*x4755))+(((-1.0)*cj1*x4753))+((sj1*sj2))+((x4748*x4752))+((r22*x4749)));
evalcond[5]=(((r11*x4758))+((r12*x4749))+(((-1.0)*sj1*x4753))+(((-1.0)*cj1*sj2))+(((-1.0)*x4751*x4755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4759=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4759;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4760=((1.0)*cj5);
IkReal x4761=((((-1.0)*r21*x4760))+(((-1.0)*r20*sj5)));
j4eval[0]=x4761;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4760))))));
j4eval[2]=IKsign(x4761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4762=cj5*cj5;
IkReal x4763=r01*r01;
IkReal x4764=(r01*sj5);
IkReal x4765=(cj5*r00);
IkReal x4766=((((-1.0)*x4763))+(((2.0)*x4764*x4765))+(((-1.0)*(r02*r02)))+((x4762*x4763))+(((-1.0)*x4762*(r00*r00))));
j4eval[0]=x4766;
j4eval[1]=IKsign(x4766);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4765))+x4764))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4767=cj5*cj5;
IkReal x4768=r01*r01;
IkReal x4769=(r01*sj5);
IkReal x4770=(cj5*r00);
CheckValue<IkReal> x4771=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4768))+((x4767*x4768))+(((-1.0)*(r02*r02)))+(((-1.0)*x4767*(r00*r00)))+(((2.0)*x4769*x4770)))),-1);
if(!x4771.valid){
continue;
}
CheckValue<IkReal> x4772 = IKatan2WithCheck(IkReal(((((-1.0)*x4770))+x4769)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4771.value)))+(x4772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4773=IKcos(j4);
IkReal x4774=IKsin(j4);
IkReal x4775=(cj5*r00);
IkReal x4776=(cj5*r10);
IkReal x4777=(r21*sj5);
IkReal x4778=(cj5*r20);
IkReal x4779=((1.0)*x4773);
IkReal x4780=((1.0)*x4774);
IkReal x4781=(sj5*x4774);
IkReal x4782=(sj5*x4773);
evalcond[0]=(((r01*x4782))+((r02*x4774))+(((-1.0)*x4775*x4779)));
evalcond[1]=((((-1.0)*r22*x4779))+((x4774*x4777))+(((-1.0)*x4778*x4780)));
evalcond[2]=((((-1.0)*r12*x4779))+(((-1.0)*x4776*x4780))+((r11*x4781)));
evalcond[3]=((1.0)+((r01*x4781))+(((-1.0)*r02*x4779))+(((-1.0)*x4775*x4780)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4776*x4779))+((r12*x4774))+((cj1*sj2))+((r11*x4782)));
evalcond[5]=((((-1.0)*x4778*x4779))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4773*x4777))+((r22*x4774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4783=((1.0)*cj5);
CheckValue<IkReal> x4784 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4784.valid){
continue;
}
CheckValue<IkReal> x4785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4783))+(((-1.0)*r20*sj5)))),-1);
if(!x4785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4784.value)+(((1.5707963267949)*(x4785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4786=IKcos(j4);
IkReal x4787=IKsin(j4);
IkReal x4788=(cj5*r00);
IkReal x4789=(cj5*r10);
IkReal x4790=(r21*sj5);
IkReal x4791=(cj5*r20);
IkReal x4792=((1.0)*x4786);
IkReal x4793=((1.0)*x4787);
IkReal x4794=(sj5*x4787);
IkReal x4795=(sj5*x4786);
evalcond[0]=((((-1.0)*x4788*x4792))+((r02*x4787))+((r01*x4795)));
evalcond[1]=((((-1.0)*r22*x4792))+((x4787*x4790))+(((-1.0)*x4791*x4793)));
evalcond[2]=((((-1.0)*x4789*x4793))+(((-1.0)*r12*x4792))+((r11*x4794)));
evalcond[3]=((1.0)+(((-1.0)*x4788*x4793))+((r01*x4794))+(((-1.0)*r02*x4792)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4789*x4792))+((cj1*sj2))+((r12*x4787))+((r11*x4795)));
evalcond[5]=(((x4786*x4790))+((r22*x4787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4791*x4792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4796 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4796.valid){
continue;
}
CheckValue<IkReal> x4797=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4796.value)+(((1.5707963267949)*(x4797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4798=IKcos(j4);
IkReal x4799=IKsin(j4);
IkReal x4800=(cj5*r00);
IkReal x4801=(cj5*r10);
IkReal x4802=(r21*sj5);
IkReal x4803=(cj5*r20);
IkReal x4804=((1.0)*x4798);
IkReal x4805=((1.0)*x4799);
IkReal x4806=(sj5*x4799);
IkReal x4807=(sj5*x4798);
evalcond[0]=(((r01*x4807))+(((-1.0)*x4800*x4804))+((r02*x4799)));
evalcond[1]=((((-1.0)*r22*x4804))+(((-1.0)*x4803*x4805))+((x4799*x4802)));
evalcond[2]=((((-1.0)*x4801*x4805))+(((-1.0)*r12*x4804))+((r11*x4806)));
evalcond[3]=((1.0)+((r01*x4806))+(((-1.0)*x4800*x4805))+(((-1.0)*r02*x4804)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4801*x4804))+((cj1*sj2))+((r12*x4799))+((r11*x4807)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4803*x4804))+((r22*x4799))+((x4798*x4802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4808=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4808);
rxp1_1=(px*r21);
rxp1_2=(r11*x4808);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4809=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4809);
rxp1_1=(px*r21);
rxp1_2=(r11*x4809);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4810=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4810);
rxp1_1=(px*r21);
rxp1_2=(r11*x4810);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4813.valid){
continue;
}
IkReal x4811=x4813.value;
IkReal x4812=(sj0*x4811);
cj4array[0]=(((cj1*sj2*x4812))+((cj2*sj1*x4812)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4814=IKsin(j4);
IkReal x4815=IKcos(j4);
IkReal x4816=(r21*sj5);
IkReal x4817=((1.0)*cj5*r20);
evalcond[0]=(r02*x4814);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4815)));
evalcond[2]=((((-1.0)*x4814*x4817))+((x4814*x4816)));
evalcond[3]=((((-1.0)*cj5*r10*x4814))+((r11*sj5*x4814)));
evalcond[4]=(((x4815*x4816))+(((-1.0)*x4815*x4817))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4819=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4819.valid){
continue;
}
IkReal x4818=x4819.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4818))+((cj1*cj2*x4818)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4820=IKsin(j4);
IkReal x4821=IKcos(j4);
IkReal x4822=((1.0)*sj0);
IkReal x4823=((1.0)*cj5);
IkReal x4824=(sj5*x4820);
evalcond[0]=(r02*x4820);
evalcond[1]=((((-1.0)*x4822))+(((-1.0)*r02*x4821)));
evalcond[2]=(((r21*x4824))+(((-1.0)*r20*x4820*x4823)));
evalcond[3]=(((r11*x4824))+(((-1.0)*r10*x4820*x4823)));
evalcond[4]=((((-1.0)*cj2*sj1*x4822))+(((-1.0)*cj1*sj2*x4822))+(((-1.0)*r10*x4821*x4823))+((r11*sj5*x4821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4825=IKPowWithIntegerCheck(r02,-1);
if(!x4825.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4825.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4826=IKsin(j4);
IkReal x4827=IKcos(j4);
IkReal x4828=((1.0)*cj1);
IkReal x4829=(r21*sj5);
IkReal x4830=((1.0)*cj5);
IkReal x4831=(r11*sj5);
evalcond[0]=(r02*x4826);
evalcond[1]=((((-1.0)*r20*x4826*x4830))+((x4826*x4829)));
evalcond[2]=(((x4826*x4831))+(((-1.0)*r10*x4826*x4830)));
evalcond[3]=((((-1.0)*r20*x4827*x4830))+((sj1*sj2))+(((-1.0)*cj2*x4828))+((x4827*x4829)));
evalcond[4]=((((-1.0)*sj0*sj2*x4828))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4827*x4830))+((x4827*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4832=((1.0)*sj0);
IkReal x4833=((1.0)*cj0);
CheckValue<IkReal> x4834 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4832))+(((-1.0)*r02*x4833)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x4832))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4834.valid){
continue;
}
CheckValue<IkReal> x4835=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4834.value)+(((1.5707963267949)*(x4835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4836=IKsin(j4);
IkReal x4837=IKcos(j4);
IkReal x4838=(cj5*r00);
IkReal x4839=(cj5*r10);
IkReal x4840=(r21*sj5);
IkReal x4841=((1.0)*cj2);
IkReal x4842=((1.0)*sj0);
IkReal x4843=(cj1*sj2);
IkReal x4844=(cj5*r20);
IkReal x4845=((1.0)*x4837);
IkReal x4846=((1.0)*x4836);
IkReal x4847=(sj5*x4836);
IkReal x4848=(sj5*x4837);
evalcond[0]=((((-1.0)*x4844*x4846))+(((-1.0)*r22*x4845))+((x4836*x4840)));
evalcond[1]=(cj0+(((-1.0)*x4839*x4846))+((r11*x4847))+(((-1.0)*r12*x4845)));
evalcond[2]=((((-1.0)*x4842))+(((-1.0)*x4838*x4846))+(((-1.0)*r02*x4845))+((r01*x4847)));
evalcond[3]=((((-1.0)*x4844*x4845))+((sj1*sj2))+((r22*x4836))+(((-1.0)*cj1*x4841))+((x4837*x4840)));
evalcond[4]=((((-1.0)*x4838*x4845))+(((-1.0)*cj0*x4843))+(((-1.0)*cj0*sj1*x4841))+((r01*x4848))+((r02*x4836)));
evalcond[5]=(((r12*x4836))+(((-1.0)*x4842*x4843))+(((-1.0)*x4839*x4845))+((r11*x4848))+(((-1.0)*sj0*sj1*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4849=((1.0)*cj5);
CheckValue<IkReal> x4850 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4850.valid){
continue;
}
CheckValue<IkReal> x4851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4849)))),-1);
if(!x4851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4850.value)+(((1.5707963267949)*(x4851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4852=IKsin(j4);
IkReal x4853=IKcos(j4);
IkReal x4854=(cj5*r00);
IkReal x4855=(cj5*r10);
IkReal x4856=(r21*sj5);
IkReal x4857=((1.0)*cj2);
IkReal x4858=((1.0)*sj0);
IkReal x4859=(cj1*sj2);
IkReal x4860=(cj5*r20);
IkReal x4861=((1.0)*x4853);
IkReal x4862=((1.0)*x4852);
IkReal x4863=(sj5*x4852);
IkReal x4864=(sj5*x4853);
evalcond[0]=((((-1.0)*r22*x4861))+(((-1.0)*x4860*x4862))+((x4852*x4856)));
evalcond[1]=((((-1.0)*x4855*x4862))+((r11*x4863))+cj0+(((-1.0)*r12*x4861)));
evalcond[2]=((((-1.0)*x4854*x4862))+((r01*x4863))+(((-1.0)*x4858))+(((-1.0)*r02*x4861)));
evalcond[3]=(((x4853*x4856))+((r22*x4852))+((sj1*sj2))+(((-1.0)*cj1*x4857))+(((-1.0)*x4860*x4861)));
evalcond[4]=((((-1.0)*x4854*x4861))+((r01*x4864))+((r02*x4852))+(((-1.0)*cj0*x4859))+(((-1.0)*cj0*sj1*x4857)));
evalcond[5]=((((-1.0)*x4855*x4861))+((r11*x4864))+((r12*x4852))+(((-1.0)*x4858*x4859))+(((-1.0)*sj0*sj1*x4857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4865=((1.0)*cj5);
CheckValue<IkReal> x4866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4865)))),-1);
if(!x4866.valid){
continue;
}
CheckValue<IkReal> x4867 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4865))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4866.value)))+(x4867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4868=IKsin(j4);
IkReal x4869=IKcos(j4);
IkReal x4870=(cj5*r00);
IkReal x4871=(cj5*r10);
IkReal x4872=(r21*sj5);
IkReal x4873=((1.0)*cj2);
IkReal x4874=((1.0)*sj0);
IkReal x4875=(cj1*sj2);
IkReal x4876=(cj5*r20);
IkReal x4877=((1.0)*x4869);
IkReal x4878=((1.0)*x4868);
IkReal x4879=(sj5*x4868);
IkReal x4880=(sj5*x4869);
evalcond[0]=((((-1.0)*x4876*x4878))+((x4868*x4872))+(((-1.0)*r22*x4877)));
evalcond[1]=(cj0+(((-1.0)*x4871*x4878))+(((-1.0)*r12*x4877))+((r11*x4879)));
evalcond[2]=(((r01*x4879))+(((-1.0)*x4870*x4878))+(((-1.0)*r02*x4877))+(((-1.0)*x4874)));
evalcond[3]=((((-1.0)*x4876*x4877))+((x4869*x4872))+((r22*x4868))+((sj1*sj2))+(((-1.0)*cj1*x4873)));
evalcond[4]=((((-1.0)*cj0*sj1*x4873))+(((-1.0)*x4870*x4877))+((r02*x4868))+((r01*x4880))+(((-1.0)*cj0*x4875)));
evalcond[5]=(((r12*x4868))+((r11*x4880))+(((-1.0)*x4874*x4875))+(((-1.0)*x4871*x4877))+(((-1.0)*sj0*sj1*x4873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4881=((1.0)*cj5);
IkReal x4882=((1.0)*sj5);
IkReal x4883=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4883;
j0eval[1]=((IKabs(((((-1.0)*r10*x4882))+(((-1.0)*r11*x4881)))))+(IKabs(((((-1.0)*r00*x4882))+(((-1.0)*r01*x4881))))));
j0eval[2]=IKsign(x4883);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4884=r21*r21;
IkReal x4885=cj5*cj5;
IkReal x4886=(cj2*sj1);
IkReal x4887=(cj1*sj2);
IkReal x4888=(r21*sj5);
IkReal x4889=((1.0)*cj5*r20);
IkReal x4890=((((-1.0)*x4884))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x4888))+(((-1.0)*x4885*(r20*r20)))+((x4884*x4885)));
j4eval[0]=x4890;
j4eval[1]=((IKabs((((x4886*x4888))+((x4887*x4888))+(((-1.0)*x4886*x4889))+(((-1.0)*x4887*x4889)))))+(IKabs((((r22*x4886))+((r22*x4887))))));
j4eval[2]=IKsign(x4890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4891=cj1*cj1;
IkReal x4892=(cj2*sj2);
IkReal x4893=(cj2*sj1);
IkReal x4894=(cj1*sj1);
j0eval[0]=((((-2.0)*x4891*x4892))+(((-2.0)*cj1*cj2*x4893))+(((-1.06936921195177)*sj2*x4891))+(((-1.06936921195177)*cj1*x4893))+x4892+x4894);
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4893)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.114688717055332)*px))+(((0.828504447384304)*py))), ((((0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4895=IKsin(j0);
IkReal x4896=IKcos(j0);
evalcond[0]=((((-0.163941)*x4895))+(((1.1843)*x4896))+(((-1.0)*px)));
evalcond[1]=((((1.1843)*x4895))+(((-1.0)*py))+(((0.163941)*x4896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4897=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4897;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4898=((1.0)*cj5);
IkReal x4899=((((-1.0)*r01*x4898))+(((-1.0)*r00*sj5)));
j4eval[0]=x4899;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4898))))));
j4eval[2]=IKsign(x4899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4900=((1.0)*cj5);
IkReal x4901=((((-1.0)*r01*x4900))+(((-1.0)*r00*sj5)));
j4eval[0]=x4901;
j4eval[1]=IKsign(x4901);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4900))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4902=((1.0)*cj5);
CheckValue<IkReal> x4903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4902))+(((-1.0)*r00*sj5)))),-1);
if(!x4903.valid){
continue;
}
CheckValue<IkReal> x4904 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4902))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4903.value)))+(x4904.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4905=IKcos(j4);
IkReal x4906=IKsin(j4);
IkReal x4907=((1.0)*sj0);
IkReal x4908=(cj5*r00);
IkReal x4909=(cj5*r10);
IkReal x4910=(cj5*r20);
IkReal x4911=((1.0)*x4905);
IkReal x4912=((1.0)*x4906);
IkReal x4913=(sj5*x4905);
IkReal x4914=(sj5*x4906);
evalcond[0]=(((r21*x4913))+(((-1.0)*x4910*x4911))+((r22*x4906)));
evalcond[1]=(((r21*x4914))+(((-1.0)*x4910*x4912))+(((-1.0)*r22*x4911)));
evalcond[2]=((((-1.0)*x4909*x4912))+cj0+(((-1.0)*r12*x4911))+((r11*x4914)));
evalcond[3]=(((r02*x4906))+(((-1.0)*x4908*x4911))+((r01*x4913))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4909*x4911))+(((-1.0)*x4907))+((r11*x4913))+((r12*x4906)));
evalcond[5]=((((-1.0)*x4907))+(((-1.0)*r02*x4911))+(((-1.0)*x4908*x4912))+((r01*x4914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4915=((1.0)*cj5);
CheckValue<IkReal> x4916 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4915))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4916.valid){
continue;
}
CheckValue<IkReal> x4917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4915)))),-1);
if(!x4917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4916.value)+(((1.5707963267949)*(x4917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4918=IKcos(j4);
IkReal x4919=IKsin(j4);
IkReal x4920=((1.0)*sj0);
IkReal x4921=(cj5*r00);
IkReal x4922=(cj5*r10);
IkReal x4923=(cj5*r20);
IkReal x4924=((1.0)*x4918);
IkReal x4925=((1.0)*x4919);
IkReal x4926=(sj5*x4918);
IkReal x4927=(sj5*x4919);
evalcond[0]=(((r21*x4926))+(((-1.0)*x4923*x4924))+((r22*x4919)));
evalcond[1]=(((r21*x4927))+(((-1.0)*r22*x4924))+(((-1.0)*x4923*x4925)));
evalcond[2]=(cj0+(((-1.0)*x4922*x4925))+(((-1.0)*r12*x4924))+((r11*x4927)));
evalcond[3]=(((r02*x4919))+((r01*x4926))+(((-1.0)*x4921*x4924))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4919))+(((-1.0)*x4922*x4924))+(((-1.0)*x4920))+((r11*x4926)));
evalcond[5]=((((-1.0)*r02*x4924))+((r01*x4927))+(((-1.0)*x4921*x4925))+(((-1.0)*x4920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4928 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4928.valid){
continue;
}
CheckValue<IkReal> x4929=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4928.value)+(((1.5707963267949)*(x4929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4930=IKcos(j4);
IkReal x4931=IKsin(j4);
IkReal x4932=((1.0)*sj0);
IkReal x4933=(cj5*r00);
IkReal x4934=(cj5*r10);
IkReal x4935=(cj5*r20);
IkReal x4936=((1.0)*x4930);
IkReal x4937=((1.0)*x4931);
IkReal x4938=(sj5*x4930);
IkReal x4939=(sj5*x4931);
evalcond[0]=((((-1.0)*x4935*x4936))+((r22*x4931))+((r21*x4938)));
evalcond[1]=((((-1.0)*x4935*x4937))+((r21*x4939))+(((-1.0)*r22*x4936)));
evalcond[2]=(cj0+(((-1.0)*x4934*x4937))+(((-1.0)*r12*x4936))+((r11*x4939)));
evalcond[3]=((((-1.0)*x4933*x4936))+((r01*x4938))+((r02*x4931))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4931))+(((-1.0)*x4934*x4936))+((r11*x4938))+(((-1.0)*x4932)));
evalcond[5]=((((-1.0)*r02*x4936))+(((-1.0)*x4933*x4937))+((r01*x4939))+(((-1.0)*x4932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4940=IKsin(j0);
IkReal x4941=IKcos(j0);
evalcond[0]=((((-0.163941)*x4940))+(((-1.0)*px))+(((0.0397)*x4941)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x4941))+(((0.0397)*x4940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4942=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4942;
j4eval[1]=IKsign(x4942);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4943=((1.0)*cj5);
IkReal x4944=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4943)));
j4eval[0]=x4944;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x4943))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x4944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4945=cj5*cj5;
IkReal x4946=((1.0)*r20);
IkReal x4947=(r01*r21);
IkReal x4948=(r21*sj5);
IkReal x4949=(((cj5*r01*r20*sj5))+((cj5*r00*x4948))+(((-1.0)*r00*x4945*x4946))+(((-1.0)*r02*r22))+(((-1.0)*x4947))+((x4945*x4947)));
j4eval[0]=x4949;
j4eval[1]=((IKabs((((cj0*x4948))+(((-1.0)*cj0*cj5*x4946)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4949);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4950=cj5*cj5;
IkReal x4951=((1.0)*r20);
IkReal x4952=(r01*r21);
IkReal x4953=(r21*sj5);
CheckValue<IkReal> x4954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4951))+((cj0*x4953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4954.valid){
continue;
}
CheckValue<IkReal> x4955=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4953))+(((-1.0)*x4952))+((x4950*x4952))+(((-1.0)*r00*x4950*x4951)))),-1);
if(!x4955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4954.value)+(((1.5707963267949)*(x4955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4956=IKcos(j4);
IkReal x4957=IKsin(j4);
IkReal x4958=(cj5*r00);
IkReal x4959=(cj5*r10);
IkReal x4960=(cj5*r20);
IkReal x4961=((1.0)*x4956);
IkReal x4962=((1.0)*x4957);
IkReal x4963=(sj5*x4956);
IkReal x4964=(sj5*x4957);
evalcond[0]=((((-1.0)*x4960*x4961))+((r22*x4957))+((r21*x4963)));
evalcond[1]=((((-1.0)*x4960*x4962))+(((-1.0)*r22*x4961))+((r21*x4964)));
evalcond[2]=(cj0+(((-1.0)*x4958*x4961))+((r02*x4957))+((r01*x4963)));
evalcond[3]=(sj0+((r12*x4957))+(((-1.0)*x4959*x4961))+((r11*x4963)));
evalcond[4]=(cj0+(((-1.0)*x4959*x4962))+((r11*x4964))+(((-1.0)*r12*x4961)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x4958*x4962))+(((-1.0)*r02*x4961))+((r01*x4964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4965=((1.0)*cj5);
CheckValue<IkReal> x4966 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4965)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4966.valid){
continue;
}
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4965)))),-1);
if(!x4967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4966.value)+(((1.5707963267949)*(x4967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4968=IKcos(j4);
IkReal x4969=IKsin(j4);
IkReal x4970=(cj5*r00);
IkReal x4971=(cj5*r10);
IkReal x4972=(cj5*r20);
IkReal x4973=((1.0)*x4968);
IkReal x4974=((1.0)*x4969);
IkReal x4975=(sj5*x4968);
IkReal x4976=(sj5*x4969);
evalcond[0]=(((r22*x4969))+(((-1.0)*x4972*x4973))+((r21*x4975)));
evalcond[1]=((((-1.0)*r22*x4973))+(((-1.0)*x4972*x4974))+((r21*x4976)));
evalcond[2]=(cj0+((r02*x4969))+(((-1.0)*x4970*x4973))+((r01*x4975)));
evalcond[3]=(sj0+((r12*x4969))+((r11*x4975))+(((-1.0)*x4971*x4973)));
evalcond[4]=(cj0+((r11*x4976))+(((-1.0)*r12*x4973))+(((-1.0)*x4971*x4974)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4973))+(((-1.0)*x4970*x4974))+((r01*x4976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
CheckValue<IkReal> x4978=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4977.value)+(((1.5707963267949)*(x4978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4979=IKcos(j4);
IkReal x4980=IKsin(j4);
IkReal x4981=(cj5*r00);
IkReal x4982=(cj5*r10);
IkReal x4983=(cj5*r20);
IkReal x4984=((1.0)*x4979);
IkReal x4985=((1.0)*x4980);
IkReal x4986=(sj5*x4979);
IkReal x4987=(sj5*x4980);
evalcond[0]=(((r22*x4980))+((r21*x4986))+(((-1.0)*x4983*x4984)));
evalcond[1]=((((-1.0)*r22*x4984))+((r21*x4987))+(((-1.0)*x4983*x4985)));
evalcond[2]=(((r01*x4986))+cj0+(((-1.0)*x4981*x4984))+((r02*x4980)));
evalcond[3]=(sj0+(((-1.0)*x4982*x4984))+((r12*x4980))+((r11*x4986)));
evalcond[4]=((((-1.0)*x4982*x4985))+cj0+((r11*x4987))+(((-1.0)*r12*x4984)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4987))+(((-1.0)*r02*x4984))+(((-1.0)*x4981*x4985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4988=IKsin(j0);
IkReal x4989=IKcos(j0);
IkReal x4990=(cj5*r01);
IkReal x4991=((0.1157)*sj5);
IkReal x4992=(cj5*r11);
evalcond[0]=(x4990+((r00*sj5))+(((-1.0)*x4989)));
evalcond[1]=(x4992+((r10*sj5))+(((-1.0)*x4988)));
evalcond[2]=((((-0.163941)*x4988))+(((-1.0)*r00*x4991))+(((-1.0)*px))+(((-0.1157)*x4990)));
evalcond[3]=((((0.163941)*x4989))+(((-1.0)*py))+(((-0.1157)*x4992))+(((-1.0)*r10*x4991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4993=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4993;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x4993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4994=((1.0)*cj5);
IkReal x4995=((((-1.0)*r01*x4994))+(((-1.0)*r00*sj5)));
j4eval[0]=x4995;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x4994)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4996=cj5*cj5;
IkReal x4997=(r01*r11);
IkReal x4998=((1.0)*r00);
IkReal x4999=(r01*sj5);
IkReal x5000=((((-1.0)*r10*x4996*x4998))+(((-1.0)*r02*r12))+((x4996*x4997))+((cj5*r10*x4999))+(((-1.0)*x4997))+((cj5*r00*r11*sj5)));
j4eval[0]=x5000;
j4eval[1]=IKsign(x5000);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x4998))+((cj0*x4999))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5001=cj5*cj5;
IkReal x5002=(r01*r11);
IkReal x5003=(cj5*r00);
IkReal x5004=(r01*sj5);
CheckValue<IkReal> x5005=IKPowWithIntegerCheck(IKsign((((x5001*x5002))+((cj5*r10*x5004))+(((-1.0)*r02*r12))+(((-1.0)*x5002))+((r11*sj5*x5003))+(((-1.0)*r00*r10*x5001)))),-1);
if(!x5005.valid){
continue;
}
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5003))+((cj0*x5004)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5005.value)))+(x5006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5007=IKcos(j4);
IkReal x5008=IKsin(j4);
IkReal x5009=(cj5*r00);
IkReal x5010=(r01*sj5);
IkReal x5011=(cj5*r10);
IkReal x5012=(cj5*r20);
IkReal x5013=((1.0)*x5007);
IkReal x5014=((1.0)*x5008);
IkReal x5015=(sj5*x5008);
IkReal x5016=(sj5*x5007);
evalcond[0]=((((-1.0)*x5009*x5013))+((x5007*x5010))+((r02*x5008)));
evalcond[1]=(((r12*x5008))+(((-1.0)*x5011*x5013))+((r11*x5016)));
evalcond[2]=((((-1.0)*r22*x5013))+((r21*x5015))+(((-1.0)*x5012*x5014)));
evalcond[3]=((1.0)+((r21*x5016))+(((-1.0)*x5012*x5013))+((r22*x5008)));
evalcond[4]=(cj0+(((-1.0)*x5011*x5014))+(((-1.0)*r12*x5013))+((r11*x5015)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5009*x5014))+(((-1.0)*r02*x5013))+((x5008*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5017=((1.0)*cj5);
CheckValue<IkReal> x5018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5017)))),-1);
if(!x5018.valid){
continue;
}
CheckValue<IkReal> x5019 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5017))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5018.value)))+(x5019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5020=IKcos(j4);
IkReal x5021=IKsin(j4);
IkReal x5022=(cj5*r00);
IkReal x5023=(r01*sj5);
IkReal x5024=(cj5*r10);
IkReal x5025=(cj5*r20);
IkReal x5026=((1.0)*x5020);
IkReal x5027=((1.0)*x5021);
IkReal x5028=(sj5*x5021);
IkReal x5029=(sj5*x5020);
evalcond[0]=(((r02*x5021))+((x5020*x5023))+(((-1.0)*x5022*x5026)));
evalcond[1]=(((r11*x5029))+((r12*x5021))+(((-1.0)*x5024*x5026)));
evalcond[2]=((((-1.0)*x5025*x5027))+(((-1.0)*r22*x5026))+((r21*x5028)));
evalcond[3]=((1.0)+(((-1.0)*x5025*x5026))+((r22*x5021))+((r21*x5029)));
evalcond[4]=(((r11*x5028))+cj0+(((-1.0)*r12*x5026))+(((-1.0)*x5024*x5027)));
evalcond[5]=((((-1.0)*r02*x5026))+(((-1.0)*sj0))+((x5021*x5023))+(((-1.0)*x5022*x5027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5030 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5030.valid){
continue;
}
CheckValue<IkReal> x5031=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5030.value)+(((1.5707963267949)*(x5031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5032=IKcos(j4);
IkReal x5033=IKsin(j4);
IkReal x5034=(cj5*r00);
IkReal x5035=(r01*sj5);
IkReal x5036=(cj5*r10);
IkReal x5037=(cj5*r20);
IkReal x5038=((1.0)*x5032);
IkReal x5039=((1.0)*x5033);
IkReal x5040=(sj5*x5033);
IkReal x5041=(sj5*x5032);
evalcond[0]=(((r02*x5033))+((x5032*x5035))+(((-1.0)*x5034*x5038)));
evalcond[1]=(((r12*x5033))+(((-1.0)*x5036*x5038))+((r11*x5041)));
evalcond[2]=((((-1.0)*x5037*x5039))+((r21*x5040))+(((-1.0)*r22*x5038)));
evalcond[3]=((1.0)+(((-1.0)*x5037*x5038))+((r21*x5041))+((r22*x5033)));
evalcond[4]=(cj0+(((-1.0)*r12*x5038))+(((-1.0)*x5036*x5039))+((r11*x5040)));
evalcond[5]=((((-1.0)*sj0))+((x5033*x5035))+(((-1.0)*r02*x5038))+(((-1.0)*x5034*x5039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5042=IKcos(j0);
IkReal x5043=IKsin(j0);
evalcond[0]=((((-0.163941)*x5043))+(((-1.0)*px))+(((-0.5723)*x5042)));
evalcond[1]=((((-1.0)*py))+(((-0.5723)*x5043))+(((0.163941)*x5042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5044=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5044;
j4eval[1]=IKsign(x5044);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5045=((1.0)*cj5);
IkReal x5046=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5045)));
j4eval[0]=x5046;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5045))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5047=cj5*cj5;
IkReal x5048=((1.0)*r20);
IkReal x5049=(r01*r21);
IkReal x5050=(r21*sj5);
IkReal x5051=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x5047*x5048))+(((-1.0)*r02*r22))+(((-1.0)*x5049))+((x5047*x5049))+((cj5*r00*x5050)));
j4eval[0]=x5051;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5048))+((cj0*x5050)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5052=cj5*cj5;
IkReal x5053=((1.0)*r20);
IkReal x5054=(r01*r21);
IkReal x5055=(r21*sj5);
CheckValue<IkReal> x5056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5053))+((cj0*x5055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5056.valid){
continue;
}
CheckValue<IkReal> x5057=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5052*x5054))+(((-1.0)*r00*x5052*x5053))+((cj5*r00*x5055))+(((-1.0)*x5054)))),-1);
if(!x5057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5056.value)+(((1.5707963267949)*(x5057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5058=IKcos(j4);
IkReal x5059=IKsin(j4);
IkReal x5060=(cj5*r00);
IkReal x5061=(cj5*r10);
IkReal x5062=(cj5*r20);
IkReal x5063=((1.0)*x5058);
IkReal x5064=((1.0)*x5059);
IkReal x5065=(sj5*x5058);
IkReal x5066=(sj5*x5059);
evalcond[0]=(((r22*x5059))+((r21*x5065))+(((-1.0)*x5062*x5063)));
evalcond[1]=((((-1.0)*r22*x5063))+((r21*x5066))+(((-1.0)*x5062*x5064)));
evalcond[2]=(cj0+(((-1.0)*x5060*x5063))+((r01*x5065))+((r02*x5059)));
evalcond[3]=(sj0+(((-1.0)*x5061*x5063))+((r12*x5059))+((r11*x5065)));
evalcond[4]=(cj0+(((-1.0)*x5061*x5064))+(((-1.0)*r12*x5063))+((r11*x5066)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5063))+(((-1.0)*x5060*x5064))+((r01*x5066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5067=((1.0)*cj5);
CheckValue<IkReal> x5068 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5067)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5068.valid){
continue;
}
CheckValue<IkReal> x5069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5067)))),-1);
if(!x5069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5068.value)+(((1.5707963267949)*(x5069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5070=IKcos(j4);
IkReal x5071=IKsin(j4);
IkReal x5072=(cj5*r00);
IkReal x5073=(cj5*r10);
IkReal x5074=(cj5*r20);
IkReal x5075=((1.0)*x5070);
IkReal x5076=((1.0)*x5071);
IkReal x5077=(sj5*x5070);
IkReal x5078=(sj5*x5071);
evalcond[0]=(((r21*x5077))+(((-1.0)*x5074*x5075))+((r22*x5071)));
evalcond[1]=(((r21*x5078))+(((-1.0)*r22*x5075))+(((-1.0)*x5074*x5076)));
evalcond[2]=(cj0+(((-1.0)*x5072*x5075))+((r02*x5071))+((r01*x5077)));
evalcond[3]=(sj0+(((-1.0)*x5073*x5075))+((r12*x5071))+((r11*x5077)));
evalcond[4]=(cj0+(((-1.0)*x5073*x5076))+(((-1.0)*r12*x5075))+((r11*x5078)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5075))+(((-1.0)*x5072*x5076))+((r01*x5078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5079 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5079.valid){
continue;
}
CheckValue<IkReal> x5080=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5079.value)+(((1.5707963267949)*(x5080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5081=IKcos(j4);
IkReal x5082=IKsin(j4);
IkReal x5083=(cj5*r00);
IkReal x5084=(cj5*r10);
IkReal x5085=(cj5*r20);
IkReal x5086=((1.0)*x5081);
IkReal x5087=((1.0)*x5082);
IkReal x5088=(sj5*x5081);
IkReal x5089=(sj5*x5082);
evalcond[0]=(((r21*x5088))+((r22*x5082))+(((-1.0)*x5085*x5086)));
evalcond[1]=(((r21*x5089))+(((-1.0)*x5085*x5087))+(((-1.0)*r22*x5086)));
evalcond[2]=(cj0+((r01*x5088))+(((-1.0)*x5083*x5086))+((r02*x5082)));
evalcond[3]=(sj0+((r11*x5088))+((r12*x5082))+(((-1.0)*x5084*x5086)));
evalcond[4]=((((-1.0)*r12*x5086))+cj0+((r11*x5089))+(((-1.0)*x5084*x5087)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5089))+(((-1.0)*x5083*x5087))+(((-1.0)*r02*x5086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5090=((1.0)*sj5);
IkReal x5091=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5091))+(((-1.0)*r10*x5090)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5090))+(((-1.0)*r01*x5091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5091))+(((-1.0)*r10*x5090))))+IKsqr(((((-1.0)*r00*x5090))+(((-1.0)*r01*x5091))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5091))+(((-1.0)*r10*x5090))), ((((-1.0)*r00*x5090))+(((-1.0)*r01*x5091))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5092=IKsin(j0);
IkReal x5093=IKcos(j0);
IkReal x5094=(cj5*r01);
IkReal x5095=((0.1157)*sj5);
IkReal x5096=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5093+x5094);
evalcond[1]=(((r10*sj5))+x5092+x5096);
evalcond[2]=((((-1.0)*r00*x5095))+(((-0.1157)*x5094))+(((-1.0)*px))+(((-0.163941)*x5092)));
evalcond[3]=((((-1.0)*r10*x5095))+(((0.163941)*x5093))+(((-0.1157)*x5096))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5097=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5097;
j4eval[1]=IKsign(x5097);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5098=((1.0)*cj5);
IkReal x5099=((((-1.0)*r11*x5098))+(((-1.0)*r10*sj5)));
j4eval[0]=x5099;
j4eval[1]=IKsign(x5099);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5100=cj5*cj5;
IkReal x5101=(r01*r11);
IkReal x5102=((1.0)*r00);
IkReal x5103=(r01*sj5);
IkReal x5104=((((-1.0)*r02*r12))+(((-1.0)*x5101))+(((-1.0)*r10*x5100*x5102))+((x5100*x5101))+((cj5*r10*x5103))+((cj5*r00*r11*sj5)));
j4eval[0]=x5104;
j4eval[1]=IKsign(x5104);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5103))+(((-1.0)*cj0*cj5*x5102))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5105=cj5*cj5;
IkReal x5106=(r01*r11);
IkReal x5107=(cj5*r00);
IkReal x5108=(r01*sj5);
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5107))+((cj0*x5108)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
CheckValue<IkReal> x5110=IKPowWithIntegerCheck(IKsign((((x5105*x5106))+(((-1.0)*r00*r10*x5105))+(((-1.0)*r02*r12))+(((-1.0)*x5106))+((r11*sj5*x5107))+((cj5*r10*x5108)))),-1);
if(!x5110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5109.value)+(((1.5707963267949)*(x5110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5111=IKcos(j4);
IkReal x5112=IKsin(j4);
IkReal x5113=(cj5*r00);
IkReal x5114=(r01*sj5);
IkReal x5115=(cj5*r10);
IkReal x5116=(cj5*r20);
IkReal x5117=((1.0)*x5111);
IkReal x5118=((1.0)*x5112);
IkReal x5119=(sj5*x5112);
IkReal x5120=(sj5*x5111);
evalcond[0]=(((r02*x5112))+(((-1.0)*x5113*x5117))+((x5111*x5114)));
evalcond[1]=((((-1.0)*x5115*x5117))+((r11*x5120))+((r12*x5112)));
evalcond[2]=((((-1.0)*r22*x5117))+(((-1.0)*x5116*x5118))+((r21*x5119)));
evalcond[3]=((-1.0)+(((-1.0)*x5116*x5117))+((r22*x5112))+((r21*x5120)));
evalcond[4]=(cj0+(((-1.0)*x5115*x5118))+((r11*x5119))+(((-1.0)*r12*x5117)));
evalcond[5]=(((x5112*x5114))+(((-1.0)*sj0))+(((-1.0)*r02*x5117))+(((-1.0)*x5113*x5118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5121=((1.0)*cj5);
CheckValue<IkReal> x5122=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5121)))),-1);
if(!x5122.valid){
continue;
}
CheckValue<IkReal> x5123 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5121)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5122.value)))+(x5123.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5124=IKcos(j4);
IkReal x5125=IKsin(j4);
IkReal x5126=(cj5*r00);
IkReal x5127=(r01*sj5);
IkReal x5128=(cj5*r10);
IkReal x5129=(cj5*r20);
IkReal x5130=((1.0)*x5124);
IkReal x5131=((1.0)*x5125);
IkReal x5132=(sj5*x5125);
IkReal x5133=(sj5*x5124);
evalcond[0]=(((x5124*x5127))+(((-1.0)*x5126*x5130))+((r02*x5125)));
evalcond[1]=((((-1.0)*x5128*x5130))+((r12*x5125))+((r11*x5133)));
evalcond[2]=((((-1.0)*x5129*x5131))+((r21*x5132))+(((-1.0)*r22*x5130)));
evalcond[3]=((-1.0)+((r22*x5125))+(((-1.0)*x5129*x5130))+((r21*x5133)));
evalcond[4]=(cj0+(((-1.0)*x5128*x5131))+((r11*x5132))+(((-1.0)*r12*x5130)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5126*x5131))+((x5125*x5127))+(((-1.0)*r02*x5130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5134=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5134.valid){
continue;
}
CheckValue<IkReal> x5135 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5134.value)))+(x5135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5136=IKcos(j4);
IkReal x5137=IKsin(j4);
IkReal x5138=(cj5*r00);
IkReal x5139=(r01*sj5);
IkReal x5140=(cj5*r10);
IkReal x5141=(cj5*r20);
IkReal x5142=((1.0)*x5136);
IkReal x5143=((1.0)*x5137);
IkReal x5144=(sj5*x5137);
IkReal x5145=(sj5*x5136);
evalcond[0]=(((x5136*x5139))+((r02*x5137))+(((-1.0)*x5138*x5142)));
evalcond[1]=((((-1.0)*x5140*x5142))+((r12*x5137))+((r11*x5145)));
evalcond[2]=(((r21*x5144))+(((-1.0)*x5141*x5143))+(((-1.0)*r22*x5142)));
evalcond[3]=((-1.0)+((r21*x5145))+((r22*x5137))+(((-1.0)*x5141*x5142)));
evalcond[4]=(cj0+(((-1.0)*x5140*x5143))+(((-1.0)*r12*x5142))+((r11*x5144)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5142))+((x5137*x5139))+(((-1.0)*x5138*x5143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5146=IKsin(j0);
IkReal x5147=IKcos(j0);
evalcond[0]=((((0.5723)*x5147))+(((-1.0)*px))+(((-0.163941)*x5146)));
evalcond[1]=((((0.5723)*x5146))+(((-1.0)*py))+(((0.163941)*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5148=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5148;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5149=((1.0)*cj5);
IkReal x5150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5149)));
j4eval[0]=x5150;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5149)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5151=((1.0)*cj5);
IkReal x5152=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5151)));
j4eval[0]=x5152;
j4eval[1]=IKsign(x5152);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5151))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5153=((1.0)*cj5);
CheckValue<IkReal> x5154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5153)))),-1);
if(!x5154.valid){
continue;
}
CheckValue<IkReal> x5155 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5153))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5154.value)))+(x5155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5156=IKcos(j4);
IkReal x5157=IKsin(j4);
IkReal x5158=((1.0)*sj0);
IkReal x5159=(cj5*r00);
IkReal x5160=(cj5*r10);
IkReal x5161=(cj5*r20);
IkReal x5162=((1.0)*x5156);
IkReal x5163=((1.0)*x5157);
IkReal x5164=(sj5*x5156);
IkReal x5165=(sj5*x5157);
evalcond[0]=(((r21*x5164))+(((-1.0)*x5161*x5162))+((r22*x5157)));
evalcond[1]=((((-1.0)*r22*x5162))+((r21*x5165))+(((-1.0)*x5161*x5163)));
evalcond[2]=(cj0+(((-1.0)*x5160*x5163))+(((-1.0)*r12*x5162))+((r11*x5165)));
evalcond[3]=(((r01*x5164))+(((-1.0)*x5159*x5162))+((r02*x5157))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5160*x5162))+((r12*x5157))+((r11*x5164))+(((-1.0)*x5158)));
evalcond[5]=(((r01*x5165))+(((-1.0)*r02*x5162))+(((-1.0)*x5159*x5163))+(((-1.0)*x5158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5166=((1.0)*cj5);
CheckValue<IkReal> x5167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5166)))),-1);
if(!x5167.valid){
continue;
}
CheckValue<IkReal> x5168 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5167.value)))+(x5168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5169=IKcos(j4);
IkReal x5170=IKsin(j4);
IkReal x5171=((1.0)*sj0);
IkReal x5172=(cj5*r00);
IkReal x5173=(cj5*r10);
IkReal x5174=(cj5*r20);
IkReal x5175=((1.0)*x5169);
IkReal x5176=((1.0)*x5170);
IkReal x5177=(sj5*x5169);
IkReal x5178=(sj5*x5170);
evalcond[0]=((((-1.0)*x5174*x5175))+((r22*x5170))+((r21*x5177)));
evalcond[1]=((((-1.0)*x5174*x5176))+(((-1.0)*r22*x5175))+((r21*x5178)));
evalcond[2]=((((-1.0)*x5173*x5176))+cj0+(((-1.0)*r12*x5175))+((r11*x5178)));
evalcond[3]=(((r01*x5177))+(((-1.0)*x5172*x5175))+((r02*x5170))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5173*x5175))+(((-1.0)*x5171))+((r12*x5170))+((r11*x5177)));
evalcond[5]=(((r01*x5178))+(((-1.0)*x5172*x5176))+(((-1.0)*r02*x5175))+(((-1.0)*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5179.value)+(((1.5707963267949)*(x5180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5181=IKcos(j4);
IkReal x5182=IKsin(j4);
IkReal x5183=((1.0)*sj0);
IkReal x5184=(cj5*r00);
IkReal x5185=(cj5*r10);
IkReal x5186=(cj5*r20);
IkReal x5187=((1.0)*x5181);
IkReal x5188=((1.0)*x5182);
IkReal x5189=(sj5*x5181);
IkReal x5190=(sj5*x5182);
evalcond[0]=(((r22*x5182))+((r21*x5189))+(((-1.0)*x5186*x5187)));
evalcond[1]=((((-1.0)*r22*x5187))+((r21*x5190))+(((-1.0)*x5186*x5188)));
evalcond[2]=(cj0+((r11*x5190))+(((-1.0)*x5185*x5188))+(((-1.0)*r12*x5187)));
evalcond[3]=(((r01*x5189))+(((-1.0)*x5184*x5187))+((r02*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5185*x5187))+((r11*x5189))+(((-1.0)*x5183))+((r12*x5182)));
evalcond[5]=((((-1.0)*r02*x5187))+(((-1.0)*x5184*x5188))+((r01*x5190))+(((-1.0)*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((-0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5191=IKcos(j0);
IkReal x5192=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-1.1843)*x5191))+(((-0.163941)*x5192)));
evalcond[1]=((((-1.0)*py))+(((-1.1843)*x5192))+(((0.163941)*x5191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5193=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5193;
j4eval[1]=IKsign(x5193);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5194=((1.0)*cj5);
IkReal x5195=((((-1.0)*r11*x5194))+(((-1.0)*r10*sj5)));
j4eval[0]=x5195;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5194)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5196=cj5*cj5;
IkReal x5197=((1.0)*r20);
IkReal x5198=(r01*r21);
IkReal x5199=(r21*sj5);
IkReal x5200=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5198))+(((-1.0)*r00*x5196*x5197))+((x5196*x5198))+((cj5*r00*x5199)));
j4eval[0]=x5200;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5197))+((cj0*x5199))))));
j4eval[2]=IKsign(x5200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5201=cj5*cj5;
IkReal x5202=((1.0)*r20);
IkReal x5203=(r01*r21);
IkReal x5204=(r21*sj5);
CheckValue<IkReal> x5205=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5201*x5203))+(((-1.0)*r00*x5201*x5202))+((cj5*r00*x5204))+(((-1.0)*x5203)))),-1);
if(!x5205.valid){
continue;
}
CheckValue<IkReal> x5206 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5202))+((cj0*x5204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5205.value)))+(x5206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5207=IKcos(j4);
IkReal x5208=IKsin(j4);
IkReal x5209=(cj5*r00);
IkReal x5210=(cj5*r10);
IkReal x5211=(cj5*r20);
IkReal x5212=((1.0)*x5207);
IkReal x5213=((1.0)*x5208);
IkReal x5214=(sj5*x5207);
IkReal x5215=(sj5*x5208);
evalcond[0]=(((r22*x5208))+(((-1.0)*x5211*x5212))+((r21*x5214)));
evalcond[1]=((((-1.0)*x5211*x5213))+(((-1.0)*r22*x5212))+((r21*x5215)));
evalcond[2]=(((r01*x5214))+cj0+((r02*x5208))+(((-1.0)*x5209*x5212)));
evalcond[3]=(sj0+((r11*x5214))+((r12*x5208))+(((-1.0)*x5210*x5212)));
evalcond[4]=(cj0+((r11*x5215))+(((-1.0)*x5210*x5213))+(((-1.0)*r12*x5212)));
evalcond[5]=(((r01*x5215))+(((-1.0)*sj0))+(((-1.0)*x5209*x5213))+(((-1.0)*r02*x5212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5216=((1.0)*cj5);
CheckValue<IkReal> x5217 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5216)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5217.valid){
continue;
}
CheckValue<IkReal> x5218=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5216))+(((-1.0)*r10*sj5)))),-1);
if(!x5218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5217.value)+(((1.5707963267949)*(x5218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5219=IKcos(j4);
IkReal x5220=IKsin(j4);
IkReal x5221=(cj5*r00);
IkReal x5222=(cj5*r10);
IkReal x5223=(cj5*r20);
IkReal x5224=((1.0)*x5219);
IkReal x5225=((1.0)*x5220);
IkReal x5226=(sj5*x5219);
IkReal x5227=(sj5*x5220);
evalcond[0]=((((-1.0)*x5223*x5224))+((r21*x5226))+((r22*x5220)));
evalcond[1]=((((-1.0)*x5223*x5225))+((r21*x5227))+(((-1.0)*r22*x5224)));
evalcond[2]=(cj0+(((-1.0)*x5221*x5224))+((r02*x5220))+((r01*x5226)));
evalcond[3]=(sj0+(((-1.0)*x5222*x5224))+((r11*x5226))+((r12*x5220)));
evalcond[4]=(cj0+(((-1.0)*x5222*x5225))+(((-1.0)*r12*x5224))+((r11*x5227)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5221*x5225))+(((-1.0)*r02*x5224))+((r01*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5228 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5228.valid){
continue;
}
CheckValue<IkReal> x5229=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5228.value)+(((1.5707963267949)*(x5229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5230=IKcos(j4);
IkReal x5231=IKsin(j4);
IkReal x5232=(cj5*r00);
IkReal x5233=(cj5*r10);
IkReal x5234=(cj5*r20);
IkReal x5235=((1.0)*x5230);
IkReal x5236=((1.0)*x5231);
IkReal x5237=(sj5*x5230);
IkReal x5238=(sj5*x5231);
evalcond[0]=((((-1.0)*x5234*x5235))+((r21*x5237))+((r22*x5231)));
evalcond[1]=((((-1.0)*x5234*x5236))+(((-1.0)*r22*x5235))+((r21*x5238)));
evalcond[2]=(cj0+((r01*x5237))+(((-1.0)*x5232*x5235))+((r02*x5231)));
evalcond[3]=(sj0+((r11*x5237))+((r12*x5231))+(((-1.0)*x5233*x5235)));
evalcond[4]=(cj0+((r11*x5238))+(((-1.0)*r12*x5235))+(((-1.0)*x5233*x5236)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5235))+((r01*x5238))+(((-1.0)*x5232*x5236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5239=IKcos(j0);
IkReal x5240=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x5240))+(((-0.0397)*x5239)));
evalcond[1]=((((-1.0)*py))+(((-0.0397)*x5240))+(((0.163941)*x5239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5241=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5241;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5242=((1.0)*cj5);
IkReal x5243=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5242)));
j4eval[0]=x5243;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5242))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5244=((1.0)*cj5);
IkReal x5245=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5244)));
j4eval[0]=x5245;
j4eval[1]=IKsign(x5245);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5244))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5246=((1.0)*cj5);
CheckValue<IkReal> x5247 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5246))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5247.valid){
continue;
}
CheckValue<IkReal> x5248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5246)))),-1);
if(!x5248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5247.value)+(((1.5707963267949)*(x5248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5249=IKcos(j4);
IkReal x5250=IKsin(j4);
IkReal x5251=((1.0)*sj0);
IkReal x5252=(cj5*r00);
IkReal x5253=(cj5*r10);
IkReal x5254=(cj5*r20);
IkReal x5255=((1.0)*x5249);
IkReal x5256=((1.0)*x5250);
IkReal x5257=(sj5*x5249);
IkReal x5258=(sj5*x5250);
evalcond[0]=(((r22*x5250))+(((-1.0)*x5254*x5255))+((r21*x5257)));
evalcond[1]=((((-1.0)*x5254*x5256))+((r21*x5258))+(((-1.0)*r22*x5255)));
evalcond[2]=(cj0+(((-1.0)*r12*x5255))+((r11*x5258))+(((-1.0)*x5253*x5256)));
evalcond[3]=(((r01*x5257))+(((-1.0)*x5252*x5255))+(((-1.0)*cj0))+((r02*x5250)));
evalcond[4]=(((r12*x5250))+(((-1.0)*x5251))+((r11*x5257))+(((-1.0)*x5253*x5255)));
evalcond[5]=((((-1.0)*r02*x5255))+((r01*x5258))+(((-1.0)*x5251))+(((-1.0)*x5252*x5256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5259=((1.0)*cj5);
CheckValue<IkReal> x5260=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5259))+(((-1.0)*r00*sj5)))),-1);
if(!x5260.valid){
continue;
}
CheckValue<IkReal> x5261 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5260.value)))+(x5261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5262=IKcos(j4);
IkReal x5263=IKsin(j4);
IkReal x5264=((1.0)*sj0);
IkReal x5265=(cj5*r00);
IkReal x5266=(cj5*r10);
IkReal x5267=(cj5*r20);
IkReal x5268=((1.0)*x5262);
IkReal x5269=((1.0)*x5263);
IkReal x5270=(sj5*x5262);
IkReal x5271=(sj5*x5263);
evalcond[0]=(((r21*x5270))+(((-1.0)*x5267*x5268))+((r22*x5263)));
evalcond[1]=(((r21*x5271))+(((-1.0)*x5267*x5269))+(((-1.0)*r22*x5268)));
evalcond[2]=(cj0+(((-1.0)*r12*x5268))+(((-1.0)*x5266*x5269))+((r11*x5271)));
evalcond[3]=(((r02*x5263))+((r01*x5270))+(((-1.0)*x5265*x5268))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5263))+(((-1.0)*x5264))+(((-1.0)*x5266*x5268))+((r11*x5270)));
evalcond[5]=((((-1.0)*r02*x5268))+(((-1.0)*x5264))+((r01*x5271))+(((-1.0)*x5265*x5269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5272 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5272.valid){
continue;
}
CheckValue<IkReal> x5273=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5272.value)+(((1.5707963267949)*(x5273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5274=IKcos(j4);
IkReal x5275=IKsin(j4);
IkReal x5276=((1.0)*sj0);
IkReal x5277=(cj5*r00);
IkReal x5278=(cj5*r10);
IkReal x5279=(cj5*r20);
IkReal x5280=((1.0)*x5274);
IkReal x5281=((1.0)*x5275);
IkReal x5282=(sj5*x5274);
IkReal x5283=(sj5*x5275);
evalcond[0]=(((r22*x5275))+(((-1.0)*x5279*x5280))+((r21*x5282)));
evalcond[1]=((((-1.0)*r22*x5280))+(((-1.0)*x5279*x5281))+((r21*x5283)));
evalcond[2]=(cj0+(((-1.0)*x5278*x5281))+(((-1.0)*r12*x5280))+((r11*x5283)));
evalcond[3]=(((r02*x5275))+((r01*x5282))+(((-1.0)*x5277*x5280))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5278*x5280))+(((-1.0)*x5276))+((r11*x5282))+((r12*x5275)));
evalcond[5]=((((-1.0)*x5276))+((r01*x5283))+(((-1.0)*r02*x5280))+(((-1.0)*x5277*x5281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5284=((1.0)*sj5);
IkReal x5285=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5285))+(((-1.0)*r10*x5284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5285))+(((-1.0)*r00*x5284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5285))+(((-1.0)*r10*x5284))))+IKsqr(((((-1.0)*r01*x5285))+(((-1.0)*r00*x5284))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5285))+(((-1.0)*r10*x5284))), ((((-1.0)*r01*x5285))+(((-1.0)*r00*x5284))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5286=IKsin(j0);
IkReal x5287=IKcos(j0);
IkReal x5288=(cj5*r01);
IkReal x5289=((0.1157)*sj5);
IkReal x5290=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5288+x5287);
evalcond[1]=(((r10*sj5))+x5290+x5286);
evalcond[2]=((((-0.163941)*x5286))+(((-1.0)*r00*x5289))+(((-0.1157)*x5288))+(((-1.0)*px)));
evalcond[3]=((((0.163941)*x5287))+(((-0.1157)*x5290))+(((-1.0)*py))+(((-1.0)*r10*x5289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5291=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5291;
j4eval[1]=IKsign(x5291);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5292=((1.0)*cj5);
IkReal x5293=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5292)));
j4eval[0]=x5293;
j4eval[1]=IKsign(x5293);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5292))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5294=cj5*cj5;
IkReal x5295=(r01*r11);
IkReal x5296=((1.0)*r00);
IkReal x5297=(r01*sj5);
IkReal x5298=(((x5294*x5295))+(((-1.0)*r10*x5294*x5296))+(((-1.0)*r02*r12))+((cj5*r10*x5297))+(((-1.0)*x5295))+((cj5*r00*r11*sj5)));
j4eval[0]=x5298;
j4eval[1]=IKsign(x5298);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5297))+(((-1.0)*cj0*cj5*x5296))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5299=cj5*cj5;
IkReal x5300=(r01*r11);
IkReal x5301=(cj5*r00);
IkReal x5302=(r01*sj5);
CheckValue<IkReal> x5303=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5301))+(((-1.0)*r02*r12))+((cj5*r10*x5302))+(((-1.0)*r00*r10*x5299))+(((-1.0)*x5300))+((x5299*x5300)))),-1);
if(!x5303.valid){
continue;
}
CheckValue<IkReal> x5304 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5301))+((cj0*x5302)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5303.value)))+(x5304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5305=IKcos(j4);
IkReal x5306=IKsin(j4);
IkReal x5307=(cj5*r00);
IkReal x5308=(r01*sj5);
IkReal x5309=(cj5*r10);
IkReal x5310=(cj5*r20);
IkReal x5311=((1.0)*x5305);
IkReal x5312=((1.0)*x5306);
IkReal x5313=(sj5*x5306);
IkReal x5314=(sj5*x5305);
evalcond[0]=(((r02*x5306))+(((-1.0)*x5307*x5311))+((x5305*x5308)));
evalcond[1]=(((r12*x5306))+((r11*x5314))+(((-1.0)*x5309*x5311)));
evalcond[2]=((((-1.0)*x5310*x5312))+((r21*x5313))+(((-1.0)*r22*x5311)));
evalcond[3]=((-1.0)+(((-1.0)*x5310*x5311))+((r21*x5314))+((r22*x5306)));
evalcond[4]=((((-1.0)*r12*x5311))+cj0+((r11*x5313))+(((-1.0)*x5309*x5312)));
evalcond[5]=((((-1.0)*sj0))+((x5306*x5308))+(((-1.0)*x5307*x5312))+(((-1.0)*r02*x5311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5315=((1.0)*cj5);
CheckValue<IkReal> x5316 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5315)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5316.valid){
continue;
}
CheckValue<IkReal> x5317=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5315))+(((-1.0)*r10*sj5)))),-1);
if(!x5317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5316.value)+(((1.5707963267949)*(x5317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5318=IKcos(j4);
IkReal x5319=IKsin(j4);
IkReal x5320=(cj5*r00);
IkReal x5321=(r01*sj5);
IkReal x5322=(cj5*r10);
IkReal x5323=(cj5*r20);
IkReal x5324=((1.0)*x5318);
IkReal x5325=((1.0)*x5319);
IkReal x5326=(sj5*x5319);
IkReal x5327=(sj5*x5318);
evalcond[0]=(((x5318*x5321))+((r02*x5319))+(((-1.0)*x5320*x5324)));
evalcond[1]=(((r11*x5327))+(((-1.0)*x5322*x5324))+((r12*x5319)));
evalcond[2]=((((-1.0)*x5323*x5325))+(((-1.0)*r22*x5324))+((r21*x5326)));
evalcond[3]=((-1.0)+((r22*x5319))+(((-1.0)*x5323*x5324))+((r21*x5327)));
evalcond[4]=(((r11*x5326))+cj0+(((-1.0)*x5322*x5325))+(((-1.0)*r12*x5324)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5324))+((x5319*x5321))+(((-1.0)*x5320*x5325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5328=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5328.valid){
continue;
}
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5328.value)))+(x5329.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5330=IKcos(j4);
IkReal x5331=IKsin(j4);
IkReal x5332=(cj5*r00);
IkReal x5333=(r01*sj5);
IkReal x5334=(cj5*r10);
IkReal x5335=(cj5*r20);
IkReal x5336=((1.0)*x5330);
IkReal x5337=((1.0)*x5331);
IkReal x5338=(sj5*x5331);
IkReal x5339=(sj5*x5330);
evalcond[0]=((((-1.0)*x5332*x5336))+((r02*x5331))+((x5330*x5333)));
evalcond[1]=(((r11*x5339))+((r12*x5331))+(((-1.0)*x5334*x5336)));
evalcond[2]=((((-1.0)*x5335*x5337))+(((-1.0)*r22*x5336))+((r21*x5338)));
evalcond[3]=((-1.0)+(((-1.0)*x5335*x5336))+((r21*x5339))+((r22*x5331)));
evalcond[4]=(cj0+((r11*x5338))+(((-1.0)*r12*x5336))+(((-1.0)*x5334*x5337)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5336))+(((-1.0)*x5332*x5337))+((x5331*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5340=IKsin(j0);
IkReal x5341=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.5723)*x5341))+(((-0.163941)*x5340)));
evalcond[1]=((((0.163941)*x5341))+(((-1.0)*py))+(((0.5723)*x5340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5342=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5342;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5343=((1.0)*cj5);
IkReal x5344=((((-1.0)*r01*x5343))+(((-1.0)*r00*sj5)));
j4eval[0]=x5344;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5343))))));
j4eval[2]=IKsign(x5344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5345=((1.0)*cj5);
IkReal x5346=((((-1.0)*r01*x5345))+(((-1.0)*r00*sj5)));
j4eval[0]=x5346;
j4eval[1]=IKsign(x5346);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5345))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5347=((1.0)*cj5);
CheckValue<IkReal> x5348 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5347)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5348.valid){
continue;
}
CheckValue<IkReal> x5349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5347))+(((-1.0)*r00*sj5)))),-1);
if(!x5349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5348.value)+(((1.5707963267949)*(x5349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5350=IKcos(j4);
IkReal x5351=IKsin(j4);
IkReal x5352=((1.0)*sj0);
IkReal x5353=(cj5*r00);
IkReal x5354=(cj5*r10);
IkReal x5355=(cj5*r20);
IkReal x5356=((1.0)*x5350);
IkReal x5357=((1.0)*x5351);
IkReal x5358=(sj5*x5350);
IkReal x5359=(sj5*x5351);
evalcond[0]=((((-1.0)*x5355*x5356))+((r22*x5351))+((r21*x5358)));
evalcond[1]=((((-1.0)*x5355*x5357))+(((-1.0)*r22*x5356))+((r21*x5359)));
evalcond[2]=(cj0+((r11*x5359))+(((-1.0)*r12*x5356))+(((-1.0)*x5354*x5357)));
evalcond[3]=((((-1.0)*x5353*x5356))+((r01*x5358))+((r02*x5351))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5358))+(((-1.0)*x5352))+(((-1.0)*x5354*x5356))+((r12*x5351)));
evalcond[5]=((((-1.0)*r02*x5356))+(((-1.0)*x5353*x5357))+((r01*x5359))+(((-1.0)*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5360=((1.0)*cj5);
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
CheckValue<IkReal> x5362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5360)))),-1);
if(!x5362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5361.value)+(((1.5707963267949)*(x5362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5363=IKcos(j4);
IkReal x5364=IKsin(j4);
IkReal x5365=((1.0)*sj0);
IkReal x5366=(cj5*r00);
IkReal x5367=(cj5*r10);
IkReal x5368=(cj5*r20);
IkReal x5369=((1.0)*x5363);
IkReal x5370=((1.0)*x5364);
IkReal x5371=(sj5*x5363);
IkReal x5372=(sj5*x5364);
evalcond[0]=(((r22*x5364))+((r21*x5371))+(((-1.0)*x5368*x5369)));
evalcond[1]=((((-1.0)*r22*x5369))+((r21*x5372))+(((-1.0)*x5368*x5370)));
evalcond[2]=(cj0+(((-1.0)*x5367*x5370))+((r11*x5372))+(((-1.0)*r12*x5369)));
evalcond[3]=(((r02*x5364))+(((-1.0)*x5366*x5369))+((r01*x5371))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5364))+(((-1.0)*x5367*x5369))+((r11*x5371))+(((-1.0)*x5365)));
evalcond[5]=((((-1.0)*r02*x5369))+(((-1.0)*x5366*x5370))+(((-1.0)*x5365))+((r01*x5372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5373 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5373.valid){
continue;
}
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5373.value)+(((1.5707963267949)*(x5374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5375=IKcos(j4);
IkReal x5376=IKsin(j4);
IkReal x5377=((1.0)*sj0);
IkReal x5378=(cj5*r00);
IkReal x5379=(cj5*r10);
IkReal x5380=(cj5*r20);
IkReal x5381=((1.0)*x5375);
IkReal x5382=((1.0)*x5376);
IkReal x5383=(sj5*x5375);
IkReal x5384=(sj5*x5376);
evalcond[0]=(((r22*x5376))+(((-1.0)*x5380*x5381))+((r21*x5383)));
evalcond[1]=((((-1.0)*x5380*x5382))+(((-1.0)*r22*x5381))+((r21*x5384)));
evalcond[2]=(cj0+((r11*x5384))+(((-1.0)*x5379*x5382))+(((-1.0)*r12*x5381)));
evalcond[3]=(((r02*x5376))+((r01*x5383))+(((-1.0)*cj0))+(((-1.0)*x5378*x5381)));
evalcond[4]=((((-1.0)*x5377))+((r11*x5383))+(((-1.0)*x5379*x5381))+((r12*x5376)));
evalcond[5]=((((-1.0)*x5377))+(((-1.0)*r02*x5381))+((r01*x5384))+(((-1.0)*x5378*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5385=IKsin(j0);
IkReal x5386=IKcos(j0);
IkReal x5387=(cj5*r01);
IkReal x5388=((0.1157)*sj5);
IkReal x5389=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5387+(((-1.0)*x5386)));
evalcond[1]=(((r10*sj5))+x5389+(((-1.0)*x5385)));
evalcond[2]=((((-0.1157)*x5387))+(((-0.163941)*x5385))+(((-1.0)*px))+(((-1.0)*r00*x5388)));
evalcond[3]=((((-0.1157)*x5389))+(((-1.0)*py))+(((-1.0)*r10*x5388))+(((0.163941)*x5386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5390=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5390;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5391=((1.0)*cj5);
IkReal x5392=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5391)));
j4eval[0]=x5392;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5391))))));
j4eval[2]=IKsign(x5392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5393=cj5*cj5;
IkReal x5394=(r01*r11);
IkReal x5395=((1.0)*r00);
IkReal x5396=(r01*sj5);
IkReal x5397=((((-1.0)*r02*r12))+((x5393*x5394))+((cj5*r10*x5396))+(((-1.0)*r10*x5393*x5395))+(((-1.0)*x5394))+((cj5*r00*r11*sj5)));
j4eval[0]=x5397;
j4eval[1]=IKsign(x5397);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5396))+(((-1.0)*cj0*cj5*x5395))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5398=cj5*cj5;
IkReal x5399=(r01*r11);
IkReal x5400=(cj5*r00);
IkReal x5401=(r01*sj5);
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5400))+((cj0*x5401)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
CheckValue<IkReal> x5403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x5398))+((r11*sj5*x5400))+(((-1.0)*r02*r12))+((x5398*x5399))+((cj5*r10*x5401))+(((-1.0)*x5399)))),-1);
if(!x5403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5402.value)+(((1.5707963267949)*(x5403.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5404=IKcos(j4);
IkReal x5405=IKsin(j4);
IkReal x5406=(cj5*r00);
IkReal x5407=(r01*sj5);
IkReal x5408=(cj5*r10);
IkReal x5409=(cj5*r20);
IkReal x5410=((1.0)*x5404);
IkReal x5411=((1.0)*x5405);
IkReal x5412=(sj5*x5405);
IkReal x5413=(sj5*x5404);
evalcond[0]=((((-1.0)*x5406*x5410))+((r02*x5405))+((x5404*x5407)));
evalcond[1]=(((r12*x5405))+((r11*x5413))+(((-1.0)*x5408*x5410)));
evalcond[2]=((((-1.0)*r22*x5410))+((r21*x5412))+(((-1.0)*x5409*x5411)));
evalcond[3]=((1.0)+((r22*x5405))+((r21*x5413))+(((-1.0)*x5409*x5410)));
evalcond[4]=(((r11*x5412))+cj0+(((-1.0)*r12*x5410))+(((-1.0)*x5408*x5411)));
evalcond[5]=((((-1.0)*r02*x5410))+(((-1.0)*sj0))+(((-1.0)*x5406*x5411))+((x5405*x5407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5414=((1.0)*cj5);
CheckValue<IkReal> x5415=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5414)))),-1);
if(!x5415.valid){
continue;
}
CheckValue<IkReal> x5416 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5414))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5415.value)))+(x5416.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5417=IKcos(j4);
IkReal x5418=IKsin(j4);
IkReal x5419=(cj5*r00);
IkReal x5420=(r01*sj5);
IkReal x5421=(cj5*r10);
IkReal x5422=(cj5*r20);
IkReal x5423=((1.0)*x5417);
IkReal x5424=((1.0)*x5418);
IkReal x5425=(sj5*x5418);
IkReal x5426=(sj5*x5417);
evalcond[0]=(((x5417*x5420))+((r02*x5418))+(((-1.0)*x5419*x5423)));
evalcond[1]=((((-1.0)*x5421*x5423))+((r12*x5418))+((r11*x5426)));
evalcond[2]=((((-1.0)*x5422*x5424))+((r21*x5425))+(((-1.0)*r22*x5423)));
evalcond[3]=((1.0)+(((-1.0)*x5422*x5423))+((r22*x5418))+((r21*x5426)));
evalcond[4]=(cj0+(((-1.0)*x5421*x5424))+((r11*x5425))+(((-1.0)*r12*x5423)));
evalcond[5]=((((-1.0)*sj0))+((x5418*x5420))+(((-1.0)*x5419*x5424))+(((-1.0)*r02*x5423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5427 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5427.valid){
continue;
}
CheckValue<IkReal> x5428=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5427.value)+(((1.5707963267949)*(x5428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5429=IKcos(j4);
IkReal x5430=IKsin(j4);
IkReal x5431=(cj5*r00);
IkReal x5432=(r01*sj5);
IkReal x5433=(cj5*r10);
IkReal x5434=(cj5*r20);
IkReal x5435=((1.0)*x5429);
IkReal x5436=((1.0)*x5430);
IkReal x5437=(sj5*x5430);
IkReal x5438=(sj5*x5429);
evalcond[0]=((((-1.0)*x5431*x5435))+((r02*x5430))+((x5429*x5432)));
evalcond[1]=((((-1.0)*x5433*x5435))+((r11*x5438))+((r12*x5430)));
evalcond[2]=((((-1.0)*x5434*x5436))+(((-1.0)*r22*x5435))+((r21*x5437)));
evalcond[3]=((1.0)+((r22*x5430))+(((-1.0)*x5434*x5435))+((r21*x5438)));
evalcond[4]=(cj0+(((-1.0)*r12*x5435))+(((-1.0)*x5433*x5436))+((r11*x5437)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5431*x5436))+(((-1.0)*r02*x5435))+((x5430*x5432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5439=IKcos(j0);
IkReal x5440=IKsin(j0);
evalcond[0]=((((-0.163941)*x5440))+(((-0.5723)*x5439))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x5439))+(((-1.0)*py))+(((-0.5723)*x5440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5441=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5441;
j4eval[1]=IKsign(x5441);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5442=((1.0)*cj5);
IkReal x5443=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5442)));
j4eval[0]=x5443;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5442))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5444=cj5*cj5;
IkReal x5445=((1.0)*r20);
IkReal x5446=(r01*r21);
IkReal x5447=(r21*sj5);
IkReal x5448=(((cj5*r01*r20*sj5))+(((-1.0)*x5446))+(((-1.0)*r02*r22))+((x5444*x5446))+((cj5*r00*x5447))+(((-1.0)*r00*x5444*x5445)));
j4eval[0]=x5448;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5445))+((cj0*x5447)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5449=cj5*cj5;
IkReal x5450=((1.0)*r20);
IkReal x5451=(r01*r21);
IkReal x5452=(r21*sj5);
CheckValue<IkReal> x5453=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5449*x5451))+((cj5*r00*x5452))+(((-1.0)*r00*x5449*x5450))+(((-1.0)*x5451)))),-1);
if(!x5453.valid){
continue;
}
CheckValue<IkReal> x5454 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5450))+((cj0*x5452)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5453.value)))+(x5454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5455=IKcos(j4);
IkReal x5456=IKsin(j4);
IkReal x5457=(cj5*r00);
IkReal x5458=(cj5*r10);
IkReal x5459=(cj5*r20);
IkReal x5460=((1.0)*x5455);
IkReal x5461=((1.0)*x5456);
IkReal x5462=(sj5*x5455);
IkReal x5463=(sj5*x5456);
evalcond[0]=((((-1.0)*x5459*x5460))+((r22*x5456))+((r21*x5462)));
evalcond[1]=((((-1.0)*x5459*x5461))+((r21*x5463))+(((-1.0)*r22*x5460)));
evalcond[2]=(((r01*x5462))+cj0+((r02*x5456))+(((-1.0)*x5457*x5460)));
evalcond[3]=(((r12*x5456))+sj0+((r11*x5462))+(((-1.0)*x5458*x5460)));
evalcond[4]=(cj0+((r11*x5463))+(((-1.0)*x5458*x5461))+(((-1.0)*r12*x5460)));
evalcond[5]=(((r01*x5463))+(((-1.0)*sj0))+(((-1.0)*r02*x5460))+(((-1.0)*x5457*x5461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5464=((1.0)*cj5);
CheckValue<IkReal> x5465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5464)))),-1);
if(!x5465.valid){
continue;
}
CheckValue<IkReal> x5466 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5464))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5465.value)))+(x5466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5467=IKcos(j4);
IkReal x5468=IKsin(j4);
IkReal x5469=(cj5*r00);
IkReal x5470=(cj5*r10);
IkReal x5471=(cj5*r20);
IkReal x5472=((1.0)*x5467);
IkReal x5473=((1.0)*x5468);
IkReal x5474=(sj5*x5467);
IkReal x5475=(sj5*x5468);
evalcond[0]=(((r22*x5468))+(((-1.0)*x5471*x5472))+((r21*x5474)));
evalcond[1]=((((-1.0)*r22*x5472))+(((-1.0)*x5471*x5473))+((r21*x5475)));
evalcond[2]=(cj0+((r02*x5468))+((r01*x5474))+(((-1.0)*x5469*x5472)));
evalcond[3]=(sj0+((r12*x5468))+(((-1.0)*x5470*x5472))+((r11*x5474)));
evalcond[4]=(cj0+(((-1.0)*r12*x5472))+(((-1.0)*x5470*x5473))+((r11*x5475)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5475))+(((-1.0)*r02*x5472))+(((-1.0)*x5469*x5473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5476 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5476.valid){
continue;
}
CheckValue<IkReal> x5477=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5476.value)+(((1.5707963267949)*(x5477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5478=IKcos(j4);
IkReal x5479=IKsin(j4);
IkReal x5480=(cj5*r00);
IkReal x5481=(cj5*r10);
IkReal x5482=(cj5*r20);
IkReal x5483=((1.0)*x5478);
IkReal x5484=((1.0)*x5479);
IkReal x5485=(sj5*x5478);
IkReal x5486=(sj5*x5479);
evalcond[0]=(((r21*x5485))+((r22*x5479))+(((-1.0)*x5482*x5483)));
evalcond[1]=((((-1.0)*r22*x5483))+((r21*x5486))+(((-1.0)*x5482*x5484)));
evalcond[2]=(cj0+((r01*x5485))+(((-1.0)*x5480*x5483))+((r02*x5479)));
evalcond[3]=((((-1.0)*x5481*x5483))+sj0+((r11*x5485))+((r12*x5479)));
evalcond[4]=((((-1.0)*x5481*x5484))+(((-1.0)*r12*x5483))+cj0+((r11*x5486)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5486))+(((-1.0)*x5480*x5484))+(((-1.0)*r02*x5483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5487=cj1*cj1;
IkReal x5488=(cj2*sj1);
IkReal x5489=(cj5*r01);
IkReal x5490=(r00*sj5);
IkReal x5491=((1000000.0)*py);
IkReal x5492=(cj1*sj2);
IkReal x5493=(cj1*sj1);
IkReal x5494=(sj2*x5487);
IkReal x5495=((115700.0)*r10*sj5);
IkReal x5496=((115700.0)*cj5*r11);
CheckValue<IkReal> x5497=IKPowWithIntegerCheck(((((-1144600.0)*cj2*x5494))+(((572300.0)*x5493))+(((572300.0)*cj2*sj2))+(((-612000.0)*x5494))+(((-612000.0)*cj1*x5488))+(((-1144600.0)*cj1*cj2*x5488))),-1);
if(!x5497.valid){
continue;
}
CheckValue<IkReal> x5498=IKPowWithIntegerCheck(((((-1.0)*x5492))+(((-1.0)*x5488))),-1);
if(!x5498.valid){
continue;
}
if( IKabs(((x5497.value)*(((((163941.0)*x5490))+(((163941.0)*x5489))+(((-1.0)*x5491*x5492))+(((-1.0)*x5488*x5495))+(((-1.0)*x5488*x5496))+(((-1.0)*x5488*x5491))+(((-1.0)*x5492*x5495))+(((-1.0)*x5492*x5496)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5498.value)*(((((-1.0)*x5490))+(((-1.0)*x5489)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5497.value)*(((((163941.0)*x5490))+(((163941.0)*x5489))+(((-1.0)*x5491*x5492))+(((-1.0)*x5488*x5495))+(((-1.0)*x5488*x5496))+(((-1.0)*x5488*x5491))+(((-1.0)*x5492*x5495))+(((-1.0)*x5492*x5496))))))+IKsqr(((x5498.value)*(((((-1.0)*x5490))+(((-1.0)*x5489))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5497.value)*(((((163941.0)*x5490))+(((163941.0)*x5489))+(((-1.0)*x5491*x5492))+(((-1.0)*x5488*x5495))+(((-1.0)*x5488*x5496))+(((-1.0)*x5488*x5491))+(((-1.0)*x5492*x5495))+(((-1.0)*x5492*x5496))))), ((x5498.value)*(((((-1.0)*x5490))+(((-1.0)*x5489))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5499=IKcos(j0);
IkReal x5500=IKsin(j0);
IkReal x5501=(cj5*r01);
IkReal x5502=((0.1157)*sj5);
IkReal x5503=((1.0)*sj1);
IkReal x5504=(cj5*r11);
IkReal x5505=((1.0)*cj1*sj2);
IkReal x5506=((0.5723)*sj1*sj2);
IkReal x5507=(cj2*x5499);
IkReal x5508=(cj1*x5500);
evalcond[0]=(((r00*sj5))+x5501+(((-1.0)*x5503*x5507))+(((-1.0)*x5499*x5505)));
evalcond[1]=((((-1.0)*cj2*x5500*x5503))+x5504+((r10*sj5))+(((-1.0)*x5500*x5505)));
evalcond[2]=((((-0.163941)*x5500))+(((-1.0)*r00*x5502))+(((0.612)*cj1*x5499))+(((-1.0)*px))+(((-0.1157)*x5501))+(((0.5723)*cj1*x5507))+(((-1.0)*x5499*x5506)));
evalcond[3]=((((-1.0)*r10*x5502))+(((-1.0)*x5500*x5506))+(((0.612)*x5508))+(((-1.0)*py))+(((-0.1157)*x5504))+(((0.5723)*cj2*x5508))+(((0.163941)*x5499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5509=((1.0)*cj5);
IkReal x5510=((((-1.0)*r01*x5509))+(((-1.0)*r00*sj5)));
j4eval[0]=x5510;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5509))))));
j4eval[2]=IKsign(x5510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5511=((1.0)*cj5);
IkReal x5512=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5511)));
j4eval[0]=x5512;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5511)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5513=((1.0)*sj0);
IkReal x5514=((1.0)*cj0);
IkReal x5515=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5515;
j4eval[1]=((IKabs(((((-1.0)*r02*x5514))+(((-1.0)*r12*x5513)))))+(IKabs(((((-1.0)*r11*sj5*x5513))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x5514))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x5515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5516=((-1.0)*r20);
IkReal x5518 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5518)==0){
continue;
}
IkReal x5517=pow(x5518,-0.5);
CheckValue<IkReal> x5519 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5516),IKFAST_ATAN2_MAGTHRESH);
if(!x5519.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5519.value));
IkReal gconst115=(r21*x5517);
IkReal gconst116=(x5516*x5517);
CheckValue<IkReal> x5520 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5520.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5520.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5521=((-1.0)*r20);
IkReal x5522=x5517;
CheckValue<IkReal> x5524 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5521),IKFAST_ATAN2_MAGTHRESH);
if(!x5524.valid){
continue;
}
IkReal x5523=((-1.0)*(x5524.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5523;
IkReal gconst114=x5523;
IkReal gconst115=(r21*x5522);
IkReal gconst116=(x5521*x5522);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5525=((-1.0)*r20);
IkReal x5526=x5517;
CheckValue<IkReal> x5528 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5525),IKFAST_ATAN2_MAGTHRESH);
if(!x5528.valid){
continue;
}
IkReal x5527=((-1.0)*(x5528.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5527;
IkReal gconst114=x5527;
IkReal gconst115=(r21*x5526);
IkReal gconst116=(x5525*x5526);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5529=((-1.0)*r20);
IkReal x5530=x5517;
CheckValue<IkReal> x5532 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5529),IKFAST_ATAN2_MAGTHRESH);
if(!x5532.valid){
continue;
}
IkReal x5531=((-1.0)*(x5532.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5531;
IkReal gconst114=x5531;
IkReal gconst115=(r21*x5530);
IkReal gconst116=(x5529*x5530);
IkReal x5533=((1.0)*(r22*r22));
CheckValue<IkReal> x5537=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5533))),-1);
if(!x5537.valid){
continue;
}
IkReal x5534=x5537.value;
IkReal x5535=((1.0)*x5534);
IkReal x5536=((((-1.0)*x5535*(r20*r20*r20*r20)))+(((-1.0)*x5533))+(((-1.0)*x5535*(r21*r21*r21*r21)))+(((-2.0)*x5534*(r20*r20)*(r21*r21))));
j4eval[0]=x5536;
j4eval[1]=IKsign(x5536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5538=(cj2*sj1);
IkReal x5539=(gconst115*r21);
IkReal x5540=(cj1*sj2);
IkReal x5541=((1.0)*gconst116*r20);
CheckValue<IkReal> x5542=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5541))+(((2.0)*gconst116*r20*x5539))+(((-1.0)*(x5539*x5539)))+(((-1.0)*(r22*r22))))),-1);
if(!x5542.valid){
continue;
}
CheckValue<IkReal> x5543 = IKatan2WithCheck(IkReal((((r22*x5538))+((r22*x5540)))),IkReal(((((-1.0)*x5538*x5541))+((x5539*x5540))+(((-1.0)*x5540*x5541))+((x5538*x5539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5542.value)))+(x5543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5544=IKsin(j4);
IkReal x5545=IKcos(j4);
IkReal x5546=(sj1*sj2);
IkReal x5547=((1.0)*x5545);
IkReal x5548=((1.0)*cj1*cj2);
IkReal x5549=(gconst115*x5544);
IkReal x5550=(gconst115*x5545);
IkReal x5551=((1.0)*gconst116*x5544);
evalcond[0]=((((-1.0)*r20*x5551))+(((-1.0)*r22*x5547))+((r21*x5549)));
evalcond[1]=(cj0+((r11*x5549))+(((-1.0)*r12*x5547))+(((-1.0)*r10*x5551)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5551))+(((-1.0)*r02*x5547))+((r01*x5549)));
evalcond[3]=((((-1.0)*gconst116*r20*x5547))+((cj2*sj1))+((r21*x5550))+((cj1*sj2))+((r22*x5544)));
evalcond[4]=(((r01*x5550))+((cj0*x5546))+(((-1.0)*cj0*x5548))+((r02*x5544))+(((-1.0)*gconst116*r00*x5547)));
evalcond[5]=(((sj0*x5546))+(((-1.0)*gconst116*r10*x5547))+((r12*x5544))+((r11*x5550))+(((-1.0)*sj0*x5548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5552=((1.0)*gconst116);
CheckValue<IkReal> x5553=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5552)))),-1);
if(!x5553.valid){
continue;
}
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5552))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5553.value)))+(x5554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5555=IKsin(j4);
IkReal x5556=IKcos(j4);
IkReal x5557=(sj1*sj2);
IkReal x5558=((1.0)*x5556);
IkReal x5559=((1.0)*cj1*cj2);
IkReal x5560=(gconst115*x5555);
IkReal x5561=(gconst115*x5556);
IkReal x5562=((1.0)*gconst116*x5555);
evalcond[0]=(((r21*x5560))+(((-1.0)*r22*x5558))+(((-1.0)*r20*x5562)));
evalcond[1]=(cj0+(((-1.0)*r10*x5562))+(((-1.0)*r12*x5558))+((r11*x5560)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5562))+(((-1.0)*r02*x5558))+((r01*x5560)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5558))+((cj1*sj2))+((r21*x5561))+((r22*x5555)));
evalcond[4]=(((r02*x5555))+((cj0*x5557))+(((-1.0)*cj0*x5559))+(((-1.0)*gconst116*r00*x5558))+((r01*x5561)));
evalcond[5]=((((-1.0)*sj0*x5559))+(((-1.0)*gconst116*r10*x5558))+((sj0*x5557))+((r12*x5555))+((r11*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5563=((1.0)*gconst116);
CheckValue<IkReal> x5564 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5563))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5564.valid){
continue;
}
CheckValue<IkReal> x5565=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5563)))),-1);
if(!x5565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5564.value)+(((1.5707963267949)*(x5565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5566=IKsin(j4);
IkReal x5567=IKcos(j4);
IkReal x5568=(sj1*sj2);
IkReal x5569=((1.0)*x5567);
IkReal x5570=((1.0)*cj1*cj2);
IkReal x5571=(gconst115*x5566);
IkReal x5572=(gconst115*x5567);
IkReal x5573=((1.0)*gconst116*x5566);
evalcond[0]=((((-1.0)*r22*x5569))+((r21*x5571))+(((-1.0)*r20*x5573)));
evalcond[1]=((((-1.0)*r12*x5569))+cj0+(((-1.0)*r10*x5573))+((r11*x5571)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5573))+(((-1.0)*r02*x5569))+((r01*x5571)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5566))+((r21*x5572))+(((-1.0)*gconst116*r20*x5569)));
evalcond[4]=(((r02*x5566))+((cj0*x5568))+(((-1.0)*gconst116*r00*x5569))+(((-1.0)*cj0*x5570))+((r01*x5572)));
evalcond[5]=((((-1.0)*sj0*x5570))+((r11*x5572))+(((-1.0)*gconst116*r10*x5569))+((sj0*x5568))+((r12*x5566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5574=((-1.0)*r21);
IkReal x5576 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5576)==0){
continue;
}
IkReal x5575=pow(x5576,-0.5);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(x5574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5577.value))));
IkReal gconst118=(x5574*x5575);
IkReal gconst119=((1.0)*r20*x5575);
CheckValue<IkReal> x5578 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5578.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5578.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5579=((-1.0)*r21);
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(x5579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
IkReal x5580=((1.0)*(x5582.value));
IkReal x5581=x5575;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5580)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5580)));
IkReal gconst118=(x5579*x5581);
IkReal gconst119=((1.0)*r20*x5581);
IkReal x5583=r22*r22;
IkReal x5584=((1.0)*x5583);
CheckValue<IkReal> x5588=IKPowWithIntegerCheck(((-1.0)+x5583),-1);
if(!x5588.valid){
continue;
}
IkReal x5585=x5588.value;
if((((1.0)+(((-1.0)*x5584)))) < -0.00001)
continue;
IkReal x5586=IKsqrt(((1.0)+(((-1.0)*x5584))));
IkReal x5587=(cj0*x5585*x5586);
j4eval[0]=((IKabs((x5587+(((-1.0)*x5584*x5587)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5589=((-1.0)*r21);
CheckValue<IkReal> x5592 = IKatan2WithCheck(IkReal(x5589),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5592.valid){
continue;
}
IkReal x5590=((1.0)*(x5592.value));
IkReal x5591=x5575;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5590)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5590)));
IkReal gconst118=(x5589*x5591);
IkReal gconst119=((1.0)*r20*x5591);
IkReal x5593=r22*r22;
IkReal x5594=((1.0)*x5593);
CheckValue<IkReal> x5598=IKPowWithIntegerCheck(((-1.0)+x5593),-1);
if(!x5598.valid){
continue;
}
IkReal x5595=x5598.value;
if((((1.0)+(((-1.0)*x5594)))) < -0.00001)
continue;
IkReal x5596=IKsqrt(((1.0)+(((-1.0)*x5594))));
IkReal x5597=(sj0*x5595*x5596);
j4eval[0]=((IKabs((x5597+(((-1.0)*x5594*x5597)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5599=((-1.0)*r21);
CheckValue<IkReal> x5602 = IKatan2WithCheck(IkReal(x5599),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5602.valid){
continue;
}
IkReal x5600=((1.0)*(x5602.value));
IkReal x5601=x5575;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5600)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5600)));
IkReal gconst118=(x5599*x5601);
IkReal gconst119=((1.0)*r20*x5601);
IkReal x5603=r22*r22;
IkReal x5604=(r12*sj0);
IkReal x5605=(cj0*r02);
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(((-1.0)+x5603),-1);
if(!x5609.valid){
continue;
}
IkReal x5606=x5609.value;
if((((1.0)+(((-1.0)*x5603)))) < -0.00001)
continue;
IkReal x5607=IKsqrt(((1.0)+(((-1.0)*x5603))));
IkReal x5608=(r22*x5606*x5607);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5605))+(((-1.0)*x5604)))))+(IKabs((((x5604*x5608))+((x5605*x5608))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5610=((1.0)*sj0);
IkReal x5611=((1.0)*gconst118);
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5611)))),-1);
if(!x5612.valid){
continue;
}
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5610))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5610))+((cj0*gconst119*r00))+(((-1.0)*cj0*r01*x5611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5612.value)))+(x5613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5614=IKsin(j4);
IkReal x5615=IKcos(j4);
IkReal x5616=(gconst118*r01);
IkReal x5617=(sj1*sj2);
IkReal x5618=(gconst119*r20);
IkReal x5619=(gconst119*r10);
IkReal x5620=(gconst119*r00);
IkReal x5621=(gconst118*r21);
IkReal x5622=(gconst118*r11);
IkReal x5623=((1.0)*x5615);
IkReal x5624=((1.0)*cj1*cj2);
IkReal x5625=((1.0)*x5614);
evalcond[0]=((((-1.0)*x5618*x5625))+((x5614*x5621))+(((-1.0)*r22*x5623)));
evalcond[1]=(cj0+((x5614*x5622))+(((-1.0)*x5619*x5625))+(((-1.0)*r12*x5623)));
evalcond[2]=((((-1.0)*sj0))+((x5614*x5616))+(((-1.0)*r02*x5623))+(((-1.0)*x5620*x5625)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5618*x5623))+((x5615*x5621))+((cj1*sj2))+((r22*x5614)));
evalcond[4]=(((cj0*x5617))+((r02*x5614))+(((-1.0)*cj0*x5624))+((x5615*x5616))+(((-1.0)*x5620*x5623)));
evalcond[5]=(((sj0*x5617))+((x5615*x5622))+(((-1.0)*x5619*x5623))+((r12*x5614))+(((-1.0)*sj0*x5624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5626=((1.0)*gconst119);
CheckValue<IkReal> x5627 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x5626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5627.valid){
continue;
}
CheckValue<IkReal> x5628=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5626)))),-1);
if(!x5628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5627.value)+(((1.5707963267949)*(x5628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5629=IKsin(j4);
IkReal x5630=IKcos(j4);
IkReal x5631=(gconst118*r01);
IkReal x5632=(sj1*sj2);
IkReal x5633=(gconst119*r20);
IkReal x5634=(gconst119*r10);
IkReal x5635=(gconst119*r00);
IkReal x5636=(gconst118*r21);
IkReal x5637=(gconst118*r11);
IkReal x5638=((1.0)*x5630);
IkReal x5639=((1.0)*cj1*cj2);
IkReal x5640=((1.0)*x5629);
evalcond[0]=(((x5629*x5636))+(((-1.0)*r22*x5638))+(((-1.0)*x5633*x5640)));
evalcond[1]=((((-1.0)*r12*x5638))+(((-1.0)*x5634*x5640))+cj0+((x5629*x5637)));
evalcond[2]=((((-1.0)*sj0))+((x5629*x5631))+(((-1.0)*r02*x5638))+(((-1.0)*x5635*x5640)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5633*x5638))+((cj1*sj2))+((x5630*x5636))+((r22*x5629)));
evalcond[4]=((((-1.0)*x5635*x5638))+((r02*x5629))+((x5630*x5631))+((cj0*x5632))+(((-1.0)*cj0*x5639)));
evalcond[5]=((((-1.0)*sj0*x5639))+((x5630*x5637))+((r12*x5629))+((sj0*x5632))+(((-1.0)*x5634*x5638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5641=((1.0)*gconst119);
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
CheckValue<IkReal> x5643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5641)))),-1);
if(!x5643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5642.value)+(((1.5707963267949)*(x5643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5644=IKsin(j4);
IkReal x5645=IKcos(j4);
IkReal x5646=(gconst118*r01);
IkReal x5647=(sj1*sj2);
IkReal x5648=(gconst119*r20);
IkReal x5649=(gconst119*r10);
IkReal x5650=(gconst119*r00);
IkReal x5651=(gconst118*r21);
IkReal x5652=(gconst118*r11);
IkReal x5653=((1.0)*x5645);
IkReal x5654=((1.0)*cj1*cj2);
IkReal x5655=((1.0)*x5644);
evalcond[0]=((((-1.0)*r22*x5653))+((x5644*x5651))+(((-1.0)*x5648*x5655)));
evalcond[1]=((((-1.0)*r12*x5653))+cj0+((x5644*x5652))+(((-1.0)*x5649*x5655)));
evalcond[2]=((((-1.0)*sj0))+((x5644*x5646))+(((-1.0)*r02*x5653))+(((-1.0)*x5650*x5655)));
evalcond[3]=(((cj2*sj1))+((x5645*x5651))+((cj1*sj2))+(((-1.0)*x5648*x5653))+((r22*x5644)));
evalcond[4]=(((cj0*x5647))+((x5645*x5646))+(((-1.0)*x5650*x5653))+(((-1.0)*cj0*x5654))+((r02*x5644)));
evalcond[5]=(((x5645*x5652))+(((-1.0)*sj0*x5654))+((sj0*x5647))+((r12*x5644))+(((-1.0)*x5649*x5653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5656=((-1.0)*r10);
IkReal x5658 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5658)==0){
continue;
}
IkReal x5657=pow(x5658,-0.5);
CheckValue<IkReal> x5659 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5656),IKFAST_ATAN2_MAGTHRESH);
if(!x5659.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5659.value));
IkReal gconst121=(r11*x5657);
IkReal gconst122=(x5656*x5657);
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5660.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5661=((-1.0)*r10);
IkReal x5662=x5657;
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5661),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
IkReal x5663=((-1.0)*(x5664.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5663;
IkReal gconst120=x5663;
IkReal gconst121=(r11*x5662);
IkReal gconst122=(x5661*x5662);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5665=((1.0)*sj0);
IkReal x5666=((1.0)*gconst121);
CheckValue<IkReal> x5667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5666))+(((-1.0)*gconst122*r21)))),-1);
if(!x5667.valid){
continue;
}
CheckValue<IkReal> x5668 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5665)))),IkReal(((((-1.0)*cj0*r01*x5666))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5665))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5667.value)))+(x5668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5669=IKsin(j4);
IkReal x5670=IKcos(j4);
IkReal x5671=(gconst121*r11);
IkReal x5672=(sj1*sj2);
IkReal x5673=(gconst122*r00);
IkReal x5674=(gconst122*r10);
IkReal x5675=(gconst122*r20);
IkReal x5676=((1.0)*x5670);
IkReal x5677=((1.0)*cj1*cj2);
IkReal x5678=((1.0)*x5669);
IkReal x5679=(gconst121*x5669);
IkReal x5680=(gconst121*x5670);
evalcond[0]=((((-1.0)*r22*x5676))+((r21*x5679))+(((-1.0)*x5675*x5678)));
evalcond[1]=(cj0+(((-1.0)*r12*x5676))+((x5669*x5671))+(((-1.0)*x5674*x5678)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5679))+(((-1.0)*x5673*x5678))+(((-1.0)*r02*x5676)));
evalcond[3]=(((cj2*sj1))+((r22*x5669))+((cj1*sj2))+((r21*x5680))+(((-1.0)*x5675*x5676)));
evalcond[4]=(((cj0*x5672))+((r02*x5669))+(((-1.0)*cj0*x5677))+(((-1.0)*x5673*x5676))+((r01*x5680)));
evalcond[5]=(((x5670*x5671))+((sj0*x5672))+((r12*x5669))+(((-1.0)*x5674*x5676))+(((-1.0)*sj0*x5677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5681=((1.0)*gconst122);
CheckValue<IkReal> x5682 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5681))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5682.valid){
continue;
}
CheckValue<IkReal> x5683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5681)))),-1);
if(!x5683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5682.value)+(((1.5707963267949)*(x5683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5684=IKsin(j4);
IkReal x5685=IKcos(j4);
IkReal x5686=(gconst121*r11);
IkReal x5687=(sj1*sj2);
IkReal x5688=(gconst122*r00);
IkReal x5689=(gconst122*r10);
IkReal x5690=(gconst122*r20);
IkReal x5691=((1.0)*x5685);
IkReal x5692=((1.0)*cj1*cj2);
IkReal x5693=((1.0)*x5684);
IkReal x5694=(gconst121*x5684);
IkReal x5695=(gconst121*x5685);
evalcond[0]=((((-1.0)*x5690*x5693))+(((-1.0)*r22*x5691))+((r21*x5694)));
evalcond[1]=(cj0+((x5684*x5686))+(((-1.0)*x5689*x5693))+(((-1.0)*r12*x5691)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5691))+(((-1.0)*x5688*x5693))+((r01*x5694)));
evalcond[3]=((((-1.0)*x5690*x5691))+((cj2*sj1))+((r22*x5684))+((cj1*sj2))+((r21*x5695)));
evalcond[4]=((((-1.0)*cj0*x5692))+((r02*x5684))+(((-1.0)*x5688*x5691))+((cj0*x5687))+((r01*x5695)));
evalcond[5]=(((x5685*x5686))+(((-1.0)*sj0*x5692))+((sj0*x5687))+((r12*x5684))+(((-1.0)*x5689*x5691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5696=((-1.0)*r11);
IkReal x5698 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5698)==0){
continue;
}
IkReal x5697=pow(x5698,-0.5);
CheckValue<IkReal> x5699 = IKatan2WithCheck(IkReal(x5696),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5699.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5699.value))));
IkReal gconst124=(x5696*x5697);
IkReal gconst125=((1.0)*r10*x5697);
CheckValue<IkReal> x5700 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5700.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5700.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5701=((-1.0)*r11);
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal(x5701),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
IkReal x5702=((1.0)*(x5704.value));
IkReal x5703=x5697;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5702)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5702)));
IkReal gconst124=(x5701*x5703);
IkReal gconst125=((1.0)*r10*x5703);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5705=((-1.0)*r11);
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(x5705),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
IkReal x5706=((1.0)*(x5708.value));
IkReal x5707=x5697;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5706)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5706)));
IkReal gconst124=(x5705*x5707);
IkReal gconst125=((1.0)*r10*x5707);
IkReal x5709=r12*r12;
IkReal x5710=((1.0)*sj0);
IkReal x5711=(cj0*r02);
IkReal x5712=x5697;
j4eval[0]=((IKabs(((((-1.0)*x5711))+(((-1.0)*r12*x5710)))))+(IKabs(((((-1.0)*x5710*x5712))+((r12*x5711*x5712))+((sj0*x5709*x5712))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5713=((-1.0)*r11);
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal(x5713),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
IkReal x5714=((1.0)*(x5716.value));
IkReal x5715=x5697;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5714)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5714)));
IkReal gconst124=(x5713*x5715);
IkReal gconst125=((1.0)*r10*x5715);
IkReal x5717=r12*r12;
IkReal x5718=((1.0)+(((-1.0)*x5717)));
IkReal x5719=(cj2*r22*sj1);
IkReal x5720=(cj1*r22*sj2);
CheckValue<IkReal> x5727=IKPowWithIntegerCheck(x5718,-1);
if(!x5727.valid){
continue;
}
IkReal x5721=x5727.value;
CheckValue<IkReal> x5728=IKPowWithIntegerCheck(((-1.0)+x5717),-1);
if(!x5728.valid){
continue;
}
IkReal x5722=x5728.value;
IkReal x5723=((1.0)*x5721);
if((x5718) < -0.00001)
continue;
IkReal x5724=IKsqrt(x5718);
IkReal x5725=((1.0)*r12*x5722*x5724);
IkReal x5726=((((-2.0)*r10*r11*r20*r21*x5721))+(((-1.0)*x5723*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5723*(r11*r11)*(r21*r21))));
j4eval[0]=x5726;
j4eval[1]=IKsign(x5726);
j4eval[2]=((IKabs((x5720+x5719)))+(IKabs(((((-1.0)*x5719*x5725))+(((-1.0)*x5720*x5725))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5729=(gconst124*r21);
IkReal x5730=(cj1*sj2);
IkReal x5731=(cj2*sj1);
IkReal x5732=(gconst125*r20);
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal((((r22*x5731))+((r22*x5730)))),IkReal(((((-1.0)*x5730*x5732))+((x5729*x5731))+((x5729*x5730))+(((-1.0)*x5731*x5732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(IKsign(((((2.0)*x5729*x5732))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5729*x5729)))+(((-1.0)*(x5732*x5732))))),-1);
if(!x5734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5733.value)+(((1.5707963267949)*(x5734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5735=IKsin(j4);
IkReal x5736=IKcos(j4);
IkReal x5737=(sj1*sj2);
IkReal x5738=(gconst125*r20);
IkReal x5739=(gconst124*r01);
IkReal x5740=(gconst125*r00);
IkReal x5741=(gconst125*r10);
IkReal x5742=((1.0)*x5736);
IkReal x5743=((1.0)*cj1*cj2);
IkReal x5744=((1.0)*x5735);
IkReal x5745=(gconst124*x5735);
IkReal x5746=(gconst124*x5736);
evalcond[0]=((((-1.0)*x5738*x5744))+(((-1.0)*r22*x5742))+((r21*x5745)));
evalcond[1]=(((r11*x5745))+cj0+(((-1.0)*x5741*x5744))+(((-1.0)*r12*x5742)));
evalcond[2]=((((-1.0)*sj0))+((x5735*x5739))+(((-1.0)*r02*x5742))+(((-1.0)*x5740*x5744)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5738*x5742))+((r21*x5746))+((r22*x5735)));
evalcond[4]=((((-1.0)*cj0*x5743))+((cj0*x5737))+(((-1.0)*x5740*x5742))+((x5736*x5739))+((r02*x5735)));
evalcond[5]=(((r11*x5746))+((r12*x5735))+(((-1.0)*x5741*x5742))+((sj0*x5737))+(((-1.0)*sj0*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5747=((1.0)*sj0);
IkReal x5748=((1.0)*cj0);
CheckValue<IkReal> x5749 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5748))+(((-1.0)*r12*x5747)))),IkReal(((((-1.0)*gconst124*r11*x5747))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5749.valid){
continue;
}
CheckValue<IkReal> x5750=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5749.value)+(((1.5707963267949)*(x5750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5751=IKsin(j4);
IkReal x5752=IKcos(j4);
IkReal x5753=(sj1*sj2);
IkReal x5754=(gconst125*r20);
IkReal x5755=(gconst124*r01);
IkReal x5756=(gconst125*r00);
IkReal x5757=(gconst125*r10);
IkReal x5758=((1.0)*x5752);
IkReal x5759=((1.0)*cj1*cj2);
IkReal x5760=((1.0)*x5751);
IkReal x5761=(gconst124*x5751);
IkReal x5762=(gconst124*x5752);
evalcond[0]=((((-1.0)*r22*x5758))+((r21*x5761))+(((-1.0)*x5754*x5760)));
evalcond[1]=(cj0+(((-1.0)*x5757*x5760))+(((-1.0)*r12*x5758))+((r11*x5761)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5756*x5760))+(((-1.0)*r02*x5758))+((x5751*x5755)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5762))+(((-1.0)*x5754*x5758))+((r22*x5751)));
evalcond[4]=(((x5752*x5755))+(((-1.0)*cj0*x5759))+((r02*x5751))+(((-1.0)*x5756*x5758))+((cj0*x5753)));
evalcond[5]=((((-1.0)*sj0*x5759))+((r11*x5762))+(((-1.0)*x5757*x5758))+((sj0*x5753))+((r12*x5751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5763=((1.0)*gconst125);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x5763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
CheckValue<IkReal> x5765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5763))+(((-1.0)*gconst124*r00)))),-1);
if(!x5765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5764.value)+(((1.5707963267949)*(x5765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5766=IKsin(j4);
IkReal x5767=IKcos(j4);
IkReal x5768=(sj1*sj2);
IkReal x5769=(gconst125*r20);
IkReal x5770=(gconst124*r01);
IkReal x5771=(gconst125*r00);
IkReal x5772=(gconst125*r10);
IkReal x5773=((1.0)*x5767);
IkReal x5774=((1.0)*cj1*cj2);
IkReal x5775=((1.0)*x5766);
IkReal x5776=(gconst124*x5766);
IkReal x5777=(gconst124*x5767);
evalcond[0]=((((-1.0)*x5769*x5775))+((r21*x5776))+(((-1.0)*r22*x5773)));
evalcond[1]=(cj0+(((-1.0)*r12*x5773))+((r11*x5776))+(((-1.0)*x5772*x5775)));
evalcond[2]=((((-1.0)*sj0))+((x5766*x5770))+(((-1.0)*x5771*x5775))+(((-1.0)*r02*x5773)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5769*x5773))+((cj1*sj2))+((r22*x5766))+((r21*x5777)));
evalcond[4]=(((x5767*x5770))+(((-1.0)*x5771*x5773))+(((-1.0)*cj0*x5774))+((cj0*x5768))+((r02*x5766)));
evalcond[5]=((((-1.0)*sj0*x5774))+((r11*x5777))+(((-1.0)*x5772*x5773))+((r12*x5766))+((sj0*x5768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5778=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5778;
j4eval[1]=IKsign(x5778);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5779=((1.0)*cj5);
IkReal x5780=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5779)));
j4eval[0]=x5780;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5779))+((r21*sj5))))));
j4eval[2]=IKsign(x5780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5781=cj5*cj5;
IkReal x5782=r11*r11;
IkReal x5783=(cj5*r10);
IkReal x5784=(r11*sj5);
IkReal x5785=((((-1.0)*(r12*r12)))+(((-1.0)*x5782))+(((-1.0)*x5781*(r10*r10)))+(((2.0)*x5783*x5784))+((x5781*x5782)));
j4eval[0]=x5785;
j4eval[1]=IKsign(x5785);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5783))+x5784))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5786=cj5*cj5;
IkReal x5787=r11*r11;
IkReal x5788=(cj5*r10);
IkReal x5789=(r11*sj5);
CheckValue<IkReal> x5790 = IKatan2WithCheck(IkReal(((((-1.0)*x5788))+x5789)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5790.valid){
continue;
}
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(IKsign(((((2.0)*x5788*x5789))+(((-1.0)*(r12*r12)))+(((-1.0)*x5786*(r10*r10)))+(((-1.0)*x5787))+((x5786*x5787)))),-1);
if(!x5791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5790.value)+(((1.5707963267949)*(x5791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5792=IKcos(j4);
IkReal x5793=IKsin(j4);
IkReal x5794=(cj5*r00);
IkReal x5795=(cj5*r10);
IkReal x5796=(r21*sj5);
IkReal x5797=(cj5*r20);
IkReal x5798=((1.0)*x5792);
IkReal x5799=((1.0)*x5793);
IkReal x5800=(sj5*x5793);
IkReal x5801=(sj5*x5792);
evalcond[0]=(((r12*x5793))+((r11*x5801))+(((-1.0)*x5795*x5798)));
evalcond[1]=(((x5793*x5796))+(((-1.0)*x5797*x5799))+(((-1.0)*r22*x5798)));
evalcond[2]=(((r01*x5800))+(((-1.0)*x5794*x5799))+(((-1.0)*r02*x5798)));
evalcond[3]=((1.0)+((r11*x5800))+(((-1.0)*x5795*x5799))+(((-1.0)*r12*x5798)));
evalcond[4]=(((cj2*sj1))+((x5792*x5796))+((cj1*sj2))+(((-1.0)*x5797*x5798))+((r22*x5793)));
evalcond[5]=(((r01*x5801))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5794*x5798))+((r02*x5793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5802=((1.0)*cj5);
CheckValue<IkReal> x5803 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5802))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5803.valid){
continue;
}
CheckValue<IkReal> x5804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5802)))),-1);
if(!x5804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5803.value)+(((1.5707963267949)*(x5804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5805=IKcos(j4);
IkReal x5806=IKsin(j4);
IkReal x5807=(cj5*r00);
IkReal x5808=(cj5*r10);
IkReal x5809=(r21*sj5);
IkReal x5810=(cj5*r20);
IkReal x5811=((1.0)*x5805);
IkReal x5812=((1.0)*x5806);
IkReal x5813=(sj5*x5806);
IkReal x5814=(sj5*x5805);
evalcond[0]=((((-1.0)*x5808*x5811))+((r11*x5814))+((r12*x5806)));
evalcond[1]=(((x5806*x5809))+(((-1.0)*x5810*x5812))+(((-1.0)*r22*x5811)));
evalcond[2]=((((-1.0)*r02*x5811))+(((-1.0)*x5807*x5812))+((r01*x5813)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5811))+(((-1.0)*x5808*x5812))+((r11*x5813)));
evalcond[4]=(((cj2*sj1))+((x5805*x5809))+((cj1*sj2))+(((-1.0)*x5810*x5811))+((r22*x5806)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5806))+(((-1.0)*x5807*x5811))+((r01*x5814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5815=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5815.valid){
continue;
}
CheckValue<IkReal> x5816 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5815.value)))+(x5816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5817=IKcos(j4);
IkReal x5818=IKsin(j4);
IkReal x5819=(cj5*r00);
IkReal x5820=(cj5*r10);
IkReal x5821=(r21*sj5);
IkReal x5822=(cj5*r20);
IkReal x5823=((1.0)*x5817);
IkReal x5824=((1.0)*x5818);
IkReal x5825=(sj5*x5818);
IkReal x5826=(sj5*x5817);
evalcond[0]=((((-1.0)*x5820*x5823))+((r11*x5826))+((r12*x5818)));
evalcond[1]=((((-1.0)*r22*x5823))+((x5818*x5821))+(((-1.0)*x5822*x5824)));
evalcond[2]=((((-1.0)*r02*x5823))+((r01*x5825))+(((-1.0)*x5819*x5824)));
evalcond[3]=((1.0)+(((-1.0)*x5820*x5824))+((r11*x5825))+(((-1.0)*r12*x5823)));
evalcond[4]=(((cj2*sj1))+((r22*x5818))+((cj1*sj2))+(((-1.0)*x5822*x5823))+((x5817*x5821)));
evalcond[5]=(((r02*x5818))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5826))+(((-1.0)*x5819*x5823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5827=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5827;
j4eval[1]=IKsign(x5827);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5828=((1.0)*cj5);
IkReal x5829=((((-1.0)*r21*x5828))+(((-1.0)*r20*sj5)));
j4eval[0]=x5829;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5828))+((r01*sj5))))));
j4eval[2]=IKsign(x5829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5830=cj5*cj5;
IkReal x5831=r11*r11;
IkReal x5832=(r11*sj5);
IkReal x5833=(cj5*r10);
IkReal x5834=((r12*r12)+(((-2.0)*x5832*x5833))+(((-1.0)*x5830*x5831))+((x5830*(r10*r10)))+x5831);
j4eval[0]=x5834;
j4eval[1]=IKsign(x5834);
j4eval[2]=((IKabs(((((-1.0)*x5833))+x5832)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5835=cj5*cj5;
IkReal x5836=r11*r11;
IkReal x5837=(cj5*r10);
IkReal x5838=(r11*sj5);
CheckValue<IkReal> x5839 = IKatan2WithCheck(IkReal(((((-1.0)*x5837))+x5838)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5839.valid){
continue;
}
CheckValue<IkReal> x5840=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x5837*x5838))+(((-1.0)*x5835*x5836))+((x5835*(r10*r10)))+x5836)),-1);
if(!x5840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5839.value)+(((1.5707963267949)*(x5840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5841=IKcos(j4);
IkReal x5842=IKsin(j4);
IkReal x5843=(cj5*r00);
IkReal x5844=(cj5*r10);
IkReal x5845=(r21*sj5);
IkReal x5846=(cj5*r20);
IkReal x5847=((1.0)*x5841);
IkReal x5848=((1.0)*x5842);
IkReal x5849=(sj5*x5842);
IkReal x5850=(sj5*x5841);
evalcond[0]=(((r11*x5850))+((r12*x5842))+(((-1.0)*x5844*x5847)));
evalcond[1]=(((x5842*x5845))+(((-1.0)*x5846*x5848))+(((-1.0)*r22*x5847)));
evalcond[2]=((((-1.0)*r02*x5847))+((r01*x5849))+(((-1.0)*x5843*x5848)));
evalcond[3]=((-1.0)+((r11*x5849))+(((-1.0)*x5844*x5848))+(((-1.0)*r12*x5847)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5841*x5845))+(((-1.0)*x5846*x5847))+((r22*x5842)));
evalcond[5]=(((r01*x5850))+(((-1.0)*sj1*sj2))+(((-1.0)*x5843*x5847))+((cj1*cj2))+((r02*x5842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5851=((1.0)*cj5);
CheckValue<IkReal> x5852=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5851))+(((-1.0)*r20*sj5)))),-1);
if(!x5852.valid){
continue;
}
CheckValue<IkReal> x5853 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5852.value)))+(x5853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5854=IKcos(j4);
IkReal x5855=IKsin(j4);
IkReal x5856=(cj5*r00);
IkReal x5857=(cj5*r10);
IkReal x5858=(r21*sj5);
IkReal x5859=(cj5*r20);
IkReal x5860=((1.0)*x5854);
IkReal x5861=((1.0)*x5855);
IkReal x5862=(sj5*x5855);
IkReal x5863=(sj5*x5854);
evalcond[0]=(((r12*x5855))+((r11*x5863))+(((-1.0)*x5857*x5860)));
evalcond[1]=((((-1.0)*r22*x5860))+((x5855*x5858))+(((-1.0)*x5859*x5861)));
evalcond[2]=((((-1.0)*r02*x5860))+(((-1.0)*x5856*x5861))+((r01*x5862)));
evalcond[3]=((-1.0)+((r11*x5862))+(((-1.0)*x5857*x5861))+(((-1.0)*r12*x5860)));
evalcond[4]=(((cj2*sj1))+((x5854*x5858))+((cj1*sj2))+(((-1.0)*x5859*x5860))+((r22*x5855)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5855))+(((-1.0)*x5856*x5860))+((cj1*cj2))+((r01*x5863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5864 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5864.valid){
continue;
}
CheckValue<IkReal> x5865=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5864.value)+(((1.5707963267949)*(x5865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5866=IKcos(j4);
IkReal x5867=IKsin(j4);
IkReal x5868=(cj5*r00);
IkReal x5869=(cj5*r10);
IkReal x5870=(r21*sj5);
IkReal x5871=(cj5*r20);
IkReal x5872=((1.0)*x5866);
IkReal x5873=((1.0)*x5867);
IkReal x5874=(sj5*x5867);
IkReal x5875=(sj5*x5866);
evalcond[0]=(((r11*x5875))+((r12*x5867))+(((-1.0)*x5869*x5872)));
evalcond[1]=(((x5867*x5870))+(((-1.0)*r22*x5872))+(((-1.0)*x5871*x5873)));
evalcond[2]=((((-1.0)*r02*x5872))+(((-1.0)*x5868*x5873))+((r01*x5874)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5872))+((r11*x5874))+(((-1.0)*x5869*x5873)));
evalcond[4]=(((x5866*x5870))+((cj2*sj1))+((r22*x5867))+((cj1*sj2))+(((-1.0)*x5871*x5872)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5867))+((cj1*cj2))+(((-1.0)*x5868*x5872))+((r01*x5875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5876=((-1.0)*r00);
IkReal x5878 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5878)==0){
continue;
}
IkReal x5877=pow(x5878,-0.5);
CheckValue<IkReal> x5879 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5876),IKFAST_ATAN2_MAGTHRESH);
if(!x5879.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5879.value));
IkReal gconst127=(r01*x5877);
IkReal gconst128=(x5876*x5877);
CheckValue<IkReal> x5880 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5880.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5880.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5881=((-1.0)*r00);
IkReal x5882=x5877;
CheckValue<IkReal> x5884 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5881),IKFAST_ATAN2_MAGTHRESH);
if(!x5884.valid){
continue;
}
IkReal x5883=((-1.0)*(x5884.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5883;
IkReal gconst126=x5883;
IkReal gconst127=(r01*x5882);
IkReal gconst128=(x5881*x5882);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5885=((1.0)*sj0);
IkReal x5886=((1.0)*gconst127);
CheckValue<IkReal> x5887 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5885))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5886))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5887.valid){
continue;
}
CheckValue<IkReal> x5888=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5886)))),-1);
if(!x5888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5887.value)+(((1.5707963267949)*(x5888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5889=IKsin(j4);
IkReal x5890=IKcos(j4);
IkReal x5891=(gconst127*r01);
IkReal x5892=(sj1*sj2);
IkReal x5893=(gconst128*r10);
IkReal x5894=(gconst128*r00);
IkReal x5895=(gconst128*r20);
IkReal x5896=((1.0)*x5890);
IkReal x5897=((1.0)*cj1*cj2);
IkReal x5898=((1.0)*x5889);
IkReal x5899=(gconst127*x5890);
IkReal x5900=(gconst127*x5889);
evalcond[0]=((((-1.0)*r22*x5896))+(((-1.0)*x5895*x5898))+((r21*x5900)));
evalcond[1]=((((-1.0)*x5893*x5898))+(((-1.0)*r12*x5896))+cj0+((r11*x5900)));
evalcond[2]=((((-1.0)*sj0))+((x5889*x5891))+(((-1.0)*r02*x5896))+(((-1.0)*x5894*x5898)));
evalcond[3]=(((cj2*sj1))+((r21*x5899))+((cj1*sj2))+((r22*x5889))+(((-1.0)*x5895*x5896)));
evalcond[4]=(((cj0*x5892))+(((-1.0)*cj0*x5897))+(((-1.0)*x5894*x5896))+((x5890*x5891))+((r02*x5889)));
evalcond[5]=((((-1.0)*x5893*x5896))+((r12*x5889))+((sj0*x5892))+(((-1.0)*sj0*x5897))+((r11*x5899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5901=((1.0)*gconst128);
CheckValue<IkReal> x5902=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5901))+(((-1.0)*gconst127*r10)))),-1);
if(!x5902.valid){
continue;
}
CheckValue<IkReal> x5903 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5902.value)))+(x5903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5904=IKsin(j4);
IkReal x5905=IKcos(j4);
IkReal x5906=(gconst127*r01);
IkReal x5907=(sj1*sj2);
IkReal x5908=(gconst128*r10);
IkReal x5909=(gconst128*r00);
IkReal x5910=(gconst128*r20);
IkReal x5911=((1.0)*x5905);
IkReal x5912=((1.0)*cj1*cj2);
IkReal x5913=((1.0)*x5904);
IkReal x5914=(gconst127*x5905);
IkReal x5915=(gconst127*x5904);
evalcond[0]=((((-1.0)*r22*x5911))+(((-1.0)*x5910*x5913))+((r21*x5915)));
evalcond[1]=((((-1.0)*r12*x5911))+cj0+(((-1.0)*x5908*x5913))+((r11*x5915)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5909*x5913))+(((-1.0)*r02*x5911))+((x5904*x5906)));
evalcond[3]=(((cj2*sj1))+((r22*x5904))+((cj1*sj2))+(((-1.0)*x5910*x5911))+((r21*x5914)));
evalcond[4]=((((-1.0)*cj0*x5912))+((r02*x5904))+(((-1.0)*x5909*x5911))+((x5905*x5906))+((cj0*x5907)));
evalcond[5]=(((r12*x5904))+((sj0*x5907))+(((-1.0)*x5908*x5911))+(((-1.0)*sj0*x5912))+((r11*x5914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5916=((-1.0)*r01);
IkReal x5918 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5918)==0){
continue;
}
IkReal x5917=pow(x5918,-0.5);
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(x5916),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5919.value))));
IkReal gconst130=(x5916*x5917);
IkReal gconst131=((1.0)*r00*x5917);
CheckValue<IkReal> x5920 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5920.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5920.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5921=((-1.0)*r01);
CheckValue<IkReal> x5924 = IKatan2WithCheck(IkReal(x5921),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5924.valid){
continue;
}
IkReal x5922=((1.0)*(x5924.value));
IkReal x5923=x5917;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5922)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5922)));
IkReal gconst130=(x5921*x5923);
IkReal gconst131=((1.0)*r00*x5923);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5925=((-1.0)*r01);
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(x5925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
IkReal x5926=((1.0)*(x5928.value));
IkReal x5927=x5917;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5926)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5926)));
IkReal gconst130=(x5925*x5927);
IkReal gconst131=((1.0)*r00*x5927);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5929=((-1.0)*r01);
CheckValue<IkReal> x5932 = IKatan2WithCheck(IkReal(x5929),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5932.valid){
continue;
}
IkReal x5930=((1.0)*(x5932.value));
IkReal x5931=x5917;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5930)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5930)));
IkReal gconst130=(x5929*x5931);
IkReal gconst131=((1.0)*r00*x5931);
IkReal x5933=r02*r02;
IkReal x5934=(r12*sj0);
IkReal x5935=((1.0)*cj0);
IkReal x5936=x5917;
j4eval[0]=((IKabs(((((-1.0)*r02*x5935))+(((-1.0)*x5934)))))+(IKabs((((cj0*x5933*x5936))+((r02*x5934*x5936))+(((-1.0)*x5935*x5936))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5937=((1.0)*sj0);
IkReal x5938=((1.0)*gconst130);
CheckValue<IkReal> x5939 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5937)))),IkReal(((((-1.0)*cj0*r01*x5938))+(((-1.0)*gconst130*r11*x5937))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5939.valid){
continue;
}
CheckValue<IkReal> x5940=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5938)))),-1);
if(!x5940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5939.value)+(((1.5707963267949)*(x5940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5941=IKsin(j4);
IkReal x5942=IKcos(j4);
IkReal x5943=(gconst131*r10);
IkReal x5944=(sj1*sj2);
IkReal x5945=(gconst131*r20);
IkReal x5946=(gconst131*r00);
IkReal x5947=((1.0)*x5942);
IkReal x5948=((1.0)*cj1*cj2);
IkReal x5949=(gconst130*x5941);
IkReal x5950=((1.0)*x5941);
IkReal x5951=(gconst130*x5942);
evalcond[0]=((((-1.0)*r22*x5947))+((r21*x5949))+(((-1.0)*x5945*x5950)));
evalcond[1]=(cj0+(((-1.0)*r12*x5947))+(((-1.0)*x5943*x5950))+((r11*x5949)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5949))+(((-1.0)*x5946*x5950))+(((-1.0)*r02*x5947)));
evalcond[3]=(((cj2*sj1))+((r21*x5951))+(((-1.0)*x5945*x5947))+((cj1*sj2))+((r22*x5941)));
evalcond[4]=(((cj0*x5944))+(((-1.0)*cj0*x5948))+(((-1.0)*x5946*x5947))+((r02*x5941))+((r01*x5951)));
evalcond[5]=(((r11*x5951))+(((-1.0)*sj0*x5948))+((r12*x5941))+(((-1.0)*x5943*x5947))+((sj0*x5944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5952=((1.0)*gconst131);
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
CheckValue<IkReal> x5954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x5952)))),-1);
if(!x5954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5953.value)+(((1.5707963267949)*(x5954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5955=IKsin(j4);
IkReal x5956=IKcos(j4);
IkReal x5957=(gconst131*r10);
IkReal x5958=(sj1*sj2);
IkReal x5959=(gconst131*r20);
IkReal x5960=(gconst131*r00);
IkReal x5961=((1.0)*x5956);
IkReal x5962=((1.0)*cj1*cj2);
IkReal x5963=(gconst130*x5955);
IkReal x5964=((1.0)*x5955);
IkReal x5965=(gconst130*x5956);
evalcond[0]=((((-1.0)*r22*x5961))+((r21*x5963))+(((-1.0)*x5959*x5964)));
evalcond[1]=(cj0+(((-1.0)*x5957*x5964))+(((-1.0)*r12*x5961))+((r11*x5963)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5963))+(((-1.0)*x5960*x5964))+(((-1.0)*r02*x5961)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5965))+((r22*x5955))+(((-1.0)*x5959*x5961)));
evalcond[4]=(((r01*x5965))+((r02*x5955))+(((-1.0)*x5960*x5961))+(((-1.0)*cj0*x5962))+((cj0*x5958)));
evalcond[5]=((((-1.0)*x5957*x5961))+((sj0*x5958))+(((-1.0)*sj0*x5962))+((r12*x5955))+((r11*x5965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5966=((1.0)*gconst131);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
CheckValue<IkReal> x5968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5966))+(((-1.0)*gconst130*r00)))),-1);
if(!x5968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5967.value)+(((1.5707963267949)*(x5968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5969=IKsin(j4);
IkReal x5970=IKcos(j4);
IkReal x5971=(gconst131*r10);
IkReal x5972=(sj1*sj2);
IkReal x5973=(gconst131*r20);
IkReal x5974=(gconst131*r00);
IkReal x5975=((1.0)*x5970);
IkReal x5976=((1.0)*cj1*cj2);
IkReal x5977=(gconst130*x5969);
IkReal x5978=((1.0)*x5969);
IkReal x5979=(gconst130*x5970);
evalcond[0]=((((-1.0)*r22*x5975))+((r21*x5977))+(((-1.0)*x5973*x5978)));
evalcond[1]=(cj0+(((-1.0)*r12*x5975))+(((-1.0)*x5971*x5978))+((r11*x5977)));
evalcond[2]=((((-1.0)*r02*x5975))+(((-1.0)*sj0))+((r01*x5977))+(((-1.0)*x5974*x5978)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5969))+((r21*x5979))+(((-1.0)*x5973*x5975)));
evalcond[4]=(((r02*x5969))+((cj0*x5972))+((r01*x5979))+(((-1.0)*cj0*x5976))+(((-1.0)*x5974*x5975)));
evalcond[5]=((((-1.0)*sj0*x5976))+(((-1.0)*x5971*x5975))+((r11*x5979))+((r12*x5969))+((sj0*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5980=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5980;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5981=((1.0)*cj5);
IkReal x5982=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5981)));
j4eval[0]=x5982;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5981))))));
j4eval[2]=IKsign(x5982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5983=cj5*cj5;
IkReal x5984=r01*r01;
IkReal x5985=(cj5*r00);
IkReal x5986=(r01*sj5);
IkReal x5987=((((-1.0)*x5983*x5984))+(((-2.0)*x5985*x5986))+((x5983*(r00*r00)))+(r02*r02)+x5984);
j4eval[0]=x5987;
j4eval[1]=IKsign(x5987);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5985))+x5986))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5988=cj5*cj5;
IkReal x5989=r01*r01;
IkReal x5990=(r01*sj5);
IkReal x5991=(cj5*r00);
CheckValue<IkReal> x5992=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5990*x5991))+((x5988*(r00*r00)))+(((-1.0)*x5988*x5989))+(r02*r02)+x5989)),-1);
if(!x5992.valid){
continue;
}
CheckValue<IkReal> x5993 = IKatan2WithCheck(IkReal(((((-1.0)*x5991))+x5990)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5992.value)))+(x5993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5994=IKcos(j4);
IkReal x5995=IKsin(j4);
IkReal x5996=(cj5*r00);
IkReal x5997=(cj5*r10);
IkReal x5998=(r21*sj5);
IkReal x5999=(cj5*r20);
IkReal x6000=((1.0)*x5994);
IkReal x6001=((1.0)*x5995);
IkReal x6002=(sj5*x5995);
IkReal x6003=(sj5*x5994);
evalcond[0]=(((r02*x5995))+(((-1.0)*x5996*x6000))+((r01*x6003)));
evalcond[1]=(((x5995*x5998))+(((-1.0)*r22*x6000))+(((-1.0)*x5999*x6001)));
evalcond[2]=(((r11*x6002))+(((-1.0)*r12*x6000))+(((-1.0)*x5997*x6001)));
evalcond[3]=((-1.0)+(((-1.0)*x5996*x6001))+((r01*x6002))+(((-1.0)*r02*x6000)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5994*x5998))+(((-1.0)*x5999*x6000))+((r22*x5995)));
evalcond[5]=(((r12*x5995))+((r11*x6003))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5997*x6000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6004=((1.0)*cj5);
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6004)))),-1);
if(!x6005.valid){
continue;
}
CheckValue<IkReal> x6006 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6005.value)))+(x6006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6007=IKcos(j4);
IkReal x6008=IKsin(j4);
IkReal x6009=(cj5*r00);
IkReal x6010=(cj5*r10);
IkReal x6011=(r21*sj5);
IkReal x6012=(cj5*r20);
IkReal x6013=((1.0)*x6007);
IkReal x6014=((1.0)*x6008);
IkReal x6015=(sj5*x6008);
IkReal x6016=(sj5*x6007);
evalcond[0]=(((r01*x6016))+((r02*x6008))+(((-1.0)*x6009*x6013)));
evalcond[1]=(((x6008*x6011))+(((-1.0)*r22*x6013))+(((-1.0)*x6012*x6014)));
evalcond[2]=(((r11*x6015))+(((-1.0)*r12*x6013))+(((-1.0)*x6010*x6014)));
evalcond[3]=((-1.0)+((r01*x6015))+(((-1.0)*r02*x6013))+(((-1.0)*x6009*x6014)));
evalcond[4]=(((cj2*sj1))+((r22*x6008))+((cj1*sj2))+(((-1.0)*x6012*x6013))+((x6007*x6011)));
evalcond[5]=(((r12*x6008))+((r11*x6016))+(((-1.0)*x6010*x6013))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKcos(j4);
IkReal x6020=IKsin(j4);
IkReal x6021=(cj5*r00);
IkReal x6022=(cj5*r10);
IkReal x6023=(r21*sj5);
IkReal x6024=(cj5*r20);
IkReal x6025=((1.0)*x6019);
IkReal x6026=((1.0)*x6020);
IkReal x6027=(sj5*x6020);
IkReal x6028=(sj5*x6019);
evalcond[0]=(((r02*x6020))+((r01*x6028))+(((-1.0)*x6021*x6025)));
evalcond[1]=((((-1.0)*x6024*x6026))+((x6020*x6023))+(((-1.0)*r22*x6025)));
evalcond[2]=(((r11*x6027))+(((-1.0)*x6022*x6026))+(((-1.0)*r12*x6025)));
evalcond[3]=((-1.0)+((r01*x6027))+(((-1.0)*x6021*x6026))+(((-1.0)*r02*x6025)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6024*x6025))+((cj1*sj2))+((x6019*x6023))+((r22*x6020)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6020))+((r11*x6028))+(((-1.0)*x6022*x6025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6029=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6029;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6030=((1.0)*cj5);
IkReal x6031=((((-1.0)*r21*x6030))+(((-1.0)*r20*sj5)));
j4eval[0]=x6031;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6030)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6031);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6032=(r01*sj5);
IkReal x6033=(cj1*sj2);
IkReal x6034=(cj2*sj1);
IkReal x6035=((1.0)*r02);
IkReal x6036=((1.0)*cj5*r00);
IkReal x6037=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6037;
j4eval[1]=((IKabs((((x6032*x6033))+((x6032*x6034))+(((-1.0)*x6033*x6036))+(((-1.0)*x6034*x6036)))))+(IKabs(((((-1.0)*x6033*x6035))+(((-1.0)*x6034*x6035))))));
j4eval[2]=IKsign(x6037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6038=(r01*sj5);
IkReal x6039=(cj1*sj2);
IkReal x6040=(cj2*sj1);
IkReal x6041=((1.0)*r02);
IkReal x6042=((1.0)*cj5*r00);
CheckValue<IkReal> x6043 = IKatan2WithCheck(IkReal((((x6038*x6040))+(((-1.0)*x6039*x6042))+((x6038*x6039))+(((-1.0)*x6040*x6042)))),IkReal(((((-1.0)*x6039*x6041))+(((-1.0)*x6040*x6041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6043.valid){
continue;
}
CheckValue<IkReal> x6044=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6043.value)+(((1.5707963267949)*(x6044.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6045=IKcos(j4);
IkReal x6046=IKsin(j4);
IkReal x6047=(cj5*r00);
IkReal x6048=(cj5*r10);
IkReal x6049=(r21*sj5);
IkReal x6050=(cj5*r20);
IkReal x6051=((1.0)*x6045);
IkReal x6052=((1.0)*x6046);
IkReal x6053=(sj5*x6046);
IkReal x6054=(sj5*x6045);
evalcond[0]=(((r01*x6054))+(((-1.0)*x6047*x6051))+((r02*x6046)));
evalcond[1]=(((x6046*x6049))+(((-1.0)*x6050*x6052))+(((-1.0)*r22*x6051)));
evalcond[2]=((((-1.0)*x6048*x6052))+(((-1.0)*r12*x6051))+((r11*x6053)));
evalcond[3]=((1.0)+((r01*x6053))+(((-1.0)*r02*x6051))+(((-1.0)*x6047*x6052)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6050*x6051))+((cj1*sj2))+((r22*x6046))+((x6045*x6049)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6048*x6051))+((cj1*cj2))+((r12*x6046))+((r11*x6054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6055=((1.0)*cj5);
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6055))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
CheckValue<IkReal> x6057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6055))+(((-1.0)*r20*sj5)))),-1);
if(!x6057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6056.value)+(((1.5707963267949)*(x6057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6058=IKcos(j4);
IkReal x6059=IKsin(j4);
IkReal x6060=(cj5*r00);
IkReal x6061=(cj5*r10);
IkReal x6062=(r21*sj5);
IkReal x6063=(cj5*r20);
IkReal x6064=((1.0)*x6058);
IkReal x6065=((1.0)*x6059);
IkReal x6066=(sj5*x6059);
IkReal x6067=(sj5*x6058);
evalcond[0]=(((r01*x6067))+(((-1.0)*x6060*x6064))+((r02*x6059)));
evalcond[1]=((((-1.0)*r22*x6064))+((x6059*x6062))+(((-1.0)*x6063*x6065)));
evalcond[2]=((((-1.0)*x6061*x6065))+((r11*x6066))+(((-1.0)*r12*x6064)));
evalcond[3]=((1.0)+((r01*x6066))+(((-1.0)*x6060*x6065))+(((-1.0)*r02*x6064)));
evalcond[4]=(((cj2*sj1))+((r22*x6059))+((cj1*sj2))+(((-1.0)*x6063*x6064))+((x6058*x6062)));
evalcond[5]=(((r12*x6059))+(((-1.0)*sj1*sj2))+(((-1.0)*x6061*x6064))+((r11*x6067))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6068 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6068.valid){
continue;
}
CheckValue<IkReal> x6069=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6068.value)+(((1.5707963267949)*(x6069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6070=IKcos(j4);
IkReal x6071=IKsin(j4);
IkReal x6072=(cj5*r00);
IkReal x6073=(cj5*r10);
IkReal x6074=(r21*sj5);
IkReal x6075=(cj5*r20);
IkReal x6076=((1.0)*x6070);
IkReal x6077=((1.0)*x6071);
IkReal x6078=(sj5*x6071);
IkReal x6079=(sj5*x6070);
evalcond[0]=(((r01*x6079))+(((-1.0)*x6072*x6076))+((r02*x6071)));
evalcond[1]=(((x6071*x6074))+(((-1.0)*r22*x6076))+(((-1.0)*x6075*x6077)));
evalcond[2]=(((r11*x6078))+(((-1.0)*x6073*x6077))+(((-1.0)*r12*x6076)));
evalcond[3]=((1.0)+((r01*x6078))+(((-1.0)*r02*x6076))+(((-1.0)*x6072*x6077)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6071))+((x6070*x6074))+(((-1.0)*x6075*x6076)));
evalcond[5]=(((r11*x6079))+(((-1.0)*sj1*sj2))+(((-1.0)*x6073*x6076))+((cj1*cj2))+((r12*x6071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6080=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6080);
rxp1_1=(px*r21);
rxp1_2=(r11*x6080);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6081=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6081);
rxp1_1=(px*r21);
rxp1_2=(r11*x6081);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6082=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6082);
rxp1_1=(px*r21);
rxp1_2=(r11*x6082);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6085=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6085.valid){
continue;
}
IkReal x6083=x6085.value;
IkReal x6084=(sj0*x6083);
cj4array[0]=((((-1.0)*sj1*sj2*x6084))+((cj1*cj2*x6084)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6086=IKsin(j4);
IkReal x6087=IKcos(j4);
IkReal x6088=(r21*sj5);
IkReal x6089=((1.0)*cj5*r20);
evalcond[0]=(r02*x6086);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6087)));
evalcond[2]=(((x6086*x6088))+(((-1.0)*x6086*x6089)));
evalcond[3]=((((-1.0)*cj5*r10*x6086))+((r11*sj5*x6086)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6087*x6088))+(((-1.0)*x6087*x6089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6092=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6092.valid){
continue;
}
IkReal x6090=x6092.value;
IkReal x6091=((1.0)*x6090);
cj4array[0]=((((-1.0)*cj2*sj1*x6091))+(((-1.0)*cj1*sj2*x6091)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6093=IKsin(j4);
IkReal x6094=IKcos(j4);
IkReal x6095=((1.0)*sj0);
IkReal x6096=((1.0)*cj5);
IkReal x6097=(sj5*x6093);
evalcond[0]=(r02*x6093);
evalcond[1]=((((-1.0)*x6095))+(((-1.0)*r02*x6094)));
evalcond[2]=((((-1.0)*r20*x6093*x6096))+((r21*x6097)));
evalcond[3]=(((r11*x6097))+(((-1.0)*r10*x6093*x6096)));
evalcond[4]=((((-1.0)*cj1*cj2*x6095))+(((-1.0)*r10*x6094*x6096))+((sj0*sj1*sj2))+((r11*sj5*x6094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6098=IKPowWithIntegerCheck(r02,-1);
if(!x6098.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6098.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6099=IKsin(j4);
IkReal x6100=IKcos(j4);
IkReal x6101=(r21*sj5);
IkReal x6102=((1.0)*cj5);
IkReal x6103=(r11*sj5);
evalcond[0]=(r02*x6099);
evalcond[1]=(((x6099*x6101))+(((-1.0)*r20*x6099*x6102)));
evalcond[2]=(((x6099*x6103))+(((-1.0)*r10*x6099*x6102)));
evalcond[3]=(((cj2*sj1))+((x6100*x6101))+((cj1*sj2))+(((-1.0)*r20*x6100*x6102)));
evalcond[4]=(((x6100*x6103))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6100*x6102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6104=((1.0)*sj0);
IkReal x6105=((1.0)*cj0);
CheckValue<IkReal> x6106 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6105))+(((-1.0)*r12*x6104)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6105))+(((-1.0)*r11*sj5*x6104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6106.valid){
continue;
}
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6106.value)+(((1.5707963267949)*(x6107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6108=IKsin(j4);
IkReal x6109=IKcos(j4);
IkReal x6110=(cj5*r00);
IkReal x6111=(cj5*r10);
IkReal x6112=(r21*sj5);
IkReal x6113=(sj1*sj2);
IkReal x6114=(cj5*r20);
IkReal x6115=((1.0)*x6109);
IkReal x6116=((1.0)*cj1*cj2);
IkReal x6117=((1.0)*x6108);
IkReal x6118=(sj5*x6108);
IkReal x6119=(sj5*x6109);
evalcond[0]=((((-1.0)*r22*x6115))+(((-1.0)*x6114*x6117))+((x6108*x6112)));
evalcond[1]=(cj0+(((-1.0)*r12*x6115))+(((-1.0)*x6111*x6117))+((r11*x6118)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6115))+((r01*x6118))+(((-1.0)*x6110*x6117)));
evalcond[3]=(((cj2*sj1))+((r22*x6108))+((cj1*sj2))+(((-1.0)*x6114*x6115))+((x6109*x6112)));
evalcond[4]=((((-1.0)*cj0*x6116))+((r01*x6119))+((r02*x6108))+((cj0*x6113))+(((-1.0)*x6110*x6115)));
evalcond[5]=((((-1.0)*sj0*x6116))+(((-1.0)*x6111*x6115))+((r11*x6119))+((sj0*x6113))+((r12*x6108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6120=((1.0)*cj5);
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6120)))),-1);
if(!x6121.valid){
continue;
}
CheckValue<IkReal> x6122 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6121.value)))+(x6122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6123=IKsin(j4);
IkReal x6124=IKcos(j4);
IkReal x6125=(cj5*r00);
IkReal x6126=(cj5*r10);
IkReal x6127=(r21*sj5);
IkReal x6128=(sj1*sj2);
IkReal x6129=(cj5*r20);
IkReal x6130=((1.0)*x6124);
IkReal x6131=((1.0)*cj1*cj2);
IkReal x6132=((1.0)*x6123);
IkReal x6133=(sj5*x6123);
IkReal x6134=(sj5*x6124);
evalcond[0]=((((-1.0)*x6129*x6132))+(((-1.0)*r22*x6130))+((x6123*x6127)));
evalcond[1]=(((r11*x6133))+cj0+(((-1.0)*x6126*x6132))+(((-1.0)*r12*x6130)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6125*x6132))+((r01*x6133))+(((-1.0)*r02*x6130)));
evalcond[3]=(((cj2*sj1))+((x6124*x6127))+((cj1*sj2))+(((-1.0)*x6129*x6130))+((r22*x6123)));
evalcond[4]=((((-1.0)*x6125*x6130))+((cj0*x6128))+(((-1.0)*cj0*x6131))+((r02*x6123))+((r01*x6134)));
evalcond[5]=(((r11*x6134))+((r12*x6123))+((sj0*x6128))+(((-1.0)*x6126*x6130))+(((-1.0)*sj0*x6131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6135=((1.0)*cj5);
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6135)))),-1);
if(!x6136.valid){
continue;
}
CheckValue<IkReal> x6137 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6136.value)))+(x6137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6138=IKsin(j4);
IkReal x6139=IKcos(j4);
IkReal x6140=(cj5*r00);
IkReal x6141=(cj5*r10);
IkReal x6142=(r21*sj5);
IkReal x6143=(sj1*sj2);
IkReal x6144=(cj5*r20);
IkReal x6145=((1.0)*x6139);
IkReal x6146=((1.0)*cj1*cj2);
IkReal x6147=((1.0)*x6138);
IkReal x6148=(sj5*x6138);
IkReal x6149=(sj5*x6139);
evalcond[0]=((((-1.0)*x6144*x6147))+((x6138*x6142))+(((-1.0)*r22*x6145)));
evalcond[1]=(cj0+((r11*x6148))+(((-1.0)*x6141*x6147))+(((-1.0)*r12*x6145)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6145))+((r01*x6148))+(((-1.0)*x6140*x6147)));
evalcond[3]=(((x6139*x6142))+(((-1.0)*x6144*x6145))+((cj2*sj1))+((r22*x6138))+((cj1*sj2)));
evalcond[4]=(((r01*x6149))+((r02*x6138))+(((-1.0)*x6140*x6145))+((cj0*x6143))+(((-1.0)*cj0*x6146)));
evalcond[5]=(((sj0*x6143))+(((-1.0)*sj0*x6146))+((r11*x6149))+(((-1.0)*x6141*x6145))+((r12*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6150=r21*r21;
IkReal x6151=cj5*cj5;
IkReal x6152=(cj2*sj1);
IkReal x6153=(cj1*sj2);
IkReal x6154=(r21*sj5);
IkReal x6155=((1.0)*cj5*r20);
CheckValue<IkReal> x6156 = IKatan2WithCheck(IkReal((((r22*x6152))+((r22*x6153)))),IkReal((((x6153*x6154))+((x6152*x6154))+(((-1.0)*x6152*x6155))+(((-1.0)*x6153*x6155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6156.valid){
continue;
}
CheckValue<IkReal> x6157=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6151*(r20*r20)))+(((2.0)*cj5*r20*x6154))+(((-1.0)*(r22*r22)))+((x6150*x6151))+(((-1.0)*x6150)))),-1);
if(!x6157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6156.value)+(((1.5707963267949)*(x6157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6158=IKsin(j4);
IkReal x6159=IKcos(j4);
IkReal x6160=(r21*sj5);
IkReal x6161=(cj5*r20);
IkReal x6162=((1.0)*x6159);
evalcond[0]=(((x6158*x6160))+(((-1.0)*r22*x6162))+(((-1.0)*x6158*x6161)));
evalcond[1]=(((r22*x6158))+((cj2*sj1))+((x6159*x6160))+((cj1*sj2))+(((-1.0)*x6161*x6162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6163=(cj5*sj4);
IkReal x6164=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6163))+((r01*x6164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6163))+(((-1.0)*r11*x6164))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6163))+((r01*x6164))))+IKsqr((((r10*x6163))+(((-1.0)*r11*x6164))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x6163))+((r01*x6164))), (((r10*x6163))+(((-1.0)*r11*x6164))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6165=IKcos(j0);
IkReal x6166=IKsin(j0);
IkReal x6167=(cj5*r01);
IkReal x6168=(r11*sj5);
IkReal x6169=((0.1157)*sj5);
IkReal x6170=((1.0)*cj2);
IkReal x6171=((0.5723)*sj2);
IkReal x6172=(cj5*r11);
IkReal x6173=((1.0)*cj4);
IkReal x6174=(r01*sj5);
IkReal x6175=((0.5723)*cj2);
IkReal x6176=((1.0)*cj1*sj2);
IkReal x6177=(cj5*x6173);
IkReal x6178=(sj1*x6165);
IkReal x6179=(cj1*x6166);
IkReal x6180=((1.0)*cj5*sj4);
IkReal x6181=(cj1*x6165);
IkReal x6182=(sj1*x6166);
evalcond[0]=(x6165+(((-1.0)*r12*x6173))+((sj4*x6168))+(((-1.0)*r10*x6180)));
evalcond[1]=((((-1.0)*r00*x6180))+(((-1.0)*x6166))+((sj4*x6174))+(((-1.0)*r02*x6173)));
evalcond[2]=(((r00*sj5))+x6167+(((-1.0)*x6170*x6178))+(((-1.0)*x6165*x6176)));
evalcond[3]=(((r10*sj5))+(((-1.0)*x6166*x6176))+(((-1.0)*x6170*x6182))+x6172);
evalcond[4]=(((sj2*x6178))+(((-1.0)*x6170*x6181))+((r02*sj4))+(((-1.0)*r00*x6177))+((cj4*x6174)));
evalcond[5]=((((-1.0)*x6170*x6179))+((sj2*x6182))+((r12*sj4))+((cj4*x6168))+(((-1.0)*r10*x6177)));
evalcond[6]=((((0.612)*x6181))+(((-0.163941)*x6166))+(((-1.0)*px))+(((-1.0)*x6171*x6178))+((x6175*x6181))+(((-1.0)*r00*x6169))+(((-0.1157)*x6167)));
evalcond[7]=((((-1.0)*x6171*x6182))+((x6175*x6179))+(((0.163941)*x6165))+(((-1.0)*py))+(((0.612)*x6179))+(((-1.0)*r10*x6169))+(((-0.1157)*x6172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6183=((1.0)*cj5);
IkReal x6184=((1.0)*sj5);
CheckValue<IkReal> x6185 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6183))+(((-1.0)*r10*x6184)))),IkReal(((((-1.0)*r00*x6184))+(((-1.0)*r01*x6183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6185.valid){
continue;
}
CheckValue<IkReal> x6186=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6186.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6185.value)+(((1.5707963267949)*(x6186.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6187=IKcos(j0);
IkReal x6188=IKsin(j0);
IkReal x6189=(cj5*r01);
IkReal x6190=((0.1157)*sj5);
IkReal x6191=((1.0)*sj1);
IkReal x6192=(cj5*r11);
IkReal x6193=((1.0)*cj1*sj2);
IkReal x6194=((0.5723)*sj1*sj2);
IkReal x6195=(cj2*x6187);
IkReal x6196=(cj1*x6188);
evalcond[0]=(((r00*sj5))+x6189+(((-1.0)*x6191*x6195))+(((-1.0)*x6187*x6193)));
evalcond[1]=(((r10*sj5))+x6192+(((-1.0)*cj2*x6188*x6191))+(((-1.0)*x6188*x6193)));
evalcond[2]=((((-0.1157)*x6189))+(((0.612)*cj1*x6187))+(((-1.0)*px))+(((-0.163941)*x6188))+(((-1.0)*r00*x6190))+(((-1.0)*x6187*x6194))+(((0.5723)*cj1*x6195)));
evalcond[3]=((((-1.0)*r10*x6190))+(((0.5723)*cj2*x6196))+(((-1.0)*py))+(((0.163941)*x6187))+(((0.612)*x6196))+(((-0.1157)*x6192))+(((-1.0)*x6188*x6194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6197=((1.0)*cj5);
IkReal x6198=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6197)));
j4eval[0]=x6198;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6197))))));
j4eval[2]=IKsign(x6198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6199=((1.0)*cj5);
IkReal x6200=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6199)));
j4eval[0]=x6200;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6199))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6200);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6201=((1.0)*sj0);
IkReal x6202=((1.0)*cj0);
IkReal x6203=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6203;
j4eval[1]=((IKabs(((((-1.0)*r02*x6202))+(((-1.0)*r12*x6201)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6201))+(((-1.0)*r01*sj5*x6202))))));
j4eval[2]=IKsign(x6203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6204=((-1.0)*r20);
IkReal x6206 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6206)==0){
continue;
}
IkReal x6205=pow(x6206,-0.5);
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6204),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6207.value));
IkReal gconst115=(r21*x6205);
IkReal gconst116=(x6204*x6205);
CheckValue<IkReal> x6208 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6208.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6208.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6209=((-1.0)*r20);
IkReal x6210=x6205;
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6209),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
IkReal x6211=((-1.0)*(x6212.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6211;
IkReal gconst114=x6211;
IkReal gconst115=(r21*x6210);
IkReal gconst116=(x6209*x6210);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6213=((-1.0)*r20);
IkReal x6214=x6205;
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6213),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
IkReal x6215=((-1.0)*(x6216.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6215;
IkReal gconst114=x6215;
IkReal gconst115=(r21*x6214);
IkReal gconst116=(x6213*x6214);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6217=((-1.0)*r20);
IkReal x6218=x6205;
CheckValue<IkReal> x6220 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6217),IKFAST_ATAN2_MAGTHRESH);
if(!x6220.valid){
continue;
}
IkReal x6219=((-1.0)*(x6220.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6219;
IkReal gconst114=x6219;
IkReal gconst115=(r21*x6218);
IkReal gconst116=(x6217*x6218);
IkReal x6221=((1.0)*(r22*r22));
CheckValue<IkReal> x6225=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6221))),-1);
if(!x6225.valid){
continue;
}
IkReal x6222=x6225.value;
IkReal x6223=((1.0)*x6222);
IkReal x6224=((((-1.0)*x6221))+(((-2.0)*x6222*(r20*r20)*(r21*r21)))+(((-1.0)*x6223*(r20*r20*r20*r20)))+(((-1.0)*x6223*(r21*r21*r21*r21))));
j4eval[0]=x6224;
j4eval[1]=IKsign(x6224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6226=(cj2*sj1);
IkReal x6227=(gconst115*r21);
IkReal x6228=(cj1*sj2);
IkReal x6229=((1.0)*gconst116*r20);
CheckValue<IkReal> x6230 = IKatan2WithCheck(IkReal((((r22*x6228))+((r22*x6226)))),IkReal(((((-1.0)*x6226*x6229))+(((-1.0)*x6228*x6229))+((x6227*x6228))+((x6226*x6227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6230.valid){
continue;
}
CheckValue<IkReal> x6231=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6227*x6227)))+(((-1.0)*gconst116*r20*x6229))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6227)))),-1);
if(!x6231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6230.value)+(((1.5707963267949)*(x6231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6232=IKsin(j4);
IkReal x6233=IKcos(j4);
IkReal x6234=(sj1*sj2);
IkReal x6235=((1.0)*x6233);
IkReal x6236=((1.0)*cj1*cj2);
IkReal x6237=(gconst115*x6232);
IkReal x6238=(gconst115*x6233);
IkReal x6239=((1.0)*gconst116*x6232);
evalcond[0]=(((r21*x6237))+(((-1.0)*r20*x6239))+(((-1.0)*r22*x6235)));
evalcond[1]=((((-1.0)*r12*x6235))+(((-1.0)*r10*x6239))+cj0+((r11*x6237)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6239))+((r01*x6237))+(((-1.0)*r02*x6235)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6238))+((r22*x6232))+(((-1.0)*gconst116*r20*x6235)));
evalcond[4]=(((r02*x6232))+(((-1.0)*cj0*x6236))+((r01*x6238))+(((-1.0)*gconst116*r00*x6235))+((cj0*x6234)));
evalcond[5]=((((-1.0)*gconst116*r10*x6235))+((r12*x6232))+((sj0*x6234))+(((-1.0)*sj0*x6236))+((r11*x6238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6240=((1.0)*gconst116);
CheckValue<IkReal> x6241=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6240)))),-1);
if(!x6241.valid){
continue;
}
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6240))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6241.value)))+(x6242.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6243=IKsin(j4);
IkReal x6244=IKcos(j4);
IkReal x6245=(sj1*sj2);
IkReal x6246=((1.0)*x6244);
IkReal x6247=((1.0)*cj1*cj2);
IkReal x6248=(gconst115*x6243);
IkReal x6249=(gconst115*x6244);
IkReal x6250=((1.0)*gconst116*x6243);
evalcond[0]=(((r21*x6248))+(((-1.0)*r22*x6246))+(((-1.0)*r20*x6250)));
evalcond[1]=(cj0+((r11*x6248))+(((-1.0)*r12*x6246))+(((-1.0)*r10*x6250)));
evalcond[2]=((((-1.0)*r02*x6246))+(((-1.0)*sj0))+(((-1.0)*r00*x6250))+((r01*x6248)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6246))+((cj1*sj2))+((r21*x6249))+((r22*x6243)));
evalcond[4]=(((r02*x6243))+(((-1.0)*cj0*x6247))+((cj0*x6245))+(((-1.0)*gconst116*r00*x6246))+((r01*x6249)));
evalcond[5]=(((r11*x6249))+((r12*x6243))+(((-1.0)*sj0*x6247))+(((-1.0)*gconst116*r10*x6246))+((sj0*x6245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6251=((1.0)*gconst116);
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6251))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6251)))),-1);
if(!x6253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6252.value)+(((1.5707963267949)*(x6253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6254=IKsin(j4);
IkReal x6255=IKcos(j4);
IkReal x6256=(sj1*sj2);
IkReal x6257=((1.0)*x6255);
IkReal x6258=((1.0)*cj1*cj2);
IkReal x6259=(gconst115*x6254);
IkReal x6260=(gconst115*x6255);
IkReal x6261=((1.0)*gconst116*x6254);
evalcond[0]=(((r21*x6259))+(((-1.0)*r22*x6257))+(((-1.0)*r20*x6261)));
evalcond[1]=(cj0+(((-1.0)*r10*x6261))+(((-1.0)*r12*x6257))+((r11*x6259)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6259))+(((-1.0)*r02*x6257))+(((-1.0)*r00*x6261)));
evalcond[3]=(((cj2*sj1))+((r22*x6254))+((cj1*sj2))+((r21*x6260))+(((-1.0)*gconst116*r20*x6257)));
evalcond[4]=(((r01*x6260))+(((-1.0)*gconst116*r00*x6257))+(((-1.0)*cj0*x6258))+((r02*x6254))+((cj0*x6256)));
evalcond[5]=(((sj0*x6256))+((r12*x6254))+(((-1.0)*sj0*x6258))+(((-1.0)*gconst116*r10*x6257))+((r11*x6260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6262=((-1.0)*r21);
IkReal x6264 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6264)==0){
continue;
}
IkReal x6263=pow(x6264,-0.5);
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(x6262),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6265.value))));
IkReal gconst118=(x6262*x6263);
IkReal gconst119=((1.0)*r20*x6263);
CheckValue<IkReal> x6266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6266.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6266.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6267=((-1.0)*r21);
CheckValue<IkReal> x6270 = IKatan2WithCheck(IkReal(x6267),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6270.valid){
continue;
}
IkReal x6268=((1.0)*(x6270.value));
IkReal x6269=x6263;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6268)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6268)));
IkReal gconst118=(x6267*x6269);
IkReal gconst119=((1.0)*r20*x6269);
IkReal x6271=r22*r22;
IkReal x6272=((1.0)*x6271);
CheckValue<IkReal> x6276=IKPowWithIntegerCheck(((-1.0)+x6271),-1);
if(!x6276.valid){
continue;
}
IkReal x6273=x6276.value;
if((((1.0)+(((-1.0)*x6272)))) < -0.00001)
continue;
IkReal x6274=IKsqrt(((1.0)+(((-1.0)*x6272))));
IkReal x6275=(cj0*x6273*x6274);
j4eval[0]=((IKabs((x6275+(((-1.0)*x6272*x6275)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6277=((-1.0)*r21);
CheckValue<IkReal> x6280 = IKatan2WithCheck(IkReal(x6277),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6280.valid){
continue;
}
IkReal x6278=((1.0)*(x6280.value));
IkReal x6279=x6263;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6278)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6278)));
IkReal gconst118=(x6277*x6279);
IkReal gconst119=((1.0)*r20*x6279);
IkReal x6281=r22*r22;
IkReal x6282=((1.0)*x6281);
CheckValue<IkReal> x6286=IKPowWithIntegerCheck(((-1.0)+x6281),-1);
if(!x6286.valid){
continue;
}
IkReal x6283=x6286.value;
if((((1.0)+(((-1.0)*x6282)))) < -0.00001)
continue;
IkReal x6284=IKsqrt(((1.0)+(((-1.0)*x6282))));
IkReal x6285=(sj0*x6283*x6284);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x6282*x6285))+x6285))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6287=((-1.0)*r21);
CheckValue<IkReal> x6290 = IKatan2WithCheck(IkReal(x6287),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6290.valid){
continue;
}
IkReal x6288=((1.0)*(x6290.value));
IkReal x6289=x6263;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6288)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6288)));
IkReal gconst118=(x6287*x6289);
IkReal gconst119=((1.0)*r20*x6289);
IkReal x6291=r22*r22;
IkReal x6292=(r12*sj0);
IkReal x6293=(cj0*r02);
CheckValue<IkReal> x6297=IKPowWithIntegerCheck(((-1.0)+x6291),-1);
if(!x6297.valid){
continue;
}
IkReal x6294=x6297.value;
if((((1.0)+(((-1.0)*x6291)))) < -0.00001)
continue;
IkReal x6295=IKsqrt(((1.0)+(((-1.0)*x6291))));
IkReal x6296=(r22*x6294*x6295);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6293))+(((-1.0)*x6292)))))+(IKabs((((x6292*x6296))+((x6293*x6296))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6298=((1.0)*sj0);
IkReal x6299=((1.0)*gconst118);
CheckValue<IkReal> x6300 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6298)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6298))+((cj0*gconst119*r00))+(((-1.0)*cj0*r01*x6299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6300.valid){
continue;
}
CheckValue<IkReal> x6301=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6299)))),-1);
if(!x6301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6300.value)+(((1.5707963267949)*(x6301.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6302=IKsin(j4);
IkReal x6303=IKcos(j4);
IkReal x6304=(gconst118*r01);
IkReal x6305=(sj1*sj2);
IkReal x6306=(gconst119*r20);
IkReal x6307=(gconst119*r10);
IkReal x6308=(gconst119*r00);
IkReal x6309=(gconst118*r21);
IkReal x6310=(gconst118*r11);
IkReal x6311=((1.0)*x6303);
IkReal x6312=((1.0)*cj1*cj2);
IkReal x6313=((1.0)*x6302);
evalcond[0]=((((-1.0)*r22*x6311))+((x6302*x6309))+(((-1.0)*x6306*x6313)));
evalcond[1]=(cj0+(((-1.0)*r12*x6311))+(((-1.0)*x6307*x6313))+((x6302*x6310)));
evalcond[2]=(((x6302*x6304))+(((-1.0)*sj0))+(((-1.0)*r02*x6311))+(((-1.0)*x6308*x6313)));
evalcond[3]=(((cj2*sj1))+((x6303*x6309))+(((-1.0)*x6306*x6311))+((cj1*sj2))+((r22*x6302)));
evalcond[4]=(((x6303*x6304))+(((-1.0)*x6308*x6311))+((r02*x6302))+((cj0*x6305))+(((-1.0)*cj0*x6312)));
evalcond[5]=(((x6303*x6310))+(((-1.0)*x6307*x6311))+(((-1.0)*sj0*x6312))+((r12*x6302))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6314=((1.0)*gconst119);
CheckValue<IkReal> x6315 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6315.valid){
continue;
}
CheckValue<IkReal> x6316=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6314)))),-1);
if(!x6316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6315.value)+(((1.5707963267949)*(x6316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6317=IKsin(j4);
IkReal x6318=IKcos(j4);
IkReal x6319=(gconst118*r01);
IkReal x6320=(sj1*sj2);
IkReal x6321=(gconst119*r20);
IkReal x6322=(gconst119*r10);
IkReal x6323=(gconst119*r00);
IkReal x6324=(gconst118*r21);
IkReal x6325=(gconst118*r11);
IkReal x6326=((1.0)*x6318);
IkReal x6327=((1.0)*cj1*cj2);
IkReal x6328=((1.0)*x6317);
evalcond[0]=(((x6317*x6324))+(((-1.0)*x6321*x6328))+(((-1.0)*r22*x6326)));
evalcond[1]=(cj0+((x6317*x6325))+(((-1.0)*x6322*x6328))+(((-1.0)*r12*x6326)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6326))+(((-1.0)*x6323*x6328))+((x6317*x6319)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6317))+((x6318*x6324))+(((-1.0)*x6321*x6326)));
evalcond[4]=(((cj0*x6320))+(((-1.0)*cj0*x6327))+((r02*x6317))+((x6318*x6319))+(((-1.0)*x6323*x6326)));
evalcond[5]=((((-1.0)*sj0*x6327))+((x6318*x6325))+((sj0*x6320))+(((-1.0)*x6322*x6326))+((r12*x6317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6329=((1.0)*gconst119);
CheckValue<IkReal> x6330=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6329))+(((-1.0)*gconst118*r00)))),-1);
if(!x6330.valid){
continue;
}
CheckValue<IkReal> x6331 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6330.value)))+(x6331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6332=IKsin(j4);
IkReal x6333=IKcos(j4);
IkReal x6334=(gconst118*r01);
IkReal x6335=(sj1*sj2);
IkReal x6336=(gconst119*r20);
IkReal x6337=(gconst119*r10);
IkReal x6338=(gconst119*r00);
IkReal x6339=(gconst118*r21);
IkReal x6340=(gconst118*r11);
IkReal x6341=((1.0)*x6333);
IkReal x6342=((1.0)*cj1*cj2);
IkReal x6343=((1.0)*x6332);
evalcond[0]=((((-1.0)*r22*x6341))+((x6332*x6339))+(((-1.0)*x6336*x6343)));
evalcond[1]=(cj0+(((-1.0)*x6337*x6343))+((x6332*x6340))+(((-1.0)*r12*x6341)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6338*x6343))+((x6332*x6334))+(((-1.0)*r02*x6341)));
evalcond[3]=(((cj2*sj1))+((r22*x6332))+((cj1*sj2))+((x6333*x6339))+(((-1.0)*x6336*x6341)));
evalcond[4]=(((r02*x6332))+(((-1.0)*cj0*x6342))+(((-1.0)*x6338*x6341))+((x6333*x6334))+((cj0*x6335)));
evalcond[5]=(((r12*x6332))+(((-1.0)*x6337*x6341))+((sj0*x6335))+((x6333*x6340))+(((-1.0)*sj0*x6342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6344=((-1.0)*r10);
IkReal x6346 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6346)==0){
continue;
}
IkReal x6345=pow(x6346,-0.5);
CheckValue<IkReal> x6347 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6344),IKFAST_ATAN2_MAGTHRESH);
if(!x6347.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6347.value));
IkReal gconst121=(r11*x6345);
IkReal gconst122=(x6344*x6345);
CheckValue<IkReal> x6348 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6348.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6348.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6349=((-1.0)*r10);
IkReal x6350=x6345;
CheckValue<IkReal> x6352 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6349),IKFAST_ATAN2_MAGTHRESH);
if(!x6352.valid){
continue;
}
IkReal x6351=((-1.0)*(x6352.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6351;
IkReal gconst120=x6351;
IkReal gconst121=(r11*x6350);
IkReal gconst122=(x6349*x6350);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6353=((1.0)*sj0);
IkReal x6354=((1.0)*gconst121);
CheckValue<IkReal> x6355 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6353)))),IkReal(((((-1.0)*cj0*r01*x6354))+((cj0*gconst122*r00))+((gconst122*r10*sj0))+(((-1.0)*gconst121*r11*x6353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6355.valid){
continue;
}
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6354))+(((-1.0)*gconst122*r21)))),-1);
if(!x6356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6355.value)+(((1.5707963267949)*(x6356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6357=IKsin(j4);
IkReal x6358=IKcos(j4);
IkReal x6359=(gconst121*r11);
IkReal x6360=(sj1*sj2);
IkReal x6361=(gconst122*r00);
IkReal x6362=(gconst122*r10);
IkReal x6363=(gconst122*r20);
IkReal x6364=((1.0)*x6358);
IkReal x6365=((1.0)*cj1*cj2);
IkReal x6366=((1.0)*x6357);
IkReal x6367=(gconst121*x6357);
IkReal x6368=(gconst121*x6358);
evalcond[0]=((((-1.0)*x6363*x6366))+(((-1.0)*r22*x6364))+((r21*x6367)));
evalcond[1]=((((-1.0)*x6362*x6366))+cj0+(((-1.0)*r12*x6364))+((x6357*x6359)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6361*x6366))+(((-1.0)*r02*x6364))+((r01*x6367)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6357))+(((-1.0)*x6363*x6364))+((r21*x6368)));
evalcond[4]=((((-1.0)*x6361*x6364))+((r01*x6368))+((cj0*x6360))+((r02*x6357))+(((-1.0)*cj0*x6365)));
evalcond[5]=((((-1.0)*x6362*x6364))+(((-1.0)*sj0*x6365))+((x6358*x6359))+((sj0*x6360))+((r12*x6357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6369=((1.0)*gconst122);
CheckValue<IkReal> x6370 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6369))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6370.valid){
continue;
}
CheckValue<IkReal> x6371=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6369)))),-1);
if(!x6371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6370.value)+(((1.5707963267949)*(x6371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6372=IKsin(j4);
IkReal x6373=IKcos(j4);
IkReal x6374=(gconst121*r11);
IkReal x6375=(sj1*sj2);
IkReal x6376=(gconst122*r00);
IkReal x6377=(gconst122*r10);
IkReal x6378=(gconst122*r20);
IkReal x6379=((1.0)*x6373);
IkReal x6380=((1.0)*cj1*cj2);
IkReal x6381=((1.0)*x6372);
IkReal x6382=(gconst121*x6372);
IkReal x6383=(gconst121*x6373);
evalcond[0]=((((-1.0)*x6378*x6381))+((r21*x6382))+(((-1.0)*r22*x6379)));
evalcond[1]=(cj0+(((-1.0)*x6377*x6381))+((x6372*x6374))+(((-1.0)*r12*x6379)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6376*x6381))+(((-1.0)*r02*x6379))+((r01*x6382)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6383))+((r22*x6372))+(((-1.0)*x6378*x6379)));
evalcond[4]=((((-1.0)*cj0*x6380))+(((-1.0)*x6376*x6379))+((cj0*x6375))+((r01*x6383))+((r02*x6372)));
evalcond[5]=(((r12*x6372))+((x6373*x6374))+((sj0*x6375))+(((-1.0)*sj0*x6380))+(((-1.0)*x6377*x6379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6384=((-1.0)*r11);
IkReal x6386 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6386)==0){
continue;
}
IkReal x6385=pow(x6386,-0.5);
CheckValue<IkReal> x6387 = IKatan2WithCheck(IkReal(x6384),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6387.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6387.value))));
IkReal gconst124=(x6384*x6385);
IkReal gconst125=((1.0)*r10*x6385);
CheckValue<IkReal> x6388 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6388.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6388.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6389=((-1.0)*r11);
CheckValue<IkReal> x6392 = IKatan2WithCheck(IkReal(x6389),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6392.valid){
continue;
}
IkReal x6390=((1.0)*(x6392.value));
IkReal x6391=x6385;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6390)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6390)));
IkReal gconst124=(x6389*x6391);
IkReal gconst125=((1.0)*r10*x6391);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6393=((-1.0)*r11);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal(x6393),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
IkReal x6394=((1.0)*(x6396.value));
IkReal x6395=x6385;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6394)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6394)));
IkReal gconst124=(x6393*x6395);
IkReal gconst125=((1.0)*r10*x6395);
IkReal x6397=r12*r12;
IkReal x6398=((1.0)*sj0);
IkReal x6399=(cj0*r02);
IkReal x6400=x6385;
j4eval[0]=((IKabs(((((-1.0)*x6399))+(((-1.0)*r12*x6398)))))+(IKabs((((r12*x6399*x6400))+((sj0*x6397*x6400))+(((-1.0)*x6398*x6400))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6401=((-1.0)*r11);
CheckValue<IkReal> x6404 = IKatan2WithCheck(IkReal(x6401),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6404.valid){
continue;
}
IkReal x6402=((1.0)*(x6404.value));
IkReal x6403=x6385;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6402)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6402)));
IkReal gconst124=(x6401*x6403);
IkReal gconst125=((1.0)*r10*x6403);
IkReal x6405=r12*r12;
IkReal x6406=((1.0)+(((-1.0)*x6405)));
IkReal x6407=(cj2*r22*sj1);
IkReal x6408=(cj1*r22*sj2);
CheckValue<IkReal> x6415=IKPowWithIntegerCheck(x6406,-1);
if(!x6415.valid){
continue;
}
IkReal x6409=x6415.value;
CheckValue<IkReal> x6416=IKPowWithIntegerCheck(((-1.0)+x6405),-1);
if(!x6416.valid){
continue;
}
IkReal x6410=x6416.value;
IkReal x6411=((1.0)*x6409);
if((x6406) < -0.00001)
continue;
IkReal x6412=IKsqrt(x6406);
IkReal x6413=((1.0)*r12*x6410*x6412);
IkReal x6414=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6409))+(((-1.0)*x6411*(r10*r10)*(r20*r20)))+(((-1.0)*x6411*(r11*r11)*(r21*r21))));
j4eval[0]=x6414;
j4eval[1]=IKsign(x6414);
j4eval[2]=((IKabs(((((-1.0)*x6407*x6413))+(((-1.0)*x6408*x6413)))))+(IKabs((x6407+x6408))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6417=(gconst124*r21);
IkReal x6418=(cj1*sj2);
IkReal x6419=(cj2*sj1);
IkReal x6420=(gconst125*r20);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal((((r22*x6419))+((r22*x6418)))),IkReal(((((-1.0)*x6418*x6420))+(((-1.0)*x6419*x6420))+((x6417*x6418))+((x6417*x6419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
CheckValue<IkReal> x6422=IKPowWithIntegerCheck(IKsign(((((2.0)*x6417*x6420))+(((-1.0)*(x6420*x6420)))+(((-1.0)*(x6417*x6417)))+(((-1.0)*(r22*r22))))),-1);
if(!x6422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6421.value)+(((1.5707963267949)*(x6422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6423=IKsin(j4);
IkReal x6424=IKcos(j4);
IkReal x6425=(sj1*sj2);
IkReal x6426=(gconst125*r20);
IkReal x6427=(gconst124*r01);
IkReal x6428=(gconst125*r00);
IkReal x6429=(gconst125*r10);
IkReal x6430=((1.0)*x6424);
IkReal x6431=((1.0)*cj1*cj2);
IkReal x6432=((1.0)*x6423);
IkReal x6433=(gconst124*x6423);
IkReal x6434=(gconst124*x6424);
evalcond[0]=((((-1.0)*x6426*x6432))+(((-1.0)*r22*x6430))+((r21*x6433)));
evalcond[1]=(cj0+((r11*x6433))+(((-1.0)*r12*x6430))+(((-1.0)*x6429*x6432)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6430))+(((-1.0)*x6428*x6432))+((x6423*x6427)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6426*x6430))+((cj1*sj2))+((r21*x6434))+((r22*x6423)));
evalcond[4]=(((r02*x6423))+((x6424*x6427))+(((-1.0)*cj0*x6431))+(((-1.0)*x6428*x6430))+((cj0*x6425)));
evalcond[5]=((((-1.0)*sj0*x6431))+((r11*x6434))+((r12*x6423))+(((-1.0)*x6429*x6430))+((sj0*x6425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6435=((1.0)*sj0);
IkReal x6436=((1.0)*cj0);
CheckValue<IkReal> x6437 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6436))+(((-1.0)*r12*x6435)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6436))+(((-1.0)*gconst124*r11*x6435))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6437.valid){
continue;
}
CheckValue<IkReal> x6438=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6437.value)+(((1.5707963267949)*(x6438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6439=IKsin(j4);
IkReal x6440=IKcos(j4);
IkReal x6441=(sj1*sj2);
IkReal x6442=(gconst125*r20);
IkReal x6443=(gconst124*r01);
IkReal x6444=(gconst125*r00);
IkReal x6445=(gconst125*r10);
IkReal x6446=((1.0)*x6440);
IkReal x6447=((1.0)*cj1*cj2);
IkReal x6448=((1.0)*x6439);
IkReal x6449=(gconst124*x6439);
IkReal x6450=(gconst124*x6440);
evalcond[0]=(((r21*x6449))+(((-1.0)*x6442*x6448))+(((-1.0)*r22*x6446)));
evalcond[1]=(((r11*x6449))+cj0+(((-1.0)*r12*x6446))+(((-1.0)*x6445*x6448)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6446))+(((-1.0)*x6444*x6448))+((x6439*x6443)));
evalcond[3]=(((r22*x6439))+((cj2*sj1))+((cj1*sj2))+((r21*x6450))+(((-1.0)*x6442*x6446)));
evalcond[4]=(((cj0*x6441))+((x6440*x6443))+(((-1.0)*x6444*x6446))+((r02*x6439))+(((-1.0)*cj0*x6447)));
evalcond[5]=((((-1.0)*sj0*x6447))+((r11*x6450))+((r12*x6439))+((sj0*x6441))+(((-1.0)*x6445*x6446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6451=((1.0)*gconst125);
CheckValue<IkReal> x6452 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6451))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6452.valid){
continue;
}
CheckValue<IkReal> x6453=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6451)))),-1);
if(!x6453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6452.value)+(((1.5707963267949)*(x6453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6454=IKsin(j4);
IkReal x6455=IKcos(j4);
IkReal x6456=(sj1*sj2);
IkReal x6457=(gconst125*r20);
IkReal x6458=(gconst124*r01);
IkReal x6459=(gconst125*r00);
IkReal x6460=(gconst125*r10);
IkReal x6461=((1.0)*x6455);
IkReal x6462=((1.0)*cj1*cj2);
IkReal x6463=((1.0)*x6454);
IkReal x6464=(gconst124*x6454);
IkReal x6465=(gconst124*x6455);
evalcond[0]=((((-1.0)*x6457*x6463))+((r21*x6464))+(((-1.0)*r22*x6461)));
evalcond[1]=(cj0+(((-1.0)*r12*x6461))+((r11*x6464))+(((-1.0)*x6460*x6463)));
evalcond[2]=((((-1.0)*sj0))+((x6454*x6458))+(((-1.0)*r02*x6461))+(((-1.0)*x6459*x6463)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6457*x6461))+((r21*x6465))+((cj1*sj2))+((r22*x6454)));
evalcond[4]=(((cj0*x6456))+((x6455*x6458))+((r02*x6454))+(((-1.0)*x6459*x6461))+(((-1.0)*cj0*x6462)));
evalcond[5]=(((sj0*x6456))+((r11*x6465))+(((-1.0)*x6460*x6461))+(((-1.0)*sj0*x6462))+((r12*x6454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6466=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6466;
j4eval[1]=IKsign(x6466);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6467=((1.0)*cj5);
IkReal x6468=((((-1.0)*r01*x6467))+(((-1.0)*r00*sj5)));
j4eval[0]=x6468;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6467)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6468);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6469=cj5*cj5;
IkReal x6470=r11*r11;
IkReal x6471=(cj5*r10);
IkReal x6472=(r11*sj5);
IkReal x6473=((((2.0)*x6471*x6472))+(((-1.0)*(r12*r12)))+(((-1.0)*x6469*(r10*r10)))+(((-1.0)*x6470))+((x6469*x6470)));
j4eval[0]=x6473;
j4eval[1]=IKsign(x6473);
j4eval[2]=((IKabs((x6472+(((-1.0)*x6471)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6474=cj5*cj5;
IkReal x6475=r11*r11;
IkReal x6476=(cj5*r10);
IkReal x6477=(r11*sj5);
CheckValue<IkReal> x6478 = IKatan2WithCheck(IkReal((x6477+(((-1.0)*x6476)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6478.valid){
continue;
}
CheckValue<IkReal> x6479=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6474*(r10*r10)))+(((2.0)*x6476*x6477))+(((-1.0)*(r12*r12)))+((x6474*x6475))+(((-1.0)*x6475)))),-1);
if(!x6479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6478.value)+(((1.5707963267949)*(x6479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6480=IKcos(j4);
IkReal x6481=IKsin(j4);
IkReal x6482=(cj5*r00);
IkReal x6483=(cj5*r10);
IkReal x6484=(r21*sj5);
IkReal x6485=(cj5*r20);
IkReal x6486=((1.0)*x6480);
IkReal x6487=((1.0)*x6481);
IkReal x6488=(sj5*x6481);
IkReal x6489=(sj5*x6480);
evalcond[0]=(((r11*x6489))+((r12*x6481))+(((-1.0)*x6483*x6486)));
evalcond[1]=((((-1.0)*x6485*x6487))+(((-1.0)*r22*x6486))+((x6481*x6484)));
evalcond[2]=(((r01*x6488))+(((-1.0)*r02*x6486))+(((-1.0)*x6482*x6487)));
evalcond[3]=((1.0)+((r11*x6488))+(((-1.0)*r12*x6486))+(((-1.0)*x6483*x6487)));
evalcond[4]=((((-1.0)*x6485*x6486))+((cj2*sj1))+((cj1*sj2))+((x6480*x6484))+((r22*x6481)));
evalcond[5]=(((r01*x6489))+((r02*x6481))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6482*x6486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6490=((1.0)*cj5);
CheckValue<IkReal> x6491 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6490))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6491.valid){
continue;
}
CheckValue<IkReal> x6492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6490))+(((-1.0)*r00*sj5)))),-1);
if(!x6492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6491.value)+(((1.5707963267949)*(x6492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6493=IKcos(j4);
IkReal x6494=IKsin(j4);
IkReal x6495=(cj5*r00);
IkReal x6496=(cj5*r10);
IkReal x6497=(r21*sj5);
IkReal x6498=(cj5*r20);
IkReal x6499=((1.0)*x6493);
IkReal x6500=((1.0)*x6494);
IkReal x6501=(sj5*x6494);
IkReal x6502=(sj5*x6493);
evalcond[0]=(((r12*x6494))+(((-1.0)*x6496*x6499))+((r11*x6502)));
evalcond[1]=((((-1.0)*r22*x6499))+((x6494*x6497))+(((-1.0)*x6498*x6500)));
evalcond[2]=((((-1.0)*r02*x6499))+((r01*x6501))+(((-1.0)*x6495*x6500)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6499))+(((-1.0)*x6496*x6500))+((r11*x6501)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6493*x6497))+(((-1.0)*x6498*x6499))+((r22*x6494)));
evalcond[5]=((((-1.0)*x6495*x6499))+((r02*x6494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6503=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6503.valid){
continue;
}
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6503.value)))+(x6504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6505=IKcos(j4);
IkReal x6506=IKsin(j4);
IkReal x6507=(cj5*r00);
IkReal x6508=(cj5*r10);
IkReal x6509=(r21*sj5);
IkReal x6510=(cj5*r20);
IkReal x6511=((1.0)*x6505);
IkReal x6512=((1.0)*x6506);
IkReal x6513=(sj5*x6506);
IkReal x6514=(sj5*x6505);
evalcond[0]=(((r12*x6506))+((r11*x6514))+(((-1.0)*x6508*x6511)));
evalcond[1]=((((-1.0)*r22*x6511))+(((-1.0)*x6510*x6512))+((x6506*x6509)));
evalcond[2]=((((-1.0)*r02*x6511))+((r01*x6513))+(((-1.0)*x6507*x6512)));
evalcond[3]=((1.0)+((r11*x6513))+(((-1.0)*r12*x6511))+(((-1.0)*x6508*x6512)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6506))+(((-1.0)*x6510*x6511))+((x6505*x6509)));
evalcond[5]=(((r02*x6506))+((r01*x6514))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6507*x6511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6515=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6515;
j4eval[1]=IKsign(x6515);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6516=((1.0)*cj5);
IkReal x6517=((((-1.0)*r21*x6516))+(((-1.0)*r20*sj5)));
j4eval[0]=x6517;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6516))))));
j4eval[2]=IKsign(x6517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6518=cj5*cj5;
IkReal x6519=r11*r11;
IkReal x6520=(r11*sj5);
IkReal x6521=(cj5*r10);
IkReal x6522=((r12*r12)+((x6518*(r10*r10)))+(((-1.0)*x6518*x6519))+x6519+(((-2.0)*x6520*x6521)));
j4eval[0]=x6522;
j4eval[1]=IKsign(x6522);
j4eval[2]=((IKabs(r12))+(IKabs((x6520+(((-1.0)*x6521))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6523=cj5*cj5;
IkReal x6524=r11*r11;
IkReal x6525=(cj5*r10);
IkReal x6526=(r11*sj5);
CheckValue<IkReal> x6527 = IKatan2WithCheck(IkReal((x6526+(((-1.0)*x6525)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6527.valid){
continue;
}
CheckValue<IkReal> x6528=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x6523*x6524))+x6524+((x6523*(r10*r10)))+(((-2.0)*x6525*x6526)))),-1);
if(!x6528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6527.value)+(((1.5707963267949)*(x6528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6529=IKcos(j4);
IkReal x6530=IKsin(j4);
IkReal x6531=(cj5*r00);
IkReal x6532=(cj5*r10);
IkReal x6533=(r21*sj5);
IkReal x6534=(cj5*r20);
IkReal x6535=((1.0)*x6529);
IkReal x6536=((1.0)*x6530);
IkReal x6537=(sj5*x6530);
IkReal x6538=(sj5*x6529);
evalcond[0]=((((-1.0)*x6532*x6535))+((r11*x6538))+((r12*x6530)));
evalcond[1]=((((-1.0)*x6534*x6536))+(((-1.0)*r22*x6535))+((x6530*x6533)));
evalcond[2]=((((-1.0)*r02*x6535))+((r01*x6537))+(((-1.0)*x6531*x6536)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6535))+(((-1.0)*x6532*x6536))+((r11*x6537)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6534*x6535))+((cj1*sj2))+((r22*x6530))+((x6529*x6533)));
evalcond[5]=(((r02*x6530))+(((-1.0)*sj1*sj2))+((r01*x6538))+((cj1*cj2))+(((-1.0)*x6531*x6535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6539=((1.0)*cj5);
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
CheckValue<IkReal> x6541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6539))+(((-1.0)*r20*sj5)))),-1);
if(!x6541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6540.value)+(((1.5707963267949)*(x6541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6542=IKcos(j4);
IkReal x6543=IKsin(j4);
IkReal x6544=(cj5*r00);
IkReal x6545=(cj5*r10);
IkReal x6546=(r21*sj5);
IkReal x6547=(cj5*r20);
IkReal x6548=((1.0)*x6542);
IkReal x6549=((1.0)*x6543);
IkReal x6550=(sj5*x6543);
IkReal x6551=(sj5*x6542);
evalcond[0]=((((-1.0)*x6545*x6548))+((r11*x6551))+((r12*x6543)));
evalcond[1]=(((x6543*x6546))+(((-1.0)*r22*x6548))+(((-1.0)*x6547*x6549)));
evalcond[2]=((((-1.0)*r02*x6548))+((r01*x6550))+(((-1.0)*x6544*x6549)));
evalcond[3]=((-1.0)+(((-1.0)*x6545*x6549))+(((-1.0)*r12*x6548))+((r11*x6550)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6542*x6546))+((r22*x6543))+(((-1.0)*x6547*x6548)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6543))+((cj1*cj2))+((r01*x6551))+(((-1.0)*x6544*x6548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6552 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6552.valid){
continue;
}
CheckValue<IkReal> x6553=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6552.value)+(((1.5707963267949)*(x6553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6554=IKcos(j4);
IkReal x6555=IKsin(j4);
IkReal x6556=(cj5*r00);
IkReal x6557=(cj5*r10);
IkReal x6558=(r21*sj5);
IkReal x6559=(cj5*r20);
IkReal x6560=((1.0)*x6554);
IkReal x6561=((1.0)*x6555);
IkReal x6562=(sj5*x6555);
IkReal x6563=(sj5*x6554);
evalcond[0]=(((r11*x6563))+(((-1.0)*x6557*x6560))+((r12*x6555)));
evalcond[1]=((((-1.0)*r22*x6560))+(((-1.0)*x6559*x6561))+((x6555*x6558)));
evalcond[2]=((((-1.0)*x6556*x6561))+(((-1.0)*r02*x6560))+((r01*x6562)));
evalcond[3]=((-1.0)+((r11*x6562))+(((-1.0)*x6557*x6561))+(((-1.0)*r12*x6560)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6555))+((x6554*x6558))+(((-1.0)*x6559*x6560)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6555))+(((-1.0)*x6556*x6560))+((cj1*cj2))+((r01*x6563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6564=((-1.0)*r00);
IkReal x6566 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6566)==0){
continue;
}
IkReal x6565=pow(x6566,-0.5);
CheckValue<IkReal> x6567 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6564),IKFAST_ATAN2_MAGTHRESH);
if(!x6567.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6567.value));
IkReal gconst127=(r01*x6565);
IkReal gconst128=(x6564*x6565);
CheckValue<IkReal> x6568 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6568.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6568.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6569=((-1.0)*r00);
IkReal x6570=x6565;
CheckValue<IkReal> x6572 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6569),IKFAST_ATAN2_MAGTHRESH);
if(!x6572.valid){
continue;
}
IkReal x6571=((-1.0)*(x6572.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6571;
IkReal gconst126=x6571;
IkReal gconst127=(r01*x6570);
IkReal gconst128=(x6569*x6570);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6573=((1.0)*sj0);
IkReal x6574=((1.0)*gconst127);
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6573)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x6574))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x6573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
CheckValue<IkReal> x6576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6574)))),-1);
if(!x6576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6575.value)+(((1.5707963267949)*(x6576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6577=IKsin(j4);
IkReal x6578=IKcos(j4);
IkReal x6579=(gconst127*r01);
IkReal x6580=(sj1*sj2);
IkReal x6581=(gconst128*r10);
IkReal x6582=(gconst128*r00);
IkReal x6583=(gconst128*r20);
IkReal x6584=((1.0)*x6578);
IkReal x6585=((1.0)*cj1*cj2);
IkReal x6586=((1.0)*x6577);
IkReal x6587=(gconst127*x6578);
IkReal x6588=(gconst127*x6577);
evalcond[0]=(((r21*x6588))+(((-1.0)*r22*x6584))+(((-1.0)*x6583*x6586)));
evalcond[1]=(((r11*x6588))+cj0+(((-1.0)*x6581*x6586))+(((-1.0)*r12*x6584)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6584))+(((-1.0)*x6582*x6586))+((x6577*x6579)));
evalcond[3]=(((r22*x6577))+((cj2*sj1))+((r21*x6587))+((cj1*sj2))+(((-1.0)*x6583*x6584)));
evalcond[4]=(((cj0*x6580))+(((-1.0)*cj0*x6585))+((x6578*x6579))+(((-1.0)*x6582*x6584))+((r02*x6577)));
evalcond[5]=(((sj0*x6580))+((r11*x6587))+(((-1.0)*x6581*x6584))+((r12*x6577))+(((-1.0)*sj0*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6589=((1.0)*gconst128);
CheckValue<IkReal> x6590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6589))+(((-1.0)*gconst127*r10)))),-1);
if(!x6590.valid){
continue;
}
CheckValue<IkReal> x6591 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6589))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6590.value)))+(x6591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6592=IKsin(j4);
IkReal x6593=IKcos(j4);
IkReal x6594=(gconst127*r01);
IkReal x6595=(sj1*sj2);
IkReal x6596=(gconst128*r10);
IkReal x6597=(gconst128*r00);
IkReal x6598=(gconst128*r20);
IkReal x6599=((1.0)*x6593);
IkReal x6600=((1.0)*cj1*cj2);
IkReal x6601=((1.0)*x6592);
IkReal x6602=(gconst127*x6593);
IkReal x6603=(gconst127*x6592);
evalcond[0]=((((-1.0)*x6598*x6601))+((r21*x6603))+(((-1.0)*r22*x6599)));
evalcond[1]=((((-1.0)*x6596*x6601))+cj0+(((-1.0)*r12*x6599))+((r11*x6603)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6599))+((x6592*x6594))+(((-1.0)*x6597*x6601)));
evalcond[3]=((((-1.0)*x6598*x6599))+((cj2*sj1))+((r22*x6592))+((cj1*sj2))+((r21*x6602)));
evalcond[4]=(((x6593*x6594))+((r02*x6592))+((cj0*x6595))+(((-1.0)*cj0*x6600))+(((-1.0)*x6597*x6599)));
evalcond[5]=(((r12*x6592))+((sj0*x6595))+(((-1.0)*sj0*x6600))+(((-1.0)*x6596*x6599))+((r11*x6602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6604=((-1.0)*r01);
IkReal x6606 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6606)==0){
continue;
}
IkReal x6605=pow(x6606,-0.5);
CheckValue<IkReal> x6607 = IKatan2WithCheck(IkReal(x6604),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6607.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6607.value))));
IkReal gconst130=(x6604*x6605);
IkReal gconst131=((1.0)*r00*x6605);
CheckValue<IkReal> x6608 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6608.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6608.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6609=((-1.0)*r01);
CheckValue<IkReal> x6612 = IKatan2WithCheck(IkReal(x6609),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6612.valid){
continue;
}
IkReal x6610=((1.0)*(x6612.value));
IkReal x6611=x6605;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6610)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6610)));
IkReal gconst130=(x6609*x6611);
IkReal gconst131=((1.0)*r00*x6611);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6613=((-1.0)*r01);
CheckValue<IkReal> x6616 = IKatan2WithCheck(IkReal(x6613),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6616.valid){
continue;
}
IkReal x6614=((1.0)*(x6616.value));
IkReal x6615=x6605;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6614)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6614)));
IkReal gconst130=(x6613*x6615);
IkReal gconst131=((1.0)*r00*x6615);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6617=((-1.0)*r01);
CheckValue<IkReal> x6620 = IKatan2WithCheck(IkReal(x6617),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6620.valid){
continue;
}
IkReal x6618=((1.0)*(x6620.value));
IkReal x6619=x6605;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6618)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6618)));
IkReal gconst130=(x6617*x6619);
IkReal gconst131=((1.0)*r00*x6619);
IkReal x6621=r02*r02;
IkReal x6622=(r12*sj0);
IkReal x6623=((1.0)*cj0);
IkReal x6624=x6605;
j4eval[0]=((IKabs(((((-1.0)*x6622))+(((-1.0)*r02*x6623)))))+(IKabs((((cj0*x6621*x6624))+((r02*x6622*x6624))+(((-1.0)*x6623*x6624))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6625=((1.0)*sj0);
IkReal x6626=((1.0)*gconst130);
CheckValue<IkReal> x6627=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6626)))),-1);
if(!x6627.valid){
continue;
}
CheckValue<IkReal> x6628 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6625))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6625))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x6626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6627.value)))+(x6628.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6629=IKsin(j4);
IkReal x6630=IKcos(j4);
IkReal x6631=(gconst131*r10);
IkReal x6632=(sj1*sj2);
IkReal x6633=(gconst131*r20);
IkReal x6634=(gconst131*r00);
IkReal x6635=((1.0)*x6630);
IkReal x6636=((1.0)*cj1*cj2);
IkReal x6637=(gconst130*x6629);
IkReal x6638=((1.0)*x6629);
IkReal x6639=(gconst130*x6630);
evalcond[0]=((((-1.0)*r22*x6635))+((r21*x6637))+(((-1.0)*x6633*x6638)));
evalcond[1]=(cj0+((r11*x6637))+(((-1.0)*r12*x6635))+(((-1.0)*x6631*x6638)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6637))+(((-1.0)*x6634*x6638))+(((-1.0)*r02*x6635)));
evalcond[3]=(((cj2*sj1))+((r21*x6639))+((cj1*sj2))+((r22*x6629))+(((-1.0)*x6633*x6635)));
evalcond[4]=(((r02*x6629))+((r01*x6639))+(((-1.0)*x6634*x6635))+(((-1.0)*cj0*x6636))+((cj0*x6632)));
evalcond[5]=(((r12*x6629))+((r11*x6639))+(((-1.0)*sj0*x6636))+(((-1.0)*x6631*x6635))+((sj0*x6632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6640=((1.0)*gconst131);
CheckValue<IkReal> x6641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6640))+(((-1.0)*gconst130*r10)))),-1);
if(!x6641.valid){
continue;
}
CheckValue<IkReal> x6642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6641.value)))+(x6642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6643=IKsin(j4);
IkReal x6644=IKcos(j4);
IkReal x6645=(gconst131*r10);
IkReal x6646=(sj1*sj2);
IkReal x6647=(gconst131*r20);
IkReal x6648=(gconst131*r00);
IkReal x6649=((1.0)*x6644);
IkReal x6650=((1.0)*cj1*cj2);
IkReal x6651=(gconst130*x6643);
IkReal x6652=((1.0)*x6643);
IkReal x6653=(gconst130*x6644);
evalcond[0]=((((-1.0)*r22*x6649))+(((-1.0)*x6647*x6652))+((r21*x6651)));
evalcond[1]=(cj0+(((-1.0)*x6645*x6652))+((r11*x6651))+(((-1.0)*r12*x6649)));
evalcond[2]=((((-1.0)*x6648*x6652))+(((-1.0)*sj0))+((r01*x6651))+(((-1.0)*r02*x6649)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6643))+(((-1.0)*x6647*x6649))+((r21*x6653)));
evalcond[4]=(((r01*x6653))+(((-1.0)*cj0*x6650))+((cj0*x6646))+((r02*x6643))+(((-1.0)*x6648*x6649)));
evalcond[5]=(((r11*x6653))+(((-1.0)*sj0*x6650))+(((-1.0)*x6645*x6649))+((r12*x6643))+((sj0*x6646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6654=((1.0)*gconst131);
CheckValue<IkReal> x6655=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6654))+(((-1.0)*gconst130*r00)))),-1);
if(!x6655.valid){
continue;
}
CheckValue<IkReal> x6656 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6655.value)))+(x6656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6657=IKsin(j4);
IkReal x6658=IKcos(j4);
IkReal x6659=(gconst131*r10);
IkReal x6660=(sj1*sj2);
IkReal x6661=(gconst131*r20);
IkReal x6662=(gconst131*r00);
IkReal x6663=((1.0)*x6658);
IkReal x6664=((1.0)*cj1*cj2);
IkReal x6665=(gconst130*x6657);
IkReal x6666=((1.0)*x6657);
IkReal x6667=(gconst130*x6658);
evalcond[0]=((((-1.0)*x6661*x6666))+((r21*x6665))+(((-1.0)*r22*x6663)));
evalcond[1]=(cj0+((r11*x6665))+(((-1.0)*r12*x6663))+(((-1.0)*x6659*x6666)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6665))+(((-1.0)*r02*x6663))+(((-1.0)*x6662*x6666)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6661*x6663))+((r21*x6667))+((r22*x6657)));
evalcond[4]=(((r02*x6657))+((r01*x6667))+(((-1.0)*cj0*x6664))+(((-1.0)*x6662*x6663))+((cj0*x6660)));
evalcond[5]=(((r12*x6657))+(((-1.0)*sj0*x6664))+((r11*x6667))+((sj0*x6660))+(((-1.0)*x6659*x6663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6668=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6668;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6669=((1.0)*cj5);
IkReal x6670=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6669)));
j4eval[0]=x6670;
j4eval[1]=((IKabs(((((-1.0)*r20*x6669))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6671=cj5*cj5;
IkReal x6672=r01*r01;
IkReal x6673=(cj5*r00);
IkReal x6674=(r01*sj5);
IkReal x6675=((((-2.0)*x6673*x6674))+x6672+(((-1.0)*x6671*x6672))+((x6671*(r00*r00)))+(r02*r02));
j4eval[0]=x6675;
j4eval[1]=IKsign(x6675);
j4eval[2]=((IKabs(r02))+(IKabs((x6674+(((-1.0)*x6673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6676=cj5*cj5;
IkReal x6677=r01*r01;
IkReal x6678=(r01*sj5);
IkReal x6679=(cj5*r00);
CheckValue<IkReal> x6680=IKPowWithIntegerCheck(IKsign((((x6676*(r00*r00)))+x6677+(((-2.0)*x6678*x6679))+(((-1.0)*x6676*x6677))+(r02*r02))),-1);
if(!x6680.valid){
continue;
}
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal((x6678+(((-1.0)*x6679)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6680.value)))+(x6681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6682=IKcos(j4);
IkReal x6683=IKsin(j4);
IkReal x6684=(cj5*r00);
IkReal x6685=(cj5*r10);
IkReal x6686=(r21*sj5);
IkReal x6687=(cj5*r20);
IkReal x6688=((1.0)*x6682);
IkReal x6689=((1.0)*x6683);
IkReal x6690=(sj5*x6683);
IkReal x6691=(sj5*x6682);
evalcond[0]=(((r02*x6683))+(((-1.0)*x6684*x6688))+((r01*x6691)));
evalcond[1]=(((x6683*x6686))+(((-1.0)*x6687*x6689))+(((-1.0)*r22*x6688)));
evalcond[2]=(((r11*x6690))+(((-1.0)*r12*x6688))+(((-1.0)*x6685*x6689)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6688))+(((-1.0)*x6684*x6689))+((r01*x6690)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6683))+((x6682*x6686))+(((-1.0)*x6687*x6688)));
evalcond[5]=(((r12*x6683))+((r11*x6691))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6685*x6688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6692=((1.0)*cj5);
CheckValue<IkReal> x6693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6692)))),-1);
if(!x6693.valid){
continue;
}
CheckValue<IkReal> x6694 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6692))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6693.value)))+(x6694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6695=IKcos(j4);
IkReal x6696=IKsin(j4);
IkReal x6697=(cj5*r00);
IkReal x6698=(cj5*r10);
IkReal x6699=(r21*sj5);
IkReal x6700=(cj5*r20);
IkReal x6701=((1.0)*x6695);
IkReal x6702=((1.0)*x6696);
IkReal x6703=(sj5*x6696);
IkReal x6704=(sj5*x6695);
evalcond[0]=((((-1.0)*x6697*x6701))+((r01*x6704))+((r02*x6696)));
evalcond[1]=(((x6696*x6699))+(((-1.0)*r22*x6701))+(((-1.0)*x6700*x6702)));
evalcond[2]=((((-1.0)*x6698*x6702))+((r11*x6703))+(((-1.0)*r12*x6701)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6701))+(((-1.0)*x6697*x6702))+((r01*x6703)));
evalcond[4]=(((cj2*sj1))+((r22*x6696))+((cj1*sj2))+((x6695*x6699))+(((-1.0)*x6700*x6701)));
evalcond[5]=((((-1.0)*x6698*x6701))+((r12*x6696))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6705=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6705.valid){
continue;
}
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6705.value)))+(x6706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6707=IKcos(j4);
IkReal x6708=IKsin(j4);
IkReal x6709=(cj5*r00);
IkReal x6710=(cj5*r10);
IkReal x6711=(r21*sj5);
IkReal x6712=(cj5*r20);
IkReal x6713=((1.0)*x6707);
IkReal x6714=((1.0)*x6708);
IkReal x6715=(sj5*x6708);
IkReal x6716=(sj5*x6707);
evalcond[0]=((((-1.0)*x6709*x6713))+((r01*x6716))+((r02*x6708)));
evalcond[1]=((((-1.0)*x6712*x6714))+((x6708*x6711))+(((-1.0)*r22*x6713)));
evalcond[2]=(((r11*x6715))+(((-1.0)*x6710*x6714))+(((-1.0)*r12*x6713)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6713))+(((-1.0)*x6709*x6714))+((r01*x6715)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6707*x6711))+(((-1.0)*x6712*x6713))+((r22*x6708)));
evalcond[5]=(((r11*x6716))+(((-1.0)*x6710*x6713))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6717=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6717;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6718=((1.0)*cj5);
IkReal x6719=((((-1.0)*r21*x6718))+(((-1.0)*r20*sj5)));
j4eval[0]=x6719;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6718))))));
j4eval[2]=IKsign(x6719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6720=(r01*sj5);
IkReal x6721=(cj1*sj2);
IkReal x6722=(cj2*sj1);
IkReal x6723=((1.0)*r02);
IkReal x6724=((1.0)*cj5*r00);
IkReal x6725=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6725;
j4eval[1]=((IKabs(((((-1.0)*x6722*x6724))+(((-1.0)*x6721*x6724))+((x6720*x6722))+((x6720*x6721)))))+(IKabs(((((-1.0)*x6722*x6723))+(((-1.0)*x6721*x6723))))));
j4eval[2]=IKsign(x6725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6726=(r01*sj5);
IkReal x6727=(cj1*sj2);
IkReal x6728=(cj2*sj1);
IkReal x6729=((1.0)*r02);
IkReal x6730=((1.0)*cj5*r00);
CheckValue<IkReal> x6731 = IKatan2WithCheck(IkReal(((((-1.0)*x6727*x6730))+(((-1.0)*x6728*x6730))+((x6726*x6728))+((x6726*x6727)))),IkReal(((((-1.0)*x6727*x6729))+(((-1.0)*x6728*x6729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6731.valid){
continue;
}
CheckValue<IkReal> x6732=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6731.value)+(((1.5707963267949)*(x6732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6733=IKcos(j4);
IkReal x6734=IKsin(j4);
IkReal x6735=(cj5*r00);
IkReal x6736=(cj5*r10);
IkReal x6737=(r21*sj5);
IkReal x6738=(cj5*r20);
IkReal x6739=((1.0)*x6733);
IkReal x6740=((1.0)*x6734);
IkReal x6741=(sj5*x6734);
IkReal x6742=(sj5*x6733);
evalcond[0]=((((-1.0)*x6735*x6739))+((r01*x6742))+((r02*x6734)));
evalcond[1]=((((-1.0)*r22*x6739))+((x6734*x6737))+(((-1.0)*x6738*x6740)));
evalcond[2]=((((-1.0)*r12*x6739))+((r11*x6741))+(((-1.0)*x6736*x6740)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6739))+((r01*x6741))+(((-1.0)*x6735*x6740)));
evalcond[4]=(((r22*x6734))+((cj2*sj1))+((cj1*sj2))+((x6733*x6737))+(((-1.0)*x6738*x6739)));
evalcond[5]=(((r11*x6742))+(((-1.0)*sj1*sj2))+((r12*x6734))+(((-1.0)*x6736*x6739))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6743=((1.0)*cj5);
CheckValue<IkReal> x6744 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6743))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6744.valid){
continue;
}
CheckValue<IkReal> x6745=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6743))+(((-1.0)*r20*sj5)))),-1);
if(!x6745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6744.value)+(((1.5707963267949)*(x6745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6746=IKcos(j4);
IkReal x6747=IKsin(j4);
IkReal x6748=(cj5*r00);
IkReal x6749=(cj5*r10);
IkReal x6750=(r21*sj5);
IkReal x6751=(cj5*r20);
IkReal x6752=((1.0)*x6746);
IkReal x6753=((1.0)*x6747);
IkReal x6754=(sj5*x6747);
IkReal x6755=(sj5*x6746);
evalcond[0]=(((r02*x6747))+((r01*x6755))+(((-1.0)*x6748*x6752)));
evalcond[1]=((((-1.0)*r22*x6752))+(((-1.0)*x6751*x6753))+((x6747*x6750)));
evalcond[2]=(((r11*x6754))+(((-1.0)*x6749*x6753))+(((-1.0)*r12*x6752)));
evalcond[3]=((1.0)+((r01*x6754))+(((-1.0)*x6748*x6753))+(((-1.0)*r02*x6752)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6746*x6750))+(((-1.0)*x6751*x6752))+((r22*x6747)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6755))+((r12*x6747))+(((-1.0)*x6749*x6752))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6756 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6756.valid){
continue;
}
CheckValue<IkReal> x6757=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6756.value)+(((1.5707963267949)*(x6757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6758=IKcos(j4);
IkReal x6759=IKsin(j4);
IkReal x6760=(cj5*r00);
IkReal x6761=(cj5*r10);
IkReal x6762=(r21*sj5);
IkReal x6763=(cj5*r20);
IkReal x6764=((1.0)*x6758);
IkReal x6765=((1.0)*x6759);
IkReal x6766=(sj5*x6759);
IkReal x6767=(sj5*x6758);
evalcond[0]=((((-1.0)*x6760*x6764))+((r01*x6767))+((r02*x6759)));
evalcond[1]=(((x6759*x6762))+(((-1.0)*r22*x6764))+(((-1.0)*x6763*x6765)));
evalcond[2]=(((r11*x6766))+(((-1.0)*r12*x6764))+(((-1.0)*x6761*x6765)));
evalcond[3]=((1.0)+(((-1.0)*x6760*x6765))+((r01*x6766))+(((-1.0)*r02*x6764)));
evalcond[4]=(((x6758*x6762))+((cj2*sj1))+((r22*x6759))+((cj1*sj2))+(((-1.0)*x6763*x6764)));
evalcond[5]=(((r12*x6759))+(((-1.0)*sj1*sj2))+((r11*x6767))+((cj1*cj2))+(((-1.0)*x6761*x6764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6768=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6768);
rxp1_1=(px*r21);
rxp1_2=(r11*x6768);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6769=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6769);
rxp1_1=(px*r21);
rxp1_2=(r11*x6769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6770=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6770);
rxp1_1=(px*r21);
rxp1_2=(r11*x6770);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6773=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6773.valid){
continue;
}
IkReal x6771=x6773.value;
IkReal x6772=(sj0*x6771);
cj4array[0]=((((-1.0)*sj1*sj2*x6772))+((cj1*cj2*x6772)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6774=IKsin(j4);
IkReal x6775=IKcos(j4);
IkReal x6776=(r21*sj5);
IkReal x6777=((1.0)*cj5*r20);
evalcond[0]=(r02*x6774);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6775)));
evalcond[2]=(((x6774*x6776))+(((-1.0)*x6774*x6777)));
evalcond[3]=((((-1.0)*cj5*r10*x6774))+((r11*sj5*x6774)));
evalcond[4]=(((cj2*sj1))+((x6775*x6776))+((cj1*sj2))+(((-1.0)*x6775*x6777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6780=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6780.valid){
continue;
}
IkReal x6778=x6780.value;
IkReal x6779=((1.0)*x6778);
cj4array[0]=((((-1.0)*cj1*sj2*x6779))+(((-1.0)*cj2*sj1*x6779)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6781=IKsin(j4);
IkReal x6782=IKcos(j4);
IkReal x6783=((1.0)*sj0);
IkReal x6784=((1.0)*cj5);
IkReal x6785=(sj5*x6781);
evalcond[0]=(r02*x6781);
evalcond[1]=((((-1.0)*x6783))+(((-1.0)*r02*x6782)));
evalcond[2]=(((r21*x6785))+(((-1.0)*r20*x6781*x6784)));
evalcond[3]=((((-1.0)*r10*x6781*x6784))+((r11*x6785)));
evalcond[4]=(((r11*sj5*x6782))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6783))+(((-1.0)*r10*x6782*x6784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6786=IKPowWithIntegerCheck(r02,-1);
if(!x6786.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6786.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6787=IKsin(j4);
IkReal x6788=IKcos(j4);
IkReal x6789=(r21*sj5);
IkReal x6790=((1.0)*cj5);
IkReal x6791=(r11*sj5);
evalcond[0]=(r02*x6787);
evalcond[1]=((((-1.0)*r20*x6787*x6790))+((x6787*x6789)));
evalcond[2]=(((x6787*x6791))+(((-1.0)*r10*x6787*x6790)));
evalcond[3]=(((cj2*sj1))+((x6788*x6789))+(((-1.0)*r20*x6788*x6790))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r10*x6788*x6790))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6788*x6791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6792=((1.0)*sj0);
IkReal x6793=((1.0)*cj0);
CheckValue<IkReal> x6794 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6792))+(((-1.0)*r02*x6793)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6792))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6794.valid){
continue;
}
CheckValue<IkReal> x6795=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6794.value)+(((1.5707963267949)*(x6795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6796=IKsin(j4);
IkReal x6797=IKcos(j4);
IkReal x6798=(cj5*r00);
IkReal x6799=(cj5*r10);
IkReal x6800=(r21*sj5);
IkReal x6801=(sj1*sj2);
IkReal x6802=(cj5*r20);
IkReal x6803=((1.0)*x6797);
IkReal x6804=((1.0)*cj1*cj2);
IkReal x6805=((1.0)*x6796);
IkReal x6806=(sj5*x6796);
IkReal x6807=(sj5*x6797);
evalcond[0]=(((x6796*x6800))+(((-1.0)*r22*x6803))+(((-1.0)*x6802*x6805)));
evalcond[1]=(cj0+(((-1.0)*r12*x6803))+((r11*x6806))+(((-1.0)*x6799*x6805)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6803))+((r01*x6806))+(((-1.0)*x6798*x6805)));
evalcond[3]=(((cj2*sj1))+((r22*x6796))+((cj1*sj2))+(((-1.0)*x6802*x6803))+((x6797*x6800)));
evalcond[4]=(((r02*x6796))+((r01*x6807))+(((-1.0)*cj0*x6804))+(((-1.0)*x6798*x6803))+((cj0*x6801)));
evalcond[5]=((((-1.0)*sj0*x6804))+((sj0*x6801))+((r11*x6807))+((r12*x6796))+(((-1.0)*x6799*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6808=((1.0)*cj5);
CheckValue<IkReal> x6809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6808)))),-1);
if(!x6809.valid){
continue;
}
CheckValue<IkReal> x6810 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6808))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6809.value)))+(x6810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6811=IKsin(j4);
IkReal x6812=IKcos(j4);
IkReal x6813=(cj5*r00);
IkReal x6814=(cj5*r10);
IkReal x6815=(r21*sj5);
IkReal x6816=(sj1*sj2);
IkReal x6817=(cj5*r20);
IkReal x6818=((1.0)*x6812);
IkReal x6819=((1.0)*cj1*cj2);
IkReal x6820=((1.0)*x6811);
IkReal x6821=(sj5*x6811);
IkReal x6822=(sj5*x6812);
evalcond[0]=((((-1.0)*x6817*x6820))+((x6811*x6815))+(((-1.0)*r22*x6818)));
evalcond[1]=((((-1.0)*x6814*x6820))+cj0+((r11*x6821))+(((-1.0)*r12*x6818)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6821))+(((-1.0)*x6813*x6820))+(((-1.0)*r02*x6818)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6817*x6818))+((cj1*sj2))+((x6812*x6815))+((r22*x6811)));
evalcond[4]=(((r01*x6822))+((r02*x6811))+((cj0*x6816))+(((-1.0)*x6813*x6818))+(((-1.0)*cj0*x6819)));
evalcond[5]=(((r12*x6811))+((r11*x6822))+((sj0*x6816))+(((-1.0)*sj0*x6819))+(((-1.0)*x6814*x6818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6823=((1.0)*cj5);
CheckValue<IkReal> x6824 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6824.valid){
continue;
}
CheckValue<IkReal> x6825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6823)))),-1);
if(!x6825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6824.value)+(((1.5707963267949)*(x6825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6826=IKsin(j4);
IkReal x6827=IKcos(j4);
IkReal x6828=(cj5*r00);
IkReal x6829=(cj5*r10);
IkReal x6830=(r21*sj5);
IkReal x6831=(sj1*sj2);
IkReal x6832=(cj5*r20);
IkReal x6833=((1.0)*x6827);
IkReal x6834=((1.0)*cj1*cj2);
IkReal x6835=((1.0)*x6826);
IkReal x6836=(sj5*x6826);
IkReal x6837=(sj5*x6827);
evalcond[0]=(((x6826*x6830))+(((-1.0)*x6832*x6835))+(((-1.0)*r22*x6833)));
evalcond[1]=(cj0+(((-1.0)*r12*x6833))+((r11*x6836))+(((-1.0)*x6829*x6835)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6833))+((r01*x6836))+(((-1.0)*x6828*x6835)));
evalcond[3]=(((cj2*sj1))+((r22*x6826))+((cj1*sj2))+(((-1.0)*x6832*x6833))+((x6827*x6830)));
evalcond[4]=(((r02*x6826))+((r01*x6837))+(((-1.0)*x6828*x6833))+(((-1.0)*cj0*x6834))+((cj0*x6831)));
evalcond[5]=((((-1.0)*sj0*x6834))+((sj0*x6831))+((r11*x6837))+((r12*x6826))+(((-1.0)*x6829*x6833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6838=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6838;
j0eval[1]=IKsign(x6838);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6839=cj5*cj5;
IkReal x6840=r21*r21;
IkReal x6841=(cj2*sj1);
IkReal x6842=(cj1*sj2);
IkReal x6843=(r21*sj5);
IkReal x6844=((1.0)*cj5*r20);
IkReal x6845=((((-2.0)*cj5*r20*x6843))+(r22*r22)+((x6839*(r20*r20)))+x6840+(((-1.0)*x6839*x6840)));
j4eval[0]=x6845;
j4eval[1]=IKsign(x6845);
j4eval[2]=((IKabs(((((-1.0)*x6841*x6844))+((x6841*x6843))+(((-1.0)*x6842*x6844))+((x6842*x6843)))))+(IKabs((((r22*x6842))+((r22*x6841))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6846=cj1*cj1;
IkReal x6847=(cj2*sj2);
IkReal x6848=(cj2*sj1);
IkReal x6849=(cj1*sj1);
j0eval[0]=((((-2.0)*x6846*x6847))+(((-2.0)*cj1*cj2*x6848))+(((-1.06936921195177)*sj2*x6846))+(((-1.06936921195177)*cj1*x6848))+x6849+x6847);
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6848)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.114688717055332)*px))+(((0.828504447384304)*py))), ((((0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6850=IKsin(j0);
IkReal x6851=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((1.1843)*x6851))+(((-0.163941)*x6850)));
evalcond[1]=((((0.163941)*x6851))+(((-1.0)*py))+(((1.1843)*x6850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6852=((1.0)*cj5);
IkReal x6853=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6852)));
j4eval[0]=x6853;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6852))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6854=((1.0)*cj5);
IkReal x6855=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6854)));
j4eval[0]=x6855;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6854))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6856=cj5*cj5;
IkReal x6857=((1.0)*sj5);
IkReal x6858=(cj5*r20);
IkReal x6859=(r11*r21);
IkReal x6860=((((-1.0)*r11*x6857*x6858))+(((-1.0)*x6856*x6859))+((r12*r22))+(((-1.0)*cj5*r10*r21*x6857))+x6859+((r10*r20*x6856)));
j4eval[0]=x6860;
j4eval[1]=IKsign(x6860);
j4eval[2]=((IKabs((((cj0*x6858))+(((-1.0)*cj0*r21*x6857)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6861=cj5*cj5;
IkReal x6862=((1.0)*sj5);
IkReal x6863=(cj5*r20);
IkReal x6864=(r11*r21);
CheckValue<IkReal> x6865=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6862))+((r12*r22))+(((-1.0)*x6861*x6864))+(((-1.0)*r11*x6862*x6863))+x6864+((r10*r20*x6861)))),-1);
if(!x6865.valid){
continue;
}
CheckValue<IkReal> x6866 = IKatan2WithCheck(IkReal((((cj0*x6863))+(((-1.0)*cj0*r21*x6862)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6865.value)))+(x6866.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6867=IKsin(j4);
IkReal x6868=IKcos(j4);
IkReal x6869=((1.0)*sj0);
IkReal x6870=(cj5*r00);
IkReal x6871=(r11*sj5);
IkReal x6872=(cj5*r10);
IkReal x6873=(r21*sj5);
IkReal x6874=(cj5*r20);
IkReal x6875=(r01*sj5);
IkReal x6876=((1.0)*x6868);
IkReal x6877=((1.0)*x6867);
evalcond[0]=((((-1.0)*x6874*x6877))+(((-1.0)*r22*x6876))+((x6867*x6873)));
evalcond[1]=((((-1.0)*r22*x6877))+((x6868*x6874))+(((-1.0)*x6873*x6876)));
evalcond[2]=(cj0+(((-1.0)*r12*x6876))+(((-1.0)*x6872*x6877))+((x6867*x6871)));
evalcond[3]=((((-1.0)*x6869))+(((-1.0)*x6870*x6877))+(((-1.0)*r02*x6876))+((x6867*x6875)));
evalcond[4]=((((-1.0)*x6875*x6876))+((x6868*x6870))+(((-1.0)*r02*x6877))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6871*x6876))+(((-1.0)*x6869))+(((-1.0)*r12*x6877))+((x6868*x6872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6878=((1.0)*cj5);
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6878))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6878)))),-1);
if(!x6880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6879.value)+(((1.5707963267949)*(x6880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6881=IKsin(j4);
IkReal x6882=IKcos(j4);
IkReal x6883=((1.0)*sj0);
IkReal x6884=(cj5*r00);
IkReal x6885=(r11*sj5);
IkReal x6886=(cj5*r10);
IkReal x6887=(r21*sj5);
IkReal x6888=(cj5*r20);
IkReal x6889=(r01*sj5);
IkReal x6890=((1.0)*x6882);
IkReal x6891=((1.0)*x6881);
evalcond[0]=((((-1.0)*x6888*x6891))+(((-1.0)*r22*x6890))+((x6881*x6887)));
evalcond[1]=(((x6882*x6888))+(((-1.0)*r22*x6891))+(((-1.0)*x6887*x6890)));
evalcond[2]=(cj0+(((-1.0)*x6886*x6891))+(((-1.0)*r12*x6890))+((x6881*x6885)));
evalcond[3]=((((-1.0)*x6883))+(((-1.0)*r02*x6890))+((x6881*x6889))+(((-1.0)*x6884*x6891)));
evalcond[4]=((((-1.0)*x6889*x6890))+((x6882*x6884))+(((-1.0)*r02*x6891))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6885*x6890))+(((-1.0)*r12*x6891))+(((-1.0)*x6883))+((x6882*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6892=((1.0)*cj5);
CheckValue<IkReal> x6893 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6893.valid){
continue;
}
CheckValue<IkReal> x6894=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6892))+(((-1.0)*r00*sj5)))),-1);
if(!x6894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6893.value)+(((1.5707963267949)*(x6894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6895=IKsin(j4);
IkReal x6896=IKcos(j4);
IkReal x6897=((1.0)*sj0);
IkReal x6898=(cj5*r00);
IkReal x6899=(r11*sj5);
IkReal x6900=(cj5*r10);
IkReal x6901=(r21*sj5);
IkReal x6902=(cj5*r20);
IkReal x6903=(r01*sj5);
IkReal x6904=((1.0)*x6896);
IkReal x6905=((1.0)*x6895);
evalcond[0]=((((-1.0)*r22*x6904))+((x6895*x6901))+(((-1.0)*x6902*x6905)));
evalcond[1]=(((x6896*x6902))+(((-1.0)*r22*x6905))+(((-1.0)*x6901*x6904)));
evalcond[2]=(((x6895*x6899))+(((-1.0)*x6900*x6905))+cj0+(((-1.0)*r12*x6904)));
evalcond[3]=((((-1.0)*r02*x6904))+((x6895*x6903))+(((-1.0)*x6898*x6905))+(((-1.0)*x6897)));
evalcond[4]=((((-1.0)*r02*x6905))+((x6896*x6898))+(((-1.0)*x6903*x6904))+(((-1.0)*cj0)));
evalcond[5]=(((x6896*x6900))+(((-1.0)*r12*x6905))+(((-1.0)*x6897))+(((-1.0)*x6899*x6904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6906=IKsin(j0);
IkReal x6907=IKcos(j0);
evalcond[0]=((((0.0397)*x6907))+(((-1.0)*px))+(((-0.163941)*x6906)));
evalcond[1]=((((0.163941)*x6907))+(((0.0397)*x6906))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6908=((1.0)*cj5);
IkReal x6909=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6908)));
j4eval[0]=x6909;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6908))))));
j4eval[2]=IKsign(x6909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6910=cj5*cj5;
IkReal x6911=((1.0)*r21);
IkReal x6912=(cj5*sj5);
IkReal x6913=((1.0)*r20);
IkReal x6914=((((-1.0)*r01*x6912*x6913))+((r01*r21))+((r00*r20*x6910))+(((-1.0)*r01*x6910*x6911))+((r02*r22))+(((-1.0)*r00*x6911*x6912)));
j4eval[0]=x6914;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6913)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6915=cj5*cj5;
IkReal x6916=(r21*sj5);
IkReal x6917=(r11*r21);
IkReal x6918=((1.0)*cj5*r20);
IkReal x6919=((((-1.0)*r11*sj5*x6918))+((r12*r22))+((r10*r20*x6915))+x6917+(((-1.0)*x6915*x6917))+(((-1.0)*cj5*r10*x6916)));
j4eval[0]=x6919;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6918))+((sj0*x6916))))));
j4eval[2]=IKsign(x6919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6920=cj5*cj5;
IkReal x6921=(r21*sj5);
IkReal x6922=(r11*r21);
IkReal x6923=((1.0)*cj5*r20);
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6921))+(((-1.0)*sj0*x6923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6923))+((r12*r22))+(((-1.0)*x6920*x6922))+x6922+((r10*r20*x6920))+(((-1.0)*cj5*r10*x6921)))),-1);
if(!x6925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6924.value)+(((1.5707963267949)*(x6925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6926=IKsin(j4);
IkReal x6927=IKcos(j4);
IkReal x6928=(r11*sj5);
IkReal x6929=(cj5*r00);
IkReal x6930=(cj5*r10);
IkReal x6931=(r21*sj5);
IkReal x6932=(cj5*r20);
IkReal x6933=(r01*sj5);
IkReal x6934=((1.0)*x6927);
IkReal x6935=((1.0)*x6926);
evalcond[0]=((((-1.0)*x6932*x6935))+((x6926*x6931))+(((-1.0)*r22*x6934)));
evalcond[1]=(((x6927*x6932))+(((-1.0)*r22*x6935))+(((-1.0)*x6931*x6934)));
evalcond[2]=(((x6926*x6928))+cj0+(((-1.0)*x6930*x6935))+(((-1.0)*r12*x6934)));
evalcond[3]=(cj0+((x6927*x6929))+(((-1.0)*r02*x6935))+(((-1.0)*x6933*x6934)));
evalcond[4]=(sj0+((x6927*x6930))+(((-1.0)*r12*x6935))+(((-1.0)*x6928*x6934)));
evalcond[5]=((((-1.0)*sj0))+((x6926*x6933))+(((-1.0)*r02*x6934))+(((-1.0)*x6929*x6935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6936=cj5*cj5;
IkReal x6937=((1.0)*r21);
IkReal x6938=(cj5*sj5);
IkReal x6939=((1.0)*r20);
CheckValue<IkReal> x6940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6938*x6939))+((r01*r21))+(((-1.0)*r00*x6937*x6938))+((r00*r20*x6936))+(((-1.0)*r01*x6936*x6937))+((r02*r22)))),-1);
if(!x6940.valid){
continue;
}
CheckValue<IkReal> x6941 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6940.value)))+(x6941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6942=IKsin(j4);
IkReal x6943=IKcos(j4);
IkReal x6944=(r11*sj5);
IkReal x6945=(cj5*r00);
IkReal x6946=(cj5*r10);
IkReal x6947=(r21*sj5);
IkReal x6948=(cj5*r20);
IkReal x6949=(r01*sj5);
IkReal x6950=((1.0)*x6943);
IkReal x6951=((1.0)*x6942);
evalcond[0]=((((-1.0)*x6948*x6951))+((x6942*x6947))+(((-1.0)*r22*x6950)));
evalcond[1]=(((x6943*x6948))+(((-1.0)*r22*x6951))+(((-1.0)*x6947*x6950)));
evalcond[2]=(cj0+(((-1.0)*r12*x6950))+((x6942*x6944))+(((-1.0)*x6946*x6951)));
evalcond[3]=(cj0+((x6943*x6945))+(((-1.0)*r02*x6951))+(((-1.0)*x6949*x6950)));
evalcond[4]=(sj0+(((-1.0)*r12*x6951))+((x6943*x6946))+(((-1.0)*x6944*x6950)));
evalcond[5]=((((-1.0)*sj0))+((x6942*x6949))+(((-1.0)*x6945*x6951))+(((-1.0)*r02*x6950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6952=((1.0)*cj5);
CheckValue<IkReal> x6953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6952)))),-1);
if(!x6953.valid){
continue;
}
CheckValue<IkReal> x6954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6953.value)))+(x6954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6955=IKsin(j4);
IkReal x6956=IKcos(j4);
IkReal x6957=(r11*sj5);
IkReal x6958=(cj5*r00);
IkReal x6959=(cj5*r10);
IkReal x6960=(r21*sj5);
IkReal x6961=(cj5*r20);
IkReal x6962=(r01*sj5);
IkReal x6963=((1.0)*x6956);
IkReal x6964=((1.0)*x6955);
evalcond[0]=(((x6955*x6960))+(((-1.0)*x6961*x6964))+(((-1.0)*r22*x6963)));
evalcond[1]=(((x6956*x6961))+(((-1.0)*r22*x6964))+(((-1.0)*x6960*x6963)));
evalcond[2]=((((-1.0)*x6959*x6964))+cj0+(((-1.0)*r12*x6963))+((x6955*x6957)));
evalcond[3]=(((x6956*x6958))+(((-1.0)*r02*x6964))+cj0+(((-1.0)*x6962*x6963)));
evalcond[4]=(((x6956*x6959))+sj0+(((-1.0)*r12*x6964))+(((-1.0)*x6957*x6963)));
evalcond[5]=(((x6955*x6962))+(((-1.0)*sj0))+(((-1.0)*r02*x6963))+(((-1.0)*x6958*x6964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6965=((1.0)*sj5);
IkReal x6966=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6965))+(((-1.0)*r11*x6966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6966))+(((-1.0)*r00*x6965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6965))+(((-1.0)*r11*x6966))))+IKsqr(((((-1.0)*r01*x6966))+(((-1.0)*r00*x6965))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6965))+(((-1.0)*r11*x6966))), ((((-1.0)*r01*x6966))+(((-1.0)*r00*x6965))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6967=IKsin(j0);
IkReal x6968=IKcos(j0);
IkReal x6969=(cj5*r01);
IkReal x6970=(cj5*r11);
IkReal x6971=((0.1157)*sj5);
IkReal x6972=((1.0)*sj5);
evalcond[0]=((((-1.0)*x6969))+(((-1.0)*x6968))+(((-1.0)*r00*x6972)));
evalcond[1]=((((-1.0)*x6970))+(((-1.0)*x6967))+(((-1.0)*r10*x6972)));
evalcond[2]=((((-0.1157)*x6969))+(((-1.0)*px))+(((-0.163941)*x6967))+(((-1.0)*r00*x6971)));
evalcond[3]=((((-0.1157)*x6970))+(((-1.0)*r10*x6971))+(((-1.0)*py))+(((0.163941)*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6973=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6973;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6974=((1.0)*cj5);
IkReal x6975=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6974)));
j4eval[0]=x6975;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6974))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6976=cj5*cj5;
IkReal x6977=r21*r21;
IkReal x6978=(r21*sj5);
IkReal x6979=(cj5*r20);
IkReal x6980=((r22*r22)+(((-2.0)*x6978*x6979))+x6977+(((-1.0)*x6976*x6977))+((x6976*(r20*r20))));
j4eval[0]=x6980;
j4eval[1]=IKsign(x6980);
j4eval[2]=((IKabs(((((-1.0)*x6979))+x6978)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6981=cj5*cj5;
IkReal x6982=r21*r21;
IkReal x6983=(r21*sj5);
IkReal x6984=(cj5*r20);
CheckValue<IkReal> x6985 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6984))+x6983)),IKFAST_ATAN2_MAGTHRESH);
if(!x6985.valid){
continue;
}
CheckValue<IkReal> x6986=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x6981*(r20*r20)))+x6982+(((-1.0)*x6981*x6982))+(((-2.0)*x6983*x6984)))),-1);
if(!x6986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6985.value)+(((1.5707963267949)*(x6986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6987=IKsin(j4);
IkReal x6988=IKcos(j4);
IkReal x6989=(r11*sj5);
IkReal x6990=(r21*sj5);
IkReal x6991=(cj5*r00);
IkReal x6992=(cj5*r20);
IkReal x6993=(r01*sj5);
IkReal x6994=(cj5*r10);
IkReal x6995=((1.0)*x6988);
IkReal x6996=((1.0)*x6987);
evalcond[0]=(((x6987*x6990))+(((-1.0)*r22*x6995))+(((-1.0)*x6992*x6996)));
evalcond[1]=((((-1.0)*x6993*x6995))+((x6988*x6991))+(((-1.0)*r02*x6996)));
evalcond[2]=((((-1.0)*r12*x6996))+((x6988*x6994))+(((-1.0)*x6989*x6995)));
evalcond[3]=((((-1.0)*r12*x6995))+cj0+((x6987*x6989))+(((-1.0)*x6994*x6996)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6996))+(((-1.0)*x6990*x6995))+((x6988*x6992)));
evalcond[5]=((((-1.0)*sj0))+((x6987*x6993))+(((-1.0)*r02*x6995))+(((-1.0)*x6991*x6996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6997=((1.0)*cj5);
CheckValue<IkReal> x6998 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6998.valid){
continue;
}
CheckValue<IkReal> x6999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6997)))),-1);
if(!x6999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6998.value)+(((1.5707963267949)*(x6999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7000=IKsin(j4);
IkReal x7001=IKcos(j4);
IkReal x7002=(r11*sj5);
IkReal x7003=(r21*sj5);
IkReal x7004=(cj5*r00);
IkReal x7005=(cj5*r20);
IkReal x7006=(r01*sj5);
IkReal x7007=(cj5*r10);
IkReal x7008=((1.0)*x7001);
IkReal x7009=((1.0)*x7000);
evalcond[0]=(((x7000*x7003))+(((-1.0)*r22*x7008))+(((-1.0)*x7005*x7009)));
evalcond[1]=((((-1.0)*r02*x7009))+(((-1.0)*x7006*x7008))+((x7001*x7004)));
evalcond[2]=((((-1.0)*r12*x7009))+(((-1.0)*x7002*x7008))+((x7001*x7007)));
evalcond[3]=((((-1.0)*r12*x7008))+((x7000*x7002))+cj0+(((-1.0)*x7007*x7009)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7009))+(((-1.0)*x7003*x7008))+((x7001*x7005)));
evalcond[5]=(((x7000*x7006))+(((-1.0)*r02*x7008))+(((-1.0)*sj0))+(((-1.0)*x7004*x7009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7010 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7010.valid){
continue;
}
CheckValue<IkReal> x7011=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7010.value)+(((1.5707963267949)*(x7011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7012=IKsin(j4);
IkReal x7013=IKcos(j4);
IkReal x7014=(r11*sj5);
IkReal x7015=(r21*sj5);
IkReal x7016=(cj5*r00);
IkReal x7017=(cj5*r20);
IkReal x7018=(r01*sj5);
IkReal x7019=(cj5*r10);
IkReal x7020=((1.0)*x7013);
IkReal x7021=((1.0)*x7012);
evalcond[0]=((((-1.0)*r22*x7020))+(((-1.0)*x7017*x7021))+((x7012*x7015)));
evalcond[1]=(((x7013*x7016))+(((-1.0)*x7018*x7020))+(((-1.0)*r02*x7021)));
evalcond[2]=((((-1.0)*r12*x7021))+((x7013*x7019))+(((-1.0)*x7014*x7020)));
evalcond[3]=((((-1.0)*r12*x7020))+cj0+(((-1.0)*x7019*x7021))+((x7012*x7014)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7021))+((x7013*x7017))+(((-1.0)*x7015*x7020)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7020))+(((-1.0)*x7016*x7021))+((x7012*x7018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7022=IKcos(j0);
IkReal x7023=IKsin(j0);
evalcond[0]=((((-0.163941)*x7023))+(((-0.5723)*x7022))+(((-1.0)*px)));
evalcond[1]=((((-0.5723)*x7023))+(((0.163941)*x7022))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7024=((1.0)*cj5);
IkReal x7025=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7024)));
j4eval[0]=x7025;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7024)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7025);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7026=cj5*cj5;
IkReal x7027=((1.0)*r21);
IkReal x7028=(cj5*sj5);
IkReal x7029=((1.0)*r20);
IkReal x7030=(((r01*r21))+(((-1.0)*r00*x7027*x7028))+(((-1.0)*r01*x7026*x7027))+((r00*r20*x7026))+(((-1.0)*r01*x7028*x7029))+((r02*r22)));
j4eval[0]=x7030;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x7029))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7031=cj5*cj5;
IkReal x7032=(r21*sj5);
IkReal x7033=(r11*r21);
IkReal x7034=((1.0)*cj5*r20);
IkReal x7035=(x7033+(((-1.0)*r11*sj5*x7034))+(((-1.0)*x7031*x7033))+((r12*r22))+((r10*r20*x7031))+(((-1.0)*cj5*r10*x7032)));
j4eval[0]=x7035;
j4eval[1]=((IKabs((((sj0*x7032))+(((-1.0)*sj0*x7034)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7036=cj5*cj5;
IkReal x7037=(r21*sj5);
IkReal x7038=(r11*r21);
IkReal x7039=((1.0)*cj5*r20);
CheckValue<IkReal> x7040 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7037))+(((-1.0)*sj0*x7039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7040.valid){
continue;
}
CheckValue<IkReal> x7041=IKPowWithIntegerCheck(IKsign((x7038+(((-1.0)*r11*sj5*x7039))+(((-1.0)*x7036*x7038))+((r12*r22))+((r10*r20*x7036))+(((-1.0)*cj5*r10*x7037)))),-1);
if(!x7041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7040.value)+(((1.5707963267949)*(x7041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7042=IKsin(j4);
IkReal x7043=IKcos(j4);
IkReal x7044=(r11*sj5);
IkReal x7045=(cj5*r00);
IkReal x7046=(cj5*r10);
IkReal x7047=(r21*sj5);
IkReal x7048=(cj5*r20);
IkReal x7049=(r01*sj5);
IkReal x7050=((1.0)*x7043);
IkReal x7051=((1.0)*x7042);
evalcond[0]=((((-1.0)*r22*x7050))+(((-1.0)*x7048*x7051))+((x7042*x7047)));
evalcond[1]=((((-1.0)*x7047*x7050))+(((-1.0)*r22*x7051))+((x7043*x7048)));
evalcond[2]=((((-1.0)*x7046*x7051))+cj0+(((-1.0)*r12*x7050))+((x7042*x7044)));
evalcond[3]=(cj0+(((-1.0)*x7049*x7050))+((x7043*x7045))+(((-1.0)*r02*x7051)));
evalcond[4]=(sj0+(((-1.0)*x7044*x7050))+(((-1.0)*r12*x7051))+((x7043*x7046)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7045*x7051))+((x7042*x7049))+(((-1.0)*r02*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7052=cj5*cj5;
IkReal x7053=((1.0)*r21);
IkReal x7054=(cj5*sj5);
IkReal x7055=((1.0)*r20);
CheckValue<IkReal> x7056=IKPowWithIntegerCheck(IKsign((((r00*r20*x7052))+(((-1.0)*r01*x7052*x7053))+((r01*r21))+(((-1.0)*r00*x7053*x7054))+(((-1.0)*r01*x7054*x7055))+((r02*r22)))),-1);
if(!x7056.valid){
continue;
}
CheckValue<IkReal> x7057 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7056.value)))+(x7057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7058=IKsin(j4);
IkReal x7059=IKcos(j4);
IkReal x7060=(r11*sj5);
IkReal x7061=(cj5*r00);
IkReal x7062=(cj5*r10);
IkReal x7063=(r21*sj5);
IkReal x7064=(cj5*r20);
IkReal x7065=(r01*sj5);
IkReal x7066=((1.0)*x7059);
IkReal x7067=((1.0)*x7058);
evalcond[0]=((((-1.0)*x7064*x7067))+((x7058*x7063))+(((-1.0)*r22*x7066)));
evalcond[1]=((((-1.0)*x7063*x7066))+((x7059*x7064))+(((-1.0)*r22*x7067)));
evalcond[2]=(cj0+(((-1.0)*x7062*x7067))+(((-1.0)*r12*x7066))+((x7058*x7060)));
evalcond[3]=(cj0+((x7059*x7061))+(((-1.0)*x7065*x7066))+(((-1.0)*r02*x7067)));
evalcond[4]=(sj0+((x7059*x7062))+(((-1.0)*r12*x7067))+(((-1.0)*x7060*x7066)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7066))+(((-1.0)*x7061*x7067))+((x7058*x7065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7068=((1.0)*cj5);
CheckValue<IkReal> x7069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7069.valid){
continue;
}
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7068))+(((-1.0)*r00*sj5)))),-1);
if(!x7070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7069.value)+(((1.5707963267949)*(x7070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7071=IKsin(j4);
IkReal x7072=IKcos(j4);
IkReal x7073=(r11*sj5);
IkReal x7074=(cj5*r00);
IkReal x7075=(cj5*r10);
IkReal x7076=(r21*sj5);
IkReal x7077=(cj5*r20);
IkReal x7078=(r01*sj5);
IkReal x7079=((1.0)*x7072);
IkReal x7080=((1.0)*x7071);
evalcond[0]=(((x7071*x7076))+(((-1.0)*r22*x7079))+(((-1.0)*x7077*x7080)));
evalcond[1]=((((-1.0)*x7076*x7079))+((x7072*x7077))+(((-1.0)*r22*x7080)));
evalcond[2]=(cj0+((x7071*x7073))+(((-1.0)*r12*x7079))+(((-1.0)*x7075*x7080)));
evalcond[3]=(cj0+((x7072*x7074))+(((-1.0)*x7078*x7079))+(((-1.0)*r02*x7080)));
evalcond[4]=(sj0+((x7072*x7075))+(((-1.0)*x7073*x7079))+(((-1.0)*r12*x7080)));
evalcond[5]=((((-1.0)*sj0))+((x7071*x7078))+(((-1.0)*r02*x7079))+(((-1.0)*x7074*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7081=IKsin(j0);
IkReal x7082=IKcos(j0);
IkReal x7083=(cj5*r01);
IkReal x7084=(cj5*r11);
IkReal x7085=((0.1157)*sj5);
IkReal x7086=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7083))+x7082+(((-1.0)*r00*x7086)));
evalcond[1]=((((-1.0)*x7084))+x7081+(((-1.0)*r10*x7086)));
evalcond[2]=((((-0.163941)*x7081))+(((-1.0)*r00*x7085))+(((-1.0)*px))+(((-0.1157)*x7083)));
evalcond[3]=((((0.163941)*x7082))+(((-1.0)*r10*x7085))+(((-1.0)*py))+(((-0.1157)*x7084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7087=((1.0)*sj5);
IkReal x7088=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7087)));
j4eval[0]=x7088;
j4eval[1]=IKsign(x7088);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7087))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7089=((1.0)*cj5);
IkReal x7090=((((-1.0)*r01*x7089))+(((-1.0)*r00*sj5)));
j4eval[0]=x7090;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7089)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7091=r21*r21;
IkReal x7092=cj5*cj5;
IkReal x7093=(r21*sj5);
IkReal x7094=(cj5*r20);
IkReal x7095=((((-1.0)*x7091))+(((-1.0)*(r22*r22)))+(((2.0)*x7093*x7094))+((x7091*x7092))+(((-1.0)*x7092*(r20*r20))));
j4eval[0]=x7095;
j4eval[1]=((IKabs(((((-1.0)*x7094))+x7093)))+(IKabs(r22)));
j4eval[2]=IKsign(x7095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7096=r21*r21;
IkReal x7097=cj5*cj5;
IkReal x7098=(r21*sj5);
IkReal x7099=(cj5*r20);
CheckValue<IkReal> x7100=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7096))+((x7096*x7097))+(((-1.0)*(r22*r22)))+(((-1.0)*x7097*(r20*r20)))+(((2.0)*x7098*x7099)))),-1);
if(!x7100.valid){
continue;
}
CheckValue<IkReal> x7101 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7099))+x7098)),IKFAST_ATAN2_MAGTHRESH);
if(!x7101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7100.value)))+(x7101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7102=IKsin(j4);
IkReal x7103=IKcos(j4);
IkReal x7104=(r11*sj5);
IkReal x7105=(r21*sj5);
IkReal x7106=(cj5*r00);
IkReal x7107=(cj5*r20);
IkReal x7108=(r01*sj5);
IkReal x7109=(cj5*r10);
IkReal x7110=((1.0)*x7103);
IkReal x7111=((1.0)*x7102);
evalcond[0]=(((x7102*x7105))+(((-1.0)*x7107*x7111))+(((-1.0)*r22*x7110)));
evalcond[1]=((((-1.0)*r02*x7111))+((x7103*x7106))+(((-1.0)*x7108*x7110)));
evalcond[2]=((((-1.0)*x7104*x7110))+(((-1.0)*r12*x7111))+((x7103*x7109)));
evalcond[3]=(((x7102*x7104))+cj0+(((-1.0)*r12*x7110))+(((-1.0)*x7109*x7111)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7111))+((x7103*x7107))+(((-1.0)*x7105*x7110)));
evalcond[5]=(((x7102*x7108))+(((-1.0)*sj0))+(((-1.0)*r02*x7110))+(((-1.0)*x7106*x7111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7112=((1.0)*cj5);
CheckValue<IkReal> x7113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7112)))),-1);
if(!x7113.valid){
continue;
}
CheckValue<IkReal> x7114 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7113.value)))+(x7114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7115=IKsin(j4);
IkReal x7116=IKcos(j4);
IkReal x7117=(r11*sj5);
IkReal x7118=(r21*sj5);
IkReal x7119=(cj5*r00);
IkReal x7120=(cj5*r20);
IkReal x7121=(r01*sj5);
IkReal x7122=(cj5*r10);
IkReal x7123=((1.0)*x7116);
IkReal x7124=((1.0)*x7115);
evalcond[0]=((((-1.0)*x7120*x7124))+(((-1.0)*r22*x7123))+((x7115*x7118)));
evalcond[1]=(((x7116*x7119))+(((-1.0)*x7121*x7123))+(((-1.0)*r02*x7124)));
evalcond[2]=(((x7116*x7122))+(((-1.0)*r12*x7124))+(((-1.0)*x7117*x7123)));
evalcond[3]=(cj0+(((-1.0)*x7122*x7124))+(((-1.0)*r12*x7123))+((x7115*x7117)));
evalcond[4]=((-1.0)+(((-1.0)*x7118*x7123))+(((-1.0)*r22*x7124))+((x7116*x7120)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7119*x7124))+((x7115*x7121))+(((-1.0)*r02*x7123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7125=((1.0)*sj5);
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7125)))),-1);
if(!x7126.valid){
continue;
}
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7125))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7126.value)))+(x7127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7128=IKsin(j4);
IkReal x7129=IKcos(j4);
IkReal x7130=(r11*sj5);
IkReal x7131=(r21*sj5);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r20);
IkReal x7134=(r01*sj5);
IkReal x7135=(cj5*r10);
IkReal x7136=((1.0)*x7129);
IkReal x7137=((1.0)*x7128);
evalcond[0]=((((-1.0)*r22*x7136))+(((-1.0)*x7133*x7137))+((x7128*x7131)));
evalcond[1]=(((x7129*x7132))+(((-1.0)*x7134*x7136))+(((-1.0)*r02*x7137)));
evalcond[2]=((((-1.0)*x7130*x7136))+(((-1.0)*r12*x7137))+((x7129*x7135)));
evalcond[3]=((((-1.0)*r12*x7136))+cj0+(((-1.0)*x7135*x7137))+((x7128*x7130)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7137))+((x7129*x7133))+(((-1.0)*x7131*x7136)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7132*x7137))+((x7128*x7134))+(((-1.0)*r02*x7136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7138=IKsin(j0);
IkReal x7139=IKcos(j0);
evalcond[0]=((((-0.163941)*x7138))+(((0.5723)*x7139))+(((-1.0)*px)));
evalcond[1]=((((0.5723)*x7138))+(((0.163941)*x7139))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7140=((1.0)*cj5);
IkReal x7141=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7140)));
j4eval[0]=x7141;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7140))))));
j4eval[2]=IKsign(x7141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7142=((1.0)*cj5);
IkReal x7143=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7142)));
j4eval[0]=x7143;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7142))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7144=cj5*cj5;
IkReal x7145=((1.0)*sj5);
IkReal x7146=(cj5*r20);
IkReal x7147=(r11*r21);
IkReal x7148=(x7147+((r10*r20*x7144))+(((-1.0)*x7144*x7147))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7145))+(((-1.0)*r11*x7145*x7146)));
j4eval[0]=x7148;
j4eval[1]=IKsign(x7148);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7145))+((cj0*x7146))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7149=cj5*cj5;
IkReal x7150=((1.0)*sj5);
IkReal x7151=(cj5*r20);
IkReal x7152=(r11*r21);
CheckValue<IkReal> x7153 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7150))+((cj0*x7151)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7153.valid){
continue;
}
CheckValue<IkReal> x7154=IKPowWithIntegerCheck(IKsign((x7152+((r10*r20*x7149))+((r12*r22))+(((-1.0)*r11*x7150*x7151))+(((-1.0)*x7149*x7152))+(((-1.0)*cj5*r10*r21*x7150)))),-1);
if(!x7154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7153.value)+(((1.5707963267949)*(x7154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7155=IKsin(j4);
IkReal x7156=IKcos(j4);
IkReal x7157=((1.0)*sj0);
IkReal x7158=(cj5*r00);
IkReal x7159=(r11*sj5);
IkReal x7160=(cj5*r10);
IkReal x7161=(r21*sj5);
IkReal x7162=(cj5*r20);
IkReal x7163=(r01*sj5);
IkReal x7164=((1.0)*x7156);
IkReal x7165=((1.0)*x7155);
evalcond[0]=((((-1.0)*r22*x7164))+((x7155*x7161))+(((-1.0)*x7162*x7165)));
evalcond[1]=((((-1.0)*r22*x7165))+(((-1.0)*x7161*x7164))+((x7156*x7162)));
evalcond[2]=(cj0+(((-1.0)*x7160*x7165))+(((-1.0)*r12*x7164))+((x7155*x7159)));
evalcond[3]=((((-1.0)*r02*x7164))+(((-1.0)*x7158*x7165))+(((-1.0)*x7157))+((x7155*x7163)));
evalcond[4]=((((-1.0)*r02*x7165))+(((-1.0)*x7163*x7164))+((x7156*x7158))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7159*x7164))+(((-1.0)*x7157))+(((-1.0)*r12*x7165))+((x7156*x7160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7166=((1.0)*cj5);
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7166)))),-1);
if(!x7167.valid){
continue;
}
CheckValue<IkReal> x7168 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7167.value)))+(x7168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7169=IKsin(j4);
IkReal x7170=IKcos(j4);
IkReal x7171=((1.0)*sj0);
IkReal x7172=(cj5*r00);
IkReal x7173=(r11*sj5);
IkReal x7174=(cj5*r10);
IkReal x7175=(r21*sj5);
IkReal x7176=(cj5*r20);
IkReal x7177=(r01*sj5);
IkReal x7178=((1.0)*x7170);
IkReal x7179=((1.0)*x7169);
evalcond[0]=(((x7169*x7175))+(((-1.0)*r22*x7178))+(((-1.0)*x7176*x7179)));
evalcond[1]=(((x7170*x7176))+(((-1.0)*r22*x7179))+(((-1.0)*x7175*x7178)));
evalcond[2]=((((-1.0)*x7174*x7179))+cj0+((x7169*x7173))+(((-1.0)*r12*x7178)));
evalcond[3]=((((-1.0)*x7171))+((x7169*x7177))+(((-1.0)*r02*x7178))+(((-1.0)*x7172*x7179)));
evalcond[4]=((((-1.0)*x7177*x7178))+((x7170*x7172))+(((-1.0)*r02*x7179))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7171))+((x7170*x7174))+(((-1.0)*x7173*x7178))+(((-1.0)*r12*x7179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7180=((1.0)*cj5);
CheckValue<IkReal> x7181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7180)))),-1);
if(!x7181.valid){
continue;
}
CheckValue<IkReal> x7182 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7181.value)))+(x7182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7183=IKsin(j4);
IkReal x7184=IKcos(j4);
IkReal x7185=((1.0)*sj0);
IkReal x7186=(cj5*r00);
IkReal x7187=(r11*sj5);
IkReal x7188=(cj5*r10);
IkReal x7189=(r21*sj5);
IkReal x7190=(cj5*r20);
IkReal x7191=(r01*sj5);
IkReal x7192=((1.0)*x7184);
IkReal x7193=((1.0)*x7183);
evalcond[0]=(((x7183*x7189))+(((-1.0)*x7190*x7193))+(((-1.0)*r22*x7192)));
evalcond[1]=((((-1.0)*x7189*x7192))+(((-1.0)*r22*x7193))+((x7184*x7190)));
evalcond[2]=(cj0+((x7183*x7187))+(((-1.0)*x7188*x7193))+(((-1.0)*r12*x7192)));
evalcond[3]=(((x7183*x7191))+(((-1.0)*x7186*x7193))+(((-1.0)*x7185))+(((-1.0)*r02*x7192)));
evalcond[4]=((((-1.0)*x7191*x7192))+(((-1.0)*r02*x7193))+((x7184*x7186))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7187*x7192))+(((-1.0)*x7185))+(((-1.0)*r12*x7193))+((x7184*x7188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((-0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7194=IKcos(j0);
IkReal x7195=IKsin(j0);
evalcond[0]=((((-0.163941)*x7195))+(((-1.0)*px))+(((-1.1843)*x7194)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x7194))+(((-1.1843)*x7195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7196=((1.0)*cj5);
IkReal x7197=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7196)));
j4eval[0]=x7197;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7196)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7198=cj5*cj5;
IkReal x7199=((1.0)*r21);
IkReal x7200=(cj5*sj5);
IkReal x7201=((1.0)*r20);
IkReal x7202=((((-1.0)*r01*x7198*x7199))+(((-1.0)*r01*x7200*x7201))+((r01*r21))+((r00*r20*x7198))+((r02*r22))+(((-1.0)*r00*x7199*x7200)));
j4eval[0]=x7202;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7201)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7203=cj5*cj5;
IkReal x7204=(r21*sj5);
IkReal x7205=(r11*r21);
IkReal x7206=((1.0)*cj5*r20);
IkReal x7207=((((-1.0)*cj5*r10*x7204))+x7205+((r10*r20*x7203))+((r12*r22))+(((-1.0)*x7203*x7205))+(((-1.0)*r11*sj5*x7206)));
j4eval[0]=x7207;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7206))+((sj0*x7204))))));
j4eval[2]=IKsign(x7207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7208=cj5*cj5;
IkReal x7209=(r21*sj5);
IkReal x7210=(r11*r21);
IkReal x7211=((1.0)*cj5*r20);
CheckValue<IkReal> x7212=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7209))+x7210+(((-1.0)*r11*sj5*x7211))+((r10*r20*x7208))+((r12*r22))+(((-1.0)*x7208*x7210)))),-1);
if(!x7212.valid){
continue;
}
CheckValue<IkReal> x7213 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7211))+((sj0*x7209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7212.value)))+(x7213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7214=IKsin(j4);
IkReal x7215=IKcos(j4);
IkReal x7216=(r11*sj5);
IkReal x7217=(cj5*r00);
IkReal x7218=(cj5*r10);
IkReal x7219=(r21*sj5);
IkReal x7220=(cj5*r20);
IkReal x7221=(r01*sj5);
IkReal x7222=((1.0)*x7215);
IkReal x7223=((1.0)*x7214);
evalcond[0]=(((x7214*x7219))+(((-1.0)*x7220*x7223))+(((-1.0)*r22*x7222)));
evalcond[1]=(((x7215*x7220))+(((-1.0)*r22*x7223))+(((-1.0)*x7219*x7222)));
evalcond[2]=(cj0+((x7214*x7216))+(((-1.0)*x7218*x7223))+(((-1.0)*r12*x7222)));
evalcond[3]=((((-1.0)*r02*x7223))+cj0+(((-1.0)*x7221*x7222))+((x7215*x7217)));
evalcond[4]=(sj0+(((-1.0)*x7216*x7222))+(((-1.0)*r12*x7223))+((x7215*x7218)));
evalcond[5]=((((-1.0)*x7217*x7223))+(((-1.0)*r02*x7222))+(((-1.0)*sj0))+((x7214*x7221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7224=cj5*cj5;
IkReal x7225=((1.0)*r21);
IkReal x7226=(cj5*sj5);
IkReal x7227=((1.0)*r20);
CheckValue<IkReal> x7228 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7228.valid){
continue;
}
CheckValue<IkReal> x7229=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x7226*x7227))+(((-1.0)*r00*x7225*x7226))+(((-1.0)*r01*x7224*x7225))+((r02*r22))+((r00*r20*x7224)))),-1);
if(!x7229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7228.value)+(((1.5707963267949)*(x7229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7230=IKsin(j4);
IkReal x7231=IKcos(j4);
IkReal x7232=(r11*sj5);
IkReal x7233=(cj5*r00);
IkReal x7234=(cj5*r10);
IkReal x7235=(r21*sj5);
IkReal x7236=(cj5*r20);
IkReal x7237=(r01*sj5);
IkReal x7238=((1.0)*x7231);
IkReal x7239=((1.0)*x7230);
evalcond[0]=(((x7230*x7235))+(((-1.0)*x7236*x7239))+(((-1.0)*r22*x7238)));
evalcond[1]=(((x7231*x7236))+(((-1.0)*r22*x7239))+(((-1.0)*x7235*x7238)));
evalcond[2]=(cj0+((x7230*x7232))+(((-1.0)*x7234*x7239))+(((-1.0)*r12*x7238)));
evalcond[3]=(cj0+((x7231*x7233))+(((-1.0)*x7237*x7238))+(((-1.0)*r02*x7239)));
evalcond[4]=(sj0+((x7231*x7234))+(((-1.0)*x7232*x7238))+(((-1.0)*r12*x7239)));
evalcond[5]=((((-1.0)*sj0))+((x7230*x7237))+(((-1.0)*x7233*x7239))+(((-1.0)*r02*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7240=((1.0)*cj5);
CheckValue<IkReal> x7241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7241.valid){
continue;
}
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7240)))),-1);
if(!x7242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7241.value)+(((1.5707963267949)*(x7242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7243=IKsin(j4);
IkReal x7244=IKcos(j4);
IkReal x7245=(r11*sj5);
IkReal x7246=(cj5*r00);
IkReal x7247=(cj5*r10);
IkReal x7248=(r21*sj5);
IkReal x7249=(cj5*r20);
IkReal x7250=(r01*sj5);
IkReal x7251=((1.0)*x7244);
IkReal x7252=((1.0)*x7243);
evalcond[0]=(((x7243*x7248))+(((-1.0)*x7249*x7252))+(((-1.0)*r22*x7251)));
evalcond[1]=(((x7244*x7249))+(((-1.0)*x7248*x7251))+(((-1.0)*r22*x7252)));
evalcond[2]=(cj0+(((-1.0)*x7247*x7252))+(((-1.0)*r12*x7251))+((x7243*x7245)));
evalcond[3]=(cj0+((x7244*x7246))+(((-1.0)*r02*x7252))+(((-1.0)*x7250*x7251)));
evalcond[4]=(sj0+((x7244*x7247))+(((-1.0)*r12*x7252))+(((-1.0)*x7245*x7251)));
evalcond[5]=((((-1.0)*sj0))+((x7243*x7250))+(((-1.0)*x7246*x7252))+(((-1.0)*r02*x7251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7253=IKcos(j0);
IkReal x7254=IKsin(j0);
evalcond[0]=((((-0.0397)*x7253))+(((-0.163941)*x7254))+(((-1.0)*px)));
evalcond[1]=((((-0.0397)*x7254))+(((0.163941)*x7253))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7255=((1.0)*cj5);
IkReal x7256=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7255)));
j4eval[0]=x7256;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7255)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7257=((1.0)*cj5);
IkReal x7258=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7257)));
j4eval[0]=x7258;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7257))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7259=cj5*cj5;
IkReal x7260=((1.0)*sj5);
IkReal x7261=(cj5*r20);
IkReal x7262=(r11*r21);
IkReal x7263=((((-1.0)*cj5*r10*r21*x7260))+x7262+((r12*r22))+((r10*r20*x7259))+(((-1.0)*r11*x7260*x7261))+(((-1.0)*x7259*x7262)));
j4eval[0]=x7263;
j4eval[1]=IKsign(x7263);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x7261))+(((-1.0)*cj0*r21*x7260))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7264=cj5*cj5;
IkReal x7265=((1.0)*sj5);
IkReal x7266=(cj5*r20);
IkReal x7267=(r11*r21);
CheckValue<IkReal> x7268=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x7265))+x7267+((r12*r22))+((r10*r20*x7264))+(((-1.0)*x7264*x7267))+(((-1.0)*r11*x7265*x7266)))),-1);
if(!x7268.valid){
continue;
}
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal((((cj0*x7266))+(((-1.0)*cj0*r21*x7265)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7268.value)))+(x7269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7270=IKsin(j4);
IkReal x7271=IKcos(j4);
IkReal x7272=((1.0)*sj0);
IkReal x7273=(cj5*r00);
IkReal x7274=(r11*sj5);
IkReal x7275=(cj5*r10);
IkReal x7276=(r21*sj5);
IkReal x7277=(cj5*r20);
IkReal x7278=(r01*sj5);
IkReal x7279=((1.0)*x7271);
IkReal x7280=((1.0)*x7270);
evalcond[0]=((((-1.0)*x7277*x7280))+(((-1.0)*r22*x7279))+((x7270*x7276)));
evalcond[1]=(((x7271*x7277))+(((-1.0)*x7276*x7279))+(((-1.0)*r22*x7280)));
evalcond[2]=(cj0+(((-1.0)*r12*x7279))+((x7270*x7274))+(((-1.0)*x7275*x7280)));
evalcond[3]=((((-1.0)*x7273*x7280))+(((-1.0)*r02*x7279))+((x7270*x7278))+(((-1.0)*x7272)));
evalcond[4]=(((x7271*x7273))+(((-1.0)*x7278*x7279))+(((-1.0)*r02*x7280))+(((-1.0)*cj0)));
evalcond[5]=(((x7271*x7275))+(((-1.0)*x7274*x7279))+(((-1.0)*r12*x7280))+(((-1.0)*x7272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7281=((1.0)*cj5);
CheckValue<IkReal> x7282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7281)))),-1);
if(!x7282.valid){
continue;
}
CheckValue<IkReal> x7283 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7282.value)))+(x7283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7284=IKsin(j4);
IkReal x7285=IKcos(j4);
IkReal x7286=((1.0)*sj0);
IkReal x7287=(cj5*r00);
IkReal x7288=(r11*sj5);
IkReal x7289=(cj5*r10);
IkReal x7290=(r21*sj5);
IkReal x7291=(cj5*r20);
IkReal x7292=(r01*sj5);
IkReal x7293=((1.0)*x7285);
IkReal x7294=((1.0)*x7284);
evalcond[0]=((((-1.0)*x7291*x7294))+(((-1.0)*r22*x7293))+((x7284*x7290)));
evalcond[1]=((((-1.0)*x7290*x7293))+(((-1.0)*r22*x7294))+((x7285*x7291)));
evalcond[2]=(cj0+(((-1.0)*x7289*x7294))+((x7284*x7288))+(((-1.0)*r12*x7293)));
evalcond[3]=(((x7284*x7292))+(((-1.0)*x7286))+(((-1.0)*r02*x7293))+(((-1.0)*x7287*x7294)));
evalcond[4]=(((x7285*x7287))+(((-1.0)*r02*x7294))+(((-1.0)*x7292*x7293))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7286))+(((-1.0)*x7288*x7293))+((x7285*x7289))+(((-1.0)*r12*x7294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7295=((1.0)*cj5);
CheckValue<IkReal> x7296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7295))+(((-1.0)*r00*sj5)))),-1);
if(!x7296.valid){
continue;
}
CheckValue<IkReal> x7297 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7296.value)))+(x7297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7298=IKsin(j4);
IkReal x7299=IKcos(j4);
IkReal x7300=((1.0)*sj0);
IkReal x7301=(cj5*r00);
IkReal x7302=(r11*sj5);
IkReal x7303=(cj5*r10);
IkReal x7304=(r21*sj5);
IkReal x7305=(cj5*r20);
IkReal x7306=(r01*sj5);
IkReal x7307=((1.0)*x7299);
IkReal x7308=((1.0)*x7298);
evalcond[0]=((((-1.0)*r22*x7307))+((x7298*x7304))+(((-1.0)*x7305*x7308)));
evalcond[1]=(((x7299*x7305))+(((-1.0)*r22*x7308))+(((-1.0)*x7304*x7307)));
evalcond[2]=(cj0+(((-1.0)*x7303*x7308))+(((-1.0)*r12*x7307))+((x7298*x7302)));
evalcond[3]=((((-1.0)*r02*x7307))+(((-1.0)*x7301*x7308))+(((-1.0)*x7300))+((x7298*x7306)));
evalcond[4]=((((-1.0)*r02*x7308))+((x7299*x7301))+(((-1.0)*cj0))+(((-1.0)*x7306*x7307)));
evalcond[5]=((((-1.0)*x7302*x7307))+(((-1.0)*r12*x7308))+((x7299*x7303))+(((-1.0)*x7300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7309=IKsin(j0);
IkReal x7310=IKcos(j0);
IkReal x7311=(cj5*r01);
IkReal x7312=(cj5*r11);
IkReal x7313=((0.1157)*sj5);
IkReal x7314=((1.0)*sj5);
evalcond[0]=(x7310+(((-1.0)*x7311))+(((-1.0)*r00*x7314)));
evalcond[1]=(x7309+(((-1.0)*x7312))+(((-1.0)*r10*x7314)));
evalcond[2]=((((-0.163941)*x7309))+(((-1.0)*px))+(((-0.1157)*x7311))+(((-1.0)*r00*x7313)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x7313))+(((-0.1157)*x7312))+(((0.163941)*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7315=((1.0)*sj5);
IkReal x7316=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7315)));
j4eval[0]=x7316;
j4eval[1]=IKsign(x7316);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7315))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7317=((1.0)*cj5);
IkReal x7318=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7317)));
j4eval[0]=x7318;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7317)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7318);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7319=r21*r21;
IkReal x7320=cj5*cj5;
IkReal x7321=(r21*sj5);
IkReal x7322=(cj5*r20);
IkReal x7323=((((-1.0)*x7319))+(((2.0)*x7321*x7322))+(((-1.0)*(r22*r22)))+(((-1.0)*x7320*(r20*r20)))+((x7319*x7320)));
j4eval[0]=x7323;
j4eval[1]=((IKabs(r22))+(IKabs((x7321+(((-1.0)*x7322))))));
j4eval[2]=IKsign(x7323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7324=r21*r21;
IkReal x7325=cj5*cj5;
IkReal x7326=(r21*sj5);
IkReal x7327=(cj5*r20);
CheckValue<IkReal> x7328 = IKatan2WithCheck(IkReal(r22),IkReal((x7326+(((-1.0)*x7327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7328.valid){
continue;
}
CheckValue<IkReal> x7329=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7324))+(((-1.0)*(r22*r22)))+(((-1.0)*x7325*(r20*r20)))+(((2.0)*x7326*x7327))+((x7324*x7325)))),-1);
if(!x7329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7328.value)+(((1.5707963267949)*(x7329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7330=IKsin(j4);
IkReal x7331=IKcos(j4);
IkReal x7332=(r11*sj5);
IkReal x7333=(r21*sj5);
IkReal x7334=(cj5*r00);
IkReal x7335=(cj5*r20);
IkReal x7336=(r01*sj5);
IkReal x7337=(cj5*r10);
IkReal x7338=((1.0)*x7331);
IkReal x7339=((1.0)*x7330);
evalcond[0]=((((-1.0)*x7335*x7339))+((x7330*x7333))+(((-1.0)*r22*x7338)));
evalcond[1]=((((-1.0)*r02*x7339))+(((-1.0)*x7336*x7338))+((x7331*x7334)));
evalcond[2]=((((-1.0)*r12*x7339))+(((-1.0)*x7332*x7338))+((x7331*x7337)));
evalcond[3]=(cj0+(((-1.0)*x7337*x7339))+(((-1.0)*r12*x7338))+((x7330*x7332)));
evalcond[4]=((-1.0)+((x7331*x7335))+(((-1.0)*r22*x7339))+(((-1.0)*x7333*x7338)));
evalcond[5]=((((-1.0)*r02*x7338))+(((-1.0)*sj0))+((x7330*x7336))+(((-1.0)*x7334*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7340=((1.0)*cj5);
CheckValue<IkReal> x7341 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7341.valid){
continue;
}
CheckValue<IkReal> x7342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7340))+(((-1.0)*r00*sj5)))),-1);
if(!x7342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7341.value)+(((1.5707963267949)*(x7342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7343=IKsin(j4);
IkReal x7344=IKcos(j4);
IkReal x7345=(r11*sj5);
IkReal x7346=(r21*sj5);
IkReal x7347=(cj5*r00);
IkReal x7348=(cj5*r20);
IkReal x7349=(r01*sj5);
IkReal x7350=(cj5*r10);
IkReal x7351=((1.0)*x7344);
IkReal x7352=((1.0)*x7343);
evalcond[0]=((((-1.0)*r22*x7351))+((x7343*x7346))+(((-1.0)*x7348*x7352)));
evalcond[1]=(((x7344*x7347))+(((-1.0)*x7349*x7351))+(((-1.0)*r02*x7352)));
evalcond[2]=((((-1.0)*r12*x7352))+((x7344*x7350))+(((-1.0)*x7345*x7351)));
evalcond[3]=(((x7343*x7345))+cj0+(((-1.0)*r12*x7351))+(((-1.0)*x7350*x7352)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7352))+((x7344*x7348))+(((-1.0)*x7346*x7351)));
evalcond[5]=((((-1.0)*sj0))+((x7343*x7349))+(((-1.0)*r02*x7351))+(((-1.0)*x7347*x7352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7353=((1.0)*sj5);
CheckValue<IkReal> x7354=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7353)))),-1);
if(!x7354.valid){
continue;
}
CheckValue<IkReal> x7355 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7353))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7354.value)))+(x7355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7356=IKsin(j4);
IkReal x7357=IKcos(j4);
IkReal x7358=(r11*sj5);
IkReal x7359=(r21*sj5);
IkReal x7360=(cj5*r00);
IkReal x7361=(cj5*r20);
IkReal x7362=(r01*sj5);
IkReal x7363=(cj5*r10);
IkReal x7364=((1.0)*x7357);
IkReal x7365=((1.0)*x7356);
evalcond[0]=(((x7356*x7359))+(((-1.0)*r22*x7364))+(((-1.0)*x7361*x7365)));
evalcond[1]=(((x7357*x7360))+(((-1.0)*r02*x7365))+(((-1.0)*x7362*x7364)));
evalcond[2]=((((-1.0)*r12*x7365))+((x7357*x7363))+(((-1.0)*x7358*x7364)));
evalcond[3]=(cj0+(((-1.0)*x7363*x7365))+((x7356*x7358))+(((-1.0)*r12*x7364)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7365))+((x7357*x7361))+(((-1.0)*x7359*x7364)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7360*x7365))+(((-1.0)*r02*x7364))+((x7356*x7362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7366=IKsin(j0);
IkReal x7367=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x7366))+(((0.5723)*x7367)));
evalcond[1]=((((-1.0)*py))+(((0.5723)*x7366))+(((0.163941)*x7367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7368=((1.0)*cj5);
IkReal x7369=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7368)));
j4eval[0]=x7369;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7368))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7370=((1.0)*cj5);
IkReal x7371=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7370)));
j4eval[0]=x7371;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7370))))));
j4eval[2]=IKsign(x7371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7372=cj5*cj5;
IkReal x7373=((1.0)*sj5);
IkReal x7374=(cj5*r20);
IkReal x7375=(r11*r21);
IkReal x7376=(x7375+((r10*r20*x7372))+(((-1.0)*cj5*r10*r21*x7373))+((r12*r22))+(((-1.0)*x7372*x7375))+(((-1.0)*r11*x7373*x7374)));
j4eval[0]=x7376;
j4eval[1]=IKsign(x7376);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7373))+((cj0*x7374)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7377=cj5*cj5;
IkReal x7378=((1.0)*sj5);
IkReal x7379=(cj5*r20);
IkReal x7380=(r11*r21);
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7378))+((cj0*x7379)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
CheckValue<IkReal> x7382=IKPowWithIntegerCheck(IKsign((x7380+((r10*r20*x7377))+(((-1.0)*cj5*r10*r21*x7378))+((r12*r22))+(((-1.0)*r11*x7378*x7379))+(((-1.0)*x7377*x7380)))),-1);
if(!x7382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7381.value)+(((1.5707963267949)*(x7382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7383=IKsin(j4);
IkReal x7384=IKcos(j4);
IkReal x7385=((1.0)*sj0);
IkReal x7386=(cj5*r00);
IkReal x7387=(r11*sj5);
IkReal x7388=(cj5*r10);
IkReal x7389=(r21*sj5);
IkReal x7390=(cj5*r20);
IkReal x7391=(r01*sj5);
IkReal x7392=((1.0)*x7384);
IkReal x7393=((1.0)*x7383);
evalcond[0]=((((-1.0)*x7390*x7393))+(((-1.0)*r22*x7392))+((x7383*x7389)));
evalcond[1]=((((-1.0)*r22*x7393))+((x7384*x7390))+(((-1.0)*x7389*x7392)));
evalcond[2]=((((-1.0)*r12*x7392))+cj0+(((-1.0)*x7388*x7393))+((x7383*x7387)));
evalcond[3]=((((-1.0)*r02*x7392))+(((-1.0)*x7385))+(((-1.0)*x7386*x7393))+((x7383*x7391)));
evalcond[4]=((((-1.0)*r02*x7393))+((x7384*x7386))+(((-1.0)*cj0))+(((-1.0)*x7391*x7392)));
evalcond[5]=((((-1.0)*r12*x7393))+(((-1.0)*x7385))+((x7384*x7388))+(((-1.0)*x7387*x7392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7394=((1.0)*cj5);
CheckValue<IkReal> x7395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7394))+(((-1.0)*r10*sj5)))),-1);
if(!x7395.valid){
continue;
}
CheckValue<IkReal> x7396 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7394))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7395.value)))+(x7396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7397=IKsin(j4);
IkReal x7398=IKcos(j4);
IkReal x7399=((1.0)*sj0);
IkReal x7400=(cj5*r00);
IkReal x7401=(r11*sj5);
IkReal x7402=(cj5*r10);
IkReal x7403=(r21*sj5);
IkReal x7404=(cj5*r20);
IkReal x7405=(r01*sj5);
IkReal x7406=((1.0)*x7398);
IkReal x7407=((1.0)*x7397);
evalcond[0]=(((x7397*x7403))+(((-1.0)*x7404*x7407))+(((-1.0)*r22*x7406)));
evalcond[1]=((((-1.0)*x7403*x7406))+((x7398*x7404))+(((-1.0)*r22*x7407)));
evalcond[2]=(((x7397*x7401))+(((-1.0)*r12*x7406))+cj0+(((-1.0)*x7402*x7407)));
evalcond[3]=(((x7397*x7405))+(((-1.0)*x7400*x7407))+(((-1.0)*x7399))+(((-1.0)*r02*x7406)));
evalcond[4]=((((-1.0)*x7405*x7406))+((x7398*x7400))+(((-1.0)*r02*x7407))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7407))+((x7398*x7402))+(((-1.0)*x7401*x7406))+(((-1.0)*x7399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7408=((1.0)*cj5);
CheckValue<IkReal> x7409 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7409.valid){
continue;
}
CheckValue<IkReal> x7410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7408))+(((-1.0)*r00*sj5)))),-1);
if(!x7410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7409.value)+(((1.5707963267949)*(x7410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7411=IKsin(j4);
IkReal x7412=IKcos(j4);
IkReal x7413=((1.0)*sj0);
IkReal x7414=(cj5*r00);
IkReal x7415=(r11*sj5);
IkReal x7416=(cj5*r10);
IkReal x7417=(r21*sj5);
IkReal x7418=(cj5*r20);
IkReal x7419=(r01*sj5);
IkReal x7420=((1.0)*x7412);
IkReal x7421=((1.0)*x7411);
evalcond[0]=((((-1.0)*r22*x7420))+(((-1.0)*x7418*x7421))+((x7411*x7417)));
evalcond[1]=((((-1.0)*r22*x7421))+(((-1.0)*x7417*x7420))+((x7412*x7418)));
evalcond[2]=((((-1.0)*x7416*x7421))+cj0+(((-1.0)*r12*x7420))+((x7411*x7415)));
evalcond[3]=((((-1.0)*x7414*x7421))+(((-1.0)*r02*x7420))+(((-1.0)*x7413))+((x7411*x7419)));
evalcond[4]=((((-1.0)*r02*x7421))+(((-1.0)*x7419*x7420))+(((-1.0)*cj0))+((x7412*x7414)));
evalcond[5]=((((-1.0)*x7415*x7420))+(((-1.0)*r12*x7421))+(((-1.0)*x7413))+((x7412*x7416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7422=((1.0)*sj5);
IkReal x7423=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7423))+(((-1.0)*r10*x7422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7422))+(((-1.0)*r01*x7423)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7423))+(((-1.0)*r10*x7422))))+IKsqr(((((-1.0)*r00*x7422))+(((-1.0)*r01*x7423))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7423))+(((-1.0)*r10*x7422))), ((((-1.0)*r00*x7422))+(((-1.0)*r01*x7423))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7424=IKsin(j0);
IkReal x7425=IKcos(j0);
IkReal x7426=(cj5*r01);
IkReal x7427=(cj5*r11);
IkReal x7428=((0.1157)*sj5);
IkReal x7429=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7426))+(((-1.0)*x7425))+(((-1.0)*r00*x7429)));
evalcond[1]=((((-1.0)*x7424))+(((-1.0)*x7427))+(((-1.0)*r10*x7429)));
evalcond[2]=((((-1.0)*r00*x7428))+(((-0.163941)*x7424))+(((-1.0)*px))+(((-0.1157)*x7426)));
evalcond[3]=((((-1.0)*r10*x7428))+(((-1.0)*py))+(((-0.1157)*x7427))+(((0.163941)*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7430=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7430;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7431=((1.0)*cj5);
IkReal x7432=((((-1.0)*r01*x7431))+(((-1.0)*r00*sj5)));
j4eval[0]=x7432;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7431)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7433=cj5*cj5;
IkReal x7434=r21*r21;
IkReal x7435=(r21*sj5);
IkReal x7436=(cj5*r20);
IkReal x7437=(((x7433*(r20*r20)))+(r22*r22)+(((-1.0)*x7433*x7434))+(((-2.0)*x7435*x7436))+x7434);
j4eval[0]=x7437;
j4eval[1]=IKsign(x7437);
j4eval[2]=((IKabs(((((-1.0)*x7436))+x7435)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7438=cj5*cj5;
IkReal x7439=r21*r21;
IkReal x7440=(r21*sj5);
IkReal x7441=(cj5*r20);
CheckValue<IkReal> x7442=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7438*x7439))+(r22*r22)+((x7438*(r20*r20)))+x7439+(((-2.0)*x7440*x7441)))),-1);
if(!x7442.valid){
continue;
}
CheckValue<IkReal> x7443 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7441))+x7440)),IKFAST_ATAN2_MAGTHRESH);
if(!x7443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7442.value)))+(x7443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7444=IKsin(j4);
IkReal x7445=IKcos(j4);
IkReal x7446=(r11*sj5);
IkReal x7447=(r21*sj5);
IkReal x7448=(cj5*r00);
IkReal x7449=(cj5*r20);
IkReal x7450=(r01*sj5);
IkReal x7451=(cj5*r10);
IkReal x7452=((1.0)*x7445);
IkReal x7453=((1.0)*x7444);
evalcond[0]=(((x7444*x7447))+(((-1.0)*x7449*x7453))+(((-1.0)*r22*x7452)));
evalcond[1]=((((-1.0)*x7450*x7452))+((x7445*x7448))+(((-1.0)*r02*x7453)));
evalcond[2]=(((x7445*x7451))+(((-1.0)*x7446*x7452))+(((-1.0)*r12*x7453)));
evalcond[3]=(cj0+((x7444*x7446))+(((-1.0)*x7451*x7453))+(((-1.0)*r12*x7452)));
evalcond[4]=((1.0)+((x7445*x7449))+(((-1.0)*x7447*x7452))+(((-1.0)*r22*x7453)));
evalcond[5]=((((-1.0)*sj0))+((x7444*x7450))+(((-1.0)*r02*x7452))+(((-1.0)*x7448*x7453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7454=((1.0)*cj5);
CheckValue<IkReal> x7455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7455.valid){
continue;
}
CheckValue<IkReal> x7456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7454))+(((-1.0)*r00*sj5)))),-1);
if(!x7456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7455.value)+(((1.5707963267949)*(x7456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7457=IKsin(j4);
IkReal x7458=IKcos(j4);
IkReal x7459=(r11*sj5);
IkReal x7460=(r21*sj5);
IkReal x7461=(cj5*r00);
IkReal x7462=(cj5*r20);
IkReal x7463=(r01*sj5);
IkReal x7464=(cj5*r10);
IkReal x7465=((1.0)*x7458);
IkReal x7466=((1.0)*x7457);
evalcond[0]=(((x7457*x7460))+(((-1.0)*r22*x7465))+(((-1.0)*x7462*x7466)));
evalcond[1]=(((x7458*x7461))+(((-1.0)*r02*x7466))+(((-1.0)*x7463*x7465)));
evalcond[2]=(((x7458*x7464))+(((-1.0)*r12*x7466))+(((-1.0)*x7459*x7465)));
evalcond[3]=(cj0+(((-1.0)*x7464*x7466))+(((-1.0)*r12*x7465))+((x7457*x7459)));
evalcond[4]=((1.0)+((x7458*x7462))+(((-1.0)*r22*x7466))+(((-1.0)*x7460*x7465)));
evalcond[5]=((((-1.0)*sj0))+((x7457*x7463))+(((-1.0)*r02*x7465))+(((-1.0)*x7461*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7467 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7467.valid){
continue;
}
CheckValue<IkReal> x7468=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7467.value)+(((1.5707963267949)*(x7468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7469=IKsin(j4);
IkReal x7470=IKcos(j4);
IkReal x7471=(r11*sj5);
IkReal x7472=(r21*sj5);
IkReal x7473=(cj5*r00);
IkReal x7474=(cj5*r20);
IkReal x7475=(r01*sj5);
IkReal x7476=(cj5*r10);
IkReal x7477=((1.0)*x7470);
IkReal x7478=((1.0)*x7469);
evalcond[0]=(((x7469*x7472))+(((-1.0)*x7474*x7478))+(((-1.0)*r22*x7477)));
evalcond[1]=((((-1.0)*r02*x7478))+((x7470*x7473))+(((-1.0)*x7475*x7477)));
evalcond[2]=(((x7470*x7476))+(((-1.0)*x7471*x7477))+(((-1.0)*r12*x7478)));
evalcond[3]=(cj0+((x7469*x7471))+(((-1.0)*x7476*x7478))+(((-1.0)*r12*x7477)));
evalcond[4]=((1.0)+((x7470*x7474))+(((-1.0)*r22*x7478))+(((-1.0)*x7472*x7477)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7477))+((x7469*x7475))+(((-1.0)*x7473*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7479=IKcos(j0);
IkReal x7480=IKsin(j0);
evalcond[0]=((((-0.163941)*x7480))+(((-0.5723)*x7479))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x7479))+(((-1.0)*py))+(((-0.5723)*x7480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7481=((1.0)*cj5);
IkReal x7482=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7481)));
j4eval[0]=x7482;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7481)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7483=cj5*cj5;
IkReal x7484=((1.0)*r21);
IkReal x7485=(cj5*sj5);
IkReal x7486=((1.0)*r20);
IkReal x7487=((((-1.0)*r01*x7485*x7486))+((r01*r21))+(((-1.0)*r01*x7483*x7484))+((r00*r20*x7483))+((r02*r22))+(((-1.0)*r00*x7484*x7485)));
j4eval[0]=x7487;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7486))))));
j4eval[2]=IKsign(x7487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7488=cj5*cj5;
IkReal x7489=(r21*sj5);
IkReal x7490=(r11*r21);
IkReal x7491=((1.0)*cj5*r20);
IkReal x7492=(((r10*r20*x7488))+(((-1.0)*cj5*r10*x7489))+((r12*r22))+(((-1.0)*x7488*x7490))+x7490+(((-1.0)*r11*sj5*x7491)));
j4eval[0]=x7492;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7491))+((sj0*x7489)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7493=cj5*cj5;
IkReal x7494=(r21*sj5);
IkReal x7495=(r11*r21);
IkReal x7496=((1.0)*cj5*r20);
CheckValue<IkReal> x7497=IKPowWithIntegerCheck(IKsign((((r10*r20*x7493))+(((-1.0)*x7493*x7495))+(((-1.0)*cj5*r10*x7494))+((r12*r22))+x7495+(((-1.0)*r11*sj5*x7496)))),-1);
if(!x7497.valid){
continue;
}
CheckValue<IkReal> x7498 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7496))+((sj0*x7494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7497.value)))+(x7498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7499=IKsin(j4);
IkReal x7500=IKcos(j4);
IkReal x7501=(r11*sj5);
IkReal x7502=(cj5*r00);
IkReal x7503=(cj5*r10);
IkReal x7504=(r21*sj5);
IkReal x7505=(cj5*r20);
IkReal x7506=(r01*sj5);
IkReal x7507=((1.0)*x7500);
IkReal x7508=((1.0)*x7499);
evalcond[0]=((((-1.0)*r22*x7507))+((x7499*x7504))+(((-1.0)*x7505*x7508)));
evalcond[1]=((((-1.0)*r22*x7508))+(((-1.0)*x7504*x7507))+((x7500*x7505)));
evalcond[2]=((((-1.0)*x7503*x7508))+((x7499*x7501))+cj0+(((-1.0)*r12*x7507)));
evalcond[3]=(cj0+(((-1.0)*r02*x7508))+(((-1.0)*x7506*x7507))+((x7500*x7502)));
evalcond[4]=((((-1.0)*x7501*x7507))+sj0+((x7500*x7503))+(((-1.0)*r12*x7508)));
evalcond[5]=((((-1.0)*sj0))+((x7499*x7506))+(((-1.0)*x7502*x7508))+(((-1.0)*r02*x7507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7509=cj5*cj5;
IkReal x7510=((1.0)*r21);
IkReal x7511=(cj5*sj5);
IkReal x7512=((1.0)*r20);
CheckValue<IkReal> x7513 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7513.valid){
continue;
}
CheckValue<IkReal> x7514=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x7509))+(((-1.0)*r01*x7509*x7510))+(((-1.0)*r00*x7510*x7511))+((r02*r22))+(((-1.0)*r01*x7511*x7512)))),-1);
if(!x7514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7513.value)+(((1.5707963267949)*(x7514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7515=IKsin(j4);
IkReal x7516=IKcos(j4);
IkReal x7517=(r11*sj5);
IkReal x7518=(cj5*r00);
IkReal x7519=(cj5*r10);
IkReal x7520=(r21*sj5);
IkReal x7521=(cj5*r20);
IkReal x7522=(r01*sj5);
IkReal x7523=((1.0)*x7516);
IkReal x7524=((1.0)*x7515);
evalcond[0]=((((-1.0)*x7521*x7524))+(((-1.0)*r22*x7523))+((x7515*x7520)));
evalcond[1]=(((x7516*x7521))+(((-1.0)*x7520*x7523))+(((-1.0)*r22*x7524)));
evalcond[2]=(((x7515*x7517))+cj0+(((-1.0)*x7519*x7524))+(((-1.0)*r12*x7523)));
evalcond[3]=(cj0+(((-1.0)*x7522*x7523))+(((-1.0)*r02*x7524))+((x7516*x7518)));
evalcond[4]=(sj0+(((-1.0)*x7517*x7523))+(((-1.0)*r12*x7524))+((x7516*x7519)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7523))+(((-1.0)*x7518*x7524))+((x7515*x7522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*cj5);
CheckValue<IkReal> x7526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7525))+(((-1.0)*r00*sj5)))),-1);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7526.value)))+(x7527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKsin(j4);
IkReal x7529=IKcos(j4);
IkReal x7530=(r11*sj5);
IkReal x7531=(cj5*r00);
IkReal x7532=(cj5*r10);
IkReal x7533=(r21*sj5);
IkReal x7534=(cj5*r20);
IkReal x7535=(r01*sj5);
IkReal x7536=((1.0)*x7529);
IkReal x7537=((1.0)*x7528);
evalcond[0]=(((x7528*x7533))+(((-1.0)*r22*x7536))+(((-1.0)*x7534*x7537)));
evalcond[1]=((((-1.0)*r22*x7537))+(((-1.0)*x7533*x7536))+((x7529*x7534)));
evalcond[2]=((((-1.0)*x7532*x7537))+cj0+(((-1.0)*r12*x7536))+((x7528*x7530)));
evalcond[3]=(cj0+(((-1.0)*x7535*x7536))+((x7529*x7531))+(((-1.0)*r02*x7537)));
evalcond[4]=(sj0+(((-1.0)*r12*x7537))+(((-1.0)*x7530*x7536))+((x7529*x7532)));
evalcond[5]=((((-1.0)*sj0))+((x7528*x7535))+(((-1.0)*x7531*x7537))+(((-1.0)*r02*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7538=cj1*cj1;
IkReal x7539=(cj2*sj1);
IkReal x7540=(r00*sj5);
IkReal x7541=(cj5*r01);
IkReal x7542=((1000000.0)*py);
IkReal x7543=(cj1*sj2);
IkReal x7544=(cj1*sj1);
IkReal x7545=(sj2*x7538);
IkReal x7546=((115700.0)*r10*sj5);
IkReal x7547=((115700.0)*cj5*r11);
CheckValue<IkReal> x7548=IKPowWithIntegerCheck(((((572300.0)*x7544))+(((572300.0)*cj2*sj2))+(((-1144600.0)*cj2*x7545))+(((-612000.0)*cj1*x7539))+(((-612000.0)*x7545))+(((-1144600.0)*cj1*cj2*x7539))),-1);
if(!x7548.valid){
continue;
}
CheckValue<IkReal> x7549=IKPowWithIntegerCheck(((((-1.0)*x7539))+(((-1.0)*x7543))),-1);
if(!x7549.valid){
continue;
}
if( IKabs(((x7548.value)*(((((-1.0)*x7543*x7546))+(((-1.0)*x7543*x7547))+(((-1.0)*x7542*x7543))+(((-1.0)*x7539*x7547))+(((-1.0)*x7539*x7546))+(((-1.0)*x7539*x7542))+(((-163941.0)*x7541))+(((-163941.0)*x7540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7549.value)*((x7540+x7541)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7548.value)*(((((-1.0)*x7543*x7546))+(((-1.0)*x7543*x7547))+(((-1.0)*x7542*x7543))+(((-1.0)*x7539*x7547))+(((-1.0)*x7539*x7546))+(((-1.0)*x7539*x7542))+(((-163941.0)*x7541))+(((-163941.0)*x7540))))))+IKsqr(((x7549.value)*((x7540+x7541))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7548.value)*(((((-1.0)*x7543*x7546))+(((-1.0)*x7543*x7547))+(((-1.0)*x7542*x7543))+(((-1.0)*x7539*x7547))+(((-1.0)*x7539*x7546))+(((-1.0)*x7539*x7542))+(((-163941.0)*x7541))+(((-163941.0)*x7540))))), ((x7549.value)*((x7540+x7541))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7550=IKcos(j0);
IkReal x7551=IKsin(j0);
IkReal x7552=(cj5*r01);
IkReal x7553=((1.0)*sj5);
IkReal x7554=(cj5*r11);
IkReal x7555=((0.1157)*sj5);
IkReal x7556=((1.0)*sj1);
IkReal x7557=((1.0)*cj1*sj2);
IkReal x7558=((0.5723)*sj1*sj2);
IkReal x7559=(cj2*x7550);
IkReal x7560=(cj1*x7551);
evalcond[0]=((((-1.0)*x7550*x7557))+(((-1.0)*x7556*x7559))+(((-1.0)*x7552))+(((-1.0)*r00*x7553)));
evalcond[1]=((((-1.0)*r10*x7553))+(((-1.0)*x7551*x7557))+(((-1.0)*cj2*x7551*x7556))+(((-1.0)*x7554)));
evalcond[2]=((((-0.1157)*x7552))+(((-1.0)*x7550*x7558))+(((0.612)*cj1*x7550))+(((-1.0)*px))+(((-1.0)*r00*x7555))+(((0.5723)*cj1*x7559))+(((-0.163941)*x7551)));
evalcond[3]=((((0.163941)*x7550))+(((0.5723)*cj2*x7560))+(((-0.1157)*x7554))+(((-1.0)*r10*x7555))+(((0.612)*x7560))+(((-1.0)*x7551*x7558))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7561=((1.0)*cj5);
IkReal x7562=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7561)));
j4eval[0]=x7562;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7561))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7563=((1.0)*cj5);
IkReal x7564=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7563)));
j4eval[0]=x7564;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7563))))));
j4eval[2]=IKsign(x7564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7565=((1.0)*sj0);
IkReal x7566=((1.0)*cj0);
IkReal x7567=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7567;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x7566))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7565)))))+(IKabs(((((-1.0)*r02*x7566))+(((-1.0)*r12*x7565))))));
j4eval[2]=IKsign(x7567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7568=((-1.0)*r20);
IkReal x7570 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7570)==0){
continue;
}
IkReal x7569=pow(x7570,-0.5);
CheckValue<IkReal> x7571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7568),IKFAST_ATAN2_MAGTHRESH);
if(!x7571.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7571.value));
IkReal gconst133=(r21*x7569);
IkReal gconst134=(x7568*x7569);
CheckValue<IkReal> x7572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7572.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7572.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7573=((-1.0)*r20);
IkReal x7574=x7569;
CheckValue<IkReal> x7576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7573),IKFAST_ATAN2_MAGTHRESH);
if(!x7576.valid){
continue;
}
IkReal x7575=((-1.0)*(x7576.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7575;
IkReal gconst132=x7575;
IkReal gconst133=(r21*x7574);
IkReal gconst134=(x7573*x7574);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7577=((-1.0)*r20);
IkReal x7578=x7569;
CheckValue<IkReal> x7580 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7577),IKFAST_ATAN2_MAGTHRESH);
if(!x7580.valid){
continue;
}
IkReal x7579=((-1.0)*(x7580.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7579;
IkReal gconst132=x7579;
IkReal gconst133=(r21*x7578);
IkReal gconst134=(x7577*x7578);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7581=((-1.0)*r20);
IkReal x7582=x7569;
CheckValue<IkReal> x7584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7581),IKFAST_ATAN2_MAGTHRESH);
if(!x7584.valid){
continue;
}
IkReal x7583=((-1.0)*(x7584.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7583;
IkReal gconst132=x7583;
IkReal gconst133=(r21*x7582);
IkReal gconst134=(x7581*x7582);
IkReal x7585=r22*r22;
CheckValue<IkReal> x7588=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7585))),-1);
if(!x7588.valid){
continue;
}
IkReal x7586=x7588.value;
IkReal x7587=((((2.0)*x7586*(r20*r20)*(r21*r21)))+x7585+((x7586*(r21*r21*r21*r21)))+((x7586*(r20*r20*r20*r20))));
j4eval[0]=x7587;
j4eval[1]=IKsign(x7587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7589=(gconst133*r21);
IkReal x7590=(cj1*sj2);
IkReal x7591=(gconst134*r20);
IkReal x7592=(cj2*sj1);
CheckValue<IkReal> x7593=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7589*x7591))+(x7591*x7591)+(x7589*x7589))),-1);
if(!x7593.valid){
continue;
}
CheckValue<IkReal> x7594 = IKatan2WithCheck(IkReal((((r22*x7592))+((r22*x7590)))),IkReal(((((-1.0)*x7590*x7591))+((x7589*x7590))+((x7589*x7592))+(((-1.0)*x7591*x7592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7593.value)))+(x7594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7595=IKsin(j4);
IkReal x7596=IKcos(j4);
IkReal x7597=(sj1*sj2);
IkReal x7598=(gconst133*r11);
IkReal x7599=(gconst133*r21);
IkReal x7600=(gconst133*r01);
IkReal x7601=((1.0)*x7596);
IkReal x7602=(gconst134*x7596);
IkReal x7603=((1.0)*x7595);
IkReal x7604=((1.0)*cj1*cj2);
evalcond[0]=(((x7595*x7599))+(((-1.0)*r22*x7601))+(((-1.0)*gconst134*r20*x7603)));
evalcond[1]=(((x7595*x7598))+cj0+(((-1.0)*gconst134*r10*x7603))+(((-1.0)*r12*x7601)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7601))+((x7595*x7600))+(((-1.0)*gconst134*r00*x7603)));
evalcond[3]=(((r20*x7602))+((cj2*sj1))+(((-1.0)*r22*x7603))+((cj1*sj2))+(((-1.0)*x7599*x7601)));
evalcond[4]=((((-1.0)*cj0*x7604))+((r00*x7602))+(((-1.0)*x7600*x7601))+((cj0*x7597))+(((-1.0)*r02*x7603)));
evalcond[5]=((((-1.0)*sj0*x7604))+((sj0*x7597))+((r10*x7602))+(((-1.0)*x7598*x7601))+(((-1.0)*r12*x7603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7605=((1.0)*gconst134);
CheckValue<IkReal> x7606 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7606.valid){
continue;
}
CheckValue<IkReal> x7607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7605))+(((-1.0)*gconst133*r10)))),-1);
if(!x7607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7606.value)+(((1.5707963267949)*(x7607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7608=IKsin(j4);
IkReal x7609=IKcos(j4);
IkReal x7610=(sj1*sj2);
IkReal x7611=(gconst133*r11);
IkReal x7612=(gconst133*r21);
IkReal x7613=(gconst133*r01);
IkReal x7614=((1.0)*x7609);
IkReal x7615=(gconst134*x7609);
IkReal x7616=((1.0)*x7608);
IkReal x7617=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7614))+(((-1.0)*gconst134*r20*x7616))+((x7608*x7612)));
evalcond[1]=((((-1.0)*r12*x7614))+cj0+((x7608*x7611))+(((-1.0)*gconst134*r10*x7616)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7614))+((x7608*x7613))+(((-1.0)*gconst134*r00*x7616)));
evalcond[3]=(((cj2*sj1))+((r20*x7615))+(((-1.0)*r22*x7616))+((cj1*sj2))+(((-1.0)*x7612*x7614)));
evalcond[4]=(((r00*x7615))+(((-1.0)*x7613*x7614))+(((-1.0)*r02*x7616))+((cj0*x7610))+(((-1.0)*cj0*x7617)));
evalcond[5]=((((-1.0)*r12*x7616))+(((-1.0)*x7611*x7614))+((r10*x7615))+((sj0*x7610))+(((-1.0)*sj0*x7617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7618=((1.0)*gconst134);
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7618)))),-1);
if(!x7619.valid){
continue;
}
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7618))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7619.value)))+(x7620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7621=IKsin(j4);
IkReal x7622=IKcos(j4);
IkReal x7623=(sj1*sj2);
IkReal x7624=(gconst133*r11);
IkReal x7625=(gconst133*r21);
IkReal x7626=(gconst133*r01);
IkReal x7627=((1.0)*x7622);
IkReal x7628=(gconst134*x7622);
IkReal x7629=((1.0)*x7621);
IkReal x7630=((1.0)*cj1*cj2);
evalcond[0]=(((x7621*x7625))+(((-1.0)*gconst134*r20*x7629))+(((-1.0)*r22*x7627)));
evalcond[1]=(cj0+((x7621*x7624))+(((-1.0)*gconst134*r10*x7629))+(((-1.0)*r12*x7627)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7629))+((x7621*x7626))+(((-1.0)*r02*x7627)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7625*x7627))+((r20*x7628))+(((-1.0)*r22*x7629)));
evalcond[4]=((((-1.0)*cj0*x7630))+((r00*x7628))+(((-1.0)*x7626*x7627))+((cj0*x7623))+(((-1.0)*r02*x7629)));
evalcond[5]=((((-1.0)*r12*x7629))+(((-1.0)*x7624*x7627))+((sj0*x7623))+((r10*x7628))+(((-1.0)*sj0*x7630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7631=((-1.0)*r21);
IkReal x7633 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7633)==0){
continue;
}
IkReal x7632=pow(x7633,-0.5);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(x7631),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7634.value))));
IkReal gconst136=(x7631*x7632);
IkReal gconst137=((1.0)*r20*x7632);
CheckValue<IkReal> x7635 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7635.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7635.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7636=((-1.0)*r21);
CheckValue<IkReal> x7639 = IKatan2WithCheck(IkReal(x7636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7639.valid){
continue;
}
IkReal x7637=((1.0)*(x7639.value));
IkReal x7638=x7632;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7637)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7637)));
IkReal gconst136=(x7636*x7638);
IkReal gconst137=((1.0)*r20*x7638);
IkReal x7640=r22*r22;
IkReal x7641=((1.0)*x7640);
CheckValue<IkReal> x7645=IKPowWithIntegerCheck(((-1.0)+x7640),-1);
if(!x7645.valid){
continue;
}
IkReal x7642=x7645.value;
if((((1.0)+(((-1.0)*x7641)))) < -0.00001)
continue;
IkReal x7643=IKsqrt(((1.0)+(((-1.0)*x7641))));
IkReal x7644=(cj0*x7642*x7643);
j4eval[0]=((IKabs(((((-1.0)*x7641*x7644))+x7644)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7646=((-1.0)*r21);
CheckValue<IkReal> x7649 = IKatan2WithCheck(IkReal(x7646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7649.valid){
continue;
}
IkReal x7647=((1.0)*(x7649.value));
IkReal x7648=x7632;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7647)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7647)));
IkReal gconst136=(x7646*x7648);
IkReal gconst137=((1.0)*r20*x7648);
IkReal x7650=r22*r22;
IkReal x7651=((1.0)*x7650);
CheckValue<IkReal> x7655=IKPowWithIntegerCheck(((-1.0)+x7650),-1);
if(!x7655.valid){
continue;
}
IkReal x7652=x7655.value;
if((((1.0)+(((-1.0)*x7651)))) < -0.00001)
continue;
IkReal x7653=IKsqrt(((1.0)+(((-1.0)*x7651))));
IkReal x7654=(sj0*x7652*x7653);
j4eval[0]=((IKabs(((((-1.0)*x7651*x7654))+x7654)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7656=((-1.0)*r21);
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal(x7656),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
IkReal x7657=((1.0)*(x7659.value));
IkReal x7658=x7632;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7657)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7657)));
IkReal gconst136=(x7656*x7658);
IkReal gconst137=((1.0)*r20*x7658);
IkReal x7660=r22*r22;
IkReal x7661=(r12*sj0);
IkReal x7662=(cj0*r02);
CheckValue<IkReal> x7666=IKPowWithIntegerCheck(((-1.0)+x7660),-1);
if(!x7666.valid){
continue;
}
IkReal x7663=x7666.value;
if((((1.0)+(((-1.0)*x7660)))) < -0.00001)
continue;
IkReal x7664=IKsqrt(((1.0)+(((-1.0)*x7660))));
IkReal x7665=(r22*x7663*x7664);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7662))+(((-1.0)*x7661)))))+(IKabs((((x7662*x7665))+((x7661*x7665))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7667=((1.0)*sj0);
IkReal x7668=((1.0)*cj0);
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7669.valid){
continue;
}
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7667))+(((-1.0)*r02*x7668)))),IkReal(((((-1.0)*gconst136*r11*x7667))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7668))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7669.value)))+(x7670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7671=IKsin(j4);
IkReal x7672=IKcos(j4);
IkReal x7673=(gconst136*r01);
IkReal x7674=(gconst137*r10);
IkReal x7675=(sj1*sj2);
IkReal x7676=(gconst137*r20);
IkReal x7677=(gconst136*r11);
IkReal x7678=(gconst136*r21);
IkReal x7679=(gconst137*r00);
IkReal x7680=((1.0)*x7672);
IkReal x7681=((1.0)*cj1*cj2);
IkReal x7682=((1.0)*x7671);
evalcond[0]=((((-1.0)*x7676*x7682))+((x7671*x7678))+(((-1.0)*r22*x7680)));
evalcond[1]=(cj0+((x7671*x7677))+(((-1.0)*x7674*x7682))+(((-1.0)*r12*x7680)));
evalcond[2]=((((-1.0)*sj0))+((x7671*x7673))+(((-1.0)*x7679*x7682))+(((-1.0)*r02*x7680)));
evalcond[3]=(((cj2*sj1))+((x7672*x7676))+((cj1*sj2))+(((-1.0)*r22*x7682))+(((-1.0)*x7678*x7680)));
evalcond[4]=(((x7672*x7679))+(((-1.0)*cj0*x7681))+(((-1.0)*x7673*x7680))+((cj0*x7675))+(((-1.0)*r02*x7682)));
evalcond[5]=(((x7672*x7674))+((sj0*x7675))+(((-1.0)*x7677*x7680))+(((-1.0)*r12*x7682))+(((-1.0)*sj0*x7681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7683=((1.0)*gconst137);
CheckValue<IkReal> x7684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7683))+(((-1.0)*gconst136*r10)))),-1);
if(!x7684.valid){
continue;
}
CheckValue<IkReal> x7685 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7683))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7684.value)))+(x7685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7686=IKsin(j4);
IkReal x7687=IKcos(j4);
IkReal x7688=(gconst136*r01);
IkReal x7689=(gconst137*r10);
IkReal x7690=(sj1*sj2);
IkReal x7691=(gconst137*r20);
IkReal x7692=(gconst136*r11);
IkReal x7693=(gconst136*r21);
IkReal x7694=(gconst137*r00);
IkReal x7695=((1.0)*x7687);
IkReal x7696=((1.0)*cj1*cj2);
IkReal x7697=((1.0)*x7686);
evalcond[0]=((((-1.0)*x7691*x7697))+((x7686*x7693))+(((-1.0)*r22*x7695)));
evalcond[1]=(cj0+((x7686*x7692))+(((-1.0)*r12*x7695))+(((-1.0)*x7689*x7697)));
evalcond[2]=((((-1.0)*r02*x7695))+(((-1.0)*sj0))+((x7686*x7688))+(((-1.0)*x7694*x7697)));
evalcond[3]=((((-1.0)*x7693*x7695))+((cj2*sj1))+((x7687*x7691))+((cj1*sj2))+(((-1.0)*r22*x7697)));
evalcond[4]=((((-1.0)*r02*x7697))+((x7687*x7694))+(((-1.0)*cj0*x7696))+((cj0*x7690))+(((-1.0)*x7688*x7695)));
evalcond[5]=(((x7687*x7689))+((sj0*x7690))+(((-1.0)*r12*x7697))+(((-1.0)*sj0*x7696))+(((-1.0)*x7692*x7695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7698=((1.0)*gconst137);
CheckValue<IkReal> x7699 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7699.valid){
continue;
}
CheckValue<IkReal> x7700=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7698))+(((-1.0)*gconst136*r00)))),-1);
if(!x7700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7699.value)+(((1.5707963267949)*(x7700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7701=IKsin(j4);
IkReal x7702=IKcos(j4);
IkReal x7703=(gconst136*r01);
IkReal x7704=(gconst137*r10);
IkReal x7705=(sj1*sj2);
IkReal x7706=(gconst137*r20);
IkReal x7707=(gconst136*r11);
IkReal x7708=(gconst136*r21);
IkReal x7709=(gconst137*r00);
IkReal x7710=((1.0)*x7702);
IkReal x7711=((1.0)*cj1*cj2);
IkReal x7712=((1.0)*x7701);
evalcond[0]=((((-1.0)*r22*x7710))+(((-1.0)*x7706*x7712))+((x7701*x7708)));
evalcond[1]=(cj0+(((-1.0)*r12*x7710))+((x7701*x7707))+(((-1.0)*x7704*x7712)));
evalcond[2]=((((-1.0)*sj0))+((x7701*x7703))+(((-1.0)*r02*x7710))+(((-1.0)*x7709*x7712)));
evalcond[3]=((((-1.0)*x7708*x7710))+((cj2*sj1))+(((-1.0)*r22*x7712))+((cj1*sj2))+((x7702*x7706)));
evalcond[4]=((((-1.0)*cj0*x7711))+((cj0*x7705))+(((-1.0)*x7703*x7710))+(((-1.0)*r02*x7712))+((x7702*x7709)));
evalcond[5]=((((-1.0)*x7707*x7710))+(((-1.0)*r12*x7712))+((sj0*x7705))+((x7702*x7704))+(((-1.0)*sj0*x7711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7713=((-1.0)*r10);
IkReal x7715 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7715)==0){
continue;
}
IkReal x7714=pow(x7715,-0.5);
CheckValue<IkReal> x7716 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7713),IKFAST_ATAN2_MAGTHRESH);
if(!x7716.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7716.value));
IkReal gconst139=(r11*x7714);
IkReal gconst140=(x7713*x7714);
CheckValue<IkReal> x7717 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7717.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7717.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7718=((-1.0)*r10);
IkReal x7719=x7714;
CheckValue<IkReal> x7721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7718),IKFAST_ATAN2_MAGTHRESH);
if(!x7721.valid){
continue;
}
IkReal x7720=((-1.0)*(x7721.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7720;
IkReal gconst138=x7720;
IkReal gconst139=(r11*x7719);
IkReal gconst140=(x7718*x7719);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7722=((1.0)*sj0);
IkReal x7723=((1.0)*gconst139);
CheckValue<IkReal> x7724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7723)))),-1);
if(!x7724.valid){
continue;
}
CheckValue<IkReal> x7725 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7722)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7722))+(((-1.0)*cj0*r01*x7723))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7724.value)))+(x7725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7726=IKsin(j4);
IkReal x7727=IKcos(j4);
IkReal x7728=(gconst140*r00);
IkReal x7729=(sj1*sj2);
IkReal x7730=(gconst139*r11);
IkReal x7731=(gconst139*r01);
IkReal x7732=(gconst139*r21);
IkReal x7733=((1.0)*x7727);
IkReal x7734=((1.0)*x7726);
IkReal x7735=((1.0)*cj1*cj2);
IkReal x7736=(gconst140*x7727);
evalcond[0]=(((x7726*x7732))+(((-1.0)*r22*x7733))+(((-1.0)*gconst140*r20*x7734)));
evalcond[1]=((((-1.0)*gconst140*r10*x7734))+cj0+((x7726*x7730))+(((-1.0)*r12*x7733)));
evalcond[2]=((((-1.0)*x7728*x7734))+(((-1.0)*sj0))+((x7726*x7731))+(((-1.0)*r02*x7733)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7732*x7733))+((cj1*sj2))+(((-1.0)*r22*x7734))+((r20*x7736)));
evalcond[4]=((((-1.0)*cj0*x7735))+(((-1.0)*x7731*x7733))+((cj0*x7729))+((x7727*x7728))+(((-1.0)*r02*x7734)));
evalcond[5]=(((sj0*x7729))+(((-1.0)*x7730*x7733))+(((-1.0)*r12*x7734))+((r10*x7736))+(((-1.0)*sj0*x7735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7737=((1.0)*gconst140);
CheckValue<IkReal> x7738=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7737))+(((-1.0)*gconst139*r00)))),-1);
if(!x7738.valid){
continue;
}
CheckValue<IkReal> x7739 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7738.value)))+(x7739.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7740=IKsin(j4);
IkReal x7741=IKcos(j4);
IkReal x7742=(gconst140*r00);
IkReal x7743=(sj1*sj2);
IkReal x7744=(gconst139*r11);
IkReal x7745=(gconst139*r01);
IkReal x7746=(gconst139*r21);
IkReal x7747=((1.0)*x7741);
IkReal x7748=((1.0)*x7740);
IkReal x7749=((1.0)*cj1*cj2);
IkReal x7750=(gconst140*x7741);
evalcond[0]=((((-1.0)*r22*x7747))+((x7740*x7746))+(((-1.0)*gconst140*r20*x7748)));
evalcond[1]=(cj0+((x7740*x7744))+(((-1.0)*r12*x7747))+(((-1.0)*gconst140*r10*x7748)));
evalcond[2]=((((-1.0)*x7742*x7748))+(((-1.0)*sj0))+(((-1.0)*r02*x7747))+((x7740*x7745)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7748))+((cj1*sj2))+((r20*x7750))+(((-1.0)*x7746*x7747)));
evalcond[4]=(((x7741*x7742))+(((-1.0)*r02*x7748))+(((-1.0)*cj0*x7749))+((cj0*x7743))+(((-1.0)*x7745*x7747)));
evalcond[5]=(((r10*x7750))+(((-1.0)*x7744*x7747))+((sj0*x7743))+(((-1.0)*r12*x7748))+(((-1.0)*sj0*x7749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7751=((-1.0)*r11);
IkReal x7753 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7753)==0){
continue;
}
IkReal x7752=pow(x7753,-0.5);
CheckValue<IkReal> x7754 = IKatan2WithCheck(IkReal(x7751),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7754.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7754.value))));
IkReal gconst142=(x7751*x7752);
IkReal gconst143=((1.0)*r10*x7752);
CheckValue<IkReal> x7755 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7755.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7755.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7756=((-1.0)*r11);
CheckValue<IkReal> x7759 = IKatan2WithCheck(IkReal(x7756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7759.valid){
continue;
}
IkReal x7757=((1.0)*(x7759.value));
IkReal x7758=x7752;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7757)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7757)));
IkReal gconst142=(x7756*x7758);
IkReal gconst143=((1.0)*r10*x7758);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7760=((-1.0)*r11);
CheckValue<IkReal> x7763 = IKatan2WithCheck(IkReal(x7760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7763.valid){
continue;
}
IkReal x7761=((1.0)*(x7763.value));
IkReal x7762=x7752;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7761)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7761)));
IkReal gconst142=(x7760*x7762);
IkReal gconst143=((1.0)*r10*x7762);
IkReal x7764=r12*r12;
IkReal x7765=((1.0)*sj0);
IkReal x7766=(cj0*r02);
IkReal x7767=x7752;
j4eval[0]=((IKabs((((sj0*x7764*x7767))+((r12*x7766*x7767))+(((-1.0)*x7765*x7767)))))+(IKabs(((((-1.0)*x7766))+(((-1.0)*r12*x7765))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7768=((-1.0)*r11);
CheckValue<IkReal> x7771 = IKatan2WithCheck(IkReal(x7768),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7771.valid){
continue;
}
IkReal x7769=((1.0)*(x7771.value));
IkReal x7770=x7752;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7769)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7769)));
IkReal gconst142=(x7768*x7770);
IkReal gconst143=((1.0)*r10*x7770);
IkReal x7772=r12*r12;
IkReal x7773=(cj1*r22*sj2);
IkReal x7774=(cj2*r22*sj1);
CheckValue<IkReal> x7778=IKPowWithIntegerCheck(((-1.0)+x7772),-1);
if(!x7778.valid){
continue;
}
IkReal x7775=x7778.value;
if((((1.0)+(((-1.0)*x7772)))) < -0.00001)
continue;
IkReal x7776=IKsqrt(((1.0)+(((-1.0)*x7772))));
IkReal x7777=((1.0)*r12*x7775*x7776);
j4eval[0]=((IKabs((x7774+x7773)))+(IKabs(((((-1.0)*x7773*x7777))+(((-1.0)*x7774*x7777))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7779=(gconst142*r21);
IkReal x7780=(cj1*sj2);
IkReal x7781=(cj2*sj1);
IkReal x7782=(gconst143*r20);
CheckValue<IkReal> x7783=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7779*x7782))+(x7782*x7782)+(r22*r22)+(x7779*x7779))),-1);
if(!x7783.valid){
continue;
}
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal((((r22*x7780))+((r22*x7781)))),IkReal((((x7779*x7780))+((x7779*x7781))+(((-1.0)*x7780*x7782))+(((-1.0)*x7781*x7782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7783.value)))+(x7784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7785=IKsin(j4);
IkReal x7786=IKcos(j4);
IkReal x7787=(sj1*sj2);
IkReal x7788=(gconst143*r20);
IkReal x7789=((1.0)*x7786);
IkReal x7790=((1.0)*cj1*cj2);
IkReal x7791=((1.0)*x7785);
IkReal x7792=(gconst142*x7785);
IkReal x7793=(gconst143*x7786);
evalcond[0]=(((r21*x7792))+(((-1.0)*r22*x7789))+(((-1.0)*x7788*x7791)));
evalcond[1]=((((-1.0)*gconst143*r10*x7791))+cj0+((r11*x7792))+(((-1.0)*r12*x7789)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7789))+(((-1.0)*gconst143*r00*x7791))+((r01*x7792)));
evalcond[3]=((((-1.0)*r22*x7791))+((cj2*sj1))+(((-1.0)*gconst142*r21*x7789))+((cj1*sj2))+((x7786*x7788)));
evalcond[4]=((((-1.0)*cj0*x7790))+(((-1.0)*gconst142*r01*x7789))+((r00*x7793))+(((-1.0)*r02*x7791))+((cj0*x7787)));
evalcond[5]=(((sj0*x7787))+((r10*x7793))+(((-1.0)*gconst142*r11*x7789))+(((-1.0)*r12*x7791))+(((-1.0)*sj0*x7790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7794=((1.0)*sj0);
IkReal x7795=((1.0)*gconst142);
CheckValue<IkReal> x7796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7795))+(((-1.0)*gconst143*r21)))),-1);
if(!x7796.valid){
continue;
}
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7794))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x7794))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7795))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7796.value)))+(x7797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7798=IKsin(j4);
IkReal x7799=IKcos(j4);
IkReal x7800=(sj1*sj2);
IkReal x7801=(gconst143*r20);
IkReal x7802=((1.0)*x7799);
IkReal x7803=((1.0)*cj1*cj2);
IkReal x7804=((1.0)*x7798);
IkReal x7805=(gconst142*x7798);
IkReal x7806=(gconst143*x7799);
evalcond[0]=((((-1.0)*x7801*x7804))+((r21*x7805))+(((-1.0)*r22*x7802)));
evalcond[1]=(cj0+((r11*x7805))+(((-1.0)*r12*x7802))+(((-1.0)*gconst143*r10*x7804)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7802))+((r01*x7805))+(((-1.0)*gconst143*r00*x7804)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7804))+((x7799*x7801))+(((-1.0)*gconst142*r21*x7802)));
evalcond[4]=((((-1.0)*gconst142*r01*x7802))+((cj0*x7800))+((r00*x7806))+(((-1.0)*r02*x7804))+(((-1.0)*cj0*x7803)));
evalcond[5]=((((-1.0)*sj0*x7803))+(((-1.0)*r12*x7804))+((sj0*x7800))+(((-1.0)*gconst142*r11*x7802))+((r10*x7806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7807=((1.0)*gconst143);
CheckValue<IkReal> x7808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7807))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7808.valid){
continue;
}
CheckValue<IkReal> x7809=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7807)))),-1);
if(!x7809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7808.value)+(((1.5707963267949)*(x7809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7810=IKsin(j4);
IkReal x7811=IKcos(j4);
IkReal x7812=(sj1*sj2);
IkReal x7813=(gconst143*r20);
IkReal x7814=((1.0)*x7811);
IkReal x7815=((1.0)*cj1*cj2);
IkReal x7816=((1.0)*x7810);
IkReal x7817=(gconst142*x7810);
IkReal x7818=(gconst143*x7811);
evalcond[0]=((((-1.0)*r22*x7814))+((r21*x7817))+(((-1.0)*x7813*x7816)));
evalcond[1]=(cj0+((r11*x7817))+(((-1.0)*r12*x7814))+(((-1.0)*gconst143*r10*x7816)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7814))+((r01*x7817))+(((-1.0)*gconst143*r00*x7816)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7816))+(((-1.0)*gconst142*r21*x7814))+((x7811*x7813)));
evalcond[4]=((((-1.0)*gconst142*r01*x7814))+(((-1.0)*r02*x7816))+((r00*x7818))+(((-1.0)*cj0*x7815))+((cj0*x7812)));
evalcond[5]=(((r10*x7818))+(((-1.0)*gconst142*r11*x7814))+((sj0*x7812))+(((-1.0)*r12*x7816))+(((-1.0)*sj0*x7815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7819=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7819;
j4eval[1]=IKsign(x7819);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7820=((1.0)*cj5);
IkReal x7821=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7820)));
j4eval[0]=x7821;
j4eval[1]=((IKabs(((((-1.0)*r20*x7820))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7821);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7822=cj5*cj5;
IkReal x7823=r11*r11;
IkReal x7824=(r11*sj5);
IkReal x7825=(cj5*r10);
IkReal x7826=((r12*r12)+((x7822*(r10*r10)))+x7823+(((-2.0)*x7824*x7825))+(((-1.0)*x7822*x7823)));
j4eval[0]=x7826;
j4eval[1]=IKsign(x7826);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7824))+x7825))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7827=cj5*cj5;
IkReal x7828=r11*r11;
IkReal x7829=(cj5*r10);
IkReal x7830=(r11*sj5);
CheckValue<IkReal> x7831 = IKatan2WithCheck(IkReal((x7829+(((-1.0)*x7830)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7831.valid){
continue;
}
CheckValue<IkReal> x7832=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7827*(r10*r10)))+(((-1.0)*x7827*x7828))+x7828+(((-2.0)*x7829*x7830)))),-1);
if(!x7832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7831.value)+(((1.5707963267949)*(x7832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7833=IKsin(j4);
IkReal x7834=IKcos(j4);
IkReal x7835=(cj5*r10);
IkReal x7836=(r01*sj5);
IkReal x7837=(cj5*r00);
IkReal x7838=(cj5*r20);
IkReal x7839=((1.0)*x7834);
IkReal x7840=((1.0)*x7833);
IkReal x7841=(sj5*x7833);
evalcond[0]=(((r21*x7841))+(((-1.0)*x7838*x7840))+(((-1.0)*r22*x7839)));
evalcond[1]=((((-1.0)*x7837*x7840))+((x7833*x7836))+(((-1.0)*r02*x7839)));
evalcond[2]=(((x7834*x7835))+(((-1.0)*r11*sj5*x7839))+(((-1.0)*r12*x7840)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7839))+(((-1.0)*x7835*x7840))+((r11*x7841)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7840))+((cj1*sj2))+((x7834*x7838))+(((-1.0)*r21*sj5*x7839)));
evalcond[5]=(((x7834*x7837))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7840))+(((-1.0)*x7836*x7839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7842=((1.0)*cj5);
CheckValue<IkReal> x7843 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7843.valid){
continue;
}
CheckValue<IkReal> x7844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7842)))),-1);
if(!x7844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7843.value)+(((1.5707963267949)*(x7844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7845=IKsin(j4);
IkReal x7846=IKcos(j4);
IkReal x7847=(cj5*r10);
IkReal x7848=(r01*sj5);
IkReal x7849=(cj5*r00);
IkReal x7850=(cj5*r20);
IkReal x7851=((1.0)*x7846);
IkReal x7852=((1.0)*x7845);
IkReal x7853=(sj5*x7845);
evalcond[0]=((((-1.0)*x7850*x7852))+((r21*x7853))+(((-1.0)*r22*x7851)));
evalcond[1]=((((-1.0)*x7849*x7852))+(((-1.0)*r02*x7851))+((x7845*x7848)));
evalcond[2]=((((-1.0)*r11*sj5*x7851))+((x7846*x7847))+(((-1.0)*r12*x7852)));
evalcond[3]=((1.0)+((r11*x7853))+(((-1.0)*x7847*x7852))+(((-1.0)*r12*x7851)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7851))+((x7846*x7850))+(((-1.0)*r22*x7852)));
evalcond[5]=((((-1.0)*x7848*x7851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7852))+((x7846*x7849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7854.value)))+(x7855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7856=IKsin(j4);
IkReal x7857=IKcos(j4);
IkReal x7858=(cj5*r10);
IkReal x7859=(r01*sj5);
IkReal x7860=(cj5*r00);
IkReal x7861=(cj5*r20);
IkReal x7862=((1.0)*x7857);
IkReal x7863=((1.0)*x7856);
IkReal x7864=(sj5*x7856);
evalcond[0]=(((r21*x7864))+(((-1.0)*x7861*x7863))+(((-1.0)*r22*x7862)));
evalcond[1]=(((x7856*x7859))+(((-1.0)*r02*x7862))+(((-1.0)*x7860*x7863)));
evalcond[2]=(((x7857*x7858))+(((-1.0)*r11*sj5*x7862))+(((-1.0)*r12*x7863)));
evalcond[3]=((1.0)+(((-1.0)*x7858*x7863))+((r11*x7864))+(((-1.0)*r12*x7862)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7857*x7861))+(((-1.0)*r21*sj5*x7862))+(((-1.0)*r22*x7863)));
evalcond[5]=((((-1.0)*x7859*x7862))+((x7857*x7860))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7865=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7865;
j4eval[1]=IKsign(x7865);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7866=((1.0)*cj5);
IkReal x7867=((((-1.0)*r21*x7866))+(((-1.0)*r20*sj5)));
j4eval[0]=x7867;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7866))))));
j4eval[2]=IKsign(x7867);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7868=cj5*cj5;
IkReal x7869=r11*r11;
IkReal x7870=(cj5*r10);
IkReal x7871=(r11*sj5);
IkReal x7872=((((2.0)*x7870*x7871))+(((-1.0)*x7869))+(((-1.0)*(r12*r12)))+((x7868*x7869))+(((-1.0)*x7868*(r10*r10))));
j4eval[0]=x7872;
j4eval[1]=((IKabs(((((-1.0)*x7871))+x7870)))+(IKabs(r12)));
j4eval[2]=IKsign(x7872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7873=cj5*cj5;
IkReal x7874=r11*r11;
IkReal x7875=(cj5*r10);
IkReal x7876=(r11*sj5);
CheckValue<IkReal> x7877 = IKatan2WithCheck(IkReal(((((-1.0)*x7876))+x7875)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7877.valid){
continue;
}
CheckValue<IkReal> x7878=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7874))+(((-1.0)*(r12*r12)))+(((-1.0)*x7873*(r10*r10)))+((x7873*x7874))+(((2.0)*x7875*x7876)))),-1);
if(!x7878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7877.value)+(((1.5707963267949)*(x7878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7879=IKsin(j4);
IkReal x7880=IKcos(j4);
IkReal x7881=(cj5*r10);
IkReal x7882=(r01*sj5);
IkReal x7883=(cj5*r00);
IkReal x7884=(cj5*r20);
IkReal x7885=((1.0)*x7880);
IkReal x7886=((1.0)*x7879);
IkReal x7887=(sj5*x7879);
evalcond[0]=((((-1.0)*r22*x7885))+(((-1.0)*x7884*x7886))+((r21*x7887)));
evalcond[1]=((((-1.0)*r02*x7885))+((x7879*x7882))+(((-1.0)*x7883*x7886)));
evalcond[2]=(((x7880*x7881))+(((-1.0)*r11*sj5*x7885))+(((-1.0)*r12*x7886)));
evalcond[3]=((-1.0)+((r11*x7887))+(((-1.0)*r12*x7885))+(((-1.0)*x7881*x7886)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7886))+((cj1*sj2))+((x7880*x7884))+(((-1.0)*r21*sj5*x7885)));
evalcond[5]=((((-1.0)*x7882*x7885))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7886))+((x7880*x7883))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7888=((1.0)*cj5);
CheckValue<IkReal> x7889=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7888))+(((-1.0)*r20*sj5)))),-1);
if(!x7889.valid){
continue;
}
CheckValue<IkReal> x7890 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7889.value)))+(x7890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7891=IKsin(j4);
IkReal x7892=IKcos(j4);
IkReal x7893=(cj5*r10);
IkReal x7894=(r01*sj5);
IkReal x7895=(cj5*r00);
IkReal x7896=(cj5*r20);
IkReal x7897=((1.0)*x7892);
IkReal x7898=((1.0)*x7891);
IkReal x7899=(sj5*x7891);
evalcond[0]=(((r21*x7899))+(((-1.0)*r22*x7897))+(((-1.0)*x7896*x7898)));
evalcond[1]=((((-1.0)*x7895*x7898))+((x7891*x7894))+(((-1.0)*r02*x7897)));
evalcond[2]=((((-1.0)*r11*sj5*x7897))+(((-1.0)*r12*x7898))+((x7892*x7893)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7897))+(((-1.0)*x7893*x7898))+((r11*x7899)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7892*x7896))+(((-1.0)*r21*sj5*x7897))+(((-1.0)*r22*x7898)));
evalcond[5]=((((-1.0)*x7894*x7897))+(((-1.0)*sj1*sj2))+((x7892*x7895))+((cj1*cj2))+(((-1.0)*r02*x7898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7900 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7900.valid){
continue;
}
CheckValue<IkReal> x7901=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7900.value)+(((1.5707963267949)*(x7901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7902=IKsin(j4);
IkReal x7903=IKcos(j4);
IkReal x7904=(cj5*r10);
IkReal x7905=(r01*sj5);
IkReal x7906=(cj5*r00);
IkReal x7907=(cj5*r20);
IkReal x7908=((1.0)*x7903);
IkReal x7909=((1.0)*x7902);
IkReal x7910=(sj5*x7902);
evalcond[0]=(((r21*x7910))+(((-1.0)*r22*x7908))+(((-1.0)*x7907*x7909)));
evalcond[1]=((((-1.0)*x7906*x7909))+((x7902*x7905))+(((-1.0)*r02*x7908)));
evalcond[2]=(((x7903*x7904))+(((-1.0)*r12*x7909))+(((-1.0)*r11*sj5*x7908)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7908))+((r11*x7910))+(((-1.0)*x7904*x7909)));
evalcond[4]=(((cj2*sj1))+((x7903*x7907))+((cj1*sj2))+(((-1.0)*r22*x7909))+(((-1.0)*r21*sj5*x7908)));
evalcond[5]=((((-1.0)*x7905*x7908))+((x7903*x7906))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x7909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7911=((-1.0)*r00);
IkReal x7913 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7913)==0){
continue;
}
IkReal x7912=pow(x7913,-0.5);
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7911),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7914.value));
IkReal gconst145=(r01*x7912);
IkReal gconst146=(x7911*x7912);
CheckValue<IkReal> x7915 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7915.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7915.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7916=((-1.0)*r00);
IkReal x7917=x7912;
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7916),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
IkReal x7918=((-1.0)*(x7919.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7918;
IkReal gconst144=x7918;
IkReal gconst145=(r01*x7917);
IkReal gconst146=(x7916*x7917);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7920=((1.0)*sj0);
IkReal x7921=((1.0)*gconst145);
CheckValue<IkReal> x7922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7921))+(((-1.0)*gconst146*r21)))),-1);
if(!x7922.valid){
continue;
}
CheckValue<IkReal> x7923 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7920)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7920))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7922.value)))+(x7923.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7924=IKsin(j4);
IkReal x7925=IKcos(j4);
IkReal x7926=(gconst146*r10);
IkReal x7927=(sj1*sj2);
IkReal x7928=(gconst146*r20);
IkReal x7929=(gconst146*r00);
IkReal x7930=((1.0)*x7925);
IkReal x7931=((1.0)*x7924);
IkReal x7932=(gconst145*x7924);
IkReal x7933=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7932))+(((-1.0)*r22*x7930))+(((-1.0)*x7928*x7931)));
evalcond[1]=(cj0+(((-1.0)*x7926*x7931))+(((-1.0)*r12*x7930))+((r11*x7932)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7930))+(((-1.0)*x7929*x7931))+((r01*x7932)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7931))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7930))+((x7925*x7928)));
evalcond[4]=((((-1.0)*gconst145*r01*x7930))+(((-1.0)*cj0*x7933))+(((-1.0)*r02*x7931))+((x7925*x7929))+((cj0*x7927)));
evalcond[5]=((((-1.0)*r12*x7931))+(((-1.0)*sj0*x7933))+((x7925*x7926))+((sj0*x7927))+(((-1.0)*gconst145*r11*x7930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7934=((1.0)*gconst146);
CheckValue<IkReal> x7935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7934))+(((-1.0)*gconst145*r10)))),-1);
if(!x7935.valid){
continue;
}
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7934))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7935.value)))+(x7936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7937=IKsin(j4);
IkReal x7938=IKcos(j4);
IkReal x7939=(gconst146*r10);
IkReal x7940=(sj1*sj2);
IkReal x7941=(gconst146*r20);
IkReal x7942=(gconst146*r00);
IkReal x7943=((1.0)*x7938);
IkReal x7944=((1.0)*x7937);
IkReal x7945=(gconst145*x7937);
IkReal x7946=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7941*x7944))+((r21*x7945))+(((-1.0)*r22*x7943)));
evalcond[1]=(cj0+(((-1.0)*x7939*x7944))+((r11*x7945))+(((-1.0)*r12*x7943)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7943))+((r01*x7945))+(((-1.0)*x7942*x7944)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7944))+((cj1*sj2))+((x7938*x7941))+(((-1.0)*gconst145*r21*x7943)));
evalcond[4]=(((cj0*x7940))+(((-1.0)*gconst145*r01*x7943))+(((-1.0)*cj0*x7946))+(((-1.0)*r02*x7944))+((x7938*x7942)));
evalcond[5]=(((sj0*x7940))+(((-1.0)*sj0*x7946))+(((-1.0)*r12*x7944))+((x7938*x7939))+(((-1.0)*gconst145*r11*x7943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7947=((-1.0)*r01);
IkReal x7949 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7949)==0){
continue;
}
IkReal x7948=pow(x7949,-0.5);
CheckValue<IkReal> x7950 = IKatan2WithCheck(IkReal(x7947),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7950.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7950.value))));
IkReal gconst148=(x7947*x7948);
IkReal gconst149=((1.0)*r00*x7948);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7952=((-1.0)*r01);
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(x7952),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
IkReal x7953=((1.0)*(x7955.value));
IkReal x7954=x7948;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7953)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7953)));
IkReal gconst148=(x7952*x7954);
IkReal gconst149=((1.0)*r00*x7954);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7956=((-1.0)*r01);
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal(x7956),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
IkReal x7957=((1.0)*(x7959.value));
IkReal x7958=x7948;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7957)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7957)));
IkReal gconst148=(x7956*x7958);
IkReal gconst149=((1.0)*r00*x7958);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7960=((-1.0)*r01);
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(x7960),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
IkReal x7961=((1.0)*(x7963.value));
IkReal x7962=x7948;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7961)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7961)));
IkReal gconst148=(x7960*x7962);
IkReal gconst149=((1.0)*r00*x7962);
IkReal x7964=r02*r02;
IkReal x7965=(r12*sj0);
IkReal x7966=((1.0)*cj0);
IkReal x7967=x7948;
j4eval[0]=((IKabs((((cj0*x7964*x7967))+((r02*x7965*x7967))+(((-1.0)*x7966*x7967)))))+(IKabs(((((-1.0)*x7965))+(((-1.0)*r02*x7966))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7968=((1.0)*sj0);
IkReal x7969=((1.0)*gconst148);
CheckValue<IkReal> x7970=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7969)))),-1);
if(!x7970.valid){
continue;
}
CheckValue<IkReal> x7971 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7968)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x7969))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7970.value)))+(x7971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7972=IKsin(j4);
IkReal x7973=IKcos(j4);
IkReal x7974=(gconst148*r11);
IkReal x7975=(sj1*sj2);
IkReal x7976=((1.0)*x7973);
IkReal x7977=(gconst149*x7973);
IkReal x7978=(gconst148*x7972);
IkReal x7979=((1.0)*cj1*cj2);
IkReal x7980=((1.0)*x7972);
evalcond[0]=((((-1.0)*r22*x7976))+(((-1.0)*gconst149*r20*x7980))+((r21*x7978)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x7980))+((x7972*x7974))+(((-1.0)*r12*x7976)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7978))+(((-1.0)*r02*x7976))+(((-1.0)*gconst149*r00*x7980)));
evalcond[3]=((((-1.0)*r22*x7980))+((cj2*sj1))+((cj1*sj2))+((r20*x7977))+(((-1.0)*gconst148*r21*x7976)));
evalcond[4]=((((-1.0)*gconst148*r01*x7976))+((r00*x7977))+((cj0*x7975))+(((-1.0)*cj0*x7979))+(((-1.0)*r02*x7980)));
evalcond[5]=((((-1.0)*sj0*x7979))+(((-1.0)*r12*x7980))+((sj0*x7975))+((r10*x7977))+(((-1.0)*x7974*x7976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7981=((1.0)*gconst149);
CheckValue<IkReal> x7982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7981))+(((-1.0)*gconst148*r10)))),-1);
if(!x7982.valid){
continue;
}
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7981))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7982.value)))+(x7983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7984=IKsin(j4);
IkReal x7985=IKcos(j4);
IkReal x7986=(gconst148*r11);
IkReal x7987=(sj1*sj2);
IkReal x7988=((1.0)*x7985);
IkReal x7989=(gconst149*x7985);
IkReal x7990=(gconst148*x7984);
IkReal x7991=((1.0)*cj1*cj2);
IkReal x7992=((1.0)*x7984);
evalcond[0]=((((-1.0)*r22*x7988))+(((-1.0)*gconst149*r20*x7992))+((r21*x7990)));
evalcond[1]=((((-1.0)*r12*x7988))+cj0+(((-1.0)*gconst149*r10*x7992))+((x7984*x7986)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7990))+(((-1.0)*r02*x7988))+(((-1.0)*gconst149*r00*x7992)));
evalcond[3]=(((cj2*sj1))+((r20*x7989))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7988))+(((-1.0)*r22*x7992)));
evalcond[4]=((((-1.0)*gconst148*r01*x7988))+((r00*x7989))+((cj0*x7987))+(((-1.0)*cj0*x7991))+(((-1.0)*r02*x7992)));
evalcond[5]=((((-1.0)*r12*x7992))+((sj0*x7987))+(((-1.0)*sj0*x7991))+(((-1.0)*x7986*x7988))+((r10*x7989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7993=((1.0)*gconst149);
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7993))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
CheckValue<IkReal> x7995=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7993))+(((-1.0)*gconst148*r00)))),-1);
if(!x7995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7994.value)+(((1.5707963267949)*(x7995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7996=IKsin(j4);
IkReal x7997=IKcos(j4);
IkReal x7998=(gconst148*r11);
IkReal x7999=(sj1*sj2);
IkReal x8000=((1.0)*x7997);
IkReal x8001=(gconst149*x7997);
IkReal x8002=(gconst148*x7996);
IkReal x8003=((1.0)*cj1*cj2);
IkReal x8004=((1.0)*x7996);
evalcond[0]=(((r21*x8002))+(((-1.0)*gconst149*r20*x8004))+(((-1.0)*r22*x8000)));
evalcond[1]=(cj0+((x7996*x7998))+(((-1.0)*r12*x8000))+(((-1.0)*gconst149*r10*x8004)));
evalcond[2]=(((r01*x8002))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8004))+(((-1.0)*r02*x8000)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8000))+((cj1*sj2))+((r20*x8001))+(((-1.0)*r22*x8004)));
evalcond[4]=(((r00*x8001))+(((-1.0)*cj0*x8003))+(((-1.0)*gconst148*r01*x8000))+((cj0*x7999))+(((-1.0)*r02*x8004)));
evalcond[5]=((((-1.0)*x7998*x8000))+((sj0*x7999))+(((-1.0)*r12*x8004))+(((-1.0)*sj0*x8003))+((r10*x8001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8005=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8005;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8006=((1.0)*cj5);
IkReal x8007=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8006)));
j4eval[0]=x8007;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8006)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8008=cj5*cj5;
IkReal x8009=r01*r01;
IkReal x8010=(r01*sj5);
IkReal x8011=(cj5*r00);
IkReal x8012=(((x8008*x8009))+(((2.0)*x8010*x8011))+(((-1.0)*(r02*r02)))+(((-1.0)*x8008*(r00*r00)))+(((-1.0)*x8009)));
j4eval[0]=x8012;
j4eval[1]=IKsign(x8012);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8010))+x8011))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8013=cj5*cj5;
IkReal x8014=r01*r01;
IkReal x8015=(r01*sj5);
IkReal x8016=(cj5*r00);
CheckValue<IkReal> x8017=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8013*(r00*r00)))+(((-1.0)*(r02*r02)))+((x8013*x8014))+(((-1.0)*x8014))+(((2.0)*x8015*x8016)))),-1);
if(!x8017.valid){
continue;
}
CheckValue<IkReal> x8018 = IKatan2WithCheck(IkReal(((((-1.0)*x8015))+x8016)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8017.value)))+(x8018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8019=IKsin(j4);
IkReal x8020=IKcos(j4);
IkReal x8021=(cj5*r10);
IkReal x8022=(r01*sj5);
IkReal x8023=(cj5*r00);
IkReal x8024=(cj5*r20);
IkReal x8025=((1.0)*x8020);
IkReal x8026=((1.0)*x8019);
IkReal x8027=(sj5*x8019);
evalcond[0]=(((r21*x8027))+(((-1.0)*r22*x8025))+(((-1.0)*x8024*x8026)));
evalcond[1]=((((-1.0)*r12*x8025))+((r11*x8027))+(((-1.0)*x8021*x8026)));
evalcond[2]=((((-1.0)*x8022*x8025))+(((-1.0)*r02*x8026))+((x8020*x8023)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8025))+(((-1.0)*x8023*x8026))+((x8019*x8022)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8025))+((x8020*x8024))+(((-1.0)*r22*x8026)));
evalcond[5]=((((-1.0)*r12*x8026))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8025))+((x8020*x8021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8028=((1.0)*cj5);
CheckValue<IkReal> x8029 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8029.valid){
continue;
}
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8028))+(((-1.0)*r10*sj5)))),-1);
if(!x8030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8029.value)+(((1.5707963267949)*(x8030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8031=IKsin(j4);
IkReal x8032=IKcos(j4);
IkReal x8033=(cj5*r10);
IkReal x8034=(r01*sj5);
IkReal x8035=(cj5*r00);
IkReal x8036=(cj5*r20);
IkReal x8037=((1.0)*x8032);
IkReal x8038=((1.0)*x8031);
IkReal x8039=(sj5*x8031);
evalcond[0]=(((r21*x8039))+(((-1.0)*r22*x8037))+(((-1.0)*x8036*x8038)));
evalcond[1]=((((-1.0)*x8033*x8038))+(((-1.0)*r12*x8037))+((r11*x8039)));
evalcond[2]=((((-1.0)*r02*x8038))+(((-1.0)*x8034*x8037))+((x8032*x8035)));
evalcond[3]=((-1.0)+(((-1.0)*x8035*x8038))+(((-1.0)*r02*x8037))+((x8031*x8034)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8037))+((x8032*x8036))+(((-1.0)*r22*x8038)));
evalcond[5]=((((-1.0)*r12*x8038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8032*x8033))+(((-1.0)*r11*sj5*x8037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8040=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8040.value)))+(x8041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKsin(j4);
IkReal x8043=IKcos(j4);
IkReal x8044=(cj5*r10);
IkReal x8045=(r01*sj5);
IkReal x8046=(cj5*r00);
IkReal x8047=(cj5*r20);
IkReal x8048=((1.0)*x8043);
IkReal x8049=((1.0)*x8042);
IkReal x8050=(sj5*x8042);
evalcond[0]=((((-1.0)*x8047*x8049))+((r21*x8050))+(((-1.0)*r22*x8048)));
evalcond[1]=(((r11*x8050))+(((-1.0)*x8044*x8049))+(((-1.0)*r12*x8048)));
evalcond[2]=((((-1.0)*x8045*x8048))+(((-1.0)*r02*x8049))+((x8043*x8046)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8048))+((x8042*x8045))+(((-1.0)*x8046*x8049)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8048))+((x8043*x8047))+(((-1.0)*r22*x8049)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8048))+((x8043*x8044))+(((-1.0)*r12*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8051=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8051;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8052=((1.0)*cj5);
IkReal x8053=((((-1.0)*r21*x8052))+(((-1.0)*r20*sj5)));
j4eval[0]=x8053;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8052)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8054=cj5*cj5;
IkReal x8055=r01*r01;
IkReal x8056=(cj5*r00);
IkReal x8057=(r01*sj5);
IkReal x8058=((((-1.0)*x8054*x8055))+((x8054*(r00*r00)))+(((-2.0)*x8056*x8057))+x8055+(r02*r02));
j4eval[0]=x8058;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8057))+x8056))));
j4eval[2]=IKsign(x8058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8059=cj5*cj5;
IkReal x8060=r01*r01;
IkReal x8061=(r01*sj5);
IkReal x8062=(cj5*r00);
CheckValue<IkReal> x8063 = IKatan2WithCheck(IkReal(((((-1.0)*x8061))+x8062)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8063.valid){
continue;
}
CheckValue<IkReal> x8064=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8061*x8062))+x8060+(r02*r02)+(((-1.0)*x8059*x8060))+((x8059*(r00*r00))))),-1);
if(!x8064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8063.value)+(((1.5707963267949)*(x8064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8065=IKsin(j4);
IkReal x8066=IKcos(j4);
IkReal x8067=(cj5*r10);
IkReal x8068=(r01*sj5);
IkReal x8069=(cj5*r00);
IkReal x8070=(cj5*r20);
IkReal x8071=((1.0)*x8066);
IkReal x8072=((1.0)*x8065);
IkReal x8073=(sj5*x8065);
evalcond[0]=((((-1.0)*x8070*x8072))+((r21*x8073))+(((-1.0)*r22*x8071)));
evalcond[1]=((((-1.0)*x8067*x8072))+((r11*x8073))+(((-1.0)*r12*x8071)));
evalcond[2]=((((-1.0)*r02*x8072))+(((-1.0)*x8068*x8071))+((x8066*x8069)));
evalcond[3]=((1.0)+((x8065*x8068))+(((-1.0)*r02*x8071))+(((-1.0)*x8069*x8072)));
evalcond[4]=(((cj2*sj1))+((x8066*x8070))+((cj1*sj2))+(((-1.0)*r21*sj5*x8071))+(((-1.0)*r22*x8072)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8071))+((x8066*x8067))+((cj1*cj2))+(((-1.0)*r12*x8072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8074=((1.0)*cj5);
CheckValue<IkReal> x8075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8074))+(((-1.0)*r20*sj5)))),-1);
if(!x8075.valid){
continue;
}
CheckValue<IkReal> x8076 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8075.value)))+(x8076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8077=IKsin(j4);
IkReal x8078=IKcos(j4);
IkReal x8079=(cj5*r10);
IkReal x8080=(r01*sj5);
IkReal x8081=(cj5*r00);
IkReal x8082=(cj5*r20);
IkReal x8083=((1.0)*x8078);
IkReal x8084=((1.0)*x8077);
IkReal x8085=(sj5*x8077);
evalcond[0]=((((-1.0)*x8082*x8084))+((r21*x8085))+(((-1.0)*r22*x8083)));
evalcond[1]=((((-1.0)*x8079*x8084))+((r11*x8085))+(((-1.0)*r12*x8083)));
evalcond[2]=((((-1.0)*r02*x8084))+(((-1.0)*x8080*x8083))+((x8078*x8081)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8083))+((x8077*x8080))+(((-1.0)*x8081*x8084)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8083))+((cj1*sj2))+((x8078*x8082))+(((-1.0)*r22*x8084)));
evalcond[5]=(((x8078*x8079))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8083))+((cj1*cj2))+(((-1.0)*r12*x8084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8086.value)+(((1.5707963267949)*(x8087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8088=IKsin(j4);
IkReal x8089=IKcos(j4);
IkReal x8090=(cj5*r10);
IkReal x8091=(r01*sj5);
IkReal x8092=(cj5*r00);
IkReal x8093=(cj5*r20);
IkReal x8094=((1.0)*x8089);
IkReal x8095=((1.0)*x8088);
IkReal x8096=(sj5*x8088);
evalcond[0]=((((-1.0)*x8093*x8095))+(((-1.0)*r22*x8094))+((r21*x8096)));
evalcond[1]=(((r11*x8096))+(((-1.0)*x8090*x8095))+(((-1.0)*r12*x8094)));
evalcond[2]=(((x8089*x8092))+(((-1.0)*r02*x8095))+(((-1.0)*x8091*x8094)));
evalcond[3]=((1.0)+(((-1.0)*x8092*x8095))+(((-1.0)*r02*x8094))+((x8088*x8091)));
evalcond[4]=(((cj2*sj1))+((x8089*x8093))+(((-1.0)*r21*sj5*x8094))+((cj1*sj2))+(((-1.0)*r22*x8095)));
evalcond[5]=(((x8089*x8090))+(((-1.0)*r11*sj5*x8094))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8095))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8097=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8097);
rxp1_1=(px*r21);
rxp1_2=(r11*x8097);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8098=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8098);
rxp1_1=(px*r21);
rxp1_2=(r11*x8098);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8099=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8099);
rxp1_1=(px*r21);
rxp1_2=(r11*x8099);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8102=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8102.valid){
continue;
}
IkReal x8100=x8102.value;
IkReal x8101=(sj0*x8100);
cj4array[0]=(((cj1*cj2*x8101))+(((-1.0)*sj1*sj2*x8101)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8103=IKsin(j4);
IkReal x8104=IKcos(j4);
IkReal x8105=(r21*sj5);
IkReal x8106=(cj5*r20);
IkReal x8107=((1.0)*x8103);
IkReal x8108=((1.0)*x8104);
evalcond[0]=((-1.0)*r02*x8103);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8108)));
evalcond[2]=((((-1.0)*x8106*x8107))+((x8103*x8105)));
evalcond[3]=((((-1.0)*cj5*r10*x8107))+((r11*sj5*x8103)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8105*x8108))+((cj1*sj2))+((x8104*x8106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8111=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8111.valid){
continue;
}
IkReal x8109=x8111.value;
IkReal x8110=((1.0)*x8109);
cj4array[0]=((((-1.0)*cj2*sj1*x8110))+(((-1.0)*cj1*sj2*x8110)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8112=IKsin(j4);
IkReal x8113=IKcos(j4);
IkReal x8114=(r11*sj5);
IkReal x8115=((1.0)*sj0);
IkReal x8116=((1.0)*x8113);
IkReal x8117=((1.0)*cj5*x8112);
evalcond[0]=((-1.0)*r02*x8112);
evalcond[1]=((((-1.0)*x8115))+(((-1.0)*r02*x8116)));
evalcond[2]=((((-1.0)*r20*x8117))+((r21*sj5*x8112)));
evalcond[3]=(((x8112*x8114))+(((-1.0)*r10*x8117)));
evalcond[4]=((((-1.0)*x8114*x8116))+((cj5*r10*x8113))+(((-1.0)*cj1*cj2*x8115))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(r02,-1);
if(!x8118.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8118.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(cj5*x8120);
IkReal x8122=(sj5*x8119);
IkReal x8123=((1.0)*sj5*x8120);
IkReal x8124=((1.0)*cj5*x8119);
evalcond[0]=((-1.0)*r02*x8119);
evalcond[1]=((((-1.0)*r20*x8124))+((r21*x8122)));
evalcond[2]=(((r11*x8122))+(((-1.0)*r10*x8124)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8123))+((cj1*sj2))+((r20*x8121)));
evalcond[4]=((((-1.0)*r11*x8123))+(((-1.0)*cj1*cj2*sj0))+((r10*x8121))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8125=((1.0)*sj0);
IkReal x8126=((1.0)*cj0);
CheckValue<IkReal> x8127=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8127.valid){
continue;
}
CheckValue<IkReal> x8128 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8125))+(((-1.0)*r02*x8126)))),IkReal(((((-1.0)*r11*sj5*x8125))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8127.value)))+(x8128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8129=IKsin(j4);
IkReal x8130=IKcos(j4);
IkReal x8131=(cj5*r10);
IkReal x8132=(sj1*sj2);
IkReal x8133=(r01*sj5);
IkReal x8134=(cj5*r00);
IkReal x8135=(cj5*r20);
IkReal x8136=((1.0)*x8130);
IkReal x8137=((1.0)*cj1*cj2);
IkReal x8138=((1.0)*x8129);
IkReal x8139=(sj5*x8129);
evalcond[0]=((((-1.0)*r22*x8136))+((r21*x8139))+(((-1.0)*x8135*x8138)));
evalcond[1]=(((r11*x8139))+cj0+(((-1.0)*x8131*x8138))+(((-1.0)*r12*x8136)));
evalcond[2]=((((-1.0)*r02*x8136))+(((-1.0)*x8134*x8138))+(((-1.0)*sj0))+((x8129*x8133)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8138))+(((-1.0)*r21*sj5*x8136))+((cj1*sj2))+((x8130*x8135)));
evalcond[4]=((((-1.0)*r02*x8138))+((x8130*x8134))+((cj0*x8132))+(((-1.0)*x8133*x8136))+(((-1.0)*cj0*x8137)));
evalcond[5]=(((x8130*x8131))+(((-1.0)*r12*x8138))+(((-1.0)*r11*sj5*x8136))+((sj0*x8132))+(((-1.0)*sj0*x8137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8140=((1.0)*cj5);
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8140))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
CheckValue<IkReal> x8142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8140)))),-1);
if(!x8142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8141.value)+(((1.5707963267949)*(x8142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8143=IKsin(j4);
IkReal x8144=IKcos(j4);
IkReal x8145=(cj5*r10);
IkReal x8146=(sj1*sj2);
IkReal x8147=(r01*sj5);
IkReal x8148=(cj5*r00);
IkReal x8149=(cj5*r20);
IkReal x8150=((1.0)*x8144);
IkReal x8151=((1.0)*cj1*cj2);
IkReal x8152=((1.0)*x8143);
IkReal x8153=(sj5*x8143);
evalcond[0]=((((-1.0)*r22*x8150))+((r21*x8153))+(((-1.0)*x8149*x8152)));
evalcond[1]=(cj0+(((-1.0)*x8145*x8152))+((r11*x8153))+(((-1.0)*r12*x8150)));
evalcond[2]=((((-1.0)*sj0))+((x8143*x8147))+(((-1.0)*x8148*x8152))+(((-1.0)*r02*x8150)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8144*x8149))+(((-1.0)*r21*sj5*x8150))+(((-1.0)*r22*x8152)));
evalcond[4]=((((-1.0)*x8147*x8150))+(((-1.0)*cj0*x8151))+((cj0*x8146))+(((-1.0)*r02*x8152))+((x8144*x8148)));
evalcond[5]=(((sj0*x8146))+(((-1.0)*sj0*x8151))+(((-1.0)*r11*sj5*x8150))+((x8144*x8145))+(((-1.0)*r12*x8152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8154=((1.0)*cj5);
CheckValue<IkReal> x8155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8154)))),-1);
if(!x8155.valid){
continue;
}
CheckValue<IkReal> x8156 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8154))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8155.value)))+(x8156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8157=IKsin(j4);
IkReal x8158=IKcos(j4);
IkReal x8159=(cj5*r10);
IkReal x8160=(sj1*sj2);
IkReal x8161=(r01*sj5);
IkReal x8162=(cj5*r00);
IkReal x8163=(cj5*r20);
IkReal x8164=((1.0)*x8158);
IkReal x8165=((1.0)*cj1*cj2);
IkReal x8166=((1.0)*x8157);
IkReal x8167=(sj5*x8157);
evalcond[0]=(((r21*x8167))+(((-1.0)*x8163*x8166))+(((-1.0)*r22*x8164)));
evalcond[1]=(((r11*x8167))+cj0+(((-1.0)*x8159*x8166))+(((-1.0)*r12*x8164)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8164))+(((-1.0)*x8162*x8166))+((x8157*x8161)));
evalcond[3]=(((cj2*sj1))+((x8158*x8163))+(((-1.0)*r21*sj5*x8164))+((cj1*sj2))+(((-1.0)*r22*x8166)));
evalcond[4]=(((cj0*x8160))+((x8158*x8162))+(((-1.0)*r02*x8166))+(((-1.0)*x8161*x8164))+(((-1.0)*cj0*x8165)));
evalcond[5]=(((x8158*x8159))+(((-1.0)*r12*x8166))+((sj0*x8160))+(((-1.0)*r11*sj5*x8164))+(((-1.0)*sj0*x8165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8168=cj5*cj5;
IkReal x8169=r21*r21;
IkReal x8170=(cj2*sj1);
IkReal x8171=(cj1*sj2);
IkReal x8172=(r21*sj5);
IkReal x8173=((1.0)*cj5*r20);
CheckValue<IkReal> x8174=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8168*x8169))+(r22*r22)+((x8168*(r20*r20)))+(((-2.0)*cj5*r20*x8172))+x8169)),-1);
if(!x8174.valid){
continue;
}
CheckValue<IkReal> x8175 = IKatan2WithCheck(IkReal((((r22*x8170))+((r22*x8171)))),IkReal(((((-1.0)*x8171*x8173))+(((-1.0)*x8170*x8173))+((x8170*x8172))+((x8171*x8172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8174.value)))+(x8175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8176=IKsin(j4);
IkReal x8177=IKcos(j4);
IkReal x8178=(r21*sj5);
IkReal x8179=(cj5*r20);
IkReal x8180=((1.0)*x8177);
IkReal x8181=((1.0)*x8176);
evalcond[0]=((((-1.0)*x8179*x8181))+(((-1.0)*r22*x8180))+((x8176*x8178)));
evalcond[1]=(((x8177*x8179))+((cj2*sj1))+(((-1.0)*r22*x8181))+((cj1*sj2))+(((-1.0)*x8178*x8180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8182=(cj5*sj4);
IkReal x8183=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8183))+(((-1.0)*r00*x8182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8182))+(((-1.0)*r11*x8183))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8183))+(((-1.0)*r00*x8182))))+IKsqr((((r10*x8182))+(((-1.0)*r11*x8183))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8183))+(((-1.0)*r00*x8182))), (((r10*x8182))+(((-1.0)*r11*x8183))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8184=IKcos(j0);
IkReal x8185=IKsin(j0);
IkReal x8186=(cj4*cj5);
IkReal x8187=(cj5*r01);
IkReal x8188=(r11*sj5);
IkReal x8189=((1.0)*sj5);
IkReal x8190=((1.0)*cj5);
IkReal x8191=((0.1157)*sj5);
IkReal x8192=((1.0)*sj4);
IkReal x8193=((1.0)*cj2);
IkReal x8194=((0.5723)*sj2);
IkReal x8195=((1.0)*cj4);
IkReal x8196=((0.5723)*cj2);
IkReal x8197=((1.0)*cj1*sj2);
IkReal x8198=(sj1*x8184);
IkReal x8199=(cj1*x8184);
IkReal x8200=(cj1*x8185);
IkReal x8201=(sj1*x8185);
evalcond[0]=((((-1.0)*r12*x8195))+((sj4*x8188))+x8184+(((-1.0)*r10*sj4*x8190)));
evalcond[1]=((((-1.0)*r02*x8195))+(((-1.0)*x8185))+(((-1.0)*r00*sj4*x8190))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*r00*x8189))+(((-1.0)*x8187))+(((-1.0)*x8193*x8198))+(((-1.0)*x8184*x8197)));
evalcond[3]=((((-1.0)*x8193*x8201))+(((-1.0)*r10*x8189))+(((-1.0)*x8185*x8197))+(((-1.0)*r11*x8190)));
evalcond[4]=((((-1.0)*r02*x8192))+((r00*x8186))+((sj2*x8198))+(((-1.0)*x8193*x8199))+(((-1.0)*cj4*r01*x8189)));
evalcond[5]=(((r10*x8186))+((sj2*x8201))+(((-1.0)*x8188*x8195))+(((-1.0)*x8193*x8200))+(((-1.0)*r12*x8192)));
evalcond[6]=((((0.612)*x8199))+(((-0.163941)*x8185))+(((-1.0)*r00*x8191))+(((-0.1157)*x8187))+(((-1.0)*x8194*x8198))+(((-1.0)*px))+((x8196*x8199)));
evalcond[7]=((((0.163941)*x8184))+(((-1.0)*x8194*x8201))+(((-1.0)*r10*x8191))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+(((0.612)*x8200))+((x8196*x8200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
CheckValue<IkReal> x8203=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8203.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8202.value)+(((1.5707963267949)*(x8203.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8204=IKcos(j0);
IkReal x8205=IKsin(j0);
IkReal x8206=(cj5*r01);
IkReal x8207=((1.0)*sj5);
IkReal x8208=(cj5*r11);
IkReal x8209=((0.1157)*sj5);
IkReal x8210=((1.0)*sj1);
IkReal x8211=((1.0)*cj1*sj2);
IkReal x8212=((0.5723)*sj1*sj2);
IkReal x8213=(cj2*x8204);
IkReal x8214=(cj1*x8205);
evalcond[0]=((((-1.0)*r00*x8207))+(((-1.0)*x8204*x8211))+(((-1.0)*x8210*x8213))+(((-1.0)*x8206)));
evalcond[1]=((((-1.0)*r10*x8207))+(((-1.0)*x8205*x8211))+(((-1.0)*cj2*x8205*x8210))+(((-1.0)*x8208)));
evalcond[2]=((((-1.0)*r00*x8209))+(((-1.0)*x8204*x8212))+(((0.5723)*cj1*x8213))+(((-0.163941)*x8205))+(((-1.0)*px))+(((0.612)*cj1*x8204))+(((-0.1157)*x8206)));
evalcond[3]=((((-1.0)*r10*x8209))+(((0.163941)*x8204))+(((-1.0)*x8205*x8212))+(((0.5723)*cj2*x8214))+(((-1.0)*py))+(((0.612)*x8214))+(((-0.1157)*x8208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8215=((1.0)*cj5);
IkReal x8216=((((-1.0)*r01*x8215))+(((-1.0)*r00*sj5)));
j4eval[0]=x8216;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8215)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8216);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8217=((1.0)*cj5);
IkReal x8218=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8217)));
j4eval[0]=x8218;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8217))))));
j4eval[2]=IKsign(x8218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8219=((1.0)*sj0);
IkReal x8220=((1.0)*cj0);
IkReal x8221=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8221;
j4eval[1]=((IKabs(((((-1.0)*r02*x8220))+(((-1.0)*r12*x8219)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8220))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8219))))));
j4eval[2]=IKsign(x8221);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8222=((-1.0)*r20);
IkReal x8224 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8224)==0){
continue;
}
IkReal x8223=pow(x8224,-0.5);
CheckValue<IkReal> x8225 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8222),IKFAST_ATAN2_MAGTHRESH);
if(!x8225.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8225.value));
IkReal gconst133=(r21*x8223);
IkReal gconst134=(x8222*x8223);
CheckValue<IkReal> x8226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8226.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8226.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8227=((-1.0)*r20);
IkReal x8228=x8223;
CheckValue<IkReal> x8230 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8227),IKFAST_ATAN2_MAGTHRESH);
if(!x8230.valid){
continue;
}
IkReal x8229=((-1.0)*(x8230.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8229;
IkReal gconst132=x8229;
IkReal gconst133=(r21*x8228);
IkReal gconst134=(x8227*x8228);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8231=((-1.0)*r20);
IkReal x8232=x8223;
CheckValue<IkReal> x8234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8231),IKFAST_ATAN2_MAGTHRESH);
if(!x8234.valid){
continue;
}
IkReal x8233=((-1.0)*(x8234.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8233;
IkReal gconst132=x8233;
IkReal gconst133=(r21*x8232);
IkReal gconst134=(x8231*x8232);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8235=((-1.0)*r20);
IkReal x8236=x8223;
CheckValue<IkReal> x8238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8235),IKFAST_ATAN2_MAGTHRESH);
if(!x8238.valid){
continue;
}
IkReal x8237=((-1.0)*(x8238.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8237;
IkReal gconst132=x8237;
IkReal gconst133=(r21*x8236);
IkReal gconst134=(x8235*x8236);
IkReal x8239=r22*r22;
CheckValue<IkReal> x8242=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8239))),-1);
if(!x8242.valid){
continue;
}
IkReal x8240=x8242.value;
IkReal x8241=((((2.0)*x8240*(r20*r20)*(r21*r21)))+((x8240*(r21*r21*r21*r21)))+((x8240*(r20*r20*r20*r20)))+x8239);
j4eval[0]=x8241;
j4eval[1]=IKsign(x8241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8243=(gconst133*r21);
IkReal x8244=(cj1*sj2);
IkReal x8245=(gconst134*r20);
IkReal x8246=(cj2*sj1);
CheckValue<IkReal> x8247=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8243*x8243)+(((-2.0)*x8243*x8245))+(x8245*x8245))),-1);
if(!x8247.valid){
continue;
}
CheckValue<IkReal> x8248 = IKatan2WithCheck(IkReal((((r22*x8246))+((r22*x8244)))),IkReal((((x8243*x8246))+((x8243*x8244))+(((-1.0)*x8244*x8245))+(((-1.0)*x8245*x8246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8247.value)))+(x8248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8249=IKsin(j4);
IkReal x8250=IKcos(j4);
IkReal x8251=(sj1*sj2);
IkReal x8252=(gconst133*r11);
IkReal x8253=(gconst133*r21);
IkReal x8254=(gconst133*r01);
IkReal x8255=((1.0)*x8250);
IkReal x8256=(gconst134*x8250);
IkReal x8257=((1.0)*x8249);
IkReal x8258=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8255))+(((-1.0)*gconst134*r20*x8257))+((x8249*x8253)));
evalcond[1]=(cj0+(((-1.0)*r12*x8255))+(((-1.0)*gconst134*r10*x8257))+((x8249*x8252)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8257))+(((-1.0)*r02*x8255))+((x8249*x8254)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8257))+((r20*x8256))+(((-1.0)*x8253*x8255)));
evalcond[4]=(((r00*x8256))+(((-1.0)*cj0*x8258))+((cj0*x8251))+(((-1.0)*x8254*x8255))+(((-1.0)*r02*x8257)));
evalcond[5]=(((r10*x8256))+(((-1.0)*r12*x8257))+(((-1.0)*sj0*x8258))+(((-1.0)*x8252*x8255))+((sj0*x8251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8259=((1.0)*gconst134);
CheckValue<IkReal> x8260=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8259)))),-1);
if(!x8260.valid){
continue;
}
CheckValue<IkReal> x8261 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8259))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8260.value)))+(x8261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8262=IKsin(j4);
IkReal x8263=IKcos(j4);
IkReal x8264=(sj1*sj2);
IkReal x8265=(gconst133*r11);
IkReal x8266=(gconst133*r21);
IkReal x8267=(gconst133*r01);
IkReal x8268=((1.0)*x8263);
IkReal x8269=(gconst134*x8263);
IkReal x8270=((1.0)*x8262);
IkReal x8271=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8268))+(((-1.0)*gconst134*r20*x8270))+((x8262*x8266)));
evalcond[1]=((((-1.0)*r12*x8268))+(((-1.0)*gconst134*r10*x8270))+cj0+((x8262*x8265)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8270))+(((-1.0)*r02*x8268))+((x8262*x8267)));
evalcond[3]=(((cj2*sj1))+((r20*x8269))+((cj1*sj2))+(((-1.0)*r22*x8270))+(((-1.0)*x8266*x8268)));
evalcond[4]=((((-1.0)*x8267*x8268))+((cj0*x8264))+(((-1.0)*cj0*x8271))+(((-1.0)*r02*x8270))+((r00*x8269)));
evalcond[5]=((((-1.0)*x8265*x8268))+(((-1.0)*sj0*x8271))+((sj0*x8264))+(((-1.0)*r12*x8270))+((r10*x8269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8272=((1.0)*gconst134);
CheckValue<IkReal> x8273=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8272)))),-1);
if(!x8273.valid){
continue;
}
CheckValue<IkReal> x8274 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8272))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8273.value)))+(x8274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8275=IKsin(j4);
IkReal x8276=IKcos(j4);
IkReal x8277=(sj1*sj2);
IkReal x8278=(gconst133*r11);
IkReal x8279=(gconst133*r21);
IkReal x8280=(gconst133*r01);
IkReal x8281=((1.0)*x8276);
IkReal x8282=(gconst134*x8276);
IkReal x8283=((1.0)*x8275);
IkReal x8284=((1.0)*cj1*cj2);
evalcond[0]=(((x8275*x8279))+(((-1.0)*gconst134*r20*x8283))+(((-1.0)*r22*x8281)));
evalcond[1]=(((x8275*x8278))+(((-1.0)*r12*x8281))+cj0+(((-1.0)*gconst134*r10*x8283)));
evalcond[2]=((((-1.0)*r02*x8281))+(((-1.0)*sj0))+((x8275*x8280))+(((-1.0)*gconst134*r00*x8283)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8279*x8281))+((r20*x8282))+(((-1.0)*r22*x8283)));
evalcond[4]=((((-1.0)*r02*x8283))+((r00*x8282))+(((-1.0)*x8280*x8281))+((cj0*x8277))+(((-1.0)*cj0*x8284)));
evalcond[5]=((((-1.0)*r12*x8283))+((r10*x8282))+(((-1.0)*x8278*x8281))+(((-1.0)*sj0*x8284))+((sj0*x8277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8285=((-1.0)*r21);
IkReal x8287 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8287)==0){
continue;
}
IkReal x8286=pow(x8287,-0.5);
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal(x8285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8288.value))));
IkReal gconst136=(x8285*x8286);
IkReal gconst137=((1.0)*r20*x8286);
CheckValue<IkReal> x8289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8290=((-1.0)*r21);
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(x8290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
IkReal x8291=((1.0)*(x8293.value));
IkReal x8292=x8286;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8291)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8291)));
IkReal gconst136=(x8290*x8292);
IkReal gconst137=((1.0)*r20*x8292);
IkReal x8294=r22*r22;
IkReal x8295=((1.0)*x8294);
CheckValue<IkReal> x8299=IKPowWithIntegerCheck(((-1.0)+x8294),-1);
if(!x8299.valid){
continue;
}
IkReal x8296=x8299.value;
if((((1.0)+(((-1.0)*x8295)))) < -0.00001)
continue;
IkReal x8297=IKsqrt(((1.0)+(((-1.0)*x8295))));
IkReal x8298=(cj0*x8296*x8297);
j4eval[0]=((IKabs(((((-1.0)*x8295*x8298))+x8298)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8300=((-1.0)*r21);
CheckValue<IkReal> x8303 = IKatan2WithCheck(IkReal(x8300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8303.valid){
continue;
}
IkReal x8301=((1.0)*(x8303.value));
IkReal x8302=x8286;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8301)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8301)));
IkReal gconst136=(x8300*x8302);
IkReal gconst137=((1.0)*r20*x8302);
IkReal x8304=r22*r22;
IkReal x8305=((1.0)*x8304);
CheckValue<IkReal> x8309=IKPowWithIntegerCheck(((-1.0)+x8304),-1);
if(!x8309.valid){
continue;
}
IkReal x8306=x8309.value;
if((((1.0)+(((-1.0)*x8305)))) < -0.00001)
continue;
IkReal x8307=IKsqrt(((1.0)+(((-1.0)*x8305))));
IkReal x8308=(sj0*x8306*x8307);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8308+(((-1.0)*x8305*x8308))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8310=((-1.0)*r21);
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal(x8310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
IkReal x8311=((1.0)*(x8313.value));
IkReal x8312=x8286;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8311)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8311)));
IkReal gconst136=(x8310*x8312);
IkReal gconst137=((1.0)*r20*x8312);
IkReal x8314=r22*r22;
IkReal x8315=(r12*sj0);
IkReal x8316=(cj0*r02);
CheckValue<IkReal> x8320=IKPowWithIntegerCheck(((-1.0)+x8314),-1);
if(!x8320.valid){
continue;
}
IkReal x8317=x8320.value;
if((((1.0)+(((-1.0)*x8314)))) < -0.00001)
continue;
IkReal x8318=IKsqrt(((1.0)+(((-1.0)*x8314))));
IkReal x8319=(r22*x8317*x8318);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8316))+(((-1.0)*x8315)))))+(IKabs((((x8315*x8319))+((x8316*x8319))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8321=((1.0)*sj0);
IkReal x8322=((1.0)*cj0);
CheckValue<IkReal> x8323=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8323.valid){
continue;
}
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8321))+(((-1.0)*r02*x8322)))),IkReal(((((-1.0)*gconst136*r01*x8322))+(((-1.0)*gconst136*r11*x8321))+((gconst137*r10*sj0))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8323.value)))+(x8324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8325=IKsin(j4);
IkReal x8326=IKcos(j4);
IkReal x8327=(gconst136*r01);
IkReal x8328=(gconst137*r10);
IkReal x8329=(sj1*sj2);
IkReal x8330=(gconst137*r20);
IkReal x8331=(gconst136*r11);
IkReal x8332=(gconst136*r21);
IkReal x8333=(gconst137*r00);
IkReal x8334=((1.0)*x8326);
IkReal x8335=((1.0)*cj1*cj2);
IkReal x8336=((1.0)*x8325);
evalcond[0]=(((x8325*x8332))+(((-1.0)*r22*x8334))+(((-1.0)*x8330*x8336)));
evalcond[1]=(((x8325*x8331))+cj0+(((-1.0)*r12*x8334))+(((-1.0)*x8328*x8336)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8334))+(((-1.0)*x8333*x8336))+((x8325*x8327)));
evalcond[3]=((((-1.0)*x8332*x8334))+((cj2*sj1))+(((-1.0)*r22*x8336))+((cj1*sj2))+((x8326*x8330)));
evalcond[4]=((((-1.0)*x8327*x8334))+((cj0*x8329))+(((-1.0)*r02*x8336))+((x8326*x8333))+(((-1.0)*cj0*x8335)));
evalcond[5]=((((-1.0)*r12*x8336))+((x8326*x8328))+((sj0*x8329))+(((-1.0)*sj0*x8335))+(((-1.0)*x8331*x8334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8337=((1.0)*gconst137);
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8337))+(((-1.0)*gconst136*r10)))),-1);
if(!x8338.valid){
continue;
}
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8338.value)))+(x8339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8340=IKsin(j4);
IkReal x8341=IKcos(j4);
IkReal x8342=(gconst136*r01);
IkReal x8343=(gconst137*r10);
IkReal x8344=(sj1*sj2);
IkReal x8345=(gconst137*r20);
IkReal x8346=(gconst136*r11);
IkReal x8347=(gconst136*r21);
IkReal x8348=(gconst137*r00);
IkReal x8349=((1.0)*x8341);
IkReal x8350=((1.0)*cj1*cj2);
IkReal x8351=((1.0)*x8340);
evalcond[0]=((((-1.0)*x8345*x8351))+((x8340*x8347))+(((-1.0)*r22*x8349)));
evalcond[1]=(cj0+(((-1.0)*x8343*x8351))+((x8340*x8346))+(((-1.0)*r12*x8349)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8349))+((x8340*x8342))+(((-1.0)*x8348*x8351)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8351))+((cj1*sj2))+((x8341*x8345))+(((-1.0)*x8347*x8349)));
evalcond[4]=((((-1.0)*r02*x8351))+(((-1.0)*cj0*x8350))+(((-1.0)*x8342*x8349))+((cj0*x8344))+((x8341*x8348)));
evalcond[5]=(((sj0*x8344))+((x8341*x8343))+(((-1.0)*r12*x8351))+(((-1.0)*sj0*x8350))+(((-1.0)*x8346*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8352=((1.0)*gconst137);
CheckValue<IkReal> x8353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8352))+(((-1.0)*gconst136*r00)))),-1);
if(!x8353.valid){
continue;
}
CheckValue<IkReal> x8354 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8352))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8353.value)))+(x8354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8355=IKsin(j4);
IkReal x8356=IKcos(j4);
IkReal x8357=(gconst136*r01);
IkReal x8358=(gconst137*r10);
IkReal x8359=(sj1*sj2);
IkReal x8360=(gconst137*r20);
IkReal x8361=(gconst136*r11);
IkReal x8362=(gconst136*r21);
IkReal x8363=(gconst137*r00);
IkReal x8364=((1.0)*x8356);
IkReal x8365=((1.0)*cj1*cj2);
IkReal x8366=((1.0)*x8355);
evalcond[0]=(((x8355*x8362))+(((-1.0)*r22*x8364))+(((-1.0)*x8360*x8366)));
evalcond[1]=(((x8355*x8361))+cj0+(((-1.0)*r12*x8364))+(((-1.0)*x8358*x8366)));
evalcond[2]=((((-1.0)*sj0))+((x8355*x8357))+(((-1.0)*r02*x8364))+(((-1.0)*x8363*x8366)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8362*x8364))+((x8356*x8360))+((cj1*sj2))+(((-1.0)*r22*x8366)));
evalcond[4]=(((x8356*x8363))+(((-1.0)*x8357*x8364))+((cj0*x8359))+(((-1.0)*r02*x8366))+(((-1.0)*cj0*x8365)));
evalcond[5]=((((-1.0)*x8361*x8364))+((x8356*x8358))+(((-1.0)*r12*x8366))+((sj0*x8359))+(((-1.0)*sj0*x8365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8367=((-1.0)*r10);
IkReal x8369 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8369)==0){
continue;
}
IkReal x8368=pow(x8369,-0.5);
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8367),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8370.value));
IkReal gconst139=(r11*x8368);
IkReal gconst140=(x8367*x8368);
CheckValue<IkReal> x8371 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8371.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8371.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8372=((-1.0)*r10);
IkReal x8373=x8368;
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8372),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
IkReal x8374=((-1.0)*(x8375.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8374;
IkReal gconst138=x8374;
IkReal gconst139=(r11*x8373);
IkReal gconst140=(x8372*x8373);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8376=((1.0)*sj0);
IkReal x8377=((1.0)*gconst139);
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8376))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8376))+(((-1.0)*cj0*r01*x8377))+((gconst140*r10*sj0))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
CheckValue<IkReal> x8379=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8377))+(((-1.0)*gconst140*r21)))),-1);
if(!x8379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8378.value)+(((1.5707963267949)*(x8379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8380=IKsin(j4);
IkReal x8381=IKcos(j4);
IkReal x8382=(gconst140*r00);
IkReal x8383=(sj1*sj2);
IkReal x8384=(gconst139*r11);
IkReal x8385=(gconst139*r01);
IkReal x8386=(gconst139*r21);
IkReal x8387=((1.0)*x8381);
IkReal x8388=((1.0)*x8380);
IkReal x8389=((1.0)*cj1*cj2);
IkReal x8390=(gconst140*x8381);
evalcond[0]=((((-1.0)*gconst140*r20*x8388))+((x8380*x8386))+(((-1.0)*r22*x8387)));
evalcond[1]=((((-1.0)*gconst140*r10*x8388))+cj0+((x8380*x8384))+(((-1.0)*r12*x8387)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8387))+(((-1.0)*x8382*x8388))+((x8380*x8385)));
evalcond[3]=(((r20*x8390))+((cj2*sj1))+(((-1.0)*x8386*x8387))+((cj1*sj2))+(((-1.0)*r22*x8388)));
evalcond[4]=(((x8381*x8382))+(((-1.0)*r02*x8388))+(((-1.0)*cj0*x8389))+(((-1.0)*x8385*x8387))+((cj0*x8383)));
evalcond[5]=((((-1.0)*sj0*x8389))+((sj0*x8383))+(((-1.0)*x8384*x8387))+((r10*x8390))+(((-1.0)*r12*x8388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8391=((1.0)*gconst140);
CheckValue<IkReal> x8392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8391)))),-1);
if(!x8392.valid){
continue;
}
CheckValue<IkReal> x8393 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8392.value)))+(x8393.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8394=IKsin(j4);
IkReal x8395=IKcos(j4);
IkReal x8396=(gconst140*r00);
IkReal x8397=(sj1*sj2);
IkReal x8398=(gconst139*r11);
IkReal x8399=(gconst139*r01);
IkReal x8400=(gconst139*r21);
IkReal x8401=((1.0)*x8395);
IkReal x8402=((1.0)*x8394);
IkReal x8403=((1.0)*cj1*cj2);
IkReal x8404=(gconst140*x8395);
evalcond[0]=(((x8394*x8400))+(((-1.0)*r22*x8401))+(((-1.0)*gconst140*r20*x8402)));
evalcond[1]=(((x8394*x8398))+cj0+(((-1.0)*gconst140*r10*x8402))+(((-1.0)*r12*x8401)));
evalcond[2]=(((x8394*x8399))+(((-1.0)*sj0))+(((-1.0)*r02*x8401))+(((-1.0)*x8396*x8402)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8400*x8401))+(((-1.0)*r22*x8402))+((r20*x8404)));
evalcond[4]=((((-1.0)*cj0*x8403))+(((-1.0)*r02*x8402))+((x8395*x8396))+(((-1.0)*x8399*x8401))+((cj0*x8397)));
evalcond[5]=((((-1.0)*sj0*x8403))+(((-1.0)*x8398*x8401))+((sj0*x8397))+(((-1.0)*r12*x8402))+((r10*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8405=((-1.0)*r11);
IkReal x8407 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8407)==0){
continue;
}
IkReal x8406=pow(x8407,-0.5);
CheckValue<IkReal> x8408 = IKatan2WithCheck(IkReal(x8405),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8408.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8408.value))));
IkReal gconst142=(x8405*x8406);
IkReal gconst143=((1.0)*r10*x8406);
CheckValue<IkReal> x8409 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8409.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8409.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8410=((-1.0)*r11);
CheckValue<IkReal> x8413 = IKatan2WithCheck(IkReal(x8410),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8413.valid){
continue;
}
IkReal x8411=((1.0)*(x8413.value));
IkReal x8412=x8406;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8411)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8411)));
IkReal gconst142=(x8410*x8412);
IkReal gconst143=((1.0)*r10*x8412);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8414=((-1.0)*r11);
CheckValue<IkReal> x8417 = IKatan2WithCheck(IkReal(x8414),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8417.valid){
continue;
}
IkReal x8415=((1.0)*(x8417.value));
IkReal x8416=x8406;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8415)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8415)));
IkReal gconst142=(x8414*x8416);
IkReal gconst143=((1.0)*r10*x8416);
IkReal x8418=r12*r12;
IkReal x8419=((1.0)*sj0);
IkReal x8420=(cj0*r02);
IkReal x8421=x8406;
j4eval[0]=((IKabs((((sj0*x8418*x8421))+((r12*x8420*x8421))+(((-1.0)*x8419*x8421)))))+(IKabs(((((-1.0)*r12*x8419))+(((-1.0)*x8420))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8422=((-1.0)*r11);
CheckValue<IkReal> x8425 = IKatan2WithCheck(IkReal(x8422),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8425.valid){
continue;
}
IkReal x8423=((1.0)*(x8425.value));
IkReal x8424=x8406;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8423)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8423)));
IkReal gconst142=(x8422*x8424);
IkReal gconst143=((1.0)*r10*x8424);
IkReal x8426=r12*r12;
IkReal x8427=(cj1*r22*sj2);
IkReal x8428=(cj2*r22*sj1);
CheckValue<IkReal> x8432=IKPowWithIntegerCheck(((-1.0)+x8426),-1);
if(!x8432.valid){
continue;
}
IkReal x8429=x8432.value;
if((((1.0)+(((-1.0)*x8426)))) < -0.00001)
continue;
IkReal x8430=IKsqrt(((1.0)+(((-1.0)*x8426))));
IkReal x8431=((1.0)*r12*x8429*x8430);
j4eval[0]=((IKabs(((((-1.0)*x8427*x8431))+(((-1.0)*x8428*x8431)))))+(IKabs((x8427+x8428))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8433=(gconst142*r21);
IkReal x8434=(cj1*sj2);
IkReal x8435=(cj2*sj1);
IkReal x8436=(gconst143*r20);
CheckValue<IkReal> x8437=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8433*x8433)+(x8436*x8436)+(((-2.0)*x8433*x8436)))),-1);
if(!x8437.valid){
continue;
}
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal((((r22*x8435))+((r22*x8434)))),IkReal(((((-1.0)*x8434*x8436))+(((-1.0)*x8435*x8436))+((x8433*x8434))+((x8433*x8435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8437.value)))+(x8438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8439=IKsin(j4);
IkReal x8440=IKcos(j4);
IkReal x8441=(sj1*sj2);
IkReal x8442=(gconst143*r20);
IkReal x8443=((1.0)*x8440);
IkReal x8444=((1.0)*cj1*cj2);
IkReal x8445=((1.0)*x8439);
IkReal x8446=(gconst142*x8439);
IkReal x8447=(gconst143*x8440);
evalcond[0]=(((r21*x8446))+(((-1.0)*x8442*x8445))+(((-1.0)*r22*x8443)));
evalcond[1]=(((r11*x8446))+cj0+(((-1.0)*r12*x8443))+(((-1.0)*gconst143*r10*x8445)));
evalcond[2]=((((-1.0)*gconst143*r00*x8445))+(((-1.0)*sj0))+(((-1.0)*r02*x8443))+((r01*x8446)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8445))+(((-1.0)*gconst142*r21*x8443))+((x8440*x8442)));
evalcond[4]=((((-1.0)*gconst142*r01*x8443))+((r00*x8447))+(((-1.0)*cj0*x8444))+(((-1.0)*r02*x8445))+((cj0*x8441)));
evalcond[5]=((((-1.0)*gconst142*r11*x8443))+(((-1.0)*r12*x8445))+((sj0*x8441))+(((-1.0)*sj0*x8444))+((r10*x8447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8448=((1.0)*sj0);
IkReal x8449=((1.0)*gconst142);
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8449))+(((-1.0)*gconst143*r21)))),-1);
if(!x8450.valid){
continue;
}
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8448))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x8448))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8449))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8450.value)))+(x8451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8452=IKsin(j4);
IkReal x8453=IKcos(j4);
IkReal x8454=(sj1*sj2);
IkReal x8455=(gconst143*r20);
IkReal x8456=((1.0)*x8453);
IkReal x8457=((1.0)*cj1*cj2);
IkReal x8458=((1.0)*x8452);
IkReal x8459=(gconst142*x8452);
IkReal x8460=(gconst143*x8453);
evalcond[0]=(((r21*x8459))+(((-1.0)*r22*x8456))+(((-1.0)*x8455*x8458)));
evalcond[1]=(((r11*x8459))+cj0+(((-1.0)*gconst143*r10*x8458))+(((-1.0)*r12*x8456)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8458))+(((-1.0)*r02*x8456))+((r01*x8459)));
evalcond[3]=(((cj2*sj1))+((x8453*x8455))+((cj1*sj2))+(((-1.0)*r22*x8458))+(((-1.0)*gconst142*r21*x8456)));
evalcond[4]=(((r00*x8460))+(((-1.0)*gconst142*r01*x8456))+(((-1.0)*cj0*x8457))+(((-1.0)*r02*x8458))+((cj0*x8454)));
evalcond[5]=((((-1.0)*gconst142*r11*x8456))+(((-1.0)*sj0*x8457))+(((-1.0)*r12*x8458))+((sj0*x8454))+((r10*x8460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8461=((1.0)*gconst143);
CheckValue<IkReal> x8462=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8461)))),-1);
if(!x8462.valid){
continue;
}
CheckValue<IkReal> x8463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8461))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8462.value)))+(x8463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8464=IKsin(j4);
IkReal x8465=IKcos(j4);
IkReal x8466=(sj1*sj2);
IkReal x8467=(gconst143*r20);
IkReal x8468=((1.0)*x8465);
IkReal x8469=((1.0)*cj1*cj2);
IkReal x8470=((1.0)*x8464);
IkReal x8471=(gconst142*x8464);
IkReal x8472=(gconst143*x8465);
evalcond[0]=((((-1.0)*x8467*x8470))+((r21*x8471))+(((-1.0)*r22*x8468)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8470))+((r11*x8471))+(((-1.0)*r12*x8468)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8471))+(((-1.0)*r02*x8468))+(((-1.0)*gconst143*r00*x8470)));
evalcond[3]=(((x8465*x8467))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8470))+(((-1.0)*gconst142*r21*x8468)));
evalcond[4]=(((r00*x8472))+(((-1.0)*r02*x8470))+(((-1.0)*gconst142*r01*x8468))+((cj0*x8466))+(((-1.0)*cj0*x8469)));
evalcond[5]=((((-1.0)*sj0*x8469))+((r10*x8472))+(((-1.0)*r12*x8470))+(((-1.0)*gconst142*r11*x8468))+((sj0*x8466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8473=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8473;
j4eval[1]=IKsign(x8473);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8474=((1.0)*cj5);
IkReal x8475=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8474)));
j4eval[0]=x8475;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8474))))));
j4eval[2]=IKsign(x8475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8476=cj5*cj5;
IkReal x8477=r11*r11;
IkReal x8478=(r11*sj5);
IkReal x8479=(cj5*r10);
IkReal x8480=(((x8476*(r10*r10)))+(r12*r12)+x8477+(((-2.0)*x8478*x8479))+(((-1.0)*x8476*x8477)));
j4eval[0]=x8480;
j4eval[1]=IKsign(x8480);
j4eval[2]=((IKabs((x8479+(((-1.0)*x8478)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8481=cj5*cj5;
IkReal x8482=r11*r11;
IkReal x8483=(cj5*r10);
IkReal x8484=(r11*sj5);
CheckValue<IkReal> x8485=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8482+(((-1.0)*x8481*x8482))+((x8481*(r10*r10)))+(((-2.0)*x8483*x8484)))),-1);
if(!x8485.valid){
continue;
}
CheckValue<IkReal> x8486 = IKatan2WithCheck(IkReal((x8483+(((-1.0)*x8484)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8485.value)))+(x8486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8487=IKsin(j4);
IkReal x8488=IKcos(j4);
IkReal x8489=(cj5*r10);
IkReal x8490=(r01*sj5);
IkReal x8491=(cj5*r00);
IkReal x8492=(cj5*r20);
IkReal x8493=((1.0)*x8488);
IkReal x8494=((1.0)*x8487);
IkReal x8495=(sj5*x8487);
evalcond[0]=((((-1.0)*r22*x8493))+(((-1.0)*x8492*x8494))+((r21*x8495)));
evalcond[1]=((((-1.0)*r02*x8493))+((x8487*x8490))+(((-1.0)*x8491*x8494)));
evalcond[2]=(((x8488*x8489))+(((-1.0)*r11*sj5*x8493))+(((-1.0)*r12*x8494)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8493))+((r11*x8495))+(((-1.0)*x8489*x8494)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8488*x8492))+(((-1.0)*r21*sj5*x8493))+(((-1.0)*r22*x8494)));
evalcond[5]=((((-1.0)*r02*x8494))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8488*x8491))+(((-1.0)*x8490*x8493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8496=((1.0)*cj5);
CheckValue<IkReal> x8497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8496)))),-1);
if(!x8497.valid){
continue;
}
CheckValue<IkReal> x8498 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8496))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8497.value)))+(x8498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8499=IKsin(j4);
IkReal x8500=IKcos(j4);
IkReal x8501=(cj5*r10);
IkReal x8502=(r01*sj5);
IkReal x8503=(cj5*r00);
IkReal x8504=(cj5*r20);
IkReal x8505=((1.0)*x8500);
IkReal x8506=((1.0)*x8499);
IkReal x8507=(sj5*x8499);
evalcond[0]=(((r21*x8507))+(((-1.0)*r22*x8505))+(((-1.0)*x8504*x8506)));
evalcond[1]=((((-1.0)*x8503*x8506))+((x8499*x8502))+(((-1.0)*r02*x8505)));
evalcond[2]=(((x8500*x8501))+(((-1.0)*r12*x8506))+(((-1.0)*r11*sj5*x8505)));
evalcond[3]=((1.0)+((r11*x8507))+(((-1.0)*x8501*x8506))+(((-1.0)*r12*x8505)));
evalcond[4]=(((cj2*sj1))+((x8500*x8504))+((cj1*sj2))+(((-1.0)*r22*x8506))+(((-1.0)*r21*sj5*x8505)));
evalcond[5]=(((x8500*x8503))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8506))+(((-1.0)*x8502*x8505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8508=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8508.valid){
continue;
}
CheckValue<IkReal> x8509 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8508.value)))+(x8509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8510=IKsin(j4);
IkReal x8511=IKcos(j4);
IkReal x8512=(cj5*r10);
IkReal x8513=(r01*sj5);
IkReal x8514=(cj5*r00);
IkReal x8515=(cj5*r20);
IkReal x8516=((1.0)*x8511);
IkReal x8517=((1.0)*x8510);
IkReal x8518=(sj5*x8510);
evalcond[0]=((((-1.0)*x8515*x8517))+((r21*x8518))+(((-1.0)*r22*x8516)));
evalcond[1]=((((-1.0)*x8514*x8517))+((x8510*x8513))+(((-1.0)*r02*x8516)));
evalcond[2]=((((-1.0)*r12*x8517))+((x8511*x8512))+(((-1.0)*r11*sj5*x8516)));
evalcond[3]=((1.0)+(((-1.0)*x8512*x8517))+((r11*x8518))+(((-1.0)*r12*x8516)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8517))+((x8511*x8515))+(((-1.0)*r21*sj5*x8516)));
evalcond[5]=((((-1.0)*x8513*x8516))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8517))+((x8511*x8514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8519=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8519;
j4eval[1]=IKsign(x8519);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8520=((1.0)*cj5);
IkReal x8521=((((-1.0)*r21*x8520))+(((-1.0)*r20*sj5)));
j4eval[0]=x8521;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8520))))));
j4eval[2]=IKsign(x8521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8522=cj5*cj5;
IkReal x8523=r11*r11;
IkReal x8524=(cj5*r10);
IkReal x8525=(r11*sj5);
IkReal x8526=(((x8522*x8523))+(((2.0)*x8524*x8525))+(((-1.0)*x8523))+(((-1.0)*(r12*r12)))+(((-1.0)*x8522*(r10*r10))));
j4eval[0]=x8526;
j4eval[1]=((IKabs((x8524+(((-1.0)*x8525)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8527=cj5*cj5;
IkReal x8528=r11*r11;
IkReal x8529=(cj5*r10);
IkReal x8530=(r11*sj5);
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8527*(r10*r10)))+(((2.0)*x8529*x8530))+(((-1.0)*x8528))+(((-1.0)*(r12*r12)))+((x8527*x8528)))),-1);
if(!x8531.valid){
continue;
}
CheckValue<IkReal> x8532 = IKatan2WithCheck(IkReal(((((-1.0)*x8530))+x8529)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8531.value)))+(x8532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8533=IKsin(j4);
IkReal x8534=IKcos(j4);
IkReal x8535=(cj5*r10);
IkReal x8536=(r01*sj5);
IkReal x8537=(cj5*r00);
IkReal x8538=(cj5*r20);
IkReal x8539=((1.0)*x8534);
IkReal x8540=((1.0)*x8533);
IkReal x8541=(sj5*x8533);
evalcond[0]=((((-1.0)*r22*x8539))+((r21*x8541))+(((-1.0)*x8538*x8540)));
evalcond[1]=((((-1.0)*r02*x8539))+(((-1.0)*x8537*x8540))+((x8533*x8536)));
evalcond[2]=(((x8534*x8535))+(((-1.0)*r12*x8540))+(((-1.0)*r11*sj5*x8539)));
evalcond[3]=((-1.0)+(((-1.0)*x8535*x8540))+(((-1.0)*r12*x8539))+((r11*x8541)));
evalcond[4]=(((cj2*sj1))+((x8534*x8538))+((cj1*sj2))+(((-1.0)*r22*x8540))+(((-1.0)*r21*sj5*x8539)));
evalcond[5]=((((-1.0)*r02*x8540))+(((-1.0)*x8536*x8539))+((x8534*x8537))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8542=((1.0)*cj5);
CheckValue<IkReal> x8543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8542))+(((-1.0)*r20*sj5)))),-1);
if(!x8543.valid){
continue;
}
CheckValue<IkReal> x8544 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8542))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8543.value)))+(x8544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8545=IKsin(j4);
IkReal x8546=IKcos(j4);
IkReal x8547=(cj5*r10);
IkReal x8548=(r01*sj5);
IkReal x8549=(cj5*r00);
IkReal x8550=(cj5*r20);
IkReal x8551=((1.0)*x8546);
IkReal x8552=((1.0)*x8545);
IkReal x8553=(sj5*x8545);
evalcond[0]=(((r21*x8553))+(((-1.0)*r22*x8551))+(((-1.0)*x8550*x8552)));
evalcond[1]=((((-1.0)*x8549*x8552))+((x8545*x8548))+(((-1.0)*r02*x8551)));
evalcond[2]=((((-1.0)*r12*x8552))+((x8546*x8547))+(((-1.0)*r11*sj5*x8551)));
evalcond[3]=((-1.0)+(((-1.0)*x8547*x8552))+(((-1.0)*r12*x8551))+((r11*x8553)));
evalcond[4]=(((cj2*sj1))+((x8546*x8550))+(((-1.0)*r22*x8552))+(((-1.0)*r21*sj5*x8551))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8548*x8551))+((x8546*x8549))+((cj1*cj2))+(((-1.0)*r02*x8552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8554 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8554.valid){
continue;
}
CheckValue<IkReal> x8555=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8554.value)+(((1.5707963267949)*(x8555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8556=IKsin(j4);
IkReal x8557=IKcos(j4);
IkReal x8558=(cj5*r10);
IkReal x8559=(r01*sj5);
IkReal x8560=(cj5*r00);
IkReal x8561=(cj5*r20);
IkReal x8562=((1.0)*x8557);
IkReal x8563=((1.0)*x8556);
IkReal x8564=(sj5*x8556);
evalcond[0]=((((-1.0)*r22*x8562))+(((-1.0)*x8561*x8563))+((r21*x8564)));
evalcond[1]=((((-1.0)*x8560*x8563))+(((-1.0)*r02*x8562))+((x8556*x8559)));
evalcond[2]=((((-1.0)*r12*x8563))+(((-1.0)*r11*sj5*x8562))+((x8557*x8558)));
evalcond[3]=((-1.0)+((r11*x8564))+(((-1.0)*r12*x8562))+(((-1.0)*x8558*x8563)));
evalcond[4]=(((x8557*x8561))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8563))+(((-1.0)*r21*sj5*x8562)));
evalcond[5]=(((x8557*x8560))+(((-1.0)*sj1*sj2))+(((-1.0)*x8559*x8562))+((cj1*cj2))+(((-1.0)*r02*x8563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8565=((-1.0)*r00);
IkReal x8567 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8567)==0){
continue;
}
IkReal x8566=pow(x8567,-0.5);
CheckValue<IkReal> x8568 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8565),IKFAST_ATAN2_MAGTHRESH);
if(!x8568.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8568.value));
IkReal gconst145=(r01*x8566);
IkReal gconst146=(x8565*x8566);
CheckValue<IkReal> x8569 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8569.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8569.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8570=((-1.0)*r00);
IkReal x8571=x8566;
CheckValue<IkReal> x8573 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8570),IKFAST_ATAN2_MAGTHRESH);
if(!x8573.valid){
continue;
}
IkReal x8572=((-1.0)*(x8573.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8572;
IkReal gconst144=x8572;
IkReal gconst145=(r01*x8571);
IkReal gconst146=(x8570*x8571);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8574=((1.0)*sj0);
IkReal x8575=((1.0)*gconst145);
CheckValue<IkReal> x8576 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8574)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8575))+(((-1.0)*gconst145*r11*x8574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8576.valid){
continue;
}
CheckValue<IkReal> x8577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8575))+(((-1.0)*gconst146*r21)))),-1);
if(!x8577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8576.value)+(((1.5707963267949)*(x8577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8578=IKsin(j4);
IkReal x8579=IKcos(j4);
IkReal x8580=(gconst146*r10);
IkReal x8581=(sj1*sj2);
IkReal x8582=(gconst146*r20);
IkReal x8583=(gconst146*r00);
IkReal x8584=((1.0)*x8579);
IkReal x8585=((1.0)*x8578);
IkReal x8586=(gconst145*x8578);
IkReal x8587=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8584))+(((-1.0)*x8582*x8585))+((r21*x8586)));
evalcond[1]=((((-1.0)*x8580*x8585))+cj0+((r11*x8586))+(((-1.0)*r12*x8584)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8583*x8585))+(((-1.0)*r02*x8584))+((r01*x8586)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8585))+((cj1*sj2))+((x8579*x8582))+(((-1.0)*gconst145*r21*x8584)));
evalcond[4]=((((-1.0)*r02*x8585))+(((-1.0)*cj0*x8587))+((cj0*x8581))+((x8579*x8583))+(((-1.0)*gconst145*r01*x8584)));
evalcond[5]=((((-1.0)*gconst145*r11*x8584))+((sj0*x8581))+(((-1.0)*r12*x8585))+(((-1.0)*sj0*x8587))+((x8579*x8580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8588=((1.0)*gconst146);
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8588))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
CheckValue<IkReal> x8590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8588)))),-1);
if(!x8590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8589.value)+(((1.5707963267949)*(x8590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8591=IKsin(j4);
IkReal x8592=IKcos(j4);
IkReal x8593=(gconst146*r10);
IkReal x8594=(sj1*sj2);
IkReal x8595=(gconst146*r20);
IkReal x8596=(gconst146*r00);
IkReal x8597=((1.0)*x8592);
IkReal x8598=((1.0)*x8591);
IkReal x8599=(gconst145*x8591);
IkReal x8600=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8597))+(((-1.0)*x8595*x8598))+((r21*x8599)));
evalcond[1]=(cj0+(((-1.0)*r12*x8597))+(((-1.0)*x8593*x8598))+((r11*x8599)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8597))+(((-1.0)*x8596*x8598))+((r01*x8599)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8598))+(((-1.0)*gconst145*r21*x8597))+((cj1*sj2))+((x8592*x8595)));
evalcond[4]=((((-1.0)*cj0*x8600))+(((-1.0)*gconst145*r01*x8597))+(((-1.0)*r02*x8598))+((cj0*x8594))+((x8592*x8596)));
evalcond[5]=(((sj0*x8594))+(((-1.0)*r12*x8598))+(((-1.0)*gconst145*r11*x8597))+((x8592*x8593))+(((-1.0)*sj0*x8600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8601=((-1.0)*r01);
IkReal x8603 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8603)==0){
continue;
}
IkReal x8602=pow(x8603,-0.5);
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(x8601),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8604.value))));
IkReal gconst148=(x8601*x8602);
IkReal gconst149=((1.0)*r00*x8602);
CheckValue<IkReal> x8605 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8605.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8605.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8606=((-1.0)*r01);
CheckValue<IkReal> x8609 = IKatan2WithCheck(IkReal(x8606),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8609.valid){
continue;
}
IkReal x8607=((1.0)*(x8609.value));
IkReal x8608=x8602;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8607)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8607)));
IkReal gconst148=(x8606*x8608);
IkReal gconst149=((1.0)*r00*x8608);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8610=((-1.0)*r01);
CheckValue<IkReal> x8613 = IKatan2WithCheck(IkReal(x8610),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8613.valid){
continue;
}
IkReal x8611=((1.0)*(x8613.value));
IkReal x8612=x8602;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8611)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8611)));
IkReal gconst148=(x8610*x8612);
IkReal gconst149=((1.0)*r00*x8612);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8614=((-1.0)*r01);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(x8614),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
IkReal x8615=((1.0)*(x8617.value));
IkReal x8616=x8602;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8615)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8615)));
IkReal gconst148=(x8614*x8616);
IkReal gconst149=((1.0)*r00*x8616);
IkReal x8618=r02*r02;
IkReal x8619=(r12*sj0);
IkReal x8620=((1.0)*cj0);
IkReal x8621=x8602;
j4eval[0]=((IKabs(((((-1.0)*x8619))+(((-1.0)*r02*x8620)))))+(IKabs((((r02*x8619*x8621))+((cj0*x8618*x8621))+(((-1.0)*x8620*x8621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8622=((1.0)*sj0);
IkReal x8623=((1.0)*gconst148);
CheckValue<IkReal> x8624=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8623)))),-1);
if(!x8624.valid){
continue;
}
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8622))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8622))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8623))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8624.value)))+(x8625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8626=IKsin(j4);
IkReal x8627=IKcos(j4);
IkReal x8628=(gconst148*r11);
IkReal x8629=(sj1*sj2);
IkReal x8630=((1.0)*x8627);
IkReal x8631=(gconst149*x8627);
IkReal x8632=(gconst148*x8626);
IkReal x8633=((1.0)*cj1*cj2);
IkReal x8634=((1.0)*x8626);
evalcond[0]=(((r21*x8632))+(((-1.0)*gconst149*r20*x8634))+(((-1.0)*r22*x8630)));
evalcond[1]=(cj0+(((-1.0)*r12*x8630))+((x8626*x8628))+(((-1.0)*gconst149*r10*x8634)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8634))+((r01*x8632))+(((-1.0)*r02*x8630)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8630))+(((-1.0)*r22*x8634))+((r20*x8631)));
evalcond[4]=((((-1.0)*gconst148*r01*x8630))+((cj0*x8629))+(((-1.0)*cj0*x8633))+((r00*x8631))+(((-1.0)*r02*x8634)));
evalcond[5]=((((-1.0)*x8628*x8630))+(((-1.0)*r12*x8634))+((sj0*x8629))+(((-1.0)*sj0*x8633))+((r10*x8631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8635=((1.0)*gconst149);
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8635))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
CheckValue<IkReal> x8637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8635))+(((-1.0)*gconst148*r10)))),-1);
if(!x8637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8636.value)+(((1.5707963267949)*(x8637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8638=IKsin(j4);
IkReal x8639=IKcos(j4);
IkReal x8640=(gconst148*r11);
IkReal x8641=(sj1*sj2);
IkReal x8642=((1.0)*x8639);
IkReal x8643=(gconst149*x8639);
IkReal x8644=(gconst148*x8638);
IkReal x8645=((1.0)*cj1*cj2);
IkReal x8646=((1.0)*x8638);
evalcond[0]=((((-1.0)*gconst149*r20*x8646))+(((-1.0)*r22*x8642))+((r21*x8644)));
evalcond[1]=(cj0+((x8638*x8640))+(((-1.0)*r12*x8642))+(((-1.0)*gconst149*r10*x8646)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8642))+((r01*x8644))+(((-1.0)*gconst149*r00*x8646)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8646))+((r20*x8643))+(((-1.0)*gconst148*r21*x8642)));
evalcond[4]=(((cj0*x8641))+(((-1.0)*cj0*x8645))+((r00*x8643))+(((-1.0)*r02*x8646))+(((-1.0)*gconst148*r01*x8642)));
evalcond[5]=(((r10*x8643))+(((-1.0)*sj0*x8645))+(((-1.0)*r12*x8646))+((sj0*x8641))+(((-1.0)*x8640*x8642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8647=((1.0)*gconst149);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
CheckValue<IkReal> x8649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8647))+(((-1.0)*gconst148*r00)))),-1);
if(!x8649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8648.value)+(((1.5707963267949)*(x8649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8650=IKsin(j4);
IkReal x8651=IKcos(j4);
IkReal x8652=(gconst148*r11);
IkReal x8653=(sj1*sj2);
IkReal x8654=((1.0)*x8651);
IkReal x8655=(gconst149*x8651);
IkReal x8656=(gconst148*x8650);
IkReal x8657=((1.0)*cj1*cj2);
IkReal x8658=((1.0)*x8650);
evalcond[0]=(((r21*x8656))+(((-1.0)*gconst149*r20*x8658))+(((-1.0)*r22*x8654)));
evalcond[1]=((((-1.0)*gconst149*r10*x8658))+(((-1.0)*r12*x8654))+cj0+((x8650*x8652)));
evalcond[2]=(((r01*x8656))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8658))+(((-1.0)*r02*x8654)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8654))+(((-1.0)*r22*x8658))+((r20*x8655)));
evalcond[4]=(((r00*x8655))+(((-1.0)*gconst148*r01*x8654))+((cj0*x8653))+(((-1.0)*cj0*x8657))+(((-1.0)*r02*x8658)));
evalcond[5]=((((-1.0)*r12*x8658))+((r10*x8655))+(((-1.0)*x8652*x8654))+(((-1.0)*sj0*x8657))+((sj0*x8653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8659=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8659;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8660=((1.0)*cj5);
IkReal x8661=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8660)));
j4eval[0]=x8661;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8660)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8662=cj5*cj5;
IkReal x8663=r01*r01;
IkReal x8664=(r01*sj5);
IkReal x8665=(cj5*r00);
IkReal x8666=((((-1.0)*(r02*r02)))+(((2.0)*x8664*x8665))+((x8662*x8663))+(((-1.0)*x8663))+(((-1.0)*x8662*(r00*r00))));
j4eval[0]=x8666;
j4eval[1]=IKsign(x8666);
j4eval[2]=((IKabs((x8665+(((-1.0)*x8664)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8667=cj5*cj5;
IkReal x8668=r01*r01;
IkReal x8669=(r01*sj5);
IkReal x8670=(cj5*r00);
CheckValue<IkReal> x8671=IKPowWithIntegerCheck(IKsign(((((2.0)*x8669*x8670))+(((-1.0)*(r02*r02)))+(((-1.0)*x8668))+((x8667*x8668))+(((-1.0)*x8667*(r00*r00))))),-1);
if(!x8671.valid){
continue;
}
CheckValue<IkReal> x8672 = IKatan2WithCheck(IkReal((x8670+(((-1.0)*x8669)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8671.value)))+(x8672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8673=IKsin(j4);
IkReal x8674=IKcos(j4);
IkReal x8675=(cj5*r10);
IkReal x8676=(r01*sj5);
IkReal x8677=(cj5*r00);
IkReal x8678=(cj5*r20);
IkReal x8679=((1.0)*x8674);
IkReal x8680=((1.0)*x8673);
IkReal x8681=(sj5*x8673);
evalcond[0]=((((-1.0)*x8678*x8680))+(((-1.0)*r22*x8679))+((r21*x8681)));
evalcond[1]=((((-1.0)*r12*x8679))+(((-1.0)*x8675*x8680))+((r11*x8681)));
evalcond[2]=((((-1.0)*r02*x8680))+(((-1.0)*x8676*x8679))+((x8674*x8677)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8679))+((x8673*x8676))+(((-1.0)*x8677*x8680)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8679))+(((-1.0)*r22*x8680))+((x8674*x8678)));
evalcond[5]=((((-1.0)*r12*x8680))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8679))+((x8674*x8675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8682=((1.0)*cj5);
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
CheckValue<IkReal> x8684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8682)))),-1);
if(!x8684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8683.value)+(((1.5707963267949)*(x8684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8685=IKsin(j4);
IkReal x8686=IKcos(j4);
IkReal x8687=(cj5*r10);
IkReal x8688=(r01*sj5);
IkReal x8689=(cj5*r00);
IkReal x8690=(cj5*r20);
IkReal x8691=((1.0)*x8686);
IkReal x8692=((1.0)*x8685);
IkReal x8693=(sj5*x8685);
evalcond[0]=(((r21*x8693))+(((-1.0)*x8690*x8692))+(((-1.0)*r22*x8691)));
evalcond[1]=((((-1.0)*x8687*x8692))+(((-1.0)*r12*x8691))+((r11*x8693)));
evalcond[2]=((((-1.0)*x8688*x8691))+((x8686*x8689))+(((-1.0)*r02*x8692)));
evalcond[3]=((-1.0)+(((-1.0)*x8689*x8692))+(((-1.0)*r02*x8691))+((x8685*x8688)));
evalcond[4]=((((-1.0)*r21*sj5*x8691))+((cj2*sj1))+((x8686*x8690))+((cj1*sj2))+(((-1.0)*r22*x8692)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8686*x8687))+(((-1.0)*r12*x8692))+(((-1.0)*r11*sj5*x8691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8694=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8694.valid){
continue;
}
CheckValue<IkReal> x8695 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8694.value)))+(x8695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8696=IKsin(j4);
IkReal x8697=IKcos(j4);
IkReal x8698=(cj5*r10);
IkReal x8699=(r01*sj5);
IkReal x8700=(cj5*r00);
IkReal x8701=(cj5*r20);
IkReal x8702=((1.0)*x8697);
IkReal x8703=((1.0)*x8696);
IkReal x8704=(sj5*x8696);
evalcond[0]=((((-1.0)*x8701*x8703))+((r21*x8704))+(((-1.0)*r22*x8702)));
evalcond[1]=(((r11*x8704))+(((-1.0)*x8698*x8703))+(((-1.0)*r12*x8702)));
evalcond[2]=((((-1.0)*x8699*x8702))+((x8697*x8700))+(((-1.0)*r02*x8703)));
evalcond[3]=((-1.0)+(((-1.0)*x8700*x8703))+((x8696*x8699))+(((-1.0)*r02*x8702)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8697*x8701))+(((-1.0)*r22*x8703))+(((-1.0)*r21*sj5*x8702)));
evalcond[5]=((((-1.0)*r11*sj5*x8702))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8697*x8698))+(((-1.0)*r12*x8703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8705=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8705;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8706=((1.0)*cj5);
IkReal x8707=((((-1.0)*r21*x8706))+(((-1.0)*r20*sj5)));
j4eval[0]=x8707;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8706))))));
j4eval[2]=IKsign(x8707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8708=cj5*cj5;
IkReal x8709=r01*r01;
IkReal x8710=(cj5*r00);
IkReal x8711=(r01*sj5);
IkReal x8712=(x8709+(((-2.0)*x8710*x8711))+(r02*r02)+((x8708*(r00*r00)))+(((-1.0)*x8708*x8709)));
j4eval[0]=x8712;
j4eval[1]=((IKabs(r02))+(IKabs((x8710+(((-1.0)*x8711))))));
j4eval[2]=IKsign(x8712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8713=cj5*cj5;
IkReal x8714=r01*r01;
IkReal x8715=(r01*sj5);
IkReal x8716=(cj5*r00);
CheckValue<IkReal> x8717 = IKatan2WithCheck(IkReal((x8716+(((-1.0)*x8715)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8717.valid){
continue;
}
CheckValue<IkReal> x8718=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8715*x8716))+x8714+(((-1.0)*x8713*x8714))+((x8713*(r00*r00)))+(r02*r02))),-1);
if(!x8718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8717.value)+(((1.5707963267949)*(x8718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8719=IKsin(j4);
IkReal x8720=IKcos(j4);
IkReal x8721=(cj5*r10);
IkReal x8722=(r01*sj5);
IkReal x8723=(cj5*r00);
IkReal x8724=(cj5*r20);
IkReal x8725=((1.0)*x8720);
IkReal x8726=((1.0)*x8719);
IkReal x8727=(sj5*x8719);
evalcond[0]=(((r21*x8727))+(((-1.0)*x8724*x8726))+(((-1.0)*r22*x8725)));
evalcond[1]=(((r11*x8727))+(((-1.0)*x8721*x8726))+(((-1.0)*r12*x8725)));
evalcond[2]=(((x8720*x8723))+(((-1.0)*r02*x8726))+(((-1.0)*x8722*x8725)));
evalcond[3]=((1.0)+(((-1.0)*x8723*x8726))+(((-1.0)*r02*x8725))+((x8719*x8722)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8720*x8724))+(((-1.0)*r21*sj5*x8725))+(((-1.0)*r22*x8726)));
evalcond[5]=((((-1.0)*r11*sj5*x8725))+(((-1.0)*sj1*sj2))+((x8720*x8721))+((cj1*cj2))+(((-1.0)*r12*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8728=((1.0)*cj5);
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8728))+(((-1.0)*r20*sj5)))),-1);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8729.value)))+(x8730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKsin(j4);
IkReal x8732=IKcos(j4);
IkReal x8733=(cj5*r10);
IkReal x8734=(r01*sj5);
IkReal x8735=(cj5*r00);
IkReal x8736=(cj5*r20);
IkReal x8737=((1.0)*x8732);
IkReal x8738=((1.0)*x8731);
IkReal x8739=(sj5*x8731);
evalcond[0]=(((r21*x8739))+(((-1.0)*x8736*x8738))+(((-1.0)*r22*x8737)));
evalcond[1]=(((r11*x8739))+(((-1.0)*x8733*x8738))+(((-1.0)*r12*x8737)));
evalcond[2]=(((x8732*x8735))+(((-1.0)*x8734*x8737))+(((-1.0)*r02*x8738)));
evalcond[3]=((1.0)+((x8731*x8734))+(((-1.0)*x8735*x8738))+(((-1.0)*r02*x8737)));
evalcond[4]=(((cj2*sj1))+((x8732*x8736))+((cj1*sj2))+(((-1.0)*r21*sj5*x8737))+(((-1.0)*r22*x8738)));
evalcond[5]=((((-1.0)*r11*sj5*x8737))+((x8732*x8733))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8740 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8740.valid){
continue;
}
CheckValue<IkReal> x8741=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8740.value)+(((1.5707963267949)*(x8741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8742=IKsin(j4);
IkReal x8743=IKcos(j4);
IkReal x8744=(cj5*r10);
IkReal x8745=(r01*sj5);
IkReal x8746=(cj5*r00);
IkReal x8747=(cj5*r20);
IkReal x8748=((1.0)*x8743);
IkReal x8749=((1.0)*x8742);
IkReal x8750=(sj5*x8742);
evalcond[0]=((((-1.0)*r22*x8748))+((r21*x8750))+(((-1.0)*x8747*x8749)));
evalcond[1]=((((-1.0)*r12*x8748))+((r11*x8750))+(((-1.0)*x8744*x8749)));
evalcond[2]=(((x8743*x8746))+(((-1.0)*x8745*x8748))+(((-1.0)*r02*x8749)));
evalcond[3]=((1.0)+((x8742*x8745))+(((-1.0)*x8746*x8749))+(((-1.0)*r02*x8748)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8748))+((cj1*sj2))+(((-1.0)*r22*x8749))+((x8743*x8747)));
evalcond[5]=((((-1.0)*r12*x8749))+(((-1.0)*sj1*sj2))+((x8743*x8744))+(((-1.0)*r11*sj5*x8748))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8751=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8751);
rxp1_1=(px*r21);
rxp1_2=(r11*x8751);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8752=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8752);
rxp1_1=(px*r21);
rxp1_2=(r11*x8752);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8753=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8753);
rxp1_1=(px*r21);
rxp1_2=(r11*x8753);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8756=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8756.valid){
continue;
}
IkReal x8754=x8756.value;
IkReal x8755=(sj0*x8754);
cj4array[0]=(((cj1*cj2*x8755))+(((-1.0)*sj1*sj2*x8755)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8757=IKsin(j4);
IkReal x8758=IKcos(j4);
IkReal x8759=(r21*sj5);
IkReal x8760=(cj5*r20);
IkReal x8761=((1.0)*x8757);
IkReal x8762=((1.0)*x8758);
evalcond[0]=((-1.0)*r02*x8757);
evalcond[1]=((((-1.0)*r02*x8762))+(((-1.0)*sj0)));
evalcond[2]=(((x8757*x8759))+(((-1.0)*x8760*x8761)));
evalcond[3]=((((-1.0)*cj5*r10*x8761))+((r11*sj5*x8757)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8759*x8762))+((cj1*sj2))+((x8758*x8760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8765=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8765.valid){
continue;
}
IkReal x8763=x8765.value;
IkReal x8764=((1.0)*x8763);
cj4array[0]=((((-1.0)*cj2*sj1*x8764))+(((-1.0)*cj1*sj2*x8764)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8766=IKsin(j4);
IkReal x8767=IKcos(j4);
IkReal x8768=(r11*sj5);
IkReal x8769=((1.0)*sj0);
IkReal x8770=((1.0)*x8767);
IkReal x8771=((1.0)*cj5*x8766);
evalcond[0]=((-1.0)*r02*x8766);
evalcond[1]=((((-1.0)*r02*x8770))+(((-1.0)*x8769)));
evalcond[2]=((((-1.0)*r20*x8771))+((r21*sj5*x8766)));
evalcond[3]=(((x8766*x8768))+(((-1.0)*r10*x8771)));
evalcond[4]=((((-1.0)*x8768*x8770))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8769))+((cj5*r10*x8767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8772=IKPowWithIntegerCheck(r02,-1);
if(!x8772.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8772.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8773=IKsin(j4);
IkReal x8774=IKcos(j4);
IkReal x8775=(cj5*x8774);
IkReal x8776=(sj5*x8773);
IkReal x8777=((1.0)*sj5*x8774);
IkReal x8778=((1.0)*cj5*x8773);
evalcond[0]=((-1.0)*r02*x8773);
evalcond[1]=((((-1.0)*r20*x8778))+((r21*x8776)));
evalcond[2]=((((-1.0)*r10*x8778))+((r11*x8776)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8777))+((cj1*sj2))+((r20*x8775)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8775))+((sj0*sj1*sj2))+(((-1.0)*r11*x8777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8779=((1.0)*sj0);
IkReal x8780=((1.0)*cj0);
CheckValue<IkReal> x8781 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8779))+(((-1.0)*r02*x8780)))),IkReal(((((-1.0)*r11*sj5*x8779))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8781.valid){
continue;
}
CheckValue<IkReal> x8782=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8782.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8781.value)+(((1.5707963267949)*(x8782.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8783=IKsin(j4);
IkReal x8784=IKcos(j4);
IkReal x8785=(cj5*r10);
IkReal x8786=(sj1*sj2);
IkReal x8787=(r01*sj5);
IkReal x8788=(cj5*r00);
IkReal x8789=(cj5*r20);
IkReal x8790=((1.0)*x8784);
IkReal x8791=((1.0)*cj1*cj2);
IkReal x8792=((1.0)*x8783);
IkReal x8793=(sj5*x8783);
evalcond[0]=((((-1.0)*x8789*x8792))+((r21*x8793))+(((-1.0)*r22*x8790)));
evalcond[1]=((((-1.0)*r12*x8790))+cj0+((r11*x8793))+(((-1.0)*x8785*x8792)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8788*x8792))+((x8783*x8787))+(((-1.0)*r02*x8790)));
evalcond[3]=(((cj2*sj1))+((x8784*x8789))+((cj1*sj2))+(((-1.0)*r22*x8792))+(((-1.0)*r21*sj5*x8790)));
evalcond[4]=(((x8784*x8788))+((cj0*x8786))+(((-1.0)*r02*x8792))+(((-1.0)*x8787*x8790))+(((-1.0)*cj0*x8791)));
evalcond[5]=((((-1.0)*r12*x8792))+((x8784*x8785))+(((-1.0)*r11*sj5*x8790))+(((-1.0)*sj0*x8791))+((sj0*x8786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8794=((1.0)*cj5);
CheckValue<IkReal> x8795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8794))+(((-1.0)*r10*sj5)))),-1);
if(!x8795.valid){
continue;
}
CheckValue<IkReal> x8796 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8794))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8795.value)))+(x8796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8797=IKsin(j4);
IkReal x8798=IKcos(j4);
IkReal x8799=(cj5*r10);
IkReal x8800=(sj1*sj2);
IkReal x8801=(r01*sj5);
IkReal x8802=(cj5*r00);
IkReal x8803=(cj5*r20);
IkReal x8804=((1.0)*x8798);
IkReal x8805=((1.0)*cj1*cj2);
IkReal x8806=((1.0)*x8797);
IkReal x8807=(sj5*x8797);
evalcond[0]=(((r21*x8807))+(((-1.0)*r22*x8804))+(((-1.0)*x8803*x8806)));
evalcond[1]=((((-1.0)*r12*x8804))+cj0+((r11*x8807))+(((-1.0)*x8799*x8806)));
evalcond[2]=((((-1.0)*sj0))+((x8797*x8801))+(((-1.0)*r02*x8804))+(((-1.0)*x8802*x8806)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8806))+((cj1*sj2))+(((-1.0)*r21*sj5*x8804))+((x8798*x8803)));
evalcond[4]=(((cj0*x8800))+(((-1.0)*r02*x8806))+(((-1.0)*x8801*x8804))+(((-1.0)*cj0*x8805))+((x8798*x8802)));
evalcond[5]=((((-1.0)*r12*x8806))+(((-1.0)*sj0*x8805))+((sj0*x8800))+((x8798*x8799))+(((-1.0)*r11*sj5*x8804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8808=((1.0)*cj5);
CheckValue<IkReal> x8809 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8808))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8809.valid){
continue;
}
CheckValue<IkReal> x8810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8808)))),-1);
if(!x8810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8809.value)+(((1.5707963267949)*(x8810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8811=IKsin(j4);
IkReal x8812=IKcos(j4);
IkReal x8813=(cj5*r10);
IkReal x8814=(sj1*sj2);
IkReal x8815=(r01*sj5);
IkReal x8816=(cj5*r00);
IkReal x8817=(cj5*r20);
IkReal x8818=((1.0)*x8812);
IkReal x8819=((1.0)*cj1*cj2);
IkReal x8820=((1.0)*x8811);
IkReal x8821=(sj5*x8811);
evalcond[0]=((((-1.0)*r22*x8818))+((r21*x8821))+(((-1.0)*x8817*x8820)));
evalcond[1]=((((-1.0)*r12*x8818))+cj0+((r11*x8821))+(((-1.0)*x8813*x8820)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8818))+(((-1.0)*x8816*x8820))+((x8811*x8815)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8812*x8817))+(((-1.0)*r21*sj5*x8818))+(((-1.0)*r22*x8820)));
evalcond[4]=((((-1.0)*r02*x8820))+((x8812*x8816))+(((-1.0)*x8815*x8818))+(((-1.0)*cj0*x8819))+((cj0*x8814)));
evalcond[5]=((((-1.0)*r12*x8820))+(((-1.0)*sj0*x8819))+((x8812*x8813))+((sj0*x8814))+(((-1.0)*r11*sj5*x8818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8822=cj1*cj1;
IkReal x8823=cj2*cj2;
IkReal x8824=(sj1*sj2);
IkReal x8825=(cj5*r01);
IkReal x8826=(cj5*r11);
IkReal x8827=((70808400000.0)*cj1);
IkReal x8828=(r10*sj5);
IkReal x8829=(cj1*cj2);
IkReal x8830=((572300000000.0)*py);
IkReal x8831=((572300000000.0)*px);
IkReal x8832=((612000000000.0)*cj1);
IkReal x8833=(r00*sj5);
IkReal x8834=((66215110000.0)*sj5*x8829);
CheckValue<IkReal> x8835 = IKatan2WithCheck(IkReal(((((66215110000.0)*x8828*x8829))+(((-1.0)*x8824*x8830))+(((66215110000.0)*x8826*x8829))+((x8826*x8827))+(((-18967973700.0)*x8833))+(((-18967973700.0)*x8825))+(((-66215110000.0)*x8824*x8828))+(((-66215110000.0)*x8824*x8826))+((py*x8832))+((x8827*x8828))+(((-163941000000.0)*px))+((x8829*x8830)))),IkReal((((px*x8832))+((x8825*x8827))+(((-1.0)*x8824*x8831))+((x8827*x8833))+(((163941000000.0)*py))+(((66215110000.0)*x8829*x8833))+(((18967973700.0)*x8826))+(((18967973700.0)*x8828))+(((-66215110000.0)*x8824*x8825))+(((66215110000.0)*x8825*x8829))+(((-66215110000.0)*x8824*x8833))+((x8829*x8831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8835.valid){
continue;
}
CheckValue<IkReal> x8836=IKPowWithIntegerCheck(IKsign(((354403941481.0)+(((-655054580000.0)*x8824*x8829))+(((-700495200000.0)*cj1*x8824))+(((700495200000.0)*cj2*x8822))+(((-327527290000.0)*x8823))+(((47016710000.0)*x8822))+(((655054580000.0)*x8822*x8823)))),-1);
if(!x8836.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8835.value)+(((1.5707963267949)*(x8836.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8837=IKcos(j0);
IkReal x8838=IKsin(j0);
IkReal x8839=((0.1157)*cj5);
IkReal x8840=((0.1157)*sj5);
IkReal x8841=((0.612)*cj1);
IkReal x8842=((0.5723)*cj1*cj2);
IkReal x8843=((0.5723)*sj1*sj2);
evalcond[0]=(((x8837*x8842))+((x8837*x8841))+(((-1.0)*px))+(((-0.163941)*x8838))+(((-1.0)*r01*x8839))+(((-1.0)*r00*x8840))+(((-1.0)*x8837*x8843)));
evalcond[1]=((((0.163941)*x8837))+(((-1.0)*r10*x8840))+(((-1.0)*x8838*x8843))+((x8838*x8842))+((x8838*x8841))+(((-1.0)*py))+(((-1.0)*r11*x8839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8844=((1.0)*cj5);
IkReal x8845=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8844)));
j4eval[0]=x8845;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8844))))));
j4eval[2]=IKsign(x8845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8846=((1.0)*cj5);
IkReal x8847=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8846)));
j4eval[0]=x8847;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8846))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8848=((1.0)*sj0);
IkReal x8849=((1.0)*cj0);
IkReal x8850=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8850;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8849))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8848)))))+(IKabs(((((-1.0)*r02*x8849))+(((-1.0)*r12*x8848))))));
j4eval[2]=IKsign(x8850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8851=((-1.0)*r20);
IkReal x8853 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8853)==0){
continue;
}
IkReal x8852=pow(x8853,-0.5);
CheckValue<IkReal> x8854 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8851),IKFAST_ATAN2_MAGTHRESH);
if(!x8854.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8854.value));
IkReal gconst1=(r21*x8852);
IkReal gconst2=(x8851*x8852);
CheckValue<IkReal> x8855 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8855.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8855.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8856=((-1.0)*r20);
IkReal x8857=x8852;
CheckValue<IkReal> x8859 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8856),IKFAST_ATAN2_MAGTHRESH);
if(!x8859.valid){
continue;
}
IkReal x8858=((-1.0)*(x8859.value));
sj5=gconst1;
cj5=gconst2;
j5=x8858;
IkReal gconst0=x8858;
IkReal gconst1=(r21*x8857);
IkReal gconst2=(x8856*x8857);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8860=((-1.0)*r20);
IkReal x8861=x8852;
CheckValue<IkReal> x8863 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8860),IKFAST_ATAN2_MAGTHRESH);
if(!x8863.valid){
continue;
}
IkReal x8862=((-1.0)*(x8863.value));
sj5=gconst1;
cj5=gconst2;
j5=x8862;
IkReal gconst0=x8862;
IkReal gconst1=(r21*x8861);
IkReal gconst2=(x8860*x8861);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8864=((-1.0)*r20);
IkReal x8865=x8852;
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8864),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
IkReal x8866=((-1.0)*(x8867.value));
sj5=gconst1;
cj5=gconst2;
j5=x8866;
IkReal gconst0=x8866;
IkReal gconst1=(r21*x8865);
IkReal gconst2=(x8864*x8865);
IkReal x8868=r22*r22;
CheckValue<IkReal> x8872=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8868))),-1);
if(!x8872.valid){
continue;
}
IkReal x8869=x8872.value;
IkReal x8870=(sj3*x8869);
IkReal x8871=(((x8870*(r21*r21*r21*r21)))+(((2.0)*x8870*(r20*r20)*(r21*r21)))+((x8870*(r20*r20*r20*r20)))+((sj3*x8868)));
j4eval[0]=x8871;
j4eval[1]=IKsign(x8871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8873=((-1.0)*r20);
IkReal x8874=x8852;
CheckValue<IkReal> x8876 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8873),IKFAST_ATAN2_MAGTHRESH);
if(!x8876.valid){
continue;
}
IkReal x8875=((-1.0)*(x8876.value));
sj5=gconst1;
cj5=gconst2;
j5=x8875;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8875;
IkReal gconst1=(r21*x8874);
IkReal gconst2=(x8873*x8874);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8877=((-1.0)*r20);
IkReal x8878=x8852;
CheckValue<IkReal> x8880 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8877),IKFAST_ATAN2_MAGTHRESH);
if(!x8880.valid){
continue;
}
IkReal x8879=((-1.0)*(x8880.value));
sj5=gconst1;
cj5=gconst2;
j5=x8879;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8879;
IkReal gconst1=(r21*x8878);
IkReal gconst2=(x8877*x8878);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8881=((-1.0)*r20);
IkReal x8882=x8852;
CheckValue<IkReal> x8884 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8881),IKFAST_ATAN2_MAGTHRESH);
if(!x8884.valid){
continue;
}
IkReal x8883=((-1.0)*(x8884.value));
sj5=gconst1;
cj5=gconst2;
j5=x8883;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8883;
IkReal gconst1=(r21*x8882);
IkReal gconst2=(x8881*x8882);
IkReal x8885=((1.0)*(r22*r22));
CheckValue<IkReal> x8889=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8885))),-1);
if(!x8889.valid){
continue;
}
IkReal x8886=x8889.value;
IkReal x8887=((1.0)*x8886);
IkReal x8888=((((-1.0)*x8887*(r20*r20*r20*r20)))+(((-2.0)*x8886*(r20*r20)*(r21*r21)))+(((-1.0)*x8885))+(((-1.0)*x8887*(r21*r21*r21*r21))));
j4eval[0]=x8888;
j4eval[1]=IKsign(x8888);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8890=((-1.0)*r20);
IkReal x8891=x8852;
CheckValue<IkReal> x8893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8890),IKFAST_ATAN2_MAGTHRESH);
if(!x8893.valid){
continue;
}
IkReal x8892=((-1.0)*(x8893.value));
sj5=gconst1;
cj5=gconst2;
j5=x8892;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8892;
IkReal gconst1=(r21*x8891);
IkReal gconst2=(x8890*x8891);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8894=((-1.0)*r20);
IkReal x8895=x8852;
CheckValue<IkReal> x8897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8894),IKFAST_ATAN2_MAGTHRESH);
if(!x8897.valid){
continue;
}
IkReal x8896=((-1.0)*(x8897.value));
sj5=gconst1;
cj5=gconst2;
j5=x8896;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8896;
IkReal gconst1=(r21*x8895);
IkReal gconst2=(x8894*x8895);
IkReal x8898=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8902=IKPowWithIntegerCheck(x8898,-1);
if(!x8902.valid){
continue;
}
IkReal x8899=x8902.value;
IkReal x8900=((1.0)*x8899);
IkReal x8901=((((-2.0)*r10*r11*r20*r21*x8899))+(((-1.0)*x8900*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8900*(r10*r10)*(r20*r20))));
j4eval[0]=x8901;
j4eval[1]=r12;
j4eval[2]=x8898;
j4eval[3]=IKsign(x8901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8903=((-1.0)*r20);
IkReal x8904=x8852;
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8903),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
IkReal x8905=((-1.0)*(x8906.value));
sj5=gconst1;
cj5=gconst2;
j5=x8905;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8905;
IkReal gconst1=(r21*x8904);
IkReal gconst2=(x8903*x8904);
IkReal x8907=r22*r22;
IkReal x8908=(cj1*r12*sj2);
IkReal x8909=(cj2*r12*sj1);
CheckValue<IkReal> x8913=IKPowWithIntegerCheck(((-1.0)+x8907),-1);
if(!x8913.valid){
continue;
}
IkReal x8910=x8913.value;
if((((1.0)+(((-1.0)*x8907)))) < -0.00001)
continue;
IkReal x8911=IKsqrt(((1.0)+(((-1.0)*x8907))));
IkReal x8912=(r22*x8910*x8911);
j4eval[0]=((IKabs((((x8909*x8912))+((x8908*x8912)))))+(IKabs(((((-1.0)*x8908))+(((-1.0)*x8909))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8914=(cj1*sj2);
IkReal x8915=(cj2*sj1);
IkReal x8916=((1.0)*r12);
IkReal x8917=(gconst1*r11);
IkReal x8918=((1.0)*gconst2*r10);
CheckValue<IkReal> x8919=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8919.valid){
continue;
}
CheckValue<IkReal> x8920 = IKatan2WithCheck(IkReal((((x8915*x8917))+((x8914*x8917))+(((-1.0)*x8915*x8918))+(((-1.0)*x8914*x8918)))),IkReal(((((-1.0)*x8915*x8916))+(((-1.0)*x8914*x8916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8919.value)))+(x8920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8921=IKcos(j4);
IkReal x8922=IKsin(j4);
IkReal x8923=((1.0)*x8921);
IkReal x8924=(gconst1*x8921);
IkReal x8925=(gconst1*x8922);
IkReal x8926=((1.0)*gconst2*x8922);
evalcond[0]=((((-1.0)*gconst2*r10*x8923))+((r12*x8922))+((r11*x8924)));
evalcond[1]=((((-1.0)*r22*x8923))+(((-1.0)*r20*x8926))+((r21*x8925)));
evalcond[2]=((((-1.0)*r02*x8923))+(((-1.0)*r00*x8926))+((r01*x8925)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8923))+((r11*x8925))+(((-1.0)*r10*x8926)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x8923))+((cj1*sj2))+((r22*x8922))+((r21*x8924)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8922))+(((-1.0)*gconst2*r00*x8923))+((r01*x8924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8927=(gconst2*r10);
IkReal x8928=(gconst1*r11);
CheckValue<IkReal> x8929=IKPowWithIntegerCheck(IKsign(((((2.0)*x8927*x8928))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8927*x8927)))+(((-1.0)*(x8928*x8928))))),-1);
if(!x8929.valid){
continue;
}
CheckValue<IkReal> x8930 = IKatan2WithCheck(IkReal((x8928+(((-1.0)*x8927)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8929.value)))+(x8930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8931=IKcos(j4);
IkReal x8932=IKsin(j4);
IkReal x8933=((1.0)*x8931);
IkReal x8934=(gconst1*x8931);
IkReal x8935=(gconst1*x8932);
IkReal x8936=((1.0)*gconst2*x8932);
evalcond[0]=(((r12*x8932))+(((-1.0)*gconst2*r10*x8933))+((r11*x8934)));
evalcond[1]=((((-1.0)*r20*x8936))+(((-1.0)*r22*x8933))+((r21*x8935)));
evalcond[2]=((((-1.0)*r00*x8936))+((r01*x8935))+(((-1.0)*r02*x8933)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8933))+(((-1.0)*r10*x8936))+((r11*x8935)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8933))+((r21*x8934))+((r22*x8932)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8933))+((r01*x8934))+((r02*x8932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8937=((1.0)*gconst2);
CheckValue<IkReal> x8938=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8937)))),-1);
if(!x8938.valid){
continue;
}
CheckValue<IkReal> x8939 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8937))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8938.value)))+(x8939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8940=IKcos(j4);
IkReal x8941=IKsin(j4);
IkReal x8942=((1.0)*x8940);
IkReal x8943=(gconst1*x8940);
IkReal x8944=(gconst1*x8941);
IkReal x8945=((1.0)*gconst2*x8941);
evalcond[0]=(((r11*x8943))+(((-1.0)*gconst2*r10*x8942))+((r12*x8941)));
evalcond[1]=((((-1.0)*r22*x8942))+((r21*x8944))+(((-1.0)*r20*x8945)));
evalcond[2]=((((-1.0)*r00*x8945))+((r01*x8944))+(((-1.0)*r02*x8942)));
evalcond[3]=((1.0)+((r11*x8944))+(((-1.0)*r12*x8942))+(((-1.0)*r10*x8945)));
evalcond[4]=(((cj2*sj1))+((r22*x8941))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8942))+((r21*x8943)));
evalcond[5]=(((r02*x8941))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8943))+(((-1.0)*gconst2*r00*x8942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8946=((-1.0)*r20);
IkReal x8947=x8852;
CheckValue<IkReal> x8949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8946),IKFAST_ATAN2_MAGTHRESH);
if(!x8949.valid){
continue;
}
IkReal x8948=((-1.0)*(x8949.value));
sj5=gconst1;
cj5=gconst2;
j5=x8948;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8948;
IkReal gconst1=(r21*x8947);
IkReal gconst2=(x8946*x8947);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8950=((-1.0)*r20);
IkReal x8951=x8852;
CheckValue<IkReal> x8953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8950),IKFAST_ATAN2_MAGTHRESH);
if(!x8953.valid){
continue;
}
IkReal x8952=((-1.0)*(x8953.value));
sj5=gconst1;
cj5=gconst2;
j5=x8952;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8952;
IkReal gconst1=(r21*x8951);
IkReal gconst2=(x8950*x8951);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8954=((-1.0)*r20);
IkReal x8955=x8852;
CheckValue<IkReal> x8957 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8954),IKFAST_ATAN2_MAGTHRESH);
if(!x8957.valid){
continue;
}
IkReal x8956=((-1.0)*(x8957.value));
sj5=gconst1;
cj5=gconst2;
j5=x8956;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8956;
IkReal gconst1=(r21*x8955);
IkReal gconst2=(x8954*x8955);
IkReal x8958=r22*r22;
IkReal x8959=(cj1*r12*sj2);
IkReal x8960=(cj2*r12*sj1);
CheckValue<IkReal> x8964=IKPowWithIntegerCheck(((-1.0)+x8958),-1);
if(!x8964.valid){
continue;
}
IkReal x8961=x8964.value;
if((((1.0)+(((-1.0)*x8958)))) < -0.00001)
continue;
IkReal x8962=IKsqrt(((1.0)+(((-1.0)*x8958))));
IkReal x8963=(r22*x8961*x8962);
j4eval[0]=((IKabs((((x8959*x8963))+((x8960*x8963)))))+(IKabs(((((-1.0)*x8960))+(((-1.0)*x8959))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8965=(cj1*sj2);
IkReal x8966=(cj2*sj1);
IkReal x8967=((1.0)*r12);
IkReal x8968=(gconst1*r11);
IkReal x8969=((1.0)*gconst2*r10);
CheckValue<IkReal> x8970=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8970.valid){
continue;
}
CheckValue<IkReal> x8971 = IKatan2WithCheck(IkReal(((((-1.0)*x8966*x8969))+(((-1.0)*x8965*x8969))+((x8966*x8968))+((x8965*x8968)))),IkReal(((((-1.0)*x8966*x8967))+(((-1.0)*x8965*x8967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8970.value)))+(x8971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8972=IKcos(j4);
IkReal x8973=IKsin(j4);
IkReal x8974=((1.0)*x8972);
IkReal x8975=(gconst1*x8972);
IkReal x8976=(gconst1*x8973);
IkReal x8977=((1.0)*gconst2*x8973);
evalcond[0]=(((r11*x8975))+((r12*x8973))+(((-1.0)*gconst2*r10*x8974)));
evalcond[1]=(((r21*x8976))+(((-1.0)*r22*x8974))+(((-1.0)*r20*x8977)));
evalcond[2]=(((r01*x8976))+(((-1.0)*r02*x8974))+(((-1.0)*r00*x8977)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8977))+((r11*x8976))+(((-1.0)*r12*x8974)));
evalcond[4]=(((r21*x8975))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8974))+((cj1*sj2))+((r22*x8973)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8975))+(((-1.0)*gconst2*r00*x8974))+((cj1*cj2))+((r02*x8973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8978=(gconst1*r11);
IkReal x8979=(gconst2*r10);
CheckValue<IkReal> x8980=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8978*x8979))+(x8979*x8979)+(x8978*x8978))),-1);
if(!x8980.valid){
continue;
}
CheckValue<IkReal> x8981 = IKatan2WithCheck(IkReal((x8978+(((-1.0)*x8979)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8980.value)))+(x8981.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8982=IKcos(j4);
IkReal x8983=IKsin(j4);
IkReal x8984=((1.0)*x8982);
IkReal x8985=(gconst1*x8982);
IkReal x8986=(gconst1*x8983);
IkReal x8987=((1.0)*gconst2*x8983);
evalcond[0]=((((-1.0)*gconst2*r10*x8984))+((r11*x8985))+((r12*x8983)));
evalcond[1]=((((-1.0)*r20*x8987))+((r21*x8986))+(((-1.0)*r22*x8984)));
evalcond[2]=(((r01*x8986))+(((-1.0)*r02*x8984))+(((-1.0)*r00*x8987)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8984))+((r11*x8986))+(((-1.0)*r10*x8987)));
evalcond[4]=((((-1.0)*gconst2*r20*x8984))+((cj2*sj1))+((r22*x8983))+((cj1*sj2))+((r21*x8985)));
evalcond[5]=(((r01*x8985))+((r02*x8983))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8984))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
CheckValue<IkReal> x8989=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8988.value)+(((1.5707963267949)*(x8989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8990=IKcos(j4);
IkReal x8991=IKsin(j4);
IkReal x8992=((1.0)*x8990);
IkReal x8993=(gconst1*x8990);
IkReal x8994=(gconst1*x8991);
IkReal x8995=((1.0)*gconst2*x8991);
evalcond[0]=(((r11*x8993))+((r12*x8991))+(((-1.0)*gconst2*r10*x8992)));
evalcond[1]=(((r21*x8994))+(((-1.0)*r22*x8992))+(((-1.0)*r20*x8995)));
evalcond[2]=(((r01*x8994))+(((-1.0)*r02*x8992))+(((-1.0)*r00*x8995)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8992))+((r11*x8994))+(((-1.0)*r10*x8995)));
evalcond[4]=(((cj2*sj1))+((r21*x8993))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8992))+((r22*x8991)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8993))+(((-1.0)*gconst2*r00*x8992))+((cj1*cj2))+((r02*x8991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8996=((-1.0)*r20);
IkReal x8997=x8852;
CheckValue<IkReal> x8999 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8996),IKFAST_ATAN2_MAGTHRESH);
if(!x8999.valid){
continue;
}
IkReal x8998=((-1.0)*(x8999.value));
sj5=gconst1;
cj5=gconst2;
j5=x8998;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8998;
IkReal gconst1=(r21*x8997);
IkReal gconst2=(x8996*x8997);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9000=((-1.0)*r20);
IkReal x9001=x8852;
CheckValue<IkReal> x9003 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9000),IKFAST_ATAN2_MAGTHRESH);
if(!x9003.valid){
continue;
}
IkReal x9002=((-1.0)*(x9003.value));
sj5=gconst1;
cj5=gconst2;
j5=x9002;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9002;
IkReal gconst1=(r21*x9001);
IkReal gconst2=(x9000*x9001);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9004=((-1.0)*r20);
IkReal x9005=x8852;
CheckValue<IkReal> x9007 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9004),IKFAST_ATAN2_MAGTHRESH);
if(!x9007.valid){
continue;
}
IkReal x9006=((-1.0)*(x9007.value));
sj5=gconst1;
cj5=gconst2;
j5=x9006;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9006;
IkReal gconst1=(r21*x9005);
IkReal gconst2=(x9004*x9005);
IkReal x9008=r22*r22;
IkReal x9009=((1.0)*r02);
IkReal x9010=(cj1*sj2);
IkReal x9011=(cj2*sj1);
CheckValue<IkReal> x9015=IKPowWithIntegerCheck(((-1.0)+x9008),-1);
if(!x9015.valid){
continue;
}
IkReal x9012=x9015.value;
if((((1.0)+(((-1.0)*x9008)))) < -0.00001)
continue;
IkReal x9013=IKsqrt(((1.0)+(((-1.0)*x9008))));
IkReal x9014=(r02*r22*x9012*x9013);
j4eval[0]=((IKabs(((((-1.0)*x9009*x9010))+(((-1.0)*x9009*x9011)))))+(IKabs((((x9010*x9014))+((x9011*x9014))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9016=(cj1*sj2);
IkReal x9017=(gconst1*r01);
IkReal x9018=((1.0)*r02);
IkReal x9019=(cj2*sj1);
IkReal x9020=((1.0)*gconst2*r00);
CheckValue<IkReal> x9021 = IKatan2WithCheck(IkReal(((((-1.0)*x9016*x9020))+((x9017*x9019))+((x9016*x9017))+(((-1.0)*x9019*x9020)))),IkReal(((((-1.0)*x9018*x9019))+(((-1.0)*x9016*x9018)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9021.valid){
continue;
}
CheckValue<IkReal> x9022=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9021.value)+(((1.5707963267949)*(x9022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9023=IKcos(j4);
IkReal x9024=IKsin(j4);
IkReal x9025=((1.0)*x9023);
IkReal x9026=(gconst1*x9023);
IkReal x9027=(gconst1*x9024);
IkReal x9028=((1.0)*gconst2*x9024);
evalcond[0]=((((-1.0)*gconst2*r00*x9025))+((r01*x9026))+((r02*x9024)));
evalcond[1]=(((r21*x9027))+(((-1.0)*r20*x9028))+(((-1.0)*r22*x9025)));
evalcond[2]=((((-1.0)*r12*x9025))+((r11*x9027))+(((-1.0)*r10*x9028)));
evalcond[3]=((-1.0)+((r01*x9027))+(((-1.0)*r02*x9025))+(((-1.0)*r00*x9028)));
evalcond[4]=((((-1.0)*gconst2*r20*x9025))+((cj2*sj1))+((cj1*sj2))+((r21*x9026))+((r22*x9024)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9025))+((r11*x9026))+((r12*x9024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9029=(gconst1*r01);
IkReal x9030=(gconst2*r00);
CheckValue<IkReal> x9031 = IKatan2WithCheck(IkReal((x9029+(((-1.0)*x9030)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9031.valid){
continue;
}
CheckValue<IkReal> x9032=IKPowWithIntegerCheck(IKsign(((x9030*x9030)+(x9029*x9029)+(((-2.0)*x9029*x9030))+(r02*r02))),-1);
if(!x9032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9031.value)+(((1.5707963267949)*(x9032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9033=IKcos(j4);
IkReal x9034=IKsin(j4);
IkReal x9035=((1.0)*x9033);
IkReal x9036=(gconst1*x9033);
IkReal x9037=(gconst1*x9034);
IkReal x9038=((1.0)*gconst2*x9034);
evalcond[0]=(((r01*x9036))+((r02*x9034))+(((-1.0)*gconst2*r00*x9035)));
evalcond[1]=(((r21*x9037))+(((-1.0)*r20*x9038))+(((-1.0)*r22*x9035)));
evalcond[2]=((((-1.0)*r10*x9038))+(((-1.0)*r12*x9035))+((r11*x9037)));
evalcond[3]=((-1.0)+((r01*x9037))+(((-1.0)*r00*x9038))+(((-1.0)*r02*x9035)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9035))+((cj1*sj2))+((r22*x9034))+((r21*x9036)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9035))+((r11*x9036))+((r12*x9034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9039=((1.0)*gconst2);
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9039))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
CheckValue<IkReal> x9041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9039))+(((-1.0)*gconst1*r10)))),-1);
if(!x9041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9040.value)+(((1.5707963267949)*(x9041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9042=IKcos(j4);
IkReal x9043=IKsin(j4);
IkReal x9044=((1.0)*x9042);
IkReal x9045=(gconst1*x9042);
IkReal x9046=(gconst1*x9043);
IkReal x9047=((1.0)*gconst2*x9043);
evalcond[0]=(((r01*x9045))+(((-1.0)*gconst2*r00*x9044))+((r02*x9043)));
evalcond[1]=((((-1.0)*r22*x9044))+(((-1.0)*r20*x9047))+((r21*x9046)));
evalcond[2]=((((-1.0)*r10*x9047))+(((-1.0)*r12*x9044))+((r11*x9046)));
evalcond[3]=((-1.0)+((r01*x9046))+(((-1.0)*r00*x9047))+(((-1.0)*r02*x9044)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9043))+((r21*x9045))+(((-1.0)*gconst2*r20*x9044)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9043))+((r11*x9045))+(((-1.0)*gconst2*r10*x9044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9048=((-1.0)*r20);
IkReal x9049=x8852;
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9048),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
IkReal x9050=((-1.0)*(x9051.value));
sj5=gconst1;
cj5=gconst2;
j5=x9050;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9050;
IkReal gconst1=(r21*x9049);
IkReal gconst2=(x9048*x9049);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9052=((-1.0)*r20);
IkReal x9053=x8852;
CheckValue<IkReal> x9055 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9052),IKFAST_ATAN2_MAGTHRESH);
if(!x9055.valid){
continue;
}
IkReal x9054=((-1.0)*(x9055.value));
sj5=gconst1;
cj5=gconst2;
j5=x9054;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9054;
IkReal gconst1=(r21*x9053);
IkReal gconst2=(x9052*x9053);
IkReal x9056=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9060=IKPowWithIntegerCheck(x9056,-1);
if(!x9060.valid){
continue;
}
IkReal x9057=x9060.value;
IkReal x9058=((1.0)*x9057);
IkReal x9059=((((-1.0)*x9058*(r00*r00)*(r20*r20)))+(((-1.0)*x9058*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9057)));
j4eval[0]=x9059;
j4eval[1]=IKsign(x9059);
j4eval[2]=r02;
j4eval[3]=x9056;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9061=((-1.0)*r20);
IkReal x9062=x8852;
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9061),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
IkReal x9063=((-1.0)*(x9064.value));
sj5=gconst1;
cj5=gconst2;
j5=x9063;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9063;
IkReal gconst1=(r21*x9062);
IkReal gconst2=(x9061*x9062);
IkReal x9065=r22*r22;
IkReal x9066=((1.0)*r02);
IkReal x9067=(cj1*sj2);
IkReal x9068=(cj2*sj1);
CheckValue<IkReal> x9072=IKPowWithIntegerCheck(((-1.0)+x9065),-1);
if(!x9072.valid){
continue;
}
IkReal x9069=x9072.value;
if((((1.0)+(((-1.0)*x9065)))) < -0.00001)
continue;
IkReal x9070=IKsqrt(((1.0)+(((-1.0)*x9065))));
IkReal x9071=(r02*r22*x9069*x9070);
j4eval[0]=((IKabs((((x9068*x9071))+((x9067*x9071)))))+(IKabs(((((-1.0)*x9066*x9067))+(((-1.0)*x9066*x9068))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9073=(cj1*sj2);
IkReal x9074=(gconst1*r01);
IkReal x9075=((1.0)*r02);
IkReal x9076=(cj2*sj1);
IkReal x9077=((1.0)*gconst2*r00);
CheckValue<IkReal> x9078 = IKatan2WithCheck(IkReal((((x9073*x9074))+(((-1.0)*x9076*x9077))+(((-1.0)*x9073*x9077))+((x9074*x9076)))),IkReal(((((-1.0)*x9075*x9076))+(((-1.0)*x9073*x9075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9078.valid){
continue;
}
CheckValue<IkReal> x9079=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9078.value)+(((1.5707963267949)*(x9079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9080=IKcos(j4);
IkReal x9081=IKsin(j4);
IkReal x9082=((1.0)*x9080);
IkReal x9083=(gconst1*x9080);
IkReal x9084=(gconst1*x9081);
IkReal x9085=((1.0)*gconst2*x9081);
evalcond[0]=((((-1.0)*gconst2*r00*x9082))+((r01*x9083))+((r02*x9081)));
evalcond[1]=(((r21*x9084))+(((-1.0)*r20*x9085))+(((-1.0)*r22*x9082)));
evalcond[2]=(((r11*x9084))+(((-1.0)*r10*x9085))+(((-1.0)*r12*x9082)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9085))+((r01*x9084))+(((-1.0)*r02*x9082)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9082))+((cj1*sj2))+((r21*x9083))+((r22*x9081)));
evalcond[5]=(((r11*x9083))+((r12*x9081))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9082))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9086=(gconst1*r01);
IkReal x9087=(gconst2*r00);
CheckValue<IkReal> x9088=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9086*x9086)))+(((-1.0)*(r02*r02)))+(((2.0)*x9086*x9087))+(((-1.0)*(x9087*x9087))))),-1);
if(!x9088.valid){
continue;
}
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal((x9086+(((-1.0)*x9087)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9088.value)))+(x9089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9090=IKcos(j4);
IkReal x9091=IKsin(j4);
IkReal x9092=((1.0)*x9090);
IkReal x9093=(gconst1*x9090);
IkReal x9094=(gconst1*x9091);
IkReal x9095=((1.0)*gconst2*x9091);
evalcond[0]=((((-1.0)*gconst2*r00*x9092))+((r01*x9093))+((r02*x9091)));
evalcond[1]=((((-1.0)*r20*x9095))+((r21*x9094))+(((-1.0)*r22*x9092)));
evalcond[2]=(((r11*x9094))+(((-1.0)*r10*x9095))+(((-1.0)*r12*x9092)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9095))+((r01*x9094))+(((-1.0)*r02*x9092)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9092))+((cj1*sj2))+((r21*x9093))+((r22*x9091)));
evalcond[5]=(((r11*x9093))+(((-1.0)*sj1*sj2))+((r12*x9091))+(((-1.0)*gconst2*r10*x9092))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9096.valid){
continue;
}
CheckValue<IkReal> x9097=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9096.value)+(((1.5707963267949)*(x9097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9098=IKcos(j4);
IkReal x9099=IKsin(j4);
IkReal x9100=((1.0)*x9098);
IkReal x9101=(gconst1*x9098);
IkReal x9102=(gconst1*x9099);
IkReal x9103=((1.0)*gconst2*x9099);
evalcond[0]=((((-1.0)*gconst2*r00*x9100))+((r02*x9099))+((r01*x9101)));
evalcond[1]=((((-1.0)*r22*x9100))+((r21*x9102))+(((-1.0)*r20*x9103)));
evalcond[2]=((((-1.0)*r10*x9103))+(((-1.0)*r12*x9100))+((r11*x9102)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9100))+(((-1.0)*r00*x9103))+((r01*x9102)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x9101))+((r22*x9099))+(((-1.0)*gconst2*r20*x9100)));
evalcond[5]=((((-1.0)*gconst2*r10*x9100))+(((-1.0)*sj1*sj2))+((r12*x9099))+((r11*x9101))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9104=((-1.0)*r20);
IkReal x9105=((-1.0)*px);
CheckValue<IkReal> x9107 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9104),IKFAST_ATAN2_MAGTHRESH);
if(!x9107.valid){
continue;
}
IkReal x9106=((-1.0)*(x9107.value));
sj5=gconst1;
cj5=gconst2;
j5=x9106;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9105);
rxp1_1=(px*r21);
rxp1_2=(r11*x9105);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9106;
IkReal gconst1=r21;
IkReal gconst2=x9104;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9108=((-1.0)*r20);
IkReal x9109=((-1.0)*px);
CheckValue<IkReal> x9111 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9108),IKFAST_ATAN2_MAGTHRESH);
if(!x9111.valid){
continue;
}
IkReal x9110=((-1.0)*(x9111.value));
sj5=gconst1;
cj5=gconst2;
j5=x9110;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9109);
rxp1_1=(px*r21);
rxp1_2=(r11*x9109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9110;
IkReal gconst1=r21;
IkReal gconst2=x9108;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9112=((-1.0)*r20);
IkReal x9113=((-1.0)*px);
CheckValue<IkReal> x9115 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9112),IKFAST_ATAN2_MAGTHRESH);
if(!x9115.valid){
continue;
}
IkReal x9114=((-1.0)*(x9115.value));
sj5=gconst1;
cj5=gconst2;
j5=x9114;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9113);
rxp1_1=(px*r21);
rxp1_2=(r11*x9113);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9114;
IkReal gconst1=r21;
IkReal gconst2=x9112;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9118=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9118.valid){
continue;
}
IkReal x9116=x9118.value;
IkReal x9117=(sj0*x9116);
cj4array[0]=((((-1.0)*sj1*sj2*x9117))+((cj1*cj2*x9117)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9119=IKsin(j4);
IkReal x9120=IKcos(j4);
IkReal x9121=((1.0)*gconst2);
IkReal x9122=(gconst1*r21);
evalcond[0]=(r02*x9119);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9120)));
evalcond[2]=(((x9119*x9122))+(((-1.0)*r20*x9119*x9121)));
evalcond[3]=(((gconst1*r11*x9119))+(((-1.0)*r10*x9119*x9121)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r20*x9120*x9121))+((cj1*sj2))+((x9120*x9122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9125=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9125.valid){
continue;
}
IkReal x9123=x9125.value;
IkReal x9124=((1.0)*x9123);
cj4array[0]=((((-1.0)*cj1*sj2*x9124))+(((-1.0)*cj2*sj1*x9124)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9126=IKsin(j4);
IkReal x9127=IKcos(j4);
IkReal x9128=((1.0)*sj0);
IkReal x9129=(gconst1*x9126);
IkReal x9130=((1.0)*x9127);
IkReal x9131=((1.0)*gconst2*x9126);
evalcond[0]=(r02*x9126);
evalcond[1]=((((-1.0)*r02*x9130))+(((-1.0)*x9128)));
evalcond[2]=((((-1.0)*r20*x9131))+((r21*x9129)));
evalcond[3]=((((-1.0)*r10*x9131))+((r11*x9129)));
evalcond[4]=((((-1.0)*gconst2*r10*x9130))+((gconst1*r11*x9127))+(((-1.0)*cj1*cj2*x9128))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(r02,-1);
if(!x9132.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9132.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9133=IKsin(j4);
IkReal x9134=IKcos(j4);
IkReal x9135=(gconst1*r21);
IkReal x9136=(gconst1*r11);
IkReal x9137=((1.0)*gconst2*r10);
IkReal x9138=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9133);
evalcond[1]=((((-1.0)*x9133*x9138))+((x9133*x9135)));
evalcond[2]=((((-1.0)*x9133*x9137))+((x9133*x9136)));
evalcond[3]=(((cj2*sj1))+((x9134*x9135))+((cj1*sj2))+(((-1.0)*x9134*x9138)));
evalcond[4]=(((x9134*x9136))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9134*x9137))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9139=(cj2*sj1);
IkReal x9140=(cj1*sj2);
IkReal x9141=(gconst1*r21);
IkReal x9142=((1.0)*gconst2*r20);
CheckValue<IkReal> x9143=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9142))+(((-1.0)*(x9141*x9141)))+(((2.0)*gconst2*r20*x9141))+(((-1.0)*(r22*r22))))),-1);
if(!x9143.valid){
continue;
}
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal((((r22*x9139))+((r22*x9140)))),IkReal(((((-1.0)*x9140*x9142))+((x9140*x9141))+((x9139*x9141))+(((-1.0)*x9139*x9142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9143.value)))+(x9144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9145=IKsin(j4);
IkReal x9146=IKcos(j4);
IkReal x9147=(sj1*sj2);
IkReal x9148=(gconst2*r10);
IkReal x9149=(gconst2*r00);
IkReal x9150=(gconst2*r20);
IkReal x9151=((1.0)*x9146);
IkReal x9152=(gconst1*x9146);
IkReal x9153=((1.0)*cj1*cj2);
IkReal x9154=(gconst1*x9145);
IkReal x9155=((1.0)*x9145);
evalcond[0]=((((-1.0)*x9150*x9155))+(((-1.0)*r22*x9151))+((r21*x9154)));
evalcond[1]=(((r11*x9154))+cj0+(((-1.0)*r12*x9151))+(((-1.0)*x9148*x9155)));
evalcond[2]=((((-1.0)*r02*x9151))+(((-1.0)*sj0))+((r01*x9154))+(((-1.0)*x9149*x9155)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9150*x9151))+((r21*x9152))+((r22*x9145)));
evalcond[4]=((((-1.0)*cj0*x9153))+((cj0*x9147))+((r01*x9152))+(((-1.0)*x9149*x9151))+((r02*x9145)));
evalcond[5]=(((r11*x9152))+((sj0*x9147))+(((-1.0)*x9148*x9151))+((r12*x9145))+(((-1.0)*sj0*x9153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9156=((1.0)*gconst2);
CheckValue<IkReal> x9157 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9156))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9157.valid){
continue;
}
CheckValue<IkReal> x9158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9156))+(((-1.0)*gconst1*r10)))),-1);
if(!x9158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9157.value)+(((1.5707963267949)*(x9158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9159=IKsin(j4);
IkReal x9160=IKcos(j4);
IkReal x9161=(sj1*sj2);
IkReal x9162=(gconst2*r10);
IkReal x9163=(gconst2*r00);
IkReal x9164=(gconst2*r20);
IkReal x9165=((1.0)*x9160);
IkReal x9166=(gconst1*x9160);
IkReal x9167=((1.0)*cj1*cj2);
IkReal x9168=(gconst1*x9159);
IkReal x9169=((1.0)*x9159);
evalcond[0]=((((-1.0)*r22*x9165))+(((-1.0)*x9164*x9169))+((r21*x9168)));
evalcond[1]=(cj0+(((-1.0)*r12*x9165))+(((-1.0)*x9162*x9169))+((r11*x9168)));
evalcond[2]=(((r01*x9168))+(((-1.0)*sj0))+(((-1.0)*x9163*x9169))+(((-1.0)*r02*x9165)));
evalcond[3]=(((cj2*sj1))+((r22*x9159))+((cj1*sj2))+(((-1.0)*x9164*x9165))+((r21*x9166)));
evalcond[4]=(((r01*x9166))+((r02*x9159))+(((-1.0)*x9163*x9165))+((cj0*x9161))+(((-1.0)*cj0*x9167)));
evalcond[5]=((((-1.0)*x9162*x9165))+((sj0*x9161))+(((-1.0)*sj0*x9167))+((r11*x9166))+((r12*x9159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9170=((1.0)*gconst2);
CheckValue<IkReal> x9171=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9170))+(((-1.0)*gconst1*r00)))),-1);
if(!x9171.valid){
continue;
}
CheckValue<IkReal> x9172 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9171.value)))+(x9172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9173=IKsin(j4);
IkReal x9174=IKcos(j4);
IkReal x9175=(sj1*sj2);
IkReal x9176=(gconst2*r10);
IkReal x9177=(gconst2*r00);
IkReal x9178=(gconst2*r20);
IkReal x9179=((1.0)*x9174);
IkReal x9180=(gconst1*x9174);
IkReal x9181=((1.0)*cj1*cj2);
IkReal x9182=(gconst1*x9173);
IkReal x9183=((1.0)*x9173);
evalcond[0]=((((-1.0)*r22*x9179))+(((-1.0)*x9178*x9183))+((r21*x9182)));
evalcond[1]=(((r11*x9182))+cj0+(((-1.0)*x9176*x9183))+(((-1.0)*r12*x9179)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9177*x9183))+(((-1.0)*r02*x9179))+((r01*x9182)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9178*x9179))+((r21*x9180))+((r22*x9173)));
evalcond[4]=(((r02*x9173))+(((-1.0)*cj0*x9181))+((cj0*x9175))+(((-1.0)*x9177*x9179))+((r01*x9180)));
evalcond[5]=(((r11*x9180))+((sj0*x9175))+((r12*x9173))+(((-1.0)*x9176*x9179))+(((-1.0)*sj0*x9181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9184=((-1.0)*r20);
IkReal x9185=x8852;
CheckValue<IkReal> x9187 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9184),IKFAST_ATAN2_MAGTHRESH);
if(!x9187.valid){
continue;
}
IkReal x9186=((-1.0)*(x9187.value));
sj5=gconst1;
cj5=gconst2;
j5=x9186;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9186;
IkReal gconst1=(r21*x9185);
IkReal gconst2=(x9184*x9185);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9188=((-1.0)*r20);
IkReal x9189=x8852;
CheckValue<IkReal> x9191 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9188),IKFAST_ATAN2_MAGTHRESH);
if(!x9191.valid){
continue;
}
IkReal x9190=((-1.0)*(x9191.value));
sj5=gconst1;
cj5=gconst2;
j5=x9190;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9190;
IkReal gconst1=(r21*x9189);
IkReal gconst2=(x9188*x9189);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9192=((-1.0)*r20);
IkReal x9193=x8852;
CheckValue<IkReal> x9195 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9192),IKFAST_ATAN2_MAGTHRESH);
if(!x9195.valid){
continue;
}
IkReal x9194=((-1.0)*(x9195.value));
sj5=gconst1;
cj5=gconst2;
j5=x9194;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9194;
IkReal gconst1=(r21*x9193);
IkReal gconst2=(x9192*x9193);
IkReal x9196=r22*r22;
CheckValue<IkReal> x9199=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9196))),-1);
if(!x9199.valid){
continue;
}
IkReal x9197=x9199.value;
IkReal x9198=(((x9197*(r20*r20*r20*r20)))+x9196+((x9197*(r21*r21*r21*r21)))+(((2.0)*x9197*(r20*r20)*(r21*r21))));
j4eval[0]=x9198;
j4eval[1]=IKsign(x9198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9200=((-1.0)*r20);
IkReal x9201=x8852;
CheckValue<IkReal> x9203 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9200),IKFAST_ATAN2_MAGTHRESH);
if(!x9203.valid){
continue;
}
IkReal x9202=((-1.0)*(x9203.value));
sj5=gconst1;
cj5=gconst2;
j5=x9202;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9202;
IkReal gconst1=(r21*x9201);
IkReal gconst2=(x9200*x9201);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9204=((-1.0)*r20);
IkReal x9205=x8852;
CheckValue<IkReal> x9207 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9204),IKFAST_ATAN2_MAGTHRESH);
if(!x9207.valid){
continue;
}
IkReal x9206=((-1.0)*(x9207.value));
sj5=gconst1;
cj5=gconst2;
j5=x9206;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9206;
IkReal gconst1=(r21*x9205);
IkReal gconst2=(x9204*x9205);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9208=((-1.0)*r20);
IkReal x9209=x8852;
CheckValue<IkReal> x9211 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9208),IKFAST_ATAN2_MAGTHRESH);
if(!x9211.valid){
continue;
}
IkReal x9210=((-1.0)*(x9211.value));
sj5=gconst1;
cj5=gconst2;
j5=x9210;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9210;
IkReal gconst1=(r21*x9209);
IkReal gconst2=(x9208*x9209);
IkReal x9212=r22*r22;
IkReal x9213=(cj1*r12*sj2);
IkReal x9214=(cj2*r12*sj1);
CheckValue<IkReal> x9218=IKPowWithIntegerCheck(((-1.0)+x9212),-1);
if(!x9218.valid){
continue;
}
IkReal x9215=x9218.value;
if((((1.0)+(((-1.0)*x9212)))) < -0.00001)
continue;
IkReal x9216=IKsqrt(((1.0)+(((-1.0)*x9212))));
IkReal x9217=((1.0)*r22*x9215*x9216);
j4eval[0]=((IKabs((x9213+x9214)))+(IKabs(((((-1.0)*x9213*x9217))+(((-1.0)*x9214*x9217))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9219=((1.0)*gconst1);
IkReal x9220=(cj2*sj1);
IkReal x9221=(gconst2*r10);
IkReal x9222=(cj1*sj2);
CheckValue<IkReal> x9223 = IKatan2WithCheck(IkReal((((x9221*x9222))+(((-1.0)*r11*x9219*x9222))+(((-1.0)*r11*x9219*x9220))+((x9220*x9221)))),IkReal((((r12*x9222))+((r12*x9220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9223.valid){
continue;
}
CheckValue<IkReal> x9224=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9219))+(((-1.0)*gconst2*r01)))),-1);
if(!x9224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9223.value)+(((1.5707963267949)*(x9224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9225=IKsin(j4);
IkReal x9226=IKcos(j4);
IkReal x9227=((1.0)*x9226);
IkReal x9228=(gconst2*x9226);
IkReal x9229=(gconst1*x9225);
IkReal x9230=((1.0)*x9225);
evalcond[0]=(((r21*x9229))+(((-1.0)*gconst2*r20*x9230))+(((-1.0)*r22*x9227)));
evalcond[1]=(((r01*x9229))+(((-1.0)*r02*x9227))+(((-1.0)*gconst2*r00*x9230)));
evalcond[2]=((((-1.0)*r12*x9230))+(((-1.0)*gconst1*r11*x9227))+((r10*x9228)));
evalcond[3]=((1.0)+((r11*x9229))+(((-1.0)*gconst2*r10*x9230))+(((-1.0)*r12*x9227)));
evalcond[4]=(((cj2*sj1))+((r20*x9228))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9227))+(((-1.0)*r22*x9230)));
evalcond[5]=(((r00*x9228))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9227))+(((-1.0)*r02*x9230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9231=(gconst1*r11);
IkReal x9232=(gconst2*r10);
CheckValue<IkReal> x9233 = IKatan2WithCheck(IkReal((x9232+(((-1.0)*x9231)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9233.valid){
continue;
}
CheckValue<IkReal> x9234=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9231*x9231)+(x9232*x9232)+(((-2.0)*x9231*x9232)))),-1);
if(!x9234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9233.value)+(((1.5707963267949)*(x9234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9235=IKsin(j4);
IkReal x9236=IKcos(j4);
IkReal x9237=((1.0)*x9236);
IkReal x9238=(gconst2*x9236);
IkReal x9239=(gconst1*x9235);
IkReal x9240=((1.0)*x9235);
evalcond[0]=(((r21*x9239))+(((-1.0)*gconst2*r20*x9240))+(((-1.0)*r22*x9237)));
evalcond[1]=(((r01*x9239))+(((-1.0)*r02*x9237))+(((-1.0)*gconst2*r00*x9240)));
evalcond[2]=((((-1.0)*r12*x9240))+((r10*x9238))+(((-1.0)*gconst1*r11*x9237)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9237))+(((-1.0)*gconst2*r10*x9240))+((r11*x9239)));
evalcond[4]=((((-1.0)*r22*x9240))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9237))+((r20*x9238)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9237))+(((-1.0)*r02*x9240))+((r00*x9238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9241=((1.0)*gconst2);
CheckValue<IkReal> x9242 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9241))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9242.valid){
continue;
}
CheckValue<IkReal> x9243=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9241)))),-1);
if(!x9243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9242.value)+(((1.5707963267949)*(x9243.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9244=IKsin(j4);
IkReal x9245=IKcos(j4);
IkReal x9246=((1.0)*x9245);
IkReal x9247=(gconst2*x9245);
IkReal x9248=(gconst1*x9244);
IkReal x9249=((1.0)*x9244);
evalcond[0]=((((-1.0)*r22*x9246))+((r21*x9248))+(((-1.0)*gconst2*r20*x9249)));
evalcond[1]=(((r01*x9248))+(((-1.0)*r02*x9246))+(((-1.0)*gconst2*r00*x9249)));
evalcond[2]=((((-1.0)*gconst1*r11*x9246))+(((-1.0)*r12*x9249))+((r10*x9247)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9249))+(((-1.0)*r12*x9246))+((r11*x9248)));
evalcond[4]=((((-1.0)*r22*x9249))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9246))+((r20*x9247)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9246))+((r00*x9247))+(((-1.0)*r02*x9249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9250=((-1.0)*r20);
IkReal x9251=x8852;
CheckValue<IkReal> x9253 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9250),IKFAST_ATAN2_MAGTHRESH);
if(!x9253.valid){
continue;
}
IkReal x9252=((-1.0)*(x9253.value));
sj5=gconst1;
cj5=gconst2;
j5=x9252;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9252;
IkReal gconst1=(r21*x9251);
IkReal gconst2=(x9250*x9251);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9254=((-1.0)*r20);
IkReal x9255=x8852;
CheckValue<IkReal> x9257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9254),IKFAST_ATAN2_MAGTHRESH);
if(!x9257.valid){
continue;
}
IkReal x9256=((-1.0)*(x9257.value));
sj5=gconst1;
cj5=gconst2;
j5=x9256;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9256;
IkReal gconst1=(r21*x9255);
IkReal gconst2=(x9254*x9255);
IkReal x9258=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9262=IKPowWithIntegerCheck(x9258,-1);
if(!x9262.valid){
continue;
}
IkReal x9259=x9262.value;
IkReal x9260=((1.0)*x9259);
IkReal x9261=((((-2.0)*r10*r11*r20*r21*x9259))+(((-1.0)*(r12*r12)))+(((-1.0)*x9260*(r10*r10)*(r20*r20)))+(((-1.0)*x9260*(r11*r11)*(r21*r21))));
j4eval[0]=x9261;
j4eval[1]=r12;
j4eval[2]=x9258;
j4eval[3]=IKsign(x9261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9263=((-1.0)*r20);
IkReal x9264=x8852;
CheckValue<IkReal> x9266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9263),IKFAST_ATAN2_MAGTHRESH);
if(!x9266.valid){
continue;
}
IkReal x9265=((-1.0)*(x9266.value));
sj5=gconst1;
cj5=gconst2;
j5=x9265;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9265;
IkReal gconst1=(r21*x9264);
IkReal gconst2=(x9263*x9264);
IkReal x9267=r22*r22;
IkReal x9268=(cj1*r12*sj2);
IkReal x9269=(cj2*r12*sj1);
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(((-1.0)+x9267),-1);
if(!x9273.valid){
continue;
}
IkReal x9270=x9273.value;
if((((1.0)+(((-1.0)*x9267)))) < -0.00001)
continue;
IkReal x9271=IKsqrt(((1.0)+(((-1.0)*x9267))));
IkReal x9272=((1.0)*r22*x9270*x9271);
j4eval[0]=((IKabs((x9269+x9268)))+(IKabs(((((-1.0)*x9269*x9272))+(((-1.0)*x9268*x9272))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9274=((1.0)*gconst1);
IkReal x9275=(cj2*sj1);
IkReal x9276=(gconst2*r10);
IkReal x9277=(cj1*sj2);
CheckValue<IkReal> x9278=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9274)))),-1);
if(!x9278.valid){
continue;
}
CheckValue<IkReal> x9279 = IKatan2WithCheck(IkReal((((x9275*x9276))+((x9276*x9277))+(((-1.0)*r11*x9274*x9275))+(((-1.0)*r11*x9274*x9277)))),IkReal((((r12*x9275))+((r12*x9277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9278.value)))+(x9279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9280=IKsin(j4);
IkReal x9281=IKcos(j4);
IkReal x9282=((1.0)*x9281);
IkReal x9283=(gconst2*x9281);
IkReal x9284=(gconst1*x9280);
IkReal x9285=((1.0)*x9280);
evalcond[0]=((((-1.0)*gconst2*r20*x9285))+(((-1.0)*r22*x9282))+((r21*x9284)));
evalcond[1]=((((-1.0)*gconst2*r00*x9285))+((r01*x9284))+(((-1.0)*r02*x9282)));
evalcond[2]=((((-1.0)*r12*x9285))+(((-1.0)*gconst1*r11*x9282))+((r10*x9283)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9282))+((r11*x9284))+(((-1.0)*gconst2*r10*x9285)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9282))+((cj1*sj2))+(((-1.0)*r22*x9285))+((r20*x9283)));
evalcond[5]=((((-1.0)*gconst1*r01*x9282))+(((-1.0)*sj1*sj2))+((r00*x9283))+(((-1.0)*r02*x9285))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9286=(gconst1*r11);
IkReal x9287=(gconst2*r10);
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9287*x9287)))+(((-1.0)*(x9286*x9286)))+(((-1.0)*(r12*r12)))+(((2.0)*x9286*x9287)))),-1);
if(!x9288.valid){
continue;
}
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal((x9287+(((-1.0)*x9286)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9288.value)))+(x9289.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9290=IKsin(j4);
IkReal x9291=IKcos(j4);
IkReal x9292=((1.0)*x9291);
IkReal x9293=(gconst2*x9291);
IkReal x9294=(gconst1*x9290);
IkReal x9295=((1.0)*x9290);
evalcond[0]=((((-1.0)*gconst2*r20*x9295))+(((-1.0)*r22*x9292))+((r21*x9294)));
evalcond[1]=((((-1.0)*gconst2*r00*x9295))+((r01*x9294))+(((-1.0)*r02*x9292)));
evalcond[2]=((((-1.0)*gconst1*r11*x9292))+((r10*x9293))+(((-1.0)*r12*x9295)));
evalcond[3]=((-1.0)+((r11*x9294))+(((-1.0)*gconst2*r10*x9295))+(((-1.0)*r12*x9292)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9292))+((cj1*sj2))+(((-1.0)*r22*x9295))+((r20*x9293)));
evalcond[5]=(((r00*x9293))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9292))+(((-1.0)*r02*x9295))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
CheckValue<IkReal> x9297=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9296.value)+(((1.5707963267949)*(x9297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9298=IKsin(j4);
IkReal x9299=IKcos(j4);
IkReal x9300=((1.0)*x9299);
IkReal x9301=(gconst2*x9299);
IkReal x9302=(gconst1*x9298);
IkReal x9303=((1.0)*x9298);
evalcond[0]=(((r21*x9302))+(((-1.0)*r22*x9300))+(((-1.0)*gconst2*r20*x9303)));
evalcond[1]=((((-1.0)*gconst2*r00*x9303))+((r01*x9302))+(((-1.0)*r02*x9300)));
evalcond[2]=((((-1.0)*gconst1*r11*x9300))+((r10*x9301))+(((-1.0)*r12*x9303)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9303))+((r11*x9302))+(((-1.0)*r12*x9300)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9300))+((cj1*sj2))+((r20*x9301))+(((-1.0)*r22*x9303)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9300))+(((-1.0)*r02*x9303))+((r00*x9301))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9304=((-1.0)*r20);
IkReal x9305=x8852;
CheckValue<IkReal> x9307 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9304),IKFAST_ATAN2_MAGTHRESH);
if(!x9307.valid){
continue;
}
IkReal x9306=((-1.0)*(x9307.value));
sj5=gconst1;
cj5=gconst2;
j5=x9306;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9306;
IkReal gconst1=(r21*x9305);
IkReal gconst2=(x9304*x9305);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9308=((-1.0)*r20);
IkReal x9309=x8852;
CheckValue<IkReal> x9311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9308),IKFAST_ATAN2_MAGTHRESH);
if(!x9311.valid){
continue;
}
IkReal x9310=((-1.0)*(x9311.value));
sj5=gconst1;
cj5=gconst2;
j5=x9310;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9310;
IkReal gconst1=(r21*x9309);
IkReal gconst2=(x9308*x9309);
IkReal x9312=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9316=IKPowWithIntegerCheck(x9312,-1);
if(!x9316.valid){
continue;
}
IkReal x9313=x9316.value;
IkReal x9314=((1.0)*x9313);
IkReal x9315=((((-2.0)*r00*r01*r20*r21*x9313))+(((-1.0)*(r02*r02)))+(((-1.0)*x9314*(r00*r00)*(r20*r20)))+(((-1.0)*x9314*(r01*r01)*(r21*r21))));
j4eval[0]=x9315;
j4eval[1]=IKsign(x9315);
j4eval[2]=r02;
j4eval[3]=x9312;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9317=((-1.0)*r20);
IkReal x9318=x8852;
CheckValue<IkReal> x9320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9317),IKFAST_ATAN2_MAGTHRESH);
if(!x9320.valid){
continue;
}
IkReal x9319=((-1.0)*(x9320.value));
sj5=gconst1;
cj5=gconst2;
j5=x9319;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9319;
IkReal gconst1=(r21*x9318);
IkReal gconst2=(x9317*x9318);
IkReal x9321=r22*r22;
IkReal x9322=(cj1*r02*sj2);
IkReal x9323=(cj2*r02*sj1);
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(((-1.0)+x9321),-1);
if(!x9327.valid){
continue;
}
IkReal x9324=x9327.value;
if((((1.0)+(((-1.0)*x9321)))) < -0.00001)
continue;
IkReal x9325=IKsqrt(((1.0)+(((-1.0)*x9321))));
IkReal x9326=((1.0)*r22*x9324*x9325);
j4eval[0]=((IKabs((x9322+x9323)))+(IKabs(((((-1.0)*x9322*x9326))+(((-1.0)*x9323*x9326))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9328=(cj2*sj1);
IkReal x9329=(cj1*sj2);
IkReal x9330=(gconst2*r00);
IkReal x9331=((1.0)*gconst1*r01);
CheckValue<IkReal> x9332=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9332.valid){
continue;
}
CheckValue<IkReal> x9333 = IKatan2WithCheck(IkReal((((x9329*x9330))+((x9328*x9330))+(((-1.0)*x9329*x9331))+(((-1.0)*x9328*x9331)))),IkReal((((r02*x9328))+((r02*x9329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9332.value)))+(x9333.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9334=IKsin(j4);
IkReal x9335=IKcos(j4);
IkReal x9336=(gconst1*r11);
IkReal x9337=(gconst1*r21);
IkReal x9338=(gconst1*r01);
IkReal x9339=((1.0)*x9335);
IkReal x9340=(gconst2*x9335);
IkReal x9341=((1.0)*x9334);
evalcond[0]=((((-1.0)*r22*x9339))+(((-1.0)*gconst2*r20*x9341))+((x9334*x9337)));
evalcond[1]=((((-1.0)*r12*x9339))+((x9334*x9336))+(((-1.0)*gconst2*r10*x9341)));
evalcond[2]=(((r00*x9340))+(((-1.0)*r02*x9341))+(((-1.0)*x9338*x9339)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9339))+(((-1.0)*gconst2*r00*x9341))+((x9334*x9338)));
evalcond[4]=((((-1.0)*x9337*x9339))+((cj2*sj1))+(((-1.0)*r22*x9341))+((cj1*sj2))+((r20*x9340)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9340))+(((-1.0)*r12*x9341))+(((-1.0)*x9336*x9339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9342=(gconst2*r00);
IkReal x9343=(gconst1*r01);
CheckValue<IkReal> x9344 = IKatan2WithCheck(IkReal((x9342+(((-1.0)*x9343)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9344.valid){
continue;
}
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9343*x9343)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9342*x9342)))+(((2.0)*x9342*x9343)))),-1);
if(!x9345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9344.value)+(((1.5707963267949)*(x9345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9346=IKsin(j4);
IkReal x9347=IKcos(j4);
IkReal x9348=(gconst1*r11);
IkReal x9349=(gconst1*r21);
IkReal x9350=(gconst1*r01);
IkReal x9351=((1.0)*x9347);
IkReal x9352=(gconst2*x9347);
IkReal x9353=((1.0)*x9346);
evalcond[0]=(((x9346*x9349))+(((-1.0)*r22*x9351))+(((-1.0)*gconst2*r20*x9353)));
evalcond[1]=(((x9346*x9348))+(((-1.0)*r12*x9351))+(((-1.0)*gconst2*r10*x9353)));
evalcond[2]=((((-1.0)*r02*x9353))+((r00*x9352))+(((-1.0)*x9350*x9351)));
evalcond[3]=((-1.0)+((x9346*x9350))+(((-1.0)*r02*x9351))+(((-1.0)*gconst2*r00*x9353)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9353))+((cj1*sj2))+((r20*x9352))+(((-1.0)*x9349*x9351)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9353))+((r10*x9352))+(((-1.0)*x9348*x9351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9354=((1.0)*gconst2);
CheckValue<IkReal> x9355 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9355.valid){
continue;
}
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9354)))),-1);
if(!x9356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9355.value)+(((1.5707963267949)*(x9356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9357=IKsin(j4);
IkReal x9358=IKcos(j4);
IkReal x9359=(gconst1*r11);
IkReal x9360=(gconst1*r21);
IkReal x9361=(gconst1*r01);
IkReal x9362=((1.0)*x9358);
IkReal x9363=(gconst2*x9358);
IkReal x9364=((1.0)*x9357);
evalcond[0]=(((x9357*x9360))+(((-1.0)*r22*x9362))+(((-1.0)*gconst2*r20*x9364)));
evalcond[1]=((((-1.0)*gconst2*r10*x9364))+(((-1.0)*r12*x9362))+((x9357*x9359)));
evalcond[2]=((((-1.0)*r02*x9364))+((r00*x9363))+(((-1.0)*x9361*x9362)));
evalcond[3]=((-1.0)+((x9357*x9361))+(((-1.0)*r02*x9362))+(((-1.0)*gconst2*r00*x9364)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9360*x9362))+((cj1*sj2))+(((-1.0)*r22*x9364))+((r20*x9363)));
evalcond[5]=((((-1.0)*x9359*x9362))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9364))+((r10*x9363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9365=((-1.0)*r20);
IkReal x9366=x8852;
CheckValue<IkReal> x9368 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9365),IKFAST_ATAN2_MAGTHRESH);
if(!x9368.valid){
continue;
}
IkReal x9367=((-1.0)*(x9368.value));
sj5=gconst1;
cj5=gconst2;
j5=x9367;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9367;
IkReal gconst1=(r21*x9366);
IkReal gconst2=(x9365*x9366);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9369=((-1.0)*r20);
IkReal x9370=x8852;
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9369),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
IkReal x9371=((-1.0)*(x9372.value));
sj5=gconst1;
cj5=gconst2;
j5=x9371;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9371;
IkReal gconst1=(r21*x9370);
IkReal gconst2=(x9369*x9370);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9373=((-1.0)*r20);
IkReal x9374=x8852;
CheckValue<IkReal> x9376 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9373),IKFAST_ATAN2_MAGTHRESH);
if(!x9376.valid){
continue;
}
IkReal x9375=((-1.0)*(x9376.value));
sj5=gconst1;
cj5=gconst2;
j5=x9375;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9375;
IkReal gconst1=(r21*x9374);
IkReal gconst2=(x9373*x9374);
IkReal x9377=r22*r22;
IkReal x9378=(cj1*r02*sj2);
IkReal x9379=(cj2*r02*sj1);
CheckValue<IkReal> x9383=IKPowWithIntegerCheck(((-1.0)+x9377),-1);
if(!x9383.valid){
continue;
}
IkReal x9380=x9383.value;
if((((1.0)+(((-1.0)*x9377)))) < -0.00001)
continue;
IkReal x9381=IKsqrt(((1.0)+(((-1.0)*x9377))));
IkReal x9382=((1.0)*r22*x9380*x9381);
j4eval[0]=((IKabs((x9379+x9378)))+(IKabs(((((-1.0)*x9378*x9382))+(((-1.0)*x9379*x9382))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9384=(cj2*sj1);
IkReal x9385=(cj1*sj2);
IkReal x9386=(gconst2*r00);
IkReal x9387=((1.0)*gconst1*r01);
CheckValue<IkReal> x9388 = IKatan2WithCheck(IkReal(((((-1.0)*x9384*x9387))+((x9385*x9386))+((x9384*x9386))+(((-1.0)*x9385*x9387)))),IkReal((((r02*x9384))+((r02*x9385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9388.valid){
continue;
}
CheckValue<IkReal> x9389=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9388.value)+(((1.5707963267949)*(x9389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9390=IKsin(j4);
IkReal x9391=IKcos(j4);
IkReal x9392=(gconst1*r11);
IkReal x9393=(gconst1*r21);
IkReal x9394=(gconst1*r01);
IkReal x9395=((1.0)*x9391);
IkReal x9396=(gconst2*x9391);
IkReal x9397=((1.0)*x9390);
evalcond[0]=(((x9390*x9393))+(((-1.0)*gconst2*r20*x9397))+(((-1.0)*r22*x9395)));
evalcond[1]=((((-1.0)*r12*x9395))+((x9390*x9392))+(((-1.0)*gconst2*r10*x9397)));
evalcond[2]=((((-1.0)*r02*x9397))+(((-1.0)*x9394*x9395))+((r00*x9396)));
evalcond[3]=((1.0)+((x9390*x9394))+(((-1.0)*gconst2*r00*x9397))+(((-1.0)*r02*x9395)));
evalcond[4]=(((cj2*sj1))+((r20*x9396))+((cj1*sj2))+(((-1.0)*r22*x9397))+(((-1.0)*x9393*x9395)));
evalcond[5]=((((-1.0)*r12*x9397))+((r10*x9396))+(((-1.0)*sj1*sj2))+(((-1.0)*x9392*x9395))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9398=(gconst1*r01);
IkReal x9399=(gconst2*r00);
CheckValue<IkReal> x9400 = IKatan2WithCheck(IkReal((x9399+(((-1.0)*x9398)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9400.valid){
continue;
}
CheckValue<IkReal> x9401=IKPowWithIntegerCheck(IKsign(((x9399*x9399)+(x9398*x9398)+(r02*r02)+(((-2.0)*x9398*x9399)))),-1);
if(!x9401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9400.value)+(((1.5707963267949)*(x9401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9402=IKsin(j4);
IkReal x9403=IKcos(j4);
IkReal x9404=(gconst1*r11);
IkReal x9405=(gconst1*r21);
IkReal x9406=(gconst1*r01);
IkReal x9407=((1.0)*x9403);
IkReal x9408=(gconst2*x9403);
IkReal x9409=((1.0)*x9402);
evalcond[0]=((((-1.0)*r22*x9407))+((x9402*x9405))+(((-1.0)*gconst2*r20*x9409)));
evalcond[1]=((((-1.0)*gconst2*r10*x9409))+(((-1.0)*r12*x9407))+((x9402*x9404)));
evalcond[2]=((((-1.0)*x9406*x9407))+(((-1.0)*r02*x9409))+((r00*x9408)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9407))+((x9402*x9406))+(((-1.0)*gconst2*r00*x9409)));
evalcond[4]=((((-1.0)*r22*x9409))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9405*x9407))+((r20*x9408)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9404*x9407))+(((-1.0)*r12*x9409))+((r10*x9408))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
CheckValue<IkReal> x9411=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9410.value)+(((1.5707963267949)*(x9411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9412=IKsin(j4);
IkReal x9413=IKcos(j4);
IkReal x9414=(gconst1*r11);
IkReal x9415=(gconst1*r21);
IkReal x9416=(gconst1*r01);
IkReal x9417=((1.0)*x9413);
IkReal x9418=(gconst2*x9413);
IkReal x9419=((1.0)*x9412);
evalcond[0]=(((x9412*x9415))+(((-1.0)*gconst2*r20*x9419))+(((-1.0)*r22*x9417)));
evalcond[1]=(((x9412*x9414))+(((-1.0)*r12*x9417))+(((-1.0)*gconst2*r10*x9419)));
evalcond[2]=((((-1.0)*r02*x9419))+((r00*x9418))+(((-1.0)*x9416*x9417)));
evalcond[3]=((1.0)+((x9412*x9416))+(((-1.0)*r02*x9417))+(((-1.0)*gconst2*r00*x9419)));
evalcond[4]=(((r20*x9418))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9415*x9417))+(((-1.0)*r22*x9419)));
evalcond[5]=((((-1.0)*r12*x9419))+((r10*x9418))+(((-1.0)*x9414*x9417))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9420=((-1.0)*r20);
IkReal x9421=((-1.0)*px);
CheckValue<IkReal> x9423 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9420),IKFAST_ATAN2_MAGTHRESH);
if(!x9423.valid){
continue;
}
IkReal x9422=((-1.0)*(x9423.value));
sj5=gconst1;
cj5=gconst2;
j5=x9422;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9421);
rxp1_1=(px*r21);
rxp1_2=(r11*x9421);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9422;
IkReal gconst1=r21;
IkReal gconst2=x9420;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9424=((-1.0)*r20);
IkReal x9425=((-1.0)*px);
CheckValue<IkReal> x9427 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9424),IKFAST_ATAN2_MAGTHRESH);
if(!x9427.valid){
continue;
}
IkReal x9426=((-1.0)*(x9427.value));
sj5=gconst1;
cj5=gconst2;
j5=x9426;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9425);
rxp1_1=(px*r21);
rxp1_2=(r11*x9425);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9426;
IkReal gconst1=r21;
IkReal gconst2=x9424;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9428=((-1.0)*r20);
IkReal x9429=((-1.0)*px);
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9428),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
IkReal x9430=((-1.0)*(x9431.value));
sj5=gconst1;
cj5=gconst2;
j5=x9430;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9429);
rxp1_1=(px*r21);
rxp1_2=(r11*x9429);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9430;
IkReal gconst1=r21;
IkReal gconst2=x9428;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9434=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9434.valid){
continue;
}
IkReal x9432=x9434.value;
IkReal x9433=(sj0*x9432);
cj4array[0]=((((-1.0)*sj1*sj2*x9433))+((cj1*cj2*x9433)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9435=IKsin(j4);
IkReal x9436=IKcos(j4);
IkReal x9437=(gconst1*x9435);
IkReal x9438=((1.0)*x9436);
IkReal x9439=((1.0)*gconst2*x9435);
evalcond[0]=((-1.0)*r02*x9435);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9438)));
evalcond[2]=((((-1.0)*r20*x9439))+((r21*x9437)));
evalcond[3]=(((r11*x9437))+(((-1.0)*r10*x9439)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9438))+((gconst2*r20*x9436))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9442=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9442.valid){
continue;
}
IkReal x9440=x9442.value;
IkReal x9441=((1.0)*x9440);
cj4array[0]=((((-1.0)*cj2*sj1*x9441))+(((-1.0)*cj1*sj2*x9441)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9443=IKsin(j4);
IkReal x9444=IKcos(j4);
IkReal x9445=(gconst2*r10);
IkReal x9446=((1.0)*sj0);
IkReal x9447=(gconst1*r11);
IkReal x9448=((1.0)*x9443);
IkReal x9449=((1.0)*x9444);
evalcond[0]=((-1.0)*r02*x9443);
evalcond[1]=((((-1.0)*x9446))+(((-1.0)*r02*x9449)));
evalcond[2]=(((gconst1*r21*x9443))+(((-1.0)*gconst2*r20*x9448)));
evalcond[3]=((((-1.0)*x9445*x9448))+((x9443*x9447)));
evalcond[4]=(((x9444*x9445))+(((-1.0)*cj1*cj2*x9446))+((sj0*sj1*sj2))+(((-1.0)*x9447*x9449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9450=IKPowWithIntegerCheck(r02,-1);
if(!x9450.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9450.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9451=IKsin(j4);
IkReal x9452=IKcos(j4);
IkReal x9453=(gconst2*r10);
IkReal x9454=(gconst1*r11);
IkReal x9455=(gconst1*r21);
IkReal x9456=(gconst2*r20);
IkReal x9457=((1.0)*x9451);
IkReal x9458=((1.0)*x9452);
evalcond[0]=((-1.0)*r02*x9451);
evalcond[1]=((((-1.0)*x9456*x9457))+((x9451*x9455)));
evalcond[2]=(((x9451*x9454))+(((-1.0)*x9453*x9457)));
evalcond[3]=(((cj2*sj1))+((x9452*x9456))+((cj1*sj2))+(((-1.0)*x9455*x9458)));
evalcond[4]=(((x9452*x9453))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9454*x9458))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9459=(cj2*sj1);
IkReal x9460=(cj1*sj2);
IkReal x9461=(gconst1*r21);
IkReal x9462=((1.0)*gconst2*r20);
CheckValue<IkReal> x9463 = IKatan2WithCheck(IkReal((((r22*x9460))+((r22*x9459)))),IkReal((((x9459*x9461))+(((-1.0)*x9459*x9462))+((x9460*x9461))+(((-1.0)*x9460*x9462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9463.valid){
continue;
}
CheckValue<IkReal> x9464=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9461))+(x9461*x9461)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9463.value)+(((1.5707963267949)*(x9464.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9465=IKsin(j4);
IkReal x9466=IKcos(j4);
IkReal x9467=(gconst1*r11);
IkReal x9468=(sj1*sj2);
IkReal x9469=(gconst1*r21);
IkReal x9470=(gconst1*r01);
IkReal x9471=((1.0)*x9466);
IkReal x9472=(gconst2*x9466);
IkReal x9473=((1.0)*cj1*cj2);
IkReal x9474=((1.0)*x9465);
evalcond[0]=(((x9465*x9469))+(((-1.0)*gconst2*r20*x9474))+(((-1.0)*r22*x9471)));
evalcond[1]=(((x9465*x9467))+cj0+(((-1.0)*r12*x9471))+(((-1.0)*gconst2*r10*x9474)));
evalcond[2]=((((-1.0)*r02*x9471))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9474))+((x9465*x9470)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9469*x9471))+(((-1.0)*r22*x9474))+((r20*x9472)));
evalcond[4]=((((-1.0)*r02*x9474))+(((-1.0)*x9470*x9471))+((r00*x9472))+((cj0*x9468))+(((-1.0)*cj0*x9473)));
evalcond[5]=(((r10*x9472))+(((-1.0)*sj0*x9473))+((sj0*x9468))+(((-1.0)*r12*x9474))+(((-1.0)*x9467*x9471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9475=((1.0)*gconst2);
CheckValue<IkReal> x9476=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9475)))),-1);
if(!x9476.valid){
continue;
}
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9475))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9476.value)))+(x9477.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9478=IKsin(j4);
IkReal x9479=IKcos(j4);
IkReal x9480=(gconst1*r11);
IkReal x9481=(sj1*sj2);
IkReal x9482=(gconst1*r21);
IkReal x9483=(gconst1*r01);
IkReal x9484=((1.0)*x9479);
IkReal x9485=(gconst2*x9479);
IkReal x9486=((1.0)*cj1*cj2);
IkReal x9487=((1.0)*x9478);
evalcond[0]=(((x9478*x9482))+(((-1.0)*r22*x9484))+(((-1.0)*gconst2*r20*x9487)));
evalcond[1]=(((x9478*x9480))+cj0+(((-1.0)*gconst2*r10*x9487))+(((-1.0)*r12*x9484)));
evalcond[2]=(((x9478*x9483))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9487))+(((-1.0)*r02*x9484)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x9485))+(((-1.0)*x9482*x9484))+(((-1.0)*r22*x9487)));
evalcond[4]=((((-1.0)*cj0*x9486))+((r00*x9485))+(((-1.0)*r02*x9487))+((cj0*x9481))+(((-1.0)*x9483*x9484)));
evalcond[5]=(((sj0*x9481))+(((-1.0)*sj0*x9486))+(((-1.0)*x9480*x9484))+((r10*x9485))+(((-1.0)*r12*x9487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9488=((1.0)*gconst2);
CheckValue<IkReal> x9489=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9488)))),-1);
if(!x9489.valid){
continue;
}
CheckValue<IkReal> x9490 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9488))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9489.value)))+(x9490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9491=IKsin(j4);
IkReal x9492=IKcos(j4);
IkReal x9493=(gconst1*r11);
IkReal x9494=(sj1*sj2);
IkReal x9495=(gconst1*r21);
IkReal x9496=(gconst1*r01);
IkReal x9497=((1.0)*x9492);
IkReal x9498=(gconst2*x9492);
IkReal x9499=((1.0)*cj1*cj2);
IkReal x9500=((1.0)*x9491);
evalcond[0]=((((-1.0)*r22*x9497))+((x9491*x9495))+(((-1.0)*gconst2*r20*x9500)));
evalcond[1]=(cj0+((x9491*x9493))+(((-1.0)*r12*x9497))+(((-1.0)*gconst2*r10*x9500)));
evalcond[2]=((((-1.0)*r02*x9497))+(((-1.0)*sj0))+((x9491*x9496))+(((-1.0)*gconst2*r00*x9500)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9500))+(((-1.0)*x9495*x9497))+((r20*x9498)));
evalcond[4]=(((cj0*x9494))+(((-1.0)*x9496*x9497))+((r00*x9498))+(((-1.0)*r02*x9500))+(((-1.0)*cj0*x9499)));
evalcond[5]=((((-1.0)*x9493*x9497))+((r10*x9498))+(((-1.0)*r12*x9500))+(((-1.0)*sj0*x9499))+((sj0*x9494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9501=((-1.0)*r20);
IkReal x9502=x8852;
CheckValue<IkReal> x9504 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9501),IKFAST_ATAN2_MAGTHRESH);
if(!x9504.valid){
continue;
}
IkReal x9503=((-1.0)*(x9504.value));
sj5=gconst1;
cj5=gconst2;
j5=x9503;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9503;
IkReal gconst1=(r21*x9502);
IkReal gconst2=(x9501*x9502);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9505=((-1.0)*r20);
IkReal x9506=x8852;
CheckValue<IkReal> x9508 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9505),IKFAST_ATAN2_MAGTHRESH);
if(!x9508.valid){
continue;
}
IkReal x9507=((-1.0)*(x9508.value));
sj5=gconst1;
cj5=gconst2;
j5=x9507;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9507;
IkReal gconst1=(r21*x9506);
IkReal gconst2=(x9505*x9506);
CheckValue<IkReal> x9516=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9516.valid){
continue;
}
IkReal x9509=x9516.value;
IkReal x9510=(sj3*x9509);
IkReal x9511=(r11*x9510);
IkReal x9512=(r00*x9510);
IkReal x9513=(r01*x9510);
IkReal x9514=(r10*x9510);
IkReal x9515=(r20*r21*x9510);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9513))+((r01*x9511*(r21*r21)))+((r00*r20*r21*x9511))+((r10*x9512*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9517=gconst2*gconst2;
IkReal x9518=gconst1*gconst1;
IkReal x9519=((1.0)*cj3);
IkReal x9520=((1.0)*sj3);
IkReal x9521=(r11*sj3);
IkReal x9522=(r10*sj3);
IkReal x9523=(gconst1*gconst2*r00);
IkReal x9524=(gconst1*gconst2*r01);
IkReal x9525=(r00*x9517);
IkReal x9526=(r01*x9518);
CheckValue<IkReal> x9527 = IKatan2WithCheck(IkReal((((gconst1*r02*x9522))+((gconst2*r02*x9521)))),IkReal((((x9521*x9524))+(((-1.0)*r10*x9520*x9523))+(((-1.0)*r11*x9520*x9525))+((x9522*x9526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9527.valid){
continue;
}
CheckValue<IkReal> x9528=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9524))+(((-1.0)*r10*x9519*x9525))+((cj3*r11*x9523))+(((-1.0)*r02*r12*x9519))+(((-1.0)*r11*x9519*x9526)))),-1);
if(!x9528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9527.value)+(((1.5707963267949)*(x9528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9529=IKsin(j4);
IkReal x9530=IKcos(j4);
IkReal x9531=(sj1*sj2);
IkReal x9532=(gconst1*sj3);
IkReal x9533=(cj3*gconst1);
IkReal x9534=(cj3*gconst2);
IkReal x9535=((1.0)*cj2);
IkReal x9536=(cj1*sj2);
IkReal x9537=(gconst2*sj3);
IkReal x9538=(cj1*x9535);
IkReal x9539=((1.0)*x9530);
IkReal x9540=((1.0)*x9529);
IkReal x9541=(gconst1*x9529);
IkReal x9542=(cj3*x9529);
IkReal x9543=(x9530*x9537);
evalcond[0]=((((-1.0)*r22*x9539))+((r21*x9541))+(((-1.0)*gconst2*r20*x9540)));
evalcond[1]=((((-1.0)*r02*x9539))+((r01*x9541))+(((-1.0)*gconst2*r00*x9540)));
evalcond[2]=((1.0)+((r11*x9541))+(((-1.0)*gconst2*r10*x9540))+(((-1.0)*r12*x9539)));
evalcond[3]=(((r12*x9542))+((r11*x9537))+(((-1.0)*r10*x9534*x9539))+((r10*x9532))+((r11*x9530*x9533)));
evalcond[4]=((((-1.0)*r11*x9532*x9539))+((r11*x9534))+((r10*x9533))+((r10*x9543))+(((-1.0)*r12*sj3*x9540)));
evalcond[5]=(((r22*x9542))+((cj2*sj1))+((r20*x9532))+(((-1.0)*r20*x9534*x9539))+x9536+((r21*x9530*x9533))+((r21*x9537)));
evalcond[6]=((((-1.0)*r00*x9534*x9539))+((r01*x9530*x9533))+((r02*x9542))+((r00*x9532))+((r01*x9537))+(((-1.0)*x9538))+x9531);
evalcond[7]=(((r20*x9533))+(((-1.0)*r22*sj3*x9540))+((r20*x9543))+(((-1.0)*x9538))+x9531+(((-1.0)*r21*x9532*x9539))+((r21*x9534)));
evalcond[8]=((((-1.0)*r01*x9532*x9539))+(((-1.0)*r02*sj3*x9540))+(((-1.0)*x9536))+((r00*x9533))+((r01*x9534))+((r00*x9543))+(((-1.0)*sj1*x9535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9544=gconst2*gconst2;
IkReal x9545=gconst1*gconst1;
IkReal x9546=(gconst2*r11);
IkReal x9547=(cj3*r02);
IkReal x9548=(gconst1*r01);
IkReal x9549=(cj3*r10);
IkReal x9550=(r10*sj3);
IkReal x9551=((1.0)*gconst1*r00);
IkReal x9552=(r01*x9545);
IkReal x9553=(r00*x9544);
CheckValue<IkReal> x9554=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst2*x9548*x9550))+((r11*sj3*x9552))+((x9550*x9553))+(((-1.0)*sj3*x9546*x9551)))),-1);
if(!x9554.valid){
continue;
}
CheckValue<IkReal> x9555 = IKatan2WithCheck(IkReal((((x9546*x9547))+((gconst1*r10*x9547)))),IkReal(((((-1.0)*cj3*r11*x9553))+((x9549*x9552))+(((-1.0)*gconst2*x9549*x9551))+((cj3*x9546*x9548)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9554.value)))+(x9555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9556=IKsin(j4);
IkReal x9557=IKcos(j4);
IkReal x9558=(sj1*sj2);
IkReal x9559=(gconst1*sj3);
IkReal x9560=(cj3*gconst1);
IkReal x9561=(cj3*gconst2);
IkReal x9562=((1.0)*cj2);
IkReal x9563=(cj1*sj2);
IkReal x9564=(gconst2*sj3);
IkReal x9565=(cj1*x9562);
IkReal x9566=((1.0)*x9557);
IkReal x9567=((1.0)*x9556);
IkReal x9568=(gconst1*x9556);
IkReal x9569=(cj3*x9556);
IkReal x9570=(x9557*x9564);
evalcond[0]=(((r21*x9568))+(((-1.0)*gconst2*r20*x9567))+(((-1.0)*r22*x9566)));
evalcond[1]=((((-1.0)*gconst2*r00*x9567))+((r01*x9568))+(((-1.0)*r02*x9566)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9567))+((r11*x9568))+(((-1.0)*r12*x9566)));
evalcond[3]=((((-1.0)*r10*x9561*x9566))+((r11*x9557*x9560))+((r12*x9569))+((r10*x9559))+((r11*x9564)));
evalcond[4]=((((-1.0)*r11*x9559*x9566))+((r11*x9561))+(((-1.0)*r12*sj3*x9567))+((r10*x9560))+((r10*x9570)));
evalcond[5]=(((r21*x9564))+((cj2*sj1))+((r21*x9557*x9560))+((r20*x9559))+((r22*x9569))+x9563+(((-1.0)*r20*x9561*x9566)));
evalcond[6]=(((r01*x9564))+(((-1.0)*r00*x9561*x9566))+(((-1.0)*x9565))+x9558+((r00*x9559))+((r01*x9557*x9560))+((r02*x9569)));
evalcond[7]=(((r21*x9561))+(((-1.0)*r22*sj3*x9567))+(((-1.0)*x9565))+(((-1.0)*r21*x9559*x9566))+x9558+((r20*x9570))+((r20*x9560)));
evalcond[8]=((((-1.0)*r02*sj3*x9567))+(((-1.0)*x9563))+((r01*x9561))+((r00*x9560))+((r00*x9570))+(((-1.0)*r01*x9559*x9566))+(((-1.0)*sj1*x9562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=((1.0)*gconst2);
CheckValue<IkReal> x9572 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9571))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9572.valid){
continue;
}
CheckValue<IkReal> x9573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9571)))),-1);
if(!x9573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9572.value)+(((1.5707963267949)*(x9573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9574=IKsin(j4);
IkReal x9575=IKcos(j4);
IkReal x9576=(sj1*sj2);
IkReal x9577=(gconst1*sj3);
IkReal x9578=(cj3*gconst1);
IkReal x9579=(cj3*gconst2);
IkReal x9580=((1.0)*cj2);
IkReal x9581=(cj1*sj2);
IkReal x9582=(gconst2*sj3);
IkReal x9583=(cj1*x9580);
IkReal x9584=((1.0)*x9575);
IkReal x9585=((1.0)*x9574);
IkReal x9586=(gconst1*x9574);
IkReal x9587=(cj3*x9574);
IkReal x9588=(x9575*x9582);
evalcond[0]=((((-1.0)*r22*x9584))+((r21*x9586))+(((-1.0)*gconst2*r20*x9585)));
evalcond[1]=(((r01*x9586))+(((-1.0)*gconst2*r00*x9585))+(((-1.0)*r02*x9584)));
evalcond[2]=((1.0)+((r11*x9586))+(((-1.0)*gconst2*r10*x9585))+(((-1.0)*r12*x9584)));
evalcond[3]=(((r11*x9582))+((r11*x9575*x9578))+(((-1.0)*r10*x9579*x9584))+((r12*x9587))+((r10*x9577)));
evalcond[4]=((((-1.0)*r12*sj3*x9585))+(((-1.0)*r11*x9577*x9584))+((r10*x9588))+((r11*x9579))+((r10*x9578)));
evalcond[5]=(((cj2*sj1))+((r21*x9575*x9578))+(((-1.0)*r20*x9579*x9584))+((r22*x9587))+x9581+((r21*x9582))+((r20*x9577)));
evalcond[6]=(((r00*x9577))+((r01*x9582))+((r01*x9575*x9578))+x9576+(((-1.0)*x9583))+(((-1.0)*r00*x9579*x9584))+((r02*x9587)));
evalcond[7]=(((r20*x9588))+((r21*x9579))+(((-1.0)*r21*x9577*x9584))+(((-1.0)*r22*sj3*x9585))+x9576+(((-1.0)*x9583))+((r20*x9578)));
evalcond[8]=((((-1.0)*sj1*x9580))+((r00*x9588))+((r00*x9578))+(((-1.0)*r02*sj3*x9585))+((r01*x9579))+(((-1.0)*r01*x9577*x9584))+(((-1.0)*x9581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9589=((-1.0)*r20);
IkReal x9590=x8852;
CheckValue<IkReal> x9592 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9589),IKFAST_ATAN2_MAGTHRESH);
if(!x9592.valid){
continue;
}
IkReal x9591=((-1.0)*(x9592.value));
sj5=gconst1;
cj5=gconst2;
j5=x9591;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9591;
IkReal gconst1=(r21*x9590);
IkReal gconst2=(x9589*x9590);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9593=((-1.0)*r20);
IkReal x9594=x8852;
CheckValue<IkReal> x9596 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9593),IKFAST_ATAN2_MAGTHRESH);
if(!x9596.valid){
continue;
}
IkReal x9595=((-1.0)*(x9596.value));
sj5=gconst1;
cj5=gconst2;
j5=x9595;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9595;
IkReal gconst1=(r21*x9594);
IkReal gconst2=(x9593*x9594);
CheckValue<IkReal> x9604=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9604.valid){
continue;
}
IkReal x9597=x9604.value;
IkReal x9598=(sj3*x9597);
IkReal x9599=(r11*x9598);
IkReal x9600=(r00*x9598);
IkReal x9601=(r01*x9598);
IkReal x9602=(r10*x9598);
IkReal x9603=(r20*r21*x9598);
j4eval[0]=IKsign((((r10*x9600*(r20*r20)))+((r02*r12*sj3))+((r10*r20*r21*x9601))+((r01*x9599*(r21*r21)))+((r00*r20*r21*x9599))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9605=gconst2*gconst2;
IkReal x9606=gconst1*gconst1;
IkReal x9607=((1.0)*cj3);
IkReal x9608=((1.0)*sj3);
IkReal x9609=(r11*sj3);
IkReal x9610=(r10*sj3);
IkReal x9611=(gconst1*gconst2*r00);
IkReal x9612=(gconst1*gconst2*r01);
IkReal x9613=(r00*x9605);
IkReal x9614=(r01*x9606);
CheckValue<IkReal> x9615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9607*x9613))+(((-1.0)*r02*r12*x9607))+(((-1.0)*r11*x9607*x9614))+((cj3*r11*x9611))+((cj3*r10*x9612)))),-1);
if(!x9615.valid){
continue;
}
CheckValue<IkReal> x9616 = IKatan2WithCheck(IkReal((((gconst1*r02*x9610))+((gconst2*r02*x9609)))),IkReal(((((-1.0)*r11*x9608*x9613))+((x9609*x9612))+(((-1.0)*r10*x9608*x9611))+((x9610*x9614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9615.value)))+(x9616.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9617=IKsin(j4);
IkReal x9618=IKcos(j4);
IkReal x9619=(cj2*sj1);
IkReal x9620=(cj1*sj2);
IkReal x9621=(gconst1*sj3);
IkReal x9622=(cj3*gconst1);
IkReal x9623=(sj1*sj2);
IkReal x9624=(cj3*gconst2);
IkReal x9625=(cj1*cj2);
IkReal x9626=(gconst2*sj3);
IkReal x9627=((1.0)*x9618);
IkReal x9628=((1.0)*x9617);
IkReal x9629=(gconst1*x9617);
IkReal x9630=(cj3*x9617);
IkReal x9631=(x9620+x9619);
IkReal x9632=(x9618*x9626);
evalcond[0]=((((-1.0)*r22*x9627))+((r21*x9629))+(((-1.0)*gconst2*r20*x9628)));
evalcond[1]=(((r01*x9629))+(((-1.0)*gconst2*r00*x9628))+(((-1.0)*r02*x9627)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x9627))+((r11*x9629))+(((-1.0)*gconst2*r10*x9628)));
evalcond[3]=(((r10*x9621))+((r11*x9618*x9622))+((r12*x9630))+(((-1.0)*r10*x9624*x9627))+((r11*x9626)));
evalcond[4]=(((r10*x9632))+((r10*x9622))+(((-1.0)*r12*sj3*x9628))+(((-1.0)*r11*x9621*x9627))+((r11*x9624)));
evalcond[5]=(((r20*x9621))+((r21*x9626))+((r21*x9618*x9622))+((r22*x9630))+x9631+(((-1.0)*r20*x9624*x9627)));
evalcond[6]=(((r01*x9626))+((r00*x9621))+(((-1.0)*x9623))+(((-1.0)*r00*x9624*x9627))+x9625+((r02*x9630))+((r01*x9618*x9622)));
evalcond[7]=(((r01*x9624))+((r00*x9632))+((r00*x9622))+(((-1.0)*r01*x9621*x9627))+(((-1.0)*r02*sj3*x9628))+x9631);
evalcond[8]=(((r20*x9622))+((r20*x9632))+(((-1.0)*r22*sj3*x9628))+(((-1.0)*x9625))+((r21*x9624))+x9623+(((-1.0)*r21*x9621*x9627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9633=gconst2*gconst2;
IkReal x9634=gconst1*gconst1;
IkReal x9635=(gconst2*r11);
IkReal x9636=(cj3*r02);
IkReal x9637=(gconst1*r01);
IkReal x9638=(cj3*r10);
IkReal x9639=(r10*sj3);
IkReal x9640=((1.0)*gconst1*r00);
IkReal x9641=(r01*x9634);
IkReal x9642=(r00*x9633);
CheckValue<IkReal> x9643 = IKatan2WithCheck(IkReal((((x9635*x9636))+((gconst1*r10*x9636)))),IkReal((((x9638*x9641))+(((-1.0)*cj3*r11*x9642))+((cj3*x9635*x9637))+(((-1.0)*gconst2*x9638*x9640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9643.valid){
continue;
}
CheckValue<IkReal> x9644=IKPowWithIntegerCheck(IKsign((((r11*sj3*x9641))+((r02*r12*sj3))+((x9639*x9642))+(((-1.0)*gconst2*x9637*x9639))+(((-1.0)*sj3*x9635*x9640)))),-1);
if(!x9644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9643.value)+(((1.5707963267949)*(x9644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9645=IKsin(j4);
IkReal x9646=IKcos(j4);
IkReal x9647=(cj2*sj1);
IkReal x9648=(cj1*sj2);
IkReal x9649=(gconst1*sj3);
IkReal x9650=(cj3*gconst1);
IkReal x9651=(sj1*sj2);
IkReal x9652=(cj3*gconst2);
IkReal x9653=(cj1*cj2);
IkReal x9654=(gconst2*sj3);
IkReal x9655=((1.0)*x9646);
IkReal x9656=((1.0)*x9645);
IkReal x9657=(gconst1*x9645);
IkReal x9658=(cj3*x9645);
IkReal x9659=(x9648+x9647);
IkReal x9660=(x9646*x9654);
evalcond[0]=((((-1.0)*gconst2*r20*x9656))+((r21*x9657))+(((-1.0)*r22*x9655)));
evalcond[1]=(((r01*x9657))+(((-1.0)*gconst2*r00*x9656))+(((-1.0)*r02*x9655)));
evalcond[2]=((-1.0)+((r11*x9657))+(((-1.0)*r12*x9655))+(((-1.0)*gconst2*r10*x9656)));
evalcond[3]=(((r11*x9654))+(((-1.0)*r10*x9652*x9655))+((r12*x9658))+((r10*x9649))+((r11*x9646*x9650)));
evalcond[4]=((((-1.0)*r11*x9649*x9655))+((r11*x9652))+((r10*x9660))+((r10*x9650))+(((-1.0)*r12*sj3*x9656)));
evalcond[5]=(((r21*x9646*x9650))+((r21*x9654))+(((-1.0)*r20*x9652*x9655))+x9659+((r20*x9649))+((r22*x9658)));
evalcond[6]=((((-1.0)*r00*x9652*x9655))+((r01*x9654))+((r00*x9649))+x9653+(((-1.0)*x9651))+((r02*x9658))+((r01*x9646*x9650)));
evalcond[7]=((((-1.0)*r01*x9649*x9655))+(((-1.0)*r02*sj3*x9656))+((r00*x9660))+((r01*x9652))+((r00*x9650))+x9659);
evalcond[8]=(((r21*x9652))+((r20*x9650))+((r20*x9660))+x9651+(((-1.0)*x9653))+(((-1.0)*r21*x9649*x9655))+(((-1.0)*r22*sj3*x9656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9661 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9661.valid){
continue;
}
CheckValue<IkReal> x9662=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9661.value)+(((1.5707963267949)*(x9662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9663=IKsin(j4);
IkReal x9664=IKcos(j4);
IkReal x9665=(cj2*sj1);
IkReal x9666=(cj1*sj2);
IkReal x9667=(gconst1*sj3);
IkReal x9668=(cj3*gconst1);
IkReal x9669=(sj1*sj2);
IkReal x9670=(cj3*gconst2);
IkReal x9671=(cj1*cj2);
IkReal x9672=(gconst2*sj3);
IkReal x9673=((1.0)*x9664);
IkReal x9674=((1.0)*x9663);
IkReal x9675=(gconst1*x9663);
IkReal x9676=(cj3*x9663);
IkReal x9677=(x9666+x9665);
IkReal x9678=(x9664*x9672);
evalcond[0]=(((r21*x9675))+(((-1.0)*gconst2*r20*x9674))+(((-1.0)*r22*x9673)));
evalcond[1]=(((r01*x9675))+(((-1.0)*r02*x9673))+(((-1.0)*gconst2*r00*x9674)));
evalcond[2]=((-1.0)+((r11*x9675))+(((-1.0)*gconst2*r10*x9674))+(((-1.0)*r12*x9673)));
evalcond[3]=(((r12*x9676))+((r11*x9664*x9668))+((r11*x9672))+((r10*x9667))+(((-1.0)*r10*x9670*x9673)));
evalcond[4]=(((r11*x9670))+((r10*x9678))+((r10*x9668))+(((-1.0)*r11*x9667*x9673))+(((-1.0)*r12*sj3*x9674)));
evalcond[5]=(((r21*x9672))+(((-1.0)*r20*x9670*x9673))+((r20*x9667))+x9677+((r22*x9676))+((r21*x9664*x9668)));
evalcond[6]=(((r01*x9672))+((r00*x9667))+x9671+(((-1.0)*x9669))+((r02*x9676))+((r01*x9664*x9668))+(((-1.0)*r00*x9670*x9673)));
evalcond[7]=((((-1.0)*r02*sj3*x9674))+((r01*x9670))+((r00*x9678))+((r00*x9668))+x9677+(((-1.0)*r01*x9667*x9673)));
evalcond[8]=(((r21*x9670))+((r20*x9668))+((r20*x9678))+x9669+(((-1.0)*x9671))+(((-1.0)*r22*sj3*x9674))+(((-1.0)*r21*x9667*x9673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9679=((-1.0)*r20);
IkReal x9680=x8852;
CheckValue<IkReal> x9682 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9679),IKFAST_ATAN2_MAGTHRESH);
if(!x9682.valid){
continue;
}
IkReal x9681=((-1.0)*(x9682.value));
sj5=gconst1;
cj5=gconst2;
j5=x9681;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9681;
IkReal gconst1=(r21*x9680);
IkReal gconst2=(x9679*x9680);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9683=((-1.0)*r20);
IkReal x9684=x8852;
CheckValue<IkReal> x9686 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9683),IKFAST_ATAN2_MAGTHRESH);
if(!x9686.valid){
continue;
}
IkReal x9685=((-1.0)*(x9686.value));
sj5=gconst1;
cj5=gconst2;
j5=x9685;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9685;
IkReal gconst1=(r21*x9684);
IkReal gconst2=(x9683*x9684);
CheckValue<IkReal> x9694=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9694.valid){
continue;
}
IkReal x9687=x9694.value;
IkReal x9688=(sj3*x9687);
IkReal x9689=(r11*x9688);
IkReal x9690=(r00*x9688);
IkReal x9691=(r01*x9688);
IkReal x9692=(r10*x9688);
IkReal x9693=(r20*r21*x9688);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9689*(r21*r21)))+((r00*r20*r21*x9689))+((r10*r20*r21*x9691))+((r10*x9690*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9695=gconst1*gconst1;
IkReal x9696=gconst2*gconst2;
IkReal x9697=((1.0)*cj3);
IkReal x9698=(gconst2*r10);
IkReal x9699=(r01*sj3);
IkReal x9700=(gconst1*r00*sj3);
IkReal x9701=(gconst1*gconst2*r11);
IkReal x9702=(r10*x9696);
IkReal x9703=(r11*x9695);
CheckValue<IkReal> x9704 = IKatan2WithCheck(IkReal((((r12*x9700))+((gconst2*r12*x9699)))),IkReal(((((-1.0)*x9698*x9700))+(((-1.0)*x9699*x9702))+((x9699*x9701))+((r00*sj3*x9703)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9704.valid){
continue;
}
CheckValue<IkReal> x9705=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9698))+(((-1.0)*r01*x9697*x9703))+(((-1.0)*r00*x9697*x9702))+((cj3*r00*x9701))+(((-1.0)*r02*r12*x9697)))),-1);
if(!x9705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9704.value)+(((1.5707963267949)*(x9705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9706=IKsin(j4);
IkReal x9707=IKcos(j4);
IkReal x9708=(sj1*sj2);
IkReal x9709=(gconst1*sj3);
IkReal x9710=(cj3*gconst1);
IkReal x9711=(cj3*gconst2);
IkReal x9712=((1.0)*cj2);
IkReal x9713=(cj1*sj2);
IkReal x9714=(gconst2*sj3);
IkReal x9715=(cj1*x9712);
IkReal x9716=((1.0)*x9707);
IkReal x9717=((1.0)*x9706);
IkReal x9718=(gconst1*x9706);
IkReal x9719=(cj3*x9706);
IkReal x9720=(x9707*x9714);
evalcond[0]=((((-1.0)*gconst2*r20*x9717))+((r21*x9718))+(((-1.0)*r22*x9716)));
evalcond[1]=(((r11*x9718))+(((-1.0)*gconst2*r10*x9717))+(((-1.0)*r12*x9716)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9716))+(((-1.0)*gconst2*r00*x9717))+((r01*x9718)));
evalcond[3]=((((-1.0)*r00*x9711*x9716))+((r02*x9719))+((r01*x9707*x9710))+((r00*x9709))+((r01*x9714)));
evalcond[4]=((((-1.0)*r02*sj3*x9717))+(((-1.0)*r01*x9709*x9716))+((r01*x9711))+((r00*x9710))+((r00*x9720)));
evalcond[5]=(((cj2*sj1))+((r22*x9719))+(((-1.0)*r20*x9711*x9716))+((r20*x9709))+((r21*x9707*x9710))+x9713+((r21*x9714)));
evalcond[6]=(((r10*x9709))+(((-1.0)*r10*x9711*x9716))+((r12*x9719))+((r11*x9714))+x9708+(((-1.0)*x9715))+((r11*x9707*x9710)));
evalcond[7]=((((-1.0)*r21*x9709*x9716))+(((-1.0)*r22*sj3*x9717))+x9708+((r20*x9720))+((r20*x9710))+((r21*x9711))+(((-1.0)*x9715)));
evalcond[8]=((((-1.0)*r12*sj3*x9717))+(((-1.0)*r11*x9709*x9716))+((r11*x9711))+(((-1.0)*sj1*x9712))+((r10*x9710))+(((-1.0)*x9713))+((r10*x9720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9721=gconst2*gconst2;
IkReal x9722=gconst1*gconst1;
IkReal x9723=(gconst1*r00);
IkReal x9724=(r11*sj3);
IkReal x9725=((1.0)*gconst2);
IkReal x9726=(cj3*r12);
IkReal x9727=(cj3*r11);
IkReal x9728=(gconst2*r01);
IkReal x9729=(cj3*r10);
IkReal x9730=(r10*sj3);
CheckValue<IkReal> x9731 = IKatan2WithCheck(IkReal((((x9726*x9728))+((x9723*x9726)))),IkReal((((r00*x9722*x9727))+(((-1.0)*r01*x9721*x9729))+(((-1.0)*x9723*x9725*x9729))+((gconst1*x9727*x9728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9731.valid){
continue;
}
CheckValue<IkReal> x9732=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9723*x9724*x9725))+((r00*x9721*x9730))+(((-1.0)*gconst1*r01*x9725*x9730))+((r01*x9722*x9724)))),-1);
if(!x9732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9731.value)+(((1.5707963267949)*(x9732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9733=IKsin(j4);
IkReal x9734=IKcos(j4);
IkReal x9735=(sj1*sj2);
IkReal x9736=(gconst1*sj3);
IkReal x9737=(cj3*gconst1);
IkReal x9738=(cj3*gconst2);
IkReal x9739=((1.0)*cj2);
IkReal x9740=(cj1*sj2);
IkReal x9741=(gconst2*sj3);
IkReal x9742=(cj1*x9739);
IkReal x9743=((1.0)*x9734);
IkReal x9744=((1.0)*x9733);
IkReal x9745=(gconst1*x9733);
IkReal x9746=(cj3*x9733);
IkReal x9747=(x9734*x9741);
evalcond[0]=(((r21*x9745))+(((-1.0)*gconst2*r20*x9744))+(((-1.0)*r22*x9743)));
evalcond[1]=(((r11*x9745))+(((-1.0)*gconst2*r10*x9744))+(((-1.0)*r12*x9743)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9744))+(((-1.0)*r02*x9743))+((r01*x9745)));
evalcond[3]=(((r02*x9746))+(((-1.0)*r00*x9738*x9743))+((r01*x9734*x9737))+((r01*x9741))+((r00*x9736)));
evalcond[4]=((((-1.0)*r02*sj3*x9744))+(((-1.0)*r01*x9736*x9743))+((r00*x9747))+((r01*x9738))+((r00*x9737)));
evalcond[5]=(((cj2*sj1))+((r21*x9741))+(((-1.0)*r20*x9738*x9743))+((r22*x9746))+((r20*x9736))+x9740+((r21*x9734*x9737)));
evalcond[6]=(((r11*x9741))+((r11*x9734*x9737))+x9735+(((-1.0)*x9742))+((r12*x9746))+(((-1.0)*r10*x9738*x9743))+((r10*x9736)));
evalcond[7]=(((r20*x9737))+x9735+(((-1.0)*r21*x9736*x9743))+((r20*x9747))+(((-1.0)*x9742))+((r21*x9738))+(((-1.0)*r22*sj3*x9744)));
evalcond[8]=(((r11*x9738))+((r10*x9747))+(((-1.0)*r12*sj3*x9744))+(((-1.0)*sj1*x9739))+(((-1.0)*x9740))+(((-1.0)*r11*x9736*x9743))+((r10*x9737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9748=((1.0)*gconst2);
CheckValue<IkReal> x9749 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9749.valid){
continue;
}
CheckValue<IkReal> x9750=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9748)))),-1);
if(!x9750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9749.value)+(((1.5707963267949)*(x9750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9751=IKsin(j4);
IkReal x9752=IKcos(j4);
IkReal x9753=(sj1*sj2);
IkReal x9754=(gconst1*sj3);
IkReal x9755=(cj3*gconst1);
IkReal x9756=(cj3*gconst2);
IkReal x9757=((1.0)*cj2);
IkReal x9758=(cj1*sj2);
IkReal x9759=(gconst2*sj3);
IkReal x9760=(cj1*x9757);
IkReal x9761=((1.0)*x9752);
IkReal x9762=((1.0)*x9751);
IkReal x9763=(gconst1*x9751);
IkReal x9764=(cj3*x9751);
IkReal x9765=(x9752*x9759);
evalcond[0]=((((-1.0)*r22*x9761))+((r21*x9763))+(((-1.0)*gconst2*r20*x9762)));
evalcond[1]=((((-1.0)*gconst2*r10*x9762))+(((-1.0)*r12*x9761))+((r11*x9763)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9762))+((r01*x9763))+(((-1.0)*r02*x9761)));
evalcond[3]=(((r01*x9759))+((r00*x9754))+((r01*x9752*x9755))+((r02*x9764))+(((-1.0)*r00*x9756*x9761)));
evalcond[4]=(((r01*x9756))+((r00*x9755))+((r00*x9765))+(((-1.0)*r01*x9754*x9761))+(((-1.0)*r02*sj3*x9762)));
evalcond[5]=(((cj2*sj1))+((r22*x9764))+((r21*x9759))+x9758+(((-1.0)*r20*x9756*x9761))+((r21*x9752*x9755))+((r20*x9754)));
evalcond[6]=(((r10*x9754))+((r11*x9759))+((r12*x9764))+x9753+(((-1.0)*r10*x9756*x9761))+((r11*x9752*x9755))+(((-1.0)*x9760)));
evalcond[7]=(((r21*x9756))+x9753+(((-1.0)*r21*x9754*x9761))+((r20*x9765))+((r20*x9755))+(((-1.0)*x9760))+(((-1.0)*r22*sj3*x9762)));
evalcond[8]=(((r10*x9755))+((r11*x9756))+(((-1.0)*x9758))+((r10*x9765))+(((-1.0)*r12*sj3*x9762))+(((-1.0)*sj1*x9757))+(((-1.0)*r11*x9754*x9761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9766=((-1.0)*r20);
IkReal x9767=x8852;
CheckValue<IkReal> x9769 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9766),IKFAST_ATAN2_MAGTHRESH);
if(!x9769.valid){
continue;
}
IkReal x9768=((-1.0)*(x9769.value));
sj5=gconst1;
cj5=gconst2;
j5=x9768;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9768;
IkReal gconst1=(r21*x9767);
IkReal gconst2=(x9766*x9767);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9770=((-1.0)*r20);
IkReal x9771=x8852;
CheckValue<IkReal> x9773 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9770),IKFAST_ATAN2_MAGTHRESH);
if(!x9773.valid){
continue;
}
IkReal x9772=((-1.0)*(x9773.value));
sj5=gconst1;
cj5=gconst2;
j5=x9772;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9772;
IkReal gconst1=(r21*x9771);
IkReal gconst2=(x9770*x9771);
CheckValue<IkReal> x9781=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9781.valid){
continue;
}
IkReal x9774=x9781.value;
IkReal x9775=(sj3*x9774);
IkReal x9776=(r11*x9775);
IkReal x9777=(r00*x9775);
IkReal x9778=(r01*x9775);
IkReal x9779=(r10*x9775);
IkReal x9780=(r20*r21*x9775);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9777*(r20*r20)))+((r00*r20*r21*x9776))+((r01*x9776*(r21*r21)))+((r10*r20*r21*x9778))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9782=gconst1*gconst1;
IkReal x9783=gconst2*gconst2;
IkReal x9784=((1.0)*cj3);
IkReal x9785=(gconst2*r10);
IkReal x9786=(r01*sj3);
IkReal x9787=(gconst1*r00*sj3);
IkReal x9788=(gconst1*gconst2*r11);
IkReal x9789=(r10*x9783);
IkReal x9790=(r11*x9782);
CheckValue<IkReal> x9791 = IKatan2WithCheck(IkReal((((gconst2*r12*x9786))+((r12*x9787)))),IkReal(((((-1.0)*x9785*x9787))+(((-1.0)*x9786*x9789))+((x9786*x9788))+((r00*sj3*x9790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9791.valid){
continue;
}
CheckValue<IkReal> x9792=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9788))+(((-1.0)*r00*x9784*x9789))+(((-1.0)*r01*x9784*x9790))+(((-1.0)*r02*r12*x9784))+((cj3*gconst1*r01*x9785)))),-1);
if(!x9792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9791.value)+(((1.5707963267949)*(x9792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9793=IKsin(j4);
IkReal x9794=IKcos(j4);
IkReal x9795=(cj2*sj1);
IkReal x9796=(cj1*sj2);
IkReal x9797=(gconst1*sj3);
IkReal x9798=(cj3*gconst1);
IkReal x9799=(sj1*sj2);
IkReal x9800=(cj3*gconst2);
IkReal x9801=(cj1*cj2);
IkReal x9802=(gconst2*sj3);
IkReal x9803=((1.0)*x9794);
IkReal x9804=((1.0)*x9793);
IkReal x9805=(gconst1*x9793);
IkReal x9806=(cj3*x9793);
IkReal x9807=(x9796+x9795);
IkReal x9808=(x9794*x9802);
evalcond[0]=(((r21*x9805))+(((-1.0)*r22*x9803))+(((-1.0)*gconst2*r20*x9804)));
evalcond[1]=((((-1.0)*gconst2*r10*x9804))+((r11*x9805))+(((-1.0)*r12*x9803)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9804))+(((-1.0)*r02*x9803))+((r01*x9805)));
evalcond[3]=((((-1.0)*r00*x9800*x9803))+((r00*x9797))+((r02*x9806))+((r01*x9794*x9798))+((r01*x9802)));
evalcond[4]=(((r00*x9808))+((r00*x9798))+(((-1.0)*r01*x9797*x9803))+((r01*x9800))+(((-1.0)*r02*sj3*x9804)));
evalcond[5]=(((r21*x9802))+(((-1.0)*r20*x9800*x9803))+((r20*x9797))+((r22*x9806))+((r21*x9794*x9798))+x9807);
evalcond[6]=((((-1.0)*r10*x9800*x9803))+((r12*x9806))+((r10*x9797))+(((-1.0)*x9799))+((r11*x9802))+((r11*x9794*x9798))+x9801);
evalcond[7]=(((r10*x9808))+((r10*x9798))+(((-1.0)*r11*x9797*x9803))+((r11*x9800))+(((-1.0)*r12*sj3*x9804))+x9807);
evalcond[8]=(((r21*x9800))+(((-1.0)*r22*sj3*x9804))+(((-1.0)*x9801))+((r20*x9798))+x9799+(((-1.0)*r21*x9797*x9803))+((r20*x9808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9809=gconst2*gconst2;
IkReal x9810=gconst1*gconst1;
IkReal x9811=(gconst1*r00);
IkReal x9812=(r11*sj3);
IkReal x9813=((1.0)*gconst2);
IkReal x9814=(cj3*r12);
IkReal x9815=(cj3*r11);
IkReal x9816=(gconst2*r01);
IkReal x9817=(cj3*r10);
IkReal x9818=(r10*sj3);
CheckValue<IkReal> x9819=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst1*r01*x9813*x9818))+((r01*x9810*x9812))+((r00*x9809*x9818))+(((-1.0)*x9811*x9812*x9813)))),-1);
if(!x9819.valid){
continue;
}
CheckValue<IkReal> x9820 = IKatan2WithCheck(IkReal((((x9811*x9814))+((x9814*x9816)))),IkReal((((gconst1*x9815*x9816))+(((-1.0)*x9811*x9813*x9817))+(((-1.0)*r01*x9809*x9817))+((r00*x9810*x9815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9819.value)))+(x9820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9821=IKsin(j4);
IkReal x9822=IKcos(j4);
IkReal x9823=(cj2*sj1);
IkReal x9824=(cj1*sj2);
IkReal x9825=(gconst1*sj3);
IkReal x9826=(cj3*gconst1);
IkReal x9827=(sj1*sj2);
IkReal x9828=(cj3*gconst2);
IkReal x9829=(cj1*cj2);
IkReal x9830=(gconst2*sj3);
IkReal x9831=((1.0)*x9822);
IkReal x9832=((1.0)*x9821);
IkReal x9833=(gconst1*x9821);
IkReal x9834=(cj3*x9821);
IkReal x9835=(x9824+x9823);
IkReal x9836=(x9822*x9830);
evalcond[0]=(((r21*x9833))+(((-1.0)*r22*x9831))+(((-1.0)*gconst2*r20*x9832)));
evalcond[1]=(((r11*x9833))+(((-1.0)*gconst2*r10*x9832))+(((-1.0)*r12*x9831)));
evalcond[2]=((1.0)+((r01*x9833))+(((-1.0)*r02*x9831))+(((-1.0)*gconst2*r00*x9832)));
evalcond[3]=(((r01*x9822*x9826))+((r01*x9830))+(((-1.0)*r00*x9828*x9831))+((r00*x9825))+((r02*x9834)));
evalcond[4]=((((-1.0)*r02*sj3*x9832))+((r00*x9836))+((r00*x9826))+((r01*x9828))+(((-1.0)*r01*x9825*x9831)));
evalcond[5]=(((r20*x9825))+((r21*x9830))+((r22*x9834))+(((-1.0)*r20*x9828*x9831))+((r21*x9822*x9826))+x9835);
evalcond[6]=(((r11*x9830))+((r12*x9834))+((r11*x9822*x9826))+x9829+(((-1.0)*r10*x9828*x9831))+(((-1.0)*x9827))+((r10*x9825)));
evalcond[7]=(((r10*x9836))+((r11*x9828))+(((-1.0)*r11*x9825*x9831))+(((-1.0)*r12*sj3*x9832))+x9835+((r10*x9826)));
evalcond[8]=(((r20*x9826))+(((-1.0)*r22*sj3*x9832))+((r21*x9828))+((r20*x9836))+x9827+(((-1.0)*x9829))+(((-1.0)*r21*x9825*x9831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9837 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9837.valid){
continue;
}
CheckValue<IkReal> x9838=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9837.value)+(((1.5707963267949)*(x9838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9839=IKsin(j4);
IkReal x9840=IKcos(j4);
IkReal x9841=(cj2*sj1);
IkReal x9842=(cj1*sj2);
IkReal x9843=(gconst1*sj3);
IkReal x9844=(cj3*gconst1);
IkReal x9845=(sj1*sj2);
IkReal x9846=(cj3*gconst2);
IkReal x9847=(cj1*cj2);
IkReal x9848=(gconst2*sj3);
IkReal x9849=((1.0)*x9840);
IkReal x9850=((1.0)*x9839);
IkReal x9851=(gconst1*x9839);
IkReal x9852=(cj3*x9839);
IkReal x9853=(x9842+x9841);
IkReal x9854=(x9840*x9848);
evalcond[0]=(((r21*x9851))+(((-1.0)*gconst2*r20*x9850))+(((-1.0)*r22*x9849)));
evalcond[1]=(((r11*x9851))+(((-1.0)*r12*x9849))+(((-1.0)*gconst2*r10*x9850)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9849))+((r01*x9851))+(((-1.0)*gconst2*r00*x9850)));
evalcond[3]=(((r02*x9852))+((r01*x9840*x9844))+((r01*x9848))+((r00*x9843))+(((-1.0)*r00*x9846*x9849)));
evalcond[4]=((((-1.0)*r02*sj3*x9850))+(((-1.0)*r01*x9843*x9849))+((r01*x9846))+((r00*x9854))+((r00*x9844)));
evalcond[5]=(((r21*x9840*x9844))+((r20*x9843))+((r22*x9852))+x9853+(((-1.0)*r20*x9846*x9849))+((r21*x9848)));
evalcond[6]=(((r11*x9848))+((r10*x9843))+(((-1.0)*x9845))+((r11*x9840*x9844))+(((-1.0)*r10*x9846*x9849))+x9847+((r12*x9852)));
evalcond[7]=(((r10*x9854))+((r11*x9846))+((r10*x9844))+(((-1.0)*r11*x9843*x9849))+x9853+(((-1.0)*r12*sj3*x9850)));
evalcond[8]=((((-1.0)*x9847))+(((-1.0)*r21*x9843*x9849))+((r20*x9844))+(((-1.0)*r22*sj3*x9850))+((r20*x9854))+x9845+((r21*x9846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9855=((-1.0)*r20);
IkReal x9856=((-1.0)*px);
CheckValue<IkReal> x9858 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9855),IKFAST_ATAN2_MAGTHRESH);
if(!x9858.valid){
continue;
}
IkReal x9857=((-1.0)*(x9858.value));
sj5=gconst1;
cj5=gconst2;
j5=x9857;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9856);
rxp1_1=(px*r21);
rxp1_2=(r11*x9856);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9857;
IkReal gconst1=r21;
IkReal gconst2=x9855;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9859=((-1.0)*r20);
IkReal x9860=((-1.0)*px);
CheckValue<IkReal> x9862 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9859),IKFAST_ATAN2_MAGTHRESH);
if(!x9862.valid){
continue;
}
IkReal x9861=((-1.0)*(x9862.value));
sj5=gconst1;
cj5=gconst2;
j5=x9861;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9860);
rxp1_1=(px*r21);
rxp1_2=(r11*x9860);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9861;
IkReal gconst1=r21;
IkReal gconst2=x9859;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9863=((-1.0)*r20);
IkReal x9864=((-1.0)*px);
CheckValue<IkReal> x9866 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9863),IKFAST_ATAN2_MAGTHRESH);
if(!x9866.valid){
continue;
}
IkReal x9865=((-1.0)*(x9866.value));
sj5=gconst1;
cj5=gconst2;
j5=x9865;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9864);
rxp1_1=(px*r21);
rxp1_2=(r11*x9864);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9865;
IkReal gconst1=r21;
IkReal gconst2=x9863;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9867=((-1.0)*r20);
IkReal x9868=((-1.0)*px);
CheckValue<IkReal> x9870 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9867),IKFAST_ATAN2_MAGTHRESH);
if(!x9870.valid){
continue;
}
IkReal x9869=((-1.0)*(x9870.value));
sj5=gconst1;
cj5=gconst2;
j5=x9869;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9868);
rxp1_1=(px*r21);
rxp1_2=(r11*x9868);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9869;
IkReal gconst1=r21;
IkReal gconst2=x9867;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9871=((-1.0)*r20);
IkReal x9872=((-1.0)*px);
CheckValue<IkReal> x9874 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9871),IKFAST_ATAN2_MAGTHRESH);
if(!x9874.valid){
continue;
}
IkReal x9873=((-1.0)*(x9874.value));
sj5=gconst1;
cj5=gconst2;
j5=x9873;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9872);
rxp1_1=(px*r21);
rxp1_2=(r11*x9872);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9873;
IkReal gconst1=r21;
IkReal gconst2=x9871;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9875=((-1.0)*r20);
IkReal x9876=((-1.0)*px);
CheckValue<IkReal> x9878 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9875),IKFAST_ATAN2_MAGTHRESH);
if(!x9878.valid){
continue;
}
IkReal x9877=((-1.0)*(x9878.value));
sj5=gconst1;
cj5=gconst2;
j5=x9877;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9876);
rxp1_1=(px*r21);
rxp1_2=(r11*x9876);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9877;
IkReal gconst1=r21;
IkReal gconst2=x9875;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9881=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9881.valid){
continue;
}
IkReal x9879=x9881.value;
IkReal x9880=(sj0*x9879);
cj4array[0]=(((cj1*sj2*x9880))+((cj2*sj1*x9880)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9882=IKsin(j4);
IkReal x9883=IKcos(j4);
IkReal x9884=(gconst1*x9882);
IkReal x9885=((1.0)*x9883);
IkReal x9886=((1.0)*gconst2*x9882);
evalcond[0]=((-1.0)*r02*x9882);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9885)));
evalcond[2]=(((r21*x9884))+(((-1.0)*r20*x9886)));
evalcond[3]=((((-1.0)*r10*x9886))+((r11*x9884)));
evalcond[4]=(((gconst2*r20*x9883))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9888=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9888.valid){
continue;
}
IkReal x9887=x9888.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9887))+((cj1*cj2*x9887)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9889=IKsin(j4);
IkReal x9890=IKcos(j4);
IkReal x9891=(gconst2*r10);
IkReal x9892=((1.0)*sj0);
IkReal x9893=((1.0)*x9889);
IkReal x9894=(gconst1*x9889);
IkReal x9895=((1.0)*x9890);
evalcond[0]=((-1.0)*r02*x9889);
evalcond[1]=((((-1.0)*r02*x9895))+(((-1.0)*x9892)));
evalcond[2]=(((r21*x9894))+(((-1.0)*gconst2*r20*x9893)));
evalcond[3]=(((r11*x9894))+(((-1.0)*x9891*x9893)));
evalcond[4]=(((x9890*x9891))+(((-1.0)*cj2*sj1*x9892))+(((-1.0)*gconst1*r11*x9895))+(((-1.0)*cj1*sj2*x9892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9896=IKPowWithIntegerCheck(r02,-1);
if(!x9896.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9896.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9897=IKsin(j4);
IkReal x9898=IKcos(j4);
IkReal x9899=(gconst2*r10);
IkReal x9900=((1.0)*sj0);
IkReal x9901=(gconst1*r11);
IkReal x9902=(gconst1*r21);
IkReal x9903=(gconst2*r20);
IkReal x9904=((1.0)*x9897);
IkReal x9905=((1.0)*x9898);
evalcond[0]=((-1.0)*r02*x9897);
evalcond[1]=(((x9897*x9902))+(((-1.0)*x9903*x9904)));
evalcond[2]=((((-1.0)*x9899*x9904))+((x9897*x9901)));
evalcond[3]=(((x9898*x9903))+(((-1.0)*x9902*x9905))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x9901*x9905))+((x9898*x9899))+(((-1.0)*cj2*sj1*x9900))+(((-1.0)*cj1*sj2*x9900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9906=((-1.0)*r20);
IkReal x9907=((-1.0)*px);
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9906),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
IkReal x9908=((-1.0)*(x9909.value));
sj5=gconst1;
cj5=gconst2;
j5=x9908;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9907);
rxp1_1=(px*r21);
rxp1_2=(r11*x9907);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9908;
IkReal gconst1=r21;
IkReal gconst2=x9906;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9910=((-1.0)*r20);
IkReal x9911=((-1.0)*px);
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9910),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
IkReal x9912=((-1.0)*(x9913.value));
sj5=gconst1;
cj5=gconst2;
j5=x9912;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9911);
rxp1_1=(px*r21);
rxp1_2=(r11*x9911);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9912;
IkReal gconst1=r21;
IkReal gconst2=x9910;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9914=((-1.0)*r20);
IkReal x9915=((-1.0)*px);
CheckValue<IkReal> x9917 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9914),IKFAST_ATAN2_MAGTHRESH);
if(!x9917.valid){
continue;
}
IkReal x9916=((-1.0)*(x9917.value));
sj5=gconst1;
cj5=gconst2;
j5=x9916;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9915);
rxp1_1=(px*r21);
rxp1_2=(r11*x9915);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9916;
IkReal gconst1=r21;
IkReal gconst2=x9914;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9920=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9920.valid){
continue;
}
IkReal x9918=x9920.value;
IkReal x9919=(sj0*x9918);
cj4array[0]=(((cj1*sj2*x9919))+((cj2*sj1*x9919)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9921=IKsin(j4);
IkReal x9922=IKcos(j4);
IkReal x9923=((1.0)*gconst2);
IkReal x9924=(gconst1*r21);
evalcond[0]=(r02*x9921);
evalcond[1]=((((-1.0)*r02*x9922))+(((-1.0)*sj0)));
evalcond[2]=(((x9921*x9924))+(((-1.0)*r20*x9921*x9923)));
evalcond[3]=((((-1.0)*r10*x9921*x9923))+((gconst1*r11*x9921)));
evalcond[4]=((((-1.0)*r20*x9922*x9923))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x9922*x9924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9926=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9926.valid){
continue;
}
IkReal x9925=x9926.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9925))+((cj1*cj2*x9925)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9927=IKsin(j4);
IkReal x9928=IKcos(j4);
IkReal x9929=((1.0)*sj0);
IkReal x9930=(gconst1*x9927);
IkReal x9931=((1.0)*x9928);
IkReal x9932=((1.0)*gconst2*x9927);
evalcond[0]=(r02*x9927);
evalcond[1]=((((-1.0)*r02*x9931))+(((-1.0)*x9929)));
evalcond[2]=(((r21*x9930))+(((-1.0)*r20*x9932)));
evalcond[3]=((((-1.0)*r10*x9932))+((r11*x9930)));
evalcond[4]=((((-1.0)*cj2*sj1*x9929))+(((-1.0)*cj1*sj2*x9929))+((gconst1*r11*x9928))+(((-1.0)*gconst2*r10*x9931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9933=IKPowWithIntegerCheck(r02,-1);
if(!x9933.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9933.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9934=IKsin(j4);
IkReal x9935=IKcos(j4);
IkReal x9936=(gconst1*r21);
IkReal x9937=((1.0)*sj0);
IkReal x9938=(gconst1*r11);
IkReal x9939=((1.0)*gconst2*r10);
IkReal x9940=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9934);
evalcond[1]=((((-1.0)*x9934*x9940))+((x9934*x9936)));
evalcond[2]=((((-1.0)*x9934*x9939))+((x9934*x9938)));
evalcond[3]=((((-1.0)*cj1*cj2))+(((-1.0)*x9935*x9940))+((sj1*sj2))+((x9935*x9936)));
evalcond[4]=((((-1.0)*cj2*sj1*x9937))+(((-1.0)*cj1*sj2*x9937))+(((-1.0)*x9935*x9939))+((x9935*x9938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9942=IKPowWithIntegerCheck(r02,-1);
if(!x9942.valid){
continue;
}
IkReal x9941=x9942.value;
CheckValue<IkReal> x9943=IKPowWithIntegerCheck(cj3,-1);
if(!x9943.valid){
continue;
}
if( IKabs((x9941*(x9943.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9941)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9941*(x9943.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9941))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9941*(x9943.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9941));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9944=IKsin(j4);
IkReal x9945=IKcos(j4);
IkReal x9946=(gconst2*r10);
IkReal x9947=(gconst1*r11);
IkReal x9948=(sj1*sj2);
IkReal x9949=(gconst2*r20);
IkReal x9950=(cj2*sj1);
IkReal x9951=((1.0)*sj0);
IkReal x9952=(gconst1*r20);
IkReal x9953=(gconst2*r11);
IkReal x9954=(gconst1*r21);
IkReal x9955=((1.0)*cj0);
IkReal x9956=(gconst1*r10);
IkReal x9957=(cj1*sj2);
IkReal x9958=(gconst2*r21);
IkReal x9959=(sj3*x9945);
IkReal x9960=((1.0)*cj1*cj2);
IkReal x9961=(cj3*x9945);
IkReal x9962=(r02*x9944);
IkReal x9963=((1.0)*x9944);
evalcond[0]=((((-1.0)*r02*x9945))+(((-1.0)*x9951)));
evalcond[1]=((((-1.0)*x9949*x9963))+((x9944*x9954)));
evalcond[2]=(cj0+(((-1.0)*x9946*x9963))+((x9944*x9947)));
evalcond[3]=(((cj0*x9948))+(((-1.0)*cj1*cj2*x9955))+((cj3*x9962)));
evalcond[4]=((((-1.0)*x9955*x9957))+(((-1.0)*sj3*x9962))+(((-1.0)*x9950*x9955)));
evalcond[5]=(((sj3*x9958))+((sj3*x9952))+(((-1.0)*x9949*x9961))+x9957+x9950+((x9954*x9961)));
evalcond[6]=(((cj3*x9958))+((cj3*x9952))+(((-1.0)*x9960))+((x9949*x9959))+x9948+(((-1.0)*x9954*x9959)));
evalcond[7]=((((-1.0)*x9946*x9961))+((sj3*x9956))+((sj3*x9953))+((x9947*x9961))+((sj0*x9948))+(((-1.0)*cj1*cj2*x9951)));
evalcond[8]=(((cj3*x9956))+((cj3*x9953))+(((-1.0)*x9947*x9959))+(((-1.0)*x9950*x9951))+((x9946*x9959))+(((-1.0)*x9951*x9957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9964=((1.0)*sj3);
IkReal x9965=((1.0)*gconst2);
CheckValue<IkReal> x9966=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9965))),-1);
if(!x9966.valid){
continue;
}
CheckValue<IkReal> x9967=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9965))),-1);
if(!x9967.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9966.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9967.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9964))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9964)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9966.value)))+IKsqr(((x9967.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9964))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9964))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9966.value)), ((x9967.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*gconst2*r21*x9964))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9964))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9968=IKsin(j4);
IkReal x9969=IKcos(j4);
IkReal x9970=(gconst2*r10);
IkReal x9971=(gconst1*r11);
IkReal x9972=(sj1*sj2);
IkReal x9973=(gconst2*r20);
IkReal x9974=(cj2*sj1);
IkReal x9975=((1.0)*sj0);
IkReal x9976=(gconst1*r20);
IkReal x9977=(gconst2*r11);
IkReal x9978=(gconst1*r21);
IkReal x9979=((1.0)*cj0);
IkReal x9980=(gconst1*r10);
IkReal x9981=(cj1*sj2);
IkReal x9982=(gconst2*r21);
IkReal x9983=(sj3*x9969);
IkReal x9984=((1.0)*cj1*cj2);
IkReal x9985=(cj3*x9969);
IkReal x9986=(r02*x9968);
IkReal x9987=((1.0)*x9968);
evalcond[0]=((((-1.0)*r02*x9969))+(((-1.0)*x9975)));
evalcond[1]=((((-1.0)*x9973*x9987))+((x9968*x9978)));
evalcond[2]=(cj0+((x9968*x9971))+(((-1.0)*x9970*x9987)));
evalcond[3]=(((cj3*x9986))+((cj0*x9972))+(((-1.0)*cj1*cj2*x9979)));
evalcond[4]=((((-1.0)*sj3*x9986))+(((-1.0)*x9979*x9981))+(((-1.0)*x9974*x9979)));
evalcond[5]=((((-1.0)*x9973*x9985))+((sj3*x9976))+((x9978*x9985))+((sj3*x9982))+x9974+x9981);
evalcond[6]=(((cj3*x9982))+((cj3*x9976))+((x9973*x9983))+(((-1.0)*x9978*x9983))+x9972+(((-1.0)*x9984)));
evalcond[7]=(((sj3*x9977))+(((-1.0)*cj1*cj2*x9975))+((sj3*x9980))+((sj0*x9972))+((x9971*x9985))+(((-1.0)*x9970*x9985)));
evalcond[8]=(((cj3*x9980))+(((-1.0)*x9971*x9983))+(((-1.0)*x9975*x9981))+((cj3*x9977))+(((-1.0)*x9974*x9975))+((x9970*x9983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9988=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9988.valid){
continue;
}
CheckValue<IkReal> x9989=IKPowWithIntegerCheck(r02,-1);
if(!x9989.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9988.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9989.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9988.value)))+IKsqr(((-1.0)*sj0*(x9989.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9988.value)), ((-1.0)*sj0*(x9989.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9990=IKsin(j4);
IkReal x9991=IKcos(j4);
IkReal x9992=(gconst2*r10);
IkReal x9993=(gconst1*r11);
IkReal x9994=(sj1*sj2);
IkReal x9995=(gconst2*r20);
IkReal x9996=(cj2*sj1);
IkReal x9997=((1.0)*sj0);
IkReal x9998=(gconst1*r20);
IkReal x9999=(gconst2*r11);
IkReal x10000=(gconst1*r21);
IkReal x10001=((1.0)*cj0);
IkReal x10002=(gconst1*r10);
IkReal x10003=(cj1*sj2);
IkReal x10004=(gconst2*r21);
IkReal x10005=(sj3*x9991);
IkReal x10006=((1.0)*cj1*cj2);
IkReal x10007=(cj3*x9991);
IkReal x10008=(r02*x9990);
IkReal x10009=((1.0)*x9990);
evalcond[0]=((((-1.0)*r02*x9991))+(((-1.0)*x9997)));
evalcond[1]=((((-1.0)*x10009*x9995))+((x10000*x9990)));
evalcond[2]=((((-1.0)*x10009*x9992))+cj0+((x9990*x9993)));
evalcond[3]=(((cj0*x9994))+((cj3*x10008))+(((-1.0)*cj1*cj2*x10001)));
evalcond[4]=((((-1.0)*x10001*x9996))+(((-1.0)*sj3*x10008))+(((-1.0)*x10001*x10003)));
evalcond[5]=((((-1.0)*x10007*x9995))+((x10000*x10007))+((sj3*x9998))+x10003+((sj3*x10004))+x9996);
evalcond[6]=(((cj3*x9998))+((x10005*x9995))+((cj3*x10004))+(((-1.0)*x10000*x10005))+x9994+(((-1.0)*x10006)));
evalcond[7]=((((-1.0)*x10007*x9992))+((sj0*x9994))+((sj3*x9999))+((x10007*x9993))+((sj3*x10002))+(((-1.0)*cj1*cj2*x9997)));
evalcond[8]=(((cj3*x9999))+(((-1.0)*x10003*x9997))+((x10005*x9992))+((cj3*x10002))+(((-1.0)*x9996*x9997))+(((-1.0)*x10005*x9993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10010=gconst1*gconst1;
IkReal x10011=r21*r21;
IkReal x10012=gconst2*gconst2;
IkReal x10013=r20*r20;
IkReal x10014=(gconst2*r20);
IkReal x10015=(cj1*cj2);
IkReal x10016=(sj1*sj2);
IkReal x10017=(gconst1*r21);
IkReal x10018=(cj3*gconst2);
IkReal x10019=(cj3*r20);
CheckValue<IkReal> x10020 = IKatan2WithCheck(IkReal((((r22*x10016))+((gconst1*r22*x10019))+((r21*r22*x10018))+(((-1.0)*r22*x10015)))),IkReal((((x10014*x10015))+(((-1.0)*gconst1*x10013*x10018))+((r21*x10010*x10019))+(((-1.0)*r21*x10012*x10019))+((gconst1*x10011*x10018))+(((-1.0)*x10015*x10017))+(((-1.0)*x10014*x10016))+((x10016*x10017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10020.valid){
continue;
}
CheckValue<IkReal> x10021=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10010*x10011))+((sj3*x10012*x10013))+(((-2.0)*sj3*x10014*x10017)))),-1);
if(!x10021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10020.value)+(((1.5707963267949)*(x10021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10022=IKsin(j4);
IkReal x10023=IKcos(j4);
IkReal x10024=(cj3*gconst1);
IkReal x10025=(gconst1*r01);
IkReal x10026=(gconst1*r11);
IkReal x10027=(sj1*sj2);
IkReal x10028=(cj3*gconst2);
IkReal x10029=(gconst1*sj3);
IkReal x10030=(gconst2*sj3);
IkReal x10031=((1.0)*sj0);
IkReal x10032=(cj1*sj2);
IkReal x10033=((1.0)*x10023);
IkReal x10034=((1.0)*x10022);
IkReal x10035=((1.0)*cj1*cj2);
IkReal x10036=(cj3*x10022);
IkReal x10037=((1.0)*cj2*sj1);
IkReal x10038=(x10023*x10030);
evalcond[0]=(((gconst1*r21*x10022))+(((-1.0)*r22*x10033))+(((-1.0)*gconst2*r20*x10034)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10034))+((x10022*x10026))+(((-1.0)*r12*x10033)));
evalcond[2]=((((-1.0)*r02*x10033))+(((-1.0)*gconst2*r00*x10034))+(((-1.0)*x10031))+((x10022*x10025)));
evalcond[3]=(((cj2*sj1))+((r21*x10030))+((r20*x10029))+x10032+((r22*x10036))+((r21*x10023*x10024))+(((-1.0)*r20*x10028*x10033)));
evalcond[4]=((((-1.0)*r21*x10029*x10033))+((r21*x10028))+((r20*x10024))+(((-1.0)*r22*sj3*x10034))+((r20*x10038))+x10027+(((-1.0)*x10035)));
evalcond[5]=(((cj0*x10027))+(((-1.0)*cj0*x10035))+((r01*x10030))+((r00*x10029))+((r01*x10023*x10024))+((r02*x10036))+(((-1.0)*r00*x10028*x10033)));
evalcond[6]=(((sj0*x10027))+(((-1.0)*r10*x10028*x10033))+((r10*x10029))+((r11*x10030))+((r11*x10023*x10024))+(((-1.0)*cj1*cj2*x10031))+((r12*x10036)));
evalcond[7]=((((-1.0)*sj3*x10025*x10033))+(((-1.0)*r02*sj3*x10034))+(((-1.0)*cj0*x10037))+((r01*x10028))+((r00*x10038))+((r00*x10024))+(((-1.0)*cj0*x10032)));
evalcond[8]=(((r10*x10038))+((r10*x10024))+(((-1.0)*cj2*sj1*x10031))+(((-1.0)*x10031*x10032))+(((-1.0)*r12*sj3*x10034))+((r11*x10028))+(((-1.0)*sj3*x10026*x10033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10039=((1.0)*gconst2);
CheckValue<IkReal> x10040=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10039)))),-1);
if(!x10040.valid){
continue;
}
CheckValue<IkReal> x10041 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst1*r21*sj0))+(((-1.0)*r20*sj0*x10039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10040.value)))+(x10041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10042=IKsin(j4);
IkReal x10043=IKcos(j4);
IkReal x10044=(cj3*gconst1);
IkReal x10045=(gconst1*r01);
IkReal x10046=(gconst1*r11);
IkReal x10047=(sj1*sj2);
IkReal x10048=(cj3*gconst2);
IkReal x10049=(gconst1*sj3);
IkReal x10050=(gconst2*sj3);
IkReal x10051=((1.0)*sj0);
IkReal x10052=(cj1*sj2);
IkReal x10053=((1.0)*x10043);
IkReal x10054=((1.0)*x10042);
IkReal x10055=((1.0)*cj1*cj2);
IkReal x10056=(cj3*x10042);
IkReal x10057=((1.0)*cj2*sj1);
IkReal x10058=(x10043*x10050);
evalcond[0]=(((gconst1*r21*x10042))+(((-1.0)*r22*x10053))+(((-1.0)*gconst2*r20*x10054)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10054))+(((-1.0)*r12*x10053))+((x10042*x10046)));
evalcond[2]=((((-1.0)*x10051))+(((-1.0)*gconst2*r00*x10054))+(((-1.0)*r02*x10053))+((x10042*x10045)));
evalcond[3]=(((cj2*sj1))+((r21*x10043*x10044))+(((-1.0)*r20*x10048*x10053))+x10052+((r22*x10056))+((r21*x10050))+((r20*x10049)));
evalcond[4]=((((-1.0)*r22*sj3*x10054))+((r20*x10058))+((r21*x10048))+(((-1.0)*x10055))+x10047+((r20*x10044))+(((-1.0)*r21*x10049*x10053)));
evalcond[5]=((((-1.0)*cj0*x10055))+(((-1.0)*r00*x10048*x10053))+((r01*x10050))+((r01*x10043*x10044))+((r00*x10049))+((r02*x10056))+((cj0*x10047)));
evalcond[6]=(((r11*x10043*x10044))+(((-1.0)*r10*x10048*x10053))+((sj0*x10047))+((r10*x10049))+(((-1.0)*cj1*cj2*x10051))+((r11*x10050))+((r12*x10056)));
evalcond[7]=((((-1.0)*cj0*x10057))+((r00*x10058))+(((-1.0)*cj0*x10052))+((r00*x10044))+((r01*x10048))+(((-1.0)*sj3*x10045*x10053))+(((-1.0)*r02*sj3*x10054)));
evalcond[8]=(((r10*x10058))+((r10*x10044))+(((-1.0)*r12*sj3*x10054))+(((-1.0)*x10051*x10052))+((r11*x10048))+(((-1.0)*cj2*sj1*x10051))+(((-1.0)*sj3*x10046*x10053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10059=((1.0)*gconst2);
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
CheckValue<IkReal> x10061=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10059)))),-1);
if(!x10061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10060.value)+(((1.5707963267949)*(x10061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10062=IKsin(j4);
IkReal x10063=IKcos(j4);
IkReal x10064=(cj3*gconst1);
IkReal x10065=(gconst1*r01);
IkReal x10066=(gconst1*r11);
IkReal x10067=(sj1*sj2);
IkReal x10068=(cj3*gconst2);
IkReal x10069=(gconst1*sj3);
IkReal x10070=(gconst2*sj3);
IkReal x10071=((1.0)*sj0);
IkReal x10072=(cj1*sj2);
IkReal x10073=((1.0)*x10063);
IkReal x10074=((1.0)*x10062);
IkReal x10075=((1.0)*cj1*cj2);
IkReal x10076=(cj3*x10062);
IkReal x10077=((1.0)*cj2*sj1);
IkReal x10078=(x10063*x10070);
evalcond[0]=(((gconst1*r21*x10062))+(((-1.0)*r22*x10073))+(((-1.0)*gconst2*r20*x10074)));
evalcond[1]=(cj0+((x10062*x10066))+(((-1.0)*gconst2*r10*x10074))+(((-1.0)*r12*x10073)));
evalcond[2]=((((-1.0)*x10071))+((x10062*x10065))+(((-1.0)*gconst2*r00*x10074))+(((-1.0)*r02*x10073)));
evalcond[3]=(((cj2*sj1))+((r20*x10069))+((r21*x10063*x10064))+x10072+((r22*x10076))+((r21*x10070))+(((-1.0)*r20*x10068*x10073)));
evalcond[4]=((((-1.0)*r22*sj3*x10074))+((r20*x10064))+((r20*x10078))+(((-1.0)*x10075))+x10067+((r21*x10068))+(((-1.0)*r21*x10069*x10073)));
evalcond[5]=((((-1.0)*cj0*x10075))+((r01*x10063*x10064))+((r00*x10069))+((r01*x10070))+((r02*x10076))+(((-1.0)*r00*x10068*x10073))+((cj0*x10067)));
evalcond[6]=(((r10*x10069))+((r12*x10076))+((r11*x10063*x10064))+(((-1.0)*r10*x10068*x10073))+(((-1.0)*cj1*cj2*x10071))+((sj0*x10067))+((r11*x10070)));
evalcond[7]=((((-1.0)*cj0*x10077))+((r00*x10064))+((r00*x10078))+((r01*x10068))+(((-1.0)*cj0*x10072))+(((-1.0)*sj3*x10065*x10073))+(((-1.0)*r02*sj3*x10074)));
evalcond[8]=(((r10*x10078))+((r10*x10064))+(((-1.0)*r12*sj3*x10074))+(((-1.0)*sj3*x10066*x10073))+(((-1.0)*cj2*sj1*x10071))+((r11*x10068))+(((-1.0)*x10071*x10072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10079=((-1.0)*r21);
IkReal x10081 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10081)==0){
continue;
}
IkReal x10080=pow(x10081,-0.5);
CheckValue<IkReal> x10082 = IKatan2WithCheck(IkReal(x10079),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10082.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10082.value))));
IkReal gconst4=(x10079*x10080);
IkReal gconst5=((1.0)*r20*x10080);
CheckValue<IkReal> x10083 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10083.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10083.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10084=((-1.0)*r21);
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal(x10084),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
IkReal x10085=((1.0)*(x10087.value));
IkReal x10086=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10085)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10085)));
IkReal gconst4=(x10084*x10086);
IkReal gconst5=((1.0)*r20*x10086);
IkReal x10088=r22*r22;
IkReal x10089=((1.0)*x10088);
CheckValue<IkReal> x10093=IKPowWithIntegerCheck(((-1.0)+x10088),-1);
if(!x10093.valid){
continue;
}
IkReal x10090=x10093.value;
if((((1.0)+(((-1.0)*x10089)))) < -0.00001)
continue;
IkReal x10091=IKsqrt(((1.0)+(((-1.0)*x10089))));
IkReal x10092=(cj0*x10090*x10091);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x10092+(((-1.0)*x10089*x10092))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10094=((-1.0)*r21);
CheckValue<IkReal> x10097 = IKatan2WithCheck(IkReal(x10094),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10097.valid){
continue;
}
IkReal x10095=((1.0)*(x10097.value));
IkReal x10096=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10095)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10095)));
IkReal gconst4=(x10094*x10096);
IkReal gconst5=((1.0)*r20*x10096);
IkReal x10098=r22*r22;
IkReal x10099=((1.0)*x10098);
CheckValue<IkReal> x10103=IKPowWithIntegerCheck(((-1.0)+x10098),-1);
if(!x10103.valid){
continue;
}
IkReal x10100=x10103.value;
if((((1.0)+(((-1.0)*x10099)))) < -0.00001)
continue;
IkReal x10101=IKsqrt(((1.0)+(((-1.0)*x10099))));
IkReal x10102=(sj0*x10100*x10101);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10102+(((-1.0)*x10099*x10102))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10104=((-1.0)*r21);
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal(x10104),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
IkReal x10105=((1.0)*(x10107.value));
IkReal x10106=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10105)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10105)));
IkReal gconst4=(x10104*x10106);
IkReal gconst5=((1.0)*r20*x10106);
IkReal x10108=r22*r22;
IkReal x10109=(r12*sj0);
IkReal x10110=(cj0*r02);
CheckValue<IkReal> x10114=IKPowWithIntegerCheck(((-1.0)+x10108),-1);
if(!x10114.valid){
continue;
}
IkReal x10111=x10114.value;
if((((1.0)+(((-1.0)*x10108)))) < -0.00001)
continue;
IkReal x10112=IKsqrt(((1.0)+(((-1.0)*x10108))));
IkReal x10113=(r22*x10111*x10112);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10109))+(((-1.0)*x10110)))))+(IKabs((((x10110*x10113))+((x10109*x10113))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10115=((-1.0)*r21);
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(x10115),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
IkReal x10116=((1.0)*(x10118.value));
IkReal x10117=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10116)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10116)));
IkReal gconst4=(x10115*x10117);
IkReal gconst5=((1.0)*r20*x10117);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10119=((-1.0)*r21);
CheckValue<IkReal> x10122 = IKatan2WithCheck(IkReal(x10119),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10122.valid){
continue;
}
IkReal x10120=((1.0)*(x10122.value));
IkReal x10121=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10120)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10120)));
IkReal gconst4=(x10119*x10121);
IkReal gconst5=((1.0)*r20*x10121);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10123=((-1.0)*r21);
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal(x10123),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
IkReal x10124=((1.0)*(x10126.value));
IkReal x10125=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10124)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10124)));
IkReal gconst4=(x10123*x10125);
IkReal gconst5=((1.0)*r20*x10125);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10127=((-1.0)*r21);
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal(x10127),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
IkReal x10128=((1.0)*(x10130.value));
IkReal x10129=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10128)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10128)));
IkReal gconst4=(x10127*x10129);
IkReal gconst5=((1.0)*r20*x10129);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10131=((-1.0)*r21);
CheckValue<IkReal> x10134 = IKatan2WithCheck(IkReal(x10131),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10134.valid){
continue;
}
IkReal x10132=((1.0)*(x10134.value));
IkReal x10133=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10132)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10132)));
IkReal gconst4=(x10131*x10133);
IkReal gconst5=((1.0)*r20*x10133);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10135=((-1.0)*r21);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(x10135),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10136=((1.0)*(x10138.value));
IkReal x10137=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10136)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst4=(x10135*x10137);
IkReal gconst5=((1.0)*r20*x10137);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10139=(gconst5*r10);
IkReal x10140=(gconst4*r11);
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal((x10139+(((-1.0)*x10140)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
CheckValue<IkReal> x10142=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10139*x10140))+(x10139*x10139)+(x10140*x10140))),-1);
if(!x10142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10141.value)+(((1.5707963267949)*(x10142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10143=IKsin(j4);
IkReal x10144=IKcos(j4);
IkReal x10145=(gconst4*r11);
IkReal x10146=((1.0)*cj1);
IkReal x10147=(gconst5*r10);
IkReal x10148=(gconst4*r01);
IkReal x10149=(gconst5*r00);
IkReal x10150=(gconst4*r21);
IkReal x10151=(gconst5*r20);
IkReal x10152=((1.0)*x10144);
IkReal x10153=((1.0)*x10143);
evalcond[0]=((((-1.0)*x10151*x10153))+((x10143*x10150))+(((-1.0)*r22*x10152)));
evalcond[1]=((((-1.0)*r02*x10152))+(((-1.0)*x10149*x10153))+((x10143*x10148)));
evalcond[2]=((((-1.0)*x10145*x10152))+((x10144*x10147))+(((-1.0)*r12*x10153)));
evalcond[3]=((1.0)+((x10143*x10145))+(((-1.0)*r12*x10152))+(((-1.0)*x10147*x10153)));
evalcond[4]=((((-1.0)*cj2*x10146))+((sj1*sj2))+(((-1.0)*x10150*x10152))+((x10144*x10151))+(((-1.0)*r22*x10153)));
evalcond[5]=((((-1.0)*x10148*x10152))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10153))+(((-1.0)*sj2*x10146))+((x10144*x10149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10154=((1.0)*gconst5);
CheckValue<IkReal> x10155 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10155.valid){
continue;
}
CheckValue<IkReal> x10156=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10154)))),-1);
if(!x10156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10155.value)+(((1.5707963267949)*(x10156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10157=IKsin(j4);
IkReal x10158=IKcos(j4);
IkReal x10159=(gconst4*r11);
IkReal x10160=((1.0)*cj1);
IkReal x10161=(gconst5*r10);
IkReal x10162=(gconst4*r01);
IkReal x10163=(gconst5*r00);
IkReal x10164=(gconst4*r21);
IkReal x10165=(gconst5*r20);
IkReal x10166=((1.0)*x10158);
IkReal x10167=((1.0)*x10157);
evalcond[0]=((((-1.0)*r22*x10166))+((x10157*x10164))+(((-1.0)*x10165*x10167)));
evalcond[1]=(((x10157*x10162))+(((-1.0)*x10163*x10167))+(((-1.0)*r02*x10166)));
evalcond[2]=(((x10158*x10161))+(((-1.0)*r12*x10167))+(((-1.0)*x10159*x10166)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10166))+(((-1.0)*x10161*x10167))+((x10157*x10159)));
evalcond[4]=((((-1.0)*r22*x10167))+((x10158*x10165))+(((-1.0)*x10164*x10166))+((sj1*sj2))+(((-1.0)*cj2*x10160)));
evalcond[5]=((((-1.0)*sj2*x10160))+(((-1.0)*x10162*x10166))+((x10158*x10163))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10168 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10168.valid){
continue;
}
CheckValue<IkReal> x10169=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10168.value)+(((1.5707963267949)*(x10169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10170=IKsin(j4);
IkReal x10171=IKcos(j4);
IkReal x10172=(gconst4*r11);
IkReal x10173=((1.0)*cj1);
IkReal x10174=(gconst5*r10);
IkReal x10175=(gconst4*r01);
IkReal x10176=(gconst5*r00);
IkReal x10177=(gconst4*r21);
IkReal x10178=(gconst5*r20);
IkReal x10179=((1.0)*x10171);
IkReal x10180=((1.0)*x10170);
evalcond[0]=((((-1.0)*r22*x10179))+((x10170*x10177))+(((-1.0)*x10178*x10180)));
evalcond[1]=((((-1.0)*x10176*x10180))+((x10170*x10175))+(((-1.0)*r02*x10179)));
evalcond[2]=((((-1.0)*x10172*x10179))+((x10171*x10174))+(((-1.0)*r12*x10180)));
evalcond[3]=((1.0)+(((-1.0)*x10174*x10180))+((x10170*x10172))+(((-1.0)*r12*x10179)));
evalcond[4]=((((-1.0)*x10177*x10179))+((x10171*x10178))+(((-1.0)*cj2*x10173))+((sj1*sj2))+(((-1.0)*r22*x10180)));
evalcond[5]=((((-1.0)*r02*x10180))+((x10171*x10176))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10173))+(((-1.0)*x10175*x10179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10181=((-1.0)*r21);
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(x10181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10182=((1.0)*(x10184.value));
IkReal x10183=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10182)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10182)));
IkReal gconst4=(x10181*x10183);
IkReal gconst5=((1.0)*r20*x10183);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10185=((-1.0)*r21);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(x10185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
IkReal x10186=((1.0)*(x10188.value));
IkReal x10187=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10186)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10186)));
IkReal gconst4=(x10185*x10187);
IkReal gconst5=((1.0)*r20*x10187);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10189=((-1.0)*r21);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(x10189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
IkReal x10190=((1.0)*(x10192.value));
IkReal x10191=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10190)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10190)));
IkReal gconst4=(x10189*x10191);
IkReal gconst5=((1.0)*r20*x10191);
IkReal x10193=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10197=IKPowWithIntegerCheck(x10193,-1);
if(!x10197.valid){
continue;
}
IkReal x10194=x10197.value;
IkReal x10195=((1.0)*x10194);
IkReal x10196=((((-1.0)*x10195*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10194))+(((-1.0)*x10195*(r11*r11)*(r21*r21))));
j4eval[0]=x10196;
j4eval[1]=r12;
j4eval[2]=x10193;
j4eval[3]=IKsign(x10196);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10198=(gconst5*r10);
IkReal x10199=(gconst4*r11);
CheckValue<IkReal> x10200=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10199*x10199)))+(((2.0)*x10198*x10199))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10198*x10198))))),-1);
if(!x10200.valid){
continue;
}
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal((x10199+(((-1.0)*x10198)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10200.value)))+(x10201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10202=IKcos(j4);
IkReal x10203=IKsin(j4);
IkReal x10204=(gconst4*r11);
IkReal x10205=(gconst5*r10);
IkReal x10206=((1.0)*cj1);
IkReal x10207=(gconst5*r00);
IkReal x10208=(gconst5*r20);
IkReal x10209=((1.0)*x10202);
IkReal x10210=(gconst4*x10202);
IkReal x10211=((1.0)*x10203);
IkReal x10212=(gconst4*x10203);
evalcond[0]=((((-1.0)*x10205*x10209))+((x10202*x10204))+((r12*x10203)));
evalcond[1]=((((-1.0)*r22*x10209))+((r21*x10212))+(((-1.0)*x10208*x10211)));
evalcond[2]=((((-1.0)*r02*x10209))+((r01*x10212))+(((-1.0)*x10207*x10211)));
evalcond[3]=((1.0)+(((-1.0)*x10205*x10211))+((x10203*x10204))+(((-1.0)*r12*x10209)));
evalcond[4]=((((-1.0)*x10208*x10209))+((r22*x10203))+(((-1.0)*cj2*x10206))+((sj1*sj2))+((r21*x10210)));
evalcond[5]=(((r02*x10203))+((r01*x10210))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10206))+(((-1.0)*x10207*x10209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10213=((1.0)*gconst5);
CheckValue<IkReal> x10214 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10213))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10214.valid){
continue;
}
CheckValue<IkReal> x10215=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10213)))),-1);
if(!x10215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10214.value)+(((1.5707963267949)*(x10215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10216=IKcos(j4);
IkReal x10217=IKsin(j4);
IkReal x10218=(gconst4*r11);
IkReal x10219=(gconst5*r10);
IkReal x10220=((1.0)*cj1);
IkReal x10221=(gconst5*r00);
IkReal x10222=(gconst5*r20);
IkReal x10223=((1.0)*x10216);
IkReal x10224=(gconst4*x10216);
IkReal x10225=((1.0)*x10217);
IkReal x10226=(gconst4*x10217);
evalcond[0]=(((x10216*x10218))+((r12*x10217))+(((-1.0)*x10219*x10223)));
evalcond[1]=((((-1.0)*x10222*x10225))+((r21*x10226))+(((-1.0)*r22*x10223)));
evalcond[2]=((((-1.0)*r02*x10223))+(((-1.0)*x10221*x10225))+((r01*x10226)));
evalcond[3]=((1.0)+((x10217*x10218))+(((-1.0)*x10219*x10225))+(((-1.0)*r12*x10223)));
evalcond[4]=((((-1.0)*x10222*x10223))+(((-1.0)*cj2*x10220))+((sj1*sj2))+((r21*x10224))+((r22*x10217)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10221*x10223))+((r02*x10217))+(((-1.0)*sj2*x10220))+((r01*x10224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10227 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10227.valid){
continue;
}
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10227.value)+(((1.5707963267949)*(x10228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10229=IKcos(j4);
IkReal x10230=IKsin(j4);
IkReal x10231=(gconst4*r11);
IkReal x10232=(gconst5*r10);
IkReal x10233=((1.0)*cj1);
IkReal x10234=(gconst5*r00);
IkReal x10235=(gconst5*r20);
IkReal x10236=((1.0)*x10229);
IkReal x10237=(gconst4*x10229);
IkReal x10238=((1.0)*x10230);
IkReal x10239=(gconst4*x10230);
evalcond[0]=((((-1.0)*x10232*x10236))+((x10229*x10231))+((r12*x10230)));
evalcond[1]=((((-1.0)*x10235*x10238))+((r21*x10239))+(((-1.0)*r22*x10236)));
evalcond[2]=((((-1.0)*x10234*x10238))+((r01*x10239))+(((-1.0)*r02*x10236)));
evalcond[3]=((1.0)+(((-1.0)*x10232*x10238))+((x10230*x10231))+(((-1.0)*r12*x10236)));
evalcond[4]=(((r22*x10230))+(((-1.0)*x10235*x10236))+((sj1*sj2))+((r21*x10237))+(((-1.0)*cj2*x10233)));
evalcond[5]=((((-1.0)*x10234*x10236))+(((-1.0)*cj2*sj1))+((r02*x10230))+((r01*x10237))+(((-1.0)*sj2*x10233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10240=((-1.0)*r21);
CheckValue<IkReal> x10243 = IKatan2WithCheck(IkReal(x10240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10243.valid){
continue;
}
IkReal x10241=((1.0)*(x10243.value));
IkReal x10242=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10241)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10241)));
IkReal gconst4=(x10240*x10242);
IkReal gconst5=((1.0)*r20*x10242);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10244=((-1.0)*r21);
CheckValue<IkReal> x10247 = IKatan2WithCheck(IkReal(x10244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10247.valid){
continue;
}
IkReal x10245=((1.0)*(x10247.value));
IkReal x10246=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10245)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10245)));
IkReal gconst4=(x10244*x10246);
IkReal gconst5=((1.0)*r20*x10246);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10248=((-1.0)*r21);
CheckValue<IkReal> x10251 = IKatan2WithCheck(IkReal(x10248),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10251.valid){
continue;
}
IkReal x10249=((1.0)*(x10251.value));
IkReal x10250=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10249)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10249)));
IkReal gconst4=(x10248*x10250);
IkReal gconst5=((1.0)*r20*x10250);
IkReal x10252=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10256=IKPowWithIntegerCheck(x10252,-1);
if(!x10256.valid){
continue;
}
IkReal x10253=x10256.value;
IkReal x10254=((1.0)*x10253);
IkReal x10255=((((-1.0)*x10254*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10253))+(((-1.0)*x10254*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10255;
j4eval[1]=r12;
j4eval[2]=x10252;
j4eval[3]=IKsign(x10255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10257=(gconst5*r10);
IkReal x10258=(gconst4*r11);
CheckValue<IkReal> x10259=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10258*x10258)))+(((-1.0)*(x10257*x10257)))+(((2.0)*x10257*x10258))+(((-1.0)*(r12*r12))))),-1);
if(!x10259.valid){
continue;
}
CheckValue<IkReal> x10260 = IKatan2WithCheck(IkReal((x10258+(((-1.0)*x10257)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10259.value)))+(x10260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10261=IKcos(j4);
IkReal x10262=IKsin(j4);
IkReal x10263=(gconst4*r11);
IkReal x10264=(gconst5*r10);
IkReal x10265=(gconst5*r00);
IkReal x10266=(gconst5*r20);
IkReal x10267=((1.0)*x10261);
IkReal x10268=(gconst4*x10261);
IkReal x10269=((1.0)*x10262);
IkReal x10270=(gconst4*x10262);
evalcond[0]=(((r12*x10262))+(((-1.0)*x10264*x10267))+((x10261*x10263)));
evalcond[1]=((((-1.0)*r22*x10267))+(((-1.0)*x10266*x10269))+((r21*x10270)));
evalcond[2]=(((r01*x10270))+(((-1.0)*r02*x10267))+(((-1.0)*x10265*x10269)));
evalcond[3]=((1.0)+((x10262*x10263))+(((-1.0)*r12*x10267))+(((-1.0)*x10264*x10269)));
evalcond[4]=(((r22*x10262))+((cj2*sj1))+(((-1.0)*x10266*x10267))+((cj1*sj2))+((r21*x10268)));
evalcond[5]=(((r02*x10262))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10268))+(((-1.0)*x10265*x10267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10271=((1.0)*gconst5);
CheckValue<IkReal> x10272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10271)))),-1);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10272.value)))+(x10273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10274=IKcos(j4);
IkReal x10275=IKsin(j4);
IkReal x10276=(gconst4*r11);
IkReal x10277=(gconst5*r10);
IkReal x10278=(gconst5*r00);
IkReal x10279=(gconst5*r20);
IkReal x10280=((1.0)*x10274);
IkReal x10281=(gconst4*x10274);
IkReal x10282=((1.0)*x10275);
IkReal x10283=(gconst4*x10275);
evalcond[0]=(((r12*x10275))+(((-1.0)*x10277*x10280))+((x10274*x10276)));
evalcond[1]=((((-1.0)*x10279*x10282))+(((-1.0)*r22*x10280))+((r21*x10283)));
evalcond[2]=(((r01*x10283))+(((-1.0)*x10278*x10282))+(((-1.0)*r02*x10280)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10280))+((x10275*x10276))+(((-1.0)*x10277*x10282)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10279*x10280))+((r21*x10281))+((r22*x10275)));
evalcond[5]=(((r01*x10281))+(((-1.0)*x10278*x10280))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10284 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10284.valid){
continue;
}
CheckValue<IkReal> x10285=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10284.value)+(((1.5707963267949)*(x10285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10286=IKcos(j4);
IkReal x10287=IKsin(j4);
IkReal x10288=(gconst4*r11);
IkReal x10289=(gconst5*r10);
IkReal x10290=(gconst5*r00);
IkReal x10291=(gconst5*r20);
IkReal x10292=((1.0)*x10286);
IkReal x10293=(gconst4*x10286);
IkReal x10294=((1.0)*x10287);
IkReal x10295=(gconst4*x10287);
evalcond[0]=(((r12*x10287))+(((-1.0)*x10289*x10292))+((x10286*x10288)));
evalcond[1]=((((-1.0)*x10291*x10294))+((r21*x10295))+(((-1.0)*r22*x10292)));
evalcond[2]=((((-1.0)*r02*x10292))+(((-1.0)*x10290*x10294))+((r01*x10295)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10292))+((x10287*x10288))+(((-1.0)*x10289*x10294)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10291*x10292))+((r22*x10287))+((r21*x10293)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10290*x10292))+((r02*x10287))+((r01*x10293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10296=((-1.0)*r21);
CheckValue<IkReal> x10299 = IKatan2WithCheck(IkReal(x10296),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10299.valid){
continue;
}
IkReal x10297=((1.0)*(x10299.value));
IkReal x10298=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10297)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10297)));
IkReal gconst4=(x10296*x10298);
IkReal gconst5=((1.0)*r20*x10298);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10300=((-1.0)*r21);
CheckValue<IkReal> x10303 = IKatan2WithCheck(IkReal(x10300),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10303.valid){
continue;
}
IkReal x10301=((1.0)*(x10303.value));
IkReal x10302=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10301)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10301)));
IkReal gconst4=(x10300*x10302);
IkReal gconst5=((1.0)*r20*x10302);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10304=((-1.0)*r21);
CheckValue<IkReal> x10307 = IKatan2WithCheck(IkReal(x10304),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10307.valid){
continue;
}
IkReal x10305=((1.0)*(x10307.value));
IkReal x10306=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10305)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10305)));
IkReal gconst4=(x10304*x10306);
IkReal gconst5=((1.0)*r20*x10306);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10308=(gconst5*r10);
IkReal x10309=(gconst4*r11);
CheckValue<IkReal> x10310=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10308*x10309))+(x10309*x10309)+(x10308*x10308))),-1);
if(!x10310.valid){
continue;
}
CheckValue<IkReal> x10311 = IKatan2WithCheck(IkReal(((((-1.0)*x10309))+x10308)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10310.value)))+(x10311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10312=IKsin(j4);
IkReal x10313=IKcos(j4);
IkReal x10314=(gconst4*r11);
IkReal x10315=(gconst5*r10);
IkReal x10316=(gconst4*r01);
IkReal x10317=(gconst5*r00);
IkReal x10318=(gconst4*r21);
IkReal x10319=(gconst5*r20);
IkReal x10320=((1.0)*x10313);
IkReal x10321=((1.0)*x10312);
evalcond[0]=((((-1.0)*r22*x10320))+(((-1.0)*x10319*x10321))+((x10312*x10318)));
evalcond[1]=((((-1.0)*r02*x10320))+((x10312*x10316))+(((-1.0)*x10317*x10321)));
evalcond[2]=((((-1.0)*x10314*x10320))+(((-1.0)*r12*x10321))+((x10313*x10315)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10320))+(((-1.0)*x10315*x10321))+((x10312*x10314)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10318*x10320))+(((-1.0)*r22*x10321))+((x10313*x10319)));
evalcond[5]=((((-1.0)*r02*x10321))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10313*x10317))+(((-1.0)*x10316*x10320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10322=((1.0)*gconst5);
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
CheckValue<IkReal> x10324=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10322)))),-1);
if(!x10324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10323.value)+(((1.5707963267949)*(x10324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10325=IKsin(j4);
IkReal x10326=IKcos(j4);
IkReal x10327=(gconst4*r11);
IkReal x10328=(gconst5*r10);
IkReal x10329=(gconst4*r01);
IkReal x10330=(gconst5*r00);
IkReal x10331=(gconst4*r21);
IkReal x10332=(gconst5*r20);
IkReal x10333=((1.0)*x10326);
IkReal x10334=((1.0)*x10325);
evalcond[0]=(((x10325*x10331))+(((-1.0)*r22*x10333))+(((-1.0)*x10332*x10334)));
evalcond[1]=(((x10325*x10329))+(((-1.0)*x10330*x10334))+(((-1.0)*r02*x10333)));
evalcond[2]=((((-1.0)*r12*x10334))+((x10326*x10328))+(((-1.0)*x10327*x10333)));
evalcond[3]=((1.0)+(((-1.0)*x10328*x10334))+((x10325*x10327))+(((-1.0)*r12*x10333)));
evalcond[4]=(((cj2*sj1))+((x10326*x10332))+((cj1*sj2))+(((-1.0)*r22*x10334))+(((-1.0)*x10331*x10333)));
evalcond[5]=(((x10326*x10330))+(((-1.0)*x10329*x10333))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10335 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10335.valid){
continue;
}
CheckValue<IkReal> x10336=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10335.value)+(((1.5707963267949)*(x10336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10337=IKsin(j4);
IkReal x10338=IKcos(j4);
IkReal x10339=(gconst4*r11);
IkReal x10340=(gconst5*r10);
IkReal x10341=(gconst4*r01);
IkReal x10342=(gconst5*r00);
IkReal x10343=(gconst4*r21);
IkReal x10344=(gconst5*r20);
IkReal x10345=((1.0)*x10338);
IkReal x10346=((1.0)*x10337);
evalcond[0]=((((-1.0)*x10344*x10346))+(((-1.0)*r22*x10345))+((x10337*x10343)));
evalcond[1]=((((-1.0)*x10342*x10346))+(((-1.0)*r02*x10345))+((x10337*x10341)));
evalcond[2]=((((-1.0)*x10339*x10345))+(((-1.0)*r12*x10346))+((x10338*x10340)));
evalcond[3]=((1.0)+(((-1.0)*x10340*x10346))+(((-1.0)*r12*x10345))+((x10337*x10339)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10343*x10345))+((cj1*sj2))+((x10338*x10344))+(((-1.0)*r22*x10346)));
evalcond[5]=((((-1.0)*x10341*x10345))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10338*x10342))+(((-1.0)*r02*x10346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10347=gconst4*gconst4;
IkReal x10348=gconst5*gconst5;
IkReal x10349=(r10*r21);
IkReal x10350=((1.0)*cj3);
IkReal x10351=(r11*r21);
IkReal x10352=(r11*r20);
IkReal x10353=(r22*sj3);
IkReal x10354=(gconst4*r10);
IkReal x10355=((1.0)*sj3);
IkReal x10356=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10357 = IKatan2WithCheck(IkReal((((gconst5*r11*x10353))+((x10353*x10354)))),IkReal((((sj3*x10347*x10349))+(((-1.0)*gconst5*r20*x10354*x10355))+((gconst4*gconst5*sj3*x10351))+(((-1.0)*x10348*x10352*x10355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10357.valid){
continue;
}
CheckValue<IkReal> x10358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10348*x10350))+((x10352*x10356))+((x10349*x10356))+(((-1.0)*x10347*x10350*x10351))+(((-1.0)*r12*r22*x10350)))),-1);
if(!x10358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10357.value)+(((1.5707963267949)*(x10358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10359=IKsin(j4);
IkReal x10360=IKcos(j4);
IkReal x10361=(sj1*sj2);
IkReal x10362=(gconst5*sj3);
IkReal x10363=(cj3*gconst5);
IkReal x10364=(gconst4*r11);
IkReal x10365=((1.0)*cj1);
IkReal x10366=(gconst4*r01);
IkReal x10367=(cj2*sj1);
IkReal x10368=(gconst4*r21);
IkReal x10369=(gconst4*sj3);
IkReal x10370=(cj3*gconst4);
IkReal x10371=(cj2*x10365);
IkReal x10372=((1.0)*x10360);
IkReal x10373=((1.0)*x10359);
IkReal x10374=(cj3*x10359);
IkReal x10375=(cj3*x10360);
evalcond[0]=(((x10359*x10368))+(((-1.0)*gconst5*r20*x10373))+(((-1.0)*r22*x10372)));
evalcond[1]=((((-1.0)*r02*x10372))+((x10359*x10366))+(((-1.0)*gconst5*r00*x10373)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10373))+((x10359*x10364))+(((-1.0)*r12*x10372)));
evalcond[3]=(((x10364*x10375))+(((-1.0)*r10*x10363*x10372))+((r10*x10369))+((r11*x10362))+((r12*x10374)));
evalcond[4]=(((r10*x10360*x10362))+(((-1.0)*sj3*x10364*x10372))+(((-1.0)*r12*sj3*x10373))+((r10*x10370))+((r11*x10363)));
evalcond[5]=(((r21*x10362))+(((-1.0)*r20*x10363*x10372))+((r22*x10374))+((cj1*sj2))+((x10368*x10375))+x10367+((r20*x10369)));
evalcond[6]=(((r00*x10369))+((r01*x10362))+((r02*x10374))+((x10366*x10375))+x10361+(((-1.0)*r00*x10363*x10372))+(((-1.0)*x10371)));
evalcond[7]=(((r21*x10363))+(((-1.0)*r22*sj3*x10373))+(((-1.0)*sj3*x10368*x10372))+((r20*x10360*x10362))+((r20*x10370))+x10361+(((-1.0)*x10371)));
evalcond[8]=(((r00*x10370))+((r01*x10363))+(((-1.0)*r02*sj3*x10373))+((r00*x10360*x10362))+(((-1.0)*sj3*x10366*x10372))+(((-1.0)*x10367))+(((-1.0)*sj2*x10365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10376=((1.0)*gconst5);
CheckValue<IkReal> x10377=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10376)))),-1);
if(!x10377.valid){
continue;
}
CheckValue<IkReal> x10378 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10377.value)))+(x10378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10379=IKsin(j4);
IkReal x10380=IKcos(j4);
IkReal x10381=(sj1*sj2);
IkReal x10382=(gconst5*sj3);
IkReal x10383=(cj3*gconst5);
IkReal x10384=(gconst4*r11);
IkReal x10385=((1.0)*cj1);
IkReal x10386=(gconst4*r01);
IkReal x10387=(cj2*sj1);
IkReal x10388=(gconst4*r21);
IkReal x10389=(gconst4*sj3);
IkReal x10390=(cj3*gconst4);
IkReal x10391=(cj2*x10385);
IkReal x10392=((1.0)*x10380);
IkReal x10393=((1.0)*x10379);
IkReal x10394=(cj3*x10379);
IkReal x10395=(cj3*x10380);
evalcond[0]=(((x10379*x10388))+(((-1.0)*gconst5*r20*x10393))+(((-1.0)*r22*x10392)));
evalcond[1]=(((x10379*x10386))+(((-1.0)*r02*x10392))+(((-1.0)*gconst5*r00*x10393)));
evalcond[2]=((1.0)+((x10379*x10384))+(((-1.0)*gconst5*r10*x10393))+(((-1.0)*r12*x10392)));
evalcond[3]=((((-1.0)*r10*x10383*x10392))+((r11*x10382))+((r12*x10394))+((x10384*x10395))+((r10*x10389)));
evalcond[4]=(((r11*x10383))+(((-1.0)*sj3*x10384*x10392))+((r10*x10390))+((r10*x10380*x10382))+(((-1.0)*r12*sj3*x10393)));
evalcond[5]=(((r21*x10382))+((cj1*sj2))+((r22*x10394))+x10387+(((-1.0)*r20*x10383*x10392))+((r20*x10389))+((x10388*x10395)));
evalcond[6]=((((-1.0)*x10391))+(((-1.0)*r00*x10383*x10392))+((r02*x10394))+x10381+((x10386*x10395))+((r00*x10389))+((r01*x10382)));
evalcond[7]=((((-1.0)*x10391))+((r21*x10383))+(((-1.0)*sj3*x10388*x10392))+(((-1.0)*r22*sj3*x10393))+x10381+((r20*x10390))+((r20*x10380*x10382)));
evalcond[8]=((((-1.0)*x10387))+((r00*x10380*x10382))+(((-1.0)*sj3*x10386*x10392))+(((-1.0)*sj2*x10385))+((r01*x10383))+(((-1.0)*r02*sj3*x10393))+((r00*x10390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10396 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10396.valid){
continue;
}
CheckValue<IkReal> x10397=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10396.value)+(((1.5707963267949)*(x10397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10398=IKsin(j4);
IkReal x10399=IKcos(j4);
IkReal x10400=(sj1*sj2);
IkReal x10401=(gconst5*sj3);
IkReal x10402=(cj3*gconst5);
IkReal x10403=(gconst4*r11);
IkReal x10404=((1.0)*cj1);
IkReal x10405=(gconst4*r01);
IkReal x10406=(cj2*sj1);
IkReal x10407=(gconst4*r21);
IkReal x10408=(gconst4*sj3);
IkReal x10409=(cj3*gconst4);
IkReal x10410=(cj2*x10404);
IkReal x10411=((1.0)*x10399);
IkReal x10412=((1.0)*x10398);
IkReal x10413=(cj3*x10398);
IkReal x10414=(cj3*x10399);
evalcond[0]=(((x10398*x10407))+(((-1.0)*gconst5*r20*x10412))+(((-1.0)*r22*x10411)));
evalcond[1]=((((-1.0)*r02*x10411))+((x10398*x10405))+(((-1.0)*gconst5*r00*x10412)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10412))+((x10398*x10403))+(((-1.0)*r12*x10411)));
evalcond[3]=((((-1.0)*r10*x10402*x10411))+((r11*x10401))+((x10403*x10414))+((r12*x10413))+((r10*x10408)));
evalcond[4]=((((-1.0)*sj3*x10403*x10411))+(((-1.0)*r12*sj3*x10412))+((r11*x10402))+((r10*x10409))+((r10*x10399*x10401)));
evalcond[5]=(((r21*x10401))+((r22*x10413))+((x10407*x10414))+((cj1*sj2))+((r20*x10408))+(((-1.0)*r20*x10402*x10411))+x10406);
evalcond[6]=(((x10405*x10414))+((r01*x10401))+((r00*x10408))+((r02*x10413))+(((-1.0)*r00*x10402*x10411))+(((-1.0)*x10410))+x10400);
evalcond[7]=(((r21*x10402))+(((-1.0)*r22*sj3*x10412))+(((-1.0)*sj3*x10407*x10411))+((r20*x10399*x10401))+(((-1.0)*x10410))+((r20*x10409))+x10400);
evalcond[8]=((((-1.0)*sj3*x10405*x10411))+((r01*x10402))+((r00*x10409))+(((-1.0)*sj2*x10404))+((r00*x10399*x10401))+(((-1.0)*x10406))+(((-1.0)*r02*sj3*x10412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10415=((-1.0)*r21);
CheckValue<IkReal> x10418 = IKatan2WithCheck(IkReal(x10415),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10418.valid){
continue;
}
IkReal x10416=((1.0)*(x10418.value));
IkReal x10417=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10416)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10416)));
IkReal gconst4=(x10415*x10417);
IkReal gconst5=((1.0)*r20*x10417);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10419=((-1.0)*r21);
CheckValue<IkReal> x10422 = IKatan2WithCheck(IkReal(x10419),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10422.valid){
continue;
}
IkReal x10420=((1.0)*(x10422.value));
IkReal x10421=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10420)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10420)));
IkReal gconst4=(x10419*x10421);
IkReal gconst5=((1.0)*r20*x10421);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10423=((-1.0)*r21);
CheckValue<IkReal> x10426 = IKatan2WithCheck(IkReal(x10423),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10426.valid){
continue;
}
IkReal x10424=((1.0)*(x10426.value));
IkReal x10425=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10424)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10424)));
IkReal gconst4=(x10423*x10425);
IkReal gconst5=((1.0)*r20*x10425);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10427=((-1.0)*r21);
CheckValue<IkReal> x10430 = IKatan2WithCheck(IkReal(x10427),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10430.valid){
continue;
}
IkReal x10428=((1.0)*(x10430.value));
IkReal x10429=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10428)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10428)));
IkReal gconst4=(x10427*x10429);
IkReal gconst5=((1.0)*r20*x10429);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10431=((-1.0)*r21);
CheckValue<IkReal> x10434 = IKatan2WithCheck(IkReal(x10431),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10434.valid){
continue;
}
IkReal x10432=((1.0)*(x10434.value));
IkReal x10433=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10432)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10432)));
IkReal gconst4=(x10431*x10433);
IkReal gconst5=((1.0)*r20*x10433);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10435=((-1.0)*r21);
CheckValue<IkReal> x10438 = IKatan2WithCheck(IkReal(x10435),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10438.valid){
continue;
}
IkReal x10436=((1.0)*(x10438.value));
IkReal x10437=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10436)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10436)));
IkReal gconst4=(x10435*x10437);
IkReal gconst5=((1.0)*r20*x10437);
IkReal x10439=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10443=IKPowWithIntegerCheck(x10439,-1);
if(!x10443.valid){
continue;
}
IkReal x10440=x10443.value;
IkReal x10441=((1.0)*x10440);
IkReal x10442=((((-1.0)*x10441*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10440))+(((-1.0)*x10441*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10442;
j4eval[1]=r12;
j4eval[2]=x10439;
j4eval[3]=IKsign(x10442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10444=(gconst5*r10);
IkReal x10445=(gconst4*r11);
CheckValue<IkReal> x10446 = IKatan2WithCheck(IkReal(((((-1.0)*x10445))+x10444)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10446.valid){
continue;
}
CheckValue<IkReal> x10447=IKPowWithIntegerCheck(IKsign(((((2.0)*x10444*x10445))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10444*x10444)))+(((-1.0)*(x10445*x10445))))),-1);
if(!x10447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10446.value)+(((1.5707963267949)*(x10447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10448=IKsin(j4);
IkReal x10449=IKcos(j4);
IkReal x10450=(gconst4*r11);
IkReal x10451=(gconst5*r10);
IkReal x10452=(gconst4*r01);
IkReal x10453=(gconst5*r00);
IkReal x10454=(gconst4*r21);
IkReal x10455=(gconst5*r20);
IkReal x10456=((1.0)*x10449);
IkReal x10457=((1.0)*x10448);
evalcond[0]=((((-1.0)*x10455*x10457))+(((-1.0)*r22*x10456))+((x10448*x10454)));
evalcond[1]=((((-1.0)*r02*x10456))+(((-1.0)*x10453*x10457))+((x10448*x10452)));
evalcond[2]=(((x10449*x10451))+(((-1.0)*x10450*x10456))+(((-1.0)*r12*x10457)));
evalcond[3]=((-1.0)+(((-1.0)*x10451*x10457))+(((-1.0)*r12*x10456))+((x10448*x10450)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10449*x10453))+(((-1.0)*r02*x10457))+(((-1.0)*x10452*x10456)));
evalcond[5]=(((x10449*x10455))+(((-1.0)*r22*x10457))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10454*x10456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10458=((1.0)*gconst5);
CheckValue<IkReal> x10459 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10459.valid){
continue;
}
CheckValue<IkReal> x10460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10458))+(((-1.0)*gconst4*r20)))),-1);
if(!x10460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10459.value)+(((1.5707963267949)*(x10460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10461=IKsin(j4);
IkReal x10462=IKcos(j4);
IkReal x10463=(gconst4*r11);
IkReal x10464=(gconst5*r10);
IkReal x10465=(gconst4*r01);
IkReal x10466=(gconst5*r00);
IkReal x10467=(gconst4*r21);
IkReal x10468=(gconst5*r20);
IkReal x10469=((1.0)*x10462);
IkReal x10470=((1.0)*x10461);
evalcond[0]=(((x10461*x10467))+(((-1.0)*r22*x10469))+(((-1.0)*x10468*x10470)));
evalcond[1]=((((-1.0)*r02*x10469))+(((-1.0)*x10466*x10470))+((x10461*x10465)));
evalcond[2]=((((-1.0)*x10463*x10469))+((x10462*x10464))+(((-1.0)*r12*x10470)));
evalcond[3]=((-1.0)+((x10461*x10463))+(((-1.0)*x10464*x10470))+(((-1.0)*r12*x10469)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10470))+(((-1.0)*x10465*x10469))+((cj1*sj2))+((x10462*x10466)));
evalcond[5]=((((-1.0)*x10467*x10469))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10470))+((x10462*x10468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10471=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10471.valid){
continue;
}
CheckValue<IkReal> x10472 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10471.value)))+(x10472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10473=IKsin(j4);
IkReal x10474=IKcos(j4);
IkReal x10475=(gconst4*r11);
IkReal x10476=(gconst5*r10);
IkReal x10477=(gconst4*r01);
IkReal x10478=(gconst5*r00);
IkReal x10479=(gconst4*r21);
IkReal x10480=(gconst5*r20);
IkReal x10481=((1.0)*x10474);
IkReal x10482=((1.0)*x10473);
evalcond[0]=((((-1.0)*r22*x10481))+(((-1.0)*x10480*x10482))+((x10473*x10479)));
evalcond[1]=((((-1.0)*x10478*x10482))+((x10473*x10477))+(((-1.0)*r02*x10481)));
evalcond[2]=(((x10474*x10476))+(((-1.0)*r12*x10482))+(((-1.0)*x10475*x10481)));
evalcond[3]=((-1.0)+(((-1.0)*x10476*x10482))+((x10473*x10475))+(((-1.0)*r12*x10481)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10477*x10481))+((cj1*sj2))+((x10474*x10478))+(((-1.0)*r02*x10482)));
evalcond[5]=(((x10474*x10480))+(((-1.0)*r22*x10482))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10479*x10481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10483=((-1.0)*r21);
CheckValue<IkReal> x10486 = IKatan2WithCheck(IkReal(x10483),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10486.valid){
continue;
}
IkReal x10484=((1.0)*(x10486.value));
IkReal x10485=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10484)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10484)));
IkReal gconst4=(x10483*x10485);
IkReal gconst5=((1.0)*r20*x10485);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10487=((-1.0)*r21);
CheckValue<IkReal> x10490 = IKatan2WithCheck(IkReal(x10487),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10490.valid){
continue;
}
IkReal x10488=((1.0)*(x10490.value));
IkReal x10489=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10488)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10488)));
IkReal gconst4=(x10487*x10489);
IkReal gconst5=((1.0)*r20*x10489);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10491=((-1.0)*r21);
CheckValue<IkReal> x10494 = IKatan2WithCheck(IkReal(x10491),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10494.valid){
continue;
}
IkReal x10492=((1.0)*(x10494.value));
IkReal x10493=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10492)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10492)));
IkReal gconst4=(x10491*x10493);
IkReal gconst5=((1.0)*r20*x10493);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10495=(gconst5*r10);
IkReal x10496=(gconst4*r11);
CheckValue<IkReal> x10497 = IKatan2WithCheck(IkReal(((((-1.0)*x10495))+x10496)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10497.valid){
continue;
}
CheckValue<IkReal> x10498=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10495*x10496))+(x10496*x10496)+(x10495*x10495))),-1);
if(!x10498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10497.value)+(((1.5707963267949)*(x10498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10499=IKcos(j4);
IkReal x10500=IKsin(j4);
IkReal x10501=(gconst4*r11);
IkReal x10502=(gconst5*r10);
IkReal x10503=(gconst5*r00);
IkReal x10504=(gconst5*r20);
IkReal x10505=((1.0)*x10499);
IkReal x10506=(gconst4*x10499);
IkReal x10507=((1.0)*x10500);
IkReal x10508=(gconst4*x10500);
evalcond[0]=((((-1.0)*x10502*x10505))+((x10499*x10501))+((r12*x10500)));
evalcond[1]=((((-1.0)*r22*x10505))+((r21*x10508))+(((-1.0)*x10504*x10507)));
evalcond[2]=(((r01*x10508))+(((-1.0)*x10503*x10507))+(((-1.0)*r02*x10505)));
evalcond[3]=((-1.0)+(((-1.0)*x10502*x10507))+(((-1.0)*r12*x10505))+((x10500*x10501)));
evalcond[4]=(((cj2*sj1))+((r01*x10506))+(((-1.0)*x10503*x10505))+((cj1*sj2))+((r02*x10500)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10506))+(((-1.0)*x10504*x10505))+((r22*x10500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10509=((1.0)*gconst5);
CheckValue<IkReal> x10510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10509))+(((-1.0)*gconst4*r20)))),-1);
if(!x10510.valid){
continue;
}
CheckValue<IkReal> x10511 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10509))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10510.value)))+(x10511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10512=IKcos(j4);
IkReal x10513=IKsin(j4);
IkReal x10514=(gconst4*r11);
IkReal x10515=(gconst5*r10);
IkReal x10516=(gconst5*r00);
IkReal x10517=(gconst5*r20);
IkReal x10518=((1.0)*x10512);
IkReal x10519=(gconst4*x10512);
IkReal x10520=((1.0)*x10513);
IkReal x10521=(gconst4*x10513);
evalcond[0]=(((r12*x10513))+((x10512*x10514))+(((-1.0)*x10515*x10518)));
evalcond[1]=((((-1.0)*r22*x10518))+((r21*x10521))+(((-1.0)*x10517*x10520)));
evalcond[2]=((((-1.0)*r02*x10518))+((r01*x10521))+(((-1.0)*x10516*x10520)));
evalcond[3]=((-1.0)+(((-1.0)*x10515*x10520))+((x10513*x10514))+(((-1.0)*r12*x10518)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10519))+(((-1.0)*x10516*x10518))+((r02*x10513)));
evalcond[5]=((((-1.0)*x10517*x10518))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10519))+((r22*x10513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10522=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10522.valid){
continue;
}
CheckValue<IkReal> x10523 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10522.value)))+(x10523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10524=IKcos(j4);
IkReal x10525=IKsin(j4);
IkReal x10526=(gconst4*r11);
IkReal x10527=(gconst5*r10);
IkReal x10528=(gconst5*r00);
IkReal x10529=(gconst5*r20);
IkReal x10530=((1.0)*x10524);
IkReal x10531=(gconst4*x10524);
IkReal x10532=((1.0)*x10525);
IkReal x10533=(gconst4*x10525);
evalcond[0]=(((x10524*x10526))+((r12*x10525))+(((-1.0)*x10527*x10530)));
evalcond[1]=((((-1.0)*r22*x10530))+((r21*x10533))+(((-1.0)*x10529*x10532)));
evalcond[2]=((((-1.0)*r02*x10530))+((r01*x10533))+(((-1.0)*x10528*x10532)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10530))+((x10525*x10526))+(((-1.0)*x10527*x10532)));
evalcond[4]=(((cj2*sj1))+((r02*x10525))+((cj1*sj2))+((r01*x10531))+(((-1.0)*x10528*x10530)));
evalcond[5]=(((r22*x10525))+((r21*x10531))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10529*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10534=((-1.0)*r21);
CheckValue<IkReal> x10537 = IKatan2WithCheck(IkReal(x10534),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10537.valid){
continue;
}
IkReal x10535=((1.0)*(x10537.value));
IkReal x10536=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10535)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10535)));
IkReal gconst4=(x10534*x10536);
IkReal gconst5=((1.0)*r20*x10536);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10538=((-1.0)*r21);
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(x10538),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
IkReal x10539=((1.0)*(x10541.value));
IkReal x10540=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10539)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10539)));
IkReal gconst4=(x10538*x10540);
IkReal gconst5=((1.0)*r20*x10540);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10542=((-1.0)*r21);
CheckValue<IkReal> x10545 = IKatan2WithCheck(IkReal(x10542),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10545.valid){
continue;
}
IkReal x10543=((1.0)*(x10545.value));
IkReal x10544=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10543)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10543)));
IkReal gconst4=(x10542*x10544);
IkReal gconst5=((1.0)*r20*x10544);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10546=(gconst5*r10);
IkReal x10547=(gconst4*r11);
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(((((-1.0)*x10546))+x10547)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
CheckValue<IkReal> x10549=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10546*x10547))+(r12*r12)+(x10547*x10547)+(x10546*x10546))),-1);
if(!x10549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10548.value)+(((1.5707963267949)*(x10549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10550=IKcos(j4);
IkReal x10551=IKsin(j4);
IkReal x10552=(gconst5*r10);
IkReal x10553=(gconst5*r00);
IkReal x10554=(gconst5*r20);
IkReal x10555=((1.0)*x10550);
IkReal x10556=(gconst4*x10551);
IkReal x10557=(gconst4*x10550);
IkReal x10558=((1.0)*x10551);
evalcond[0]=(((r11*x10557))+((r12*x10551))+(((-1.0)*x10552*x10555)));
evalcond[1]=((((-1.0)*x10554*x10558))+((r21*x10556))+(((-1.0)*r22*x10555)));
evalcond[2]=((((-1.0)*r02*x10555))+((r01*x10556))+(((-1.0)*x10553*x10558)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10555))+((r11*x10556))+(((-1.0)*x10552*x10558)));
evalcond[4]=((((-1.0)*x10554*x10555))+((cj2*sj1))+((r22*x10551))+((cj1*sj2))+((r21*x10557)));
evalcond[5]=(((r02*x10551))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r01*x10557))+(((-1.0)*x10553*x10555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10559=((1.0)*gconst5);
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
CheckValue<IkReal> x10561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10559))+(((-1.0)*gconst4*r20)))),-1);
if(!x10561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10560.value)+(((1.5707963267949)*(x10561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10562=IKcos(j4);
IkReal x10563=IKsin(j4);
IkReal x10564=(gconst5*r10);
IkReal x10565=(gconst5*r00);
IkReal x10566=(gconst5*r20);
IkReal x10567=((1.0)*x10562);
IkReal x10568=(gconst4*x10563);
IkReal x10569=(gconst4*x10562);
IkReal x10570=((1.0)*x10563);
evalcond[0]=((((-1.0)*x10564*x10567))+((r12*x10563))+((r11*x10569)));
evalcond[1]=((((-1.0)*r22*x10567))+((r21*x10568))+(((-1.0)*x10566*x10570)));
evalcond[2]=(((r01*x10568))+(((-1.0)*r02*x10567))+(((-1.0)*x10565*x10570)));
evalcond[3]=((-1.0)+(((-1.0)*x10564*x10570))+(((-1.0)*r12*x10567))+((r11*x10568)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10569))+((r22*x10563))+(((-1.0)*x10566*x10567)));
evalcond[5]=(((r01*x10569))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10563))+(((-1.0)*x10565*x10567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10571=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10571.valid){
continue;
}
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10571.value)))+(x10572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10573=IKcos(j4);
IkReal x10574=IKsin(j4);
IkReal x10575=(gconst5*r10);
IkReal x10576=(gconst5*r00);
IkReal x10577=(gconst5*r20);
IkReal x10578=((1.0)*x10573);
IkReal x10579=(gconst4*x10574);
IkReal x10580=(gconst4*x10573);
IkReal x10581=((1.0)*x10574);
evalcond[0]=(((r11*x10580))+(((-1.0)*x10575*x10578))+((r12*x10574)));
evalcond[1]=((((-1.0)*x10577*x10581))+(((-1.0)*r22*x10578))+((r21*x10579)));
evalcond[2]=(((r01*x10579))+(((-1.0)*r02*x10578))+(((-1.0)*x10576*x10581)));
evalcond[3]=((-1.0)+(((-1.0)*x10575*x10581))+(((-1.0)*r12*x10578))+((r11*x10579)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10580))+((r22*x10574))+(((-1.0)*x10577*x10578)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x10576*x10578))+((r02*x10574))+((cj1*cj2))+((r01*x10580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10582=((-1.0)*r21);
CheckValue<IkReal> x10585 = IKatan2WithCheck(IkReal(x10582),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10585.valid){
continue;
}
IkReal x10583=((1.0)*(x10585.value));
IkReal x10584=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10583)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10583)));
IkReal gconst4=(x10582*x10584);
IkReal gconst5=((1.0)*r20*x10584);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10586=((-1.0)*r21);
CheckValue<IkReal> x10589 = IKatan2WithCheck(IkReal(x10586),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10589.valid){
continue;
}
IkReal x10587=((1.0)*(x10589.value));
IkReal x10588=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10587)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10587)));
IkReal gconst4=(x10586*x10588);
IkReal gconst5=((1.0)*r20*x10588);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10590=((-1.0)*r21);
CheckValue<IkReal> x10593 = IKatan2WithCheck(IkReal(x10590),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10593.valid){
continue;
}
IkReal x10591=((1.0)*(x10593.value));
IkReal x10592=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10591)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10591)));
IkReal gconst4=(x10590*x10592);
IkReal gconst5=((1.0)*r20*x10592);
IkReal x10594=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10598=IKPowWithIntegerCheck(x10594,-1);
if(!x10598.valid){
continue;
}
IkReal x10595=x10598.value;
IkReal x10596=((1.0)*x10595);
IkReal x10597=((((-1.0)*x10596*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10595))+(((-1.0)*x10596*(r11*r11)*(r21*r21))));
j4eval[0]=x10597;
j4eval[1]=r12;
j4eval[2]=x10594;
j4eval[3]=IKsign(x10597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10599=(gconst5*r10);
IkReal x10600=(gconst4*r11);
CheckValue<IkReal> x10601=IKPowWithIntegerCheck(IKsign(((((2.0)*x10599*x10600))+(((-1.0)*(x10599*x10599)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10600*x10600))))),-1);
if(!x10601.valid){
continue;
}
CheckValue<IkReal> x10602 = IKatan2WithCheck(IkReal(((((-1.0)*x10600))+x10599)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10601.value)))+(x10602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10603=IKsin(j4);
IkReal x10604=IKcos(j4);
IkReal x10605=(gconst4*r11);
IkReal x10606=(gconst5*r10);
IkReal x10607=(gconst5*r00);
IkReal x10608=(gconst5*r20);
IkReal x10609=((1.0)*x10604);
IkReal x10610=(gconst4*x10603);
IkReal x10611=((1.0)*x10603);
evalcond[0]=((((-1.0)*x10608*x10611))+(((-1.0)*r22*x10609))+((r21*x10610)));
evalcond[1]=(((r01*x10610))+(((-1.0)*x10607*x10611))+(((-1.0)*r02*x10609)));
evalcond[2]=(((x10604*x10606))+(((-1.0)*r12*x10611))+(((-1.0)*x10605*x10609)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10609))+(((-1.0)*x10606*x10611))+((x10603*x10605)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10609))+(((-1.0)*r22*x10611))+((x10604*x10608)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10611))+((x10604*x10607))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10612=((1.0)*gconst5);
CheckValue<IkReal> x10613 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10612)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10613.valid){
continue;
}
CheckValue<IkReal> x10614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10612))+(((-1.0)*gconst4*r20)))),-1);
if(!x10614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10613.value)+(((1.5707963267949)*(x10614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10615=IKsin(j4);
IkReal x10616=IKcos(j4);
IkReal x10617=(gconst4*r11);
IkReal x10618=(gconst5*r10);
IkReal x10619=(gconst5*r00);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10616);
IkReal x10622=(gconst4*x10615);
IkReal x10623=((1.0)*x10615);
evalcond[0]=(((r21*x10622))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10623)));
evalcond[1]=((((-1.0)*r02*x10621))+((r01*x10622))+(((-1.0)*x10619*x10623)));
evalcond[2]=((((-1.0)*x10617*x10621))+((x10616*x10618))+(((-1.0)*r12*x10623)));
evalcond[3]=((-1.0)+(((-1.0)*x10618*x10623))+(((-1.0)*r12*x10621))+((x10615*x10617)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10616*x10620))+(((-1.0)*r22*x10623))+(((-1.0)*gconst4*r21*x10621)));
evalcond[5]=((((-1.0)*r02*x10623))+((x10616*x10619))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10624=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10624.valid){
continue;
}
CheckValue<IkReal> x10625 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10624.value)))+(x10625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10626=IKsin(j4);
IkReal x10627=IKcos(j4);
IkReal x10628=(gconst4*r11);
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst5*r00);
IkReal x10631=(gconst5*r20);
IkReal x10632=((1.0)*x10627);
IkReal x10633=(gconst4*x10626);
IkReal x10634=((1.0)*x10626);
evalcond[0]=((((-1.0)*x10631*x10634))+(((-1.0)*r22*x10632))+((r21*x10633)));
evalcond[1]=((((-1.0)*r02*x10632))+((r01*x10633))+(((-1.0)*x10630*x10634)));
evalcond[2]=(((x10627*x10629))+(((-1.0)*x10628*x10632))+(((-1.0)*r12*x10634)));
evalcond[3]=((-1.0)+((x10626*x10628))+(((-1.0)*r12*x10632))+(((-1.0)*x10629*x10634)));
evalcond[4]=(((cj2*sj1))+((x10627*x10631))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10632))+(((-1.0)*r22*x10634)));
evalcond[5]=((((-1.0)*r02*x10634))+((x10627*x10630))+(((-1.0)*gconst4*r01*x10632))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10635=((-1.0)*r21);
IkReal x10636=((-1.0)*px);
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(x10635),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
IkReal x10637=((1.0)*(x10638.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10637)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10636);
rxp1_1=(px*r21);
rxp1_2=(r11*x10636);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10637)));
IkReal gconst4=x10635;
IkReal gconst5=((1.0)*r20);
IkReal x10639=((1.0)*cj3);
IkReal x10640=(r10*r20);
IkReal x10641=(r11*r21);
j4eval[0]=((((-1.0)*x10640))+(((-1.0)*x10641)));
j4eval[1]=((((-1.0)*x10639*x10640))+(((-1.0)*x10639*x10641)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10642=((-1.0)*r21);
IkReal x10643=((-1.0)*px);
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(x10642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
IkReal x10644=((1.0)*(x10645.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10644)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10643);
rxp1_1=(px*r21);
rxp1_2=(r11*x10643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10644)));
IkReal gconst4=x10642;
IkReal gconst5=((1.0)*r20);
IkReal x10646=((1.0)*r11*r21);
IkReal x10647=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10647))+(((-1.0)*x10646)));
j4eval[1]=(((sj3*x10647))+((sj3*x10646)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10648=((-1.0)*r21);
IkReal x10649=((-1.0)*px);
CheckValue<IkReal> x10651 = IKatan2WithCheck(IkReal(x10648),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10651.valid){
continue;
}
IkReal x10650=((1.0)*(x10651.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10650)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10649);
rxp1_1=(px*r21);
rxp1_2=(r11*x10649);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10650)));
IkReal gconst4=x10648;
IkReal gconst5=((1.0)*r20);
IkReal x10652=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10652))+(((-1.0)*r11*r21*x10652)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10653=((1.0)*r10);
CheckValue<IkReal> x10654=IKPowWithIntegerCheck(cj3,-1);
if(!x10654.valid){
continue;
}
CheckValue<IkReal> x10655=IKPowWithIntegerCheck(r02,-1);
if(!x10655.valid){
continue;
}
CheckValue<IkReal> x10656=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10653))),-1);
if(!x10656.valid){
continue;
}
if( IKabs(((x10654.value)*(x10655.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10656.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10653)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10654.value)*(x10655.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10656.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10653))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10654.value)*(x10655.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10656.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10653))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10657=IKsin(j4);
IkReal x10658=IKcos(j4);
IkReal x10659=(cj2*sj1);
IkReal x10660=(cj1*sj2);
IkReal x10661=(gconst5*sj3);
IkReal x10662=(gconst4*r11);
IkReal x10663=(sj1*sj2);
IkReal x10664=((1.0)*gconst5);
IkReal x10665=(cj1*cj2);
IkReal x10666=(gconst4*r21);
IkReal x10667=(cj3*gconst4);
IkReal x10668=(gconst4*sj3);
IkReal x10669=(cj3*gconst5);
IkReal x10670=(r20*x10658);
IkReal x10671=(r10*x10658);
IkReal x10672=(cj3*x10658);
IkReal x10673=(r02*x10657);
IkReal x10674=(x10660+x10659);
IkReal x10675=((1.0)*sj3*x10658);
evalcond[0]=((-1.0)*r02*x10658);
evalcond[1]=((((-1.0)*r20*x10657*x10664))+((x10657*x10666)));
evalcond[2]=(((cj3*x10673))+(((-1.0)*x10663))+x10665);
evalcond[3]=((((-1.0)*sj3*x10673))+x10674);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10657*x10664))+((x10657*x10662)));
evalcond[5]=(((r10*x10668))+((x10662*x10672))+(((-1.0)*cj3*x10664*x10671))+((r11*x10661)));
evalcond[6]=(((x10661*x10671))+((r10*x10667))+(((-1.0)*x10662*x10675))+((r11*x10669)));
evalcond[7]=(((x10666*x10672))+((r20*x10668))+(((-1.0)*cj3*x10664*x10670))+x10674+((r21*x10661)));
evalcond[8]=(((x10661*x10670))+((r20*x10667))+(((-1.0)*x10665))+(((-1.0)*x10666*x10675))+x10663+((r21*x10669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10676=((1.0)*gconst5);
IkReal x10677=(gconst4*r11);
CheckValue<IkReal> x10678=IKPowWithIntegerCheck(((((-1.0)*r10*x10676))+x10677),-1);
if(!x10678.valid){
continue;
}
CheckValue<IkReal> x10679=IKPowWithIntegerCheck(((((-1.0)*sj3*x10677))+((gconst5*r10*sj3))),-1);
if(!x10679.valid){
continue;
}
if( IKabs(x10678.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10679.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10676)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10678.value)+IKsqr(((x10679.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10676))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10678.value, ((x10679.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10676))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10680=IKsin(j4);
IkReal x10681=IKcos(j4);
IkReal x10682=(cj2*sj1);
IkReal x10683=(cj1*sj2);
IkReal x10684=(gconst5*sj3);
IkReal x10685=(gconst4*r11);
IkReal x10686=(sj1*sj2);
IkReal x10687=((1.0)*gconst5);
IkReal x10688=(cj1*cj2);
IkReal x10689=(gconst4*r21);
IkReal x10690=(cj3*gconst4);
IkReal x10691=(gconst4*sj3);
IkReal x10692=(cj3*gconst5);
IkReal x10693=(r20*x10681);
IkReal x10694=(r10*x10681);
IkReal x10695=(cj3*x10681);
IkReal x10696=(r02*x10680);
IkReal x10697=(x10682+x10683);
IkReal x10698=((1.0)*sj3*x10681);
evalcond[0]=((-1.0)*r02*x10681);
evalcond[1]=((((-1.0)*r20*x10680*x10687))+((x10680*x10689)));
evalcond[2]=(((cj3*x10696))+(((-1.0)*x10686))+x10688);
evalcond[3]=((((-1.0)*sj3*x10696))+x10697);
evalcond[4]=((-1.0)+((x10680*x10685))+(((-1.0)*r10*x10680*x10687)));
evalcond[5]=(((x10685*x10695))+((r10*x10691))+((r11*x10684))+(((-1.0)*cj3*x10687*x10694)));
evalcond[6]=(((r10*x10690))+((r11*x10692))+((x10684*x10694))+(((-1.0)*x10685*x10698)));
evalcond[7]=(((x10689*x10695))+((r21*x10684))+x10697+(((-1.0)*cj3*x10687*x10693))+((r20*x10691)));
evalcond[8]=(((r21*x10692))+((x10684*x10693))+(((-1.0)*x10689*x10698))+(((-1.0)*x10688))+x10686+((r20*x10690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10699=((1.0)*sj3);
IkReal x10700=(gconst4*r11);
IkReal x10701=((1.0)*gconst5*r10);
CheckValue<IkReal> x10702=IKPowWithIntegerCheck((x10700+(((-1.0)*x10701))),-1);
if(!x10702.valid){
continue;
}
CheckValue<IkReal> x10703=IKPowWithIntegerCheck(((((-1.0)*cj3*x10701))+((cj3*x10700))),-1);
if(!x10703.valid){
continue;
}
if( IKabs(x10702.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10703.value)*(((((-1.0)*gconst5*r11*x10699))+(((-1.0)*gconst4*r10*x10699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10702.value)+IKsqr(((x10703.value)*(((((-1.0)*gconst5*r11*x10699))+(((-1.0)*gconst4*r10*x10699))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10702.value, ((x10703.value)*(((((-1.0)*gconst5*r11*x10699))+(((-1.0)*gconst4*r10*x10699))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10704=IKsin(j4);
IkReal x10705=IKcos(j4);
IkReal x10706=(cj2*sj1);
IkReal x10707=(cj1*sj2);
IkReal x10708=(gconst5*sj3);
IkReal x10709=(gconst4*r11);
IkReal x10710=(sj1*sj2);
IkReal x10711=((1.0)*gconst5);
IkReal x10712=(cj1*cj2);
IkReal x10713=(gconst4*r21);
IkReal x10714=(cj3*gconst4);
IkReal x10715=(gconst4*sj3);
IkReal x10716=(cj3*gconst5);
IkReal x10717=(r20*x10705);
IkReal x10718=(r10*x10705);
IkReal x10719=(cj3*x10705);
IkReal x10720=(r02*x10704);
IkReal x10721=(x10707+x10706);
IkReal x10722=((1.0)*sj3*x10705);
evalcond[0]=((-1.0)*r02*x10705);
evalcond[1]=((((-1.0)*r20*x10704*x10711))+((x10704*x10713)));
evalcond[2]=((((-1.0)*x10710))+x10712+((cj3*x10720)));
evalcond[3]=(x10721+(((-1.0)*sj3*x10720)));
evalcond[4]=((-1.0)+((x10704*x10709))+(((-1.0)*r10*x10704*x10711)));
evalcond[5]=(((r11*x10708))+((x10709*x10719))+((r10*x10715))+(((-1.0)*cj3*x10711*x10718)));
evalcond[6]=(((r11*x10716))+(((-1.0)*x10709*x10722))+((x10708*x10718))+((r10*x10714)));
evalcond[7]=(((r20*x10715))+((r21*x10708))+x10721+((x10713*x10719))+(((-1.0)*cj3*x10711*x10717)));
evalcond[8]=((((-1.0)*x10712))+(((-1.0)*x10713*x10722))+((r20*x10714))+((x10708*x10717))+((r21*x10716))+x10710);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10723=gconst4*gconst4;
IkReal x10724=gconst5*gconst5;
IkReal x10725=(r10*r21);
IkReal x10726=((1.0)*cj3);
IkReal x10727=(r11*r21);
IkReal x10728=(r11*r20);
IkReal x10729=(r22*sj3);
IkReal x10730=(gconst4*r10);
IkReal x10731=((1.0)*sj3);
IkReal x10732=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10733 = IKatan2WithCheck(IkReal((((x10729*x10730))+((gconst5*r11*x10729)))),IkReal(((((-1.0)*gconst5*r20*x10730*x10731))+((gconst4*gconst5*sj3*x10727))+((sj3*x10723*x10725))+(((-1.0)*x10724*x10728*x10731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10733.valid){
continue;
}
CheckValue<IkReal> x10734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10726))+((x10725*x10732))+(((-1.0)*r10*r20*x10724*x10726))+(((-1.0)*x10723*x10726*x10727))+((x10728*x10732)))),-1);
if(!x10734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10733.value)+(((1.5707963267949)*(x10734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10735=IKsin(j4);
IkReal x10736=IKcos(j4);
IkReal x10737=(cj2*sj1);
IkReal x10738=(cj1*sj2);
IkReal x10739=(gconst5*sj3);
IkReal x10740=(gconst4*r11);
IkReal x10741=(sj1*sj2);
IkReal x10742=(gconst5*r10);
IkReal x10743=(cj1*cj2);
IkReal x10744=(gconst4*r01);
IkReal x10745=(gconst4*r21);
IkReal x10746=(gconst5*r00);
IkReal x10747=(gconst4*sj3);
IkReal x10748=(cj3*gconst5);
IkReal x10749=(cj3*gconst4);
IkReal x10750=((1.0)*x10736);
IkReal x10751=((1.0)*x10735);
IkReal x10752=(cj3*x10735);
IkReal x10753=(cj3*x10736);
IkReal x10754=(x10738+x10737);
evalcond[0]=(((x10735*x10745))+(((-1.0)*gconst5*r20*x10751))+(((-1.0)*r22*x10750)));
evalcond[1]=((((-1.0)*x10746*x10751))+(((-1.0)*r02*x10750))+((x10735*x10744)));
evalcond[2]=((-1.0)+((x10735*x10740))+(((-1.0)*r12*x10750))+(((-1.0)*x10742*x10751)));
evalcond[3]=(((r10*x10747))+(((-1.0)*cj3*x10742*x10750))+((r12*x10752))+((r11*x10739))+((x10740*x10753)));
evalcond[4]=(((r10*x10749))+(((-1.0)*sj3*x10740*x10750))+((r10*x10736*x10739))+((r11*x10748))+(((-1.0)*r12*sj3*x10751)));
evalcond[5]=(((x10745*x10753))+((r22*x10752))+((r21*x10739))+(((-1.0)*r20*x10748*x10750))+((r20*x10747))+x10754);
evalcond[6]=((((-1.0)*x10741))+(((-1.0)*cj3*x10746*x10750))+((r02*x10752))+x10743+((r01*x10739))+((x10744*x10753))+((r00*x10747)));
evalcond[7]=((((-1.0)*sj3*x10744*x10750))+(((-1.0)*r02*sj3*x10751))+((r00*x10736*x10739))+x10754+((r01*x10748))+((r00*x10749)));
evalcond[8]=((((-1.0)*x10743))+(((-1.0)*sj3*x10745*x10750))+((r20*x10749))+((r20*x10736*x10739))+(((-1.0)*r22*sj3*x10751))+x10741+((r21*x10748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10755=((1.0)*gconst5);
CheckValue<IkReal> x10756=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10755))+(((-1.0)*gconst4*r20)))),-1);
if(!x10756.valid){
continue;
}
CheckValue<IkReal> x10757 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10755))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10756.value)))+(x10757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10758=IKsin(j4);
IkReal x10759=IKcos(j4);
IkReal x10760=(cj2*sj1);
IkReal x10761=(cj1*sj2);
IkReal x10762=(gconst5*sj3);
IkReal x10763=(gconst4*r11);
IkReal x10764=(sj1*sj2);
IkReal x10765=(gconst5*r10);
IkReal x10766=(cj1*cj2);
IkReal x10767=(gconst4*r01);
IkReal x10768=(gconst4*r21);
IkReal x10769=(gconst5*r00);
IkReal x10770=(gconst4*sj3);
IkReal x10771=(cj3*gconst5);
IkReal x10772=(cj3*gconst4);
IkReal x10773=((1.0)*x10759);
IkReal x10774=((1.0)*x10758);
IkReal x10775=(cj3*x10758);
IkReal x10776=(cj3*x10759);
IkReal x10777=(x10761+x10760);
evalcond[0]=((((-1.0)*gconst5*r20*x10774))+(((-1.0)*r22*x10773))+((x10758*x10768)));
evalcond[1]=((((-1.0)*r02*x10773))+(((-1.0)*x10769*x10774))+((x10758*x10767)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10773))+(((-1.0)*x10765*x10774))+((x10758*x10763)));
evalcond[3]=(((r12*x10775))+((r11*x10762))+(((-1.0)*cj3*x10765*x10773))+((x10763*x10776))+((r10*x10770)));
evalcond[4]=(((r11*x10771))+((r10*x10759*x10762))+(((-1.0)*sj3*x10763*x10773))+(((-1.0)*r12*sj3*x10774))+((r10*x10772)));
evalcond[5]=((((-1.0)*r20*x10771*x10773))+((r20*x10770))+((r21*x10762))+((r22*x10775))+x10777+((x10768*x10776)));
evalcond[6]=((((-1.0)*x10764))+(((-1.0)*cj3*x10769*x10773))+((r01*x10762))+((x10767*x10776))+((r00*x10770))+x10766+((r02*x10775)));
evalcond[7]=(((r00*x10759*x10762))+(((-1.0)*sj3*x10767*x10773))+(((-1.0)*r02*sj3*x10774))+((r00*x10772))+((r01*x10771))+x10777);
evalcond[8]=((((-1.0)*x10766))+((r20*x10772))+((r21*x10771))+x10764+((r20*x10759*x10762))+(((-1.0)*sj3*x10768*x10773))+(((-1.0)*r22*sj3*x10774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10778=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10778.valid){
continue;
}
CheckValue<IkReal> x10779 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10778.value)))+(x10779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10780=IKsin(j4);
IkReal x10781=IKcos(j4);
IkReal x10782=(cj2*sj1);
IkReal x10783=(cj1*sj2);
IkReal x10784=(gconst5*sj3);
IkReal x10785=(gconst4*r11);
IkReal x10786=(sj1*sj2);
IkReal x10787=(gconst5*r10);
IkReal x10788=(cj1*cj2);
IkReal x10789=(gconst4*r01);
IkReal x10790=(gconst4*r21);
IkReal x10791=(gconst5*r00);
IkReal x10792=(gconst4*sj3);
IkReal x10793=(cj3*gconst5);
IkReal x10794=(cj3*gconst4);
IkReal x10795=((1.0)*x10781);
IkReal x10796=((1.0)*x10780);
IkReal x10797=(cj3*x10780);
IkReal x10798=(cj3*x10781);
IkReal x10799=(x10783+x10782);
evalcond[0]=(((x10780*x10790))+(((-1.0)*gconst5*r20*x10796))+(((-1.0)*r22*x10795)));
evalcond[1]=((((-1.0)*r02*x10795))+(((-1.0)*x10791*x10796))+((x10780*x10789)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10795))+(((-1.0)*x10787*x10796))+((x10780*x10785)));
evalcond[3]=(((r10*x10792))+((r11*x10784))+((r12*x10797))+(((-1.0)*cj3*x10787*x10795))+((x10785*x10798)));
evalcond[4]=(((r10*x10794))+((r10*x10781*x10784))+(((-1.0)*sj3*x10785*x10795))+(((-1.0)*r12*sj3*x10796))+((r11*x10793)));
evalcond[5]=(((r21*x10784))+(((-1.0)*r20*x10793*x10795))+((r20*x10792))+((x10790*x10798))+x10799+((r22*x10797)));
evalcond[6]=((((-1.0)*cj3*x10791*x10795))+((r02*x10797))+((r01*x10784))+(((-1.0)*x10786))+((r00*x10792))+x10788+((x10789*x10798)));
evalcond[7]=(((r00*x10781*x10784))+(((-1.0)*r02*sj3*x10796))+(((-1.0)*sj3*x10789*x10795))+((r00*x10794))+x10799+((r01*x10793)));
evalcond[8]=(((r21*x10793))+((r20*x10794))+(((-1.0)*sj3*x10790*x10795))+(((-1.0)*r22*sj3*x10796))+(((-1.0)*x10788))+((r20*x10781*x10784))+x10786);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10800=((-1.0)*r21);
CheckValue<IkReal> x10803 = IKatan2WithCheck(IkReal(x10800),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10803.valid){
continue;
}
IkReal x10801=((1.0)*(x10803.value));
IkReal x10802=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10801)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10801)));
IkReal gconst4=(x10800*x10802);
IkReal gconst5=((1.0)*r20*x10802);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10804=((-1.0)*r21);
CheckValue<IkReal> x10807 = IKatan2WithCheck(IkReal(x10804),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10807.valid){
continue;
}
IkReal x10805=((1.0)*(x10807.value));
IkReal x10806=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10805)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10805)));
IkReal gconst4=(x10804*x10806);
IkReal gconst5=((1.0)*r20*x10806);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10808=((-1.0)*r21);
CheckValue<IkReal> x10811 = IKatan2WithCheck(IkReal(x10808),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10811.valid){
continue;
}
IkReal x10809=((1.0)*(x10811.value));
IkReal x10810=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10809)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10809)));
IkReal gconst4=(x10808*x10810);
IkReal gconst5=((1.0)*r20*x10810);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10812=((-1.0)*r21);
CheckValue<IkReal> x10815 = IKatan2WithCheck(IkReal(x10812),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10815.valid){
continue;
}
IkReal x10813=((1.0)*(x10815.value));
IkReal x10814=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10813)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10813)));
IkReal gconst4=(x10812*x10814);
IkReal gconst5=((1.0)*r20*x10814);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10816=((-1.0)*r21);
CheckValue<IkReal> x10819 = IKatan2WithCheck(IkReal(x10816),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10819.valid){
continue;
}
IkReal x10817=((1.0)*(x10819.value));
IkReal x10818=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10817)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10817)));
IkReal gconst4=(x10816*x10818);
IkReal gconst5=((1.0)*r20*x10818);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10820=((-1.0)*r21);
CheckValue<IkReal> x10823 = IKatan2WithCheck(IkReal(x10820),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10823.valid){
continue;
}
IkReal x10821=((1.0)*(x10823.value));
IkReal x10822=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10821)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10821)));
IkReal gconst4=(x10820*x10822);
IkReal gconst5=((1.0)*r20*x10822);
IkReal x10824=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10828=IKPowWithIntegerCheck(x10824,-1);
if(!x10828.valid){
continue;
}
IkReal x10825=x10828.value;
IkReal x10826=((1.0)*x10825);
IkReal x10827=((((-2.0)*r00*r01*r20*r21*x10825))+(((-1.0)*(r02*r02)))+(((-1.0)*x10826*(r01*r01)*(r21*r21)))+(((-1.0)*x10826*(r00*r00)*(r20*r20))));
j4eval[0]=x10827;
j4eval[1]=r02;
j4eval[2]=x10824;
j4eval[3]=IKsign(x10827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10829=(gconst5*r00);
IkReal x10830=(gconst4*r01);
CheckValue<IkReal> x10831=IKPowWithIntegerCheck(IKsign(((((2.0)*x10829*x10830))+(((-1.0)*(x10829*x10829)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10830*x10830))))),-1);
if(!x10831.valid){
continue;
}
CheckValue<IkReal> x10832 = IKatan2WithCheck(IkReal(((((-1.0)*x10830))+x10829)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10831.value)))+(x10832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10833=IKsin(j4);
IkReal x10834=IKcos(j4);
IkReal x10835=(gconst4*r11);
IkReal x10836=((1.0)*cj1);
IkReal x10837=(gconst5*r10);
IkReal x10838=(gconst4*r01);
IkReal x10839=(gconst5*r00);
IkReal x10840=(gconst4*r21);
IkReal x10841=(gconst5*r20);
IkReal x10842=((1.0)*x10834);
IkReal x10843=((1.0)*x10833);
evalcond[0]=(((x10833*x10840))+(((-1.0)*r22*x10842))+(((-1.0)*x10841*x10843)));
evalcond[1]=(((x10833*x10835))+(((-1.0)*r12*x10842))+(((-1.0)*x10837*x10843)));
evalcond[2]=((((-1.0)*r02*x10843))+((x10834*x10839))+(((-1.0)*x10838*x10842)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10842))+((x10833*x10838))+(((-1.0)*x10839*x10843)));
evalcond[4]=((((-1.0)*r22*x10843))+((sj1*sj2))+(((-1.0)*x10840*x10842))+((x10834*x10841))+(((-1.0)*cj2*x10836)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r12*x10843))+((x10834*x10837))+(((-1.0)*x10835*x10842))+(((-1.0)*sj2*x10836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10844=((1.0)*gconst5);
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
CheckValue<IkReal> x10846=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10844))+(((-1.0)*gconst4*r10)))),-1);
if(!x10846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10845.value)+(((1.5707963267949)*(x10846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10847=IKsin(j4);
IkReal x10848=IKcos(j4);
IkReal x10849=(gconst4*r11);
IkReal x10850=((1.0)*cj1);
IkReal x10851=(gconst5*r10);
IkReal x10852=(gconst4*r01);
IkReal x10853=(gconst5*r00);
IkReal x10854=(gconst4*r21);
IkReal x10855=(gconst5*r20);
IkReal x10856=((1.0)*x10848);
IkReal x10857=((1.0)*x10847);
evalcond[0]=(((x10847*x10854))+(((-1.0)*x10855*x10857))+(((-1.0)*r22*x10856)));
evalcond[1]=((((-1.0)*r12*x10856))+((x10847*x10849))+(((-1.0)*x10851*x10857)));
evalcond[2]=((((-1.0)*x10852*x10856))+((x10848*x10853))+(((-1.0)*r02*x10857)));
evalcond[3]=((-1.0)+((x10847*x10852))+(((-1.0)*x10853*x10857))+(((-1.0)*r02*x10856)));
evalcond[4]=(((sj1*sj2))+((x10848*x10855))+(((-1.0)*x10854*x10856))+(((-1.0)*cj2*x10850))+(((-1.0)*r22*x10857)));
evalcond[5]=((((-1.0)*x10849*x10856))+(((-1.0)*r12*x10857))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10850))+((x10848*x10851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
CheckValue<IkReal> x10859=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10858.value)+(((1.5707963267949)*(x10859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10860=IKsin(j4);
IkReal x10861=IKcos(j4);
IkReal x10862=(gconst4*r11);
IkReal x10863=((1.0)*cj1);
IkReal x10864=(gconst5*r10);
IkReal x10865=(gconst4*r01);
IkReal x10866=(gconst5*r00);
IkReal x10867=(gconst4*r21);
IkReal x10868=(gconst5*r20);
IkReal x10869=((1.0)*x10861);
IkReal x10870=((1.0)*x10860);
evalcond[0]=((((-1.0)*r22*x10869))+((x10860*x10867))+(((-1.0)*x10868*x10870)));
evalcond[1]=((((-1.0)*r12*x10869))+(((-1.0)*x10864*x10870))+((x10860*x10862)));
evalcond[2]=((((-1.0)*x10865*x10869))+(((-1.0)*r02*x10870))+((x10861*x10866)));
evalcond[3]=((-1.0)+((x10860*x10865))+(((-1.0)*x10866*x10870))+(((-1.0)*r02*x10869)));
evalcond[4]=((((-1.0)*r22*x10870))+((sj1*sj2))+(((-1.0)*x10867*x10869))+(((-1.0)*cj2*x10863))+((x10861*x10868)));
evalcond[5]=((((-1.0)*r12*x10870))+(((-1.0)*x10862*x10869))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10863))+((x10861*x10864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10871=((-1.0)*r21);
CheckValue<IkReal> x10874 = IKatan2WithCheck(IkReal(x10871),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10874.valid){
continue;
}
IkReal x10872=((1.0)*(x10874.value));
IkReal x10873=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10872)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10872)));
IkReal gconst4=(x10871*x10873);
IkReal gconst5=((1.0)*r20*x10873);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10875=((-1.0)*r21);
CheckValue<IkReal> x10878 = IKatan2WithCheck(IkReal(x10875),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10878.valid){
continue;
}
IkReal x10876=((1.0)*(x10878.value));
IkReal x10877=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10876)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10876)));
IkReal gconst4=(x10875*x10877);
IkReal gconst5=((1.0)*r20*x10877);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10879=((-1.0)*r21);
CheckValue<IkReal> x10882 = IKatan2WithCheck(IkReal(x10879),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10882.valid){
continue;
}
IkReal x10880=((1.0)*(x10882.value));
IkReal x10881=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10880)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10880)));
IkReal gconst4=(x10879*x10881);
IkReal gconst5=((1.0)*r20*x10881);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10883=(gconst4*r01);
IkReal x10884=(gconst5*r00);
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(((((-1.0)*x10884))+x10883)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
CheckValue<IkReal> x10886=IKPowWithIntegerCheck(IKsign(((x10884*x10884)+(x10883*x10883)+(r02*r02)+(((-2.0)*x10883*x10884)))),-1);
if(!x10886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10885.value)+(((1.5707963267949)*(x10886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10887=IKcos(j4);
IkReal x10888=IKsin(j4);
IkReal x10889=(gconst4*r11);
IkReal x10890=(gconst5*r10);
IkReal x10891=((1.0)*cj1);
IkReal x10892=(gconst5*r00);
IkReal x10893=(gconst5*r20);
IkReal x10894=((1.0)*x10887);
IkReal x10895=(gconst4*x10887);
IkReal x10896=((1.0)*x10888);
IkReal x10897=(gconst4*x10888);
evalcond[0]=(((r01*x10895))+(((-1.0)*x10892*x10894))+((r02*x10888)));
evalcond[1]=((((-1.0)*x10893*x10896))+((r21*x10897))+(((-1.0)*r22*x10894)));
evalcond[2]=((((-1.0)*x10890*x10896))+(((-1.0)*r12*x10894))+((x10888*x10889)));
evalcond[3]=((-1.0)+((r01*x10897))+(((-1.0)*x10892*x10896))+(((-1.0)*r02*x10894)));
evalcond[4]=((((-1.0)*x10893*x10894))+((sj1*sj2))+((r22*x10888))+((r21*x10895))+(((-1.0)*cj2*x10891)));
evalcond[5]=((((-1.0)*sj2*x10891))+(((-1.0)*x10890*x10894))+(((-1.0)*cj2*sj1))+((x10887*x10889))+((r12*x10888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10898=((1.0)*gconst5);
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10898))+(((-1.0)*gconst4*r10)))),-1);
if(!x10900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10899.value)+(((1.5707963267949)*(x10900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10901=IKcos(j4);
IkReal x10902=IKsin(j4);
IkReal x10903=(gconst4*r11);
IkReal x10904=(gconst5*r10);
IkReal x10905=((1.0)*cj1);
IkReal x10906=(gconst5*r00);
IkReal x10907=(gconst5*r20);
IkReal x10908=((1.0)*x10901);
IkReal x10909=(gconst4*x10901);
IkReal x10910=((1.0)*x10902);
IkReal x10911=(gconst4*x10902);
evalcond[0]=(((r01*x10909))+((r02*x10902))+(((-1.0)*x10906*x10908)));
evalcond[1]=((((-1.0)*r22*x10908))+((r21*x10911))+(((-1.0)*x10907*x10910)));
evalcond[2]=(((x10902*x10903))+(((-1.0)*r12*x10908))+(((-1.0)*x10904*x10910)));
evalcond[3]=((-1.0)+(((-1.0)*x10906*x10910))+((r01*x10911))+(((-1.0)*r02*x10908)));
evalcond[4]=(((r22*x10902))+((sj1*sj2))+(((-1.0)*x10907*x10908))+(((-1.0)*cj2*x10905))+((r21*x10909)));
evalcond[5]=(((r12*x10902))+((x10901*x10903))+(((-1.0)*cj2*sj1))+(((-1.0)*x10904*x10908))+(((-1.0)*sj2*x10905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
CheckValue<IkReal> x10913=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10912.value)+(((1.5707963267949)*(x10913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10914=IKcos(j4);
IkReal x10915=IKsin(j4);
IkReal x10916=(gconst4*r11);
IkReal x10917=(gconst5*r10);
IkReal x10918=((1.0)*cj1);
IkReal x10919=(gconst5*r00);
IkReal x10920=(gconst5*r20);
IkReal x10921=((1.0)*x10914);
IkReal x10922=(gconst4*x10914);
IkReal x10923=((1.0)*x10915);
IkReal x10924=(gconst4*x10915);
evalcond[0]=(((r02*x10915))+(((-1.0)*x10919*x10921))+((r01*x10922)));
evalcond[1]=((((-1.0)*x10920*x10923))+(((-1.0)*r22*x10921))+((r21*x10924)));
evalcond[2]=((((-1.0)*r12*x10921))+((x10915*x10916))+(((-1.0)*x10917*x10923)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10921))+(((-1.0)*x10919*x10923))+((r01*x10924)));
evalcond[4]=((((-1.0)*x10920*x10921))+((sj1*sj2))+((r21*x10922))+((r22*x10915))+(((-1.0)*cj2*x10918)));
evalcond[5]=((((-1.0)*sj2*x10918))+(((-1.0)*cj2*sj1))+(((-1.0)*x10917*x10921))+((r12*x10915))+((x10914*x10916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10925=((-1.0)*r21);
CheckValue<IkReal> x10928 = IKatan2WithCheck(IkReal(x10925),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10928.valid){
continue;
}
IkReal x10926=((1.0)*(x10928.value));
IkReal x10927=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10926)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10926)));
IkReal gconst4=(x10925*x10927);
IkReal gconst5=((1.0)*r20*x10927);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10929=((-1.0)*r21);
CheckValue<IkReal> x10932 = IKatan2WithCheck(IkReal(x10929),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10932.valid){
continue;
}
IkReal x10930=((1.0)*(x10932.value));
IkReal x10931=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10930)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10930)));
IkReal gconst4=(x10929*x10931);
IkReal gconst5=((1.0)*r20*x10931);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10933=((-1.0)*r21);
CheckValue<IkReal> x10936 = IKatan2WithCheck(IkReal(x10933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10936.valid){
continue;
}
IkReal x10934=((1.0)*(x10936.value));
IkReal x10935=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10934)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10934)));
IkReal gconst4=(x10933*x10935);
IkReal gconst5=((1.0)*r20*x10935);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10937=(gconst4*r01);
IkReal x10938=(gconst5*r00);
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(((((-1.0)*x10938))+x10937)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
CheckValue<IkReal> x10940=IKPowWithIntegerCheck(IKsign(((x10937*x10937)+(x10938*x10938)+(((-2.0)*x10937*x10938))+(r02*r02))),-1);
if(!x10940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10939.value)+(((1.5707963267949)*(x10940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10941=IKcos(j4);
IkReal x10942=IKsin(j4);
IkReal x10943=(gconst4*r11);
IkReal x10944=(gconst5*r10);
IkReal x10945=(gconst5*r00);
IkReal x10946=(gconst5*r20);
IkReal x10947=((1.0)*x10941);
IkReal x10948=(gconst4*x10941);
IkReal x10949=((1.0)*x10942);
IkReal x10950=(gconst4*x10942);
evalcond[0]=((((-1.0)*x10945*x10947))+((r01*x10948))+((r02*x10942)));
evalcond[1]=((((-1.0)*r22*x10947))+(((-1.0)*x10946*x10949))+((r21*x10950)));
evalcond[2]=(((x10942*x10943))+(((-1.0)*r12*x10947))+(((-1.0)*x10944*x10949)));
evalcond[3]=((-1.0)+(((-1.0)*x10945*x10949))+((r01*x10950))+(((-1.0)*r02*x10947)));
evalcond[4]=(((cj2*sj1))+((r21*x10948))+((cj1*sj2))+(((-1.0)*x10946*x10947))+((r22*x10942)));
evalcond[5]=(((x10941*x10943))+((r12*x10942))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10944*x10947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10951=((1.0)*gconst5);
CheckValue<IkReal> x10952 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10951))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10952.valid){
continue;
}
CheckValue<IkReal> x10953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10951))+(((-1.0)*gconst4*r10)))),-1);
if(!x10953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10952.value)+(((1.5707963267949)*(x10953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10954=IKcos(j4);
IkReal x10955=IKsin(j4);
IkReal x10956=(gconst4*r11);
IkReal x10957=(gconst5*r10);
IkReal x10958=(gconst5*r00);
IkReal x10959=(gconst5*r20);
IkReal x10960=((1.0)*x10954);
IkReal x10961=(gconst4*x10954);
IkReal x10962=((1.0)*x10955);
IkReal x10963=(gconst4*x10955);
evalcond[0]=(((r02*x10955))+((r01*x10961))+(((-1.0)*x10958*x10960)));
evalcond[1]=((((-1.0)*x10959*x10962))+(((-1.0)*r22*x10960))+((r21*x10963)));
evalcond[2]=((((-1.0)*x10957*x10962))+((x10955*x10956))+(((-1.0)*r12*x10960)));
evalcond[3]=((-1.0)+((r01*x10963))+(((-1.0)*x10958*x10962))+(((-1.0)*r02*x10960)));
evalcond[4]=(((cj2*sj1))+((r22*x10955))+((cj1*sj2))+(((-1.0)*x10959*x10960))+((r21*x10961)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10954*x10956))+(((-1.0)*x10957*x10960))+((r12*x10955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10964 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10964.valid){
continue;
}
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10964.value)+(((1.5707963267949)*(x10965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10966=IKcos(j4);
IkReal x10967=IKsin(j4);
IkReal x10968=(gconst4*r11);
IkReal x10969=(gconst5*r10);
IkReal x10970=(gconst5*r00);
IkReal x10971=(gconst5*r20);
IkReal x10972=((1.0)*x10966);
IkReal x10973=(gconst4*x10966);
IkReal x10974=((1.0)*x10967);
IkReal x10975=(gconst4*x10967);
evalcond[0]=(((r02*x10967))+(((-1.0)*x10970*x10972))+((r01*x10973)));
evalcond[1]=((((-1.0)*x10971*x10974))+(((-1.0)*r22*x10972))+((r21*x10975)));
evalcond[2]=(((x10967*x10968))+(((-1.0)*x10969*x10974))+(((-1.0)*r12*x10972)));
evalcond[3]=((-1.0)+(((-1.0)*x10970*x10974))+((r01*x10975))+(((-1.0)*r02*x10972)));
evalcond[4]=((((-1.0)*x10971*x10972))+((cj2*sj1))+((cj1*sj2))+((r22*x10967))+((r21*x10973)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10966*x10968))+((r12*x10967))+(((-1.0)*x10969*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10976=((-1.0)*r21);
CheckValue<IkReal> x10979 = IKatan2WithCheck(IkReal(x10976),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10979.valid){
continue;
}
IkReal x10977=((1.0)*(x10979.value));
IkReal x10978=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10977)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10977)));
IkReal gconst4=(x10976*x10978);
IkReal gconst5=((1.0)*r20*x10978);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10980=((-1.0)*r21);
CheckValue<IkReal> x10983 = IKatan2WithCheck(IkReal(x10980),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10983.valid){
continue;
}
IkReal x10981=((1.0)*(x10983.value));
IkReal x10982=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10981)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10981)));
IkReal gconst4=(x10980*x10982);
IkReal gconst5=((1.0)*r20*x10982);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10984=((-1.0)*r21);
CheckValue<IkReal> x10987 = IKatan2WithCheck(IkReal(x10984),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10987.valid){
continue;
}
IkReal x10985=((1.0)*(x10987.value));
IkReal x10986=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10985)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10985)));
IkReal gconst4=(x10984*x10986);
IkReal gconst5=((1.0)*r20*x10986);
IkReal x10988=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10992=IKPowWithIntegerCheck(x10988,-1);
if(!x10992.valid){
continue;
}
IkReal x10989=x10992.value;
IkReal x10990=((1.0)*x10989);
IkReal x10991=((((-1.0)*(r02*r02)))+(((-1.0)*x10990*(r00*r00)*(r20*r20)))+(((-1.0)*x10990*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10989)));
j4eval[0]=x10991;
j4eval[1]=r02;
j4eval[2]=x10988;
j4eval[3]=IKsign(x10991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10993=(gconst5*r00);
IkReal x10994=(gconst4*r01);
CheckValue<IkReal> x10995=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10993*x10993)))+(((-1.0)*(x10994*x10994)))+(((-1.0)*(r02*r02)))+(((2.0)*x10993*x10994)))),-1);
if(!x10995.valid){
continue;
}
CheckValue<IkReal> x10996 = IKatan2WithCheck(IkReal(((((-1.0)*x10994))+x10993)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10995.value)))+(x10996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10997=IKsin(j4);
IkReal x10998=IKcos(j4);
IkReal x10999=(gconst4*r11);
IkReal x11000=(gconst5*r10);
IkReal x11001=(gconst4*r01);
IkReal x11002=(gconst5*r00);
IkReal x11003=(gconst4*r21);
IkReal x11004=(gconst5*r20);
IkReal x11005=((1.0)*x10998);
IkReal x11006=((1.0)*x10997);
evalcond[0]=((((-1.0)*r22*x11005))+(((-1.0)*x11004*x11006))+((x10997*x11003)));
evalcond[1]=((((-1.0)*x11000*x11006))+((x10997*x10999))+(((-1.0)*r12*x11005)));
evalcond[2]=((((-1.0)*r02*x11006))+((x10998*x11002))+(((-1.0)*x11001*x11005)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11005))+(((-1.0)*x11002*x11006))+((x10997*x11001)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11006))+((cj1*sj2))+((x10998*x11004))+(((-1.0)*x11003*x11005)));
evalcond[5]=((((-1.0)*x10999*x11005))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10998*x11000))+(((-1.0)*r12*x11006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11007=((1.0)*gconst5);
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
CheckValue<IkReal> x11009=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11007))+(((-1.0)*gconst4*r10)))),-1);
if(!x11009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11008.value)+(((1.5707963267949)*(x11009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11010=IKsin(j4);
IkReal x11011=IKcos(j4);
IkReal x11012=(gconst4*r11);
IkReal x11013=(gconst5*r10);
IkReal x11014=(gconst4*r01);
IkReal x11015=(gconst5*r00);
IkReal x11016=(gconst4*r21);
IkReal x11017=(gconst5*r20);
IkReal x11018=((1.0)*x11011);
IkReal x11019=((1.0)*x11010);
evalcond[0]=((((-1.0)*r22*x11018))+((x11010*x11016))+(((-1.0)*x11017*x11019)));
evalcond[1]=((((-1.0)*x11013*x11019))+((x11010*x11012))+(((-1.0)*r12*x11018)));
evalcond[2]=((((-1.0)*r02*x11019))+(((-1.0)*x11014*x11018))+((x11011*x11015)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11018))+(((-1.0)*x11015*x11019))+((x11010*x11014)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11019))+((cj1*sj2))+((x11011*x11017))+(((-1.0)*x11016*x11018)));
evalcond[5]=((((-1.0)*x11012*x11018))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11019))+((x11011*x11013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11020 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11020.valid){
continue;
}
CheckValue<IkReal> x11021=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11020.value)+(((1.5707963267949)*(x11021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11022=IKsin(j4);
IkReal x11023=IKcos(j4);
IkReal x11024=(gconst4*r11);
IkReal x11025=(gconst5*r10);
IkReal x11026=(gconst4*r01);
IkReal x11027=(gconst5*r00);
IkReal x11028=(gconst4*r21);
IkReal x11029=(gconst5*r20);
IkReal x11030=((1.0)*x11023);
IkReal x11031=((1.0)*x11022);
evalcond[0]=(((x11022*x11028))+(((-1.0)*x11029*x11031))+(((-1.0)*r22*x11030)));
evalcond[1]=(((x11022*x11024))+(((-1.0)*r12*x11030))+(((-1.0)*x11025*x11031)));
evalcond[2]=((((-1.0)*r02*x11031))+(((-1.0)*x11026*x11030))+((x11023*x11027)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11030))+((x11022*x11026))+(((-1.0)*x11027*x11031)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11028*x11030))+((cj1*sj2))+(((-1.0)*r22*x11031))+((x11023*x11029)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11031))+(((-1.0)*x11024*x11030))+((x11023*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11032=gconst4*gconst4;
IkReal x11033=gconst5*gconst5;
IkReal x11034=(r01*r20);
IkReal x11035=(gconst4*sj3);
IkReal x11036=(r01*r21);
IkReal x11037=((1.0)*cj3);
IkReal x11038=(r00*r21);
IkReal x11039=(r00*r20);
IkReal x11040=(cj3*gconst4*gconst5);
IkReal x11041=((1.0)*x11033);
CheckValue<IkReal> x11042 = IKatan2WithCheck(IkReal((((r00*r22*x11035))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11035*x11036))+(((-1.0)*sj3*x11034*x11041))+(((-1.0)*gconst5*x11035*x11039))+((sj3*x11032*x11038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11042.valid){
continue;
}
CheckValue<IkReal> x11043=IKPowWithIntegerCheck(IKsign((((x11034*x11040))+(((-1.0)*x11033*x11037*x11039))+(((-1.0)*r02*r22*x11037))+(((-1.0)*x11032*x11036*x11037))+((x11038*x11040)))),-1);
if(!x11043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11042.value)+(((1.5707963267949)*(x11043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11044=IKsin(j4);
IkReal x11045=IKcos(j4);
IkReal x11046=(sj1*sj2);
IkReal x11047=(gconst5*sj3);
IkReal x11048=(gconst4*r11);
IkReal x11049=(gconst5*r10);
IkReal x11050=((1.0)*cj1);
IkReal x11051=(gconst4*r01);
IkReal x11052=(cj2*sj1);
IkReal x11053=(gconst5*r00);
IkReal x11054=(gconst4*sj3);
IkReal x11055=(cj3*gconst5);
IkReal x11056=(cj3*gconst4);
IkReal x11057=(gconst4*r21);
IkReal x11058=(cj2*x11050);
IkReal x11059=((1.0)*x11045);
IkReal x11060=((1.0)*x11044);
IkReal x11061=(cj3*x11044);
IkReal x11062=(cj3*x11045);
evalcond[0]=((((-1.0)*r22*x11059))+((x11044*x11057))+(((-1.0)*gconst5*r20*x11060)));
evalcond[1]=((((-1.0)*x11049*x11060))+((x11044*x11048))+(((-1.0)*r12*x11059)));
evalcond[2]=((-1.0)+(((-1.0)*x11053*x11060))+((x11044*x11051))+(((-1.0)*r02*x11059)));
evalcond[3]=(((r01*x11047))+((r00*x11054))+(((-1.0)*cj3*x11053*x11059))+((x11051*x11062))+((r02*x11061)));
evalcond[4]=((((-1.0)*sj3*x11051*x11059))+((r00*x11045*x11047))+(((-1.0)*r02*sj3*x11060))+((r00*x11056))+((r01*x11055)));
evalcond[5]=(((r20*x11054))+((cj1*sj2))+((r21*x11045*x11056))+(((-1.0)*r20*x11055*x11059))+x11052+((r22*x11061))+((r21*x11047)));
evalcond[6]=(((r11*x11047))+((x11048*x11062))+((r10*x11054))+(((-1.0)*cj3*x11049*x11059))+x11046+((r12*x11061))+(((-1.0)*x11058)));
evalcond[7]=(((r20*x11056))+(((-1.0)*r22*sj3*x11060))+x11046+((r21*x11055))+(((-1.0)*x11058))+((r20*x11045*x11047))+(((-1.0)*r21*x11054*x11059)));
evalcond[8]=(((r10*x11056))+(((-1.0)*sj3*x11048*x11059))+(((-1.0)*r12*sj3*x11060))+(((-1.0)*sj2*x11050))+(((-1.0)*x11052))+((r10*x11045*x11047))+((r11*x11055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11063=((1.0)*gconst5);
CheckValue<IkReal> x11064 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11064.valid){
continue;
}
CheckValue<IkReal> x11065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11063))+(((-1.0)*gconst4*r10)))),-1);
if(!x11065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11064.value)+(((1.5707963267949)*(x11065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11066=IKsin(j4);
IkReal x11067=IKcos(j4);
IkReal x11068=(sj1*sj2);
IkReal x11069=(gconst5*sj3);
IkReal x11070=(gconst4*r11);
IkReal x11071=(gconst5*r10);
IkReal x11072=((1.0)*cj1);
IkReal x11073=(gconst4*r01);
IkReal x11074=(cj2*sj1);
IkReal x11075=(gconst5*r00);
IkReal x11076=(gconst4*sj3);
IkReal x11077=(cj3*gconst5);
IkReal x11078=(cj3*gconst4);
IkReal x11079=(gconst4*r21);
IkReal x11080=(cj2*x11072);
IkReal x11081=((1.0)*x11067);
IkReal x11082=((1.0)*x11066);
IkReal x11083=(cj3*x11066);
IkReal x11084=(cj3*x11067);
evalcond[0]=(((x11066*x11079))+(((-1.0)*r22*x11081))+(((-1.0)*gconst5*r20*x11082)));
evalcond[1]=(((x11066*x11070))+(((-1.0)*x11071*x11082))+(((-1.0)*r12*x11081)));
evalcond[2]=((-1.0)+((x11066*x11073))+(((-1.0)*x11075*x11082))+(((-1.0)*r02*x11081)));
evalcond[3]=((((-1.0)*cj3*x11075*x11081))+((x11073*x11084))+((r01*x11069))+((r02*x11083))+((r00*x11076)));
evalcond[4]=(((r00*x11067*x11069))+(((-1.0)*sj3*x11073*x11081))+((r00*x11078))+(((-1.0)*r02*sj3*x11082))+((r01*x11077)));
evalcond[5]=(((r21*x11067*x11078))+(((-1.0)*r20*x11077*x11081))+((cj1*sj2))+x11074+((r22*x11083))+((r21*x11069))+((r20*x11076)));
evalcond[6]=(((x11070*x11084))+x11068+((r10*x11076))+((r11*x11069))+(((-1.0)*cj3*x11071*x11081))+((r12*x11083))+(((-1.0)*x11080)));
evalcond[7]=((((-1.0)*r21*x11076*x11081))+((r21*x11077))+(((-1.0)*r22*sj3*x11082))+x11068+((r20*x11067*x11069))+((r20*x11078))+(((-1.0)*x11080)));
evalcond[8]=(((r10*x11067*x11069))+(((-1.0)*r12*sj3*x11082))+((r11*x11077))+((r10*x11078))+(((-1.0)*sj3*x11070*x11081))+(((-1.0)*sj2*x11072))+(((-1.0)*x11074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11085 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11085.valid){
continue;
}
CheckValue<IkReal> x11086=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11085.value)+(((1.5707963267949)*(x11086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11087=IKsin(j4);
IkReal x11088=IKcos(j4);
IkReal x11089=(sj1*sj2);
IkReal x11090=(gconst5*sj3);
IkReal x11091=(gconst4*r11);
IkReal x11092=(gconst5*r10);
IkReal x11093=((1.0)*cj1);
IkReal x11094=(gconst4*r01);
IkReal x11095=(cj2*sj1);
IkReal x11096=(gconst5*r00);
IkReal x11097=(gconst4*sj3);
IkReal x11098=(cj3*gconst5);
IkReal x11099=(cj3*gconst4);
IkReal x11100=(gconst4*r21);
IkReal x11101=(cj2*x11093);
IkReal x11102=((1.0)*x11088);
IkReal x11103=((1.0)*x11087);
IkReal x11104=(cj3*x11087);
IkReal x11105=(cj3*x11088);
evalcond[0]=((((-1.0)*gconst5*r20*x11103))+((x11087*x11100))+(((-1.0)*r22*x11102)));
evalcond[1]=((((-1.0)*r12*x11102))+(((-1.0)*x11092*x11103))+((x11087*x11091)));
evalcond[2]=((-1.0)+(((-1.0)*x11096*x11103))+(((-1.0)*r02*x11102))+((x11087*x11094)));
evalcond[3]=(((r02*x11104))+((r00*x11097))+((x11094*x11105))+((r01*x11090))+(((-1.0)*cj3*x11096*x11102)));
evalcond[4]=(((r00*x11088*x11090))+(((-1.0)*r02*sj3*x11103))+((r00*x11099))+((r01*x11098))+(((-1.0)*sj3*x11094*x11102)));
evalcond[5]=(((cj1*sj2))+((r20*x11097))+(((-1.0)*r20*x11098*x11102))+x11095+((r21*x11088*x11099))+((r22*x11104))+((r21*x11090)));
evalcond[6]=(((x11091*x11105))+((r11*x11090))+x11089+(((-1.0)*cj3*x11092*x11102))+((r10*x11097))+(((-1.0)*x11101))+((r12*x11104)));
evalcond[7]=(((r20*x11088*x11090))+((r20*x11099))+x11089+(((-1.0)*r22*sj3*x11103))+(((-1.0)*x11101))+(((-1.0)*r21*x11097*x11102))+((r21*x11098)));
evalcond[8]=((((-1.0)*r12*sj3*x11103))+(((-1.0)*x11095))+(((-1.0)*sj3*x11091*x11102))+((r11*x11098))+(((-1.0)*sj2*x11093))+((r10*x11099))+((r10*x11088*x11090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11106=((-1.0)*r21);
CheckValue<IkReal> x11109 = IKatan2WithCheck(IkReal(x11106),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11109.valid){
continue;
}
IkReal x11107=((1.0)*(x11109.value));
IkReal x11108=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11107)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11107)));
IkReal gconst4=(x11106*x11108);
IkReal gconst5=((1.0)*r20*x11108);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11110=((-1.0)*r21);
CheckValue<IkReal> x11113 = IKatan2WithCheck(IkReal(x11110),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11113.valid){
continue;
}
IkReal x11111=((1.0)*(x11113.value));
IkReal x11112=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11111)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11111)));
IkReal gconst4=(x11110*x11112);
IkReal gconst5=((1.0)*r20*x11112);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11114=((-1.0)*r21);
CheckValue<IkReal> x11117 = IKatan2WithCheck(IkReal(x11114),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11117.valid){
continue;
}
IkReal x11115=((1.0)*(x11117.value));
IkReal x11116=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11115)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11115)));
IkReal gconst4=(x11114*x11116);
IkReal gconst5=((1.0)*r20*x11116);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11118=((-1.0)*r21);
CheckValue<IkReal> x11121 = IKatan2WithCheck(IkReal(x11118),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11121.valid){
continue;
}
IkReal x11119=((1.0)*(x11121.value));
IkReal x11120=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11119)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11119)));
IkReal gconst4=(x11118*x11120);
IkReal gconst5=((1.0)*r20*x11120);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11122=((-1.0)*r21);
CheckValue<IkReal> x11125 = IKatan2WithCheck(IkReal(x11122),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11125.valid){
continue;
}
IkReal x11123=((1.0)*(x11125.value));
IkReal x11124=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11123)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11123)));
IkReal gconst4=(x11122*x11124);
IkReal gconst5=((1.0)*r20*x11124);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11126=((-1.0)*r21);
CheckValue<IkReal> x11129 = IKatan2WithCheck(IkReal(x11126),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11129.valid){
continue;
}
IkReal x11127=((1.0)*(x11129.value));
IkReal x11128=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11127)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11127)));
IkReal gconst4=(x11126*x11128);
IkReal gconst5=((1.0)*r20*x11128);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11130=(gconst5*r00);
IkReal x11131=(gconst4*r01);
CheckValue<IkReal> x11132 = IKatan2WithCheck(IkReal(((((-1.0)*x11131))+x11130)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11132.valid){
continue;
}
CheckValue<IkReal> x11133=IKPowWithIntegerCheck(IKsign(((x11131*x11131)+(x11130*x11130)+(r02*r02)+(((-2.0)*x11130*x11131)))),-1);
if(!x11133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11132.value)+(((1.5707963267949)*(x11133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11134=IKsin(j4);
IkReal x11135=IKcos(j4);
IkReal x11136=(gconst4*r11);
IkReal x11137=(gconst5*r10);
IkReal x11138=(gconst4*r01);
IkReal x11139=(gconst5*r00);
IkReal x11140=(gconst4*r21);
IkReal x11141=(gconst5*r20);
IkReal x11142=((1.0)*x11135);
IkReal x11143=((1.0)*x11134);
evalcond[0]=(((x11134*x11140))+(((-1.0)*r22*x11142))+(((-1.0)*x11141*x11143)));
evalcond[1]=(((x11134*x11136))+(((-1.0)*x11137*x11143))+(((-1.0)*r12*x11142)));
evalcond[2]=(((x11135*x11139))+(((-1.0)*r02*x11143))+(((-1.0)*x11138*x11142)));
evalcond[3]=((1.0)+((x11134*x11138))+(((-1.0)*x11139*x11143))+(((-1.0)*r02*x11142)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11135*x11137))+(((-1.0)*x11136*x11142))+(((-1.0)*r12*x11143)));
evalcond[5]=((((-1.0)*x11140*x11142))+((x11135*x11141))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11144=((1.0)*gconst5);
CheckValue<IkReal> x11145 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11145.valid){
continue;
}
CheckValue<IkReal> x11146=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11144))+(((-1.0)*gconst4*r20)))),-1);
if(!x11146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11145.value)+(((1.5707963267949)*(x11146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11147=IKsin(j4);
IkReal x11148=IKcos(j4);
IkReal x11149=(gconst4*r11);
IkReal x11150=(gconst5*r10);
IkReal x11151=(gconst4*r01);
IkReal x11152=(gconst5*r00);
IkReal x11153=(gconst4*r21);
IkReal x11154=(gconst5*r20);
IkReal x11155=((1.0)*x11148);
IkReal x11156=((1.0)*x11147);
evalcond[0]=(((x11147*x11153))+(((-1.0)*r22*x11155))+(((-1.0)*x11154*x11156)));
evalcond[1]=(((x11147*x11149))+(((-1.0)*x11150*x11156))+(((-1.0)*r12*x11155)));
evalcond[2]=((((-1.0)*x11151*x11155))+((x11148*x11152))+(((-1.0)*r02*x11156)));
evalcond[3]=((1.0)+((x11147*x11151))+(((-1.0)*r02*x11155))+(((-1.0)*x11152*x11156)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11149*x11155))+((x11148*x11150))+(((-1.0)*r12*x11156)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11156))+(((-1.0)*x11153*x11155))+((x11148*x11154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11157=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11157.valid){
continue;
}
CheckValue<IkReal> x11158 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11157.value)))+(x11158.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11159=IKsin(j4);
IkReal x11160=IKcos(j4);
IkReal x11161=(gconst4*r11);
IkReal x11162=(gconst5*r10);
IkReal x11163=(gconst4*r01);
IkReal x11164=(gconst5*r00);
IkReal x11165=(gconst4*r21);
IkReal x11166=(gconst5*r20);
IkReal x11167=((1.0)*x11160);
IkReal x11168=((1.0)*x11159);
evalcond[0]=((((-1.0)*r22*x11167))+((x11159*x11165))+(((-1.0)*x11166*x11168)));
evalcond[1]=((((-1.0)*r12*x11167))+((x11159*x11161))+(((-1.0)*x11162*x11168)));
evalcond[2]=((((-1.0)*x11163*x11167))+((x11160*x11164))+(((-1.0)*r02*x11168)));
evalcond[3]=((1.0)+((x11159*x11163))+(((-1.0)*x11164*x11168))+(((-1.0)*r02*x11167)));
evalcond[4]=(((cj2*sj1))+((x11160*x11162))+(((-1.0)*x11161*x11167))+((cj1*sj2))+(((-1.0)*r12*x11168)));
evalcond[5]=(((x11160*x11166))+(((-1.0)*r22*x11168))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11165*x11167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11169=((-1.0)*r21);
CheckValue<IkReal> x11172 = IKatan2WithCheck(IkReal(x11169),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11172.valid){
continue;
}
IkReal x11170=((1.0)*(x11172.value));
IkReal x11171=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11170)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11170)));
IkReal gconst4=(x11169*x11171);
IkReal gconst5=((1.0)*r20*x11171);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11173=((-1.0)*r21);
CheckValue<IkReal> x11176 = IKatan2WithCheck(IkReal(x11173),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11176.valid){
continue;
}
IkReal x11174=((1.0)*(x11176.value));
IkReal x11175=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11174)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11174)));
IkReal gconst4=(x11173*x11175);
IkReal gconst5=((1.0)*r20*x11175);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11177=((-1.0)*r21);
CheckValue<IkReal> x11180 = IKatan2WithCheck(IkReal(x11177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11180.valid){
continue;
}
IkReal x11178=((1.0)*(x11180.value));
IkReal x11179=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11178)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11178)));
IkReal gconst4=(x11177*x11179);
IkReal gconst5=((1.0)*r20*x11179);
IkReal x11181=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11185=IKPowWithIntegerCheck(x11181,-1);
if(!x11185.valid){
continue;
}
IkReal x11182=x11185.value;
IkReal x11183=((1.0)*x11182);
IkReal x11184=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11182))+(((-1.0)*x11183*(r01*r01)*(r21*r21)))+(((-1.0)*x11183*(r00*r00)*(r20*r20))));
j4eval[0]=x11184;
j4eval[1]=IKsign(x11184);
j4eval[2]=r02;
j4eval[3]=x11181;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11186=(gconst4*r01);
IkReal x11187=(gconst5*r00);
CheckValue<IkReal> x11188 = IKatan2WithCheck(IkReal((x11186+(((-1.0)*x11187)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11188.valid){
continue;
}
CheckValue<IkReal> x11189=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11186*x11186)))+(((2.0)*x11186*x11187))+(((-1.0)*(x11187*x11187))))),-1);
if(!x11189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11188.value)+(((1.5707963267949)*(x11189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11190=IKcos(j4);
IkReal x11191=IKsin(j4);
IkReal x11192=(gconst4*r11);
IkReal x11193=(gconst5*r10);
IkReal x11194=(gconst5*r00);
IkReal x11195=(gconst5*r20);
IkReal x11196=((1.0)*x11190);
IkReal x11197=(gconst4*x11190);
IkReal x11198=((1.0)*x11191);
IkReal x11199=(gconst4*x11191);
evalcond[0]=(((r01*x11197))+((r02*x11191))+(((-1.0)*x11194*x11196)));
evalcond[1]=(((r21*x11199))+(((-1.0)*x11195*x11198))+(((-1.0)*r22*x11196)));
evalcond[2]=((((-1.0)*r12*x11196))+((x11191*x11192))+(((-1.0)*x11193*x11198)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11196))+((r01*x11199))+(((-1.0)*x11194*x11198)));
evalcond[4]=(((cj2*sj1))+((x11190*x11192))+((cj1*sj2))+((r12*x11191))+(((-1.0)*x11193*x11196)));
evalcond[5]=(((r21*x11197))+(((-1.0)*x11195*x11196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11200=((1.0)*gconst5);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11200))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
CheckValue<IkReal> x11202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11200))+(((-1.0)*gconst4*r20)))),-1);
if(!x11202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11201.value)+(((1.5707963267949)*(x11202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11203=IKcos(j4);
IkReal x11204=IKsin(j4);
IkReal x11205=(gconst4*r11);
IkReal x11206=(gconst5*r10);
IkReal x11207=(gconst5*r00);
IkReal x11208=(gconst5*r20);
IkReal x11209=((1.0)*x11203);
IkReal x11210=(gconst4*x11203);
IkReal x11211=((1.0)*x11204);
IkReal x11212=(gconst4*x11204);
evalcond[0]=(((r02*x11204))+(((-1.0)*x11207*x11209))+((r01*x11210)));
evalcond[1]=((((-1.0)*r22*x11209))+((r21*x11212))+(((-1.0)*x11208*x11211)));
evalcond[2]=(((x11204*x11205))+(((-1.0)*r12*x11209))+(((-1.0)*x11206*x11211)));
evalcond[3]=((1.0)+(((-1.0)*x11207*x11211))+((r01*x11212))+(((-1.0)*r02*x11209)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11206*x11209))+((cj1*sj2))+((x11203*x11205))+((r12*x11204)));
evalcond[5]=(((r21*x11210))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11204))+(((-1.0)*x11208*x11209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11213=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11213.valid){
continue;
}
CheckValue<IkReal> x11214 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11213.value)))+(x11214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11215=IKcos(j4);
IkReal x11216=IKsin(j4);
IkReal x11217=(gconst4*r11);
IkReal x11218=(gconst5*r10);
IkReal x11219=(gconst5*r00);
IkReal x11220=(gconst5*r20);
IkReal x11221=((1.0)*x11215);
IkReal x11222=(gconst4*x11215);
IkReal x11223=((1.0)*x11216);
IkReal x11224=(gconst4*x11216);
evalcond[0]=(((r02*x11216))+(((-1.0)*x11219*x11221))+((r01*x11222)));
evalcond[1]=((((-1.0)*x11220*x11223))+((r21*x11224))+(((-1.0)*r22*x11221)));
evalcond[2]=(((x11216*x11217))+(((-1.0)*x11218*x11223))+(((-1.0)*r12*x11221)));
evalcond[3]=((1.0)+(((-1.0)*x11219*x11223))+((r01*x11224))+(((-1.0)*r02*x11221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11218*x11221))+((r12*x11216))+((x11215*x11217)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11220*x11221))+((r21*x11222))+((r22*x11216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11225=((-1.0)*r21);
CheckValue<IkReal> x11228 = IKatan2WithCheck(IkReal(x11225),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11228.valid){
continue;
}
IkReal x11226=((1.0)*(x11228.value));
IkReal x11227=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11226)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11226)));
IkReal gconst4=(x11225*x11227);
IkReal gconst5=((1.0)*r20*x11227);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11229=((-1.0)*r21);
CheckValue<IkReal> x11232 = IKatan2WithCheck(IkReal(x11229),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11232.valid){
continue;
}
IkReal x11230=((1.0)*(x11232.value));
IkReal x11231=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11230)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11230)));
IkReal gconst4=(x11229*x11231);
IkReal gconst5=((1.0)*r20*x11231);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11233=((-1.0)*r21);
CheckValue<IkReal> x11236 = IKatan2WithCheck(IkReal(x11233),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11236.valid){
continue;
}
IkReal x11234=((1.0)*(x11236.value));
IkReal x11235=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11234)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11234)));
IkReal gconst4=(x11233*x11235);
IkReal gconst5=((1.0)*r20*x11235);
IkReal x11237=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11241=IKPowWithIntegerCheck(x11237,-1);
if(!x11241.valid){
continue;
}
IkReal x11238=x11241.value;
IkReal x11239=((1.0)*x11238);
IkReal x11240=((((-2.0)*r00*r01*r20*r21*x11238))+(((-1.0)*(r02*r02)))+(((-1.0)*x11239*(r00*r00)*(r20*r20)))+(((-1.0)*x11239*(r01*r01)*(r21*r21))));
j4eval[0]=x11240;
j4eval[1]=IKsign(x11240);
j4eval[2]=r02;
j4eval[3]=x11237;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11242=(gconst4*r01);
IkReal x11243=(gconst5*r00);
CheckValue<IkReal> x11244=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11242*x11242)))+(((-1.0)*(x11243*x11243)))+(((2.0)*x11242*x11243))+(((-1.0)*(r02*r02))))),-1);
if(!x11244.valid){
continue;
}
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(((((-1.0)*x11243))+x11242)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11244.value)))+(x11245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11246=IKcos(j4);
IkReal x11247=IKsin(j4);
IkReal x11248=(gconst5*r10);
IkReal x11249=(gconst5*r00);
IkReal x11250=(gconst5*r20);
IkReal x11251=((1.0)*x11246);
IkReal x11252=(gconst4*x11247);
IkReal x11253=(gconst4*x11246);
IkReal x11254=((1.0)*x11247);
evalcond[0]=(((r02*x11247))+(((-1.0)*x11249*x11251))+((r01*x11253)));
evalcond[1]=((((-1.0)*x11250*x11254))+((r21*x11252))+(((-1.0)*r22*x11251)));
evalcond[2]=(((r11*x11252))+(((-1.0)*x11248*x11254))+(((-1.0)*r12*x11251)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11251))+(((-1.0)*x11249*x11254))+((r01*x11252)));
evalcond[4]=(((cj2*sj1))+((r22*x11247))+((cj1*sj2))+(((-1.0)*x11250*x11251))+((r21*x11253)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x11253))+((r12*x11247))+(((-1.0)*x11248*x11251))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11255=((1.0)*gconst5);
CheckValue<IkReal> x11256 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11256.valid){
continue;
}
CheckValue<IkReal> x11257=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11255))+(((-1.0)*gconst4*r20)))),-1);
if(!x11257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11256.value)+(((1.5707963267949)*(x11257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11258=IKcos(j4);
IkReal x11259=IKsin(j4);
IkReal x11260=(gconst5*r10);
IkReal x11261=(gconst5*r00);
IkReal x11262=(gconst5*r20);
IkReal x11263=((1.0)*x11258);
IkReal x11264=(gconst4*x11259);
IkReal x11265=(gconst4*x11258);
IkReal x11266=((1.0)*x11259);
evalcond[0]=(((r02*x11259))+(((-1.0)*x11261*x11263))+((r01*x11265)));
evalcond[1]=(((r21*x11264))+(((-1.0)*r22*x11263))+(((-1.0)*x11262*x11266)));
evalcond[2]=((((-1.0)*x11260*x11266))+((r11*x11264))+(((-1.0)*r12*x11263)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11263))+(((-1.0)*x11261*x11266))+((r01*x11264)));
evalcond[4]=(((r22*x11259))+((cj2*sj1))+((cj1*sj2))+((r21*x11265))+(((-1.0)*x11262*x11263)));
evalcond[5]=((((-1.0)*x11260*x11263))+((r11*x11265))+(((-1.0)*sj1*sj2))+((r12*x11259))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11267.valid){
continue;
}
CheckValue<IkReal> x11268 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11267.value)))+(x11268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11269=IKcos(j4);
IkReal x11270=IKsin(j4);
IkReal x11271=(gconst5*r10);
IkReal x11272=(gconst5*r00);
IkReal x11273=(gconst5*r20);
IkReal x11274=((1.0)*x11269);
IkReal x11275=(gconst4*x11270);
IkReal x11276=(gconst4*x11269);
IkReal x11277=((1.0)*x11270);
evalcond[0]=(((r01*x11276))+((r02*x11270))+(((-1.0)*x11272*x11274)));
evalcond[1]=(((r21*x11275))+(((-1.0)*r22*x11274))+(((-1.0)*x11273*x11277)));
evalcond[2]=((((-1.0)*r12*x11274))+(((-1.0)*x11271*x11277))+((r11*x11275)));
evalcond[3]=((1.0)+((r01*x11275))+(((-1.0)*r02*x11274))+(((-1.0)*x11272*x11277)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11270))+((r21*x11276))+(((-1.0)*x11273*x11274)));
evalcond[5]=(((r12*x11270))+(((-1.0)*sj1*sj2))+(((-1.0)*x11271*x11274))+((cj1*cj2))+((r11*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11278=((-1.0)*r21);
CheckValue<IkReal> x11281 = IKatan2WithCheck(IkReal(x11278),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11281.valid){
continue;
}
IkReal x11279=((1.0)*(x11281.value));
IkReal x11280=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11279)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11279)));
IkReal gconst4=(x11278*x11280);
IkReal gconst5=((1.0)*r20*x11280);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11282=((-1.0)*r21);
CheckValue<IkReal> x11285 = IKatan2WithCheck(IkReal(x11282),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11285.valid){
continue;
}
IkReal x11283=((1.0)*(x11285.value));
IkReal x11284=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11283)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11283)));
IkReal gconst4=(x11282*x11284);
IkReal gconst5=((1.0)*r20*x11284);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11286=((-1.0)*r21);
CheckValue<IkReal> x11289 = IKatan2WithCheck(IkReal(x11286),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11289.valid){
continue;
}
IkReal x11287=((1.0)*(x11289.value));
IkReal x11288=x10080;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11287)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11287)));
IkReal gconst4=(x11286*x11288);
IkReal gconst5=((1.0)*r20*x11288);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11290=(gconst5*r00);
IkReal x11291=(gconst4*r01);
CheckValue<IkReal> x11292 = IKatan2WithCheck(IkReal((x11290+(((-1.0)*x11291)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11292.valid){
continue;
}
CheckValue<IkReal> x11293=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11290*x11291))+(x11290*x11290)+(x11291*x11291)+(r02*r02))),-1);
if(!x11293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11292.value)+(((1.5707963267949)*(x11293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11294=IKsin(j4);
IkReal x11295=IKcos(j4);
IkReal x11296=(gconst4*r11);
IkReal x11297=(gconst5*r10);
IkReal x11298=(gconst5*r00);
IkReal x11299=(gconst5*r20);
IkReal x11300=((1.0)*x11295);
IkReal x11301=(gconst4*x11294);
IkReal x11302=((1.0)*x11294);
evalcond[0]=((((-1.0)*x11299*x11302))+(((-1.0)*r22*x11300))+((r21*x11301)));
evalcond[1]=((((-1.0)*x11297*x11302))+((x11294*x11296))+(((-1.0)*r12*x11300)));
evalcond[2]=((((-1.0)*gconst4*r01*x11300))+(((-1.0)*r02*x11302))+((x11295*x11298)));
evalcond[3]=((1.0)+(((-1.0)*x11298*x11302))+((r01*x11301))+(((-1.0)*r02*x11300)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11300))+(((-1.0)*r22*x11302))+((x11295*x11299)));
evalcond[5]=((((-1.0)*x11296*x11300))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x11295*x11297))+(((-1.0)*r12*x11302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11303=((1.0)*gconst5);
CheckValue<IkReal> x11304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11303))+(((-1.0)*gconst4*r20)))),-1);
if(!x11304.valid){
continue;
}
CheckValue<IkReal> x11305 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11304.value)))+(x11305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11306=IKsin(j4);
IkReal x11307=IKcos(j4);
IkReal x11308=(gconst4*r11);
IkReal x11309=(gconst5*r10);
IkReal x11310=(gconst5*r00);
IkReal x11311=(gconst5*r20);
IkReal x11312=((1.0)*x11307);
IkReal x11313=(gconst4*x11306);
IkReal x11314=((1.0)*x11306);
evalcond[0]=((((-1.0)*x11311*x11314))+(((-1.0)*r22*x11312))+((r21*x11313)));
evalcond[1]=(((x11306*x11308))+(((-1.0)*x11309*x11314))+(((-1.0)*r12*x11312)));
evalcond[2]=((((-1.0)*r02*x11314))+(((-1.0)*gconst4*r01*x11312))+((x11307*x11310)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11312))+(((-1.0)*x11310*x11314))+((r01*x11313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11314))+((cj1*sj2))+((x11307*x11311))+(((-1.0)*gconst4*r21*x11312)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11314))+(((-1.0)*x11308*x11312))+((cj1*cj2))+((x11307*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11315=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11315.valid){
continue;
}
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11315.value)))+(x11316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11317=IKsin(j4);
IkReal x11318=IKcos(j4);
IkReal x11319=(gconst4*r11);
IkReal x11320=(gconst5*r10);
IkReal x11321=(gconst5*r00);
IkReal x11322=(gconst5*r20);
IkReal x11323=((1.0)*x11318);
IkReal x11324=(gconst4*x11317);
IkReal x11325=((1.0)*x11317);
evalcond[0]=((((-1.0)*r22*x11323))+(((-1.0)*x11322*x11325))+((r21*x11324)));
evalcond[1]=((((-1.0)*r12*x11323))+(((-1.0)*x11320*x11325))+((x11317*x11319)));
evalcond[2]=((((-1.0)*r02*x11325))+(((-1.0)*gconst4*r01*x11323))+((x11318*x11321)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11323))+(((-1.0)*x11321*x11325))+((r01*x11324)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11325))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11323))+((x11318*x11322)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11319*x11323))+(((-1.0)*r12*x11325))+((cj1*cj2))+((x11318*x11320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11326=((-1.0)*r21);
IkReal x11327=((-1.0)*r20);
CheckValue<IkReal> x11329 = IKatan2WithCheck(IkReal(x11326),IkReal(x11327),IKFAST_ATAN2_MAGTHRESH);
if(!x11329.valid){
continue;
}
IkReal x11328=((1.0)*(x11329.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11328)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11327);
rxp0_2=(py*r00);
rxp1_0=(py*x11326);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11328)));
IkReal gconst4=x11326;
IkReal gconst5=((1.0)*r20);
IkReal x11330=((1.0)*r01*r21);
IkReal x11331=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11330))+(((-1.0)*x11331)));
j4eval[1]=((((-1.0)*cj3*x11331))+(((-1.0)*cj3*x11330)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11332=((-1.0)*r21);
IkReal x11333=((-1.0)*r20);
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(x11332),IkReal(x11333),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
IkReal x11334=((1.0)*(x11335.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11334)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11333);
rxp0_2=(py*r00);
rxp1_0=(py*x11332);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11334)));
IkReal gconst4=x11332;
IkReal gconst5=((1.0)*r20);
IkReal x11336=((1.0)*r01*r21);
IkReal x11337=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11336))+(((-1.0)*x11337)));
j4eval[1]=(((sj3*x11337))+((sj3*x11336)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11338=((-1.0)*r21);
IkReal x11339=((-1.0)*r20);
CheckValue<IkReal> x11341 = IKatan2WithCheck(IkReal(x11338),IkReal(x11339),IKFAST_ATAN2_MAGTHRESH);
if(!x11341.valid){
continue;
}
IkReal x11340=((1.0)*(x11341.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11340)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11339);
rxp0_2=(py*r00);
rxp1_0=(py*x11338);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11340)));
IkReal gconst4=x11338;
IkReal gconst5=((1.0)*r20);
IkReal x11342=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11342))+(((-1.0)*r00*r20*x11342)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11343=((1.0)*gconst5);
CheckValue<IkReal> x11344=IKPowWithIntegerCheck(cj3,-1);
if(!x11344.valid){
continue;
}
CheckValue<IkReal> x11345=IKPowWithIntegerCheck(r12,-1);
if(!x11345.valid){
continue;
}
CheckValue<IkReal> x11346=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11343))+((cj3*gconst4*r01))),-1);
if(!x11346.valid){
continue;
}
if( IKabs(((x11344.value)*(x11345.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11346.value)*(((((-1.0)*r01*sj3*x11343))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11344.value)*(x11345.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11346.value)*(((((-1.0)*r01*sj3*x11343))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11344.value)*(x11345.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11346.value)*(((((-1.0)*r01*sj3*x11343))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11347=IKsin(j4);
IkReal x11348=IKcos(j4);
IkReal x11349=(cj2*sj1);
IkReal x11350=(cj1*sj2);
IkReal x11351=(sj1*sj2);
IkReal x11352=(gconst5*sj3);
IkReal x11353=(gconst5*r00);
IkReal x11354=(cj3*gconst5);
IkReal x11355=(gconst4*sj3);
IkReal x11356=(cj3*gconst4);
IkReal x11357=(cj1*cj2);
IkReal x11358=((1.0)*x11347);
IkReal x11359=(gconst4*x11347);
IkReal x11360=((1.0)*x11348);
IkReal x11361=(x11350+x11349);
IkReal x11362=(x11348*x11352);
IkReal x11363=(x11348*x11356);
evalcond[0]=((-1.0)*r12*x11348);
evalcond[1]=((((-1.0)*gconst5*r20*x11358))+((r21*x11359)));
evalcond[2]=(x11357+(((-1.0)*x11351))+((cj3*r12*x11347)));
evalcond[3]=(x11361+(((-1.0)*r12*sj3*x11358)));
evalcond[4]=((1.0)+(((-1.0)*x11353*x11358))+((r01*x11359)));
evalcond[5]=(((r01*x11363))+(((-1.0)*cj3*x11353*x11360))+((r01*x11352))+((r00*x11355)));
evalcond[6]=(((r00*x11362))+(((-1.0)*r01*x11355*x11360))+((r01*x11354))+((r00*x11356)));
evalcond[7]=(((r21*x11363))+x11361+(((-1.0)*r20*x11354*x11360))+((r20*x11355))+((r21*x11352)));
evalcond[8]=(x11351+(((-1.0)*r21*x11355*x11360))+((r20*x11356))+(((-1.0)*x11357))+((r21*x11354))+((r20*x11362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11364=((1.0)*gconst4);
IkReal x11365=(gconst5*r00);
CheckValue<IkReal> x11366=IKPowWithIntegerCheck(((((-1.0)*x11365))+((gconst4*r01))),-1);
if(!x11366.valid){
continue;
}
CheckValue<IkReal> x11367=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11364))+((sj3*x11365))),-1);
if(!x11367.valid){
continue;
}
if( IKabs(((-1.0)*(x11366.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11367.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11364)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11366.value)))+IKsqr(((x11367.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11364))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11366.value)), ((x11367.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11364))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11368=IKsin(j4);
IkReal x11369=IKcos(j4);
IkReal x11370=(cj2*sj1);
IkReal x11371=(cj1*sj2);
IkReal x11372=(sj1*sj2);
IkReal x11373=(gconst5*sj3);
IkReal x11374=(gconst5*r00);
IkReal x11375=(cj3*gconst5);
IkReal x11376=(gconst4*sj3);
IkReal x11377=(cj3*gconst4);
IkReal x11378=(cj1*cj2);
IkReal x11379=((1.0)*x11368);
IkReal x11380=(gconst4*x11368);
IkReal x11381=((1.0)*x11369);
IkReal x11382=(x11371+x11370);
IkReal x11383=(x11369*x11373);
IkReal x11384=(x11369*x11377);
evalcond[0]=((-1.0)*r12*x11369);
evalcond[1]=(((r21*x11380))+(((-1.0)*gconst5*r20*x11379)));
evalcond[2]=((((-1.0)*x11372))+((cj3*r12*x11368))+x11378);
evalcond[3]=((((-1.0)*r12*sj3*x11379))+x11382);
evalcond[4]=((1.0)+(((-1.0)*x11374*x11379))+((r01*x11380)));
evalcond[5]=(((r00*x11376))+((r01*x11373))+((r01*x11384))+(((-1.0)*cj3*x11374*x11381)));
evalcond[6]=(((r00*x11377))+(((-1.0)*r01*x11376*x11381))+((r01*x11375))+((r00*x11383)));
evalcond[7]=(((r20*x11376))+((r21*x11373))+x11382+((r21*x11384))+(((-1.0)*r20*x11375*x11381)));
evalcond[8]=(((r20*x11377))+(((-1.0)*x11378))+((r21*x11375))+((r20*x11383))+x11372+(((-1.0)*r21*x11376*x11381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11385=((1.0)*gconst5);
IkReal x11386=(gconst4*r01);
CheckValue<IkReal> x11387=IKPowWithIntegerCheck((x11386+(((-1.0)*r00*x11385))),-1);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388=IKPowWithIntegerCheck((((cj3*x11386))+(((-1.0)*cj3*r00*x11385))),-1);
if(!x11388.valid){
continue;
}
if( IKabs(((-1.0)*(x11387.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11388.value)*(((((-1.0)*r01*sj3*x11385))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11387.value)))+IKsqr(((x11388.value)*(((((-1.0)*r01*sj3*x11385))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11387.value)), ((x11388.value)*(((((-1.0)*r01*sj3*x11385))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11389=IKsin(j4);
IkReal x11390=IKcos(j4);
IkReal x11391=(cj2*sj1);
IkReal x11392=(cj1*sj2);
IkReal x11393=(sj1*sj2);
IkReal x11394=(gconst5*sj3);
IkReal x11395=(gconst5*r00);
IkReal x11396=(cj3*gconst5);
IkReal x11397=(gconst4*sj3);
IkReal x11398=(cj3*gconst4);
IkReal x11399=(cj1*cj2);
IkReal x11400=((1.0)*x11389);
IkReal x11401=(gconst4*x11389);
IkReal x11402=((1.0)*x11390);
IkReal x11403=(x11391+x11392);
IkReal x11404=(x11390*x11394);
IkReal x11405=(x11390*x11398);
evalcond[0]=((-1.0)*r12*x11390);
evalcond[1]=(((r21*x11401))+(((-1.0)*gconst5*r20*x11400)));
evalcond[2]=(((cj3*r12*x11389))+x11399+(((-1.0)*x11393)));
evalcond[3]=(x11403+(((-1.0)*r12*sj3*x11400)));
evalcond[4]=((1.0)+((r01*x11401))+(((-1.0)*x11395*x11400)));
evalcond[5]=(((r00*x11397))+((r01*x11394))+((r01*x11405))+(((-1.0)*cj3*x11395*x11402)));
evalcond[6]=(((r00*x11398))+((r01*x11396))+(((-1.0)*r01*x11397*x11402))+((r00*x11404)));
evalcond[7]=(((r21*x11405))+x11403+((r20*x11397))+(((-1.0)*r20*x11396*x11402))+((r21*x11394)));
evalcond[8]=(((r20*x11398))+x11393+(((-1.0)*x11399))+((r20*x11404))+(((-1.0)*r21*x11397*x11402))+((r21*x11396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11406=gconst4*gconst4;
IkReal x11407=gconst5*gconst5;
IkReal x11408=(r01*r20);
IkReal x11409=(gconst4*sj3);
IkReal x11410=(r01*r21);
IkReal x11411=((1.0)*cj3);
IkReal x11412=(r00*r21);
IkReal x11413=(r00*r20);
IkReal x11414=(cj3*gconst4*gconst5);
IkReal x11415=((1.0)*x11407);
CheckValue<IkReal> x11416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11411))+(((-1.0)*x11406*x11410*x11411))+((x11408*x11414))+(((-1.0)*x11407*x11411*x11413))+((x11412*x11414)))),-1);
if(!x11416.valid){
continue;
}
CheckValue<IkReal> x11417 = IKatan2WithCheck(IkReal((((r00*r22*x11409))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11409*x11410))+((sj3*x11406*x11412))+(((-1.0)*gconst5*x11409*x11413))+(((-1.0)*sj3*x11408*x11415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11416.value)))+(x11417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11418=IKsin(j4);
IkReal x11419=IKcos(j4);
IkReal x11420=(cj2*sj1);
IkReal x11421=(cj1*sj2);
IkReal x11422=(gconst5*sj3);
IkReal x11423=(gconst4*r11);
IkReal x11424=(sj1*sj2);
IkReal x11425=(gconst5*r10);
IkReal x11426=(cj1*cj2);
IkReal x11427=(gconst4*r01);
IkReal x11428=(gconst5*r00);
IkReal x11429=(gconst4*sj3);
IkReal x11430=(cj3*gconst5);
IkReal x11431=(cj3*gconst4);
IkReal x11432=(gconst4*r21);
IkReal x11433=((1.0)*x11419);
IkReal x11434=((1.0)*x11418);
IkReal x11435=(cj3*x11418);
IkReal x11436=(cj3*x11419);
IkReal x11437=(x11421+x11420);
evalcond[0]=((((-1.0)*gconst5*r20*x11434))+((x11418*x11432))+(((-1.0)*r22*x11433)));
evalcond[1]=((((-1.0)*x11425*x11434))+(((-1.0)*r12*x11433))+((x11418*x11423)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11433))+(((-1.0)*x11428*x11434))+((x11418*x11427)));
evalcond[3]=(((r02*x11435))+(((-1.0)*cj3*x11428*x11433))+((x11427*x11436))+((r01*x11422))+((r00*x11429)));
evalcond[4]=((((-1.0)*sj3*x11427*x11433))+((r01*x11430))+((r00*x11431))+((r00*x11419*x11422))+(((-1.0)*r02*sj3*x11434)));
evalcond[5]=(((r20*x11429))+x11437+(((-1.0)*r20*x11430*x11433))+((r21*x11419*x11431))+((r21*x11422))+((r22*x11435)));
evalcond[6]=(x11426+((r10*x11429))+((x11423*x11436))+(((-1.0)*x11424))+((r11*x11422))+((r12*x11435))+(((-1.0)*cj3*x11425*x11433)));
evalcond[7]=(x11437+((r10*x11419*x11422))+((r10*x11431))+(((-1.0)*r12*sj3*x11434))+((r11*x11430))+(((-1.0)*sj3*x11423*x11433)));
evalcond[8]=(((r20*x11431))+x11424+((r20*x11419*x11422))+((r21*x11430))+(((-1.0)*x11426))+(((-1.0)*r21*x11429*x11433))+(((-1.0)*r22*sj3*x11434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11438=((1.0)*gconst5);
CheckValue<IkReal> x11439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11438))+(((-1.0)*gconst4*r20)))),-1);
if(!x11439.valid){
continue;
}
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11438))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11439.value)))+(x11440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11441=IKsin(j4);
IkReal x11442=IKcos(j4);
IkReal x11443=(cj2*sj1);
IkReal x11444=(cj1*sj2);
IkReal x11445=(gconst5*sj3);
IkReal x11446=(gconst4*r11);
IkReal x11447=(sj1*sj2);
IkReal x11448=(gconst5*r10);
IkReal x11449=(cj1*cj2);
IkReal x11450=(gconst4*r01);
IkReal x11451=(gconst5*r00);
IkReal x11452=(gconst4*sj3);
IkReal x11453=(cj3*gconst5);
IkReal x11454=(cj3*gconst4);
IkReal x11455=(gconst4*r21);
IkReal x11456=((1.0)*x11442);
IkReal x11457=((1.0)*x11441);
IkReal x11458=(cj3*x11441);
IkReal x11459=(cj3*x11442);
IkReal x11460=(x11443+x11444);
evalcond[0]=(((x11441*x11455))+(((-1.0)*gconst5*r20*x11457))+(((-1.0)*r22*x11456)));
evalcond[1]=((((-1.0)*x11448*x11457))+((x11441*x11446))+(((-1.0)*r12*x11456)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11456))+((x11441*x11450))+(((-1.0)*x11451*x11457)));
evalcond[3]=(((r02*x11458))+((x11450*x11459))+((r00*x11452))+((r01*x11445))+(((-1.0)*cj3*x11451*x11456)));
evalcond[4]=(((r00*x11442*x11445))+((r01*x11453))+(((-1.0)*sj3*x11450*x11456))+((r00*x11454))+(((-1.0)*r02*sj3*x11457)));
evalcond[5]=(x11460+(((-1.0)*r20*x11453*x11456))+((r20*x11452))+((r21*x11445))+((r22*x11458))+((r21*x11442*x11454)));
evalcond[6]=(((r10*x11452))+(((-1.0)*x11447))+x11449+((x11446*x11459))+((r11*x11445))+(((-1.0)*cj3*x11448*x11456))+((r12*x11458)));
evalcond[7]=((((-1.0)*sj3*x11446*x11456))+((r10*x11454))+x11460+(((-1.0)*r12*sj3*x11457))+((r10*x11442*x11445))+((r11*x11453)));
evalcond[8]=((((-1.0)*x11449))+(((-1.0)*r21*x11452*x11456))+x11447+((r20*x11454))+((r21*x11453))+(((-1.0)*r22*sj3*x11457))+((r20*x11442*x11445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11461=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11461.valid){
continue;
}
CheckValue<IkReal> x11462 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11461.value)))+(x11462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11463=IKsin(j4);
IkReal x11464=IKcos(j4);
IkReal x11465=(cj2*sj1);
IkReal x11466=(cj1*sj2);
IkReal x11467=(gconst5*sj3);
IkReal x11468=(gconst4*r11);
IkReal x11469=(sj1*sj2);
IkReal x11470=(gconst5*r10);
IkReal x11471=(cj1*cj2);
IkReal x11472=(gconst4*r01);
IkReal x11473=(gconst5*r00);
IkReal x11474=(gconst4*sj3);
IkReal x11475=(cj3*gconst5);
IkReal x11476=(cj3*gconst4);
IkReal x11477=(gconst4*r21);
IkReal x11478=((1.0)*x11464);
IkReal x11479=((1.0)*x11463);
IkReal x11480=(cj3*x11463);
IkReal x11481=(cj3*x11464);
IkReal x11482=(x11466+x11465);
evalcond[0]=((((-1.0)*gconst5*r20*x11479))+(((-1.0)*r22*x11478))+((x11463*x11477)));
evalcond[1]=((((-1.0)*r12*x11478))+(((-1.0)*x11470*x11479))+((x11463*x11468)));
evalcond[2]=((1.0)+(((-1.0)*x11473*x11479))+(((-1.0)*r02*x11478))+((x11463*x11472)));
evalcond[3]=(((r00*x11474))+((r01*x11467))+(((-1.0)*cj3*x11473*x11478))+((r02*x11480))+((x11472*x11481)));
evalcond[4]=(((r00*x11476))+((r00*x11464*x11467))+(((-1.0)*r02*sj3*x11479))+(((-1.0)*sj3*x11472*x11478))+((r01*x11475)));
evalcond[5]=((((-1.0)*r20*x11475*x11478))+x11482+((r21*x11464*x11476))+((r22*x11480))+((r20*x11474))+((r21*x11467)));
evalcond[6]=(x11471+((r11*x11467))+((r10*x11474))+(((-1.0)*cj3*x11470*x11478))+((x11468*x11481))+((r12*x11480))+(((-1.0)*x11469)));
evalcond[7]=(x11482+((r10*x11464*x11467))+((r11*x11475))+((r10*x11476))+(((-1.0)*r12*sj3*x11479))+(((-1.0)*sj3*x11468*x11478)));
evalcond[8]=((((-1.0)*x11471))+x11469+(((-1.0)*r21*x11474*x11478))+(((-1.0)*r22*sj3*x11479))+((r20*x11464*x11467))+((r20*x11476))+((r21*x11475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11483=((-1.0)*r21);
IkReal x11484=((-1.0)*px);
CheckValue<IkReal> x11486 = IKatan2WithCheck(IkReal(x11483),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11486.valid){
continue;
}
IkReal x11485=((1.0)*(x11486.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11485)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11484);
rxp1_1=(px*r21);
rxp1_2=(r11*x11484);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11485)));
IkReal gconst4=x11483;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11487=((-1.0)*r21);
IkReal x11488=((-1.0)*px);
CheckValue<IkReal> x11490 = IKatan2WithCheck(IkReal(x11487),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11490.valid){
continue;
}
IkReal x11489=((1.0)*(x11490.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11489)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11488);
rxp1_1=(px*r21);
rxp1_2=(r11*x11488);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11489)));
IkReal gconst4=x11487;
IkReal gconst5=((1.0)*r20);
IkReal x11491=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11491))+((x11491*(r10*r10)))+(((-1.0)*x11491*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11492=((-1.0)*r21);
IkReal x11493=((-1.0)*px);
CheckValue<IkReal> x11495 = IKatan2WithCheck(IkReal(x11492),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11495.valid){
continue;
}
IkReal x11494=((1.0)*(x11495.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11494)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11493);
rxp1_1=(px*r21);
rxp1_2=(r11*x11493);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11494)));
IkReal gconst4=x11492;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11496=((-1.0)*r21);
IkReal x11497=((-1.0)*px);
CheckValue<IkReal> x11499 = IKatan2WithCheck(IkReal(x11496),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11499.valid){
continue;
}
IkReal x11498=((1.0)*(x11499.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11498)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11497);
rxp1_1=(px*r21);
rxp1_2=(r11*x11497);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11498)));
IkReal gconst4=x11496;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11500=((-1.0)*r21);
IkReal x11501=((-1.0)*px);
CheckValue<IkReal> x11503 = IKatan2WithCheck(IkReal(x11500),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11503.valid){
continue;
}
IkReal x11502=((1.0)*(x11503.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11502)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11501);
rxp1_1=(px*r21);
rxp1_2=(r11*x11501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11502)));
IkReal gconst4=x11500;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11504=((-1.0)*r21);
IkReal x11505=((-1.0)*px);
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal(x11504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
IkReal x11506=((1.0)*(x11507.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11506)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11505);
rxp1_1=(px*r21);
rxp1_2=(r11*x11505);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11506)));
IkReal gconst4=x11504;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11510=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11510.valid){
continue;
}
IkReal x11508=x11510.value;
IkReal x11509=(sj0*x11508);
cj4array[0]=(((cj2*sj1*x11509))+((cj1*sj2*x11509)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11511=IKsin(j4);
IkReal x11512=IKcos(j4);
IkReal x11513=(gconst5*r20);
IkReal x11514=(gconst4*x11511);
IkReal x11515=((1.0)*x11512);
IkReal x11516=((1.0)*x11511);
evalcond[0]=((-1.0)*r02*x11511);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11515)));
evalcond[2]=((((-1.0)*x11513*x11516))+((r21*x11514)));
evalcond[3]=((((-1.0)*gconst5*r10*x11516))+((r11*x11514)));
evalcond[4]=(((x11512*x11513))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11518=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11518.valid){
continue;
}
IkReal x11517=x11518.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11517))+((cj1*cj2*x11517)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11519=IKsin(j4);
IkReal x11520=IKcos(j4);
IkReal x11521=(gconst5*r10);
IkReal x11522=((1.0)*sj0);
IkReal x11523=(gconst4*x11519);
IkReal x11524=((1.0)*x11520);
IkReal x11525=((1.0)*x11519);
evalcond[0]=((-1.0)*r02*x11519);
evalcond[1]=((((-1.0)*r02*x11524))+(((-1.0)*x11522)));
evalcond[2]=((((-1.0)*gconst5*r20*x11525))+((r21*x11523)));
evalcond[3]=(((r11*x11523))+(((-1.0)*x11521*x11525)));
evalcond[4]=((((-1.0)*cj2*sj1*x11522))+(((-1.0)*cj1*sj2*x11522))+((x11520*x11521))+(((-1.0)*gconst4*r11*x11524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11526=IKPowWithIntegerCheck(r02,-1);
if(!x11526.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11526.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11527=IKsin(j4);
IkReal x11528=IKcos(j4);
IkReal x11529=((1.0)*sj0);
IkReal x11530=(gconst5*x11528);
IkReal x11531=(gconst4*x11527);
IkReal x11532=((1.0)*gconst4*x11528);
IkReal x11533=((1.0)*gconst5*x11527);
evalcond[0]=((-1.0)*r02*x11527);
evalcond[1]=(((r21*x11531))+(((-1.0)*r20*x11533)));
evalcond[2]=((((-1.0)*r10*x11533))+((r11*x11531)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11530))+(((-1.0)*r21*x11532)));
evalcond[4]=((((-1.0)*r11*x11532))+(((-1.0)*cj2*sj1*x11529))+(((-1.0)*cj1*sj2*x11529))+((r10*x11530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11534=((-1.0)*r21);
IkReal x11535=((-1.0)*px);
CheckValue<IkReal> x11537 = IKatan2WithCheck(IkReal(x11534),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11537.valid){
continue;
}
IkReal x11536=((1.0)*(x11537.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11536)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11535);
rxp1_1=(px*r21);
rxp1_2=(r11*x11535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11536)));
IkReal gconst4=x11534;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11538=((-1.0)*r21);
IkReal x11539=((-1.0)*px);
CheckValue<IkReal> x11541 = IKatan2WithCheck(IkReal(x11538),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11541.valid){
continue;
}
IkReal x11540=((1.0)*(x11541.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11540)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11539);
rxp1_1=(px*r21);
rxp1_2=(r11*x11539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11540)));
IkReal gconst4=x11538;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11542=((-1.0)*r21);
IkReal x11543=((-1.0)*px);
CheckValue<IkReal> x11545 = IKatan2WithCheck(IkReal(x11542),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11545.valid){
continue;
}
IkReal x11544=((1.0)*(x11545.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11544)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11543);
rxp1_1=(px*r21);
rxp1_2=(r11*x11543);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11544)));
IkReal gconst4=x11542;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11548=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11548.valid){
continue;
}
IkReal x11546=x11548.value;
IkReal x11547=(sj0*x11546);
cj4array[0]=(((cj1*sj2*x11547))+((cj2*sj1*x11547)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11549=IKsin(j4);
IkReal x11550=IKcos(j4);
IkReal x11551=(gconst5*r20);
IkReal x11552=(gconst4*x11549);
IkReal x11553=((1.0)*x11550);
IkReal x11554=((1.0)*x11549);
evalcond[0]=(r02*x11549);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11553)));
evalcond[2]=(((r21*x11552))+(((-1.0)*x11551*x11554)));
evalcond[3]=(((r11*x11552))+(((-1.0)*gconst5*r10*x11554)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11551*x11553))+((gconst4*r21*x11550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11556=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11556.valid){
continue;
}
IkReal x11555=x11556.value;
cj4array[0]=(((cj1*cj2*x11555))+(((-1.0)*sj1*sj2*x11555)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11557=IKsin(j4);
IkReal x11558=IKcos(j4);
IkReal x11559=(gconst4*r11);
IkReal x11560=((1.0)*sj0);
IkReal x11561=(gconst5*r10);
IkReal x11562=((1.0)*x11558);
IkReal x11563=((1.0)*x11557);
evalcond[0]=(r02*x11557);
evalcond[1]=((((-1.0)*x11560))+(((-1.0)*r02*x11562)));
evalcond[2]=((((-1.0)*gconst5*r20*x11563))+((gconst4*r21*x11557)));
evalcond[3]=(((x11557*x11559))+(((-1.0)*x11561*x11563)));
evalcond[4]=((((-1.0)*cj2*sj1*x11560))+((x11558*x11559))+(((-1.0)*cj1*sj2*x11560))+(((-1.0)*x11561*x11562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11564=IKPowWithIntegerCheck(r02,-1);
if(!x11564.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11564.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11565=IKsin(j4);
IkReal x11566=IKcos(j4);
IkReal x11567=(gconst4*r11);
IkReal x11568=((1.0)*cj1);
IkReal x11569=(gconst4*r21);
IkReal x11570=((1.0)*gconst5*x11566);
IkReal x11571=((1.0)*gconst5*x11565);
evalcond[0]=(r02*x11565);
evalcond[1]=(((x11565*x11569))+(((-1.0)*r20*x11571)));
evalcond[2]=(((x11565*x11567))+(((-1.0)*r10*x11571)));
evalcond[3]=(((x11566*x11569))+((sj1*sj2))+(((-1.0)*cj2*x11568))+(((-1.0)*r20*x11570)));
evalcond[4]=(((x11566*x11567))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11570))+(((-1.0)*sj0*sj2*x11568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11573=IKPowWithIntegerCheck(r02,-1);
if(!x11573.valid){
continue;
}
IkReal x11572=x11573.value;
CheckValue<IkReal> x11574=IKPowWithIntegerCheck(cj3,-1);
if(!x11574.valid){
continue;
}
if( IKabs((x11572*(x11574.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11572)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11572*(x11574.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11572))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11572*(x11574.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11572));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11575=IKsin(j4);
IkReal x11576=IKcos(j4);
IkReal x11577=(gconst5*sj3);
IkReal x11578=(gconst4*r11);
IkReal x11579=(sj1*sj2);
IkReal x11580=((1.0)*gconst5);
IkReal x11581=(cj2*sj1);
IkReal x11582=((1.0)*sj0);
IkReal x11583=((1.0)*cj0);
IkReal x11584=(gconst4*r21);
IkReal x11585=(cj1*sj2);
IkReal x11586=(cj3*gconst4);
IkReal x11587=(gconst4*sj3);
IkReal x11588=(cj3*gconst5);
IkReal x11589=(r20*x11576);
IkReal x11590=((1.0)*cj1*cj2);
IkReal x11591=(r10*x11576);
IkReal x11592=(cj3*x11576);
IkReal x11593=(r02*x11575);
IkReal x11594=((1.0)*sj3*x11576);
evalcond[0]=((((-1.0)*r02*x11576))+(((-1.0)*x11582)));
evalcond[1]=(((x11575*x11584))+(((-1.0)*r20*x11575*x11580)));
evalcond[2]=(cj0+(((-1.0)*r10*x11575*x11580))+((x11575*x11578)));
evalcond[3]=((((-1.0)*cj1*cj2*x11583))+((cj0*x11579))+((cj3*x11593)));
evalcond[4]=((((-1.0)*sj3*x11593))+(((-1.0)*x11583*x11585))+(((-1.0)*x11581*x11583)));
evalcond[5]=(((r20*x11587))+x11585+x11581+(((-1.0)*cj3*x11580*x11589))+((r21*x11577))+((x11584*x11592)));
evalcond[6]=(((r20*x11586))+x11579+((x11577*x11589))+(((-1.0)*x11590))+(((-1.0)*x11584*x11594))+((r21*x11588)));
evalcond[7]=(((sj0*x11579))+(((-1.0)*cj3*x11580*x11591))+(((-1.0)*cj1*cj2*x11582))+((r11*x11577))+((r10*x11587))+((x11578*x11592)));
evalcond[8]=((((-1.0)*x11581*x11582))+((r10*x11586))+(((-1.0)*x11582*x11585))+(((-1.0)*x11578*x11594))+((x11577*x11591))+((r11*x11588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11595=((1.0)*gconst5);
CheckValue<IkReal> x11596=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11595))),-1);
if(!x11596.valid){
continue;
}
CheckValue<IkReal> x11597=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11595))+((cj3*gconst4*r21))),-1);
if(!x11597.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11596.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11597.value)*(((((-1.0)*r21*sj3*x11595))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11596.value)))+IKsqr(((x11597.value)*(((((-1.0)*r21*sj3*x11595))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11596.value)), ((x11597.value)*(((((-1.0)*r21*sj3*x11595))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11598=IKsin(j4);
IkReal x11599=IKcos(j4);
IkReal x11600=(gconst5*sj3);
IkReal x11601=(gconst4*r11);
IkReal x11602=(sj1*sj2);
IkReal x11603=((1.0)*gconst5);
IkReal x11604=(cj2*sj1);
IkReal x11605=((1.0)*sj0);
IkReal x11606=((1.0)*cj0);
IkReal x11607=(gconst4*r21);
IkReal x11608=(cj1*sj2);
IkReal x11609=(cj3*gconst4);
IkReal x11610=(gconst4*sj3);
IkReal x11611=(cj3*gconst5);
IkReal x11612=(r20*x11599);
IkReal x11613=((1.0)*cj1*cj2);
IkReal x11614=(r10*x11599);
IkReal x11615=(cj3*x11599);
IkReal x11616=(r02*x11598);
IkReal x11617=((1.0)*sj3*x11599);
evalcond[0]=((((-1.0)*r02*x11599))+(((-1.0)*x11605)));
evalcond[1]=((((-1.0)*r20*x11598*x11603))+((x11598*x11607)));
evalcond[2]=(cj0+((x11598*x11601))+(((-1.0)*r10*x11598*x11603)));
evalcond[3]=(((cj3*x11616))+(((-1.0)*cj1*cj2*x11606))+((cj0*x11602)));
evalcond[4]=((((-1.0)*sj3*x11616))+(((-1.0)*x11606*x11608))+(((-1.0)*x11604*x11606)));
evalcond[5]=(x11604+x11608+((r21*x11600))+((x11607*x11615))+((r20*x11610))+(((-1.0)*cj3*x11603*x11612)));
evalcond[6]=(x11602+(((-1.0)*x11613))+((r21*x11611))+(((-1.0)*x11607*x11617))+((x11600*x11612))+((r20*x11609)));
evalcond[7]=(((sj0*x11602))+((x11601*x11615))+(((-1.0)*cj1*cj2*x11605))+((r11*x11600))+(((-1.0)*cj3*x11603*x11614))+((r10*x11610)));
evalcond[8]=(((r11*x11611))+(((-1.0)*x11601*x11617))+(((-1.0)*x11605*x11608))+((x11600*x11614))+((r10*x11609))+(((-1.0)*x11604*x11605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11618=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11618.valid){
continue;
}
CheckValue<IkReal> x11619=IKPowWithIntegerCheck(r02,-1);
if(!x11619.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11618.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11619.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11618.value)))+IKsqr(((-1.0)*sj0*(x11619.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11618.value)), ((-1.0)*sj0*(x11619.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11620=IKsin(j4);
IkReal x11621=IKcos(j4);
IkReal x11622=(gconst5*sj3);
IkReal x11623=(gconst4*r11);
IkReal x11624=(sj1*sj2);
IkReal x11625=((1.0)*gconst5);
IkReal x11626=(cj2*sj1);
IkReal x11627=((1.0)*sj0);
IkReal x11628=((1.0)*cj0);
IkReal x11629=(gconst4*r21);
IkReal x11630=(cj1*sj2);
IkReal x11631=(cj3*gconst4);
IkReal x11632=(gconst4*sj3);
IkReal x11633=(cj3*gconst5);
IkReal x11634=(r20*x11621);
IkReal x11635=((1.0)*cj1*cj2);
IkReal x11636=(r10*x11621);
IkReal x11637=(cj3*x11621);
IkReal x11638=(r02*x11620);
IkReal x11639=((1.0)*sj3*x11621);
evalcond[0]=((((-1.0)*x11627))+(((-1.0)*r02*x11621)));
evalcond[1]=((((-1.0)*r20*x11620*x11625))+((x11620*x11629)));
evalcond[2]=(cj0+(((-1.0)*r10*x11620*x11625))+((x11620*x11623)));
evalcond[3]=((((-1.0)*cj1*cj2*x11628))+((cj3*x11638))+((cj0*x11624)));
evalcond[4]=((((-1.0)*x11628*x11630))+(((-1.0)*sj3*x11638))+(((-1.0)*x11626*x11628)));
evalcond[5]=(x11626+x11630+(((-1.0)*cj3*x11625*x11634))+((r21*x11622))+((x11629*x11637))+((r20*x11632)));
evalcond[6]=((((-1.0)*x11635))+x11624+((x11622*x11634))+((r21*x11633))+((r20*x11631))+(((-1.0)*x11629*x11639)));
evalcond[7]=((((-1.0)*cj1*cj2*x11627))+((r10*x11632))+(((-1.0)*cj3*x11625*x11636))+((r11*x11622))+((x11623*x11637))+((sj0*x11624)));
evalcond[8]=(((r11*x11633))+((r10*x11631))+((x11622*x11636))+(((-1.0)*x11623*x11639))+(((-1.0)*x11626*x11627))+(((-1.0)*x11627*x11630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11640=((1.0)*sj0);
IkReal x11641=((1.0)*gconst4);
CheckValue<IkReal> x11642 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11640))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst4*r11*x11640))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*cj0*r01*x11641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11642.valid){
continue;
}
CheckValue<IkReal> x11643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11641)))),-1);
if(!x11643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11642.value)+(((1.5707963267949)*(x11643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11644=IKsin(j4);
IkReal x11645=IKcos(j4);
IkReal x11646=(gconst5*sj3);
IkReal x11647=(cj3*gconst5);
IkReal x11648=(gconst4*r11);
IkReal x11649=(sj1*sj2);
IkReal x11650=(cj2*sj1);
IkReal x11651=((1.0)*sj0);
IkReal x11652=(gconst4*r01);
IkReal x11653=(gconst4*r21);
IkReal x11654=((1.0)*cj0);
IkReal x11655=(cj1*sj2);
IkReal x11656=(gconst4*sj3);
IkReal x11657=(cj3*gconst4);
IkReal x11658=((1.0)*x11645);
IkReal x11659=((1.0)*cj1*cj2);
IkReal x11660=(cj3*x11644);
IkReal x11661=(cj3*x11645);
IkReal x11662=((1.0)*gconst5*x11644);
IkReal x11663=((1.0)*sj3*x11644);
evalcond[0]=((((-1.0)*r20*x11662))+(((-1.0)*r22*x11658))+((x11644*x11653)));
evalcond[1]=((((-1.0)*r12*x11658))+cj0+((x11644*x11648))+(((-1.0)*r10*x11662)));
evalcond[2]=((((-1.0)*r02*x11658))+(((-1.0)*x11651))+(((-1.0)*r00*x11662))+((x11644*x11652)));
evalcond[3]=(x11650+x11655+(((-1.0)*r20*x11647*x11658))+((r21*x11646))+((r20*x11656))+((r22*x11660))+((x11653*x11661)));
evalcond[4]=((((-1.0)*x11659))+x11649+((r20*x11645*x11646))+(((-1.0)*sj3*x11653*x11658))+((r21*x11647))+((r20*x11657))+(((-1.0)*r22*x11663)));
evalcond[5]=((((-1.0)*cj1*cj2*x11654))+(((-1.0)*r00*x11647*x11658))+((cj0*x11649))+((r02*x11660))+((r01*x11646))+((x11652*x11661))+((r00*x11656)));
evalcond[6]=((((-1.0)*cj1*cj2*x11651))+((r11*x11646))+((x11648*x11661))+((r10*x11656))+((sj0*x11649))+((r12*x11660))+(((-1.0)*r10*x11647*x11658)));
evalcond[7]=((((-1.0)*x11650*x11654))+(((-1.0)*sj3*x11652*x11658))+(((-1.0)*r02*x11663))+(((-1.0)*x11654*x11655))+((r01*x11647))+((r00*x11657))+((r00*x11645*x11646)));
evalcond[8]=(((r11*x11647))+(((-1.0)*x11650*x11651))+((r10*x11657))+(((-1.0)*sj3*x11648*x11658))+(((-1.0)*r12*x11663))+((r10*x11645*x11646))+(((-1.0)*x11651*x11655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11664=((1.0)*gconst5);
CheckValue<IkReal> x11665 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11664))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11665.valid){
continue;
}
CheckValue<IkReal> x11666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11664))+(((-1.0)*gconst4*r10)))),-1);
if(!x11666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11665.value)+(((1.5707963267949)*(x11666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11667=IKsin(j4);
IkReal x11668=IKcos(j4);
IkReal x11669=(gconst5*sj3);
IkReal x11670=(cj3*gconst5);
IkReal x11671=(gconst4*r11);
IkReal x11672=(sj1*sj2);
IkReal x11673=(cj2*sj1);
IkReal x11674=((1.0)*sj0);
IkReal x11675=(gconst4*r01);
IkReal x11676=(gconst4*r21);
IkReal x11677=((1.0)*cj0);
IkReal x11678=(cj1*sj2);
IkReal x11679=(gconst4*sj3);
IkReal x11680=(cj3*gconst4);
IkReal x11681=((1.0)*x11668);
IkReal x11682=((1.0)*cj1*cj2);
IkReal x11683=(cj3*x11667);
IkReal x11684=(cj3*x11668);
IkReal x11685=((1.0)*gconst5*x11667);
IkReal x11686=((1.0)*sj3*x11667);
evalcond[0]=((((-1.0)*r22*x11681))+(((-1.0)*r20*x11685))+((x11667*x11676)));
evalcond[1]=(cj0+(((-1.0)*r12*x11681))+(((-1.0)*r10*x11685))+((x11667*x11671)));
evalcond[2]=((((-1.0)*r00*x11685))+(((-1.0)*r02*x11681))+((x11667*x11675))+(((-1.0)*x11674)));
evalcond[3]=(((x11676*x11684))+((r21*x11669))+x11673+x11678+((r22*x11683))+((r20*x11679))+(((-1.0)*r20*x11670*x11681)));
evalcond[4]=(x11672+(((-1.0)*r22*x11686))+(((-1.0)*sj3*x11676*x11681))+(((-1.0)*x11682))+((r21*x11670))+((r20*x11668*x11669))+((r20*x11680)));
evalcond[5]=(((x11675*x11684))+((cj0*x11672))+(((-1.0)*r00*x11670*x11681))+((r02*x11683))+((r01*x11669))+((r00*x11679))+(((-1.0)*cj1*cj2*x11677)));
evalcond[6]=(((r12*x11683))+(((-1.0)*r10*x11670*x11681))+((sj0*x11672))+((r11*x11669))+(((-1.0)*cj1*cj2*x11674))+((r10*x11679))+((x11671*x11684)));
evalcond[7]=(((r00*x11680))+(((-1.0)*x11677*x11678))+(((-1.0)*sj3*x11675*x11681))+(((-1.0)*r02*x11686))+(((-1.0)*x11673*x11677))+((r01*x11670))+((r00*x11668*x11669)));
evalcond[8]=((((-1.0)*x11673*x11674))+(((-1.0)*x11674*x11678))+((r10*x11680))+((r11*x11670))+((r10*x11668*x11669))+(((-1.0)*r12*x11686))+(((-1.0)*sj3*x11671*x11681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11687=((1.0)*gconst5);
CheckValue<IkReal> x11688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11687)))),-1);
if(!x11688.valid){
continue;
}
CheckValue<IkReal> x11689 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11687))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11688.value)))+(x11689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11690=IKsin(j4);
IkReal x11691=IKcos(j4);
IkReal x11692=(gconst5*sj3);
IkReal x11693=(cj3*gconst5);
IkReal x11694=(gconst4*r11);
IkReal x11695=(sj1*sj2);
IkReal x11696=(cj2*sj1);
IkReal x11697=((1.0)*sj0);
IkReal x11698=(gconst4*r01);
IkReal x11699=(gconst4*r21);
IkReal x11700=((1.0)*cj0);
IkReal x11701=(cj1*sj2);
IkReal x11702=(gconst4*sj3);
IkReal x11703=(cj3*gconst4);
IkReal x11704=((1.0)*x11691);
IkReal x11705=((1.0)*cj1*cj2);
IkReal x11706=(cj3*x11690);
IkReal x11707=(cj3*x11691);
IkReal x11708=((1.0)*gconst5*x11690);
IkReal x11709=((1.0)*sj3*x11690);
evalcond[0]=((((-1.0)*r22*x11704))+(((-1.0)*r20*x11708))+((x11690*x11699)));
evalcond[1]=(cj0+((x11690*x11694))+(((-1.0)*r12*x11704))+(((-1.0)*r10*x11708)));
evalcond[2]=(((x11690*x11698))+(((-1.0)*x11697))+(((-1.0)*r02*x11704))+(((-1.0)*r00*x11708)));
evalcond[3]=(x11701+x11696+((r22*x11706))+(((-1.0)*r20*x11693*x11704))+((x11699*x11707))+((r20*x11702))+((r21*x11692)));
evalcond[4]=(x11695+(((-1.0)*r22*x11709))+(((-1.0)*sj3*x11699*x11704))+(((-1.0)*x11705))+((r20*x11703))+((r20*x11691*x11692))+((r21*x11693)));
evalcond[5]=(((cj0*x11695))+((r01*x11692))+((r00*x11702))+(((-1.0)*r00*x11693*x11704))+((x11698*x11707))+(((-1.0)*cj1*cj2*x11700))+((r02*x11706)));
evalcond[6]=((((-1.0)*r10*x11693*x11704))+((r12*x11706))+((r11*x11692))+((sj0*x11695))+((r10*x11702))+(((-1.0)*cj1*cj2*x11697))+((x11694*x11707)));
evalcond[7]=((((-1.0)*sj3*x11698*x11704))+((r01*x11693))+((r00*x11703))+((r00*x11691*x11692))+(((-1.0)*x11700*x11701))+(((-1.0)*x11696*x11700))+(((-1.0)*r02*x11709)));
evalcond[8]=(((r10*x11691*x11692))+(((-1.0)*x11696*x11697))+(((-1.0)*x11697*x11701))+((r11*x11693))+(((-1.0)*sj3*x11694*x11704))+((r10*x11703))+(((-1.0)*r12*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11710=((-1.0)*r10);
IkReal x11712 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11712)==0){
continue;
}
IkReal x11711=pow(x11712,-0.5);
CheckValue<IkReal> x11713 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11710),IKFAST_ATAN2_MAGTHRESH);
if(!x11713.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11713.value));
IkReal gconst7=(r11*x11711);
IkReal gconst8=(x11710*x11711);
CheckValue<IkReal> x11714 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11714.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11714.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11715=((-1.0)*r10);
IkReal x11716=x11711;
CheckValue<IkReal> x11718 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11715),IKFAST_ATAN2_MAGTHRESH);
if(!x11718.valid){
continue;
}
IkReal x11717=((-1.0)*(x11718.value));
sj5=gconst7;
cj5=gconst8;
j5=x11717;
IkReal gconst6=x11717;
IkReal gconst7=(r11*x11716);
IkReal gconst8=(x11715*x11716);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11719=((1.0)*sj0);
IkReal x11720=((1.0)*gconst7);
CheckValue<IkReal> x11721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11720))+(((-1.0)*gconst8*r21)))),-1);
if(!x11721.valid){
continue;
}
CheckValue<IkReal> x11722 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11719))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11719))+(((-1.0)*cj0*r01*x11720))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11721.value)))+(x11722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11723=IKsin(j4);
IkReal x11724=IKcos(j4);
IkReal x11725=(gconst7*sj3);
IkReal x11726=(cj3*gconst8);
IkReal x11727=(cj3*gconst7);
IkReal x11728=(sj1*sj2);
IkReal x11729=(cj2*sj1);
IkReal x11730=((1.0)*sj0);
IkReal x11731=((1.0)*cj0);
IkReal x11732=(gconst8*sj3);
IkReal x11733=(cj1*sj2);
IkReal x11734=((1.0)*x11724);
IkReal x11735=((1.0)*x11723);
IkReal x11736=((1.0)*cj1*cj2);
IkReal x11737=(cj3*x11723);
IkReal x11738=(gconst7*x11723);
IkReal x11739=(x11724*x11732);
evalcond[0]=((((-1.0)*gconst8*r20*x11735))+(((-1.0)*r22*x11734))+((r21*x11738)));
evalcond[1]=(((r11*x11738))+cj0+(((-1.0)*r12*x11734))+(((-1.0)*gconst8*r10*x11735)));
evalcond[2]=(((r01*x11738))+(((-1.0)*x11730))+(((-1.0)*r02*x11734))+(((-1.0)*gconst8*r00*x11735)));
evalcond[3]=(x11733+x11729+((r20*x11725))+(((-1.0)*r20*x11726*x11734))+((r21*x11732))+((r21*x11724*x11727))+((r22*x11737)));
evalcond[4]=(x11728+(((-1.0)*r21*x11725*x11734))+(((-1.0)*x11736))+((r20*x11727))+((r20*x11739))+(((-1.0)*r22*sj3*x11735))+((r21*x11726)));
evalcond[5]=(((r01*x11732))+((r00*x11725))+(((-1.0)*cj1*cj2*x11731))+((cj0*x11728))+((r02*x11737))+((r01*x11724*x11727))+(((-1.0)*r00*x11726*x11734)));
evalcond[6]=((((-1.0)*r10*x11726*x11734))+((r11*x11732))+((sj0*x11728))+(((-1.0)*cj1*cj2*x11730))+((r10*x11725))+((r12*x11737))+((r11*x11724*x11727)));
evalcond[7]=(((r00*x11739))+(((-1.0)*r02*sj3*x11735))+((r00*x11727))+((r01*x11726))+(((-1.0)*x11729*x11731))+(((-1.0)*r01*x11725*x11734))+(((-1.0)*x11731*x11733)));
evalcond[8]=((((-1.0)*r12*sj3*x11735))+(((-1.0)*x11729*x11730))+(((-1.0)*x11730*x11733))+((r10*x11739))+((r10*x11727))+(((-1.0)*r11*x11725*x11734))+((r11*x11726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11740=((1.0)*gconst8);
CheckValue<IkReal> x11741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11740))+(((-1.0)*gconst7*r00)))),-1);
if(!x11741.valid){
continue;
}
CheckValue<IkReal> x11742 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11741.value)))+(x11742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11743=IKsin(j4);
IkReal x11744=IKcos(j4);
IkReal x11745=(gconst7*sj3);
IkReal x11746=(cj3*gconst8);
IkReal x11747=(cj3*gconst7);
IkReal x11748=(sj1*sj2);
IkReal x11749=(cj2*sj1);
IkReal x11750=((1.0)*sj0);
IkReal x11751=((1.0)*cj0);
IkReal x11752=(gconst8*sj3);
IkReal x11753=(cj1*sj2);
IkReal x11754=((1.0)*x11744);
IkReal x11755=((1.0)*x11743);
IkReal x11756=((1.0)*cj1*cj2);
IkReal x11757=(cj3*x11743);
IkReal x11758=(gconst7*x11743);
IkReal x11759=(x11744*x11752);
evalcond[0]=((((-1.0)*r22*x11754))+(((-1.0)*gconst8*r20*x11755))+((r21*x11758)));
evalcond[1]=((((-1.0)*r12*x11754))+(((-1.0)*gconst8*r10*x11755))+cj0+((r11*x11758)));
evalcond[2]=((((-1.0)*gconst8*r00*x11755))+(((-1.0)*r02*x11754))+(((-1.0)*x11750))+((r01*x11758)));
evalcond[3]=(x11753+x11749+((r21*x11744*x11747))+(((-1.0)*r20*x11746*x11754))+((r20*x11745))+((r22*x11757))+((r21*x11752)));
evalcond[4]=(x11748+((r20*x11747))+(((-1.0)*r21*x11745*x11754))+(((-1.0)*x11756))+((r21*x11746))+(((-1.0)*r22*sj3*x11755))+((r20*x11759)));
evalcond[5]=((((-1.0)*cj1*cj2*x11751))+((r00*x11745))+(((-1.0)*r00*x11746*x11754))+((cj0*x11748))+((r02*x11757))+((r01*x11744*x11747))+((r01*x11752)));
evalcond[6]=((((-1.0)*cj1*cj2*x11750))+(((-1.0)*r10*x11746*x11754))+((sj0*x11748))+((r11*x11752))+((r12*x11757))+((r10*x11745))+((r11*x11744*x11747)));
evalcond[7]=(((r00*x11747))+((r01*x11746))+(((-1.0)*x11749*x11751))+(((-1.0)*x11751*x11753))+(((-1.0)*r02*sj3*x11755))+((r00*x11759))+(((-1.0)*r01*x11745*x11754)));
evalcond[8]=(((r10*x11759))+(((-1.0)*x11749*x11750))+((r10*x11747))+(((-1.0)*r12*sj3*x11755))+(((-1.0)*x11750*x11753))+(((-1.0)*r11*x11745*x11754))+((r11*x11746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11760=((-1.0)*r11);
IkReal x11762 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11762)==0){
continue;
}
IkReal x11761=pow(x11762,-0.5);
CheckValue<IkReal> x11763 = IKatan2WithCheck(IkReal(x11760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11763.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11763.value))));
IkReal gconst10=(x11760*x11761);
IkReal gconst11=((1.0)*r10*x11761);
CheckValue<IkReal> x11764 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11764.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11764.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11765=((-1.0)*r11);
CheckValue<IkReal> x11768 = IKatan2WithCheck(IkReal(x11765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11768.valid){
continue;
}
IkReal x11766=((1.0)*(x11768.value));
IkReal x11767=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11766)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11766)));
IkReal gconst10=(x11765*x11767);
IkReal gconst11=((1.0)*r10*x11767);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11769=((-1.0)*r11);
CheckValue<IkReal> x11772 = IKatan2WithCheck(IkReal(x11769),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11772.valid){
continue;
}
IkReal x11770=((1.0)*(x11772.value));
IkReal x11771=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11770)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11770)));
IkReal gconst10=(x11769*x11771);
IkReal gconst11=((1.0)*r10*x11771);
IkReal x11773=r12*r12;
IkReal x11774=((1.0)*sj0);
IkReal x11775=(cj0*r02);
IkReal x11776=x11761;
j4eval[0]=((IKabs(((((-1.0)*r12*x11774))+(((-1.0)*x11775)))))+(IKabs((((r12*x11775*x11776))+((sj0*x11773*x11776))+(((-1.0)*x11774*x11776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11777=((-1.0)*r11);
CheckValue<IkReal> x11780 = IKatan2WithCheck(IkReal(x11777),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11780.valid){
continue;
}
IkReal x11778=((1.0)*(x11780.value));
IkReal x11779=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11778)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11778)));
IkReal gconst10=(x11777*x11779);
IkReal gconst11=((1.0)*r10*x11779);
IkReal x11781=((1.0)*cj3);
CheckValue<IkReal> x11786=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11786.valid){
continue;
}
IkReal x11782=x11786.value;
IkReal x11783=(cj3*x11782);
IkReal x11784=(x11781*x11782);
IkReal x11785=((((-1.0)*x11784*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11783))+(((-1.0)*x11784*(r10*r10)*(r20*r20)))+(((-1.0)*x11781*(r22*r22))));
j4eval[0]=x11785;
j4eval[1]=IKsign(x11785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11787=((-1.0)*r11);
CheckValue<IkReal> x11790 = IKatan2WithCheck(IkReal(x11787),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11790.valid){
continue;
}
IkReal x11788=((1.0)*(x11790.value));
IkReal x11789=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11788)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11788)));
IkReal gconst10=(x11787*x11789);
IkReal gconst11=((1.0)*r10*x11789);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11791=((-1.0)*r11);
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(x11791),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
IkReal x11792=((1.0)*(x11794.value));
IkReal x11793=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11792)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11792)));
IkReal gconst10=(x11791*x11793);
IkReal gconst11=((1.0)*r10*x11793);
IkReal x11795=r12*r12;
IkReal x11796=((1.0)*sj0);
IkReal x11797=(cj0*r02);
IkReal x11798=x11761;
j4eval[0]=((IKabs(((((-1.0)*x11797))+(((-1.0)*r12*x11796)))))+(IKabs((((sj0*x11795*x11798))+((r12*x11797*x11798))+(((-1.0)*x11796*x11798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11799=((-1.0)*r11);
CheckValue<IkReal> x11802 = IKatan2WithCheck(IkReal(x11799),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11802.valid){
continue;
}
IkReal x11800=((1.0)*(x11802.value));
IkReal x11801=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11800)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11800)));
IkReal gconst10=(x11799*x11801);
IkReal gconst11=((1.0)*r10*x11801);
IkReal x11803=r12*r12;
IkReal x11804=(cj1*cj2*r22);
IkReal x11805=(r22*sj1*sj2);
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(((-1.0)+x11803),-1);
if(!x11809.valid){
continue;
}
IkReal x11806=x11809.value;
if((((1.0)+(((-1.0)*x11803)))) < -0.00001)
continue;
IkReal x11807=IKsqrt(((1.0)+(((-1.0)*x11803))));
IkReal x11808=(r12*x11806*x11807);
j4eval[0]=((IKabs(((((-1.0)*x11804))+x11805)))+(IKabs((((x11804*x11808))+(((-1.0)*x11805*x11808))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11810=((-1.0)*r11);
CheckValue<IkReal> x11813 = IKatan2WithCheck(IkReal(x11810),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11813.valid){
continue;
}
IkReal x11811=((1.0)*(x11813.value));
IkReal x11812=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11811)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11811)));
IkReal gconst10=(x11810*x11812);
IkReal gconst11=((1.0)*r10*x11812);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11814=((-1.0)*r11);
CheckValue<IkReal> x11817 = IKatan2WithCheck(IkReal(x11814),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11817.valid){
continue;
}
IkReal x11815=((1.0)*(x11817.value));
IkReal x11816=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11815)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11815)));
IkReal gconst10=(x11814*x11816);
IkReal gconst11=((1.0)*r10*x11816);
IkReal x11818=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11822=IKPowWithIntegerCheck(x11818,-1);
if(!x11822.valid){
continue;
}
IkReal x11819=x11822.value;
IkReal x11820=((1.0)*x11819);
IkReal x11821=((((-2.0)*r00*r01*r10*r11*x11819))+(((-1.0)*x11820*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11820*(r00*r00)*(r10*r10))));
j4eval[0]=x11821;
j4eval[1]=IKsign(x11821);
j4eval[2]=r02;
j4eval[3]=x11818;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11823=((-1.0)*r11);
CheckValue<IkReal> x11826 = IKatan2WithCheck(IkReal(x11823),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11826.valid){
continue;
}
IkReal x11824=((1.0)*(x11826.value));
IkReal x11825=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11824)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11824)));
IkReal gconst10=(x11823*x11825);
IkReal gconst11=((1.0)*r10*x11825);
IkReal x11827=r12*r12;
IkReal x11828=(cj1*cj2*r22);
IkReal x11829=(r22*sj1*sj2);
CheckValue<IkReal> x11833=IKPowWithIntegerCheck(((-1.0)+x11827),-1);
if(!x11833.valid){
continue;
}
IkReal x11830=x11833.value;
if((((1.0)+(((-1.0)*x11827)))) < -0.00001)
continue;
IkReal x11831=IKsqrt(((1.0)+(((-1.0)*x11827))));
IkReal x11832=(r12*x11830*x11831);
j4eval[0]=((IKabs(((((-1.0)*x11828))+x11829)))+(IKabs((((x11828*x11832))+(((-1.0)*x11829*x11832))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11834=(gconst10*r21);
IkReal x11835=(gconst11*r20);
IkReal x11836=(sj1*sj2);
IkReal x11837=(cj1*cj2);
CheckValue<IkReal> x11838 = IKatan2WithCheck(IkReal((((r22*x11836))+(((-1.0)*r22*x11837)))),IkReal(((((-1.0)*x11835*x11836))+((x11835*x11837))+((x11834*x11836))+(((-1.0)*x11834*x11837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11838.valid){
continue;
}
CheckValue<IkReal> x11839=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x11834*x11835))+(x11834*x11834)+(x11835*x11835))),-1);
if(!x11839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11838.value)+(((1.5707963267949)*(x11839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11840=IKsin(j4);
IkReal x11841=IKcos(j4);
IkReal x11842=((1.0)*cj2);
IkReal x11843=((1.0)*x11841);
IkReal x11844=(gconst10*x11840);
IkReal x11845=((1.0)*x11840);
IkReal x11846=(gconst11*x11841);
IkReal x11847=(gconst11*x11845);
evalcond[0]=(((r21*x11844))+(((-1.0)*r20*x11847))+(((-1.0)*r22*x11843)));
evalcond[1]=(((r11*x11844))+(((-1.0)*r12*x11843))+(((-1.0)*r10*x11847)));
evalcond[2]=((((-1.0)*r02*x11845))+(((-1.0)*gconst10*r01*x11843))+((r00*x11846)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11843))+((r01*x11844))+(((-1.0)*r00*x11847)));
evalcond[4]=((((-1.0)*gconst10*r21*x11843))+((r20*x11846))+(((-1.0)*cj1*x11842))+((sj1*sj2))+(((-1.0)*r22*x11845)));
evalcond[5]=((((-1.0)*sj1*x11842))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11843))+(((-1.0)*r12*x11845))+((r10*x11846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11848=(gconst11*r00);
IkReal x11849=(gconst10*r01);
CheckValue<IkReal> x11850 = IKatan2WithCheck(IkReal(((((-1.0)*x11849))+x11848)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11850.valid){
continue;
}
CheckValue<IkReal> x11851=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11848*x11848)))+(((-1.0)*(x11849*x11849)))+(((2.0)*x11848*x11849)))),-1);
if(!x11851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11850.value)+(((1.5707963267949)*(x11851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11852=IKsin(j4);
IkReal x11853=IKcos(j4);
IkReal x11854=((1.0)*cj2);
IkReal x11855=((1.0)*x11853);
IkReal x11856=(gconst10*x11852);
IkReal x11857=((1.0)*x11852);
IkReal x11858=(gconst11*x11853);
IkReal x11859=(gconst11*x11857);
evalcond[0]=(((r21*x11856))+(((-1.0)*r20*x11859))+(((-1.0)*r22*x11855)));
evalcond[1]=(((r11*x11856))+(((-1.0)*r12*x11855))+(((-1.0)*r10*x11859)));
evalcond[2]=((((-1.0)*r02*x11857))+(((-1.0)*gconst10*r01*x11855))+((r00*x11858)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11855))+((r01*x11856))+(((-1.0)*r00*x11859)));
evalcond[4]=(((r20*x11858))+(((-1.0)*cj1*x11854))+(((-1.0)*gconst10*r21*x11855))+((sj1*sj2))+(((-1.0)*r22*x11857)));
evalcond[5]=((((-1.0)*sj1*x11854))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11855))+(((-1.0)*r12*x11857))+((r10*x11858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11860 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11860.valid){
continue;
}
CheckValue<IkReal> x11861=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11860.value)+(((1.5707963267949)*(x11861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11862=IKsin(j4);
IkReal x11863=IKcos(j4);
IkReal x11864=((1.0)*cj2);
IkReal x11865=((1.0)*x11863);
IkReal x11866=(gconst10*x11862);
IkReal x11867=((1.0)*x11862);
IkReal x11868=(gconst11*x11863);
IkReal x11869=(gconst11*x11867);
evalcond[0]=((((-1.0)*r22*x11865))+(((-1.0)*r20*x11869))+((r21*x11866)));
evalcond[1]=(((r11*x11866))+(((-1.0)*r10*x11869))+(((-1.0)*r12*x11865)));
evalcond[2]=(((r00*x11868))+(((-1.0)*gconst10*r01*x11865))+(((-1.0)*r02*x11867)));
evalcond[3]=((-1.0)+((r01*x11866))+(((-1.0)*r00*x11869))+(((-1.0)*r02*x11865)));
evalcond[4]=((((-1.0)*gconst10*r21*x11865))+(((-1.0)*r22*x11867))+(((-1.0)*cj1*x11864))+((r20*x11868))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11864))+(((-1.0)*gconst10*r11*x11865))+(((-1.0)*cj1*sj2))+((r10*x11868))+(((-1.0)*r12*x11867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11870=((-1.0)*r11);
CheckValue<IkReal> x11873 = IKatan2WithCheck(IkReal(x11870),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11873.valid){
continue;
}
IkReal x11871=((1.0)*(x11873.value));
IkReal x11872=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11871)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11871)));
IkReal gconst10=(x11870*x11872);
IkReal gconst11=((1.0)*r10*x11872);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11874=((-1.0)*r11);
CheckValue<IkReal> x11877 = IKatan2WithCheck(IkReal(x11874),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11877.valid){
continue;
}
IkReal x11875=((1.0)*(x11877.value));
IkReal x11876=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11875)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11875)));
IkReal gconst10=(x11874*x11876);
IkReal gconst11=((1.0)*r10*x11876);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11878=((-1.0)*r11);
CheckValue<IkReal> x11881 = IKatan2WithCheck(IkReal(x11878),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11881.valid){
continue;
}
IkReal x11879=((1.0)*(x11881.value));
IkReal x11880=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11879)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11879)));
IkReal gconst10=(x11878*x11880);
IkReal gconst11=((1.0)*r10*x11880);
IkReal x11882=r12*r12;
CheckValue<IkReal> x11885=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11882))),-1);
if(!x11885.valid){
continue;
}
IkReal x11883=x11885.value;
IkReal x11884=((1.0)*x11883);
j4eval[0]=IKsign((((x11884*(r10*r10*r10*r10)))+((x11884*(r11*r11*r11*r11)))+(((2.0)*x11883*(r10*r10)*(r11*r11)))+x11882));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11886=(cj2*sj1);
IkReal x11887=(gconst10*r11);
IkReal x11888=(gconst11*r10);
IkReal x11889=(cj1*sj2);
CheckValue<IkReal> x11890=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11888*x11888)+(((-2.0)*x11887*x11888))+(x11887*x11887))),-1);
if(!x11890.valid){
continue;
}
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal((((r12*x11886))+((r12*x11889)))),IkReal((((x11887*x11889))+(((-1.0)*x11886*x11888))+((x11886*x11887))+(((-1.0)*x11888*x11889)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11890.value)))+(x11891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11892=IKsin(j4);
IkReal x11893=IKcos(j4);
IkReal x11894=((1.0)*x11893);
IkReal x11895=(gconst10*x11892);
IkReal x11896=((1.0)*x11892);
IkReal x11897=(gconst11*x11893);
IkReal x11898=(gconst11*x11896);
evalcond[0]=((((-1.0)*r20*x11898))+(((-1.0)*r22*x11894))+((r21*x11895)));
evalcond[1]=((((-1.0)*r10*x11898))+(((-1.0)*r12*x11894))+((r11*x11895)));
evalcond[2]=((((-1.0)*gconst10*r01*x11894))+((r00*x11897))+(((-1.0)*r02*x11896)));
evalcond[3]=((1.0)+((r01*x11895))+(((-1.0)*r00*x11898))+(((-1.0)*r02*x11894)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11894))+((cj1*sj2))+(((-1.0)*r12*x11896))+((r10*x11897)));
evalcond[5]=((((-1.0)*r22*x11896))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11897))+(((-1.0)*gconst10*r21*x11894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11899=(gconst11*r00);
IkReal x11900=(gconst10*r01);
CheckValue<IkReal> x11901=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11899*x11900))+(x11899*x11899)+(x11900*x11900)+(r02*r02))),-1);
if(!x11901.valid){
continue;
}
CheckValue<IkReal> x11902 = IKatan2WithCheck(IkReal(((((-1.0)*x11900))+x11899)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11901.value)))+(x11902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11903=IKsin(j4);
IkReal x11904=IKcos(j4);
IkReal x11905=((1.0)*x11904);
IkReal x11906=(gconst10*x11903);
IkReal x11907=((1.0)*x11903);
IkReal x11908=(gconst11*x11904);
IkReal x11909=(gconst11*x11907);
evalcond[0]=((((-1.0)*r22*x11905))+(((-1.0)*r20*x11909))+((r21*x11906)));
evalcond[1]=((((-1.0)*r12*x11905))+(((-1.0)*r10*x11909))+((r11*x11906)));
evalcond[2]=((((-1.0)*r02*x11907))+((r00*x11908))+(((-1.0)*gconst10*r01*x11905)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11905))+(((-1.0)*r00*x11909))+((r01*x11906)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11907))+(((-1.0)*gconst10*r11*x11905))+((r10*x11908)));
evalcond[5]=((((-1.0)*r22*x11907))+(((-1.0)*gconst10*r21*x11905))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11910=((1.0)*gconst11);
CheckValue<IkReal> x11911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11910)))),-1);
if(!x11911.valid){
continue;
}
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11911.value)))+(x11912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11913=IKsin(j4);
IkReal x11914=IKcos(j4);
IkReal x11915=((1.0)*x11914);
IkReal x11916=(gconst10*x11913);
IkReal x11917=((1.0)*x11913);
IkReal x11918=(gconst11*x11914);
IkReal x11919=(gconst11*x11917);
evalcond[0]=((((-1.0)*r22*x11915))+(((-1.0)*r20*x11919))+((r21*x11916)));
evalcond[1]=(((r11*x11916))+(((-1.0)*r12*x11915))+(((-1.0)*r10*x11919)));
evalcond[2]=(((r00*x11918))+(((-1.0)*gconst10*r01*x11915))+(((-1.0)*r02*x11917)));
evalcond[3]=((1.0)+((r01*x11916))+(((-1.0)*r02*x11915))+(((-1.0)*r00*x11919)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11915))+((r10*x11918))+(((-1.0)*r12*x11917)));
evalcond[5]=((((-1.0)*gconst10*r21*x11915))+(((-1.0)*r22*x11917))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11920=((-1.0)*r11);
IkReal x11921=((-1.0)*r10);
CheckValue<IkReal> x11923 = IKatan2WithCheck(IkReal(x11920),IkReal(x11921),IKFAST_ATAN2_MAGTHRESH);
if(!x11923.valid){
continue;
}
IkReal x11922=((1.0)*(x11923.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11922)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11921);
rxp1_1=(px*r21);
rxp1_2=(px*x11920);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11922)));
IkReal gconst10=x11920;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11924=((-1.0)*r11);
IkReal x11925=((-1.0)*r10);
CheckValue<IkReal> x11927 = IKatan2WithCheck(IkReal(x11924),IkReal(x11925),IKFAST_ATAN2_MAGTHRESH);
if(!x11927.valid){
continue;
}
IkReal x11926=((1.0)*(x11927.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11926)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11925);
rxp1_1=(px*r21);
rxp1_2=(px*x11924);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11926)));
IkReal gconst10=x11924;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11928=((-1.0)*r11);
IkReal x11929=((-1.0)*r10);
CheckValue<IkReal> x11931 = IKatan2WithCheck(IkReal(x11928),IkReal(x11929),IKFAST_ATAN2_MAGTHRESH);
if(!x11931.valid){
continue;
}
IkReal x11930=((1.0)*(x11931.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11930)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11929);
rxp1_1=(px*r21);
rxp1_2=(px*x11928);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11930)));
IkReal gconst10=x11928;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11934=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11934.valid){
continue;
}
IkReal x11932=x11934.value;
IkReal x11933=(sj0*x11932);
cj4array[0]=(((cj1*sj2*x11933))+((cj2*sj1*x11933)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11935=IKsin(j4);
IkReal x11936=IKcos(j4);
IkReal x11937=(gconst10*r21);
IkReal x11938=(gconst11*r20);
IkReal x11939=((1.0)*x11935);
IkReal x11940=((1.0)*x11936);
evalcond[0]=((-1.0)*r02*x11935);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11940)));
evalcond[2]=(((x11935*x11937))+(((-1.0)*x11938*x11939)));
evalcond[3]=((((-1.0)*gconst11*r10*x11939))+((gconst10*r11*x11935)));
evalcond[4]=((((-1.0)*x11937*x11940))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11936*x11938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11942=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11942.valid){
continue;
}
IkReal x11941=x11942.value;
cj4array[0]=(((cj1*cj2*x11941))+(((-1.0)*sj1*sj2*x11941)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11943=IKsin(j4);
IkReal x11944=IKcos(j4);
IkReal x11945=((1.0)*sj0);
IkReal x11946=(gconst10*x11943);
IkReal x11947=((1.0)*x11944);
IkReal x11948=((1.0)*gconst11*x11943);
evalcond[0]=((-1.0)*r02*x11943);
evalcond[1]=((((-1.0)*x11945))+(((-1.0)*r02*x11947)));
evalcond[2]=((((-1.0)*r20*x11948))+((r21*x11946)));
evalcond[3]=(((r11*x11946))+(((-1.0)*r10*x11948)));
evalcond[4]=((((-1.0)*cj1*sj2*x11945))+(((-1.0)*gconst10*r11*x11947))+(((-1.0)*cj2*sj1*x11945))+((gconst11*r10*x11944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11949=IKPowWithIntegerCheck(r02,-1);
if(!x11949.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11949.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11950=IKsin(j4);
IkReal x11951=IKcos(j4);
IkReal x11952=(gconst10*r21);
IkReal x11953=((1.0)*sj0);
IkReal x11954=(gconst10*r11);
IkReal x11955=(gconst11*x11951);
IkReal x11956=((1.0)*x11951);
IkReal x11957=((1.0)*gconst11*x11950);
evalcond[0]=((-1.0)*r02*x11950);
evalcond[1]=((((-1.0)*r20*x11957))+((x11950*x11952)));
evalcond[2]=((((-1.0)*r10*x11957))+((x11950*x11954)));
evalcond[3]=(((r20*x11955))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11952*x11956)));
evalcond[4]=(((r10*x11955))+(((-1.0)*cj2*sj1*x11953))+(((-1.0)*cj1*sj2*x11953))+(((-1.0)*x11954*x11956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11958=((1.0)*gconst11);
CheckValue<IkReal> x11959 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11958))+(((-1.0)*r10*sj0*x11958))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11959.valid){
continue;
}
CheckValue<IkReal> x11960=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11959.value)+(((1.5707963267949)*(x11960.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11961=IKsin(j4);
IkReal x11962=IKcos(j4);
IkReal x11963=((1.0)*cj2);
IkReal x11964=((1.0)*sj0);
IkReal x11965=(cj1*sj2);
IkReal x11966=(gconst10*x11961);
IkReal x11967=((1.0)*x11962);
IkReal x11968=(gconst11*x11962);
IkReal x11969=((1.0)*x11961);
IkReal x11970=(gconst11*x11969);
evalcond[0]=((((-1.0)*r20*x11970))+((r21*x11966)));
evalcond[1]=((((-1.0)*r10*x11970))+cj0+(((-1.0)*r12*x11967))+((r11*x11966)));
evalcond[2]=((((-1.0)*cj1*x11963))+((sj1*sj2))+((r20*x11968))+(((-1.0)*gconst10*r21*x11967)));
evalcond[3]=(((r01*x11966))+(((-1.0)*x11964))+(((-1.0)*r00*x11970))+(((-1.0)*r02*x11967)));
evalcond[4]=(((r00*x11968))+(((-1.0)*gconst10*r01*x11967))+(((-1.0)*cj0*sj1*x11963))+(((-1.0)*r02*x11969))+(((-1.0)*cj0*x11965)));
evalcond[5]=((((-1.0)*x11964*x11965))+(((-1.0)*r12*x11969))+(((-1.0)*gconst10*r11*x11967))+((r10*x11968))+(((-1.0)*sj0*sj1*x11963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11971=(gconst10*r21);
IkReal x11972=(gconst11*r20);
IkReal x11973=(sj1*sj2);
IkReal x11974=(cj1*cj2);
CheckValue<IkReal> x11975 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11974))+((r22*x11973)))),IkReal((((x11972*x11974))+(((-1.0)*x11971*x11974))+((x11971*x11973))+(((-1.0)*x11972*x11973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11975.valid){
continue;
}
CheckValue<IkReal> x11976=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11971*x11972))+(r22*r22)+(x11971*x11971)+(x11972*x11972))),-1);
if(!x11976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11975.value)+(((1.5707963267949)*(x11976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11977=IKsin(j4);
IkReal x11978=IKcos(j4);
IkReal x11979=((1.0)*cj2);
IkReal x11980=((1.0)*sj0);
IkReal x11981=(cj1*sj2);
IkReal x11982=((1.0)*x11978);
IkReal x11983=(gconst10*x11977);
IkReal x11984=((1.0)*x11977);
IkReal x11985=(gconst11*x11978);
IkReal x11986=(gconst11*x11984);
evalcond[0]=(((r21*x11983))+(((-1.0)*r22*x11982))+(((-1.0)*r20*x11986)));
evalcond[1]=((((-1.0)*r12*x11982))+cj0+(((-1.0)*r10*x11986))+((r11*x11983)));
evalcond[2]=((((-1.0)*r02*x11982))+(((-1.0)*r00*x11986))+(((-1.0)*x11980))+((r01*x11983)));
evalcond[3]=((((-1.0)*cj1*x11979))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11982))+((r20*x11985))+(((-1.0)*r22*x11984)));
evalcond[4]=((((-1.0)*gconst10*r01*x11982))+(((-1.0)*r02*x11984))+(((-1.0)*cj0*sj1*x11979))+(((-1.0)*cj0*x11981))+((r00*x11985)));
evalcond[5]=((((-1.0)*r12*x11984))+(((-1.0)*x11980*x11981))+((r10*x11985))+(((-1.0)*gconst10*r11*x11982))+(((-1.0)*sj0*sj1*x11979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11987=((1.0)*sj0);
IkReal x11988=((1.0)*gconst10);
CheckValue<IkReal> x11989 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11987))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x11987))+(((-1.0)*cj0*r01*x11988))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11989.valid){
continue;
}
CheckValue<IkReal> x11990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11988)))),-1);
if(!x11990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11989.value)+(((1.5707963267949)*(x11990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11991=IKsin(j4);
IkReal x11992=IKcos(j4);
IkReal x11993=((1.0)*cj2);
IkReal x11994=((1.0)*sj0);
IkReal x11995=(cj1*sj2);
IkReal x11996=((1.0)*x11992);
IkReal x11997=(gconst10*x11991);
IkReal x11998=((1.0)*x11991);
IkReal x11999=(gconst11*x11992);
IkReal x12000=(gconst11*x11998);
evalcond[0]=(((r21*x11997))+(((-1.0)*r22*x11996))+(((-1.0)*r20*x12000)));
evalcond[1]=((((-1.0)*r10*x12000))+cj0+(((-1.0)*r12*x11996))+((r11*x11997)));
evalcond[2]=((((-1.0)*r02*x11996))+(((-1.0)*r00*x12000))+((r01*x11997))+(((-1.0)*x11994)));
evalcond[3]=(((r20*x11999))+(((-1.0)*gconst10*r21*x11996))+((sj1*sj2))+(((-1.0)*cj1*x11993))+(((-1.0)*r22*x11998)));
evalcond[4]=((((-1.0)*r02*x11998))+(((-1.0)*cj0*x11995))+((r00*x11999))+(((-1.0)*gconst10*r01*x11996))+(((-1.0)*cj0*sj1*x11993)));
evalcond[5]=((((-1.0)*x11994*x11995))+(((-1.0)*r12*x11998))+(((-1.0)*gconst10*r11*x11996))+((r10*x11999))+(((-1.0)*sj0*sj1*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12001=((1.0)*gconst11);
CheckValue<IkReal> x12002=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12001)))),-1);
if(!x12002.valid){
continue;
}
CheckValue<IkReal> x12003 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12001))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12002.value)))+(x12003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12004=IKsin(j4);
IkReal x12005=IKcos(j4);
IkReal x12006=((1.0)*cj2);
IkReal x12007=((1.0)*sj0);
IkReal x12008=(cj1*sj2);
IkReal x12009=((1.0)*x12005);
IkReal x12010=(gconst10*x12004);
IkReal x12011=((1.0)*x12004);
IkReal x12012=(gconst11*x12005);
IkReal x12013=(gconst11*x12011);
evalcond[0]=(((r21*x12010))+(((-1.0)*r20*x12013))+(((-1.0)*r22*x12009)));
evalcond[1]=(cj0+((r11*x12010))+(((-1.0)*r10*x12013))+(((-1.0)*r12*x12009)));
evalcond[2]=((((-1.0)*x12007))+(((-1.0)*r02*x12009))+((r01*x12010))+(((-1.0)*r00*x12013)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst10*r21*x12009))+(((-1.0)*r22*x12011))+((r20*x12012))+(((-1.0)*cj1*x12006)));
evalcond[4]=((((-1.0)*r02*x12011))+(((-1.0)*gconst10*r01*x12009))+(((-1.0)*cj0*sj1*x12006))+((r00*x12012))+(((-1.0)*cj0*x12008)));
evalcond[5]=((((-1.0)*sj0*sj1*x12006))+(((-1.0)*x12007*x12008))+((r10*x12012))+(((-1.0)*r12*x12011))+(((-1.0)*gconst10*r11*x12009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12014=((-1.0)*r11);
CheckValue<IkReal> x12017 = IKatan2WithCheck(IkReal(x12014),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12017.valid){
continue;
}
IkReal x12015=((1.0)*(x12017.value));
IkReal x12016=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12015)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12015)));
IkReal gconst10=(x12014*x12016);
IkReal gconst11=((1.0)*r10*x12016);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12018=((-1.0)*r11);
CheckValue<IkReal> x12021 = IKatan2WithCheck(IkReal(x12018),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12021.valid){
continue;
}
IkReal x12019=((1.0)*(x12021.value));
IkReal x12020=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12019)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12019)));
IkReal gconst10=(x12018*x12020);
IkReal gconst11=((1.0)*r10*x12020);
IkReal x12022=r12*r12;
IkReal x12023=((1.0)*sj0);
IkReal x12024=(cj0*r02);
IkReal x12025=x11761;
j4eval[0]=((IKabs(((((-1.0)*x12024))+(((-1.0)*r12*x12023)))))+(IKabs(((((-1.0)*x12023*x12025))+((r12*x12024*x12025))+((sj0*x12022*x12025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12026=((-1.0)*r11);
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal(x12026),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
IkReal x12027=((1.0)*(x12029.value));
IkReal x12028=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12027)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12027)));
IkReal gconst10=(x12026*x12028);
IkReal gconst11=((1.0)*r10*x12028);
IkReal x12030=r12*r12;
IkReal x12031=((1.0)+(((-1.0)*x12030)));
IkReal x12032=(r22*sj1*sj2);
IkReal x12033=(cj1*cj2*r22);
CheckValue<IkReal> x12040=IKPowWithIntegerCheck(x12031,-1);
if(!x12040.valid){
continue;
}
IkReal x12034=x12040.value;
CheckValue<IkReal> x12041=IKPowWithIntegerCheck(((-1.0)+x12030),-1);
if(!x12041.valid){
continue;
}
IkReal x12035=x12041.value;
IkReal x12036=((1.0)*x12034);
if((x12031) < -0.00001)
continue;
IkReal x12037=IKsqrt(x12031);
IkReal x12038=(r12*x12035*x12037);
IkReal x12039=((((-1.0)*x12036*(r11*r11)*(r21*r21)))+(((-1.0)*x12036*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12034)));
j4eval[0]=x12039;
j4eval[1]=((IKabs(((((-1.0)*x12033))+x12032)))+(IKabs((((x12033*x12038))+(((-1.0)*x12032*x12038))))));
j4eval[2]=IKsign(x12039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12042=((-1.0)*r11);
CheckValue<IkReal> x12045 = IKatan2WithCheck(IkReal(x12042),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12045.valid){
continue;
}
IkReal x12043=((1.0)*(x12045.value));
IkReal x12044=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12043)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12043)));
IkReal gconst10=(x12042*x12044);
IkReal gconst11=((1.0)*r10*x12044);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12046=((-1.0)*r11);
CheckValue<IkReal> x12049 = IKatan2WithCheck(IkReal(x12046),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12049.valid){
continue;
}
IkReal x12047=((1.0)*(x12049.value));
IkReal x12048=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12047)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12047)));
IkReal gconst10=(x12046*x12048);
IkReal gconst11=((1.0)*r10*x12048);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12050=((-1.0)*r11);
CheckValue<IkReal> x12053 = IKatan2WithCheck(IkReal(x12050),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12053.valid){
continue;
}
IkReal x12051=((1.0)*(x12053.value));
IkReal x12052=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12051)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12051)));
IkReal gconst10=(x12050*x12052);
IkReal gconst11=((1.0)*r10*x12052);
IkReal x12054=(cj1*r02*sj2);
IkReal x12055=(cj2*r02*sj1);
IkReal x12056=x11761;
IkReal x12057=(r12*x12056);
j4eval[0]=((IKabs((((x12055*x12057))+((x12054*x12057)))))+(IKabs((x12055+x12054))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12058=(cj1*sj2);
IkReal x12059=(cj2*sj1);
IkReal x12060=(gconst11*r00);
IkReal x12061=((1.0)*gconst10*r01);
CheckValue<IkReal> x12062=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12062.valid){
continue;
}
CheckValue<IkReal> x12063 = IKatan2WithCheck(IkReal((((x12059*x12060))+((x12058*x12060))+(((-1.0)*x12058*x12061))+(((-1.0)*x12059*x12061)))),IkReal((((r02*x12059))+((r02*x12058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12062.value)))+(x12063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12064=IKcos(j4);
IkReal x12065=IKsin(j4);
IkReal x12066=((1.0)*cj2);
IkReal x12067=((1.0)*x12064);
IkReal x12068=(gconst10*x12064);
IkReal x12069=(gconst10*x12065);
IkReal x12070=((1.0)*gconst11*x12065);
evalcond[0]=(((r01*x12068))+(((-1.0)*gconst11*r00*x12067))+((r02*x12065)));
evalcond[1]=(((r21*x12069))+(((-1.0)*r20*x12070))+(((-1.0)*r22*x12067)));
evalcond[2]=((((-1.0)*r10*x12070))+(((-1.0)*r12*x12067))+((r11*x12069)));
evalcond[3]=((-1.0)+((r01*x12069))+(((-1.0)*r02*x12067))+(((-1.0)*r00*x12070)));
evalcond[4]=(((r21*x12068))+(((-1.0)*gconst11*r20*x12067))+((r22*x12065))+((sj1*sj2))+(((-1.0)*cj1*x12066)));
evalcond[5]=(((r12*x12065))+(((-1.0)*gconst11*r10*x12067))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12066))+((r11*x12068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12071=(gconst10*r01);
IkReal x12072=(gconst11*r00);
CheckValue<IkReal> x12073=IKPowWithIntegerCheck(IKsign(((x12072*x12072)+(x12071*x12071)+(((-2.0)*x12071*x12072))+(r02*r02))),-1);
if(!x12073.valid){
continue;
}
CheckValue<IkReal> x12074 = IKatan2WithCheck(IkReal(((((-1.0)*x12072))+x12071)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12073.value)))+(x12074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12075=IKcos(j4);
IkReal x12076=IKsin(j4);
IkReal x12077=((1.0)*cj2);
IkReal x12078=((1.0)*x12075);
IkReal x12079=(gconst10*x12075);
IkReal x12080=(gconst10*x12076);
IkReal x12081=((1.0)*gconst11*x12076);
evalcond[0]=((((-1.0)*gconst11*r00*x12078))+((r02*x12076))+((r01*x12079)));
evalcond[1]=(((r21*x12080))+(((-1.0)*r20*x12081))+(((-1.0)*r22*x12078)));
evalcond[2]=((((-1.0)*r12*x12078))+((r11*x12080))+(((-1.0)*r10*x12081)));
evalcond[3]=((-1.0)+((r01*x12080))+(((-1.0)*r02*x12078))+(((-1.0)*r00*x12081)));
evalcond[4]=((((-1.0)*gconst11*r20*x12078))+((sj1*sj2))+((r22*x12076))+(((-1.0)*cj1*x12077))+((r21*x12079)));
evalcond[5]=(((r11*x12079))+(((-1.0)*gconst11*r10*x12078))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12077))+((r12*x12076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12082 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12082.valid){
continue;
}
CheckValue<IkReal> x12083=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12082.value)+(((1.5707963267949)*(x12083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12084=IKcos(j4);
IkReal x12085=IKsin(j4);
IkReal x12086=((1.0)*cj2);
IkReal x12087=((1.0)*x12084);
IkReal x12088=(gconst10*x12084);
IkReal x12089=(gconst10*x12085);
IkReal x12090=((1.0)*gconst11*x12085);
evalcond[0]=(((r02*x12085))+((r01*x12088))+(((-1.0)*gconst11*r00*x12087)));
evalcond[1]=((((-1.0)*r22*x12087))+(((-1.0)*r20*x12090))+((r21*x12089)));
evalcond[2]=((((-1.0)*r12*x12087))+(((-1.0)*r10*x12090))+((r11*x12089)));
evalcond[3]=((-1.0)+((r01*x12089))+(((-1.0)*r02*x12087))+(((-1.0)*r00*x12090)));
evalcond[4]=(((sj1*sj2))+((r22*x12085))+((r21*x12088))+(((-1.0)*gconst11*r20*x12087))+(((-1.0)*cj1*x12086)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12087))+((r12*x12085))+((r11*x12088))+(((-1.0)*sj1*x12086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12091=((-1.0)*r11);
CheckValue<IkReal> x12094 = IKatan2WithCheck(IkReal(x12091),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12094.valid){
continue;
}
IkReal x12092=((1.0)*(x12094.value));
IkReal x12093=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12092)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12092)));
IkReal gconst10=(x12091*x12093);
IkReal gconst11=((1.0)*r10*x12093);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12095=((-1.0)*r11);
CheckValue<IkReal> x12098 = IKatan2WithCheck(IkReal(x12095),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12098.valid){
continue;
}
IkReal x12096=((1.0)*(x12098.value));
IkReal x12097=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12096)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12096)));
IkReal gconst10=(x12095*x12097);
IkReal gconst11=((1.0)*r10*x12097);
IkReal x12099=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12103=IKPowWithIntegerCheck(x12099,-1);
if(!x12103.valid){
continue;
}
IkReal x12100=x12103.value;
IkReal x12101=((1.0)*x12100);
IkReal x12102=((((-1.0)*x12101*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12100))+(((-1.0)*x12101*(r00*r00)*(r10*r10))));
j4eval[0]=x12102;
j4eval[1]=r02;
j4eval[2]=x12099;
j4eval[3]=IKsign(x12102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12104=((-1.0)*r11);
CheckValue<IkReal> x12107 = IKatan2WithCheck(IkReal(x12104),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12107.valid){
continue;
}
IkReal x12105=((1.0)*(x12107.value));
IkReal x12106=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12105)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12105)));
IkReal gconst10=(x12104*x12106);
IkReal gconst11=((1.0)*r10*x12106);
IkReal x12108=r12*r12;
IkReal x12109=((1.0)*r02);
IkReal x12110=(cj1*sj2);
IkReal x12111=(cj2*sj1);
CheckValue<IkReal> x12115=IKPowWithIntegerCheck(((-1.0)+x12108),-1);
if(!x12115.valid){
continue;
}
IkReal x12112=x12115.value;
if((((1.0)+(((-1.0)*x12108)))) < -0.00001)
continue;
IkReal x12113=IKsqrt(((1.0)+(((-1.0)*x12108))));
IkReal x12114=(r12*x12112*x12113);
j4eval[0]=((IKabs(((((-1.0)*x12109*x12111*x12114))+(((-1.0)*x12109*x12110*x12114)))))+(IKabs(((((-1.0)*x12109*x12111))+(((-1.0)*x12109*x12110))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12116=(cj1*sj2);
IkReal x12117=(gconst10*r01);
IkReal x12118=(cj2*sj1);
IkReal x12119=((1.0)*r02);
IkReal x12120=((1.0)*gconst11*r00);
CheckValue<IkReal> x12121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12121.valid){
continue;
}
CheckValue<IkReal> x12122 = IKatan2WithCheck(IkReal((((x12116*x12117))+((x12117*x12118))+(((-1.0)*x12116*x12120))+(((-1.0)*x12118*x12120)))),IkReal(((((-1.0)*x12118*x12119))+(((-1.0)*x12116*x12119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12121.value)))+(x12122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12123=IKcos(j4);
IkReal x12124=IKsin(j4);
IkReal x12125=((1.0)*x12123);
IkReal x12126=(gconst10*x12123);
IkReal x12127=(gconst10*x12124);
IkReal x12128=((1.0)*gconst11*x12124);
evalcond[0]=(((r01*x12126))+(((-1.0)*gconst11*r00*x12125))+((r02*x12124)));
evalcond[1]=((((-1.0)*r20*x12128))+((r21*x12127))+(((-1.0)*r22*x12125)));
evalcond[2]=((((-1.0)*r12*x12125))+(((-1.0)*r10*x12128))+((r11*x12127)));
evalcond[3]=((1.0)+((r01*x12127))+(((-1.0)*r02*x12125))+(((-1.0)*r00*x12128)));
evalcond[4]=(((cj2*sj1))+((r12*x12124))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12125))+((r11*x12126)));
evalcond[5]=(((r21*x12126))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12124))+(((-1.0)*gconst11*r20*x12125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12129=(gconst10*r01);
IkReal x12130=(gconst11*r00);
CheckValue<IkReal> x12131 = IKatan2WithCheck(IkReal((x12129+(((-1.0)*x12130)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12131.valid){
continue;
}
CheckValue<IkReal> x12132=IKPowWithIntegerCheck(IKsign(((((2.0)*x12129*x12130))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12129*x12129)))+(((-1.0)*(x12130*x12130))))),-1);
if(!x12132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12131.value)+(((1.5707963267949)*(x12132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12133=IKcos(j4);
IkReal x12134=IKsin(j4);
IkReal x12135=((1.0)*x12133);
IkReal x12136=(gconst10*x12133);
IkReal x12137=(gconst10*x12134);
IkReal x12138=((1.0)*gconst11*x12134);
evalcond[0]=((((-1.0)*gconst11*r00*x12135))+((r01*x12136))+((r02*x12134)));
evalcond[1]=((((-1.0)*r20*x12138))+((r21*x12137))+(((-1.0)*r22*x12135)));
evalcond[2]=((((-1.0)*r12*x12135))+(((-1.0)*r10*x12138))+((r11*x12137)));
evalcond[3]=((1.0)+((r01*x12137))+(((-1.0)*r00*x12138))+(((-1.0)*r02*x12135)));
evalcond[4]=(((cj2*sj1))+((r12*x12134))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12135))+((r11*x12136)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12136))+((r22*x12134))+(((-1.0)*gconst11*r20*x12135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12139=((1.0)*gconst11);
CheckValue<IkReal> x12140 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12140.valid){
continue;
}
CheckValue<IkReal> x12141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12139))+(((-1.0)*gconst10*r20)))),-1);
if(!x12141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12140.value)+(((1.5707963267949)*(x12141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12142=IKcos(j4);
IkReal x12143=IKsin(j4);
IkReal x12144=((1.0)*x12142);
IkReal x12145=(gconst10*x12142);
IkReal x12146=(gconst10*x12143);
IkReal x12147=((1.0)*gconst11*x12143);
evalcond[0]=(((r02*x12143))+((r01*x12145))+(((-1.0)*gconst11*r00*x12144)));
evalcond[1]=((((-1.0)*r22*x12144))+(((-1.0)*r20*x12147))+((r21*x12146)));
evalcond[2]=((((-1.0)*r12*x12144))+((r11*x12146))+(((-1.0)*r10*x12147)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12147))+(((-1.0)*r02*x12144))+((r01*x12146)));
evalcond[4]=((((-1.0)*gconst11*r10*x12144))+((cj2*sj1))+((cj1*sj2))+((r12*x12143))+((r11*x12145)));
evalcond[5]=(((r22*x12143))+(((-1.0)*gconst11*r20*x12144))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12148=((-1.0)*r11);
IkReal x12149=((-1.0)*r10);
CheckValue<IkReal> x12151 = IKatan2WithCheck(IkReal(x12148),IkReal(x12149),IKFAST_ATAN2_MAGTHRESH);
if(!x12151.valid){
continue;
}
IkReal x12150=((1.0)*(x12151.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12150)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12149);
rxp1_1=(px*r21);
rxp1_2=(px*x12148);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12150)));
IkReal gconst10=x12148;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12152=((-1.0)*r11);
IkReal x12153=((-1.0)*r10);
CheckValue<IkReal> x12155 = IKatan2WithCheck(IkReal(x12152),IkReal(x12153),IKFAST_ATAN2_MAGTHRESH);
if(!x12155.valid){
continue;
}
IkReal x12154=((1.0)*(x12155.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12154)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12153);
rxp1_1=(px*r21);
rxp1_2=(px*x12152);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12154)));
IkReal gconst10=x12152;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12156=((-1.0)*r11);
IkReal x12157=((-1.0)*r10);
CheckValue<IkReal> x12159 = IKatan2WithCheck(IkReal(x12156),IkReal(x12157),IKFAST_ATAN2_MAGTHRESH);
if(!x12159.valid){
continue;
}
IkReal x12158=((1.0)*(x12159.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12158)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12157);
rxp1_1=(px*r21);
rxp1_2=(px*x12156);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12158)));
IkReal gconst10=x12156;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12162=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12162.valid){
continue;
}
IkReal x12160=x12162.value;
IkReal x12161=(sj0*x12160);
cj4array[0]=(((cj1*sj2*x12161))+((cj2*sj1*x12161)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12163=IKsin(j4);
IkReal x12164=IKcos(j4);
IkReal x12165=(gconst10*r21);
IkReal x12166=((1.0)*x12164);
IkReal x12167=((1.0)*gconst11*x12163);
evalcond[0]=(r02*x12163);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12166)));
evalcond[2]=(((x12163*x12165))+(((-1.0)*r20*x12167)));
evalcond[3]=((((-1.0)*r10*x12167))+((gconst10*r11*x12163)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12166))+((x12164*x12165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12169=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12169.valid){
continue;
}
IkReal x12168=x12169.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12168))+((cj1*cj2*x12168)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12170=IKsin(j4);
IkReal x12171=IKcos(j4);
IkReal x12172=((1.0)*sj0);
IkReal x12173=(gconst10*x12170);
IkReal x12174=((1.0)*x12171);
IkReal x12175=((1.0)*gconst11*x12170);
evalcond[0]=(r02*x12170);
evalcond[1]=((((-1.0)*x12172))+(((-1.0)*r02*x12174)));
evalcond[2]=(((r21*x12173))+(((-1.0)*r20*x12175)));
evalcond[3]=((((-1.0)*r10*x12175))+((r11*x12173)));
evalcond[4]=((((-1.0)*gconst11*r10*x12174))+((gconst10*r11*x12171))+(((-1.0)*cj1*sj2*x12172))+(((-1.0)*cj2*sj1*x12172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12176=IKPowWithIntegerCheck(r02,-1);
if(!x12176.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12176.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12177=IKsin(j4);
IkReal x12178=IKcos(j4);
IkReal x12179=(gconst10*r21);
IkReal x12180=((1.0)*cj1);
IkReal x12181=(gconst10*r11);
IkReal x12182=((1.0)*gconst11*x12177);
IkReal x12183=((1.0)*gconst11*x12178);
evalcond[0]=(r02*x12177);
evalcond[1]=(((x12177*x12179))+(((-1.0)*r20*x12182)));
evalcond[2]=(((x12177*x12181))+(((-1.0)*r10*x12182)));
evalcond[3]=(((sj1*sj2))+((x12178*x12179))+(((-1.0)*cj2*x12180))+(((-1.0)*r20*x12183)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12180))+(((-1.0)*r10*x12183))+((x12178*x12181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12184=((1.0)*gconst11);
CheckValue<IkReal> x12185 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12184))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12185.valid){
continue;
}
CheckValue<IkReal> x12186=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12185.value)+(((1.5707963267949)*(x12186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12187=IKsin(j4);
IkReal x12188=IKcos(j4);
IkReal x12189=((1.0)*gconst11);
IkReal x12190=((1.0)*cj2);
IkReal x12191=((1.0)*sj0);
IkReal x12192=(cj1*sj2);
IkReal x12193=(gconst10*x12188);
IkReal x12194=(gconst10*x12187);
IkReal x12195=((1.0)*x12188);
evalcond[0]=((((-1.0)*r20*x12187*x12189))+((r21*x12194)));
evalcond[1]=(cj0+((r11*x12194))+(((-1.0)*r12*x12195))+(((-1.0)*r10*x12187*x12189)));
evalcond[2]=(((r21*x12193))+((sj1*sj2))+(((-1.0)*r20*x12188*x12189))+(((-1.0)*cj1*x12190)));
evalcond[3]=((((-1.0)*x12191))+(((-1.0)*r02*x12195))+((r01*x12194))+(((-1.0)*r00*x12187*x12189)));
evalcond[4]=((((-1.0)*r00*x12188*x12189))+(((-1.0)*cj0*x12192))+((r02*x12187))+((r01*x12193))+(((-1.0)*cj0*sj1*x12190)));
evalcond[5]=(((r12*x12187))+((r11*x12193))+(((-1.0)*r10*x12188*x12189))+(((-1.0)*sj0*sj1*x12190))+(((-1.0)*x12191*x12192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12196=(gconst10*r21);
IkReal x12197=(gconst11*r20);
IkReal x12198=(sj1*sj2);
IkReal x12199=(cj1*cj2);
CheckValue<IkReal> x12200 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12199))+((r22*x12198)))),IkReal(((((-1.0)*x12196*x12199))+(((-1.0)*x12197*x12198))+((x12197*x12199))+((x12196*x12198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12200.valid){
continue;
}
CheckValue<IkReal> x12201=IKPowWithIntegerCheck(IKsign(((((2.0)*x12196*x12197))+(((-1.0)*(x12196*x12196)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12197*x12197))))),-1);
if(!x12201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12200.value)+(((1.5707963267949)*(x12201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12202=IKsin(j4);
IkReal x12203=IKcos(j4);
IkReal x12204=((1.0)*cj2);
IkReal x12205=((1.0)*sj0);
IkReal x12206=(cj1*sj2);
IkReal x12207=((1.0)*x12203);
IkReal x12208=(gconst10*x12203);
IkReal x12209=(gconst10*x12202);
IkReal x12210=((1.0)*gconst11*x12202);
evalcond[0]=((((-1.0)*r22*x12207))+((r21*x12209))+(((-1.0)*r20*x12210)));
evalcond[1]=(cj0+(((-1.0)*r12*x12207))+(((-1.0)*r10*x12210))+((r11*x12209)));
evalcond[2]=((((-1.0)*r02*x12207))+(((-1.0)*r00*x12210))+((r01*x12209))+(((-1.0)*x12205)));
evalcond[3]=(((r22*x12202))+((sj1*sj2))+(((-1.0)*cj1*x12204))+(((-1.0)*gconst11*r20*x12207))+((r21*x12208)));
evalcond[4]=(((r02*x12202))+(((-1.0)*gconst11*r00*x12207))+(((-1.0)*cj0*x12206))+(((-1.0)*cj0*sj1*x12204))+((r01*x12208)));
evalcond[5]=((((-1.0)*sj0*sj1*x12204))+((r12*x12202))+(((-1.0)*x12205*x12206))+(((-1.0)*gconst11*r10*x12207))+((r11*x12208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12211=((1.0)*sj0);
IkReal x12212=((1.0)*gconst10);
CheckValue<IkReal> x12213=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12212)))),-1);
if(!x12213.valid){
continue;
}
CheckValue<IkReal> x12214 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12211))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12212))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12213.value)))+(x12214.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12215=IKsin(j4);
IkReal x12216=IKcos(j4);
IkReal x12217=((1.0)*cj2);
IkReal x12218=((1.0)*sj0);
IkReal x12219=(cj1*sj2);
IkReal x12220=((1.0)*x12216);
IkReal x12221=(gconst10*x12216);
IkReal x12222=(gconst10*x12215);
IkReal x12223=((1.0)*gconst11*x12215);
evalcond[0]=((((-1.0)*r22*x12220))+((r21*x12222))+(((-1.0)*r20*x12223)));
evalcond[1]=(((r11*x12222))+cj0+(((-1.0)*r12*x12220))+(((-1.0)*r10*x12223)));
evalcond[2]=((((-1.0)*x12218))+(((-1.0)*r00*x12223))+((r01*x12222))+(((-1.0)*r02*x12220)));
evalcond[3]=(((r22*x12215))+(((-1.0)*cj1*x12217))+((sj1*sj2))+((r21*x12221))+(((-1.0)*gconst11*r20*x12220)));
evalcond[4]=(((r02*x12215))+(((-1.0)*cj0*x12219))+(((-1.0)*cj0*sj1*x12217))+((r01*x12221))+(((-1.0)*gconst11*r00*x12220)));
evalcond[5]=(((r11*x12221))+(((-1.0)*sj0*sj1*x12217))+((r12*x12215))+(((-1.0)*x12218*x12219))+(((-1.0)*gconst11*r10*x12220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12224=((1.0)*gconst11);
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
CheckValue<IkReal> x12226=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12224)))),-1);
if(!x12226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12225.value)+(((1.5707963267949)*(x12226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12227=IKsin(j4);
IkReal x12228=IKcos(j4);
IkReal x12229=((1.0)*cj2);
IkReal x12230=((1.0)*sj0);
IkReal x12231=(cj1*sj2);
IkReal x12232=((1.0)*x12228);
IkReal x12233=(gconst10*x12228);
IkReal x12234=(gconst10*x12227);
IkReal x12235=((1.0)*gconst11*x12227);
evalcond[0]=((((-1.0)*r22*x12232))+(((-1.0)*r20*x12235))+((r21*x12234)));
evalcond[1]=((((-1.0)*r12*x12232))+cj0+((r11*x12234))+(((-1.0)*r10*x12235)));
evalcond[2]=(((r01*x12234))+(((-1.0)*r00*x12235))+(((-1.0)*r02*x12232))+(((-1.0)*x12230)));
evalcond[3]=((((-1.0)*gconst11*r20*x12232))+(((-1.0)*cj1*x12229))+((r22*x12227))+((sj1*sj2))+((r21*x12233)));
evalcond[4]=(((r01*x12233))+((r02*x12227))+(((-1.0)*cj0*x12231))+(((-1.0)*gconst11*r00*x12232))+(((-1.0)*cj0*sj1*x12229)));
evalcond[5]=((((-1.0)*sj0*sj1*x12229))+(((-1.0)*x12230*x12231))+(((-1.0)*gconst11*r10*x12232))+((r11*x12233))+((r12*x12227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12236=((-1.0)*r11);
CheckValue<IkReal> x12239 = IKatan2WithCheck(IkReal(x12236),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12239.valid){
continue;
}
IkReal x12237=((1.0)*(x12239.value));
IkReal x12238=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12237)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12237)));
IkReal gconst10=(x12236*x12238);
IkReal gconst11=((1.0)*r10*x12238);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12240=gconst10*gconst10;
IkReal x12241=gconst11*gconst11;
IkReal x12242=(gconst10*r21);
IkReal x12243=(cj3*r00);
IkReal x12244=(r00*sj3);
IkReal x12245=((1.0)*gconst11);
IkReal x12246=(gconst10*r20);
IkReal x12247=(r01*sj3);
IkReal x12248=(cj3*gconst11*r01);
IkReal x12249=(r21*x12240);
IkReal x12250=(r20*x12241);
CheckValue<IkReal> x12251 = IKatan2WithCheck(IkReal((((r22*x12248))+((gconst10*r22*x12243)))),IkReal(((((-1.0)*cj3*r01*x12250))+((x12242*x12248))+((x12243*x12249))+(((-1.0)*x12243*x12245*x12246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12251.valid){
continue;
}
CheckValue<IkReal> x12252=IKPowWithIntegerCheck(IKsign((((x12244*x12250))+((x12247*x12249))+(((-1.0)*x12245*x12246*x12247))+(((-1.0)*x12242*x12244*x12245))+((r02*r22*sj3)))),-1);
if(!x12252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12251.value)+(((1.5707963267949)*(x12252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12253=IKsin(j4);
IkReal x12254=IKcos(j4);
IkReal x12255=(sj1*sj2);
IkReal x12256=(gconst10*sj3);
IkReal x12257=(cj3*gconst10);
IkReal x12258=(gconst11*r20);
IkReal x12259=(gconst11*r21);
IkReal x12260=(gconst11*r00);
IkReal x12261=(cj3*gconst11);
IkReal x12262=(gconst11*r10);
IkReal x12263=((1.0)*cj1);
IkReal x12264=(cj2*sj1);
IkReal x12265=(gconst11*sj3);
IkReal x12266=(cj2*x12263);
IkReal x12267=((1.0)*x12254);
IkReal x12268=((1.0)*x12253);
IkReal x12269=(gconst10*x12253);
IkReal x12270=(cj3*x12253);
IkReal x12271=(sj3*x12254);
evalcond[0]=((((-1.0)*x12258*x12268))+((r21*x12269))+(((-1.0)*r22*x12267)));
evalcond[1]=((((-1.0)*r12*x12267))+((r11*x12269))+(((-1.0)*x12262*x12268)));
evalcond[2]=((-1.0)+((r01*x12269))+(((-1.0)*x12260*x12268))+(((-1.0)*r02*x12267)));
evalcond[3]=(((r01*x12254*x12257))+((r01*x12265))+((r00*x12256))+((r02*x12270))+(((-1.0)*cj3*x12260*x12267)));
evalcond[4]=(((r01*x12261))+((r00*x12257))+(((-1.0)*r01*x12256*x12267))+(((-1.0)*r02*sj3*x12268))+((x12260*x12271)));
evalcond[5]=(((cj1*sj2))+((r21*x12254*x12257))+x12264+(((-1.0)*cj3*x12258*x12267))+((r22*x12270))+((r20*x12256))+((sj3*x12259)));
evalcond[6]=(((r11*x12254*x12257))+(((-1.0)*r10*x12261*x12267))+((r11*x12265))+((r10*x12256))+x12255+((r12*x12270))+(((-1.0)*x12266)));
evalcond[7]=((((-1.0)*r22*sj3*x12268))+((cj3*x12259))+((x12258*x12271))+x12255+((r20*x12257))+(((-1.0)*r21*x12256*x12267))+(((-1.0)*x12266)));
evalcond[8]=((((-1.0)*r11*x12256*x12267))+((x12262*x12271))+((r11*x12261))+((r10*x12257))+(((-1.0)*x12264))+(((-1.0)*r12*sj3*x12268))+(((-1.0)*sj2*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12272 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12272.valid){
continue;
}
CheckValue<IkReal> x12273=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12272.value)+(((1.5707963267949)*(x12273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12274=IKsin(j4);
IkReal x12275=IKcos(j4);
IkReal x12276=(sj1*sj2);
IkReal x12277=(gconst10*sj3);
IkReal x12278=(cj3*gconst10);
IkReal x12279=(gconst11*r20);
IkReal x12280=(gconst11*r21);
IkReal x12281=(gconst11*r00);
IkReal x12282=(cj3*gconst11);
IkReal x12283=(gconst11*r10);
IkReal x12284=((1.0)*cj1);
IkReal x12285=(cj2*sj1);
IkReal x12286=(gconst11*sj3);
IkReal x12287=(cj2*x12284);
IkReal x12288=((1.0)*x12275);
IkReal x12289=((1.0)*x12274);
IkReal x12290=(gconst10*x12274);
IkReal x12291=(cj3*x12274);
IkReal x12292=(sj3*x12275);
evalcond[0]=((((-1.0)*x12279*x12289))+((r21*x12290))+(((-1.0)*r22*x12288)));
evalcond[1]=((((-1.0)*r12*x12288))+((r11*x12290))+(((-1.0)*x12283*x12289)));
evalcond[2]=((-1.0)+(((-1.0)*x12281*x12289))+((r01*x12290))+(((-1.0)*r02*x12288)));
evalcond[3]=((((-1.0)*cj3*x12281*x12288))+((r01*x12275*x12278))+((r01*x12286))+((r02*x12291))+((r00*x12277)));
evalcond[4]=((((-1.0)*r01*x12277*x12288))+((r01*x12282))+(((-1.0)*r02*sj3*x12289))+((r00*x12278))+((x12281*x12292)));
evalcond[5]=(((r20*x12277))+(((-1.0)*cj3*x12279*x12288))+((cj1*sj2))+x12285+((r22*x12291))+((r21*x12275*x12278))+((sj3*x12280)));
evalcond[6]=(x12276+((r12*x12291))+((r11*x12286))+((r10*x12277))+((r11*x12275*x12278))+(((-1.0)*r10*x12282*x12288))+(((-1.0)*x12287)));
evalcond[7]=(((r20*x12278))+x12276+(((-1.0)*r21*x12277*x12288))+((x12279*x12292))+(((-1.0)*r22*sj3*x12289))+((cj3*x12280))+(((-1.0)*x12287)));
evalcond[8]=((((-1.0)*r12*sj3*x12289))+((x12283*x12292))+(((-1.0)*r11*x12277*x12288))+(((-1.0)*sj2*x12284))+(((-1.0)*x12285))+((r11*x12282))+((r10*x12278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12293=((-1.0)*r11);
CheckValue<IkReal> x12296 = IKatan2WithCheck(IkReal(x12293),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12296.valid){
continue;
}
IkReal x12294=((1.0)*(x12296.value));
IkReal x12295=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12294)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12294)));
IkReal gconst10=(x12293*x12295);
IkReal gconst11=((1.0)*r10*x12295);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12297=gconst10*gconst10;
IkReal x12298=gconst11*gconst11;
IkReal x12299=(gconst10*r21);
IkReal x12300=(cj3*r00);
IkReal x12301=(r00*sj3);
IkReal x12302=((1.0)*gconst11);
IkReal x12303=(gconst10*r20);
IkReal x12304=(r01*sj3);
IkReal x12305=(cj3*gconst11*r01);
IkReal x12306=(r21*x12297);
IkReal x12307=(r20*x12298);
CheckValue<IkReal> x12308=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12299*x12301*x12302))+((x12301*x12307))+(((-1.0)*x12302*x12303*x12304))+((x12304*x12306))+((r02*r22*sj3)))),-1);
if(!x12308.valid){
continue;
}
CheckValue<IkReal> x12309 = IKatan2WithCheck(IkReal((((r22*x12305))+((gconst10*r22*x12300)))),IkReal(((((-1.0)*cj3*r01*x12307))+((x12300*x12306))+(((-1.0)*x12300*x12302*x12303))+((x12299*x12305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12308.value)))+(x12309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12310=IKsin(j4);
IkReal x12311=IKcos(j4);
IkReal x12312=(cj2*sj1);
IkReal x12313=(cj1*sj2);
IkReal x12314=(gconst10*sj3);
IkReal x12315=(cj3*gconst10);
IkReal x12316=(gconst11*r20);
IkReal x12317=(gconst11*r21);
IkReal x12318=(gconst11*r00);
IkReal x12319=(sj1*sj2);
IkReal x12320=(cj3*gconst11);
IkReal x12321=(gconst11*r10);
IkReal x12322=(cj1*cj2);
IkReal x12323=(gconst11*sj3);
IkReal x12324=((1.0)*x12311);
IkReal x12325=((1.0)*x12310);
IkReal x12326=(gconst10*x12310);
IkReal x12327=(cj3*x12310);
IkReal x12328=(sj3*x12311);
IkReal x12329=(x12312+x12313);
evalcond[0]=((((-1.0)*r22*x12324))+((r21*x12326))+(((-1.0)*x12316*x12325)));
evalcond[1]=((((-1.0)*x12321*x12325))+(((-1.0)*r12*x12324))+((r11*x12326)));
evalcond[2]=((1.0)+((r01*x12326))+(((-1.0)*r02*x12324))+(((-1.0)*x12318*x12325)));
evalcond[3]=(((r01*x12323))+(((-1.0)*cj3*x12318*x12324))+((r01*x12311*x12315))+((r00*x12314))+((r02*x12327)));
evalcond[4]=(((r01*x12320))+((x12318*x12328))+((r00*x12315))+(((-1.0)*r02*sj3*x12325))+(((-1.0)*r01*x12314*x12324)));
evalcond[5]=(((sj3*x12317))+x12329+((r21*x12311*x12315))+((r22*x12327))+(((-1.0)*cj3*x12316*x12324))+((r20*x12314)));
evalcond[6]=(((r10*x12314))+x12322+(((-1.0)*x12319))+(((-1.0)*r10*x12320*x12324))+((r12*x12327))+((r11*x12311*x12315))+((r11*x12323)));
evalcond[7]=(((r10*x12315))+x12329+(((-1.0)*r11*x12314*x12324))+(((-1.0)*r12*sj3*x12325))+((r11*x12320))+((x12321*x12328)));
evalcond[8]=(x12319+((x12316*x12328))+(((-1.0)*r22*sj3*x12325))+(((-1.0)*x12322))+((r20*x12315))+(((-1.0)*r21*x12314*x12324))+((cj3*x12317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12330=((1.0)*gconst11);
CheckValue<IkReal> x12331=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12330)))),-1);
if(!x12331.valid){
continue;
}
CheckValue<IkReal> x12332 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12331.value)))+(x12332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12333=IKsin(j4);
IkReal x12334=IKcos(j4);
IkReal x12335=(cj2*sj1);
IkReal x12336=(cj1*sj2);
IkReal x12337=(gconst10*sj3);
IkReal x12338=(cj3*gconst10);
IkReal x12339=(gconst11*r20);
IkReal x12340=(gconst11*r21);
IkReal x12341=(gconst11*r00);
IkReal x12342=(sj1*sj2);
IkReal x12343=(cj3*gconst11);
IkReal x12344=(gconst11*r10);
IkReal x12345=(cj1*cj2);
IkReal x12346=(gconst11*sj3);
IkReal x12347=((1.0)*x12334);
IkReal x12348=((1.0)*x12333);
IkReal x12349=(gconst10*x12333);
IkReal x12350=(cj3*x12333);
IkReal x12351=(sj3*x12334);
IkReal x12352=(x12336+x12335);
evalcond[0]=((((-1.0)*x12339*x12348))+((r21*x12349))+(((-1.0)*r22*x12347)));
evalcond[1]=((((-1.0)*x12344*x12348))+(((-1.0)*r12*x12347))+((r11*x12349)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12347))+(((-1.0)*x12341*x12348))+((r01*x12349)));
evalcond[3]=(((r01*x12334*x12338))+((r00*x12337))+((r01*x12346))+((r02*x12350))+(((-1.0)*cj3*x12341*x12347)));
evalcond[4]=(((x12341*x12351))+((r00*x12338))+((r01*x12343))+(((-1.0)*r01*x12337*x12347))+(((-1.0)*r02*sj3*x12348)));
evalcond[5]=((((-1.0)*cj3*x12339*x12347))+((r20*x12337))+x12352+((sj3*x12340))+((r22*x12350))+((r21*x12334*x12338)));
evalcond[6]=(((r11*x12334*x12338))+(((-1.0)*r10*x12343*x12347))+x12345+((r11*x12346))+((r10*x12337))+((r12*x12350))+(((-1.0)*x12342)));
evalcond[7]=(((x12344*x12351))+(((-1.0)*r11*x12337*x12347))+x12352+((r11*x12343))+((r10*x12338))+(((-1.0)*r12*sj3*x12348)));
evalcond[8]=(((x12339*x12351))+((r20*x12338))+x12342+((cj3*x12340))+(((-1.0)*r21*x12337*x12347))+(((-1.0)*r22*sj3*x12348))+(((-1.0)*x12345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12353=((-1.0)*r11);
IkReal x12354=((-1.0)*r10);
CheckValue<IkReal> x12356 = IKatan2WithCheck(IkReal(x12353),IkReal(x12354),IKFAST_ATAN2_MAGTHRESH);
if(!x12356.valid){
continue;
}
IkReal x12355=((1.0)*(x12356.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12355)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12354);
rxp1_1=(px*r21);
rxp1_2=(px*x12353);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12355)));
IkReal gconst10=x12353;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12357=((-1.0)*r11);
IkReal x12358=((-1.0)*r10);
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal(x12357),IkReal(x12358),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
IkReal x12359=((1.0)*(x12360.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12359)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12358);
rxp1_1=(px*r21);
rxp1_2=(px*x12357);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12359)));
IkReal gconst10=x12357;
IkReal gconst11=((1.0)*r10);
IkReal x12361=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12361))+(((-1.0)*r10*r20*x12361)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12362=((-1.0)*r11);
IkReal x12363=((-1.0)*r10);
CheckValue<IkReal> x12365 = IKatan2WithCheck(IkReal(x12362),IkReal(x12363),IKFAST_ATAN2_MAGTHRESH);
if(!x12365.valid){
continue;
}
IkReal x12364=((1.0)*(x12365.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12364)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12363);
rxp1_1=(px*r21);
rxp1_2=(px*x12362);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12364)));
IkReal gconst10=x12362;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12367=IKPowWithIntegerCheck(r02,-1);
if(!x12367.valid){
continue;
}
IkReal x12366=x12367.value;
CheckValue<IkReal> x12368=IKPowWithIntegerCheck(cj3,-1);
if(!x12368.valid){
continue;
}
if( IKabs((x12366*(x12368.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12366)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12366*(x12368.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12366))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12366*(x12368.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12366));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12369=IKsin(j4);
IkReal x12370=IKcos(j4);
IkReal x12371=(cj3*r10);
IkReal x12372=((1.0)*gconst11);
IkReal x12373=(sj1*sj2);
IkReal x12374=(gconst11*sj3);
IkReal x12375=(cj3*r11);
IkReal x12376=(cj2*sj1);
IkReal x12377=(gconst10*r20);
IkReal x12378=(gconst10*sj3);
IkReal x12379=((1.0)*cj0);
IkReal x12380=((1.0)*sj0);
IkReal x12381=(cj1*sj2);
IkReal x12382=(cj3*r21);
IkReal x12383=((1.0)*cj1*cj2);
IkReal x12384=(r20*x12370);
IkReal x12385=(gconst10*x12369);
IkReal x12386=(gconst10*x12370);
IkReal x12387=(r02*x12369);
IkReal x12388=((1.0)*x12370);
evalcond[0]=((((-1.0)*r02*x12388))+(((-1.0)*x12380)));
evalcond[1]=(((r21*x12385))+(((-1.0)*r20*x12369*x12372)));
evalcond[2]=(((r11*x12385))+cj0+(((-1.0)*r10*x12369*x12372)));
evalcond[3]=((((-1.0)*cj1*cj2*x12379))+((cj3*x12387))+((cj0*x12373)));
evalcond[4]=((((-1.0)*x12376*x12379))+(((-1.0)*sj3*x12387))+(((-1.0)*x12379*x12381)));
evalcond[5]=(x12376+x12381+((r21*x12374))+((sj3*x12377))+((x12382*x12386))+(((-1.0)*cj3*x12372*x12384)));
evalcond[6]=(((gconst11*x12382))+(((-1.0)*r21*x12378*x12388))+x12373+(((-1.0)*x12383))+((cj3*x12377))+((x12374*x12384)));
evalcond[7]=(((r11*x12374))+(((-1.0)*x12370*x12371*x12372))+((r10*x12378))+((sj0*x12373))+(((-1.0)*cj1*cj2*x12380))+((x12375*x12386)));
evalcond[8]=(((gconst11*x12375))+(((-1.0)*r11*x12378*x12388))+(((-1.0)*x12376*x12380))+((gconst10*x12371))+(((-1.0)*x12380*x12381))+((r10*x12370*x12374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12389=((1.0)*r20);
IkReal x12390=((1.0)*gconst11);
CheckValue<IkReal> x12391=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12390))),-1);
if(!x12391.valid){
continue;
}
CheckValue<IkReal> x12392=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12389))+((cj3*gconst10*r21))),-1);
if(!x12392.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12391.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12392.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12389))+(((-1.0)*r21*sj3*x12390)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12391.value)))+IKsqr(((x12392.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12389))+(((-1.0)*r21*sj3*x12390))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12391.value)), ((x12392.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12389))+(((-1.0)*r21*sj3*x12390))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12393=IKsin(j4);
IkReal x12394=IKcos(j4);
IkReal x12395=(cj3*r10);
IkReal x12396=((1.0)*gconst11);
IkReal x12397=(sj1*sj2);
IkReal x12398=(gconst11*sj3);
IkReal x12399=(cj3*r11);
IkReal x12400=(cj2*sj1);
IkReal x12401=(gconst10*r20);
IkReal x12402=(gconst10*sj3);
IkReal x12403=((1.0)*cj0);
IkReal x12404=((1.0)*sj0);
IkReal x12405=(cj1*sj2);
IkReal x12406=(cj3*r21);
IkReal x12407=((1.0)*cj1*cj2);
IkReal x12408=(r20*x12394);
IkReal x12409=(gconst10*x12393);
IkReal x12410=(gconst10*x12394);
IkReal x12411=(r02*x12393);
IkReal x12412=((1.0)*x12394);
evalcond[0]=((((-1.0)*x12404))+(((-1.0)*r02*x12412)));
evalcond[1]=((((-1.0)*r20*x12393*x12396))+((r21*x12409)));
evalcond[2]=((((-1.0)*r10*x12393*x12396))+cj0+((r11*x12409)));
evalcond[3]=(((cj3*x12411))+(((-1.0)*cj1*cj2*x12403))+((cj0*x12397)));
evalcond[4]=((((-1.0)*sj3*x12411))+(((-1.0)*x12403*x12405))+(((-1.0)*x12400*x12403)));
evalcond[5]=(((x12406*x12410))+((r21*x12398))+((sj3*x12401))+(((-1.0)*cj3*x12396*x12408))+x12400+x12405);
evalcond[6]=((((-1.0)*x12407))+x12397+((gconst11*x12406))+((cj3*x12401))+(((-1.0)*r21*x12402*x12412))+((x12398*x12408)));
evalcond[7]=(((r11*x12398))+((x12399*x12410))+(((-1.0)*x12394*x12395*x12396))+((r10*x12402))+(((-1.0)*cj1*cj2*x12404))+((sj0*x12397)));
evalcond[8]=(((gconst11*x12399))+((gconst10*x12395))+(((-1.0)*r11*x12402*x12412))+((r10*x12394*x12398))+(((-1.0)*x12404*x12405))+(((-1.0)*x12400*x12404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12413=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12413.valid){
continue;
}
CheckValue<IkReal> x12414=IKPowWithIntegerCheck(r02,-1);
if(!x12414.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12414.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12413.value)))+IKsqr(((-1.0)*sj0*(x12414.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12413.value)), ((-1.0)*sj0*(x12414.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12415=IKsin(j4);
IkReal x12416=IKcos(j4);
IkReal x12417=(cj3*r10);
IkReal x12418=((1.0)*gconst11);
IkReal x12419=(sj1*sj2);
IkReal x12420=(gconst11*sj3);
IkReal x12421=(cj3*r11);
IkReal x12422=(cj2*sj1);
IkReal x12423=(gconst10*r20);
IkReal x12424=(gconst10*sj3);
IkReal x12425=((1.0)*cj0);
IkReal x12426=((1.0)*sj0);
IkReal x12427=(cj1*sj2);
IkReal x12428=(cj3*r21);
IkReal x12429=((1.0)*cj1*cj2);
IkReal x12430=(r20*x12416);
IkReal x12431=(gconst10*x12415);
IkReal x12432=(gconst10*x12416);
IkReal x12433=(r02*x12415);
IkReal x12434=((1.0)*x12416);
evalcond[0]=((((-1.0)*x12426))+(((-1.0)*r02*x12434)));
evalcond[1]=((((-1.0)*r20*x12415*x12418))+((r21*x12431)));
evalcond[2]=(cj0+((r11*x12431))+(((-1.0)*r10*x12415*x12418)));
evalcond[3]=(((cj3*x12433))+((cj0*x12419))+(((-1.0)*cj1*cj2*x12425)));
evalcond[4]=((((-1.0)*x12425*x12427))+(((-1.0)*sj3*x12433))+(((-1.0)*x12422*x12425)));
evalcond[5]=(((x12428*x12432))+((r21*x12420))+(((-1.0)*cj3*x12418*x12430))+x12422+x12427+((sj3*x12423)));
evalcond[6]=((((-1.0)*r21*x12424*x12434))+((x12420*x12430))+(((-1.0)*x12429))+((cj3*x12423))+((gconst11*x12428))+x12419);
evalcond[7]=(((x12421*x12432))+(((-1.0)*x12416*x12417*x12418))+(((-1.0)*cj1*cj2*x12426))+((r10*x12424))+((r11*x12420))+((sj0*x12419)));
evalcond[8]=((((-1.0)*r11*x12424*x12434))+(((-1.0)*x12422*x12426))+((gconst11*x12421))+((gconst10*x12417))+((r10*x12416*x12420))+(((-1.0)*x12426*x12427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12435=((-1.0)*r11);
CheckValue<IkReal> x12438 = IKatan2WithCheck(IkReal(x12435),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12438.valid){
continue;
}
IkReal x12436=((1.0)*(x12438.value));
IkReal x12437=x11761;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12436)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12436)));
IkReal gconst10=(x12435*x12437);
IkReal gconst11=((1.0)*r10*x12437);
IkReal x12439=r12*r12;
IkReal x12440=((1.0)*sj0);
IkReal x12441=(cj0*r02);
IkReal x12442=x11761;
j4eval[0]=((IKabs(((((-1.0)*x12440*x12442))+((sj0*x12439*x12442))+((r12*x12441*x12442)))))+(IKabs(((((-1.0)*x12441))+(((-1.0)*r12*x12440))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12443=((1.0)*r12);
IkReal x12444=(sj1*sj2);
IkReal x12445=((1.0)*r21);
IkReal x12446=(cj3*gconst11);
IkReal x12447=(r11*sj3);
IkReal x12448=(gconst11*r20);
IkReal x12449=((1.0)*sj3);
IkReal x12450=(cj1*cj2);
IkReal x12451=(gconst10*r21*sj3);
IkReal x12452=(cj3*gconst10*r20);
CheckValue<IkReal> x12453=IKPowWithIntegerCheck((((gconst10*x12447*x12448))+((gconst11*r10*x12451))+(((-1.0)*gconst11*r10*x12448*x12449))+(((-1.0)*x12445*x12447*(gconst10*gconst10)))),-1);
if(!x12453.valid){
continue;
}
CheckValue<IkReal> x12454=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12445))+((sj3*x12448))),-1);
if(!x12454.valid){
continue;
}
if( IKabs(((x12453.value)*(((((-1.0)*r21*x12443*x12446))+((cj0*x12451))+((r12*x12450))+(((-1.0)*x12443*x12444))+(((-1.0)*cj0*x12448*x12449))+(((-1.0)*x12443*x12452)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12454.value)*(((((-1.0)*x12444))+(((-1.0)*x12452))+(((-1.0)*x12445*x12446))+x12450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12453.value)*(((((-1.0)*r21*x12443*x12446))+((cj0*x12451))+((r12*x12450))+(((-1.0)*x12443*x12444))+(((-1.0)*cj0*x12448*x12449))+(((-1.0)*x12443*x12452))))))+IKsqr(((x12454.value)*(((((-1.0)*x12444))+(((-1.0)*x12452))+(((-1.0)*x12445*x12446))+x12450))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12453.value)*(((((-1.0)*r21*x12443*x12446))+((cj0*x12451))+((r12*x12450))+(((-1.0)*x12443*x12444))+(((-1.0)*cj0*x12448*x12449))+(((-1.0)*x12443*x12452))))), ((x12454.value)*(((((-1.0)*x12444))+(((-1.0)*x12452))+(((-1.0)*x12445*x12446))+x12450))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12455=IKsin(j4);
IkReal x12456=IKcos(j4);
IkReal x12457=(cj3*r10);
IkReal x12458=(gconst11*r20);
IkReal x12459=(gconst11*sj3);
IkReal x12460=(sj1*sj2);
IkReal x12461=(cj3*r11);
IkReal x12462=(r10*sj3);
IkReal x12463=(gconst10*r01);
IkReal x12464=(gconst10*sj3);
IkReal x12465=(cj2*sj1);
IkReal x12466=((1.0)*sj0);
IkReal x12467=(cj1*sj2);
IkReal x12468=(gconst10*r21);
IkReal x12469=(cj3*gconst10);
IkReal x12470=(cj3*gconst11);
IkReal x12471=((1.0)*cj0);
IkReal x12472=((1.0)*x12455);
IkReal x12473=((1.0)*cj1*cj2);
IkReal x12474=(gconst11*x12456);
IkReal x12475=(sj3*x12456);
IkReal x12476=(gconst10*x12455);
IkReal x12477=((1.0)*x12456);
IkReal x12478=(cj3*x12456);
IkReal x12479=(cj3*x12455);
evalcond[0]=(((x12455*x12468))+(((-1.0)*x12458*x12472)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12472))+((r11*x12476))+(((-1.0)*r12*x12477)));
evalcond[2]=((((-1.0)*r02*x12477))+((x12455*x12463))+(((-1.0)*x12466))+(((-1.0)*gconst11*r00*x12472)));
evalcond[3]=(((r20*x12464))+(((-1.0)*cj3*x12458*x12477))+((x12468*x12478))+x12467+x12465+((r21*x12459)));
evalcond[4]=(((r20*x12469))+(((-1.0)*r21*x12464*x12477))+(((-1.0)*x12473))+((x12458*x12475))+x12460+((r21*x12470)));
evalcond[5]=(((r00*x12464))+((cj0*x12460))+((x12463*x12478))+(((-1.0)*r00*x12470*x12477))+((r01*x12459))+((r02*x12479))+(((-1.0)*cj1*cj2*x12471)));
evalcond[6]=(((r12*x12479))+((r11*x12459))+((gconst10*x12456*x12461))+((sj0*x12460))+(((-1.0)*cj1*cj2*x12466))+((gconst10*x12462))+(((-1.0)*x12457*x12474)));
evalcond[7]=((((-1.0)*x12465*x12471))+((r00*x12469))+((r01*x12470))+(((-1.0)*x12467*x12471))+(((-1.0)*x12463*x12475))+((r00*x12456*x12459))+(((-1.0)*r02*sj3*x12472)));
evalcond[8]=(((gconst11*x12461))+(((-1.0)*x12465*x12466))+(((-1.0)*r11*x12464*x12477))+(((-1.0)*x12466*x12467))+(((-1.0)*r12*sj3*x12472))+((gconst10*x12457))+((r10*x12456*x12459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12480=((1.0)*sj0);
IkReal x12481=((1.0)*gconst10);
CheckValue<IkReal> x12482=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12481)))),-1);
if(!x12482.valid){
continue;
}
CheckValue<IkReal> x12483 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12480))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12480))+(((-1.0)*cj0*r01*x12481))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12482.value)))+(x12483.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12484=IKsin(j4);
IkReal x12485=IKcos(j4);
IkReal x12486=(cj3*r10);
IkReal x12487=(gconst11*r20);
IkReal x12488=(gconst11*sj3);
IkReal x12489=(sj1*sj2);
IkReal x12490=(cj3*r11);
IkReal x12491=(r10*sj3);
IkReal x12492=(gconst10*r01);
IkReal x12493=(gconst10*sj3);
IkReal x12494=(cj2*sj1);
IkReal x12495=((1.0)*sj0);
IkReal x12496=(cj1*sj2);
IkReal x12497=(gconst10*r21);
IkReal x12498=(cj3*gconst10);
IkReal x12499=(cj3*gconst11);
IkReal x12500=((1.0)*cj0);
IkReal x12501=((1.0)*x12484);
IkReal x12502=((1.0)*cj1*cj2);
IkReal x12503=(gconst11*x12485);
IkReal x12504=(sj3*x12485);
IkReal x12505=(gconst10*x12484);
IkReal x12506=((1.0)*x12485);
IkReal x12507=(cj3*x12485);
IkReal x12508=(cj3*x12484);
evalcond[0]=(((x12484*x12497))+(((-1.0)*x12487*x12501)));
evalcond[1]=(((r11*x12505))+cj0+(((-1.0)*r12*x12506))+(((-1.0)*gconst11*r10*x12501)));
evalcond[2]=((((-1.0)*gconst11*r00*x12501))+(((-1.0)*r02*x12506))+(((-1.0)*x12495))+((x12484*x12492)));
evalcond[3]=((((-1.0)*cj3*x12487*x12506))+((r20*x12493))+x12496+x12494+((x12497*x12507))+((r21*x12488)));
evalcond[4]=((((-1.0)*x12502))+((r20*x12498))+((r21*x12499))+(((-1.0)*r21*x12493*x12506))+x12489+((x12487*x12504)));
evalcond[5]=((((-1.0)*r00*x12499*x12506))+((r00*x12493))+((x12492*x12507))+((cj0*x12489))+(((-1.0)*cj1*cj2*x12500))+((r01*x12488))+((r02*x12508)));
evalcond[6]=((((-1.0)*x12486*x12503))+((r11*x12488))+((gconst10*x12491))+((sj0*x12489))+((gconst10*x12485*x12490))+(((-1.0)*cj1*cj2*x12495))+((r12*x12508)));
evalcond[7]=(((r00*x12498))+((r01*x12499))+(((-1.0)*x12496*x12500))+(((-1.0)*r02*sj3*x12501))+(((-1.0)*x12494*x12500))+((r00*x12485*x12488))+(((-1.0)*x12492*x12504)));
evalcond[8]=(((gconst10*x12486))+(((-1.0)*r11*x12493*x12506))+((gconst11*x12490))+(((-1.0)*r12*sj3*x12501))+((r10*x12485*x12488))+(((-1.0)*x12495*x12496))+(((-1.0)*x12494*x12495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12509=gconst10*gconst10;
IkReal x12510=r21*r21;
IkReal x12511=gconst11*gconst11;
IkReal x12512=r20*r20;
IkReal x12513=((1.0)*cj3);
IkReal x12514=(r20*sj3);
IkReal x12515=(gconst10*gconst11);
IkReal x12516=(cj2*sj1);
IkReal x12517=(gconst10*r21);
IkReal x12518=(cj1*sj2);
IkReal x12519=((1.0)*gconst11*r20);
CheckValue<IkReal> x12520 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12514))+((r22*x12518))+((r22*x12516)))),IkReal(((((-1.0)*x12518*x12519))+(((-1.0)*x12516*x12519))+((x12517*x12518))+(((-1.0)*r21*x12511*x12514))+((r21*x12509*x12514))+((sj3*x12510*x12515))+(((-1.0)*sj3*x12512*x12515))+((x12516*x12517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12520.valid){
continue;
}
CheckValue<IkReal> x12521=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12511*x12512*x12513))+(((2.0)*cj3*r20*r21*x12515))+(((-1.0)*x12509*x12510*x12513))+(((-1.0)*x12513*(r22*r22))))),-1);
if(!x12521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12520.value)+(((1.5707963267949)*(x12521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12522=IKsin(j4);
IkReal x12523=IKcos(j4);
IkReal x12524=(cj3*r10);
IkReal x12525=(gconst11*r20);
IkReal x12526=(gconst11*sj3);
IkReal x12527=(sj1*sj2);
IkReal x12528=(gconst11*r00);
IkReal x12529=(cj3*r11);
IkReal x12530=(gconst10*sj3);
IkReal x12531=(cj2*sj1);
IkReal x12532=(cj3*r01);
IkReal x12533=((1.0)*sj0);
IkReal x12534=(cj1*sj2);
IkReal x12535=(cj3*r21);
IkReal x12536=(cj3*gconst10);
IkReal x12537=((1.0)*cj0);
IkReal x12538=((1.0)*x12523);
IkReal x12539=((1.0)*x12522);
IkReal x12540=((1.0)*cj1*cj2);
IkReal x12541=(cj3*x12522);
IkReal x12542=(gconst10*x12522);
IkReal x12543=(gconst10*x12523);
evalcond[0]=((((-1.0)*x12525*x12539))+(((-1.0)*r22*x12538))+((r21*x12542)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12539))+((r11*x12542))+(((-1.0)*r12*x12538)));
evalcond[2]=((((-1.0)*x12528*x12539))+((r01*x12542))+(((-1.0)*r02*x12538))+(((-1.0)*x12533)));
evalcond[3]=(((r20*x12530))+((r21*x12526))+((x12535*x12543))+((r22*x12541))+(((-1.0)*cj3*x12525*x12538))+x12534+x12531);
evalcond[4]=(((sj3*x12523*x12525))+((r20*x12536))+(((-1.0)*r22*sj3*x12539))+(((-1.0)*r21*x12530*x12538))+x12527+((gconst11*x12535))+(((-1.0)*x12540)));
evalcond[5]=(((r00*x12530))+((cj0*x12527))+(((-1.0)*cj1*cj2*x12537))+((x12532*x12543))+((r02*x12541))+((r01*x12526))+(((-1.0)*cj3*x12528*x12538)));
evalcond[6]=(((sj0*x12527))+((r12*x12541))+(((-1.0)*cj1*cj2*x12533))+(((-1.0)*gconst11*x12524*x12538))+((x12529*x12543))+((r11*x12526))+((r10*x12530)));
evalcond[7]=(((r00*x12536))+(((-1.0)*r01*x12530*x12538))+(((-1.0)*x12534*x12537))+((r00*x12523*x12526))+(((-1.0)*x12531*x12537))+(((-1.0)*r02*sj3*x12539))+((gconst11*x12532)));
evalcond[8]=((((-1.0)*x12533*x12534))+((gconst11*x12529))+((gconst10*x12524))+(((-1.0)*r12*sj3*x12539))+(((-1.0)*r11*x12530*x12538))+(((-1.0)*x12531*x12533))+((r10*x12523*x12526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12544=((1.0)*sj0);
IkReal x12545=((1.0)*gconst10);
CheckValue<IkReal> x12546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12545))+(((-1.0)*gconst11*r21)))),-1);
if(!x12546.valid){
continue;
}
CheckValue<IkReal> x12547 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12544)))),IkReal(((((-1.0)*gconst10*r11*x12544))+(((-1.0)*cj0*r01*x12545))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12546.value)))+(x12547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12548=IKsin(j4);
IkReal x12549=IKcos(j4);
IkReal x12550=(cj3*r10);
IkReal x12551=(gconst11*r20);
IkReal x12552=(gconst11*sj3);
IkReal x12553=(sj1*sj2);
IkReal x12554=(gconst11*r00);
IkReal x12555=(cj3*r11);
IkReal x12556=(gconst10*sj3);
IkReal x12557=(cj2*sj1);
IkReal x12558=(cj3*r01);
IkReal x12559=((1.0)*sj0);
IkReal x12560=(cj1*sj2);
IkReal x12561=(cj3*r21);
IkReal x12562=(cj3*gconst10);
IkReal x12563=((1.0)*cj0);
IkReal x12564=((1.0)*x12549);
IkReal x12565=((1.0)*x12548);
IkReal x12566=((1.0)*cj1*cj2);
IkReal x12567=(cj3*x12548);
IkReal x12568=(gconst10*x12548);
IkReal x12569=(gconst10*x12549);
evalcond[0]=((((-1.0)*r22*x12564))+(((-1.0)*x12551*x12565))+((r21*x12568)));
evalcond[1]=(((r11*x12568))+(((-1.0)*gconst11*r10*x12565))+cj0+(((-1.0)*r12*x12564)));
evalcond[2]=((((-1.0)*r02*x12564))+((r01*x12568))+(((-1.0)*x12554*x12565))+(((-1.0)*x12559)));
evalcond[3]=(((r20*x12556))+((x12561*x12569))+((r22*x12567))+((r21*x12552))+x12557+x12560+(((-1.0)*cj3*x12551*x12564)));
evalcond[4]=(((gconst11*x12561))+((r20*x12562))+(((-1.0)*r22*sj3*x12565))+((sj3*x12549*x12551))+(((-1.0)*r21*x12556*x12564))+x12553+(((-1.0)*x12566)));
evalcond[5]=(((r01*x12552))+((r00*x12556))+((x12558*x12569))+((cj0*x12553))+(((-1.0)*cj1*cj2*x12563))+((r02*x12567))+(((-1.0)*cj3*x12554*x12564)));
evalcond[6]=(((r12*x12567))+((sj0*x12553))+((r10*x12556))+((r11*x12552))+(((-1.0)*cj1*cj2*x12559))+(((-1.0)*gconst11*x12550*x12564))+((x12555*x12569)));
evalcond[7]=((((-1.0)*x12560*x12563))+(((-1.0)*r02*sj3*x12565))+(((-1.0)*r01*x12556*x12564))+((r00*x12562))+(((-1.0)*x12557*x12563))+((gconst11*x12558))+((r00*x12549*x12552)));
evalcond[8]=(((gconst10*x12550))+(((-1.0)*r11*x12556*x12564))+((r10*x12549*x12552))+(((-1.0)*x12557*x12559))+(((-1.0)*x12559*x12560))+((gconst11*x12555))+(((-1.0)*r12*sj3*x12565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12570=((1.0)*gconst11);
CheckValue<IkReal> x12571 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12571.valid){
continue;
}
CheckValue<IkReal> x12572=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12570)))),-1);
if(!x12572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12571.value)+(((1.5707963267949)*(x12572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12573=IKsin(j4);
IkReal x12574=IKcos(j4);
IkReal x12575=(cj3*r10);
IkReal x12576=(gconst11*r20);
IkReal x12577=(gconst11*sj3);
IkReal x12578=(sj1*sj2);
IkReal x12579=(gconst11*r00);
IkReal x12580=(cj3*r11);
IkReal x12581=(gconst10*sj3);
IkReal x12582=(cj2*sj1);
IkReal x12583=(cj3*r01);
IkReal x12584=((1.0)*sj0);
IkReal x12585=(cj1*sj2);
IkReal x12586=(cj3*r21);
IkReal x12587=(cj3*gconst10);
IkReal x12588=((1.0)*cj0);
IkReal x12589=((1.0)*x12574);
IkReal x12590=((1.0)*x12573);
IkReal x12591=((1.0)*cj1*cj2);
IkReal x12592=(cj3*x12573);
IkReal x12593=(gconst10*x12573);
IkReal x12594=(gconst10*x12574);
evalcond[0]=((((-1.0)*x12576*x12590))+(((-1.0)*r22*x12589))+((r21*x12593)));
evalcond[1]=(cj0+(((-1.0)*r12*x12589))+(((-1.0)*gconst11*r10*x12590))+((r11*x12593)));
evalcond[2]=((((-1.0)*x12579*x12590))+((r01*x12593))+(((-1.0)*r02*x12589))+(((-1.0)*x12584)));
evalcond[3]=(((r20*x12581))+((r21*x12577))+((r22*x12592))+x12582+x12585+((x12586*x12594))+(((-1.0)*cj3*x12576*x12589)));
evalcond[4]=(((r20*x12587))+((gconst11*x12586))+((sj3*x12574*x12576))+(((-1.0)*r22*sj3*x12590))+(((-1.0)*r21*x12581*x12589))+(((-1.0)*x12591))+x12578);
evalcond[5]=(((cj0*x12578))+((r00*x12581))+((r02*x12592))+((r01*x12577))+(((-1.0)*cj1*cj2*x12588))+((x12583*x12594))+(((-1.0)*cj3*x12579*x12589)));
evalcond[6]=(((r12*x12592))+(((-1.0)*gconst11*x12575*x12589))+(((-1.0)*cj1*cj2*x12584))+((r11*x12577))+((x12580*x12594))+((r10*x12581))+((sj0*x12578)));
evalcond[7]=(((gconst11*x12583))+((r00*x12587))+(((-1.0)*x12582*x12588))+(((-1.0)*x12585*x12588))+(((-1.0)*r01*x12581*x12589))+(((-1.0)*r02*sj3*x12590))+((r00*x12574*x12577)));
evalcond[8]=(((gconst11*x12580))+(((-1.0)*x12582*x12584))+(((-1.0)*x12584*x12585))+((gconst10*x12575))+(((-1.0)*r11*x12581*x12589))+(((-1.0)*r12*sj3*x12590))+((r10*x12574*x12577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12595=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12595;
j4eval[1]=IKsign(x12595);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12596=((1.0)*cj5);
IkReal x12597=((((-1.0)*r01*x12596))+(((-1.0)*r00*sj5)));
j4eval[0]=x12597;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12596))))));
j4eval[2]=IKsign(x12597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12598=cj5*cj5;
IkReal x12599=(cj3*r21);
IkReal x12600=(cj5*sj5);
IkReal x12601=((1.0)*cj3);
IkReal x12602=(((r10*x12599*x12600))+(((-1.0)*r10*r20*x12598*x12601))+(((-1.0)*r11*x12599))+(((-1.0)*r12*r22*x12601))+((r11*x12598*x12599))+((cj3*r11*r20*x12600)));
j4eval[0]=x12602;
j4eval[1]=IKsign(x12602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12603=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12603;
j4eval[1]=IKsign(x12603);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12604=((1.0)*cj5);
IkReal x12605=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12604)));
j4eval[0]=x12605;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12604)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12606=cj5*cj5;
IkReal x12607=r11*r11;
IkReal x12608=(r11*sj5);
IkReal x12609=(cj5*r10);
IkReal x12610=((r12*r12)+((x12606*(r10*r10)))+(((-2.0)*x12608*x12609))+x12607+(((-1.0)*x12606*x12607)));
j4eval[0]=x12610;
j4eval[1]=IKsign(x12610);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12608))+x12609))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12611=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12611);
rxp1_1=(px*r21);
rxp1_2=(r11*x12611);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12612=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12612);
rxp1_1=(px*r21);
rxp1_2=(r11*x12612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12613=((1.0)*sj1);
CheckValue<IkReal> x12614=IKPowWithIntegerCheck(r02,-1);
if(!x12614.valid){
continue;
}
CheckValue<IkReal> x12615=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12615.valid){
continue;
}
if( IKabs(((x12614.value)*(((((-1.0)*cj2*x12613))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12615.value)*(((((-1.0)*sj2*x12613))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12614.value)*(((((-1.0)*cj2*x12613))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12615.value)*(((((-1.0)*sj2*x12613))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12614.value)*(((((-1.0)*cj2*x12613))+(((-1.0)*cj1*sj2))))), ((x12615.value)*(((((-1.0)*sj2*x12613))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12616=IKsin(j4);
IkReal x12617=IKcos(j4);
IkReal x12618=(cj5*r20);
IkReal x12619=((1.0)*cj2);
IkReal x12620=(cj5*r10);
IkReal x12621=((1.0)*x12616);
IkReal x12622=(sj5*x12616);
IkReal x12623=((1.0)*sj5*x12617);
evalcond[0]=((-1.0)*r02*x12617);
evalcond[1]=(((r21*x12622))+(((-1.0)*x12618*x12621)));
evalcond[2]=((((-1.0)*r11*x12623))+((x12617*x12620)));
evalcond[3]=((1.0)+(((-1.0)*x12620*x12621))+((r11*x12622)));
evalcond[4]=((((-1.0)*r02*x12621))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12619)));
evalcond[5]=((((-1.0)*cj1*x12619))+(((-1.0)*r21*x12623))+((x12617*x12618))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12624=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12624.valid){
continue;
}
CheckValue<IkReal> x12625=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12625.valid){
continue;
}
if( IKabs(((-1.0)*(x12624.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12625.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12624.value)))+IKsqr(((x12625.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12624.value)), ((x12625.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12626=IKsin(j4);
IkReal x12627=IKcos(j4);
IkReal x12628=(cj5*r20);
IkReal x12629=((1.0)*cj2);
IkReal x12630=(cj5*r10);
IkReal x12631=((1.0)*x12626);
IkReal x12632=(sj5*x12626);
IkReal x12633=((1.0)*sj5*x12627);
evalcond[0]=((-1.0)*r02*x12627);
evalcond[1]=((((-1.0)*x12628*x12631))+((r21*x12632)));
evalcond[2]=(((x12627*x12630))+(((-1.0)*r11*x12633)));
evalcond[3]=((1.0)+((r11*x12632))+(((-1.0)*x12630*x12631)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12629))+(((-1.0)*r02*x12631)));
evalcond[5]=((((-1.0)*r21*x12633))+((sj1*sj2))+((x12627*x12628))+(((-1.0)*cj1*x12629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12634=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12634);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12634);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12635=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12635);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12635);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12636=IKPowWithIntegerCheck(r22,-1);
if(!x12636.valid){
continue;
}
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12637.valid){
continue;
}
if( IKabs(((x12636.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12637.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12636.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12637.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12636.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12637.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12638=IKsin(j4);
IkReal x12639=IKcos(j4);
IkReal x12640=((1.0)*cj2);
IkReal x12641=(cj5*x12639);
IkReal x12642=(sj5*x12638);
IkReal x12643=((1.0)*sj5*x12639);
IkReal x12644=((1.0)*cj5*x12638);
evalcond[0]=((-1.0)*r22*x12639);
evalcond[1]=(((r01*x12642))+(((-1.0)*r00*x12644)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12638))+(((-1.0)*cj1*x12640)));
evalcond[3]=(((r10*x12641))+(((-1.0)*r11*x12643)));
evalcond[4]=((1.0)+((r11*x12642))+(((-1.0)*r10*x12644)));
evalcond[5]=((((-1.0)*sj1*x12640))+(((-1.0)*cj1*sj2))+((r00*x12641))+(((-1.0)*r01*x12643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12645=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12645.valid){
continue;
}
CheckValue<IkReal> x12646=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12646.valid){
continue;
}
if( IKabs(((-1.0)*(x12645.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12646.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12645.value)))+IKsqr(((x12646.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12645.value)), ((x12646.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12647=IKsin(j4);
IkReal x12648=IKcos(j4);
IkReal x12649=((1.0)*cj2);
IkReal x12650=(cj5*x12648);
IkReal x12651=(sj5*x12647);
IkReal x12652=((1.0)*sj5*x12648);
IkReal x12653=((1.0)*cj5*x12647);
evalcond[0]=((-1.0)*r22*x12648);
evalcond[1]=((((-1.0)*r00*x12653))+((r01*x12651)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12647))+(((-1.0)*cj1*x12649)));
evalcond[3]=(((r10*x12650))+(((-1.0)*r11*x12652)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12653))+((r11*x12651)));
evalcond[5]=((((-1.0)*sj1*x12649))+(((-1.0)*cj1*sj2))+(((-1.0)*r01*x12652))+((r00*x12650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12654=cj5*cj5;
IkReal x12655=r11*r11;
IkReal x12656=(cj5*r10);
IkReal x12657=(r11*sj5);
CheckValue<IkReal> x12658 = IKatan2WithCheck(IkReal((x12656+(((-1.0)*x12657)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12658.valid){
continue;
}
CheckValue<IkReal> x12659=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12656*x12657))+(r12*r12)+(((-1.0)*x12654*x12655))+x12655+((x12654*(r10*r10))))),-1);
if(!x12659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12658.value)+(((1.5707963267949)*(x12659.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12660=IKsin(j4);
IkReal x12661=IKcos(j4);
IkReal x12662=(cj5*r10);
IkReal x12663=(r01*sj5);
IkReal x12664=((1.0)*cj2);
IkReal x12665=(cj5*r00);
IkReal x12666=(cj5*r20);
IkReal x12667=((1.0)*x12661);
IkReal x12668=((1.0)*x12660);
IkReal x12669=(sj5*x12660);
evalcond[0]=((((-1.0)*r22*x12667))+((r21*x12669))+(((-1.0)*x12666*x12668)));
evalcond[1]=((((-1.0)*x12665*x12668))+(((-1.0)*r02*x12667))+((x12660*x12663)));
evalcond[2]=(((x12661*x12662))+(((-1.0)*r12*x12668))+(((-1.0)*r11*sj5*x12667)));
evalcond[3]=((1.0)+(((-1.0)*x12662*x12668))+((r11*x12669))+(((-1.0)*r12*x12667)));
evalcond[4]=((((-1.0)*r22*x12668))+(((-1.0)*cj1*x12664))+(((-1.0)*r21*sj5*x12667))+((sj1*sj2))+((x12661*x12666)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12668))+((x12661*x12665))+(((-1.0)*x12663*x12667))+(((-1.0)*sj1*x12664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12670=((1.0)*cj5);
CheckValue<IkReal> x12671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12670)))),-1);
if(!x12671.valid){
continue;
}
CheckValue<IkReal> x12672 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12671.value)))+(x12672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12673=IKsin(j4);
IkReal x12674=IKcos(j4);
IkReal x12675=(cj5*r10);
IkReal x12676=(r01*sj5);
IkReal x12677=((1.0)*cj2);
IkReal x12678=(cj5*r00);
IkReal x12679=(cj5*r20);
IkReal x12680=((1.0)*x12674);
IkReal x12681=((1.0)*x12673);
IkReal x12682=(sj5*x12673);
evalcond[0]=(((r21*x12682))+(((-1.0)*x12679*x12681))+(((-1.0)*r22*x12680)));
evalcond[1]=((((-1.0)*r02*x12680))+((x12673*x12676))+(((-1.0)*x12678*x12681)));
evalcond[2]=((((-1.0)*r12*x12681))+((x12674*x12675))+(((-1.0)*r11*sj5*x12680)));
evalcond[3]=((1.0)+(((-1.0)*x12675*x12681))+((r11*x12682))+(((-1.0)*r12*x12680)));
evalcond[4]=((((-1.0)*cj1*x12677))+(((-1.0)*r21*sj5*x12680))+((sj1*sj2))+((x12674*x12679))+(((-1.0)*r22*x12681)));
evalcond[5]=((((-1.0)*x12676*x12680))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12681))+((x12674*x12678))+(((-1.0)*sj1*x12677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12683=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12683.valid){
continue;
}
CheckValue<IkReal> x12684 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12683.value)))+(x12684.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12685=IKsin(j4);
IkReal x12686=IKcos(j4);
IkReal x12687=(cj5*r10);
IkReal x12688=(r01*sj5);
IkReal x12689=((1.0)*cj2);
IkReal x12690=(cj5*r00);
IkReal x12691=(cj5*r20);
IkReal x12692=((1.0)*x12686);
IkReal x12693=((1.0)*x12685);
IkReal x12694=(sj5*x12685);
evalcond[0]=((((-1.0)*r22*x12692))+((r21*x12694))+(((-1.0)*x12691*x12693)));
evalcond[1]=((((-1.0)*r02*x12692))+((x12685*x12688))+(((-1.0)*x12690*x12693)));
evalcond[2]=((((-1.0)*r12*x12693))+(((-1.0)*r11*sj5*x12692))+((x12686*x12687)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12692))+(((-1.0)*x12687*x12693))+((r11*x12694)));
evalcond[4]=((((-1.0)*r22*x12693))+(((-1.0)*cj1*x12689))+((sj1*sj2))+(((-1.0)*r21*sj5*x12692))+((x12686*x12691)));
evalcond[5]=((((-1.0)*sj1*x12689))+(((-1.0)*r02*x12693))+(((-1.0)*cj1*sj2))+(((-1.0)*x12688*x12692))+((x12686*x12690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12695=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12695;
j4eval[1]=IKsign(x12695);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12696=((1.0)*cj5);
IkReal x12697=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12696)));
j4eval[0]=x12697;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12696))))));
j4eval[2]=IKsign(x12697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12698=(sj1*sj2);
IkReal x12699=(cj5*r10);
IkReal x12700=(r11*sj5);
IkReal x12701=(cj1*cj2);
IkReal x12702=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12702;
j4eval[1]=((IKabs((((r12*x12701))+(((-1.0)*r12*x12698)))))+(IKabs((((x12699*x12701))+((x12698*x12700))+(((-1.0)*x12700*x12701))+(((-1.0)*x12698*x12699))))));
j4eval[2]=IKsign(x12702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12703=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12703);
rxp1_1=(px*r21);
rxp1_2=(r11*x12703);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12704=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12704);
rxp1_1=(px*r21);
rxp1_2=(r11*x12704);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12705=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12705))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12705)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12706=((1.0)*cj5);
CheckValue<IkReal> x12707=IKPowWithIntegerCheck(((((-1.0)*r10*x12706))+((r11*sj5))),-1);
if(!x12707.valid){
continue;
}
CheckValue<IkReal> x12708=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12706))),-1);
if(!x12708.valid){
continue;
}
if( IKabs(((-1.0)*(x12707.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12707.value)))+IKsqr(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12707.value)), ((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12709=IKsin(j4);
IkReal x12710=IKcos(j4);
IkReal x12711=((1.0)*cj2);
IkReal x12712=(r21*sj5);
IkReal x12713=(r11*sj5);
IkReal x12714=((1.0)*cj5*x12709);
IkReal x12715=((1.0)*cj5*x12710);
evalcond[0]=((-1.0)*r02*x12710);
evalcond[1]=(((x12709*x12712))+(((-1.0)*r20*x12714)));
evalcond[2]=((((-1.0)*sj1*x12711))+((r02*x12709))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12715))+((x12710*x12713)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12714))+((x12709*x12713)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12715))+((x12710*x12712))+(((-1.0)*cj1*x12711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12716=IKPowWithIntegerCheck(r02,-1);
if(!x12716.valid){
continue;
}
CheckValue<IkReal> x12717=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12717.valid){
continue;
}
if( IKabs(((x12716.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12717.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12716.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12717.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12716.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12717.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12718=IKsin(j4);
IkReal x12719=IKcos(j4);
IkReal x12720=((1.0)*cj2);
IkReal x12721=(r21*sj5);
IkReal x12722=(r11*sj5);
IkReal x12723=((1.0)*cj5*x12718);
IkReal x12724=((1.0)*cj5*x12719);
evalcond[0]=((-1.0)*r02*x12719);
evalcond[1]=(((x12718*x12721))+(((-1.0)*r20*x12723)));
evalcond[2]=((((-1.0)*sj1*x12720))+((r02*x12718))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12724))+((x12719*x12722)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12723))+((x12718*x12722)));
evalcond[5]=(((sj1*sj2))+((x12719*x12721))+(((-1.0)*r20*x12724))+(((-1.0)*cj1*x12720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12725=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12725;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12726=((1.0)*cj5);
IkReal x12727=((((-1.0)*r21*x12726))+(((-1.0)*r20*sj5)));
j4eval[0]=x12727;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12726))+((r11*sj5))))));
j4eval[2]=IKsign(x12727);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12728=cj5*cj5;
IkReal x12729=(r11*r21);
IkReal x12730=((1.0)*r20);
IkReal x12731=(cj5*sj5);
IkReal x12732=((((-1.0)*x12729))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12728*x12730))+((r11*r20*x12731))+((x12728*x12729))+((r10*r21*x12731)));
j4eval[0]=x12732;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12730))))));
j4eval[2]=IKsign(x12732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12733=cj5*cj5;
IkReal x12734=(r21*sj5);
IkReal x12735=(r11*r21);
IkReal x12736=((1.0)*r20);
CheckValue<IkReal> x12737 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12736))+x12734)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12737.valid){
continue;
}
CheckValue<IkReal> x12738=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12735))+(((-1.0)*r12*r22))+((x12733*x12735))+((cj5*r10*x12734))+(((-1.0)*r10*x12733*x12736))+((cj5*r11*r20*sj5)))),-1);
if(!x12738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12737.value)+(((1.5707963267949)*(x12738.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12739=IKcos(j4);
IkReal x12740=IKsin(j4);
IkReal x12741=(cj5*r00);
IkReal x12742=(cj5*r20);
IkReal x12743=(cj5*r10);
IkReal x12744=((1.0)*x12739);
IkReal x12745=((1.0)*x12740);
IkReal x12746=(sj5*x12739);
IkReal x12747=(sj5*x12740);
evalcond[0]=(((r22*x12740))+(((-1.0)*x12742*x12744))+((r21*x12746)));
evalcond[1]=(((r11*x12746))+(((-1.0)*x12743*x12744))+((r12*x12740)));
evalcond[2]=((((-1.0)*r22*x12744))+(((-1.0)*x12742*x12745))+((r21*x12747)));
evalcond[3]=((((-1.0)*x12741*x12745))+(((-1.0)*r02*x12744))+((r01*x12747)));
evalcond[4]=((-1.0)+(((-1.0)*x12741*x12744))+((r02*x12740))+((r01*x12746)));
evalcond[5]=((1.0)+((r11*x12747))+(((-1.0)*r12*x12744))+(((-1.0)*x12743*x12745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12748=((1.0)*cj5);
CheckValue<IkReal> x12749 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12748)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12749.valid){
continue;
}
CheckValue<IkReal> x12750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12748))+(((-1.0)*r20*sj5)))),-1);
if(!x12750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12749.value)+(((1.5707963267949)*(x12750.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12751=IKcos(j4);
IkReal x12752=IKsin(j4);
IkReal x12753=(cj5*r00);
IkReal x12754=(cj5*r20);
IkReal x12755=(cj5*r10);
IkReal x12756=((1.0)*x12751);
IkReal x12757=((1.0)*x12752);
IkReal x12758=(sj5*x12751);
IkReal x12759=(sj5*x12752);
evalcond[0]=(((r22*x12752))+(((-1.0)*x12754*x12756))+((r21*x12758)));
evalcond[1]=(((r11*x12758))+(((-1.0)*x12755*x12756))+((r12*x12752)));
evalcond[2]=((((-1.0)*r22*x12756))+(((-1.0)*x12754*x12757))+((r21*x12759)));
evalcond[3]=((((-1.0)*r02*x12756))+(((-1.0)*x12753*x12757))+((r01*x12759)));
evalcond[4]=((-1.0)+(((-1.0)*x12753*x12756))+((r02*x12752))+((r01*x12758)));
evalcond[5]=((1.0)+((r11*x12759))+(((-1.0)*r12*x12756))+(((-1.0)*x12755*x12757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12760 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12760.valid){
continue;
}
CheckValue<IkReal> x12761=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12760.value)+(((1.5707963267949)*(x12761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12762=IKcos(j4);
IkReal x12763=IKsin(j4);
IkReal x12764=(cj5*r00);
IkReal x12765=(cj5*r20);
IkReal x12766=(cj5*r10);
IkReal x12767=((1.0)*x12762);
IkReal x12768=((1.0)*x12763);
IkReal x12769=(sj5*x12762);
IkReal x12770=(sj5*x12763);
evalcond[0]=(((r21*x12769))+((r22*x12763))+(((-1.0)*x12765*x12767)));
evalcond[1]=((((-1.0)*x12766*x12767))+((r12*x12763))+((r11*x12769)));
evalcond[2]=((((-1.0)*r22*x12767))+((r21*x12770))+(((-1.0)*x12765*x12768)));
evalcond[3]=(((r01*x12770))+(((-1.0)*r02*x12767))+(((-1.0)*x12764*x12768)));
evalcond[4]=((-1.0)+((r02*x12763))+(((-1.0)*x12764*x12767))+((r01*x12769)));
evalcond[5]=((1.0)+(((-1.0)*x12766*x12768))+(((-1.0)*r12*x12767))+((r11*x12770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12771=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12771;
j4eval[1]=IKsign(x12771);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12772=((1.0)*cj5);
IkReal x12773=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12772)));
j4eval[0]=x12773;
j4eval[1]=((IKabs(((((-1.0)*r20*x12772))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12774=cj5*cj5;
IkReal x12775=(r11*r21);
IkReal x12776=((1.0)*r20);
IkReal x12777=(cj5*sj5);
IkReal x12778=(((r11*r20*x12777))+(((-1.0)*r12*r22))+((r10*r21*x12777))+(((-1.0)*x12775))+((x12774*x12775))+(((-1.0)*r10*x12774*x12776)));
j4eval[0]=x12778;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12776))+((r21*sj5))))));
j4eval[2]=IKsign(x12778);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12779=cj5*cj5;
IkReal x12780=(r21*sj5);
IkReal x12781=(r11*r21);
IkReal x12782=((1.0)*r20);
CheckValue<IkReal> x12783=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12780))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12779*x12782))+(((-1.0)*x12781))+((x12779*x12781))+((cj5*r11*r20*sj5)))),-1);
if(!x12783.valid){
continue;
}
CheckValue<IkReal> x12784 = IKatan2WithCheck(IkReal((x12780+(((-1.0)*cj5*x12782)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12783.value)))+(x12784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12785=IKcos(j4);
IkReal x12786=IKsin(j4);
IkReal x12787=(cj5*r00);
IkReal x12788=(cj5*r20);
IkReal x12789=(cj5*r10);
IkReal x12790=((1.0)*x12785);
IkReal x12791=((1.0)*x12786);
IkReal x12792=(sj5*x12785);
IkReal x12793=(sj5*x12786);
evalcond[0]=(((r22*x12786))+((r21*x12792))+(((-1.0)*x12788*x12790)));
evalcond[1]=(((r11*x12792))+((r12*x12786))+(((-1.0)*x12789*x12790)));
evalcond[2]=((((-1.0)*r22*x12790))+((r21*x12793))+(((-1.0)*x12788*x12791)));
evalcond[3]=((((-1.0)*r02*x12790))+((r01*x12793))+(((-1.0)*x12787*x12791)));
evalcond[4]=((1.0)+((r01*x12792))+((r02*x12786))+(((-1.0)*x12787*x12790)));
evalcond[5]=((1.0)+((r11*x12793))+(((-1.0)*r12*x12790))+(((-1.0)*x12789*x12791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12794=((1.0)*cj5);
CheckValue<IkReal> x12795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12794)))),-1);
if(!x12795.valid){
continue;
}
CheckValue<IkReal> x12796 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12794))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12796.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12795.value)))+(x12796.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12797=IKcos(j4);
IkReal x12798=IKsin(j4);
IkReal x12799=(cj5*r00);
IkReal x12800=(cj5*r20);
IkReal x12801=(cj5*r10);
IkReal x12802=((1.0)*x12797);
IkReal x12803=((1.0)*x12798);
IkReal x12804=(sj5*x12797);
IkReal x12805=(sj5*x12798);
evalcond[0]=((((-1.0)*x12800*x12802))+((r21*x12804))+((r22*x12798)));
evalcond[1]=(((r11*x12804))+((r12*x12798))+(((-1.0)*x12801*x12802)));
evalcond[2]=((((-1.0)*x12800*x12803))+((r21*x12805))+(((-1.0)*r22*x12802)));
evalcond[3]=((((-1.0)*x12799*x12803))+(((-1.0)*r02*x12802))+((r01*x12805)));
evalcond[4]=((1.0)+((r02*x12798))+(((-1.0)*x12799*x12802))+((r01*x12804)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12802))+((r11*x12805))+(((-1.0)*x12801*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12806=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12806.valid){
continue;
}
CheckValue<IkReal> x12807 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12806.value)))+(x12807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12808=IKcos(j4);
IkReal x12809=IKsin(j4);
IkReal x12810=(cj5*r00);
IkReal x12811=(cj5*r20);
IkReal x12812=(cj5*r10);
IkReal x12813=((1.0)*x12808);
IkReal x12814=((1.0)*x12809);
IkReal x12815=(sj5*x12808);
IkReal x12816=(sj5*x12809);
evalcond[0]=((((-1.0)*x12811*x12813))+((r21*x12815))+((r22*x12809)));
evalcond[1]=((((-1.0)*x12812*x12813))+((r12*x12809))+((r11*x12815)));
evalcond[2]=((((-1.0)*x12811*x12814))+((r21*x12816))+(((-1.0)*r22*x12813)));
evalcond[3]=((((-1.0)*r02*x12813))+(((-1.0)*x12810*x12814))+((r01*x12816)));
evalcond[4]=((1.0)+((r02*x12809))+(((-1.0)*x12810*x12813))+((r01*x12815)));
evalcond[5]=((1.0)+(((-1.0)*x12812*x12814))+(((-1.0)*r12*x12813))+((r11*x12816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12817=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12817;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12818=((1.0)*cj5);
IkReal x12819=((((-1.0)*r21*x12818))+(((-1.0)*r20*sj5)));
j4eval[0]=x12819;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12818))+((r11*sj5))))));
j4eval[2]=IKsign(x12819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12820=cj5*cj5;
IkReal x12821=(r11*r21);
IkReal x12822=((1.0)*r20);
IkReal x12823=(cj5*sj5);
IkReal x12824=((((-1.0)*r12*r22))+((r11*r20*x12823))+(((-1.0)*x12821))+((x12820*x12821))+((r10*r21*x12823))+(((-1.0)*r10*x12820*x12822)));
j4eval[0]=x12824;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12822))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12825=cj5*cj5;
IkReal x12826=(r21*sj5);
IkReal x12827=(r11*r21);
IkReal x12828=((1.0)*r20);
CheckValue<IkReal> x12829 = IKatan2WithCheck(IkReal((x12826+(((-1.0)*cj5*x12828)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12829.valid){
continue;
}
CheckValue<IkReal> x12830=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12826))+(((-1.0)*r10*x12825*x12828))+(((-1.0)*r12*r22))+(((-1.0)*x12827))+((x12825*x12827))+((cj5*r11*r20*sj5)))),-1);
if(!x12830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12829.value)+(((1.5707963267949)*(x12830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12831=IKcos(j4);
IkReal x12832=IKsin(j4);
IkReal x12833=(cj5*r00);
IkReal x12834=(cj5*r20);
IkReal x12835=(cj5*r10);
IkReal x12836=((1.0)*x12831);
IkReal x12837=((1.0)*x12832);
IkReal x12838=(sj5*x12831);
IkReal x12839=(sj5*x12832);
evalcond[0]=(((r21*x12838))+((r22*x12832))+(((-1.0)*x12834*x12836)));
evalcond[1]=(((r12*x12832))+((r11*x12838))+(((-1.0)*x12835*x12836)));
evalcond[2]=(((r21*x12839))+(((-1.0)*r22*x12836))+(((-1.0)*x12834*x12837)));
evalcond[3]=((((-1.0)*x12833*x12837))+(((-1.0)*r02*x12836))+((r01*x12839)));
evalcond[4]=((-1.0)+(((-1.0)*x12833*x12836))+((r02*x12832))+((r01*x12838)));
evalcond[5]=((1.0)+((r11*x12839))+(((-1.0)*x12835*x12837))+(((-1.0)*r12*x12836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12840=((1.0)*cj5);
CheckValue<IkReal> x12841 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12840)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12841.valid){
continue;
}
CheckValue<IkReal> x12842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12840))+(((-1.0)*r20*sj5)))),-1);
if(!x12842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12841.value)+(((1.5707963267949)*(x12842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12843=IKcos(j4);
IkReal x12844=IKsin(j4);
IkReal x12845=(cj5*r00);
IkReal x12846=(cj5*r20);
IkReal x12847=(cj5*r10);
IkReal x12848=((1.0)*x12843);
IkReal x12849=((1.0)*x12844);
IkReal x12850=(sj5*x12843);
IkReal x12851=(sj5*x12844);
evalcond[0]=(((r22*x12844))+((r21*x12850))+(((-1.0)*x12846*x12848)));
evalcond[1]=(((r11*x12850))+((r12*x12844))+(((-1.0)*x12847*x12848)));
evalcond[2]=((((-1.0)*r22*x12848))+((r21*x12851))+(((-1.0)*x12846*x12849)));
evalcond[3]=((((-1.0)*r02*x12848))+((r01*x12851))+(((-1.0)*x12845*x12849)));
evalcond[4]=((-1.0)+((r01*x12850))+(((-1.0)*x12845*x12848))+((r02*x12844)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12848))+((r11*x12851))+(((-1.0)*x12847*x12849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12852 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12852.valid){
continue;
}
CheckValue<IkReal> x12853=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12852.value)+(((1.5707963267949)*(x12853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12854=IKcos(j4);
IkReal x12855=IKsin(j4);
IkReal x12856=(cj5*r00);
IkReal x12857=(cj5*r20);
IkReal x12858=(cj5*r10);
IkReal x12859=((1.0)*x12854);
IkReal x12860=((1.0)*x12855);
IkReal x12861=(sj5*x12854);
IkReal x12862=(sj5*x12855);
evalcond[0]=(((r21*x12861))+((r22*x12855))+(((-1.0)*x12857*x12859)));
evalcond[1]=(((r11*x12861))+(((-1.0)*x12858*x12859))+((r12*x12855)));
evalcond[2]=((((-1.0)*r22*x12859))+((r21*x12862))+(((-1.0)*x12857*x12860)));
evalcond[3]=((((-1.0)*r02*x12859))+((r01*x12862))+(((-1.0)*x12856*x12860)));
evalcond[4]=((-1.0)+(((-1.0)*x12856*x12859))+((r02*x12855))+((r01*x12861)));
evalcond[5]=((1.0)+((r11*x12862))+(((-1.0)*r12*x12859))+(((-1.0)*x12858*x12860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12863=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12863;
j4eval[1]=IKsign(x12863);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12864=((1.0)*cj5);
IkReal x12865=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12864)));
j4eval[0]=x12865;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12864))))));
j4eval[2]=IKsign(x12865);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12866=cj5*cj5;
IkReal x12867=(r11*r21);
IkReal x12868=((1.0)*r20);
IkReal x12869=(cj5*sj5);
IkReal x12870=((((-1.0)*x12867))+(((-1.0)*r10*x12866*x12868))+((r10*r21*x12869))+(((-1.0)*r12*r22))+((x12866*x12867))+((r11*r20*x12869)));
j4eval[0]=x12870;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12868))))));
j4eval[2]=IKsign(x12870);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12871=cj5*cj5;
IkReal x12872=(r21*sj5);
IkReal x12873=(r11*r21);
IkReal x12874=((1.0)*r20);
CheckValue<IkReal> x12875 = IKatan2WithCheck(IkReal((x12872+(((-1.0)*cj5*x12874)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12875.valid){
continue;
}
CheckValue<IkReal> x12876=IKPowWithIntegerCheck(IKsign((((x12871*x12873))+(((-1.0)*r12*r22))+(((-1.0)*x12873))+((cj5*r10*x12872))+(((-1.0)*r10*x12871*x12874))+((cj5*r11*r20*sj5)))),-1);
if(!x12876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12875.value)+(((1.5707963267949)*(x12876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12877=IKcos(j4);
IkReal x12878=IKsin(j4);
IkReal x12879=(cj5*r00);
IkReal x12880=(cj5*r20);
IkReal x12881=(cj5*r10);
IkReal x12882=((1.0)*x12877);
IkReal x12883=((1.0)*x12878);
IkReal x12884=(sj5*x12877);
IkReal x12885=(sj5*x12878);
evalcond[0]=(((r22*x12878))+(((-1.0)*x12880*x12882))+((r21*x12884)));
evalcond[1]=((((-1.0)*x12881*x12882))+((r12*x12878))+((r11*x12884)));
evalcond[2]=((((-1.0)*r22*x12882))+(((-1.0)*x12880*x12883))+((r21*x12885)));
evalcond[3]=((((-1.0)*r02*x12882))+(((-1.0)*x12879*x12883))+((r01*x12885)));
evalcond[4]=((1.0)+(((-1.0)*x12879*x12882))+((r01*x12884))+((r02*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12882))+(((-1.0)*x12881*x12883))+((r11*x12885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12886=((1.0)*cj5);
CheckValue<IkReal> x12887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12886)))),-1);
if(!x12887.valid){
continue;
}
CheckValue<IkReal> x12888 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12886))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12887.value)))+(x12888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12889=IKcos(j4);
IkReal x12890=IKsin(j4);
IkReal x12891=(cj5*r00);
IkReal x12892=(cj5*r20);
IkReal x12893=(cj5*r10);
IkReal x12894=((1.0)*x12889);
IkReal x12895=((1.0)*x12890);
IkReal x12896=(sj5*x12889);
IkReal x12897=(sj5*x12890);
evalcond[0]=((((-1.0)*x12892*x12894))+((r21*x12896))+((r22*x12890)));
evalcond[1]=((((-1.0)*x12893*x12894))+((r12*x12890))+((r11*x12896)));
evalcond[2]=((((-1.0)*x12892*x12895))+(((-1.0)*r22*x12894))+((r21*x12897)));
evalcond[3]=((((-1.0)*x12891*x12895))+((r01*x12897))+(((-1.0)*r02*x12894)));
evalcond[4]=((1.0)+(((-1.0)*x12891*x12894))+((r01*x12896))+((r02*x12890)));
evalcond[5]=((1.0)+(((-1.0)*x12893*x12895))+((r11*x12897))+(((-1.0)*r12*x12894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12898=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12898.valid){
continue;
}
CheckValue<IkReal> x12899 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12898.value)))+(x12899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12900=IKcos(j4);
IkReal x12901=IKsin(j4);
IkReal x12902=(cj5*r00);
IkReal x12903=(cj5*r20);
IkReal x12904=(cj5*r10);
IkReal x12905=((1.0)*x12900);
IkReal x12906=((1.0)*x12901);
IkReal x12907=(sj5*x12900);
IkReal x12908=(sj5*x12901);
evalcond[0]=((((-1.0)*x12903*x12905))+((r21*x12907))+((r22*x12901)));
evalcond[1]=(((r12*x12901))+((r11*x12907))+(((-1.0)*x12904*x12905)));
evalcond[2]=((((-1.0)*x12903*x12906))+((r21*x12908))+(((-1.0)*r22*x12905)));
evalcond[3]=(((r01*x12908))+(((-1.0)*x12902*x12906))+(((-1.0)*r02*x12905)));
evalcond[4]=((1.0)+((r01*x12907))+(((-1.0)*x12902*x12905))+((r02*x12901)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12905))+((r11*x12908))+(((-1.0)*x12904*x12906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12909=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12909;
j4eval[1]=IKsign(x12909);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12910=((1.0)*cj5);
IkReal x12911=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12910)));
j4eval[0]=x12911;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12910)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12912=cj5*cj5;
IkReal x12913=(r11*r21);
IkReal x12914=((1.0)*r20);
IkReal x12915=(cj5*sj5);
IkReal x12916=(((r11*r20*x12915))+(((-1.0)*r12*r22))+(((-1.0)*x12913))+((x12912*x12913))+((r10*r21*x12915))+(((-1.0)*r10*x12912*x12914)));
j4eval[0]=x12916;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12914))))));
j4eval[2]=IKsign(x12916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12917=cj5*cj5;
IkReal x12918=(r21*sj5);
IkReal x12919=(r11*r21);
IkReal x12920=((1.0)*r20);
CheckValue<IkReal> x12921 = IKatan2WithCheck(IkReal((x12918+(((-1.0)*cj5*x12920)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12921.valid){
continue;
}
CheckValue<IkReal> x12922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12917*x12919))+(((-1.0)*x12919))+(((-1.0)*r10*x12917*x12920))+((cj5*r11*r20*sj5))+((cj5*r10*x12918)))),-1);
if(!x12922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12921.value)+(((1.5707963267949)*(x12922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12923=IKcos(j4);
IkReal x12924=IKsin(j4);
IkReal x12925=(cj5*r00);
IkReal x12926=(cj5*r20);
IkReal x12927=(cj5*r10);
IkReal x12928=((1.0)*x12923);
IkReal x12929=((1.0)*x12924);
IkReal x12930=(sj5*x12923);
IkReal x12931=(sj5*x12924);
evalcond[0]=((((-1.0)*x12926*x12928))+((r22*x12924))+((r21*x12930)));
evalcond[1]=(((r11*x12930))+(((-1.0)*x12927*x12928))+((r12*x12924)));
evalcond[2]=((((-1.0)*x12926*x12929))+((r21*x12931))+(((-1.0)*r22*x12928)));
evalcond[3]=((((-1.0)*r02*x12928))+(((-1.0)*x12925*x12929))+((r01*x12931)));
evalcond[4]=((1.0)+(((-1.0)*x12925*x12928))+((r02*x12924))+((r01*x12930)));
evalcond[5]=((1.0)+((r11*x12931))+(((-1.0)*x12927*x12929))+(((-1.0)*r12*x12928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12932=((1.0)*cj5);
CheckValue<IkReal> x12933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12932)))),-1);
if(!x12933.valid){
continue;
}
CheckValue<IkReal> x12934 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12932))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12933.value)))+(x12934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12935=IKcos(j4);
IkReal x12936=IKsin(j4);
IkReal x12937=(cj5*r00);
IkReal x12938=(cj5*r20);
IkReal x12939=(cj5*r10);
IkReal x12940=((1.0)*x12935);
IkReal x12941=((1.0)*x12936);
IkReal x12942=(sj5*x12935);
IkReal x12943=(sj5*x12936);
evalcond[0]=(((r21*x12942))+((r22*x12936))+(((-1.0)*x12938*x12940)));
evalcond[1]=((((-1.0)*x12939*x12940))+((r12*x12936))+((r11*x12942)));
evalcond[2]=(((r21*x12943))+(((-1.0)*r22*x12940))+(((-1.0)*x12938*x12941)));
evalcond[3]=((((-1.0)*x12937*x12941))+((r01*x12943))+(((-1.0)*r02*x12940)));
evalcond[4]=((1.0)+(((-1.0)*x12937*x12940))+((r02*x12936))+((r01*x12942)));
evalcond[5]=((1.0)+(((-1.0)*x12939*x12941))+((r11*x12943))+(((-1.0)*r12*x12940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12944=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12944.valid){
continue;
}
CheckValue<IkReal> x12945 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12944.value)))+(x12945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12946=IKcos(j4);
IkReal x12947=IKsin(j4);
IkReal x12948=(cj5*r00);
IkReal x12949=(cj5*r20);
IkReal x12950=(cj5*r10);
IkReal x12951=((1.0)*x12946);
IkReal x12952=((1.0)*x12947);
IkReal x12953=(sj5*x12946);
IkReal x12954=(sj5*x12947);
evalcond[0]=(((r22*x12947))+((r21*x12953))+(((-1.0)*x12949*x12951)));
evalcond[1]=(((r12*x12947))+(((-1.0)*x12950*x12951))+((r11*x12953)));
evalcond[2]=(((r21*x12954))+(((-1.0)*r22*x12951))+(((-1.0)*x12949*x12952)));
evalcond[3]=((((-1.0)*x12948*x12952))+((r01*x12954))+(((-1.0)*r02*x12951)));
evalcond[4]=((1.0)+(((-1.0)*x12948*x12951))+((r01*x12953))+((r02*x12947)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12951))+(((-1.0)*x12950*x12952))+((r11*x12954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12955=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12955;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12955);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12956=((1.0)*cj5);
IkReal x12957=((((-1.0)*r21*x12956))+(((-1.0)*r20*sj5)));
j4eval[0]=x12957;
j4eval[1]=((IKabs(((((-1.0)*r10*x12956))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12957);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12958=cj5*cj5;
IkReal x12959=(r11*r21);
IkReal x12960=((1.0)*r20);
IkReal x12961=(cj5*sj5);
IkReal x12962=(((r11*r20*x12961))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12958*x12960))+((r10*r21*x12961))+(((-1.0)*x12959))+((x12958*x12959)));
j4eval[0]=x12962;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12960))+((r21*sj5))))));
j4eval[2]=IKsign(x12962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12963=cj5*cj5;
IkReal x12964=(r21*sj5);
IkReal x12965=(r11*r21);
IkReal x12966=((1.0)*r20);
CheckValue<IkReal> x12967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12963*x12966))+(((-1.0)*x12965))+((cj5*r10*x12964))+((x12963*x12965))+((cj5*r11*r20*sj5)))),-1);
if(!x12967.valid){
continue;
}
CheckValue<IkReal> x12968 = IKatan2WithCheck(IkReal((x12964+(((-1.0)*cj5*x12966)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12967.value)))+(x12968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12969=IKcos(j4);
IkReal x12970=IKsin(j4);
IkReal x12971=(cj5*r00);
IkReal x12972=(cj5*r20);
IkReal x12973=(cj5*r10);
IkReal x12974=((1.0)*x12969);
IkReal x12975=((1.0)*x12970);
IkReal x12976=(sj5*x12969);
IkReal x12977=(sj5*x12970);
evalcond[0]=((((-1.0)*x12972*x12974))+((r22*x12970))+((r21*x12976)));
evalcond[1]=((((-1.0)*x12973*x12974))+((r11*x12976))+((r12*x12970)));
evalcond[2]=((((-1.0)*r22*x12974))+(((-1.0)*x12972*x12975))+((r21*x12977)));
evalcond[3]=(((r01*x12977))+(((-1.0)*r02*x12974))+(((-1.0)*x12971*x12975)));
evalcond[4]=((-1.0)+((r01*x12976))+((r02*x12970))+(((-1.0)*x12971*x12974)));
evalcond[5]=((1.0)+(((-1.0)*x12973*x12975))+(((-1.0)*r12*x12974))+((r11*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12978=((1.0)*cj5);
CheckValue<IkReal> x12979 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12978)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12979.valid){
continue;
}
CheckValue<IkReal> x12980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12978))+(((-1.0)*r20*sj5)))),-1);
if(!x12980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12979.value)+(((1.5707963267949)*(x12980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12981=IKcos(j4);
IkReal x12982=IKsin(j4);
IkReal x12983=(cj5*r00);
IkReal x12984=(cj5*r20);
IkReal x12985=(cj5*r10);
IkReal x12986=((1.0)*x12981);
IkReal x12987=((1.0)*x12982);
IkReal x12988=(sj5*x12981);
IkReal x12989=(sj5*x12982);
evalcond[0]=(((r22*x12982))+((r21*x12988))+(((-1.0)*x12984*x12986)));
evalcond[1]=(((r11*x12988))+((r12*x12982))+(((-1.0)*x12985*x12986)));
evalcond[2]=((((-1.0)*r22*x12986))+((r21*x12989))+(((-1.0)*x12984*x12987)));
evalcond[3]=((((-1.0)*x12983*x12987))+((r01*x12989))+(((-1.0)*r02*x12986)));
evalcond[4]=((-1.0)+(((-1.0)*x12983*x12986))+((r01*x12988))+((r02*x12982)));
evalcond[5]=((1.0)+((r11*x12989))+(((-1.0)*r12*x12986))+(((-1.0)*x12985*x12987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12990 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12990.valid){
continue;
}
CheckValue<IkReal> x12991=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12990.value)+(((1.5707963267949)*(x12991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12992=IKcos(j4);
IkReal x12993=IKsin(j4);
IkReal x12994=(cj5*r00);
IkReal x12995=(cj5*r20);
IkReal x12996=(cj5*r10);
IkReal x12997=((1.0)*x12992);
IkReal x12998=((1.0)*x12993);
IkReal x12999=(sj5*x12992);
IkReal x13000=(sj5*x12993);
evalcond[0]=(((r22*x12993))+((r21*x12999))+(((-1.0)*x12995*x12997)));
evalcond[1]=(((r11*x12999))+((r12*x12993))+(((-1.0)*x12996*x12997)));
evalcond[2]=((((-1.0)*r22*x12997))+(((-1.0)*x12995*x12998))+((r21*x13000)));
evalcond[3]=((((-1.0)*x12994*x12998))+(((-1.0)*r02*x12997))+((r01*x13000)));
evalcond[4]=((-1.0)+(((-1.0)*x12994*x12997))+((r01*x12999))+((r02*x12993)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12997))+(((-1.0)*x12996*x12998))+((r11*x13000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13001=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13001;
j4eval[1]=IKsign(x13001);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13002=((1.0)*cj5);
IkReal x13003=((((-1.0)*r11*x13002))+(((-1.0)*r10*sj5)));
j4eval[0]=x13003;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x13002))))));
j4eval[2]=IKsign(x13003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13004=cj5*cj5;
IkReal x13005=(r11*r21);
IkReal x13006=((1.0)*r20);
IkReal x13007=(cj5*sj5);
IkReal x13008=((((-1.0)*r10*x13004*x13006))+((r10*r21*x13007))+(((-1.0)*r12*r22))+((x13004*x13005))+(((-1.0)*x13005))+((r11*r20*x13007)));
j4eval[0]=x13008;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13006))))));
j4eval[2]=IKsign(x13008);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13009=cj5*cj5;
IkReal x13010=(r21*sj5);
IkReal x13011=(r11*r21);
IkReal x13012=((1.0)*r20);
CheckValue<IkReal> x13013 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13012))+x13010)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13013.valid){
continue;
}
CheckValue<IkReal> x13014=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13010))+(((-1.0)*r10*x13009*x13012))+(((-1.0)*r12*r22))+((x13009*x13011))+(((-1.0)*x13011))+((cj5*r11*r20*sj5)))),-1);
if(!x13014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13013.value)+(((1.5707963267949)*(x13014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13015=IKcos(j4);
IkReal x13016=IKsin(j4);
IkReal x13017=(cj5*r00);
IkReal x13018=(cj5*r20);
IkReal x13019=(cj5*r10);
IkReal x13020=((1.0)*x13015);
IkReal x13021=((1.0)*x13016);
IkReal x13022=(sj5*x13015);
IkReal x13023=(sj5*x13016);
evalcond[0]=((((-1.0)*x13018*x13020))+((r21*x13022))+((r22*x13016)));
evalcond[1]=((((-1.0)*x13019*x13020))+((r11*x13022))+((r12*x13016)));
evalcond[2]=((((-1.0)*x13018*x13021))+(((-1.0)*r22*x13020))+((r21*x13023)));
evalcond[3]=(((r01*x13023))+(((-1.0)*r02*x13020))+(((-1.0)*x13017*x13021)));
evalcond[4]=((1.0)+((r01*x13022))+((r02*x13016))+(((-1.0)*x13017*x13020)));
evalcond[5]=((1.0)+(((-1.0)*x13019*x13021))+((r11*x13023))+(((-1.0)*r12*x13020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13024=((1.0)*cj5);
CheckValue<IkReal> x13025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13024)))),-1);
if(!x13025.valid){
continue;
}
CheckValue<IkReal> x13026 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13024)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13025.value)))+(x13026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13027=IKcos(j4);
IkReal x13028=IKsin(j4);
IkReal x13029=(cj5*r00);
IkReal x13030=(cj5*r20);
IkReal x13031=(cj5*r10);
IkReal x13032=((1.0)*x13027);
IkReal x13033=((1.0)*x13028);
IkReal x13034=(sj5*x13027);
IkReal x13035=(sj5*x13028);
evalcond[0]=((((-1.0)*x13030*x13032))+((r21*x13034))+((r22*x13028)));
evalcond[1]=((((-1.0)*x13031*x13032))+((r11*x13034))+((r12*x13028)));
evalcond[2]=((((-1.0)*x13030*x13033))+(((-1.0)*r22*x13032))+((r21*x13035)));
evalcond[3]=((((-1.0)*r02*x13032))+(((-1.0)*x13029*x13033))+((r01*x13035)));
evalcond[4]=((1.0)+(((-1.0)*x13029*x13032))+((r02*x13028))+((r01*x13034)));
evalcond[5]=((1.0)+(((-1.0)*x13031*x13033))+((r11*x13035))+(((-1.0)*r12*x13032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13036=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13036.valid){
continue;
}
CheckValue<IkReal> x13037 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13036.value)))+(x13037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13038=IKcos(j4);
IkReal x13039=IKsin(j4);
IkReal x13040=(cj5*r00);
IkReal x13041=(cj5*r20);
IkReal x13042=(cj5*r10);
IkReal x13043=((1.0)*x13038);
IkReal x13044=((1.0)*x13039);
IkReal x13045=(sj5*x13038);
IkReal x13046=(sj5*x13039);
evalcond[0]=(((r22*x13039))+((r21*x13045))+(((-1.0)*x13041*x13043)));
evalcond[1]=(((r11*x13045))+((r12*x13039))+(((-1.0)*x13042*x13043)));
evalcond[2]=(((r21*x13046))+(((-1.0)*r22*x13043))+(((-1.0)*x13041*x13044)));
evalcond[3]=((((-1.0)*x13040*x13044))+(((-1.0)*r02*x13043))+((r01*x13046)));
evalcond[4]=((1.0)+(((-1.0)*x13040*x13043))+((r01*x13045))+((r02*x13039)));
evalcond[5]=((1.0)+((r11*x13046))+(((-1.0)*x13042*x13044))+(((-1.0)*r12*x13043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13047=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13047;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13047);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13048=((1.0)*cj5);
IkReal x13049=((((-1.0)*r21*x13048))+(((-1.0)*r20*sj5)));
j4eval[0]=x13049;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13048))+((r11*sj5))))));
j4eval[2]=IKsign(x13049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13050=cj5*cj5;
IkReal x13051=(r11*r21);
IkReal x13052=((1.0)*r20);
IkReal x13053=(cj5*sj5);
IkReal x13054=((((-1.0)*r10*x13050*x13052))+((r10*r21*x13053))+((r11*r20*x13053))+(((-1.0)*x13051))+(((-1.0)*r12*r22))+((x13050*x13051)));
j4eval[0]=x13054;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13052)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13055=cj5*cj5;
IkReal x13056=(r21*sj5);
IkReal x13057=(r11*r21);
IkReal x13058=((1.0)*r20);
CheckValue<IkReal> x13059=IKPowWithIntegerCheck(IKsign((((x13055*x13057))+(((-1.0)*x13057))+(((-1.0)*r12*r22))+((cj5*r10*x13056))+(((-1.0)*r10*x13055*x13058))+((cj5*r11*r20*sj5)))),-1);
if(!x13059.valid){
continue;
}
CheckValue<IkReal> x13060 = IKatan2WithCheck(IkReal((x13056+(((-1.0)*cj5*x13058)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13060.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13059.value)))+(x13060.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13061=IKcos(j4);
IkReal x13062=IKsin(j4);
IkReal x13063=(cj5*r00);
IkReal x13064=(cj5*r20);
IkReal x13065=(cj5*r10);
IkReal x13066=((1.0)*x13061);
IkReal x13067=((1.0)*x13062);
IkReal x13068=(sj5*x13061);
IkReal x13069=(sj5*x13062);
evalcond[0]=(((r22*x13062))+((r21*x13068))+(((-1.0)*x13064*x13066)));
evalcond[1]=(((r12*x13062))+(((-1.0)*x13065*x13066))+((r11*x13068)));
evalcond[2]=(((r21*x13069))+(((-1.0)*r22*x13066))+(((-1.0)*x13064*x13067)));
evalcond[3]=((((-1.0)*x13063*x13067))+(((-1.0)*r02*x13066))+((r01*x13069)));
evalcond[4]=((-1.0)+((r02*x13062))+(((-1.0)*x13063*x13066))+((r01*x13068)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13066))+(((-1.0)*x13065*x13067))+((r11*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13070=((1.0)*cj5);
CheckValue<IkReal> x13071 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13070))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13071.valid){
continue;
}
CheckValue<IkReal> x13072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13070))+(((-1.0)*r20*sj5)))),-1);
if(!x13072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13071.value)+(((1.5707963267949)*(x13072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13073=IKcos(j4);
IkReal x13074=IKsin(j4);
IkReal x13075=(cj5*r00);
IkReal x13076=(cj5*r20);
IkReal x13077=(cj5*r10);
IkReal x13078=((1.0)*x13073);
IkReal x13079=((1.0)*x13074);
IkReal x13080=(sj5*x13073);
IkReal x13081=(sj5*x13074);
evalcond[0]=((((-1.0)*x13076*x13078))+((r22*x13074))+((r21*x13080)));
evalcond[1]=(((r11*x13080))+((r12*x13074))+(((-1.0)*x13077*x13078)));
evalcond[2]=((((-1.0)*x13076*x13079))+(((-1.0)*r22*x13078))+((r21*x13081)));
evalcond[3]=((((-1.0)*r02*x13078))+(((-1.0)*x13075*x13079))+((r01*x13081)));
evalcond[4]=((-1.0)+((r02*x13074))+(((-1.0)*x13075*x13078))+((r01*x13080)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13078))+((r11*x13081))+(((-1.0)*x13077*x13079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13082 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13082.valid){
continue;
}
CheckValue<IkReal> x13083=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13082.value)+(((1.5707963267949)*(x13083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13084=IKcos(j4);
IkReal x13085=IKsin(j4);
IkReal x13086=(cj5*r00);
IkReal x13087=(cj5*r20);
IkReal x13088=(cj5*r10);
IkReal x13089=((1.0)*x13084);
IkReal x13090=((1.0)*x13085);
IkReal x13091=(sj5*x13084);
IkReal x13092=(sj5*x13085);
evalcond[0]=((((-1.0)*x13087*x13089))+((r22*x13085))+((r21*x13091)));
evalcond[1]=(((r11*x13091))+((r12*x13085))+(((-1.0)*x13088*x13089)));
evalcond[2]=((((-1.0)*x13087*x13090))+(((-1.0)*r22*x13089))+((r21*x13092)));
evalcond[3]=((((-1.0)*r02*x13089))+(((-1.0)*x13086*x13090))+((r01*x13092)));
evalcond[4]=((-1.0)+((r02*x13085))+(((-1.0)*x13086*x13089))+((r01*x13091)));
evalcond[5]=((1.0)+((r11*x13092))+(((-1.0)*x13088*x13090))+(((-1.0)*r12*x13089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13093=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13093);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13093);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13094=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13094);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13094);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13095=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13095))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13095)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13096=((1.0)*cj5);
CheckValue<IkReal> x13097=IKPowWithIntegerCheck(((((-1.0)*r10*x13096))+((r11*sj5))),-1);
if(!x13097.valid){
continue;
}
CheckValue<IkReal> x13098=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13096))),-1);
if(!x13098.valid){
continue;
}
if( IKabs(((-1.0)*(x13097.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13098.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13097.value)))+IKsqr(((x13098.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13097.value)), ((x13098.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13099=IKsin(j4);
IkReal x13100=IKcos(j4);
IkReal x13101=((1.0)*cj5);
IkReal x13102=((1.0)*cj2);
IkReal x13103=(sj5*x13100);
IkReal x13104=(sj5*x13099);
evalcond[0]=((-1.0)*r22*x13100);
evalcond[1]=(((sj1*sj2))+((r22*x13099))+(((-1.0)*cj1*x13102)));
evalcond[2]=(((r01*x13104))+(((-1.0)*r00*x13099*x13101)));
evalcond[3]=((((-1.0)*r10*x13100*x13101))+((r11*x13103)));
evalcond[4]=((1.0)+((r11*x13104))+(((-1.0)*r10*x13099*x13101)));
evalcond[5]=(((r01*x13103))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13100*x13101))+(((-1.0)*sj1*x13102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13105=IKPowWithIntegerCheck(r22,-1);
if(!x13105.valid){
continue;
}
CheckValue<IkReal> x13106=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13106.valid){
continue;
}
if( IKabs(((x13105.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13106.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13105.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13106.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13105.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13106.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13107=IKsin(j4);
IkReal x13108=IKcos(j4);
IkReal x13109=((1.0)*cj5);
IkReal x13110=((1.0)*cj2);
IkReal x13111=(sj5*x13108);
IkReal x13112=(sj5*x13107);
evalcond[0]=((-1.0)*r22*x13108);
evalcond[1]=(((sj1*sj2))+((r22*x13107))+(((-1.0)*cj1*x13110)));
evalcond[2]=((((-1.0)*r00*x13107*x13109))+((r01*x13112)));
evalcond[3]=((((-1.0)*r10*x13108*x13109))+((r11*x13111)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13107*x13109))+((r11*x13112)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13108*x13109))+(((-1.0)*sj1*x13110))+((r01*x13111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13113=(sj1*sj2);
IkReal x13114=(cj5*r10);
IkReal x13115=(r11*sj5);
IkReal x13116=(cj1*cj2);
CheckValue<IkReal> x13117 = IKatan2WithCheck(IkReal(((((-1.0)*x13113*x13114))+(((-1.0)*x13115*x13116))+((x13114*x13116))+((x13113*x13115)))),IkReal((((r12*x13116))+(((-1.0)*r12*x13113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13117.valid){
continue;
}
CheckValue<IkReal> x13118=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13117.value)+(((1.5707963267949)*(x13118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13119=IKcos(j4);
IkReal x13120=IKsin(j4);
IkReal x13121=(cj5*r00);
IkReal x13122=(cj5*r10);
IkReal x13123=(r21*sj5);
IkReal x13124=((1.0)*cj2);
IkReal x13125=(cj5*r20);
IkReal x13126=((1.0)*x13119);
IkReal x13127=((1.0)*x13120);
IkReal x13128=(sj5*x13120);
IkReal x13129=(sj5*x13119);
evalcond[0]=(((r11*x13129))+(((-1.0)*x13122*x13126))+((r12*x13120)));
evalcond[1]=((((-1.0)*x13125*x13127))+(((-1.0)*r22*x13126))+((x13120*x13123)));
evalcond[2]=((((-1.0)*r02*x13126))+(((-1.0)*x13121*x13127))+((r01*x13128)));
evalcond[3]=((1.0)+((r11*x13128))+(((-1.0)*x13122*x13127))+(((-1.0)*r12*x13126)));
evalcond[4]=((((-1.0)*cj1*x13124))+((x13119*x13123))+(((-1.0)*x13125*x13126))+((sj1*sj2))+((r22*x13120)));
evalcond[5]=((((-1.0)*sj1*x13124))+(((-1.0)*cj1*sj2))+(((-1.0)*x13121*x13126))+((r01*x13129))+((r02*x13120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13130=((1.0)*cj5);
CheckValue<IkReal> x13131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13130))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13131.valid){
continue;
}
CheckValue<IkReal> x13132=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13130)))),-1);
if(!x13132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13131.value)+(((1.5707963267949)*(x13132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13133=IKcos(j4);
IkReal x13134=IKsin(j4);
IkReal x13135=(cj5*r00);
IkReal x13136=(cj5*r10);
IkReal x13137=(r21*sj5);
IkReal x13138=((1.0)*cj2);
IkReal x13139=(cj5*r20);
IkReal x13140=((1.0)*x13133);
IkReal x13141=((1.0)*x13134);
IkReal x13142=(sj5*x13134);
IkReal x13143=(sj5*x13133);
evalcond[0]=(((r12*x13134))+((r11*x13143))+(((-1.0)*x13136*x13140)));
evalcond[1]=((((-1.0)*x13139*x13141))+((x13134*x13137))+(((-1.0)*r22*x13140)));
evalcond[2]=((((-1.0)*r02*x13140))+(((-1.0)*x13135*x13141))+((r01*x13142)));
evalcond[3]=((1.0)+((r11*x13142))+(((-1.0)*r12*x13140))+(((-1.0)*x13136*x13141)));
evalcond[4]=((((-1.0)*x13139*x13140))+(((-1.0)*cj1*x13138))+((sj1*sj2))+((x13133*x13137))+((r22*x13134)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13138))+(((-1.0)*x13135*x13140))+((r02*x13134))+((r01*x13143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13144=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13144.valid){
continue;
}
CheckValue<IkReal> x13145 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13144.value)))+(x13145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13146=IKcos(j4);
IkReal x13147=IKsin(j4);
IkReal x13148=(cj5*r00);
IkReal x13149=(cj5*r10);
IkReal x13150=(r21*sj5);
IkReal x13151=((1.0)*cj2);
IkReal x13152=(cj5*r20);
IkReal x13153=((1.0)*x13146);
IkReal x13154=((1.0)*x13147);
IkReal x13155=(sj5*x13147);
IkReal x13156=(sj5*x13146);
evalcond[0]=(((r12*x13147))+((r11*x13156))+(((-1.0)*x13149*x13153)));
evalcond[1]=((((-1.0)*x13152*x13154))+((x13147*x13150))+(((-1.0)*r22*x13153)));
evalcond[2]=((((-1.0)*x13148*x13154))+(((-1.0)*r02*x13153))+((r01*x13155)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13153))+((r11*x13155))+(((-1.0)*x13149*x13154)));
evalcond[4]=(((r22*x13147))+(((-1.0)*x13152*x13153))+((sj1*sj2))+((x13146*x13150))+(((-1.0)*cj1*x13151)));
evalcond[5]=((((-1.0)*sj1*x13151))+(((-1.0)*x13148*x13153))+(((-1.0)*cj1*sj2))+((r02*x13147))+((r01*x13156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13157=((-1.0)*r00);
IkReal x13159 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13159)==0){
continue;
}
IkReal x13158=pow(x13159,-0.5);
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13157),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13160.value));
IkReal gconst19=(r01*x13158);
IkReal gconst20=(x13157*x13158);
CheckValue<IkReal> x13161 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13161.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13161.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13162=((-1.0)*r00);
IkReal x13163=x13158;
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13162),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
IkReal x13164=((-1.0)*(x13165.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13164;
IkReal gconst18=x13164;
IkReal gconst19=(r01*x13163);
IkReal gconst20=(x13162*x13163);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13166=((-1.0)*r00);
IkReal x13167=x13158;
CheckValue<IkReal> x13169 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13166),IKFAST_ATAN2_MAGTHRESH);
if(!x13169.valid){
continue;
}
IkReal x13168=((-1.0)*(x13169.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13168;
IkReal gconst18=x13168;
IkReal gconst19=(r01*x13167);
IkReal gconst20=(x13166*x13167);
CheckValue<IkReal> x13177=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13177.valid){
continue;
}
IkReal x13170=x13177.value;
IkReal x13171=(sj3*x13170);
IkReal x13172=(r11*x13171);
IkReal x13173=(r21*x13171);
IkReal x13174=(r20*x13171);
IkReal x13175=(r10*x13171);
IkReal x13176=(r00*r01*x13171);
j4eval[0]=IKsign((((r10*x13174*(r00*r00)))+((r21*x13172*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13173))+((r00*r01*r20*x13172))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13178=gconst19*gconst19;
IkReal x13179=gconst20*gconst20;
IkReal x13180=(gconst20*sj3);
IkReal x13181=((1.0)*cj3);
IkReal x13182=(r10*sj3);
IkReal x13183=(gconst19*r21);
IkReal x13184=(r11*r20);
IkReal x13185=(cj3*gconst20);
IkReal x13186=((1.0)*r10*r20);
IkReal x13187=(r21*x13178);
CheckValue<IkReal> x13188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x13181*x13187))+(((-1.0)*r12*r22*x13181))+(((-1.0)*r10*r20*x13179*x13181))+((gconst19*x13184*x13185))+((r10*x13183*x13185)))),-1);
if(!x13188.valid){
continue;
}
CheckValue<IkReal> x13189 = IKatan2WithCheck(IkReal((((r11*r22*x13180))+((gconst19*r22*x13182)))),IkReal((((r11*x13180*x13183))+((x13182*x13187))+(((-1.0)*sj3*x13179*x13184))+(((-1.0)*gconst19*x13180*x13186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13188.value)))+(x13189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13190=IKsin(j4);
IkReal x13191=IKcos(j4);
IkReal x13192=(sj1*sj2);
IkReal x13193=(gconst20*sj3);
IkReal x13194=(gconst19*r21);
IkReal x13195=(gconst20*r10);
IkReal x13196=(cj3*gconst19);
IkReal x13197=(gconst19*sj3);
IkReal x13198=((1.0)*cj1);
IkReal x13199=(cj3*gconst20);
IkReal x13200=(cj2*sj1);
IkReal x13201=(cj2*x13198);
IkReal x13202=((1.0)*x13191);
IkReal x13203=((1.0)*x13190);
IkReal x13204=(cj3*x13190);
IkReal x13205=(gconst19*x13190);
evalcond[0]=((((-1.0)*r22*x13202))+((x13190*x13194))+(((-1.0)*gconst20*r20*x13203)));
evalcond[1]=(((r01*x13205))+(((-1.0)*r02*x13202))+(((-1.0)*gconst20*r00*x13203)));
evalcond[2]=((1.0)+(((-1.0)*x13195*x13203))+(((-1.0)*r12*x13202))+((r11*x13205)));
evalcond[3]=(((r11*x13193))+((r10*x13197))+((r12*x13204))+((r11*x13191*x13196))+(((-1.0)*cj3*x13195*x13202)));
evalcond[4]=(((r10*x13191*x13193))+((r11*x13199))+((r10*x13196))+(((-1.0)*r11*x13197*x13202))+(((-1.0)*r12*sj3*x13203)));
evalcond[5]=(((r21*x13193))+((cj1*sj2))+((cj3*x13191*x13194))+((r22*x13204))+((r20*x13197))+(((-1.0)*r20*x13199*x13202))+x13200);
evalcond[6]=((((-1.0)*r00*x13199*x13202))+((r02*x13204))+((r00*x13197))+((r01*x13193))+x13192+(((-1.0)*x13201))+((r01*x13191*x13196)));
evalcond[7]=((((-1.0)*r22*sj3*x13203))+((r21*x13199))+(((-1.0)*sj3*x13194*x13202))+((r20*x13196))+x13192+(((-1.0)*x13201))+((r20*x13191*x13193)));
evalcond[8]=((((-1.0)*r01*x13197*x13202))+((r00*x13196))+((r01*x13199))+(((-1.0)*sj2*x13198))+((r00*x13191*x13193))+(((-1.0)*x13200))+(((-1.0)*r02*sj3*x13203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13206=gconst19*gconst19;
IkReal x13207=gconst20*gconst20;
IkReal x13208=(r21*sj3);
IkReal x13209=(cj3*r11);
IkReal x13210=(gconst19*gconst20);
IkReal x13211=((1.0)*r10);
IkReal x13212=(cj3*r10);
IkReal x13213=(r20*x13207);
CheckValue<IkReal> x13214 = IKatan2WithCheck(IkReal((((gconst20*r22*x13209))+((gconst19*r22*x13212)))),IkReal((((r21*x13209*x13210))+(((-1.0)*cj3*r20*x13210*x13211))+(((-1.0)*x13209*x13213))+((r21*x13206*x13212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13214.valid){
continue;
}
CheckValue<IkReal> x13215=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13213))+(((-1.0)*r11*r20*sj3*x13210))+(((-1.0)*x13208*x13210*x13211))+((r12*r22*sj3))+((r11*x13206*x13208)))),-1);
if(!x13215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13214.value)+(((1.5707963267949)*(x13215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13216=IKsin(j4);
IkReal x13217=IKcos(j4);
IkReal x13218=(sj1*sj2);
IkReal x13219=(gconst20*sj3);
IkReal x13220=(gconst19*r21);
IkReal x13221=(gconst20*r10);
IkReal x13222=(cj3*gconst19);
IkReal x13223=(gconst19*sj3);
IkReal x13224=((1.0)*cj1);
IkReal x13225=(cj3*gconst20);
IkReal x13226=(cj2*sj1);
IkReal x13227=(cj2*x13224);
IkReal x13228=((1.0)*x13217);
IkReal x13229=((1.0)*x13216);
IkReal x13230=(cj3*x13216);
IkReal x13231=(gconst19*x13216);
evalcond[0]=((((-1.0)*r22*x13228))+(((-1.0)*gconst20*r20*x13229))+((x13216*x13220)));
evalcond[1]=(((r01*x13231))+(((-1.0)*r02*x13228))+(((-1.0)*gconst20*r00*x13229)));
evalcond[2]=((1.0)+(((-1.0)*x13221*x13229))+(((-1.0)*r12*x13228))+((r11*x13231)));
evalcond[3]=((((-1.0)*cj3*x13221*x13228))+((r11*x13219))+((r11*x13217*x13222))+((r10*x13223))+((r12*x13230)));
evalcond[4]=(((r10*x13222))+((r11*x13225))+(((-1.0)*r11*x13223*x13228))+(((-1.0)*r12*sj3*x13229))+((r10*x13217*x13219)));
evalcond[5]=(((r21*x13219))+((cj1*sj2))+((r22*x13230))+((cj3*x13217*x13220))+x13226+((r20*x13223))+(((-1.0)*r20*x13225*x13228)));
evalcond[6]=(((r01*x13219))+((r01*x13217*x13222))+((r02*x13230))+(((-1.0)*r00*x13225*x13228))+(((-1.0)*x13227))+((r00*x13223))+x13218);
evalcond[7]=(((r21*x13225))+(((-1.0)*sj3*x13220*x13228))+(((-1.0)*r22*sj3*x13229))+(((-1.0)*x13227))+x13218+((r20*x13222))+((r20*x13217*x13219)));
evalcond[8]=((((-1.0)*x13226))+(((-1.0)*r02*sj3*x13229))+(((-1.0)*sj2*x13224))+((r00*x13222))+(((-1.0)*r01*x13223*x13228))+((r01*x13225))+((r00*x13217*x13219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13232 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13232.valid){
continue;
}
CheckValue<IkReal> x13233=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13232.value)+(((1.5707963267949)*(x13233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13234=IKsin(j4);
IkReal x13235=IKcos(j4);
IkReal x13236=(sj1*sj2);
IkReal x13237=(gconst20*sj3);
IkReal x13238=(gconst19*r21);
IkReal x13239=(gconst20*r10);
IkReal x13240=(cj3*gconst19);
IkReal x13241=(gconst19*sj3);
IkReal x13242=((1.0)*cj1);
IkReal x13243=(cj3*gconst20);
IkReal x13244=(cj2*sj1);
IkReal x13245=(cj2*x13242);
IkReal x13246=((1.0)*x13235);
IkReal x13247=((1.0)*x13234);
IkReal x13248=(cj3*x13234);
IkReal x13249=(gconst19*x13234);
evalcond[0]=((((-1.0)*r22*x13246))+((x13234*x13238))+(((-1.0)*gconst20*r20*x13247)));
evalcond[1]=((((-1.0)*r02*x13246))+((r01*x13249))+(((-1.0)*gconst20*r00*x13247)));
evalcond[2]=((1.0)+((r11*x13249))+(((-1.0)*r12*x13246))+(((-1.0)*x13239*x13247)));
evalcond[3]=(((r10*x13241))+((r11*x13237))+((r12*x13248))+((r11*x13235*x13240))+(((-1.0)*cj3*x13239*x13246)));
evalcond[4]=(((r10*x13240))+(((-1.0)*r12*sj3*x13247))+(((-1.0)*r11*x13241*x13246))+((r11*x13243))+((r10*x13235*x13237)));
evalcond[5]=(((cj3*x13235*x13238))+((cj1*sj2))+((r22*x13248))+((r21*x13237))+x13244+((r20*x13241))+(((-1.0)*r20*x13243*x13246)));
evalcond[6]=(((r01*x13237))+((r02*x13248))+(((-1.0)*r00*x13243*x13246))+((r00*x13241))+((r01*x13235*x13240))+(((-1.0)*x13245))+x13236);
evalcond[7]=(((r21*x13243))+(((-1.0)*r22*sj3*x13247))+((r20*x13235*x13237))+(((-1.0)*x13245))+x13236+(((-1.0)*sj3*x13238*x13246))+((r20*x13240)));
evalcond[8]=((((-1.0)*x13244))+(((-1.0)*r02*sj3*x13247))+((r00*x13235*x13237))+((r00*x13240))+((r01*x13243))+(((-1.0)*sj2*x13242))+(((-1.0)*r01*x13241*x13246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13250=((-1.0)*r01);
IkReal x13252 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13252)==0){
continue;
}
IkReal x13251=pow(x13252,-0.5);
CheckValue<IkReal> x13253 = IKatan2WithCheck(IkReal(x13250),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13253.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13253.value))));
IkReal gconst22=(x13250*x13251);
IkReal gconst23=((1.0)*r00*x13251);
CheckValue<IkReal> x13254 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13254.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13254.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13255=((-1.0)*r01);
CheckValue<IkReal> x13258 = IKatan2WithCheck(IkReal(x13255),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13258.valid){
continue;
}
IkReal x13256=((1.0)*(x13258.value));
IkReal x13257=x13251;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13256)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13256)));
IkReal gconst22=(x13255*x13257);
IkReal gconst23=((1.0)*r00*x13257);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13259=((-1.0)*r01);
CheckValue<IkReal> x13262 = IKatan2WithCheck(IkReal(x13259),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13262.valid){
continue;
}
IkReal x13260=((1.0)*(x13262.value));
IkReal x13261=x13251;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13260)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13260)));
IkReal gconst22=(x13259*x13261);
IkReal gconst23=((1.0)*r00*x13261);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13263=gconst22*gconst22;
IkReal x13264=gconst23*gconst23;
IkReal x13265=(r21*sj3);
IkReal x13266=((1.0)*cj3);
IkReal x13267=(gconst23*r11);
IkReal x13268=(r22*sj3);
IkReal x13269=(gconst22*r10);
IkReal x13270=((1.0)*r20*sj3);
CheckValue<IkReal> x13271 = IKatan2WithCheck(IkReal((((x13267*x13268))+((x13268*x13269)))),IkReal(((((-1.0)*gconst23*x13269*x13270))+((gconst22*x13265*x13267))+(((-1.0)*r11*x13264*x13270))+((r10*x13263*x13265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13271.valid){
continue;
}
CheckValue<IkReal> x13272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13264*x13266))+(((-1.0)*r11*r21*x13263*x13266))+(((-1.0)*r12*r22*x13266))+((cj3*gconst22*r20*x13267))+((cj3*gconst23*r21*x13269)))),-1);
if(!x13272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13271.value)+(((1.5707963267949)*(x13272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13273=IKsin(j4);
IkReal x13274=IKcos(j4);
IkReal x13275=(sj1*sj2);
IkReal x13276=(gconst23*sj3);
IkReal x13277=(gconst22*sj3);
IkReal x13278=(cj2*sj1);
IkReal x13279=((1.0)*cj1);
IkReal x13280=(cj3*gconst23);
IkReal x13281=(cj3*gconst22);
IkReal x13282=(cj2*x13279);
IkReal x13283=((1.0)*x13274);
IkReal x13284=(cj3*x13273);
IkReal x13285=(gconst22*x13273);
IkReal x13286=((1.0)*sj3*x13273);
IkReal x13287=(x13274*x13281);
IkReal x13288=((1.0)*gconst23*x13273);
evalcond[0]=((((-1.0)*r22*x13283))+(((-1.0)*r20*x13288))+((r21*x13285)));
evalcond[1]=((((-1.0)*r02*x13283))+(((-1.0)*r00*x13288))+((r01*x13285)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13288))+((r11*x13285))+(((-1.0)*r12*x13283)));
evalcond[3]=(((r12*x13284))+((r11*x13276))+((r11*x13287))+((r10*x13277))+(((-1.0)*r10*x13280*x13283)));
evalcond[4]=(((r11*x13280))+((r10*x13281))+(((-1.0)*r11*x13277*x13283))+(((-1.0)*r12*x13286))+((r10*x13274*x13276)));
evalcond[5]=(((r21*x13276))+((r20*x13277))+((cj1*sj2))+((r21*x13287))+((r22*x13284))+x13278+(((-1.0)*r20*x13280*x13283)));
evalcond[6]=(((r01*x13276))+((r00*x13277))+((r02*x13284))+(((-1.0)*r00*x13280*x13283))+x13275+((r01*x13287))+(((-1.0)*x13282)));
evalcond[7]=((((-1.0)*r22*x13286))+((r20*x13281))+((r20*x13274*x13276))+((r21*x13280))+x13275+(((-1.0)*r21*x13277*x13283))+(((-1.0)*x13282)));
evalcond[8]=((((-1.0)*x13278))+(((-1.0)*sj2*x13279))+((r00*x13274*x13276))+(((-1.0)*r01*x13277*x13283))+(((-1.0)*r02*x13286))+((r01*x13280))+((r00*x13281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13289=((1.0)*gconst23);
CheckValue<IkReal> x13290 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13289))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13290.valid){
continue;
}
CheckValue<IkReal> x13291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13289)))),-1);
if(!x13291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13290.value)+(((1.5707963267949)*(x13291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13292=IKsin(j4);
IkReal x13293=IKcos(j4);
IkReal x13294=(sj1*sj2);
IkReal x13295=(gconst23*sj3);
IkReal x13296=(gconst22*sj3);
IkReal x13297=(cj2*sj1);
IkReal x13298=((1.0)*cj1);
IkReal x13299=(cj3*gconst23);
IkReal x13300=(cj3*gconst22);
IkReal x13301=(cj2*x13298);
IkReal x13302=((1.0)*x13293);
IkReal x13303=(cj3*x13292);
IkReal x13304=(gconst22*x13292);
IkReal x13305=((1.0)*sj3*x13292);
IkReal x13306=(x13293*x13300);
IkReal x13307=((1.0)*gconst23*x13292);
evalcond[0]=(((r21*x13304))+(((-1.0)*r20*x13307))+(((-1.0)*r22*x13302)));
evalcond[1]=(((r01*x13304))+(((-1.0)*r02*x13302))+(((-1.0)*r00*x13307)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13307))+(((-1.0)*r12*x13302))+((r11*x13304)));
evalcond[3]=(((r11*x13295))+((r12*x13303))+((r10*x13296))+(((-1.0)*r10*x13299*x13302))+((r11*x13306)));
evalcond[4]=(((r11*x13299))+((r10*x13300))+(((-1.0)*r11*x13296*x13302))+(((-1.0)*r12*x13305))+((r10*x13293*x13295)));
evalcond[5]=(((r21*x13306))+((r20*x13296))+((cj1*sj2))+(((-1.0)*r20*x13299*x13302))+((r22*x13303))+x13297+((r21*x13295)));
evalcond[6]=(((r01*x13306))+(((-1.0)*x13301))+x13294+((r02*x13303))+(((-1.0)*r00*x13299*x13302))+((r00*x13296))+((r01*x13295)));
evalcond[7]=((((-1.0)*r21*x13296*x13302))+((r20*x13300))+((r20*x13293*x13295))+(((-1.0)*x13301))+x13294+(((-1.0)*r22*x13305))+((r21*x13299)));
evalcond[8]=((((-1.0)*r01*x13296*x13302))+(((-1.0)*x13297))+((r00*x13300))+(((-1.0)*r02*x13305))+(((-1.0)*sj2*x13298))+((r00*x13293*x13295))+((r01*x13299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13308=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13308.valid){
continue;
}
CheckValue<IkReal> x13309 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13308.value)))+(x13309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13310=IKsin(j4);
IkReal x13311=IKcos(j4);
IkReal x13312=(sj1*sj2);
IkReal x13313=(gconst23*sj3);
IkReal x13314=(gconst22*sj3);
IkReal x13315=(cj2*sj1);
IkReal x13316=((1.0)*cj1);
IkReal x13317=(cj3*gconst23);
IkReal x13318=(cj3*gconst22);
IkReal x13319=(cj2*x13316);
IkReal x13320=((1.0)*x13311);
IkReal x13321=(cj3*x13310);
IkReal x13322=(gconst22*x13310);
IkReal x13323=((1.0)*sj3*x13310);
IkReal x13324=(x13311*x13318);
IkReal x13325=((1.0)*gconst23*x13310);
evalcond[0]=((((-1.0)*r22*x13320))+((r21*x13322))+(((-1.0)*r20*x13325)));
evalcond[1]=((((-1.0)*r02*x13320))+(((-1.0)*r00*x13325))+((r01*x13322)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13325))+(((-1.0)*r12*x13320))+((r11*x13322)));
evalcond[3]=(((r12*x13321))+((r11*x13313))+((r10*x13314))+(((-1.0)*r10*x13317*x13320))+((r11*x13324)));
evalcond[4]=((((-1.0)*r11*x13314*x13320))+(((-1.0)*r12*x13323))+((r11*x13317))+((r10*x13318))+((r10*x13311*x13313)));
evalcond[5]=(((r20*x13314))+((cj1*sj2))+(((-1.0)*r20*x13317*x13320))+((r21*x13324))+((r21*x13313))+x13315+((r22*x13321)));
evalcond[6]=(((r02*x13321))+((r01*x13313))+((r00*x13314))+(((-1.0)*r00*x13317*x13320))+((r01*x13324))+(((-1.0)*x13319))+x13312);
evalcond[7]=(((r20*x13311*x13313))+(((-1.0)*r22*x13323))+((r20*x13318))+(((-1.0)*r21*x13314*x13320))+(((-1.0)*x13319))+((r21*x13317))+x13312);
evalcond[8]=((((-1.0)*r02*x13323))+(((-1.0)*sj2*x13316))+((r00*x13311*x13313))+((r01*x13317))+((r00*x13318))+(((-1.0)*r01*x13314*x13320))+(((-1.0)*x13315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13327 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13327)==0){
continue;
}
IkReal x13326=pow(x13327,-0.5);
CheckValue<IkReal> x13328 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13328.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13328.value));
IkReal gconst25=((-1.0)*r21*x13326);
IkReal gconst26=(r20*x13326);
CheckValue<IkReal> x13329 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13329.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13329.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13332 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13332.valid){
continue;
}
IkReal x13330=((-1.0)*(x13332.value));
IkReal x13331=x13326;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13330;
IkReal gconst24=x13330;
IkReal gconst25=((-1.0)*r21*x13331);
IkReal gconst26=(r20*x13331);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13335 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13335.valid){
continue;
}
IkReal x13333=((-1.0)*(x13335.value));
IkReal x13334=x13326;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13333;
IkReal gconst24=x13333;
IkReal gconst25=((-1.0)*r21*x13334);
IkReal gconst26=(r20*x13334);
CheckValue<IkReal> x13343=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13343.valid){
continue;
}
IkReal x13336=x13343.value;
IkReal x13337=(sj3*x13336);
IkReal x13338=(r11*x13337);
IkReal x13339=(r00*x13337);
IkReal x13340=(r01*x13337);
IkReal x13341=(r10*x13337);
IkReal x13342=(r20*r21*x13337);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13340))+((r01*x13338*(r21*r21)))+((r00*r20*r21*x13338))+((r10*x13339*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13344=gconst25*gconst25;
IkReal x13345=gconst26*gconst26;
IkReal x13346=(r00*r11);
IkReal x13347=(r01*r10);
IkReal x13348=(r02*sj3);
IkReal x13349=(gconst25*r10);
IkReal x13350=(gconst26*r11);
IkReal x13351=((1.0)*sj3);
IkReal x13352=((1.0)*cj3);
IkReal x13353=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13354 = IKatan2WithCheck(IkReal((((x13348*x13350))+((x13348*x13349)))),IkReal((((sj3*x13344*x13347))+((gconst25*r01*sj3*x13350))+(((-1.0)*gconst26*r00*x13349*x13351))+(((-1.0)*x13345*x13346*x13351)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13354.valid){
continue;
}
CheckValue<IkReal> x13355=IKPowWithIntegerCheck(IKsign((((x13347*x13353))+(((-1.0)*r00*r10*x13345*x13352))+((x13346*x13353))+(((-1.0)*r02*r12*x13352))+(((-1.0)*r01*r11*x13344*x13352)))),-1);
if(!x13355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13354.value)+(((1.5707963267949)*(x13355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13356=IKsin(j4);
IkReal x13357=IKcos(j4);
IkReal x13358=(sj1*sj2);
IkReal x13359=(gconst26*sj3);
IkReal x13360=(gconst25*sj3);
IkReal x13361=(gconst26*r10);
IkReal x13362=(gconst25*r11);
IkReal x13363=(cj3*gconst25);
IkReal x13364=((1.0)*cj2);
IkReal x13365=(cj1*sj2);
IkReal x13366=(gconst26*r00);
IkReal x13367=(gconst26*r20);
IkReal x13368=(cj3*gconst26);
IkReal x13369=(cj1*x13364);
IkReal x13370=((1.0)*x13357);
IkReal x13371=((1.0)*x13356);
IkReal x13372=(cj3*x13356);
IkReal x13373=(gconst25*x13356);
evalcond[0]=((((-1.0)*r22*x13370))+(((-1.0)*x13367*x13371))+((r21*x13373)));
evalcond[1]=((((-1.0)*x13366*x13371))+((r01*x13373))+(((-1.0)*r02*x13370)));
evalcond[2]=((1.0)+((x13356*x13362))+(((-1.0)*x13361*x13371))+(((-1.0)*r12*x13370)));
evalcond[3]=(((cj3*x13357*x13362))+((r10*x13360))+((r12*x13372))+(((-1.0)*cj3*x13361*x13370))+((r11*x13359)));
evalcond[4]=(((r10*x13363))+((r11*x13368))+((r10*x13357*x13359))+(((-1.0)*r11*x13360*x13370))+(((-1.0)*r12*sj3*x13371)));
evalcond[5]=(((cj2*sj1))+((r20*x13360))+((r21*x13357*x13363))+((r21*x13359))+(((-1.0)*cj3*x13367*x13370))+((r22*x13372))+x13365);
evalcond[6]=(((r02*x13372))+((r00*x13360))+(((-1.0)*cj3*x13366*x13370))+((r01*x13359))+(((-1.0)*x13369))+((r01*x13357*x13363))+x13358);
evalcond[7]=(((r20*x13357*x13359))+((r20*x13363))+(((-1.0)*r22*sj3*x13371))+(((-1.0)*r21*x13360*x13370))+(((-1.0)*x13369))+((r21*x13368))+x13358);
evalcond[8]=((((-1.0)*x13365))+((r01*x13368))+((r00*x13363))+(((-1.0)*r02*sj3*x13371))+((r00*x13357*x13359))+(((-1.0)*sj1*x13364))+(((-1.0)*r01*x13360*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13374=gconst26*gconst26;
IkReal x13375=gconst25*gconst25;
IkReal x13376=(r01*r10);
IkReal x13377=(cj3*r11);
IkReal x13378=(gconst25*gconst26);
IkReal x13379=(cj3*r10);
IkReal x13380=(r00*x13374);
IkReal x13381=((1.0)*sj3*x13378);
CheckValue<IkReal> x13382=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r10*sj3*x13380))+((r01*r11*sj3*x13375))+(((-1.0)*r00*r11*x13381))+(((-1.0)*x13376*x13381)))),-1);
if(!x13382.valid){
continue;
}
CheckValue<IkReal> x13383 = IKatan2WithCheck(IkReal((((gconst26*r02*x13377))+((gconst25*r02*x13379)))),IkReal((((cj3*x13375*x13376))+(((-1.0)*x13377*x13380))+((r01*x13377*x13378))+(((-1.0)*r00*x13378*x13379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13382.value)))+(x13383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13384=IKsin(j4);
IkReal x13385=IKcos(j4);
IkReal x13386=(sj1*sj2);
IkReal x13387=(gconst26*sj3);
IkReal x13388=(gconst25*sj3);
IkReal x13389=(gconst26*r10);
IkReal x13390=(gconst25*r11);
IkReal x13391=(cj3*gconst25);
IkReal x13392=((1.0)*cj2);
IkReal x13393=(cj1*sj2);
IkReal x13394=(gconst26*r00);
IkReal x13395=(gconst26*r20);
IkReal x13396=(cj3*gconst26);
IkReal x13397=(cj1*x13392);
IkReal x13398=((1.0)*x13385);
IkReal x13399=((1.0)*x13384);
IkReal x13400=(cj3*x13384);
IkReal x13401=(gconst25*x13384);
evalcond[0]=((((-1.0)*r22*x13398))+((r21*x13401))+(((-1.0)*x13395*x13399)));
evalcond[1]=(((r01*x13401))+(((-1.0)*x13394*x13399))+(((-1.0)*r02*x13398)));
evalcond[2]=((1.0)+(((-1.0)*x13389*x13399))+((x13384*x13390))+(((-1.0)*r12*x13398)));
evalcond[3]=(((r11*x13387))+((r10*x13388))+((r12*x13400))+((cj3*x13385*x13390))+(((-1.0)*cj3*x13389*x13398)));
evalcond[4]=(((r11*x13396))+((r10*x13391))+(((-1.0)*r11*x13388*x13398))+((r10*x13385*x13387))+(((-1.0)*r12*sj3*x13399)));
evalcond[5]=(((cj2*sj1))+((r20*x13388))+(((-1.0)*cj3*x13395*x13398))+((r22*x13400))+((r21*x13385*x13391))+x13393+((r21*x13387)));
evalcond[6]=((((-1.0)*cj3*x13394*x13398))+((r01*x13385*x13391))+((r01*x13387))+((r00*x13388))+((r02*x13400))+(((-1.0)*x13397))+x13386);
evalcond[7]=(((r21*x13396))+((r20*x13391))+(((-1.0)*r21*x13388*x13398))+(((-1.0)*r22*sj3*x13399))+(((-1.0)*x13397))+((r20*x13385*x13387))+x13386);
evalcond[8]=((((-1.0)*x13393))+((r00*x13385*x13387))+((r00*x13391))+((r01*x13396))+(((-1.0)*sj1*x13392))+(((-1.0)*r02*sj3*x13399))+(((-1.0)*r01*x13388*x13398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13402=((1.0)*gconst26);
CheckValue<IkReal> x13403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13402))+(((-1.0)*gconst25*r00)))),-1);
if(!x13403.valid){
continue;
}
CheckValue<IkReal> x13404 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13403.value)))+(x13404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13405=IKsin(j4);
IkReal x13406=IKcos(j4);
IkReal x13407=(sj1*sj2);
IkReal x13408=(gconst26*sj3);
IkReal x13409=(gconst25*sj3);
IkReal x13410=(gconst26*r10);
IkReal x13411=(gconst25*r11);
IkReal x13412=(cj3*gconst25);
IkReal x13413=((1.0)*cj2);
IkReal x13414=(cj1*sj2);
IkReal x13415=(gconst26*r00);
IkReal x13416=(gconst26*r20);
IkReal x13417=(cj3*gconst26);
IkReal x13418=(cj1*x13413);
IkReal x13419=((1.0)*x13406);
IkReal x13420=((1.0)*x13405);
IkReal x13421=(cj3*x13405);
IkReal x13422=(gconst25*x13405);
evalcond[0]=((((-1.0)*r22*x13419))+(((-1.0)*x13416*x13420))+((r21*x13422)));
evalcond[1]=((((-1.0)*x13415*x13420))+(((-1.0)*r02*x13419))+((r01*x13422)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13419))+((x13405*x13411))+(((-1.0)*x13410*x13420)));
evalcond[3]=((((-1.0)*cj3*x13410*x13419))+((r11*x13408))+((r10*x13409))+((r12*x13421))+((cj3*x13406*x13411)));
evalcond[4]=((((-1.0)*r11*x13409*x13419))+(((-1.0)*r12*sj3*x13420))+((r10*x13406*x13408))+((r10*x13412))+((r11*x13417)));
evalcond[5]=(x13414+((cj2*sj1))+((r21*x13406*x13412))+((r21*x13408))+((r22*x13421))+(((-1.0)*cj3*x13416*x13419))+((r20*x13409)));
evalcond[6]=(x13407+((r01*x13408))+((r00*x13409))+(((-1.0)*cj3*x13415*x13419))+((r02*x13421))+((r01*x13406*x13412))+(((-1.0)*x13418)));
evalcond[7]=(x13407+(((-1.0)*r21*x13409*x13419))+((r20*x13406*x13408))+((r20*x13412))+(((-1.0)*r22*sj3*x13420))+((r21*x13417))+(((-1.0)*x13418)));
evalcond[8]=((((-1.0)*r01*x13409*x13419))+(((-1.0)*x13414))+(((-1.0)*r02*sj3*x13420))+((r01*x13417))+((r00*x13412))+((r00*x13406*x13408))+(((-1.0)*sj1*x13413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13424 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13424)==0){
continue;
}
IkReal x13423=pow(x13424,-0.5);
CheckValue<IkReal> x13425 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13425.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13425.value))));
IkReal gconst28=((1.0)*r21*x13423);
IkReal gconst29=((-1.0)*r20*x13423);
CheckValue<IkReal> x13426 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13426.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13426.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13429 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13429.valid){
continue;
}
IkReal x13427=((1.0)*(x13429.value));
IkReal x13428=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13427)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13427)));
IkReal gconst28=((1.0)*r21*x13428);
IkReal gconst29=((-1.0)*r20*x13428);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13432 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13432.valid){
continue;
}
IkReal x13430=((1.0)*(x13432.value));
IkReal x13431=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13430)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13430)));
IkReal gconst28=((1.0)*r21*x13431);
IkReal gconst29=((-1.0)*r20*x13431);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13435 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13435.valid){
continue;
}
IkReal x13433=((1.0)*(x13435.value));
IkReal x13434=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13433)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13433)));
IkReal gconst28=((1.0)*r21*x13434);
IkReal gconst29=((-1.0)*r20*x13434);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13438 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13438.valid){
continue;
}
IkReal x13436=((1.0)*(x13438.value));
IkReal x13437=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13436)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13436)));
IkReal gconst28=((1.0)*r21*x13437);
IkReal gconst29=((-1.0)*r20*x13437);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13441 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13441.valid){
continue;
}
IkReal x13439=((1.0)*(x13441.value));
IkReal x13440=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13439)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13439)));
IkReal gconst28=((1.0)*r21*x13440);
IkReal gconst29=((-1.0)*r20*x13440);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13444 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13444.valid){
continue;
}
IkReal x13442=((1.0)*(x13444.value));
IkReal x13443=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13442)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13442)));
IkReal gconst28=((1.0)*r21*x13443);
IkReal gconst29=((-1.0)*r20*x13443);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13445=(gconst29*r10);
IkReal x13446=(gconst28*r11);
CheckValue<IkReal> x13447 = IKatan2WithCheck(IkReal((x13445+(((-1.0)*x13446)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13447.valid){
continue;
}
CheckValue<IkReal> x13448=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13445*x13445)+(x13446*x13446)+(((-2.0)*x13445*x13446)))),-1);
if(!x13448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13447.value)+(((1.5707963267949)*(x13448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13449=IKsin(j4);
IkReal x13450=IKcos(j4);
IkReal x13451=(gconst28*r11);
IkReal x13452=((1.0)*cj2);
IkReal x13453=((1.0)*x13450);
IkReal x13454=(gconst29*x13450);
IkReal x13455=(gconst28*x13449);
IkReal x13456=((1.0)*x13449);
IkReal x13457=(gconst29*x13456);
evalcond[0]=((((-1.0)*r22*x13453))+((r21*x13455))+(((-1.0)*r20*x13457)));
evalcond[1]=((((-1.0)*r00*x13457))+(((-1.0)*r02*x13453))+((r01*x13455)));
evalcond[2]=(((r10*x13454))+(((-1.0)*r12*x13456))+(((-1.0)*x13451*x13453)));
evalcond[3]=((1.0)+((x13449*x13451))+(((-1.0)*r10*x13457))+(((-1.0)*r12*x13453)));
evalcond[4]=((((-1.0)*r22*x13456))+((r20*x13454))+(((-1.0)*cj1*x13452))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13453)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13452))+(((-1.0)*gconst28*r01*x13453))+(((-1.0)*r02*x13456))+((r00*x13454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13458=((1.0)*gconst29);
CheckValue<IkReal> x13459 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13458))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13459.valid){
continue;
}
CheckValue<IkReal> x13460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13458))+(((-1.0)*gconst28*r00)))),-1);
if(!x13460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13459.value)+(((1.5707963267949)*(x13460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13461=IKsin(j4);
IkReal x13462=IKcos(j4);
IkReal x13463=(gconst28*r11);
IkReal x13464=((1.0)*cj2);
IkReal x13465=((1.0)*x13462);
IkReal x13466=(gconst29*x13462);
IkReal x13467=(gconst28*x13461);
IkReal x13468=((1.0)*x13461);
IkReal x13469=(gconst29*x13468);
evalcond[0]=((((-1.0)*r22*x13465))+((r21*x13467))+(((-1.0)*r20*x13469)));
evalcond[1]=((((-1.0)*r00*x13469))+(((-1.0)*r02*x13465))+((r01*x13467)));
evalcond[2]=((((-1.0)*x13463*x13465))+((r10*x13466))+(((-1.0)*r12*x13468)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13469))+((x13461*x13463))+(((-1.0)*r12*x13465)));
evalcond[4]=(((r20*x13466))+(((-1.0)*r22*x13468))+(((-1.0)*cj1*x13464))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13465)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13464))+(((-1.0)*gconst28*r01*x13465))+(((-1.0)*r02*x13468))+((r00*x13466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13470=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13470.valid){
continue;
}
CheckValue<IkReal> x13471 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13470.value)))+(x13471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13472=IKsin(j4);
IkReal x13473=IKcos(j4);
IkReal x13474=(gconst28*r11);
IkReal x13475=((1.0)*cj2);
IkReal x13476=((1.0)*x13473);
IkReal x13477=(gconst29*x13473);
IkReal x13478=(gconst28*x13472);
IkReal x13479=((1.0)*x13472);
IkReal x13480=(gconst29*x13479);
evalcond[0]=((((-1.0)*r20*x13480))+((r21*x13478))+(((-1.0)*r22*x13476)));
evalcond[1]=((((-1.0)*r00*x13480))+((r01*x13478))+(((-1.0)*r02*x13476)));
evalcond[2]=(((r10*x13477))+(((-1.0)*x13474*x13476))+(((-1.0)*r12*x13479)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13480))+((x13472*x13474))+(((-1.0)*r12*x13476)));
evalcond[4]=((((-1.0)*cj1*x13475))+(((-1.0)*gconst28*r21*x13476))+((sj1*sj2))+((r20*x13477))+(((-1.0)*r22*x13479)));
evalcond[5]=(((r00*x13477))+(((-1.0)*r02*x13479))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13475))+(((-1.0)*gconst28*r01*x13476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13483 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13483.valid){
continue;
}
IkReal x13481=((1.0)*(x13483.value));
IkReal x13482=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13481)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13481)));
IkReal gconst28=((1.0)*r21*x13482);
IkReal gconst29=((-1.0)*r20*x13482);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13486 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13486.valid){
continue;
}
IkReal x13484=((1.0)*(x13486.value));
IkReal x13485=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13484)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13484)));
IkReal gconst28=((1.0)*r21*x13485);
IkReal gconst29=((-1.0)*r20*x13485);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13489 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13489.valid){
continue;
}
IkReal x13487=((1.0)*(x13489.value));
IkReal x13488=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13487)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13487)));
IkReal gconst28=((1.0)*r21*x13488);
IkReal gconst29=((-1.0)*r20*x13488);
IkReal x13490=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13494=IKPowWithIntegerCheck(x13490,-1);
if(!x13494.valid){
continue;
}
IkReal x13491=x13494.value;
IkReal x13492=((1.0)*x13491);
IkReal x13493=((((-2.0)*r10*r11*r20*r21*x13491))+(((-1.0)*(r12*r12)))+(((-1.0)*x13492*(r11*r11)*(r21*r21)))+(((-1.0)*x13492*(r10*r10)*(r20*r20))));
j4eval[0]=x13493;
j4eval[1]=r12;
j4eval[2]=x13490;
j4eval[3]=IKsign(x13493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13495=(gconst28*r11);
IkReal x13496=(gconst29*r10);
CheckValue<IkReal> x13497=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x13495*x13496))+(((-1.0)*(x13496*x13496)))+(((-1.0)*(x13495*x13495))))),-1);
if(!x13497.valid){
continue;
}
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal((x13495+(((-1.0)*x13496)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13497.value)))+(x13498.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13499=IKcos(j4);
IkReal x13500=IKsin(j4);
IkReal x13501=(gconst29*r10);
IkReal x13502=(gconst29*r20);
IkReal x13503=(gconst28*r21);
IkReal x13504=((1.0)*cj2);
IkReal x13505=(gconst29*r00);
IkReal x13506=((1.0)*x13499);
IkReal x13507=((1.0)*x13500);
IkReal x13508=(gconst28*x13499);
IkReal x13509=(gconst28*x13500);
evalcond[0]=((((-1.0)*x13501*x13506))+((r11*x13508))+((r12*x13500)));
evalcond[1]=((((-1.0)*x13502*x13507))+((x13500*x13503))+(((-1.0)*r22*x13506)));
evalcond[2]=((((-1.0)*x13505*x13507))+(((-1.0)*r02*x13506))+((r01*x13509)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13506))+(((-1.0)*x13501*x13507))+((r11*x13509)));
evalcond[4]=(((x13499*x13503))+((sj1*sj2))+((r22*x13500))+(((-1.0)*cj1*x13504))+(((-1.0)*x13502*x13506)));
evalcond[5]=((((-1.0)*sj1*x13504))+((r02*x13500))+(((-1.0)*cj1*sj2))+(((-1.0)*x13505*x13506))+((r01*x13508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13510=((1.0)*gconst29);
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13510))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
CheckValue<IkReal> x13512=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13510)))),-1);
if(!x13512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13511.value)+(((1.5707963267949)*(x13512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13513=IKcos(j4);
IkReal x13514=IKsin(j4);
IkReal x13515=(gconst29*r10);
IkReal x13516=(gconst29*r20);
IkReal x13517=(gconst28*r21);
IkReal x13518=((1.0)*cj2);
IkReal x13519=(gconst29*r00);
IkReal x13520=((1.0)*x13513);
IkReal x13521=((1.0)*x13514);
IkReal x13522=(gconst28*x13513);
IkReal x13523=(gconst28*x13514);
evalcond[0]=((((-1.0)*x13515*x13520))+((r11*x13522))+((r12*x13514)));
evalcond[1]=((((-1.0)*r22*x13520))+(((-1.0)*x13516*x13521))+((x13514*x13517)));
evalcond[2]=(((r01*x13523))+(((-1.0)*r02*x13520))+(((-1.0)*x13519*x13521)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13520))+(((-1.0)*x13515*x13521))+((r11*x13523)));
evalcond[4]=(((x13513*x13517))+((r22*x13514))+(((-1.0)*cj1*x13518))+((sj1*sj2))+(((-1.0)*x13516*x13520)));
evalcond[5]=(((r01*x13522))+(((-1.0)*sj1*x13518))+((r02*x13514))+(((-1.0)*cj1*sj2))+(((-1.0)*x13519*x13520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13524=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13524.valid){
continue;
}
CheckValue<IkReal> x13525 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13524.value)))+(x13525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13526=IKcos(j4);
IkReal x13527=IKsin(j4);
IkReal x13528=(gconst29*r10);
IkReal x13529=(gconst29*r20);
IkReal x13530=(gconst28*r21);
IkReal x13531=((1.0)*cj2);
IkReal x13532=(gconst29*r00);
IkReal x13533=((1.0)*x13526);
IkReal x13534=((1.0)*x13527);
IkReal x13535=(gconst28*x13526);
IkReal x13536=(gconst28*x13527);
evalcond[0]=((((-1.0)*x13528*x13533))+((r12*x13527))+((r11*x13535)));
evalcond[1]=((((-1.0)*r22*x13533))+((x13527*x13530))+(((-1.0)*x13529*x13534)));
evalcond[2]=((((-1.0)*x13532*x13534))+(((-1.0)*r02*x13533))+((r01*x13536)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13533))+(((-1.0)*x13528*x13534))+((r11*x13536)));
evalcond[4]=(((x13526*x13530))+(((-1.0)*cj1*x13531))+((sj1*sj2))+(((-1.0)*x13529*x13533))+((r22*x13527)));
evalcond[5]=(((r02*x13527))+(((-1.0)*sj1*x13531))+(((-1.0)*cj1*sj2))+(((-1.0)*x13532*x13533))+((r01*x13535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13539 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13539.valid){
continue;
}
IkReal x13537=((1.0)*(x13539.value));
IkReal x13538=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13537)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13537)));
IkReal gconst28=((1.0)*r21*x13538);
IkReal gconst29=((-1.0)*r20*x13538);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13542 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13542.valid){
continue;
}
IkReal x13540=((1.0)*(x13542.value));
IkReal x13541=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13540)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13540)));
IkReal gconst28=((1.0)*r21*x13541);
IkReal gconst29=((-1.0)*r20*x13541);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13545 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13545.valid){
continue;
}
IkReal x13543=((1.0)*(x13545.value));
IkReal x13544=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13543)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13543)));
IkReal gconst28=((1.0)*r21*x13544);
IkReal gconst29=((-1.0)*r20*x13544);
IkReal x13546=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13550=IKPowWithIntegerCheck(x13546,-1);
if(!x13550.valid){
continue;
}
IkReal x13547=x13550.value;
IkReal x13548=((1.0)*x13547);
IkReal x13549=((((-1.0)*x13548*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13548*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13547)));
j4eval[0]=x13549;
j4eval[1]=r12;
j4eval[2]=x13546;
j4eval[3]=IKsign(x13549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13551=(gconst28*r11);
IkReal x13552=(gconst29*r10);
CheckValue<IkReal> x13553=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13552*x13552)))+(((-1.0)*(x13551*x13551)))+(((2.0)*x13551*x13552))+(((-1.0)*(r12*r12))))),-1);
if(!x13553.valid){
continue;
}
CheckValue<IkReal> x13554 = IKatan2WithCheck(IkReal((x13551+(((-1.0)*x13552)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13553.value)))+(x13554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13555=IKcos(j4);
IkReal x13556=IKsin(j4);
IkReal x13557=(gconst29*r10);
IkReal x13558=(gconst29*r20);
IkReal x13559=(gconst28*r21);
IkReal x13560=(gconst29*r00);
IkReal x13561=((1.0)*x13555);
IkReal x13562=((1.0)*x13556);
IkReal x13563=(gconst28*x13555);
IkReal x13564=(gconst28*x13556);
evalcond[0]=(((r12*x13556))+((r11*x13563))+(((-1.0)*x13557*x13561)));
evalcond[1]=(((x13556*x13559))+(((-1.0)*r22*x13561))+(((-1.0)*x13558*x13562)));
evalcond[2]=(((r01*x13564))+(((-1.0)*r02*x13561))+(((-1.0)*x13560*x13562)));
evalcond[3]=((1.0)+((r11*x13564))+(((-1.0)*r12*x13561))+(((-1.0)*x13557*x13562)));
evalcond[4]=(((cj2*sj1))+((r22*x13556))+((cj1*sj2))+((x13555*x13559))+(((-1.0)*x13558*x13561)));
evalcond[5]=(((r01*x13563))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13560*x13561))+((r02*x13556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13565=((1.0)*gconst29);
CheckValue<IkReal> x13566 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13566.valid){
continue;
}
CheckValue<IkReal> x13567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13565)))),-1);
if(!x13567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13566.value)+(((1.5707963267949)*(x13567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13568=IKcos(j4);
IkReal x13569=IKsin(j4);
IkReal x13570=(gconst29*r10);
IkReal x13571=(gconst29*r20);
IkReal x13572=(gconst28*r21);
IkReal x13573=(gconst29*r00);
IkReal x13574=((1.0)*x13568);
IkReal x13575=((1.0)*x13569);
IkReal x13576=(gconst28*x13568);
IkReal x13577=(gconst28*x13569);
evalcond[0]=((((-1.0)*x13570*x13574))+((r11*x13576))+((r12*x13569)));
evalcond[1]=((((-1.0)*r22*x13574))+((x13569*x13572))+(((-1.0)*x13571*x13575)));
evalcond[2]=((((-1.0)*r02*x13574))+(((-1.0)*x13573*x13575))+((r01*x13577)));
evalcond[3]=((1.0)+(((-1.0)*x13570*x13575))+((r11*x13577))+(((-1.0)*r12*x13574)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13568*x13572))+(((-1.0)*x13571*x13574))+((r22*x13569)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13573*x13574))+((r02*x13569))+((r01*x13576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13578=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13578.valid){
continue;
}
CheckValue<IkReal> x13579 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13578.value)))+(x13579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13580=IKcos(j4);
IkReal x13581=IKsin(j4);
IkReal x13582=(gconst29*r10);
IkReal x13583=(gconst29*r20);
IkReal x13584=(gconst28*r21);
IkReal x13585=(gconst29*r00);
IkReal x13586=((1.0)*x13580);
IkReal x13587=((1.0)*x13581);
IkReal x13588=(gconst28*x13580);
IkReal x13589=(gconst28*x13581);
evalcond[0]=(((r12*x13581))+((r11*x13588))+(((-1.0)*x13582*x13586)));
evalcond[1]=((((-1.0)*x13583*x13587))+((x13581*x13584))+(((-1.0)*r22*x13586)));
evalcond[2]=((((-1.0)*r02*x13586))+(((-1.0)*x13585*x13587))+((r01*x13589)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13586))+((r11*x13589))+(((-1.0)*x13582*x13587)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13580*x13584))+(((-1.0)*x13583*x13586))+((r22*x13581)));
evalcond[5]=((((-1.0)*x13585*x13586))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13588))+((r02*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13592 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13592.valid){
continue;
}
IkReal x13590=((1.0)*(x13592.value));
IkReal x13591=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13590)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13590)));
IkReal gconst28=((1.0)*r21*x13591);
IkReal gconst29=((-1.0)*r20*x13591);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13595 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13595.valid){
continue;
}
IkReal x13593=((1.0)*(x13595.value));
IkReal x13594=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13593)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13593)));
IkReal gconst28=((1.0)*r21*x13594);
IkReal gconst29=((-1.0)*r20*x13594);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13598 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13598.valid){
continue;
}
IkReal x13596=((1.0)*(x13598.value));
IkReal x13597=x13423;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13596)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13596)));
IkReal gconst28=((1.0)*r21*x13597);
IkReal gconst29=((-1.0)*r20*x13597);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13599=(gconst29*r10);
IkReal x13600=(gconst28*r11);
CheckValue<IkReal> x13601=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13599*x13599)+(x13600*x13600)+(((-2.0)*x13599*x13600)))),-1);
if(!x13601.valid){
continue;
}
CheckValue<IkReal> x13602 = IKatan2WithCheck(IkReal(((((-1.0)*x13600))+x13599)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13601.value)))+(x13602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13603=IKsin(j4);
IkReal x13604=IKcos(j4);
IkReal x13605=(gconst28*r11);
IkReal x13606=((1.0)*x13604);
IkReal x13607=(gconst29*x13604);
IkReal x13608=(gconst28*x13603);
IkReal x13609=((1.0)*x13603);
IkReal x13610=(gconst29*x13609);
evalcond[0]=((((-1.0)*r20*x13610))+(((-1.0)*r22*x13606))+((r21*x13608)));
evalcond[1]=((((-1.0)*r02*x13606))+(((-1.0)*r00*x13610))+((r01*x13608)));
evalcond[2]=(((r10*x13607))+(((-1.0)*x13605*x13606))+(((-1.0)*r12*x13609)));
evalcond[3]=((1.0)+((x13603*x13605))+(((-1.0)*r10*x13610))+(((-1.0)*r12*x13606)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13606))+(((-1.0)*r22*x13609))+((r20*x13607)));
evalcond[5]=((((-1.0)*r02*x13609))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13606))+((r00*x13607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13611=((1.0)*gconst29);
CheckValue<IkReal> x13612 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13611))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13612.valid){
continue;
}
CheckValue<IkReal> x13613=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13611)))),-1);
if(!x13613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13612.value)+(((1.5707963267949)*(x13613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13614=IKsin(j4);
IkReal x13615=IKcos(j4);
IkReal x13616=(gconst28*r11);
IkReal x13617=((1.0)*x13615);
IkReal x13618=(gconst29*x13615);
IkReal x13619=(gconst28*x13614);
IkReal x13620=((1.0)*x13614);
IkReal x13621=(gconst29*x13620);
evalcond[0]=(((r21*x13619))+(((-1.0)*r20*x13621))+(((-1.0)*r22*x13617)));
evalcond[1]=((((-1.0)*r00*x13621))+(((-1.0)*r02*x13617))+((r01*x13619)));
evalcond[2]=((((-1.0)*x13616*x13617))+((r10*x13618))+(((-1.0)*r12*x13620)));
evalcond[3]=((1.0)+((x13614*x13616))+(((-1.0)*r10*x13621))+(((-1.0)*r12*x13617)));
evalcond[4]=((((-1.0)*gconst28*r21*x13617))+((cj2*sj1))+((cj1*sj2))+((r20*x13618))+(((-1.0)*r22*x13620)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13618))+(((-1.0)*gconst28*r01*x13617))+(((-1.0)*r02*x13620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13622=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13622.valid){
continue;
}
CheckValue<IkReal> x13623 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13622.value)))+(x13623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13624=IKsin(j4);
IkReal x13625=IKcos(j4);
IkReal x13626=(gconst28*r11);
IkReal x13627=((1.0)*x13625);
IkReal x13628=(gconst29*x13625);
IkReal x13629=(gconst28*x13624);
IkReal x13630=((1.0)*x13624);
IkReal x13631=(gconst29*x13630);
evalcond[0]=(((r21*x13629))+(((-1.0)*r22*x13627))+(((-1.0)*r20*x13631)));
evalcond[1]=((((-1.0)*r00*x13631))+((r01*x13629))+(((-1.0)*r02*x13627)));
evalcond[2]=(((r10*x13628))+(((-1.0)*x13626*x13627))+(((-1.0)*r12*x13630)));
evalcond[3]=((1.0)+((x13624*x13626))+(((-1.0)*r12*x13627))+(((-1.0)*r10*x13631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13627))+(((-1.0)*r22*x13630))+((r20*x13628)));
evalcond[5]=((((-1.0)*r02*x13630))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13627))+((r00*x13628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13632=gconst28*gconst28;
IkReal x13633=gconst29*gconst29;
IkReal x13634=(r11*r21);
IkReal x13635=(gconst29*sj3);
IkReal x13636=((1.0)*cj3);
IkReal x13637=(r10*r20);
IkReal x13638=(r10*r21);
IkReal x13639=(r11*r20);
IkReal x13640=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13641 = IKatan2WithCheck(IkReal((((r11*r22*x13635))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13634*x13635))+((sj3*x13632*x13638))+(((-1.0)*gconst28*x13635*x13637))+(((-1.0)*sj3*x13633*x13639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13641.valid){
continue;
}
CheckValue<IkReal> x13642=IKPowWithIntegerCheck(IKsign((((x13639*x13640))+(((-1.0)*r12*r22*x13636))+(((-1.0)*x13632*x13634*x13636))+((x13638*x13640))+(((-1.0)*x13633*x13636*x13637)))),-1);
if(!x13642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13641.value)+(((1.5707963267949)*(x13642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13643=IKsin(j4);
IkReal x13644=IKcos(j4);
IkReal x13645=(sj1*sj2);
IkReal x13646=(gconst29*r20);
IkReal x13647=(gconst28*r20);
IkReal x13648=((1.0)*cj2);
IkReal x13649=(r11*sj3);
IkReal x13650=(cj1*sj2);
IkReal x13651=(gconst29*r01);
IkReal x13652=(gconst29*r10);
IkReal x13653=(cj3*gconst28);
IkReal x13654=(cj3*gconst29);
IkReal x13655=(gconst28*sj3);
IkReal x13656=(gconst29*r00);
IkReal x13657=(cj1*x13648);
IkReal x13658=((1.0)*x13644);
IkReal x13659=((1.0)*x13643);
IkReal x13660=(gconst28*x13643);
IkReal x13661=(cj3*x13643);
IkReal x13662=(sj3*x13644);
evalcond[0]=((((-1.0)*r22*x13658))+((r21*x13660))+(((-1.0)*x13646*x13659)));
evalcond[1]=((((-1.0)*r02*x13658))+((r01*x13660))+(((-1.0)*x13656*x13659)));
evalcond[2]=((1.0)+((r11*x13660))+(((-1.0)*r12*x13658))+(((-1.0)*x13652*x13659)));
evalcond[3]=(((r12*x13661))+((r10*x13655))+((gconst29*x13649))+(((-1.0)*cj3*x13652*x13658))+((r11*x13644*x13653)));
evalcond[4]=((((-1.0)*gconst28*x13649*x13658))+((r10*x13653))+(((-1.0)*r12*sj3*x13659))+((r11*x13654))+((x13652*x13662)));
evalcond[5]=(((cj2*sj1))+x13650+((gconst29*r21*sj3))+((r22*x13661))+((sj3*x13647))+((r21*x13644*x13653))+(((-1.0)*cj3*x13646*x13658)));
evalcond[6]=(x13645+((r00*x13655))+(((-1.0)*r00*x13654*x13658))+((r02*x13661))+((r01*x13644*x13653))+((sj3*x13651))+(((-1.0)*x13657)));
evalcond[7]=(x13645+((r21*x13654))+(((-1.0)*r22*sj3*x13659))+(((-1.0)*r21*x13655*x13658))+(((-1.0)*x13657))+((x13646*x13662))+((cj3*x13647)));
evalcond[8]=((((-1.0)*sj1*x13648))+((r00*x13653))+(((-1.0)*r02*sj3*x13659))+(((-1.0)*x13650))+((x13656*x13662))+((cj3*x13651))+(((-1.0)*r01*x13655*x13658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13663=((1.0)*gconst29);
CheckValue<IkReal> x13664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13663))+(((-1.0)*gconst28*r00)))),-1);
if(!x13664.valid){
continue;
}
CheckValue<IkReal> x13665 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13663))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13664.value)))+(x13665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13666=IKsin(j4);
IkReal x13667=IKcos(j4);
IkReal x13668=(sj1*sj2);
IkReal x13669=(gconst29*r20);
IkReal x13670=(gconst28*r20);
IkReal x13671=((1.0)*cj2);
IkReal x13672=(r11*sj3);
IkReal x13673=(cj1*sj2);
IkReal x13674=(gconst29*r01);
IkReal x13675=(gconst29*r10);
IkReal x13676=(cj3*gconst28);
IkReal x13677=(cj3*gconst29);
IkReal x13678=(gconst28*sj3);
IkReal x13679=(gconst29*r00);
IkReal x13680=(cj1*x13671);
IkReal x13681=((1.0)*x13667);
IkReal x13682=((1.0)*x13666);
IkReal x13683=(gconst28*x13666);
IkReal x13684=(cj3*x13666);
IkReal x13685=(sj3*x13667);
evalcond[0]=((((-1.0)*x13669*x13682))+(((-1.0)*r22*x13681))+((r21*x13683)));
evalcond[1]=((((-1.0)*x13679*x13682))+((r01*x13683))+(((-1.0)*r02*x13681)));
evalcond[2]=((1.0)+(((-1.0)*x13675*x13682))+((r11*x13683))+(((-1.0)*r12*x13681)));
evalcond[3]=(((r12*x13684))+((gconst29*x13672))+((r11*x13667*x13676))+(((-1.0)*cj3*x13675*x13681))+((r10*x13678)));
evalcond[4]=((((-1.0)*r12*sj3*x13682))+(((-1.0)*gconst28*x13672*x13681))+((r11*x13677))+((x13675*x13685))+((r10*x13676)));
evalcond[5]=(((cj2*sj1))+x13673+((gconst29*r21*sj3))+((r22*x13684))+(((-1.0)*cj3*x13669*x13681))+((r21*x13667*x13676))+((sj3*x13670)));
evalcond[6]=(x13668+((r02*x13684))+(((-1.0)*r00*x13677*x13681))+((r01*x13667*x13676))+((r00*x13678))+(((-1.0)*x13680))+((sj3*x13674)));
evalcond[7]=((((-1.0)*r21*x13678*x13681))+x13668+((cj3*x13670))+((x13669*x13685))+(((-1.0)*x13680))+((r21*x13677))+(((-1.0)*r22*sj3*x13682)));
evalcond[8]=(((x13679*x13685))+(((-1.0)*r02*sj3*x13682))+((cj3*x13674))+(((-1.0)*sj1*x13671))+((r00*x13676))+(((-1.0)*x13673))+(((-1.0)*r01*x13678*x13681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13686=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13686.valid){
continue;
}
CheckValue<IkReal> x13687 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13686.value)))+(x13687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13688=IKsin(j4);
IkReal x13689=IKcos(j4);
IkReal x13690=(sj1*sj2);
IkReal x13691=(gconst29*r20);
IkReal x13692=(gconst28*r20);
IkReal x13693=((1.0)*cj2);
IkReal x13694=(r11*sj3);
IkReal x13695=(cj1*sj2);
IkReal x13696=(gconst29*r01);
IkReal x13697=(gconst29*r10);
IkReal x13698=(cj3*gconst28);
IkReal x13699=(cj3*gconst29);
IkReal x13700=(gconst28*sj3);
IkReal x13701=(gconst29*r00);
IkReal x13702=(cj1*x13693);
IkReal x13703=((1.0)*x13689);
IkReal x13704=((1.0)*x13688);
IkReal x13705=(gconst28*x13688);
IkReal x13706=(cj3*x13688);
IkReal x13707=(sj3*x13689);
evalcond[0]=((((-1.0)*r22*x13703))+((r21*x13705))+(((-1.0)*x13691*x13704)));
evalcond[1]=((((-1.0)*x13701*x13704))+((r01*x13705))+(((-1.0)*r02*x13703)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13703))+(((-1.0)*x13697*x13704))+((r11*x13705)));
evalcond[3]=(((r12*x13706))+(((-1.0)*cj3*x13697*x13703))+((r11*x13689*x13698))+((r10*x13700))+((gconst29*x13694)));
evalcond[4]=(((x13697*x13707))+((r10*x13698))+(((-1.0)*gconst28*x13694*x13703))+((r11*x13699))+(((-1.0)*r12*sj3*x13704)));
evalcond[5]=(((cj2*sj1))+((sj3*x13692))+((r21*x13689*x13698))+x13695+((gconst29*r21*sj3))+((r22*x13706))+(((-1.0)*cj3*x13691*x13703)));
evalcond[6]=(((sj3*x13696))+x13690+((r01*x13689*x13698))+((r00*x13700))+(((-1.0)*r00*x13699*x13703))+((r02*x13706))+(((-1.0)*x13702)));
evalcond[7]=(x13690+(((-1.0)*r21*x13700*x13703))+((r21*x13699))+(((-1.0)*r22*sj3*x13704))+((x13691*x13707))+((cj3*x13692))+(((-1.0)*x13702)));
evalcond[8]=(((r00*x13698))+(((-1.0)*r01*x13700*x13703))+(((-1.0)*sj1*x13693))+((cj3*x13696))+(((-1.0)*r02*sj3*x13704))+(((-1.0)*x13695))+((x13701*x13707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13708=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13708);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13708);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13709=(r11*sj5);
IkReal x13710=((1.0)*cj5*r10);
j4eval[0]=(x13709+(((-1.0)*x13710)));
j4eval[1]=((((-1.0)*cj3*x13710))+((cj3*x13709)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13711=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13711);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13711);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13712=(cj5*r10);
IkReal x13713=(r11*sj5);
j4eval[0]=((((-1.0)*x13712))+x13713);
j4eval[1]=(((sj3*x13712))+(((-1.0)*sj3*x13713)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13714=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13714);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13714);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13715=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13715);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13715);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13716=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13716)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13716)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13717=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13717);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13717);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13718=((1.0)*sj1);
CheckValue<IkReal> x13719=IKPowWithIntegerCheck(r22,-1);
if(!x13719.valid){
continue;
}
CheckValue<IkReal> x13720=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13720.valid){
continue;
}
if( IKabs(((x13719.value)*(((((-1.0)*cj2*x13718))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13720.value)*(((((-1.0)*sj2*x13718))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13719.value)*(((((-1.0)*cj2*x13718))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13720.value)*(((((-1.0)*sj2*x13718))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13719.value)*(((((-1.0)*cj2*x13718))+(((-1.0)*cj1*sj2))))), ((x13720.value)*(((((-1.0)*sj2*x13718))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13721=IKsin(j4);
IkReal x13722=IKcos(j4);
IkReal x13723=((1.0)*cj5);
IkReal x13724=(sj5*x13722);
IkReal x13725=(sj5*x13721);
evalcond[0]=((-1.0)*r22*x13722);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13721)));
evalcond[2]=((((-1.0)*r00*x13721*x13723))+((r01*x13725)));
evalcond[3]=(((r11*x13724))+(((-1.0)*r10*x13722*x13723)));
evalcond[4]=((1.0)+((r11*x13725))+(((-1.0)*r10*x13721*x13723)));
evalcond[5]=(((r01*x13724))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13722*x13723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13726=((1.0)*cj5);
CheckValue<IkReal> x13727=IKPowWithIntegerCheck(((((-1.0)*r10*x13726))+((r11*sj5))),-1);
if(!x13727.valid){
continue;
}
CheckValue<IkReal> x13728=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13726))),-1);
if(!x13728.valid){
continue;
}
if( IKabs(((-1.0)*(x13727.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13728.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13727.value)))+IKsqr(((x13728.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13727.value)), ((x13728.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13729=IKsin(j4);
IkReal x13730=IKcos(j4);
IkReal x13731=((1.0)*cj5);
IkReal x13732=(sj5*x13730);
IkReal x13733=(sj5*x13729);
evalcond[0]=((-1.0)*r22*x13730);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13729)));
evalcond[2]=(((r01*x13733))+(((-1.0)*r00*x13729*x13731)));
evalcond[3]=((((-1.0)*r10*x13730*x13731))+((r11*x13732)));
evalcond[4]=((1.0)+((r11*x13733))+(((-1.0)*r10*x13729*x13731)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13730*x13731))+((r01*x13732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13734=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13734);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13734);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13735=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13735);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13735);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13736=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13736.valid){
continue;
}
CheckValue<IkReal> x13737=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13737.valid){
continue;
}
if( IKabs(((-1.0)*(x13736.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13737.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13736.value)))+IKsqr(((x13737.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13736.value)), ((x13737.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13738=IKsin(j4);
IkReal x13739=IKcos(j4);
IkReal x13740=(cj5*x13739);
IkReal x13741=(sj5*x13738);
IkReal x13742=((1.0)*cj5*x13738);
IkReal x13743=((1.0)*sj5*x13739);
evalcond[0]=((-1.0)*r22*x13739);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13738)));
evalcond[2]=(((r01*x13741))+(((-1.0)*r00*x13742)));
evalcond[3]=((((-1.0)*r11*x13743))+((r10*x13740)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13742))+((r11*x13741)));
evalcond[5]=((((-1.0)*r01*x13743))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13744=IKPowWithIntegerCheck(r22,-1);
if(!x13744.valid){
continue;
}
CheckValue<IkReal> x13745=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13745.valid){
continue;
}
if( IKabs(((x13744.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13745.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13744.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13745.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13744.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13745.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13746=IKsin(j4);
IkReal x13747=IKcos(j4);
IkReal x13748=(cj5*x13747);
IkReal x13749=(sj5*x13746);
IkReal x13750=((1.0)*cj5*x13746);
IkReal x13751=((1.0)*sj5*x13747);
evalcond[0]=((-1.0)*r22*x13747);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13746)));
evalcond[2]=(((r01*x13749))+(((-1.0)*r00*x13750)));
evalcond[3]=(((r10*x13748))+(((-1.0)*r11*x13751)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13750))+((r11*x13749)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13751))+((r00*x13748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13752=((1.0)*r10);
CheckValue<IkReal> x13753=IKPowWithIntegerCheck(cj3,-1);
if(!x13753.valid){
continue;
}
CheckValue<IkReal> x13754=IKPowWithIntegerCheck(r22,-1);
if(!x13754.valid){
continue;
}
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13752))+((cj3*r11*sj5))),-1);
if(!x13755.valid){
continue;
}
if( IKabs(((x13753.value)*(x13754.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13755.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13752)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13753.value)*(x13754.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13755.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13752))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13753.value)*(x13754.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13755.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13752))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13756=IKsin(j4);
IkReal x13757=IKcos(j4);
IkReal x13758=(sj1*sj2);
IkReal x13759=(r11*sj5);
IkReal x13760=(r00*sj3);
IkReal x13761=(cj5*r01);
IkReal x13762=((1.0)*cj1);
IkReal x13763=(cj3*sj5);
IkReal x13764=(cj5*r11);
IkReal x13765=(r10*sj3);
IkReal x13766=(cj2*sj1);
IkReal x13767=((1.0)*cj5);
IkReal x13768=((1.0)*sj3);
IkReal x13769=(r01*sj5);
IkReal x13770=(cj2*x13762);
IkReal x13771=(cj3*x13757);
IkReal x13772=(r22*x13756);
IkReal x13773=(cj5*x13757);
IkReal x13774=(x13756*x13767);
evalcond[0]=((-1.0)*r22*x13757);
evalcond[1]=(x13766+((cj1*sj2))+((cj3*x13772)));
evalcond[2]=((((-1.0)*r00*x13774))+((x13756*x13769)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13774))+((x13756*x13759)));
evalcond[4]=((((-1.0)*x13770))+x13758+(((-1.0)*x13768*x13772)));
evalcond[5]=(((sj5*x13765))+((sj3*x13764))+(((-1.0)*r10*x13767*x13771))+((x13759*x13771)));
evalcond[6]=((((-1.0)*x13757*x13759*x13768))+((r10*x13763))+((cj3*x13764))+((x13765*x13773)));
evalcond[7]=((((-1.0)*x13770))+((sj5*x13760))+x13758+((sj3*x13761))+((r01*x13757*x13763))+(((-1.0)*r00*x13767*x13771)));
evalcond[8]=((((-1.0)*x13766))+(((-1.0)*x13757*x13768*x13769))+((x13760*x13773))+(((-1.0)*sj2*x13762))+((r00*x13763))+((cj3*x13761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13775=(cj5*r10);
IkReal x13776=((1.0)*r11);
CheckValue<IkReal> x13777=IKPowWithIntegerCheck(((((-1.0)*x13775))+((r11*sj5))),-1);
if(!x13777.valid){
continue;
}
CheckValue<IkReal> x13778=IKPowWithIntegerCheck((((sj3*x13775))+(((-1.0)*sj3*sj5*x13776))),-1);
if(!x13778.valid){
continue;
}
if( IKabs(((-1.0)*(x13777.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13778.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13776)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13777.value)))+IKsqr(((x13778.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13776))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13777.value)), ((x13778.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13776))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13779=IKsin(j4);
IkReal x13780=IKcos(j4);
IkReal x13781=(sj1*sj2);
IkReal x13782=(r11*sj5);
IkReal x13783=(r00*sj3);
IkReal x13784=(cj5*r01);
IkReal x13785=((1.0)*cj1);
IkReal x13786=(cj3*sj5);
IkReal x13787=(cj5*r11);
IkReal x13788=(r10*sj3);
IkReal x13789=(cj2*sj1);
IkReal x13790=((1.0)*cj5);
IkReal x13791=((1.0)*sj3);
IkReal x13792=(r01*sj5);
IkReal x13793=(cj2*x13785);
IkReal x13794=(cj3*x13780);
IkReal x13795=(r22*x13779);
IkReal x13796=(cj5*x13780);
IkReal x13797=(x13779*x13790);
evalcond[0]=((-1.0)*r22*x13780);
evalcond[1]=(x13789+((cj1*sj2))+((cj3*x13795)));
evalcond[2]=(((x13779*x13792))+(((-1.0)*r00*x13797)));
evalcond[3]=((1.0)+((x13779*x13782))+(((-1.0)*r10*x13797)));
evalcond[4]=(x13781+(((-1.0)*x13791*x13795))+(((-1.0)*x13793)));
evalcond[5]=((((-1.0)*r10*x13790*x13794))+((x13782*x13794))+((sj3*x13787))+((sj5*x13788)));
evalcond[6]=(((cj3*x13787))+(((-1.0)*x13780*x13782*x13791))+((r10*x13786))+((x13788*x13796)));
evalcond[7]=((((-1.0)*r00*x13790*x13794))+x13781+((r01*x13780*x13786))+(((-1.0)*x13793))+((sj3*x13784))+((sj5*x13783)));
evalcond[8]=((((-1.0)*x13780*x13791*x13792))+((r00*x13786))+((x13783*x13796))+(((-1.0)*sj2*x13785))+(((-1.0)*x13789))+((cj3*x13784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13798=((1.0)*sj3);
IkReal x13799=(r11*sj5);
IkReal x13800=((1.0)*cj5*r10);
CheckValue<IkReal> x13801=IKPowWithIntegerCheck(((((-1.0)*x13800))+x13799),-1);
if(!x13801.valid){
continue;
}
CheckValue<IkReal> x13802=IKPowWithIntegerCheck(((((-1.0)*cj3*x13800))+((cj3*x13799))),-1);
if(!x13802.valid){
continue;
}
if( IKabs(((-1.0)*(x13801.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13802.value)*(((((-1.0)*cj5*r11*x13798))+(((-1.0)*r10*sj5*x13798)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13801.value)))+IKsqr(((x13802.value)*(((((-1.0)*cj5*r11*x13798))+(((-1.0)*r10*sj5*x13798))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13801.value)), ((x13802.value)*(((((-1.0)*cj5*r11*x13798))+(((-1.0)*r10*sj5*x13798))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13803=IKsin(j4);
IkReal x13804=IKcos(j4);
IkReal x13805=(sj1*sj2);
IkReal x13806=(r11*sj5);
IkReal x13807=(r00*sj3);
IkReal x13808=(cj5*r01);
IkReal x13809=((1.0)*cj1);
IkReal x13810=(cj3*sj5);
IkReal x13811=(cj5*r11);
IkReal x13812=(r10*sj3);
IkReal x13813=(cj2*sj1);
IkReal x13814=((1.0)*cj5);
IkReal x13815=((1.0)*sj3);
IkReal x13816=(r01*sj5);
IkReal x13817=(cj2*x13809);
IkReal x13818=(cj3*x13804);
IkReal x13819=(r22*x13803);
IkReal x13820=(cj5*x13804);
IkReal x13821=(x13803*x13814);
evalcond[0]=((-1.0)*r22*x13804);
evalcond[1]=(x13813+((cj1*sj2))+((cj3*x13819)));
evalcond[2]=(((x13803*x13816))+(((-1.0)*r00*x13821)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13821))+((x13803*x13806)));
evalcond[4]=((((-1.0)*x13817))+x13805+(((-1.0)*x13815*x13819)));
evalcond[5]=(((sj3*x13811))+((sj5*x13812))+((x13806*x13818))+(((-1.0)*r10*x13814*x13818)));
evalcond[6]=(((r10*x13810))+((x13812*x13820))+((cj3*x13811))+(((-1.0)*x13804*x13806*x13815)));
evalcond[7]=(((r01*x13804*x13810))+(((-1.0)*x13817))+(((-1.0)*r00*x13814*x13818))+x13805+((sj5*x13807))+((sj3*x13808)));
evalcond[8]=(((r00*x13810))+(((-1.0)*x13813))+((x13807*x13820))+(((-1.0)*x13804*x13815*x13816))+(((-1.0)*sj2*x13809))+((cj3*x13808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13822=cj5*cj5;
IkReal x13823=((1.0)*cj3);
IkReal x13824=(r10*r21);
IkReal x13825=(cj5*sj5);
IkReal x13826=(r11*r21);
IkReal x13827=(r11*r20);
IkReal x13828=(r22*sj3);
IkReal x13829=(r10*r20);
IkReal x13830=((1.0)*sj3*x13822);
CheckValue<IkReal> x13831 = IKatan2WithCheck(IkReal((((cj5*r11*x13828))+((r10*sj5*x13828)))),IkReal(((((-1.0)*sj3*x13825*x13829))+(((-1.0)*x13827*x13830))+(((-1.0)*x13824*x13830))+((sj3*x13824))+((sj3*x13825*x13826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13831.valid){
continue;
}
CheckValue<IkReal> x13832=IKPowWithIntegerCheck(IKsign((((cj3*x13824*x13825))+((cj3*x13825*x13827))+((cj3*x13822*x13826))+(((-1.0)*x13822*x13823*x13829))+(((-1.0)*x13823*x13826))+(((-1.0)*r12*r22*x13823)))),-1);
if(!x13832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13831.value)+(((1.5707963267949)*(x13832.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13833=IKsin(j4);
IkReal x13834=IKcos(j4);
IkReal x13835=(sj1*sj2);
IkReal x13836=(cj5*sj3);
IkReal x13837=(cj5*r10);
IkReal x13838=(r00*sj5);
IkReal x13839=(r11*sj5);
IkReal x13840=(cj3*cj5);
IkReal x13841=((1.0)*cj1);
IkReal x13842=(cj3*sj5);
IkReal x13843=(r21*sj5);
IkReal x13844=(cj2*sj1);
IkReal x13845=(sj3*sj5);
IkReal x13846=(r01*sj5);
IkReal x13847=(cj2*x13841);
IkReal x13848=((1.0)*x13834);
IkReal x13849=((1.0)*x13833);
IkReal x13850=(cj3*x13833);
IkReal x13851=(cj3*x13834);
evalcond[0]=(((x13833*x13843))+(((-1.0)*r22*x13848))+(((-1.0)*cj5*r20*x13849)));
evalcond[1]=((((-1.0)*cj5*r00*x13849))+(((-1.0)*r02*x13848))+((x13833*x13846)));
evalcond[2]=((1.0)+(((-1.0)*x13837*x13849))+(((-1.0)*r12*x13848))+((x13833*x13839)));
evalcond[3]=((((-1.0)*cj3*x13837*x13848))+((r11*x13836))+((r12*x13850))+((x13839*x13851))+((r10*x13845)));
evalcond[4]=((((-1.0)*r12*sj3*x13849))+((r10*x13834*x13836))+((r11*x13840))+((r10*x13842))+(((-1.0)*sj3*x13839*x13848)));
evalcond[5]=(((r22*x13850))+x13844+((cj1*sj2))+((r21*x13836))+(((-1.0)*r20*x13840*x13848))+((r20*x13845))+((r21*x13834*x13842)));
evalcond[6]=((((-1.0)*x13847))+((r01*x13836))+((r01*x13834*x13842))+x13835+((sj3*x13838))+(((-1.0)*r00*x13840*x13848))+((r02*x13850)));
evalcond[7]=((((-1.0)*x13847))+(((-1.0)*sj3*x13843*x13848))+((r20*x13834*x13836))+x13835+((r21*x13840))+(((-1.0)*r22*sj3*x13849))+((r20*x13842)));
evalcond[8]=(((r00*x13834*x13836))+(((-1.0)*sj2*x13841))+(((-1.0)*r02*sj3*x13849))+((cj3*x13838))+(((-1.0)*x13844))+((r01*x13840))+(((-1.0)*r01*x13845*x13848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13852=((1.0)*cj5);
CheckValue<IkReal> x13853 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13852)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13853.valid){
continue;
}
CheckValue<IkReal> x13854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13852))+(((-1.0)*r00*sj5)))),-1);
if(!x13854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13853.value)+(((1.5707963267949)*(x13854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13855=IKsin(j4);
IkReal x13856=IKcos(j4);
IkReal x13857=(sj1*sj2);
IkReal x13858=(cj5*sj3);
IkReal x13859=(cj5*r10);
IkReal x13860=(r00*sj5);
IkReal x13861=(r11*sj5);
IkReal x13862=(cj3*cj5);
IkReal x13863=((1.0)*cj1);
IkReal x13864=(cj3*sj5);
IkReal x13865=(r21*sj5);
IkReal x13866=(cj2*sj1);
IkReal x13867=(sj3*sj5);
IkReal x13868=(r01*sj5);
IkReal x13869=(cj2*x13863);
IkReal x13870=((1.0)*x13856);
IkReal x13871=((1.0)*x13855);
IkReal x13872=(cj3*x13855);
IkReal x13873=(cj3*x13856);
evalcond[0]=((((-1.0)*cj5*r20*x13871))+(((-1.0)*r22*x13870))+((x13855*x13865)));
evalcond[1]=((((-1.0)*cj5*r00*x13871))+(((-1.0)*r02*x13870))+((x13855*x13868)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13870))+((x13855*x13861))+(((-1.0)*x13859*x13871)));
evalcond[3]=(((r11*x13858))+(((-1.0)*cj3*x13859*x13870))+((r12*x13872))+((x13861*x13873))+((r10*x13867)));
evalcond[4]=(((r10*x13856*x13858))+((r11*x13862))+(((-1.0)*r12*sj3*x13871))+((r10*x13864))+(((-1.0)*sj3*x13861*x13870)));
evalcond[5]=(x13866+((cj1*sj2))+((r21*x13858))+((r20*x13867))+(((-1.0)*r20*x13862*x13870))+((r21*x13856*x13864))+((r22*x13872)));
evalcond[6]=((((-1.0)*r00*x13862*x13870))+((r01*x13858))+x13857+((sj3*x13860))+((r02*x13872))+((r01*x13856*x13864))+(((-1.0)*x13869)));
evalcond[7]=(x13857+((r21*x13862))+((r20*x13864))+(((-1.0)*r22*sj3*x13871))+((r20*x13856*x13858))+(((-1.0)*sj3*x13865*x13870))+(((-1.0)*x13869)));
evalcond[8]=(((r01*x13862))+(((-1.0)*r01*x13867*x13870))+((r00*x13856*x13858))+(((-1.0)*x13866))+(((-1.0)*sj2*x13863))+(((-1.0)*r02*sj3*x13871))+((cj3*x13860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13874=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13874.valid){
continue;
}
CheckValue<IkReal> x13875 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13874.value)))+(x13875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13876=IKsin(j4);
IkReal x13877=IKcos(j4);
IkReal x13878=(sj1*sj2);
IkReal x13879=(cj5*sj3);
IkReal x13880=(cj5*r10);
IkReal x13881=(r00*sj5);
IkReal x13882=(r11*sj5);
IkReal x13883=(cj3*cj5);
IkReal x13884=((1.0)*cj1);
IkReal x13885=(cj3*sj5);
IkReal x13886=(r21*sj5);
IkReal x13887=(cj2*sj1);
IkReal x13888=(sj3*sj5);
IkReal x13889=(r01*sj5);
IkReal x13890=(cj2*x13884);
IkReal x13891=((1.0)*x13877);
IkReal x13892=((1.0)*x13876);
IkReal x13893=(cj3*x13876);
IkReal x13894=(cj3*x13877);
evalcond[0]=((((-1.0)*cj5*r20*x13892))+(((-1.0)*r22*x13891))+((x13876*x13886)));
evalcond[1]=((((-1.0)*r02*x13891))+(((-1.0)*cj5*r00*x13892))+((x13876*x13889)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13891))+(((-1.0)*x13880*x13892))+((x13876*x13882)));
evalcond[3]=(((x13882*x13894))+(((-1.0)*cj3*x13880*x13891))+((r10*x13888))+((r11*x13879))+((r12*x13893)));
evalcond[4]=((((-1.0)*r12*sj3*x13892))+((r10*x13877*x13879))+((r10*x13885))+(((-1.0)*sj3*x13882*x13891))+((r11*x13883)));
evalcond[5]=(((r22*x13893))+((r21*x13877*x13885))+x13887+((cj1*sj2))+((r21*x13879))+((r20*x13888))+(((-1.0)*r20*x13883*x13891)));
evalcond[6]=((((-1.0)*r00*x13883*x13891))+((sj3*x13881))+x13878+((r02*x13893))+((r01*x13879))+(((-1.0)*x13890))+((r01*x13877*x13885)));
evalcond[7]=((((-1.0)*r22*sj3*x13892))+x13878+((r20*x13877*x13879))+((r20*x13885))+((r21*x13883))+(((-1.0)*x13890))+(((-1.0)*sj3*x13886*x13891)));
evalcond[8]=((((-1.0)*r02*sj3*x13892))+(((-1.0)*r01*x13888*x13891))+(((-1.0)*sj2*x13884))+((cj3*x13881))+((r00*x13877*x13879))+(((-1.0)*x13887))+((r01*x13883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13895=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13895;
j4eval[1]=IKsign(x13895);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13896=((1.0)*cj5);
IkReal x13897=((((-1.0)*r21*x13896))+(((-1.0)*r20*sj5)));
j4eval[0]=x13897;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13896))))));
j4eval[2]=IKsign(x13897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13898=cj5*cj5;
IkReal x13899=(cj3*r21);
IkReal x13900=(cj5*sj5);
IkReal x13901=((1.0)*cj3);
IkReal x13902=((((-1.0)*r11*x13899))+(((-1.0)*r10*r20*x13898*x13901))+(((-1.0)*r12*r22*x13901))+((r11*x13898*x13899))+((cj3*r11*r20*x13900))+((r10*x13899*x13900)));
j4eval[0]=x13902;
j4eval[1]=IKsign(x13902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13903=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13903;
j4eval[1]=IKsign(x13903);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13904=((1.0)*cj5);
IkReal x13905=((((-1.0)*r21*x13904))+(((-1.0)*r20*sj5)));
j4eval[0]=x13905;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13904))))));
j4eval[2]=IKsign(x13905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13906=cj5*cj5;
IkReal x13907=r11*r11;
IkReal x13908=(cj5*r10);
IkReal x13909=(r11*sj5);
IkReal x13910=((((-1.0)*x13906*(r10*r10)))+(((2.0)*x13908*x13909))+((x13906*x13907))+(((-1.0)*x13907))+(((-1.0)*(r12*r12))));
j4eval[0]=x13910;
j4eval[1]=((IKabs(r12))+(IKabs((x13908+(((-1.0)*x13909))))));
j4eval[2]=IKsign(x13910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13911=cj5*cj5;
IkReal x13912=r11*r11;
IkReal x13913=(cj5*r10);
IkReal x13914=(r11*sj5);
CheckValue<IkReal> x13915 = IKatan2WithCheck(IkReal(((((-1.0)*x13914))+x13913)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13915.valid){
continue;
}
CheckValue<IkReal> x13916=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13912))+(((-1.0)*(r12*r12)))+(((-1.0)*x13911*(r10*r10)))+((x13911*x13912))+(((2.0)*x13913*x13914)))),-1);
if(!x13916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13915.value)+(((1.5707963267949)*(x13916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13917=IKsin(j4);
IkReal x13918=IKcos(j4);
IkReal x13919=(cj5*r10);
IkReal x13920=(r01*sj5);
IkReal x13921=(cj5*r00);
IkReal x13922=(cj5*r20);
IkReal x13923=((1.0)*x13918);
IkReal x13924=((1.0)*x13917);
IkReal x13925=(sj5*x13917);
evalcond[0]=(((r21*x13925))+(((-1.0)*r22*x13923))+(((-1.0)*x13922*x13924)));
evalcond[1]=((((-1.0)*x13921*x13924))+((x13917*x13920))+(((-1.0)*r02*x13923)));
evalcond[2]=((((-1.0)*r12*x13924))+((x13918*x13919))+(((-1.0)*r11*sj5*x13923)));
evalcond[3]=((-1.0)+(((-1.0)*x13919*x13924))+(((-1.0)*r12*x13923))+((r11*x13925)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13924))+(((-1.0)*x13920*x13923))+((x13918*x13921)));
evalcond[5]=((((-1.0)*r21*sj5*x13923))+(((-1.0)*r22*x13924))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13918*x13922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13926=((1.0)*cj5);
CheckValue<IkReal> x13927=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13926))+(((-1.0)*r20*sj5)))),-1);
if(!x13927.valid){
continue;
}
CheckValue<IkReal> x13928 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13927.value)))+(x13928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13929=IKsin(j4);
IkReal x13930=IKcos(j4);
IkReal x13931=(cj5*r10);
IkReal x13932=(r01*sj5);
IkReal x13933=(cj5*r00);
IkReal x13934=(cj5*r20);
IkReal x13935=((1.0)*x13930);
IkReal x13936=((1.0)*x13929);
IkReal x13937=(sj5*x13929);
evalcond[0]=((((-1.0)*x13934*x13936))+((r21*x13937))+(((-1.0)*r22*x13935)));
evalcond[1]=(((x13929*x13932))+(((-1.0)*r02*x13935))+(((-1.0)*x13933*x13936)));
evalcond[2]=((((-1.0)*r12*x13936))+((x13930*x13931))+(((-1.0)*r11*sj5*x13935)));
evalcond[3]=((-1.0)+((r11*x13937))+(((-1.0)*r12*x13935))+(((-1.0)*x13931*x13936)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13930*x13933))+(((-1.0)*x13932*x13935))+(((-1.0)*r02*x13936)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13930*x13934))+(((-1.0)*r22*x13936))+(((-1.0)*r21*sj5*x13935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13938 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13938.valid){
continue;
}
CheckValue<IkReal> x13939=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13938.value)+(((1.5707963267949)*(x13939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13940=IKsin(j4);
IkReal x13941=IKcos(j4);
IkReal x13942=(cj5*r10);
IkReal x13943=(r01*sj5);
IkReal x13944=(cj5*r00);
IkReal x13945=(cj5*r20);
IkReal x13946=((1.0)*x13941);
IkReal x13947=((1.0)*x13940);
IkReal x13948=(sj5*x13940);
evalcond[0]=((((-1.0)*x13945*x13947))+(((-1.0)*r22*x13946))+((r21*x13948)));
evalcond[1]=((((-1.0)*x13944*x13947))+(((-1.0)*r02*x13946))+((x13940*x13943)));
evalcond[2]=((((-1.0)*r11*sj5*x13946))+(((-1.0)*r12*x13947))+((x13941*x13942)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13946))+(((-1.0)*x13942*x13947))+((r11*x13948)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13943*x13946))+((x13941*x13944))+(((-1.0)*r02*x13947)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13947))+(((-1.0)*r21*sj5*x13946))+((x13941*x13945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13949=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13949;
j4eval[1]=IKsign(x13949);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13950=((1.0)*cj5);
IkReal x13951=((((-1.0)*r21*x13950))+(((-1.0)*r20*sj5)));
j4eval[0]=x13951;
j4eval[1]=((IKabs(((((-1.0)*r00*x13950))+((r01*sj5)))))+(IKabs(r02)));
j4eval[2]=IKsign(x13951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13952=cj5*cj5;
IkReal x13953=r11*r11;
IkReal x13954=(r11*sj5);
IkReal x13955=(cj5*r10);
IkReal x13956=((r12*r12)+x13953+((x13952*(r10*r10)))+(((-2.0)*x13954*x13955))+(((-1.0)*x13952*x13953)));
j4eval[0]=x13956;
j4eval[1]=IKsign(x13956);
j4eval[2]=((IKabs(r12))+(IKabs((x13954+(((-1.0)*x13955))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13957=cj5*cj5;
IkReal x13958=r11*r11;
IkReal x13959=(cj5*r10);
IkReal x13960=(r11*sj5);
CheckValue<IkReal> x13961=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x13957*(r10*r10)))+x13958+(((-1.0)*x13957*x13958))+(((-2.0)*x13959*x13960)))),-1);
if(!x13961.valid){
continue;
}
CheckValue<IkReal> x13962 = IKatan2WithCheck(IkReal((x13960+(((-1.0)*x13959)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13961.value)))+(x13962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13963=IKcos(j4);
IkReal x13964=IKsin(j4);
IkReal x13965=(cj5*r00);
IkReal x13966=(cj5*r10);
IkReal x13967=(r21*sj5);
IkReal x13968=(cj5*r20);
IkReal x13969=((1.0)*x13963);
IkReal x13970=((1.0)*x13964);
IkReal x13971=(sj5*x13964);
IkReal x13972=(sj5*x13963);
evalcond[0]=((((-1.0)*x13966*x13969))+((r11*x13972))+((r12*x13964)));
evalcond[1]=((((-1.0)*x13968*x13970))+(((-1.0)*r22*x13969))+((x13964*x13967)));
evalcond[2]=((((-1.0)*r02*x13969))+(((-1.0)*x13965*x13970))+((r01*x13971)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13969))+((r11*x13971))+(((-1.0)*x13966*x13970)));
evalcond[4]=(((r02*x13964))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13965*x13969))+((r01*x13972)));
evalcond[5]=(((x13963*x13967))+(((-1.0)*x13968*x13969))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13973=((1.0)*cj5);
CheckValue<IkReal> x13974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13973))+(((-1.0)*r20*sj5)))),-1);
if(!x13974.valid){
continue;
}
CheckValue<IkReal> x13975 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13974.value)))+(x13975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13976=IKcos(j4);
IkReal x13977=IKsin(j4);
IkReal x13978=(cj5*r00);
IkReal x13979=(cj5*r10);
IkReal x13980=(r21*sj5);
IkReal x13981=(cj5*r20);
IkReal x13982=((1.0)*x13976);
IkReal x13983=((1.0)*x13977);
IkReal x13984=(sj5*x13977);
IkReal x13985=(sj5*x13976);
evalcond[0]=((((-1.0)*x13979*x13982))+((r11*x13985))+((r12*x13977)));
evalcond[1]=(((x13977*x13980))+(((-1.0)*r22*x13982))+(((-1.0)*x13981*x13983)));
evalcond[2]=((((-1.0)*x13978*x13983))+((r01*x13984))+(((-1.0)*r02*x13982)));
evalcond[3]=((-1.0)+(((-1.0)*x13979*x13983))+((r11*x13984))+(((-1.0)*r12*x13982)));
evalcond[4]=(((cj2*sj1))+((r02*x13977))+(((-1.0)*x13978*x13982))+((r01*x13985))+((cj1*sj2)));
evalcond[5]=(((x13976*x13980))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13977))+(((-1.0)*x13981*x13982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13986 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13986.valid){
continue;
}
CheckValue<IkReal> x13987=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13986.value)+(((1.5707963267949)*(x13987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13988=IKcos(j4);
IkReal x13989=IKsin(j4);
IkReal x13990=(cj5*r00);
IkReal x13991=(cj5*r10);
IkReal x13992=(r21*sj5);
IkReal x13993=(cj5*r20);
IkReal x13994=((1.0)*x13988);
IkReal x13995=((1.0)*x13989);
IkReal x13996=(sj5*x13989);
IkReal x13997=(sj5*x13988);
evalcond[0]=(((r12*x13989))+((r11*x13997))+(((-1.0)*x13991*x13994)));
evalcond[1]=((((-1.0)*x13993*x13995))+(((-1.0)*r22*x13994))+((x13989*x13992)));
evalcond[2]=((((-1.0)*r02*x13994))+(((-1.0)*x13990*x13995))+((r01*x13996)));
evalcond[3]=((-1.0)+((r11*x13996))+(((-1.0)*r12*x13994))+(((-1.0)*x13991*x13995)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13990*x13994))+((r02*x13989))+((r01*x13997)));
evalcond[5]=((((-1.0)*x13993*x13994))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13989))+((x13988*x13992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13999 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13999)==0){
continue;
}
IkReal x13998=pow(x13999,-0.5);
CheckValue<IkReal> x14000 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14000.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14000.value));
IkReal gconst37=((-1.0)*r01*x13998);
IkReal gconst38=(r00*x13998);
CheckValue<IkReal> x14001 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14001.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14001.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
IkReal x14002=((-1.0)*(x14004.value));
IkReal x14003=x13998;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14002;
IkReal gconst36=x14002;
IkReal gconst37=((-1.0)*r01*x14003);
IkReal gconst38=(r00*x14003);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14007 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14007.valid){
continue;
}
IkReal x14005=((-1.0)*(x14007.value));
IkReal x14006=x13998;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14005;
IkReal gconst36=x14005;
IkReal gconst37=((-1.0)*r01*x14006);
IkReal gconst38=(r00*x14006);
CheckValue<IkReal> x14015=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14015.valid){
continue;
}
IkReal x14008=x14015.value;
IkReal x14009=(sj3*x14008);
IkReal x14010=(r11*x14009);
IkReal x14011=(r21*x14009);
IkReal x14012=(r20*x14009);
IkReal x14013=(r10*x14009);
IkReal x14014=(r00*r01*x14009);
j4eval[0]=IKsign((((r12*r22*sj3))+((r10*x14012*(r00*r00)))+((r21*x14010*(r01*r01)))+((r00*r01*r20*x14010))+((r00*r01*r10*x14011))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14016=gconst38*gconst38;
IkReal x14017=gconst37*gconst37;
IkReal x14018=((1.0)*cj3);
IkReal x14019=(r11*r20);
IkReal x14020=(r10*sj3);
IkReal x14021=(gconst37*gconst38);
IkReal x14022=(r11*sj3);
IkReal x14023=(r21*x14017);
IkReal x14024=(cj3*x14021);
CheckValue<IkReal> x14025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14018*x14023))+((x14019*x14024))+(((-1.0)*r10*r20*x14016*x14018))+(((-1.0)*r12*r22*x14018))+((r10*r21*x14024)))),-1);
if(!x14025.valid){
continue;
}
CheckValue<IkReal> x14026 = IKatan2WithCheck(IkReal((((gconst38*r22*x14022))+((gconst37*r22*x14020)))),IkReal(((((-1.0)*r20*x14020*x14021))+((r21*x14021*x14022))+((x14020*x14023))+(((-1.0)*sj3*x14016*x14019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14025.value)))+(x14026.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14027=IKsin(j4);
IkReal x14028=IKcos(j4);
IkReal x14029=(cj2*sj1);
IkReal x14030=(cj1*sj2);
IkReal x14031=(gconst38*r21);
IkReal x14032=(cj3*r20);
IkReal x14033=(gconst38*r10);
IkReal x14034=(cj3*gconst37);
IkReal x14035=(sj1*sj2);
IkReal x14036=(gconst38*r00);
IkReal x14037=(cj1*cj2);
IkReal x14038=(gconst37*sj3);
IkReal x14039=(gconst38*r20);
IkReal x14040=(gconst38*r01);
IkReal x14041=(gconst38*r11);
IkReal x14042=((1.0)*x14028);
IkReal x14043=((1.0)*x14027);
IkReal x14044=(cj3*x14027);
IkReal x14045=(sj3*x14028);
IkReal x14046=(gconst37*x14027);
IkReal x14047=(x14030+x14029);
evalcond[0]=((((-1.0)*x14039*x14043))+((r21*x14046))+(((-1.0)*r22*x14042)));
evalcond[1]=(((r01*x14046))+(((-1.0)*x14036*x14043))+(((-1.0)*r02*x14042)));
evalcond[2]=((-1.0)+((r11*x14046))+(((-1.0)*x14033*x14043))+(((-1.0)*r12*x14042)));
evalcond[3]=(((sj3*x14041))+(((-1.0)*cj3*x14033*x14042))+((r10*x14038))+((r11*x14028*x14034))+((r12*x14044)));
evalcond[4]=((((-1.0)*r11*x14038*x14042))+(((-1.0)*r12*sj3*x14043))+((r10*x14034))+((cj3*x14041))+((x14033*x14045)));
evalcond[5]=(((r22*x14044))+((r21*x14028*x14034))+((sj3*x14031))+(((-1.0)*gconst38*x14032*x14042))+((r20*x14038))+x14047);
evalcond[6]=(((r00*x14038))+((sj3*x14040))+(((-1.0)*x14035))+(((-1.0)*cj3*x14036*x14042))+((r01*x14028*x14034))+x14037+((r02*x14044)));
evalcond[7]=(((r00*x14034))+(((-1.0)*r02*sj3*x14043))+((cj3*x14040))+((x14036*x14045))+(((-1.0)*r01*x14038*x14042))+x14047);
evalcond[8]=((((-1.0)*x14037))+((cj3*x14031))+((x14039*x14045))+((gconst37*x14032))+(((-1.0)*r21*x14038*x14042))+(((-1.0)*r22*sj3*x14043))+x14035);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14048=gconst38*gconst38;
IkReal x14049=gconst37*gconst37;
IkReal x14050=(gconst37*r10);
IkReal x14051=(cj3*r22);
IkReal x14052=((1.0)*gconst38);
IkReal x14053=(r21*sj3);
IkReal x14054=(gconst38*r11);
IkReal x14055=(cj3*r20);
IkReal x14056=(cj3*r21);
IkReal x14057=(r20*sj3);
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal((((x14050*x14051))+((x14051*x14054)))),IkReal((((r10*x14049*x14056))+((gconst37*x14054*x14056))+(((-1.0)*x14050*x14052*x14055))+(((-1.0)*r11*x14048*x14055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
CheckValue<IkReal> x14059=IKPowWithIntegerCheck(IKsign((((r11*x14049*x14053))+((r10*x14048*x14057))+(((-1.0)*gconst37*r11*x14052*x14057))+((r12*r22*sj3))+(((-1.0)*x14050*x14052*x14053)))),-1);
if(!x14059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14058.value)+(((1.5707963267949)*(x14059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14060=IKsin(j4);
IkReal x14061=IKcos(j4);
IkReal x14062=(cj2*sj1);
IkReal x14063=(cj1*sj2);
IkReal x14064=(gconst38*r21);
IkReal x14065=(cj3*r20);
IkReal x14066=(gconst38*r10);
IkReal x14067=(cj3*gconst37);
IkReal x14068=(sj1*sj2);
IkReal x14069=(gconst38*r00);
IkReal x14070=(cj1*cj2);
IkReal x14071=(gconst37*sj3);
IkReal x14072=(gconst38*r20);
IkReal x14073=(gconst38*r01);
IkReal x14074=(gconst38*r11);
IkReal x14075=((1.0)*x14061);
IkReal x14076=((1.0)*x14060);
IkReal x14077=(cj3*x14060);
IkReal x14078=(sj3*x14061);
IkReal x14079=(gconst37*x14060);
IkReal x14080=(x14062+x14063);
evalcond[0]=((((-1.0)*x14072*x14076))+(((-1.0)*r22*x14075))+((r21*x14079)));
evalcond[1]=(((r01*x14079))+(((-1.0)*x14069*x14076))+(((-1.0)*r02*x14075)));
evalcond[2]=((-1.0)+(((-1.0)*x14066*x14076))+(((-1.0)*r12*x14075))+((r11*x14079)));
evalcond[3]=(((r11*x14061*x14067))+((sj3*x14074))+(((-1.0)*cj3*x14066*x14075))+((r10*x14071))+((r12*x14077)));
evalcond[4]=((((-1.0)*r11*x14071*x14075))+((r10*x14067))+(((-1.0)*r12*sj3*x14076))+((x14066*x14078))+((cj3*x14074)));
evalcond[5]=(((r22*x14077))+(((-1.0)*gconst38*x14065*x14075))+((sj3*x14064))+((r20*x14071))+x14080+((r21*x14061*x14067)));
evalcond[6]=(((r02*x14077))+((sj3*x14073))+((r00*x14071))+(((-1.0)*x14068))+(((-1.0)*cj3*x14069*x14075))+((r01*x14061*x14067))+x14070);
evalcond[7]=((((-1.0)*r02*sj3*x14076))+((x14069*x14078))+((r00*x14067))+(((-1.0)*r01*x14071*x14075))+x14080+((cj3*x14073)));
evalcond[8]=(((cj3*x14064))+(((-1.0)*r21*x14071*x14075))+(((-1.0)*r22*sj3*x14076))+((gconst37*x14065))+(((-1.0)*x14070))+((x14072*x14078))+x14068);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14081=((1.0)*gconst38);
CheckValue<IkReal> x14082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14081))+(((-1.0)*gconst37*r20)))),-1);
if(!x14082.valid){
continue;
}
CheckValue<IkReal> x14083 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14081))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14082.value)))+(x14083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14084=IKsin(j4);
IkReal x14085=IKcos(j4);
IkReal x14086=(cj2*sj1);
IkReal x14087=(cj1*sj2);
IkReal x14088=(gconst38*r21);
IkReal x14089=(cj3*r20);
IkReal x14090=(gconst38*r10);
IkReal x14091=(cj3*gconst37);
IkReal x14092=(sj1*sj2);
IkReal x14093=(gconst38*r00);
IkReal x14094=(cj1*cj2);
IkReal x14095=(gconst37*sj3);
IkReal x14096=(gconst38*r20);
IkReal x14097=(gconst38*r01);
IkReal x14098=(gconst38*r11);
IkReal x14099=((1.0)*x14085);
IkReal x14100=((1.0)*x14084);
IkReal x14101=(cj3*x14084);
IkReal x14102=(sj3*x14085);
IkReal x14103=(gconst37*x14084);
IkReal x14104=(x14086+x14087);
evalcond[0]=((((-1.0)*r22*x14099))+(((-1.0)*x14096*x14100))+((r21*x14103)));
evalcond[1]=((((-1.0)*r02*x14099))+((r01*x14103))+(((-1.0)*x14093*x14100)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14099))+(((-1.0)*x14090*x14100))+((r11*x14103)));
evalcond[3]=(((sj3*x14098))+(((-1.0)*cj3*x14090*x14099))+((r10*x14095))+((r11*x14085*x14091))+((r12*x14101)));
evalcond[4]=((((-1.0)*r11*x14095*x14099))+((x14090*x14102))+((r10*x14091))+((cj3*x14098))+(((-1.0)*r12*sj3*x14100)));
evalcond[5]=(((r20*x14095))+((r22*x14101))+((r21*x14085*x14091))+x14104+((sj3*x14088))+(((-1.0)*gconst38*x14089*x14099)));
evalcond[6]=(((r00*x14095))+((r02*x14101))+((sj3*x14097))+(((-1.0)*cj3*x14093*x14099))+(((-1.0)*x14092))+((r01*x14085*x14091))+x14094);
evalcond[7]=(((r00*x14091))+(((-1.0)*r02*sj3*x14100))+((x14093*x14102))+x14104+((cj3*x14097))+(((-1.0)*r01*x14095*x14099)));
evalcond[8]=((((-1.0)*r22*sj3*x14100))+(((-1.0)*x14094))+((x14096*x14102))+(((-1.0)*r21*x14095*x14099))+((cj3*x14088))+x14092+((gconst37*x14089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14106 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14106)==0){
continue;
}
IkReal x14105=pow(x14106,-0.5);
CheckValue<IkReal> x14107 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14107.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14107.value))));
IkReal gconst40=((1.0)*r01*x14105);
IkReal gconst41=((-1.0)*r00*x14105);
CheckValue<IkReal> x14108 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14108.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14108.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14111 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14111.valid){
continue;
}
IkReal x14109=((1.0)*(x14111.value));
IkReal x14110=x14105;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14109)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14109)));
IkReal gconst40=((1.0)*r01*x14110);
IkReal gconst41=((-1.0)*r00*x14110);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14114 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14114.valid){
continue;
}
IkReal x14112=((1.0)*(x14114.value));
IkReal x14113=x14105;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14112)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14112)));
IkReal gconst40=((1.0)*r01*x14113);
IkReal gconst41=((-1.0)*r00*x14113);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14115=gconst41*gconst41;
IkReal x14116=gconst40*gconst40;
IkReal x14117=(gconst40*r10);
IkReal x14118=(r22*sj3);
IkReal x14119=(r11*sj3);
IkReal x14120=((1.0)*cj3);
IkReal x14121=(gconst41*r21);
IkReal x14122=(gconst41*r20);
IkReal x14123=(r21*x14116);
IkReal x14124=((1.0)*r20*x14115);
CheckValue<IkReal> x14125 = IKatan2WithCheck(IkReal((((gconst41*r11*x14118))+((x14117*x14118)))),IkReal(((((-1.0)*sj3*x14117*x14122))+((gconst40*x14119*x14121))+((r10*sj3*x14123))+(((-1.0)*x14119*x14124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14125.valid){
continue;
}
CheckValue<IkReal> x14126=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14122))+(((-1.0)*r11*x14120*x14123))+((cj3*x14117*x14121))+(((-1.0)*r10*r20*x14115*x14120))+(((-1.0)*r12*r22*x14120)))),-1);
if(!x14126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14125.value)+(((1.5707963267949)*(x14126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14127=IKsin(j4);
IkReal x14128=IKcos(j4);
IkReal x14129=(cj2*sj1);
IkReal x14130=(cj1*sj2);
IkReal x14131=(gconst40*sj3);
IkReal x14132=(gconst41*sj3);
IkReal x14133=(gconst41*r20);
IkReal x14134=(cj3*gconst41);
IkReal x14135=(sj1*sj2);
IkReal x14136=(cj1*cj2);
IkReal x14137=(cj3*gconst40);
IkReal x14138=((1.0)*x14128);
IkReal x14139=((1.0)*x14127);
IkReal x14140=(cj3*x14127);
IkReal x14141=(gconst40*x14127);
IkReal x14142=(x14130+x14129);
IkReal x14143=(x14128*x14137);
evalcond[0]=((((-1.0)*x14133*x14139))+((r21*x14141))+(((-1.0)*r22*x14138)));
evalcond[1]=((((-1.0)*r02*x14138))+((r01*x14141))+(((-1.0)*gconst41*r00*x14139)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14139))+(((-1.0)*r12*x14138))+((r11*x14141)));
evalcond[3]=((((-1.0)*r10*x14134*x14138))+((r11*x14132))+((r10*x14131))+((r12*x14140))+((r11*x14143)));
evalcond[4]=((((-1.0)*r11*x14131*x14138))+((r10*x14128*x14132))+((r11*x14134))+((r10*x14137))+(((-1.0)*r12*sj3*x14139)));
evalcond[5]=(((r20*x14131))+((r21*x14143))+((r21*x14132))+(((-1.0)*cj3*x14133*x14138))+((r22*x14140))+x14142);
evalcond[6]=((((-1.0)*x14135))+((r02*x14140))+(((-1.0)*r00*x14134*x14138))+((r01*x14143))+x14136+((r00*x14131))+((r01*x14132)));
evalcond[7]=((((-1.0)*r02*sj3*x14139))+((r00*x14128*x14132))+x14142+(((-1.0)*r01*x14131*x14138))+((r00*x14137))+((r01*x14134)));
evalcond[8]=((((-1.0)*x14136))+((r20*x14137))+(((-1.0)*r22*sj3*x14139))+((r21*x14134))+x14135+((r20*x14128*x14132))+(((-1.0)*r21*x14131*x14138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14144=((1.0)*gconst41);
CheckValue<IkReal> x14145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14144))+(((-1.0)*gconst40*r20)))),-1);
if(!x14145.valid){
continue;
}
CheckValue<IkReal> x14146 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x14144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14145.value)))+(x14146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14147=IKsin(j4);
IkReal x14148=IKcos(j4);
IkReal x14149=(cj2*sj1);
IkReal x14150=(cj1*sj2);
IkReal x14151=(gconst40*sj3);
IkReal x14152=(gconst41*sj3);
IkReal x14153=(gconst41*r20);
IkReal x14154=(cj3*gconst41);
IkReal x14155=(sj1*sj2);
IkReal x14156=(cj1*cj2);
IkReal x14157=(cj3*gconst40);
IkReal x14158=((1.0)*x14148);
IkReal x14159=((1.0)*x14147);
IkReal x14160=(cj3*x14147);
IkReal x14161=(gconst40*x14147);
IkReal x14162=(x14149+x14150);
IkReal x14163=(x14148*x14157);
evalcond[0]=((((-1.0)*r22*x14158))+(((-1.0)*x14153*x14159))+((r21*x14161)));
evalcond[1]=((((-1.0)*r02*x14158))+((r01*x14161))+(((-1.0)*gconst41*r00*x14159)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14159))+(((-1.0)*r12*x14158))+((r11*x14161)));
evalcond[3]=(((r10*x14151))+(((-1.0)*r10*x14154*x14158))+((r11*x14152))+((r11*x14163))+((r12*x14160)));
evalcond[4]=(((r10*x14157))+(((-1.0)*r12*sj3*x14159))+((r11*x14154))+((r10*x14148*x14152))+(((-1.0)*r11*x14151*x14158)));
evalcond[5]=((((-1.0)*cj3*x14153*x14158))+((r22*x14160))+x14162+((r21*x14152))+((r21*x14163))+((r20*x14151)));
evalcond[6]=(((r02*x14160))+(((-1.0)*r00*x14154*x14158))+((r00*x14151))+((r01*x14152))+((r01*x14163))+x14156+(((-1.0)*x14155)));
evalcond[7]=((((-1.0)*r02*sj3*x14159))+((r00*x14157))+((r01*x14154))+x14162+(((-1.0)*r01*x14151*x14158))+((r00*x14148*x14152)));
evalcond[8]=((((-1.0)*r21*x14151*x14158))+(((-1.0)*r22*sj3*x14159))+x14155+((r21*x14154))+((r20*x14148*x14152))+((r20*x14157))+(((-1.0)*x14156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14164 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14164.valid){
continue;
}
CheckValue<IkReal> x14165=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14164.value)+(((1.5707963267949)*(x14165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14166=IKsin(j4);
IkReal x14167=IKcos(j4);
IkReal x14168=(cj2*sj1);
IkReal x14169=(cj1*sj2);
IkReal x14170=(gconst40*sj3);
IkReal x14171=(gconst41*sj3);
IkReal x14172=(gconst41*r20);
IkReal x14173=(cj3*gconst41);
IkReal x14174=(sj1*sj2);
IkReal x14175=(cj1*cj2);
IkReal x14176=(cj3*gconst40);
IkReal x14177=((1.0)*x14167);
IkReal x14178=((1.0)*x14166);
IkReal x14179=(cj3*x14166);
IkReal x14180=(gconst40*x14166);
IkReal x14181=(x14169+x14168);
IkReal x14182=(x14167*x14176);
evalcond[0]=((((-1.0)*r22*x14177))+(((-1.0)*x14172*x14178))+((r21*x14180)));
evalcond[1]=((((-1.0)*r02*x14177))+(((-1.0)*gconst41*r00*x14178))+((r01*x14180)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14178))+((r11*x14180))+(((-1.0)*r12*x14177)));
evalcond[3]=(((r11*x14171))+((r12*x14179))+(((-1.0)*r10*x14173*x14177))+((r11*x14182))+((r10*x14170)));
evalcond[4]=((((-1.0)*r12*sj3*x14178))+((r11*x14173))+(((-1.0)*r11*x14170*x14177))+((r10*x14167*x14171))+((r10*x14176)));
evalcond[5]=(((r22*x14179))+((r21*x14171))+(((-1.0)*cj3*x14172*x14177))+((r20*x14170))+((r21*x14182))+x14181);
evalcond[6]=(((r01*x14171))+((r00*x14170))+(((-1.0)*x14174))+((r01*x14182))+((r02*x14179))+x14175+(((-1.0)*r00*x14173*x14177)));
evalcond[7]=(((r01*x14173))+((r00*x14176))+((r00*x14167*x14171))+x14181+(((-1.0)*r02*sj3*x14178))+(((-1.0)*r01*x14170*x14177)));
evalcond[8]=(((r21*x14173))+(((-1.0)*r21*x14170*x14177))+((r20*x14176))+(((-1.0)*x14175))+x14174+(((-1.0)*r22*sj3*x14178))+((r20*x14167*x14171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14183=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14183);
rxp1_1=(px*r21);
rxp1_2=(r11*x14183);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14184=(r11*sj5);
IkReal x14185=((1.0)*cj5*r10);
j4eval[0]=(x14184+(((-1.0)*x14185)));
j4eval[1]=(((cj3*x14184))+(((-1.0)*cj3*x14185)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14186=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14186);
rxp1_1=(px*r21);
rxp1_2=(r11*x14186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14187=(cj5*r10);
IkReal x14188=(r11*sj5);
j4eval[0]=(x14188+(((-1.0)*x14187)));
j4eval[1]=((((-1.0)*sj3*x14188))+((sj3*x14187)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14189=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14189);
rxp1_1=(px*r21);
rxp1_2=(r11*x14189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14190=((1.0)*r10);
CheckValue<IkReal> x14191=IKPowWithIntegerCheck(cj3,-1);
if(!x14191.valid){
continue;
}
CheckValue<IkReal> x14192=IKPowWithIntegerCheck(r02,-1);
if(!x14192.valid){
continue;
}
CheckValue<IkReal> x14193=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14190))+((cj3*r11*sj5))),-1);
if(!x14193.valid){
continue;
}
if( IKabs(((x14191.value)*(x14192.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14193.value)*(((((-1.0)*sj3*sj5*x14190))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14191.value)*(x14192.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14193.value)*(((((-1.0)*sj3*sj5*x14190))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14191.value)*(x14192.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14193.value)*(((((-1.0)*sj3*sj5*x14190))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14194=IKsin(j4);
IkReal x14195=IKcos(j4);
IkReal x14196=(cj2*sj1);
IkReal x14197=(cj1*sj2);
IkReal x14198=(cj5*r10);
IkReal x14199=(sj1*sj2);
IkReal x14200=(cj5*sj3);
IkReal x14201=(r11*sj5);
IkReal x14202=(cj3*sj5);
IkReal x14203=(r21*sj5);
IkReal x14204=(cj1*cj2);
IkReal x14205=(cj3*cj5);
IkReal x14206=(sj3*sj5);
IkReal x14207=((1.0)*x14194);
IkReal x14208=(r20*x14195);
IkReal x14209=(cj3*x14195);
IkReal x14210=(sj3*x14195);
IkReal x14211=(x14196+x14197);
evalcond[0]=((-1.0)*r02*x14195);
evalcond[1]=((((-1.0)*cj5*r20*x14207))+((x14194*x14203)));
evalcond[2]=((((-1.0)*x14199))+((cj3*r02*x14194))+x14204);
evalcond[3]=((((-1.0)*r02*sj3*x14207))+x14211);
evalcond[4]=((-1.0)+(((-1.0)*x14198*x14207))+((x14194*x14201)));
evalcond[5]=((((-1.0)*x14198*x14209))+((r10*x14206))+((x14201*x14209))+((r11*x14200)));
evalcond[6]=(((r10*x14202))+((x14198*x14210))+(((-1.0)*x14201*x14210))+((r11*x14205)));
evalcond[7]=(((r21*x14195*x14202))+((r20*x14206))+((r21*x14200))+(((-1.0)*x14205*x14208))+x14211);
evalcond[8]=(((r20*x14202))+((r21*x14205))+((x14200*x14208))+(((-1.0)*x14204))+x14199+(((-1.0)*x14203*x14210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14212=(cj5*r10);
IkReal x14213=((1.0)*r11);
CheckValue<IkReal> x14214=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14212))),-1);
if(!x14214.valid){
continue;
}
CheckValue<IkReal> x14215=IKPowWithIntegerCheck((((sj3*x14212))+(((-1.0)*sj3*sj5*x14213))),-1);
if(!x14215.valid){
continue;
}
if( IKabs(x14214.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14215.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14213)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14214.value)+IKsqr(((x14215.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14213))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14214.value, ((x14215.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14213))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14216=IKsin(j4);
IkReal x14217=IKcos(j4);
IkReal x14218=(cj2*sj1);
IkReal x14219=(cj1*sj2);
IkReal x14220=(cj5*r10);
IkReal x14221=(sj1*sj2);
IkReal x14222=(cj5*sj3);
IkReal x14223=(r11*sj5);
IkReal x14224=(cj3*sj5);
IkReal x14225=(r21*sj5);
IkReal x14226=(cj1*cj2);
IkReal x14227=(cj3*cj5);
IkReal x14228=(sj3*sj5);
IkReal x14229=((1.0)*x14216);
IkReal x14230=(r20*x14217);
IkReal x14231=(cj3*x14217);
IkReal x14232=(sj3*x14217);
IkReal x14233=(x14219+x14218);
evalcond[0]=((-1.0)*r02*x14217);
evalcond[1]=((((-1.0)*cj5*r20*x14229))+((x14216*x14225)));
evalcond[2]=(((cj3*r02*x14216))+(((-1.0)*x14221))+x14226);
evalcond[3]=((((-1.0)*r02*sj3*x14229))+x14233);
evalcond[4]=((-1.0)+((x14216*x14223))+(((-1.0)*x14220*x14229)));
evalcond[5]=(((x14223*x14231))+(((-1.0)*x14220*x14231))+((r10*x14228))+((r11*x14222)));
evalcond[6]=((((-1.0)*x14223*x14232))+((r10*x14224))+((x14220*x14232))+((r11*x14227)));
evalcond[7]=(((r20*x14228))+((r21*x14222))+(((-1.0)*x14227*x14230))+x14233+((r21*x14217*x14224)));
evalcond[8]=(((r20*x14224))+((r21*x14227))+(((-1.0)*x14225*x14232))+(((-1.0)*x14226))+((x14222*x14230))+x14221);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14234=((1.0)*r10);
IkReal x14235=(r11*sj5);
CheckValue<IkReal> x14236=IKPowWithIntegerCheck(((((-1.0)*cj5*x14234))+x14235),-1);
if(!x14236.valid){
continue;
}
CheckValue<IkReal> x14237=IKPowWithIntegerCheck((((cj3*x14235))+(((-1.0)*cj3*cj5*x14234))),-1);
if(!x14237.valid){
continue;
}
if( IKabs(x14236.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14237.value)*(((((-1.0)*sj3*sj5*x14234))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14236.value)+IKsqr(((x14237.value)*(((((-1.0)*sj3*sj5*x14234))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14236.value, ((x14237.value)*(((((-1.0)*sj3*sj5*x14234))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14238=IKsin(j4);
IkReal x14239=IKcos(j4);
IkReal x14240=(cj2*sj1);
IkReal x14241=(cj1*sj2);
IkReal x14242=(cj5*r10);
IkReal x14243=(sj1*sj2);
IkReal x14244=(cj5*sj3);
IkReal x14245=(r11*sj5);
IkReal x14246=(cj3*sj5);
IkReal x14247=(r21*sj5);
IkReal x14248=(cj1*cj2);
IkReal x14249=(cj3*cj5);
IkReal x14250=(sj3*sj5);
IkReal x14251=((1.0)*x14238);
IkReal x14252=(r20*x14239);
IkReal x14253=(cj3*x14239);
IkReal x14254=(sj3*x14239);
IkReal x14255=(x14240+x14241);
evalcond[0]=((-1.0)*r02*x14239);
evalcond[1]=((((-1.0)*cj5*r20*x14251))+((x14238*x14247)));
evalcond[2]=((((-1.0)*x14243))+((cj3*r02*x14238))+x14248);
evalcond[3]=((((-1.0)*r02*sj3*x14251))+x14255);
evalcond[4]=((-1.0)+((x14238*x14245))+(((-1.0)*x14242*x14251)));
evalcond[5]=((((-1.0)*x14242*x14253))+((x14245*x14253))+((r10*x14250))+((r11*x14244)));
evalcond[6]=((((-1.0)*x14245*x14254))+((r11*x14249))+((r10*x14246))+((x14242*x14254)));
evalcond[7]=(((r21*x14244))+((r20*x14250))+((r21*x14239*x14246))+(((-1.0)*x14249*x14252))+x14255);
evalcond[8]=(((r21*x14249))+(((-1.0)*x14248))+((x14244*x14252))+((r20*x14246))+(((-1.0)*x14247*x14254))+x14243);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14256=cj5*cj5;
IkReal x14257=((1.0)*cj3);
IkReal x14258=(r10*r21);
IkReal x14259=(cj5*sj5);
IkReal x14260=(r11*r21);
IkReal x14261=(r11*r20);
IkReal x14262=(r22*sj3);
IkReal x14263=(r10*r20);
IkReal x14264=((1.0)*sj3*x14256);
CheckValue<IkReal> x14265 = IKatan2WithCheck(IkReal((((cj5*r11*x14262))+((r10*sj5*x14262)))),IkReal((((sj3*x14259*x14260))+((sj3*x14258))+(((-1.0)*x14261*x14264))+(((-1.0)*x14258*x14264))+(((-1.0)*sj3*x14259*x14263)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14265.valid){
continue;
}
CheckValue<IkReal> x14266=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14257*x14260))+((cj3*x14258*x14259))+((cj3*x14259*x14261))+((cj3*x14256*x14260))+(((-1.0)*x14256*x14257*x14263))+(((-1.0)*r12*r22*x14257)))),-1);
if(!x14266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14265.value)+(((1.5707963267949)*(x14266.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14267=IKsin(j4);
IkReal x14268=IKcos(j4);
IkReal x14269=(cj2*sj1);
IkReal x14270=(cj1*sj2);
IkReal x14271=(cj5*sj3);
IkReal x14272=(cj5*r10);
IkReal x14273=(r00*sj5);
IkReal x14274=(sj1*sj2);
IkReal x14275=(r11*sj5);
IkReal x14276=(cj3*cj5);
IkReal x14277=(cj3*sj5);
IkReal x14278=(r21*sj5);
IkReal x14279=(cj1*cj2);
IkReal x14280=(sj3*sj5);
IkReal x14281=(r01*sj5);
IkReal x14282=((1.0)*x14268);
IkReal x14283=((1.0)*x14267);
IkReal x14284=(cj3*x14267);
IkReal x14285=(cj3*x14268);
IkReal x14286=(x14270+x14269);
evalcond[0]=((((-1.0)*r22*x14282))+((x14267*x14278))+(((-1.0)*cj5*r20*x14283)));
evalcond[1]=((((-1.0)*cj5*r00*x14283))+((x14267*x14281))+(((-1.0)*r02*x14282)));
evalcond[2]=((-1.0)+((x14267*x14275))+(((-1.0)*r12*x14282))+(((-1.0)*x14272*x14283)));
evalcond[3]=((((-1.0)*cj3*x14272*x14282))+((r10*x14280))+((r11*x14271))+((r12*x14284))+((x14275*x14285)));
evalcond[4]=((((-1.0)*r12*sj3*x14283))+(((-1.0)*sj3*x14275*x14282))+((r10*x14268*x14271))+((r11*x14276))+((r10*x14277)));
evalcond[5]=(((r21*x14271))+((r21*x14268*x14277))+(((-1.0)*r20*x14276*x14282))+((r22*x14284))+x14286+((r20*x14280)));
evalcond[6]=(((sj3*x14273))+(((-1.0)*x14274))+((r01*x14271))+(((-1.0)*r00*x14276*x14282))+((r01*x14268*x14277))+x14279+((r02*x14284)));
evalcond[7]=(((r01*x14276))+((r00*x14268*x14271))+((cj3*x14273))+(((-1.0)*r02*sj3*x14283))+x14286+(((-1.0)*r01*x14280*x14282)));
evalcond[8]=((((-1.0)*x14279))+(((-1.0)*sj3*x14278*x14282))+((r21*x14276))+((r20*x14268*x14271))+((r20*x14277))+(((-1.0)*r22*sj3*x14283))+x14274);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14287=((1.0)*cj5);
CheckValue<IkReal> x14288 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14288.valid){
continue;
}
CheckValue<IkReal> x14289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14287))+(((-1.0)*r20*sj5)))),-1);
if(!x14289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14288.value)+(((1.5707963267949)*(x14289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14290=IKsin(j4);
IkReal x14291=IKcos(j4);
IkReal x14292=(cj2*sj1);
IkReal x14293=(cj1*sj2);
IkReal x14294=(cj5*sj3);
IkReal x14295=(cj5*r10);
IkReal x14296=(r00*sj5);
IkReal x14297=(sj1*sj2);
IkReal x14298=(r11*sj5);
IkReal x14299=(cj3*cj5);
IkReal x14300=(cj3*sj5);
IkReal x14301=(r21*sj5);
IkReal x14302=(cj1*cj2);
IkReal x14303=(sj3*sj5);
IkReal x14304=(r01*sj5);
IkReal x14305=((1.0)*x14291);
IkReal x14306=((1.0)*x14290);
IkReal x14307=(cj3*x14290);
IkReal x14308=(cj3*x14291);
IkReal x14309=(x14293+x14292);
evalcond[0]=((((-1.0)*r22*x14305))+(((-1.0)*cj5*r20*x14306))+((x14290*x14301)));
evalcond[1]=((((-1.0)*cj5*r00*x14306))+(((-1.0)*r02*x14305))+((x14290*x14304)));
evalcond[2]=((-1.0)+(((-1.0)*x14295*x14306))+(((-1.0)*r12*x14305))+((x14290*x14298)));
evalcond[3]=(((x14298*x14308))+((r12*x14307))+(((-1.0)*cj3*x14295*x14305))+((r11*x14294))+((r10*x14303)));
evalcond[4]=((((-1.0)*sj3*x14298*x14305))+((r11*x14299))+((r10*x14300))+(((-1.0)*r12*sj3*x14306))+((r10*x14291*x14294)));
evalcond[5]=(((r20*x14303))+((r21*x14291*x14300))+((r21*x14294))+(((-1.0)*r20*x14299*x14305))+((r22*x14307))+x14309);
evalcond[6]=(((r02*x14307))+((r01*x14291*x14300))+((r01*x14294))+((sj3*x14296))+(((-1.0)*r00*x14299*x14305))+(((-1.0)*x14297))+x14302);
evalcond[7]=(((cj3*x14296))+(((-1.0)*r02*sj3*x14306))+((r01*x14299))+(((-1.0)*r01*x14303*x14305))+x14309+((r00*x14291*x14294)));
evalcond[8]=(((r20*x14300))+(((-1.0)*sj3*x14301*x14305))+(((-1.0)*r22*sj3*x14306))+((r21*x14299))+((r20*x14291*x14294))+(((-1.0)*x14302))+x14297);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14310 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14310.valid){
continue;
}
CheckValue<IkReal> x14311=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14310.value)+(((1.5707963267949)*(x14311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14312=IKsin(j4);
IkReal x14313=IKcos(j4);
IkReal x14314=(cj2*sj1);
IkReal x14315=(cj1*sj2);
IkReal x14316=(cj5*sj3);
IkReal x14317=(cj5*r10);
IkReal x14318=(r00*sj5);
IkReal x14319=(sj1*sj2);
IkReal x14320=(r11*sj5);
IkReal x14321=(cj3*cj5);
IkReal x14322=(cj3*sj5);
IkReal x14323=(r21*sj5);
IkReal x14324=(cj1*cj2);
IkReal x14325=(sj3*sj5);
IkReal x14326=(r01*sj5);
IkReal x14327=((1.0)*x14313);
IkReal x14328=((1.0)*x14312);
IkReal x14329=(cj3*x14312);
IkReal x14330=(cj3*x14313);
IkReal x14331=(x14314+x14315);
evalcond[0]=((((-1.0)*cj5*r20*x14328))+(((-1.0)*r22*x14327))+((x14312*x14323)));
evalcond[1]=((((-1.0)*cj5*r00*x14328))+(((-1.0)*r02*x14327))+((x14312*x14326)));
evalcond[2]=((-1.0)+(((-1.0)*x14317*x14328))+(((-1.0)*r12*x14327))+((x14312*x14320)));
evalcond[3]=(((r11*x14316))+(((-1.0)*cj3*x14317*x14327))+((r10*x14325))+((x14320*x14330))+((r12*x14329)));
evalcond[4]=(((r10*x14322))+(((-1.0)*sj3*x14320*x14327))+((r11*x14321))+(((-1.0)*r12*sj3*x14328))+((r10*x14313*x14316)));
evalcond[5]=((((-1.0)*r20*x14321*x14327))+((r20*x14325))+((r21*x14316))+x14331+((r21*x14313*x14322))+((r22*x14329)));
evalcond[6]=(((r01*x14313*x14322))+((sj3*x14318))+((r02*x14329))+(((-1.0)*x14319))+(((-1.0)*r00*x14321*x14327))+((r01*x14316))+x14324);
evalcond[7]=(((cj3*x14318))+((r01*x14321))+((r00*x14313*x14316))+(((-1.0)*r01*x14325*x14327))+(((-1.0)*r02*sj3*x14328))+x14331);
evalcond[8]=((((-1.0)*r22*sj3*x14328))+(((-1.0)*sj3*x14323*x14327))+((r20*x14313*x14316))+((r21*x14321))+((r20*x14322))+x14319+(((-1.0)*x14324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14332=((-1.0)*r00);
IkReal x14334 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14334)==0){
continue;
}
IkReal x14333=pow(x14334,-0.5);
CheckValue<IkReal> x14335 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14332),IKFAST_ATAN2_MAGTHRESH);
if(!x14335.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14335.value));
IkReal gconst13=(r01*x14333);
IkReal gconst14=(x14332*x14333);
CheckValue<IkReal> x14336 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14336.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14336.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14337=((-1.0)*r00);
IkReal x14338=x14333;
CheckValue<IkReal> x14340 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14337),IKFAST_ATAN2_MAGTHRESH);
if(!x14340.valid){
continue;
}
IkReal x14339=((-1.0)*(x14340.value));
sj5=gconst13;
cj5=gconst14;
j5=x14339;
IkReal gconst12=x14339;
IkReal gconst13=(r01*x14338);
IkReal gconst14=(x14337*x14338);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14341=((1.0)*sj0);
IkReal x14342=((1.0)*cj0);
CheckValue<IkReal> x14343 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14341))+(((-1.0)*r02*x14342)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14341))+(((-1.0)*gconst13*r01*x14342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14343.valid){
continue;
}
CheckValue<IkReal> x14344=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14343.value)+(((1.5707963267949)*(x14344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14345=IKsin(j4);
IkReal x14346=IKcos(j4);
IkReal x14347=((1.0)*r22);
IkReal x14348=((1.0)*r12);
IkReal x14349=(gconst13*sj3);
IkReal x14350=(gconst13*r01);
IkReal x14351=(sj1*sj2);
IkReal x14352=(gconst14*sj3);
IkReal x14353=(cj2*sj1);
IkReal x14354=((1.0)*sj0);
IkReal x14355=(cj3*gconst13);
IkReal x14356=(cj3*gconst14);
IkReal x14357=((1.0)*cj0);
IkReal x14358=((1.0)*gconst14);
IkReal x14359=(cj1*sj2);
IkReal x14360=(sj3*x14345);
IkReal x14361=((1.0)*cj1*cj2);
IkReal x14362=(cj3*x14346);
IkReal x14363=(cj3*x14345);
IkReal x14364=(gconst13*x14345);
IkReal x14365=((1.0)*x14346);
IkReal x14366=(x14345*x14358);
evalcond[0]=(((r21*x14364))+(((-1.0)*x14346*x14347))+(((-1.0)*r20*x14366)));
evalcond[1]=(((r11*x14364))+cj0+(((-1.0)*r10*x14366))+(((-1.0)*x14346*x14348)));
evalcond[2]=((((-1.0)*r00*x14366))+(((-1.0)*x14354))+(((-1.0)*r02*x14365))+((x14345*x14350)));
evalcond[3]=((((-1.0)*r20*x14356*x14365))+((r21*x14346*x14355))+((r20*x14349))+((r21*x14352))+x14353+x14359+((r22*x14363)));
evalcond[4]=((((-1.0)*r21*x14349*x14365))+(((-1.0)*x14347*x14360))+((r20*x14355))+(((-1.0)*x14361))+((r21*x14356))+x14351+((r20*x14346*x14352)));
evalcond[5]=(((r02*x14363))+((r00*x14349))+(((-1.0)*cj1*cj2*x14357))+((cj0*x14351))+(((-1.0)*r00*x14356*x14365))+((r01*x14352))+((x14350*x14362)));
evalcond[6]=((((-1.0)*cj1*cj2*x14354))+((r11*x14352))+(((-1.0)*r10*x14356*x14365))+((r10*x14349))+((sj0*x14351))+((r11*x14346*x14355))+((r12*x14363)));
evalcond[7]=((((-1.0)*r02*x14360))+((r00*x14346*x14352))+((r00*x14355))+((r01*x14356))+(((-1.0)*r01*x14349*x14365))+(((-1.0)*x14353*x14357))+(((-1.0)*x14357*x14359)));
evalcond[8]=(((r10*x14346*x14352))+(((-1.0)*r11*x14349*x14365))+((r11*x14356))+(((-1.0)*x14354*x14359))+(((-1.0)*x14348*x14360))+((r10*x14355))+(((-1.0)*x14353*x14354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14367=((1.0)*gconst14);
CheckValue<IkReal> x14368=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14367)))),-1);
if(!x14368.valid){
continue;
}
CheckValue<IkReal> x14369 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14368.value)))+(x14369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14370=IKsin(j4);
IkReal x14371=IKcos(j4);
IkReal x14372=((1.0)*r22);
IkReal x14373=((1.0)*r12);
IkReal x14374=(gconst13*sj3);
IkReal x14375=(gconst13*r01);
IkReal x14376=(sj1*sj2);
IkReal x14377=(gconst14*sj3);
IkReal x14378=(cj2*sj1);
IkReal x14379=((1.0)*sj0);
IkReal x14380=(cj3*gconst13);
IkReal x14381=(cj3*gconst14);
IkReal x14382=((1.0)*cj0);
IkReal x14383=((1.0)*gconst14);
IkReal x14384=(cj1*sj2);
IkReal x14385=(sj3*x14370);
IkReal x14386=((1.0)*cj1*cj2);
IkReal x14387=(cj3*x14371);
IkReal x14388=(cj3*x14370);
IkReal x14389=(gconst13*x14370);
IkReal x14390=((1.0)*x14371);
IkReal x14391=(x14370*x14383);
evalcond[0]=(((r21*x14389))+(((-1.0)*x14371*x14372))+(((-1.0)*r20*x14391)));
evalcond[1]=(cj0+(((-1.0)*x14371*x14373))+((r11*x14389))+(((-1.0)*r10*x14391)));
evalcond[2]=(((x14370*x14375))+(((-1.0)*r00*x14391))+(((-1.0)*x14379))+(((-1.0)*r02*x14390)));
evalcond[3]=(((r21*x14377))+((r21*x14371*x14380))+(((-1.0)*r20*x14381*x14390))+((r22*x14388))+((r20*x14374))+x14378+x14384);
evalcond[4]=(((r20*x14380))+(((-1.0)*x14386))+((r21*x14381))+(((-1.0)*x14372*x14385))+((r20*x14371*x14377))+x14376+(((-1.0)*r21*x14374*x14390)));
evalcond[5]=(((r01*x14377))+((x14375*x14387))+((r00*x14374))+(((-1.0)*cj1*cj2*x14382))+(((-1.0)*r00*x14381*x14390))+((r02*x14388))+((cj0*x14376)));
evalcond[6]=(((r11*x14371*x14380))+((r10*x14374))+((r12*x14388))+((r11*x14377))+(((-1.0)*cj1*cj2*x14379))+(((-1.0)*r10*x14381*x14390))+((sj0*x14376)));
evalcond[7]=((((-1.0)*x14378*x14382))+((r00*x14380))+((r01*x14381))+(((-1.0)*r01*x14374*x14390))+((r00*x14371*x14377))+(((-1.0)*x14382*x14384))+(((-1.0)*r02*x14385)));
evalcond[8]=((((-1.0)*r11*x14374*x14390))+(((-1.0)*x14379*x14384))+(((-1.0)*x14373*x14385))+((r10*x14371*x14377))+((r10*x14380))+((r11*x14381))+(((-1.0)*x14378*x14379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14392=((-1.0)*r01);
IkReal x14394 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14394)==0){
continue;
}
IkReal x14393=pow(x14394,-0.5);
CheckValue<IkReal> x14395 = IKatan2WithCheck(IkReal(x14392),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14395.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14395.value))));
IkReal gconst16=(x14392*x14393);
IkReal gconst17=((1.0)*r00*x14393);
CheckValue<IkReal> x14396 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14396.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14396.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14397=((-1.0)*r01);
CheckValue<IkReal> x14400 = IKatan2WithCheck(IkReal(x14397),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14400.valid){
continue;
}
IkReal x14398=((1.0)*(x14400.value));
IkReal x14399=x14393;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14398)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14398)));
IkReal gconst16=(x14397*x14399);
IkReal gconst17=((1.0)*r00*x14399);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14401=((-1.0)*r01);
CheckValue<IkReal> x14404 = IKatan2WithCheck(IkReal(x14401),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14404.valid){
continue;
}
IkReal x14402=((1.0)*(x14404.value));
IkReal x14403=x14393;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14402)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14402)));
IkReal gconst16=(x14401*x14403);
IkReal gconst17=((1.0)*r00*x14403);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14405=((-1.0)*r01);
CheckValue<IkReal> x14408 = IKatan2WithCheck(IkReal(x14405),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14408.valid){
continue;
}
IkReal x14406=((1.0)*(x14408.value));
IkReal x14407=x14393;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14406)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14406)));
IkReal gconst16=(x14405*x14407);
IkReal gconst17=((1.0)*r00*x14407);
IkReal x14409=r02*r02;
IkReal x14410=(r12*sj0);
IkReal x14411=((1.0)*cj0);
IkReal x14412=x14393;
j4eval[0]=((IKabs((((r02*x14410*x14412))+((cj0*x14409*x14412))+(((-1.0)*x14411*x14412)))))+(IKabs(((((-1.0)*x14410))+(((-1.0)*r02*x14411))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14413=((-1.0)*r01);
CheckValue<IkReal> x14416 = IKatan2WithCheck(IkReal(x14413),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14416.valid){
continue;
}
IkReal x14414=((1.0)*(x14416.value));
IkReal x14415=x14393;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14414)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14414)));
IkReal gconst16=(x14413*x14415);
IkReal gconst17=((1.0)*r00*x14415);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14417=((-1.0)*r01);
CheckValue<IkReal> x14420 = IKatan2WithCheck(IkReal(x14417),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14420.valid){
continue;
}
IkReal x14418=((1.0)*(x14420.value));
IkReal x14419=x14393;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14418)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14418)));
IkReal gconst16=(x14417*x14419);
IkReal gconst17=((1.0)*r00*x14419);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14421=gconst16*gconst16;
IkReal x14422=gconst17*gconst17;
IkReal x14423=(r11*sj3);
IkReal x14424=(cj3*r10);
IkReal x14425=((1.0)*cj3);
IkReal x14426=(r10*sj3);
IkReal x14427=(gconst16*gconst17);
IkReal x14428=(r21*x14421);
IkReal x14429=((1.0)*r20*x14422);
CheckValue<IkReal> x14430 = IKatan2WithCheck(IkReal((((gconst17*r22*x14423))+((gconst16*r22*x14426)))),IkReal(((((-1.0)*x14423*x14429))+((r21*x14423*x14427))+(((-1.0)*r20*x14426*x14427))+((x14426*x14428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14430.valid){
continue;
}
CheckValue<IkReal> x14431=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14427))+(((-1.0)*r11*x14425*x14428))+(((-1.0)*x14424*x14429))+((r21*x14424*x14427))+(((-1.0)*r12*r22*x14425)))),-1);
if(!x14431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14430.value)+(((1.5707963267949)*(x14431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14432=IKsin(j4);
IkReal x14433=IKcos(j4);
IkReal x14434=(cj2*sj1);
IkReal x14435=(cj1*sj2);
IkReal x14436=(gconst16*r21);
IkReal x14437=(cj3*gconst17);
IkReal x14438=(gconst16*r20);
IkReal x14439=(sj1*sj2);
IkReal x14440=(gconst17*r20);
IkReal x14441=(gconst17*sj3);
IkReal x14442=(gconst16*r10);
IkReal x14443=(cj1*cj2);
IkReal x14444=(gconst16*sj3);
IkReal x14445=((1.0)*x14433);
IkReal x14446=((1.0)*x14432);
IkReal x14447=(gconst16*x14432);
IkReal x14448=(cj3*x14433);
IkReal x14449=(cj3*x14432);
IkReal x14450=(x14435+x14434);
evalcond[0]=((((-1.0)*x14440*x14446))+(((-1.0)*r22*x14445))+((x14432*x14436)));
evalcond[1]=(((r01*x14447))+(((-1.0)*gconst17*r00*x14446))+(((-1.0)*r02*x14445)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14445))+((r11*x14447))+(((-1.0)*gconst17*r10*x14446)));
evalcond[3]=(((r12*x14449))+((gconst16*r11*x14448))+((r11*x14441))+((sj3*x14442))+(((-1.0)*r10*x14437*x14445)));
evalcond[4]=(((r11*x14437))+(((-1.0)*r12*sj3*x14446))+((r10*x14433*x14441))+(((-1.0)*r11*x14444*x14445))+((cj3*x14442)));
evalcond[5]=((((-1.0)*r20*x14437*x14445))+((sj3*x14438))+x14450+((x14436*x14448))+((r22*x14449))+((r21*x14441)));
evalcond[6]=((((-1.0)*r00*x14437*x14445))+((r01*x14441))+((r00*x14444))+((gconst16*r01*x14448))+x14443+(((-1.0)*x14439))+((r02*x14449)));
evalcond[7]=(((r00*x14433*x14441))+((r01*x14437))+x14450+(((-1.0)*r01*x14444*x14445))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14446)));
evalcond[8]=((((-1.0)*sj3*x14436*x14445))+((r21*x14437))+(((-1.0)*r22*sj3*x14446))+(((-1.0)*x14443))+x14439+((cj3*x14438))+((sj3*x14433*x14440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14451=((1.0)*gconst17);
CheckValue<IkReal> x14452=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14451)))),-1);
if(!x14452.valid){
continue;
}
CheckValue<IkReal> x14453 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14451))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14452.value)))+(x14453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14454=IKsin(j4);
IkReal x14455=IKcos(j4);
IkReal x14456=(cj2*sj1);
IkReal x14457=(cj1*sj2);
IkReal x14458=(gconst16*r21);
IkReal x14459=(cj3*gconst17);
IkReal x14460=(gconst16*r20);
IkReal x14461=(sj1*sj2);
IkReal x14462=(gconst17*r20);
IkReal x14463=(gconst17*sj3);
IkReal x14464=(gconst16*r10);
IkReal x14465=(cj1*cj2);
IkReal x14466=(gconst16*sj3);
IkReal x14467=((1.0)*x14455);
IkReal x14468=((1.0)*x14454);
IkReal x14469=(gconst16*x14454);
IkReal x14470=(cj3*x14455);
IkReal x14471=(cj3*x14454);
IkReal x14472=(x14457+x14456);
evalcond[0]=((((-1.0)*x14462*x14468))+((x14454*x14458))+(((-1.0)*r22*x14467)));
evalcond[1]=((((-1.0)*gconst17*r00*x14468))+((r01*x14469))+(((-1.0)*r02*x14467)));
evalcond[2]=((-1.0)+((r11*x14469))+(((-1.0)*r12*x14467))+(((-1.0)*gconst17*r10*x14468)));
evalcond[3]=(((gconst16*r11*x14470))+((sj3*x14464))+((r11*x14463))+((r12*x14471))+(((-1.0)*r10*x14459*x14467)));
evalcond[4]=(((cj3*x14464))+((r11*x14459))+(((-1.0)*r12*sj3*x14468))+(((-1.0)*r11*x14466*x14467))+((r10*x14455*x14463)));
evalcond[5]=(((r21*x14463))+((sj3*x14460))+((r22*x14471))+(((-1.0)*r20*x14459*x14467))+x14472+((x14458*x14470)));
evalcond[6]=(((gconst16*r01*x14470))+(((-1.0)*r00*x14459*x14467))+((r01*x14463))+((r00*x14466))+(((-1.0)*x14461))+((r02*x14471))+x14465);
evalcond[7]=(((r00*x14455*x14463))+((r01*x14459))+(((-1.0)*r02*sj3*x14468))+x14472+(((-1.0)*r01*x14466*x14467))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14460))+(((-1.0)*sj3*x14458*x14467))+((sj3*x14455*x14462))+(((-1.0)*r22*sj3*x14468))+(((-1.0)*x14465))+x14461+((r21*x14459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14473=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14473.valid){
continue;
}
CheckValue<IkReal> x14474 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14473.value)))+(x14474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14475=IKsin(j4);
IkReal x14476=IKcos(j4);
IkReal x14477=(cj2*sj1);
IkReal x14478=(cj1*sj2);
IkReal x14479=(gconst16*r21);
IkReal x14480=(cj3*gconst17);
IkReal x14481=(gconst16*r20);
IkReal x14482=(sj1*sj2);
IkReal x14483=(gconst17*r20);
IkReal x14484=(gconst17*sj3);
IkReal x14485=(gconst16*r10);
IkReal x14486=(cj1*cj2);
IkReal x14487=(gconst16*sj3);
IkReal x14488=((1.0)*x14476);
IkReal x14489=((1.0)*x14475);
IkReal x14490=(gconst16*x14475);
IkReal x14491=(cj3*x14476);
IkReal x14492=(cj3*x14475);
IkReal x14493=(x14478+x14477);
evalcond[0]=((((-1.0)*x14483*x14489))+(((-1.0)*r22*x14488))+((x14475*x14479)));
evalcond[1]=((((-1.0)*gconst17*r00*x14489))+(((-1.0)*r02*x14488))+((r01*x14490)));
evalcond[2]=((-1.0)+((r11*x14490))+(((-1.0)*gconst17*r10*x14489))+(((-1.0)*r12*x14488)));
evalcond[3]=(((r12*x14492))+((r11*x14484))+(((-1.0)*r10*x14480*x14488))+((gconst16*r11*x14491))+((sj3*x14485)));
evalcond[4]=(((r11*x14480))+((r10*x14476*x14484))+((cj3*x14485))+(((-1.0)*r11*x14487*x14488))+(((-1.0)*r12*sj3*x14489)));
evalcond[5]=((((-1.0)*r20*x14480*x14488))+((r21*x14484))+((r22*x14492))+x14493+((x14479*x14491))+((sj3*x14481)));
evalcond[6]=(((gconst16*r01*x14491))+(((-1.0)*x14482))+((r02*x14492))+x14486+((r00*x14487))+((r01*x14484))+(((-1.0)*r00*x14480*x14488)));
evalcond[7]=((((-1.0)*r02*sj3*x14489))+x14493+(((-1.0)*r01*x14487*x14488))+((r00*x14476*x14484))+((r01*x14480))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*sj3*x14479*x14488))+((sj3*x14476*x14483))+((r21*x14480))+(((-1.0)*x14486))+(((-1.0)*r22*sj3*x14489))+((cj3*x14481))+x14482);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14494=((-1.0)*r01);
CheckValue<IkReal> x14497 = IKatan2WithCheck(IkReal(x14494),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14497.valid){
continue;
}
IkReal x14495=((1.0)*(x14497.value));
IkReal x14496=x14393;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14495)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14495)));
IkReal gconst16=(x14494*x14496);
IkReal gconst17=((1.0)*r00*x14496);
IkReal x14498=r02*r02;
IkReal x14499=(r12*sj0);
IkReal x14500=((1.0)*cj0);
IkReal x14501=x14393;
j4eval[0]=((IKabs(((((-1.0)*x14499))+(((-1.0)*r02*x14500)))))+(IKabs(((((-1.0)*x14500*x14501))+((r02*x14499*x14501))+((cj0*x14498*x14501))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14502=((1.0)*r12);
IkReal x14503=(sj1*sj2);
IkReal x14504=(cj1*cj2);
IkReal x14505=((1.0)*sj3);
IkReal x14506=(gconst16*r21);
IkReal x14507=(cj3*gconst16*r20);
IkReal x14508=(gconst17*r20*sj3);
IkReal x14509=(cj3*gconst17*r21);
CheckValue<IkReal> x14510=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14506))+((gconst16*r11*x14508))+(((-1.0)*gconst16*r11*x14505*x14506))+(((-1.0)*r10*r20*x14505*(gconst17*gconst17)))),-1);
if(!x14510.valid){
continue;
}
CheckValue<IkReal> x14511=IKPowWithIntegerCheck(((((-1.0)*x14505*x14506))+x14508),-1);
if(!x14511.valid){
continue;
}
if( IKabs(((x14510.value)*(((((-1.0)*x14502*x14509))+(((-1.0)*x14502*x14507))+(((-1.0)*x14502*x14503))+(((-1.0)*cj0*gconst17*r20*x14505))+((cj0*sj3*x14506))+((r12*x14504)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14511.value)*(((((-1.0)*x14509))+(((-1.0)*x14503))+(((-1.0)*x14507))+x14504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14510.value)*(((((-1.0)*x14502*x14509))+(((-1.0)*x14502*x14507))+(((-1.0)*x14502*x14503))+(((-1.0)*cj0*gconst17*r20*x14505))+((cj0*sj3*x14506))+((r12*x14504))))))+IKsqr(((x14511.value)*(((((-1.0)*x14509))+(((-1.0)*x14503))+(((-1.0)*x14507))+x14504))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14510.value)*(((((-1.0)*x14502*x14509))+(((-1.0)*x14502*x14507))+(((-1.0)*x14502*x14503))+(((-1.0)*cj0*gconst17*r20*x14505))+((cj0*sj3*x14506))+((r12*x14504))))), ((x14511.value)*(((((-1.0)*x14509))+(((-1.0)*x14503))+(((-1.0)*x14507))+x14504))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14512=IKsin(j4);
IkReal x14513=IKcos(j4);
IkReal x14514=((1.0)*gconst17);
IkReal x14515=(gconst17*sj3);
IkReal x14516=(gconst16*r21);
IkReal x14517=(cj3*gconst17);
IkReal x14518=(sj1*sj2);
IkReal x14519=((1.0)*sj0);
IkReal x14520=(gconst16*sj3);
IkReal x14521=(cj3*gconst16);
IkReal x14522=(cj2*sj1);
IkReal x14523=((1.0)*cj0);
IkReal x14524=((1.0)*sj3);
IkReal x14525=(cj1*sj2);
IkReal x14526=(cj3*x14513);
IkReal x14527=(gconst16*x14512);
IkReal x14528=((1.0)*x14513);
IkReal x14529=((1.0)*cj1*cj2);
IkReal x14530=(r02*x14512);
IkReal x14531=(r12*x14512);
evalcond[0]=(((x14512*x14516))+(((-1.0)*r20*x14512*x14514)));
evalcond[1]=(cj0+(((-1.0)*r10*x14512*x14514))+((r11*x14527))+(((-1.0)*r12*x14528)));
evalcond[2]=(((r01*x14527))+(((-1.0)*r02*x14528))+(((-1.0)*x14519))+(((-1.0)*r00*x14512*x14514)));
evalcond[3]=(((r20*x14520))+x14522+x14525+((x14516*x14526))+((r21*x14515))+(((-1.0)*r20*x14514*x14526)));
evalcond[4]=((((-1.0)*x14513*x14516*x14524))+((r20*x14521))+(((-1.0)*x14529))+x14518+((r20*x14513*x14515))+((r21*x14517)));
evalcond[5]=(((r00*x14520))+((cj3*x14530))+((r01*x14515))+((cj0*x14518))+(((-1.0)*cj1*cj2*x14523))+((r01*x14513*x14521))+(((-1.0)*r00*x14514*x14526)));
evalcond[6]=(((cj3*x14531))+((r11*x14515))+(((-1.0)*cj1*cj2*x14519))+((sj0*x14518))+((r11*x14513*x14521))+(((-1.0)*r10*x14514*x14526))+((r10*x14520)));
evalcond[7]=((((-1.0)*x14523*x14525))+(((-1.0)*x14522*x14523))+((r00*x14521))+((r01*x14517))+(((-1.0)*r01*x14520*x14528))+(((-1.0)*x14524*x14530))+((r00*x14513*x14515)));
evalcond[8]=(((r10*x14513*x14515))+(((-1.0)*x14524*x14531))+((r11*x14517))+(((-1.0)*x14519*x14522))+(((-1.0)*x14519*x14525))+(((-1.0)*r11*x14520*x14528))+((r10*x14521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14532=((1.0)*sj0);
IkReal x14533=((1.0)*cj0);
CheckValue<IkReal> x14534=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14534.valid){
continue;
}
CheckValue<IkReal> x14535 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14532))+(((-1.0)*r02*x14533)))),IkReal(((((-1.0)*gconst16*r11*x14532))+(((-1.0)*gconst16*r01*x14533))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14534.value)))+(x14535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14536=IKsin(j4);
IkReal x14537=IKcos(j4);
IkReal x14538=((1.0)*gconst17);
IkReal x14539=(gconst17*sj3);
IkReal x14540=(gconst16*r21);
IkReal x14541=(cj3*gconst17);
IkReal x14542=(sj1*sj2);
IkReal x14543=((1.0)*sj0);
IkReal x14544=(gconst16*sj3);
IkReal x14545=(cj3*gconst16);
IkReal x14546=(cj2*sj1);
IkReal x14547=((1.0)*cj0);
IkReal x14548=((1.0)*sj3);
IkReal x14549=(cj1*sj2);
IkReal x14550=(cj3*x14537);
IkReal x14551=(gconst16*x14536);
IkReal x14552=((1.0)*x14537);
IkReal x14553=((1.0)*cj1*cj2);
IkReal x14554=(r02*x14536);
IkReal x14555=(r12*x14536);
evalcond[0]=(((x14536*x14540))+(((-1.0)*r20*x14536*x14538)));
evalcond[1]=(cj0+(((-1.0)*r12*x14552))+(((-1.0)*r10*x14536*x14538))+((r11*x14551)));
evalcond[2]=((((-1.0)*r02*x14552))+(((-1.0)*r00*x14536*x14538))+((r01*x14551))+(((-1.0)*x14543)));
evalcond[3]=(((x14540*x14550))+((r21*x14539))+x14549+x14546+(((-1.0)*r20*x14538*x14550))+((r20*x14544)));
evalcond[4]=(((r20*x14537*x14539))+((r21*x14541))+(((-1.0)*x14553))+(((-1.0)*x14537*x14540*x14548))+x14542+((r20*x14545)));
evalcond[5]=(((r01*x14537*x14545))+((r00*x14544))+((r01*x14539))+((cj0*x14542))+(((-1.0)*cj1*cj2*x14547))+(((-1.0)*r00*x14538*x14550))+((cj3*x14554)));
evalcond[6]=(((r10*x14544))+((sj0*x14542))+((r11*x14539))+(((-1.0)*cj1*cj2*x14543))+((r11*x14537*x14545))+((cj3*x14555))+(((-1.0)*r10*x14538*x14550)));
evalcond[7]=((((-1.0)*r01*x14544*x14552))+((r00*x14537*x14539))+((r01*x14541))+(((-1.0)*x14547*x14549))+((r00*x14545))+(((-1.0)*x14546*x14547))+(((-1.0)*x14548*x14554)));
evalcond[8]=(((r10*x14545))+((r11*x14541))+((r10*x14537*x14539))+(((-1.0)*x14543*x14549))+(((-1.0)*x14543*x14546))+(((-1.0)*x14548*x14555))+(((-1.0)*r11*x14544*x14552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14556=((1.0)*sj0);
IkReal x14557=((1.0)*cj0);
CheckValue<IkReal> x14558=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14558.valid){
continue;
}
CheckValue<IkReal> x14559 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14557))+(((-1.0)*r12*x14556)))),IkReal((((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14556))+(((-1.0)*gconst16*r01*x14557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14558.value)))+(x14559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14560=IKsin(j4);
IkReal x14561=IKcos(j4);
IkReal x14562=(cj3*gconst17);
IkReal x14563=(gconst16*r21);
IkReal x14564=(gconst17*sj3);
IkReal x14565=(gconst16*r20);
IkReal x14566=(sj1*sj2);
IkReal x14567=(gconst16*r10);
IkReal x14568=(cj2*sj1);
IkReal x14569=(gconst16*sj3);
IkReal x14570=((1.0)*cj0);
IkReal x14571=((1.0)*sj0);
IkReal x14572=(cj1*sj2);
IkReal x14573=((1.0)*x14561);
IkReal x14574=(gconst16*x14560);
IkReal x14575=(cj3*x14561);
IkReal x14576=(cj3*x14560);
IkReal x14577=((1.0)*cj1*cj2);
IkReal x14578=((1.0)*gconst17*x14560);
IkReal x14579=((1.0)*sj3*x14560);
evalcond[0]=(((x14560*x14563))+(((-1.0)*r22*x14573))+(((-1.0)*r20*x14578)));
evalcond[1]=(cj0+(((-1.0)*r12*x14573))+((r11*x14574))+(((-1.0)*r10*x14578)));
evalcond[2]=((((-1.0)*r02*x14573))+(((-1.0)*x14571))+(((-1.0)*r00*x14578))+((r01*x14574)));
evalcond[3]=(((r21*x14564))+(((-1.0)*r20*x14562*x14573))+((x14563*x14575))+x14568+x14572+((r22*x14576))+((sj3*x14565)));
evalcond[4]=(((r21*x14562))+(((-1.0)*r22*x14579))+(((-1.0)*x14577))+((r20*x14561*x14564))+x14566+((cj3*x14565))+(((-1.0)*sj3*x14563*x14573)));
evalcond[5]=(((r01*x14564))+((cj0*x14566))+((r02*x14576))+(((-1.0)*cj1*cj2*x14570))+(((-1.0)*r00*x14562*x14573))+((r00*x14569))+((gconst16*r01*x14575)));
evalcond[6]=((((-1.0)*cj1*cj2*x14571))+((r11*x14564))+(((-1.0)*r10*x14562*x14573))+((r12*x14576))+((gconst16*r11*x14575))+((sj0*x14566))+((sj3*x14567)));
evalcond[7]=(((r01*x14562))+(((-1.0)*x14570*x14572))+((r00*x14561*x14564))+(((-1.0)*r02*x14579))+(((-1.0)*r01*x14569*x14573))+(((-1.0)*x14568*x14570))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14571*x14572))+((r10*x14561*x14564))+(((-1.0)*r12*x14579))+((r11*x14562))+((cj3*x14567))+(((-1.0)*x14568*x14571))+(((-1.0)*r11*x14569*x14573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14580=((1.0)*gconst17);
CheckValue<IkReal> x14581 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14580))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14581.valid){
continue;
}
CheckValue<IkReal> x14582=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14580)))),-1);
if(!x14582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14581.value)+(((1.5707963267949)*(x14582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14583=IKsin(j4);
IkReal x14584=IKcos(j4);
IkReal x14585=(cj3*gconst17);
IkReal x14586=(gconst16*r21);
IkReal x14587=(gconst17*sj3);
IkReal x14588=(gconst16*r20);
IkReal x14589=(sj1*sj2);
IkReal x14590=(gconst16*r10);
IkReal x14591=(cj2*sj1);
IkReal x14592=(gconst16*sj3);
IkReal x14593=((1.0)*cj0);
IkReal x14594=((1.0)*sj0);
IkReal x14595=(cj1*sj2);
IkReal x14596=((1.0)*x14584);
IkReal x14597=(gconst16*x14583);
IkReal x14598=(cj3*x14584);
IkReal x14599=(cj3*x14583);
IkReal x14600=((1.0)*cj1*cj2);
IkReal x14601=((1.0)*gconst17*x14583);
IkReal x14602=((1.0)*sj3*x14583);
evalcond[0]=((((-1.0)*r20*x14601))+(((-1.0)*r22*x14596))+((x14583*x14586)));
evalcond[1]=(cj0+(((-1.0)*r10*x14601))+(((-1.0)*r12*x14596))+((r11*x14597)));
evalcond[2]=((((-1.0)*r02*x14596))+(((-1.0)*x14594))+(((-1.0)*r00*x14601))+((r01*x14597)));
evalcond[3]=((((-1.0)*r20*x14585*x14596))+((r22*x14599))+((r21*x14587))+x14595+x14591+((x14586*x14598))+((sj3*x14588)));
evalcond[4]=(((cj3*x14588))+(((-1.0)*r22*x14602))+(((-1.0)*sj3*x14586*x14596))+((r20*x14584*x14587))+((r21*x14585))+x14589+(((-1.0)*x14600)));
evalcond[5]=((((-1.0)*cj1*cj2*x14593))+((gconst16*r01*x14598))+(((-1.0)*r00*x14585*x14596))+((r01*x14587))+((r00*x14592))+((cj0*x14589))+((r02*x14599)));
evalcond[6]=(((sj0*x14589))+((gconst16*r11*x14598))+(((-1.0)*cj1*cj2*x14594))+(((-1.0)*r10*x14585*x14596))+((r11*x14587))+((sj3*x14590))+((r12*x14599)));
evalcond[7]=(((r00*x14584*x14587))+(((-1.0)*r01*x14592*x14596))+(((-1.0)*x14593*x14595))+((r01*x14585))+(((-1.0)*r02*x14602))+(((-1.0)*x14591*x14593))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14592*x14596))+((cj3*x14590))+(((-1.0)*x14594*x14595))+((r10*x14584*x14587))+(((-1.0)*r12*x14602))+((r11*x14585))+(((-1.0)*x14591*x14594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14603=((1.0)*gconst17);
CheckValue<IkReal> x14604=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14603)))),-1);
if(!x14604.valid){
continue;
}
CheckValue<IkReal> x14605 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14603))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14604.value)))+(x14605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14606=IKsin(j4);
IkReal x14607=IKcos(j4);
IkReal x14608=(cj3*gconst17);
IkReal x14609=(gconst16*r21);
IkReal x14610=(gconst17*sj3);
IkReal x14611=(gconst16*r20);
IkReal x14612=(sj1*sj2);
IkReal x14613=(gconst16*r10);
IkReal x14614=(cj2*sj1);
IkReal x14615=(gconst16*sj3);
IkReal x14616=((1.0)*cj0);
IkReal x14617=((1.0)*sj0);
IkReal x14618=(cj1*sj2);
IkReal x14619=((1.0)*x14607);
IkReal x14620=(gconst16*x14606);
IkReal x14621=(cj3*x14607);
IkReal x14622=(cj3*x14606);
IkReal x14623=((1.0)*cj1*cj2);
IkReal x14624=((1.0)*gconst17*x14606);
IkReal x14625=((1.0)*sj3*x14606);
evalcond[0]=((((-1.0)*r22*x14619))+((x14606*x14609))+(((-1.0)*r20*x14624)));
evalcond[1]=((((-1.0)*r10*x14624))+cj0+((r11*x14620))+(((-1.0)*r12*x14619)));
evalcond[2]=((((-1.0)*r00*x14624))+(((-1.0)*r02*x14619))+((r01*x14620))+(((-1.0)*x14617)));
evalcond[3]=(((r21*x14610))+(((-1.0)*r20*x14608*x14619))+x14618+x14614+((r22*x14622))+((sj3*x14611))+((x14609*x14621)));
evalcond[4]=(((r20*x14607*x14610))+(((-1.0)*x14623))+((r21*x14608))+((cj3*x14611))+x14612+(((-1.0)*r22*x14625))+(((-1.0)*sj3*x14609*x14619)));
evalcond[5]=((((-1.0)*r00*x14608*x14619))+((r02*x14622))+((cj0*x14612))+((gconst16*r01*x14621))+((r01*x14610))+(((-1.0)*cj1*cj2*x14616))+((r00*x14615)));
evalcond[6]=((((-1.0)*r10*x14608*x14619))+((sj0*x14612))+((gconst16*r11*x14621))+(((-1.0)*cj1*cj2*x14617))+((r12*x14622))+((r11*x14610))+((sj3*x14613)));
evalcond[7]=((((-1.0)*r02*x14625))+(((-1.0)*x14616*x14618))+((r00*x14607*x14610))+((r01*x14608))+(((-1.0)*x14614*x14616))+(((-1.0)*r01*x14615*x14619))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14617*x14618))+(((-1.0)*x14614*x14617))+((cj3*x14613))+((r10*x14607*x14610))+((r11*x14608))+(((-1.0)*r12*x14625))+(((-1.0)*r11*x14615*x14619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14626=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14626;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14627=((1.0)*cj5);
IkReal x14628=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14627)));
j4eval[0]=x14628;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14627))))));
j4eval[2]=IKsign(x14628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14629=cj5*cj5;
IkReal x14630=(cj3*r01);
IkReal x14631=(cj5*sj5);
IkReal x14632=((1.0)*cj3);
IkReal x14633=(((r20*x14630*x14631))+(((-1.0)*r00*r20*x14629*x14632))+((cj3*r00*r21*x14631))+(((-1.0)*r21*x14630))+(((-1.0)*r02*r22*x14632))+((r21*x14629*x14630)));
j4eval[0]=x14633;
j4eval[1]=IKsign(x14633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14634=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14634;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14635=((1.0)*cj5);
IkReal x14636=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14635)));
j4eval[0]=x14636;
j4eval[1]=((IKabs(((((-1.0)*r20*x14635))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14637=cj5*cj5;
IkReal x14638=r01*r01;
IkReal x14639=(r01*sj5);
IkReal x14640=(cj5*r00);
IkReal x14641=((((-1.0)*x14637*(r00*r00)))+(((-1.0)*(r02*r02)))+((x14637*x14638))+(((-1.0)*x14638))+(((2.0)*x14639*x14640)));
j4eval[0]=x14641;
j4eval[1]=IKsign(x14641);
j4eval[2]=((IKabs(r02))+(IKabs((x14640+(((-1.0)*x14639))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14642=cj5*cj5;
IkReal x14643=r01*r01;
IkReal x14644=(r01*sj5);
IkReal x14645=(cj5*r00);
CheckValue<IkReal> x14646 = IKatan2WithCheck(IkReal(((((-1.0)*x14644))+x14645)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14646.valid){
continue;
}
CheckValue<IkReal> x14647=IKPowWithIntegerCheck(IKsign(((((2.0)*x14644*x14645))+(((-1.0)*x14643))+((x14642*x14643))+(((-1.0)*(r02*r02)))+(((-1.0)*x14642*(r00*r00))))),-1);
if(!x14647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14646.value)+(((1.5707963267949)*(x14647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14648=IKsin(j4);
IkReal x14649=IKcos(j4);
IkReal x14650=(cj5*r10);
IkReal x14651=(r01*sj5);
IkReal x14652=((1.0)*cj2);
IkReal x14653=(cj5*r00);
IkReal x14654=(cj5*r20);
IkReal x14655=((1.0)*x14649);
IkReal x14656=((1.0)*x14648);
IkReal x14657=(sj5*x14648);
evalcond[0]=((((-1.0)*x14654*x14656))+(((-1.0)*r22*x14655))+((r21*x14657)));
evalcond[1]=((((-1.0)*r12*x14655))+(((-1.0)*x14650*x14656))+((r11*x14657)));
evalcond[2]=((((-1.0)*r02*x14656))+((x14649*x14653))+(((-1.0)*x14651*x14655)));
evalcond[3]=((-1.0)+(((-1.0)*x14653*x14656))+(((-1.0)*r02*x14655))+((x14648*x14651)));
evalcond[4]=((((-1.0)*r22*x14656))+(((-1.0)*r21*sj5*x14655))+(((-1.0)*cj1*x14652))+((sj1*sj2))+((x14649*x14654)));
evalcond[5]=((((-1.0)*r12*x14656))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14655))+((x14649*x14650))+(((-1.0)*sj1*x14652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14658=((1.0)*cj5);
CheckValue<IkReal> x14659 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14659.valid){
continue;
}
CheckValue<IkReal> x14660=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14658)))),-1);
if(!x14660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14659.value)+(((1.5707963267949)*(x14660.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14661=IKsin(j4);
IkReal x14662=IKcos(j4);
IkReal x14663=(cj5*r10);
IkReal x14664=(r01*sj5);
IkReal x14665=((1.0)*cj2);
IkReal x14666=(cj5*r00);
IkReal x14667=(cj5*r20);
IkReal x14668=((1.0)*x14662);
IkReal x14669=((1.0)*x14661);
IkReal x14670=(sj5*x14661);
evalcond[0]=((((-1.0)*r22*x14668))+((r21*x14670))+(((-1.0)*x14667*x14669)));
evalcond[1]=((((-1.0)*x14663*x14669))+(((-1.0)*r12*x14668))+((r11*x14670)));
evalcond[2]=((((-1.0)*x14664*x14668))+((x14662*x14666))+(((-1.0)*r02*x14669)));
evalcond[3]=((-1.0)+((x14661*x14664))+(((-1.0)*x14666*x14669))+(((-1.0)*r02*x14668)));
evalcond[4]=((((-1.0)*r22*x14669))+((x14662*x14667))+((sj1*sj2))+(((-1.0)*cj1*x14665))+(((-1.0)*r21*sj5*x14668)));
evalcond[5]=((((-1.0)*r11*sj5*x14668))+(((-1.0)*sj1*x14665))+((x14662*x14663))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14671=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14671.valid){
continue;
}
CheckValue<IkReal> x14672 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14671.value)))+(x14672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14673=IKsin(j4);
IkReal x14674=IKcos(j4);
IkReal x14675=(cj5*r10);
IkReal x14676=(r01*sj5);
IkReal x14677=((1.0)*cj2);
IkReal x14678=(cj5*r00);
IkReal x14679=(cj5*r20);
IkReal x14680=((1.0)*x14674);
IkReal x14681=((1.0)*x14673);
IkReal x14682=(sj5*x14673);
evalcond[0]=((((-1.0)*r22*x14680))+((r21*x14682))+(((-1.0)*x14679*x14681)));
evalcond[1]=(((r11*x14682))+(((-1.0)*x14675*x14681))+(((-1.0)*r12*x14680)));
evalcond[2]=((((-1.0)*r02*x14681))+(((-1.0)*x14676*x14680))+((x14674*x14678)));
evalcond[3]=((-1.0)+(((-1.0)*x14678*x14681))+(((-1.0)*r02*x14680))+((x14673*x14676)));
evalcond[4]=((((-1.0)*r21*sj5*x14680))+(((-1.0)*cj1*x14677))+((sj1*sj2))+(((-1.0)*r22*x14681))+((x14674*x14679)));
evalcond[5]=((((-1.0)*sj1*x14677))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14680))+((x14674*x14675))+(((-1.0)*r12*x14681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14683=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14683;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14683);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14684=((1.0)*cj5);
IkReal x14685=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14684)));
j4eval[0]=x14685;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14684))))));
j4eval[2]=IKsign(x14685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14686=cj5*cj5;
IkReal x14687=r01*r01;
IkReal x14688=(cj5*r00);
IkReal x14689=(r01*sj5);
IkReal x14690=((((-1.0)*x14686*x14687))+((x14686*(r00*r00)))+(((-2.0)*x14688*x14689))+x14687+(r02*r02));
j4eval[0]=x14690;
j4eval[1]=IKsign(x14690);
j4eval[2]=((IKabs(r02))+(IKabs((x14689+(((-1.0)*x14688))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14691=cj5*cj5;
IkReal x14692=r01*r01;
IkReal x14693=(r01*sj5);
IkReal x14694=(cj5*r00);
CheckValue<IkReal> x14695 = IKatan2WithCheck(IkReal((x14693+(((-1.0)*x14694)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14695.valid){
continue;
}
CheckValue<IkReal> x14696=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14693*x14694))+(((-1.0)*x14691*x14692))+((x14691*(r00*r00)))+x14692+(r02*r02))),-1);
if(!x14696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14695.value)+(((1.5707963267949)*(x14696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14697=IKcos(j4);
IkReal x14698=IKsin(j4);
IkReal x14699=(cj5*r00);
IkReal x14700=(cj5*r10);
IkReal x14701=(r21*sj5);
IkReal x14702=((1.0)*cj2);
IkReal x14703=(cj5*r20);
IkReal x14704=((1.0)*x14697);
IkReal x14705=((1.0)*x14698);
IkReal x14706=(sj5*x14698);
IkReal x14707=(sj5*x14697);
evalcond[0]=(((r01*x14707))+(((-1.0)*x14699*x14704))+((r02*x14698)));
evalcond[1]=(((x14698*x14701))+(((-1.0)*x14703*x14705))+(((-1.0)*r22*x14704)));
evalcond[2]=((((-1.0)*r12*x14704))+(((-1.0)*x14700*x14705))+((r11*x14706)));
evalcond[3]=((-1.0)+((r01*x14706))+(((-1.0)*x14699*x14705))+(((-1.0)*r02*x14704)));
evalcond[4]=(((r22*x14698))+((sj1*sj2))+(((-1.0)*cj1*x14702))+(((-1.0)*x14703*x14704))+((x14697*x14701)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14702))+((r12*x14698))+(((-1.0)*x14700*x14704))+((r11*x14707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14708=((1.0)*cj5);
CheckValue<IkReal> x14709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14708)))),-1);
if(!x14709.valid){
continue;
}
CheckValue<IkReal> x14710 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14709.value)))+(x14710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14711=IKcos(j4);
IkReal x14712=IKsin(j4);
IkReal x14713=(cj5*r00);
IkReal x14714=(cj5*r10);
IkReal x14715=(r21*sj5);
IkReal x14716=((1.0)*cj2);
IkReal x14717=(cj5*r20);
IkReal x14718=((1.0)*x14711);
IkReal x14719=((1.0)*x14712);
IkReal x14720=(sj5*x14712);
IkReal x14721=(sj5*x14711);
evalcond[0]=(((r01*x14721))+((r02*x14712))+(((-1.0)*x14713*x14718)));
evalcond[1]=((((-1.0)*r22*x14718))+(((-1.0)*x14717*x14719))+((x14712*x14715)));
evalcond[2]=((((-1.0)*x14714*x14719))+((r11*x14720))+(((-1.0)*r12*x14718)));
evalcond[3]=((-1.0)+((r01*x14720))+(((-1.0)*r02*x14718))+(((-1.0)*x14713*x14719)));
evalcond[4]=(((x14711*x14715))+(((-1.0)*x14717*x14718))+((r22*x14712))+((sj1*sj2))+(((-1.0)*cj1*x14716)));
evalcond[5]=(((r12*x14712))+(((-1.0)*sj1*x14716))+(((-1.0)*cj1*sj2))+(((-1.0)*x14714*x14718))+((r11*x14721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14722=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14722.valid){
continue;
}
CheckValue<IkReal> x14723 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14722.value)))+(x14723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14724=IKcos(j4);
IkReal x14725=IKsin(j4);
IkReal x14726=(cj5*r00);
IkReal x14727=(cj5*r10);
IkReal x14728=(r21*sj5);
IkReal x14729=((1.0)*cj2);
IkReal x14730=(cj5*r20);
IkReal x14731=((1.0)*x14724);
IkReal x14732=((1.0)*x14725);
IkReal x14733=(sj5*x14725);
IkReal x14734=(sj5*x14724);
evalcond[0]=(((r01*x14734))+((r02*x14725))+(((-1.0)*x14726*x14731)));
evalcond[1]=((((-1.0)*r22*x14731))+((x14725*x14728))+(((-1.0)*x14730*x14732)));
evalcond[2]=((((-1.0)*r12*x14731))+((r11*x14733))+(((-1.0)*x14727*x14732)));
evalcond[3]=((-1.0)+((r01*x14733))+(((-1.0)*x14726*x14732))+(((-1.0)*r02*x14731)));
evalcond[4]=(((sj1*sj2))+((r22*x14725))+(((-1.0)*cj1*x14729))+((x14724*x14728))+(((-1.0)*x14730*x14731)));
evalcond[5]=((((-1.0)*sj1*x14729))+(((-1.0)*cj1*sj2))+((r11*x14734))+(((-1.0)*x14727*x14731))+((r12*x14725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14736 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14736)==0){
continue;
}
IkReal x14735=pow(x14736,-0.5);
CheckValue<IkReal> x14737 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14737.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14737.value));
IkReal gconst49=((-1.0)*r21*x14735);
IkReal gconst50=(r20*x14735);
CheckValue<IkReal> x14738 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14738.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14738.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14741 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14741.valid){
continue;
}
IkReal x14739=((-1.0)*(x14741.value));
IkReal x14740=x14735;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14739;
IkReal gconst48=x14739;
IkReal gconst49=((-1.0)*r21*x14740);
IkReal gconst50=(r20*x14740);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14744 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14744.valid){
continue;
}
IkReal x14742=((-1.0)*(x14744.value));
IkReal x14743=x14735;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14742;
IkReal gconst48=x14742;
IkReal gconst49=((-1.0)*r21*x14743);
IkReal gconst50=(r20*x14743);
CheckValue<IkReal> x14752=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14752.valid){
continue;
}
IkReal x14745=x14752.value;
IkReal x14746=(sj3*x14745);
IkReal x14747=(r11*x14746);
IkReal x14748=(r00*x14746);
IkReal x14749=(r01*x14746);
IkReal x14750=(r10*x14746);
IkReal x14751=(r20*r21*x14746);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14747))+((r10*r20*r21*x14749))+((r10*x14748*(r20*r20)))+((r01*x14747*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14753=gconst49*gconst49;
IkReal x14754=gconst50*gconst50;
IkReal x14755=((1.0)*cj3);
IkReal x14756=(gconst50*r01);
IkReal x14757=(gconst49*r10);
IkReal x14758=(r12*sj3);
IkReal x14759=(gconst49*r00);
IkReal x14760=(r00*sj3);
IkReal x14761=(r11*x14753);
IkReal x14762=(r10*x14754);
CheckValue<IkReal> x14763=IKPowWithIntegerCheck(IKsign((((cj3*x14756*x14757))+(((-1.0)*r01*x14755*x14761))+(((-1.0)*r02*r12*x14755))+(((-1.0)*r00*x14755*x14762))+((cj3*gconst50*r11*x14759)))),-1);
if(!x14763.valid){
continue;
}
CheckValue<IkReal> x14764 = IKatan2WithCheck(IkReal((((x14756*x14758))+((x14758*x14759)))),IkReal((((gconst49*r11*sj3*x14756))+((x14760*x14761))+(((-1.0)*gconst50*x14757*x14760))+(((-1.0)*r01*sj3*x14762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14763.value)))+(x14764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14765=IKsin(j4);
IkReal x14766=IKcos(j4);
IkReal x14767=(sj1*sj2);
IkReal x14768=(gconst50*r20);
IkReal x14769=(gconst50*sj3);
IkReal x14770=(cj3*r01);
IkReal x14771=(gconst50*r10);
IkReal x14772=(gconst49*sj3);
IkReal x14773=((1.0)*cj2);
IkReal x14774=(cj1*sj2);
IkReal x14775=(cj3*r11);
IkReal x14776=(gconst50*r00);
IkReal x14777=(cj3*r21);
IkReal x14778=(cj3*gconst49);
IkReal x14779=(cj1*x14773);
IkReal x14780=((1.0)*x14766);
IkReal x14781=((1.0)*x14765);
IkReal x14782=(gconst49*x14765);
IkReal x14783=(gconst49*x14766);
IkReal x14784=(cj3*x14765);
evalcond[0]=(((r21*x14782))+(((-1.0)*r22*x14780))+(((-1.0)*x14768*x14781)));
evalcond[1]=((((-1.0)*r12*x14780))+((r11*x14782))+(((-1.0)*x14771*x14781)));
evalcond[2]=((-1.0)+((r01*x14782))+(((-1.0)*x14776*x14781))+(((-1.0)*r02*x14780)));
evalcond[3]=(((x14770*x14783))+((r01*x14769))+(((-1.0)*cj3*x14776*x14780))+((r00*x14772))+((r02*x14784)));
evalcond[4]=((((-1.0)*r02*sj3*x14781))+(((-1.0)*r01*x14772*x14780))+((r00*x14778))+((r00*x14766*x14769))+((gconst50*x14770)));
evalcond[5]=(((cj2*sj1))+((r21*x14769))+x14774+(((-1.0)*cj3*x14768*x14780))+((r20*x14772))+((x14777*x14783))+((r22*x14784)));
evalcond[6]=(((r10*x14772))+(((-1.0)*cj3*x14771*x14780))+(((-1.0)*x14779))+((r12*x14784))+((r11*x14769))+x14767+((x14775*x14783)));
evalcond[7]=(((sj3*x14766*x14768))+(((-1.0)*x14779))+(((-1.0)*r22*sj3*x14781))+x14767+((r20*x14778))+((gconst50*x14777))+(((-1.0)*r21*x14772*x14780)));
evalcond[8]=((((-1.0)*r12*sj3*x14781))+((r10*x14778))+(((-1.0)*r11*x14772*x14780))+(((-1.0)*x14774))+((r10*x14766*x14769))+(((-1.0)*sj1*x14773))+((gconst50*x14775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14785=gconst49*gconst49;
IkReal x14786=gconst50*gconst50;
IkReal x14787=(cj3*r12);
IkReal x14788=(gconst49*r00);
IkReal x14789=(r01*r11);
IkReal x14790=(r00*r11);
IkReal x14791=(cj3*gconst50);
IkReal x14792=((1.0)*r01*r10);
IkReal x14793=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14794=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14788))+(((-1.0)*x14792*x14793))+((r00*r10*sj3*x14786))+((sj3*x14785*x14789)))),-1);
if(!x14794.valid){
continue;
}
CheckValue<IkReal> x14795 = IKatan2WithCheck(IkReal((((gconst50*r01*x14787))+((x14787*x14788)))),IkReal(((((-1.0)*r10*x14788*x14791))+(((-1.0)*cj3*x14786*x14792))+((gconst49*x14789*x14791))+((cj3*x14785*x14790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14794.value)))+(x14795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14796=IKsin(j4);
IkReal x14797=IKcos(j4);
IkReal x14798=(sj1*sj2);
IkReal x14799=(gconst50*r20);
IkReal x14800=(gconst50*sj3);
IkReal x14801=(cj3*r01);
IkReal x14802=(gconst50*r10);
IkReal x14803=(gconst49*sj3);
IkReal x14804=((1.0)*cj2);
IkReal x14805=(cj1*sj2);
IkReal x14806=(cj3*r11);
IkReal x14807=(gconst50*r00);
IkReal x14808=(cj3*r21);
IkReal x14809=(cj3*gconst49);
IkReal x14810=(cj1*x14804);
IkReal x14811=((1.0)*x14797);
IkReal x14812=((1.0)*x14796);
IkReal x14813=(gconst49*x14796);
IkReal x14814=(gconst49*x14797);
IkReal x14815=(cj3*x14796);
evalcond[0]=((((-1.0)*r22*x14811))+(((-1.0)*x14799*x14812))+((r21*x14813)));
evalcond[1]=((((-1.0)*x14802*x14812))+(((-1.0)*r12*x14811))+((r11*x14813)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14811))+(((-1.0)*x14807*x14812))+((r01*x14813)));
evalcond[3]=(((r01*x14800))+((r00*x14803))+(((-1.0)*cj3*x14807*x14811))+((x14801*x14814))+((r02*x14815)));
evalcond[4]=((((-1.0)*r02*sj3*x14812))+((r00*x14809))+(((-1.0)*r01*x14803*x14811))+((r00*x14797*x14800))+((gconst50*x14801)));
evalcond[5]=(((cj2*sj1))+((x14808*x14814))+((r21*x14800))+x14805+((r22*x14815))+((r20*x14803))+(((-1.0)*cj3*x14799*x14811)));
evalcond[6]=(((r10*x14803))+(((-1.0)*cj3*x14802*x14811))+((x14806*x14814))+(((-1.0)*x14810))+x14798+((r11*x14800))+((r12*x14815)));
evalcond[7]=((((-1.0)*x14810))+((sj3*x14797*x14799))+x14798+(((-1.0)*r22*sj3*x14812))+((r20*x14809))+(((-1.0)*r21*x14803*x14811))+((gconst50*x14808)));
evalcond[8]=((((-1.0)*r11*x14803*x14811))+((r10*x14809))+(((-1.0)*r12*sj3*x14812))+((r10*x14797*x14800))+(((-1.0)*x14805))+(((-1.0)*sj1*x14804))+((gconst50*x14806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14816=((1.0)*gconst50);
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14816))+((gconst49*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
CheckValue<IkReal> x14818=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14816)))),-1);
if(!x14818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14817.value)+(((1.5707963267949)*(x14818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14819=IKsin(j4);
IkReal x14820=IKcos(j4);
IkReal x14821=(sj1*sj2);
IkReal x14822=(gconst50*r20);
IkReal x14823=(gconst50*sj3);
IkReal x14824=(cj3*r01);
IkReal x14825=(gconst50*r10);
IkReal x14826=(gconst49*sj3);
IkReal x14827=((1.0)*cj2);
IkReal x14828=(cj1*sj2);
IkReal x14829=(cj3*r11);
IkReal x14830=(gconst50*r00);
IkReal x14831=(cj3*r21);
IkReal x14832=(cj3*gconst49);
IkReal x14833=(cj1*x14827);
IkReal x14834=((1.0)*x14820);
IkReal x14835=((1.0)*x14819);
IkReal x14836=(gconst49*x14819);
IkReal x14837=(gconst49*x14820);
IkReal x14838=(cj3*x14819);
evalcond[0]=(((r21*x14836))+(((-1.0)*x14822*x14835))+(((-1.0)*r22*x14834)));
evalcond[1]=((((-1.0)*r12*x14834))+((r11*x14836))+(((-1.0)*x14825*x14835)));
evalcond[2]=((-1.0)+(((-1.0)*x14830*x14835))+(((-1.0)*r02*x14834))+((r01*x14836)));
evalcond[3]=(((r01*x14823))+((r00*x14826))+((r02*x14838))+(((-1.0)*cj3*x14830*x14834))+((x14824*x14837)));
evalcond[4]=(((r00*x14820*x14823))+(((-1.0)*r02*sj3*x14835))+((gconst50*x14824))+(((-1.0)*r01*x14826*x14834))+((r00*x14832)));
evalcond[5]=(((cj2*sj1))+((r21*x14823))+((r22*x14838))+x14828+((x14831*x14837))+(((-1.0)*cj3*x14822*x14834))+((r20*x14826)));
evalcond[6]=(((r12*x14838))+((r10*x14826))+x14821+(((-1.0)*x14833))+((x14829*x14837))+(((-1.0)*cj3*x14825*x14834))+((r11*x14823)));
evalcond[7]=((((-1.0)*r21*x14826*x14834))+(((-1.0)*r22*sj3*x14835))+((gconst50*x14831))+x14821+((sj3*x14820*x14822))+((r20*x14832))+(((-1.0)*x14833)));
evalcond[8]=((((-1.0)*sj1*x14827))+((r10*x14820*x14823))+(((-1.0)*r11*x14826*x14834))+((r10*x14832))+(((-1.0)*x14828))+(((-1.0)*r12*sj3*x14835))+((gconst50*x14829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14840 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14840)==0){
continue;
}
IkReal x14839=pow(x14840,-0.5);
CheckValue<IkReal> x14841 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14841.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14841.value))));
IkReal gconst52=((1.0)*r21*x14839);
IkReal gconst53=((-1.0)*r20*x14839);
CheckValue<IkReal> x14842 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14842.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14842.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14845 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14845.valid){
continue;
}
IkReal x14843=((1.0)*(x14845.value));
IkReal x14844=x14839;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14843)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14843)));
IkReal gconst52=((1.0)*r21*x14844);
IkReal gconst53=((-1.0)*r20*x14844);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14848 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14848.valid){
continue;
}
IkReal x14846=((1.0)*(x14848.value));
IkReal x14847=x14839;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14846)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14846)));
IkReal gconst52=((1.0)*r21*x14847);
IkReal gconst53=((-1.0)*r20*x14847);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14851 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14851.valid){
continue;
}
IkReal x14849=((1.0)*(x14851.value));
IkReal x14850=x14839;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14849)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14849)));
IkReal gconst52=((1.0)*r21*x14850);
IkReal gconst53=((-1.0)*r20*x14850);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14852=gconst52*gconst52;
IkReal x14853=gconst53*gconst53;
IkReal x14854=(gconst53*r01);
IkReal x14855=(cj3*r20);
IkReal x14856=(r22*sj3);
IkReal x14857=((1.0)*cj3);
IkReal x14858=(gconst52*sj3);
IkReal x14859=((1.0)*r00);
IkReal x14860=(gconst52*r00);
IkReal x14861=(r21*x14852);
CheckValue<IkReal> x14862=IKPowWithIntegerCheck(IKsign((((cj3*gconst53*r21*x14860))+(((-1.0)*r02*r22*x14857))+(((-1.0)*x14853*x14855*x14859))+(((-1.0)*r01*x14857*x14861))+((gconst52*x14854*x14855)))),-1);
if(!x14862.valid){
continue;
}
CheckValue<IkReal> x14863 = IKatan2WithCheck(IkReal((((x14854*x14856))+((x14856*x14860)))),IkReal(((((-1.0)*gconst53*r20*x14858*x14859))+((r21*x14854*x14858))+((r00*sj3*x14861))+(((-1.0)*r01*r20*sj3*x14853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14862.value)))+(x14863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14864=IKsin(j4);
IkReal x14865=IKcos(j4);
IkReal x14866=(sj1*sj2);
IkReal x14867=((1.0)*cj1);
IkReal x14868=(cj3*gconst52);
IkReal x14869=(gconst53*sj3);
IkReal x14870=(cj3*gconst53);
IkReal x14871=(cj2*sj1);
IkReal x14872=(gconst52*sj3);
IkReal x14873=(cj2*x14867);
IkReal x14874=((1.0)*x14865);
IkReal x14875=((1.0)*x14864);
IkReal x14876=(gconst52*x14864);
IkReal x14877=(cj3*x14864);
evalcond[0]=((((-1.0)*r22*x14874))+((r21*x14876))+(((-1.0)*gconst53*r20*x14875)));
evalcond[1]=(((r11*x14876))+(((-1.0)*gconst53*r10*x14875))+(((-1.0)*r12*x14874)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14874))+((r01*x14876))+(((-1.0)*gconst53*r00*x14875)));
evalcond[3]=((((-1.0)*r00*x14870*x14874))+((r00*x14872))+((r01*x14865*x14868))+((r01*x14869))+((r02*x14877)));
evalcond[4]=(((r00*x14865*x14869))+((r01*x14870))+(((-1.0)*r01*x14872*x14874))+((r00*x14868))+(((-1.0)*r02*sj3*x14875)));
evalcond[5]=((((-1.0)*r20*x14870*x14874))+((r22*x14877))+x14871+((cj1*sj2))+((r21*x14865*x14868))+((r20*x14872))+((r21*x14869)));
evalcond[6]=(((r11*x14865*x14868))+((r10*x14872))+((r12*x14877))+x14866+(((-1.0)*r10*x14870*x14874))+(((-1.0)*x14873))+((r11*x14869)));
evalcond[7]=((((-1.0)*r21*x14872*x14874))+((r20*x14868))+((r20*x14865*x14869))+(((-1.0)*r22*sj3*x14875))+x14866+((r21*x14870))+(((-1.0)*x14873)));
evalcond[8]=(((r11*x14870))+((r10*x14865*x14869))+(((-1.0)*r12*sj3*x14875))+(((-1.0)*r11*x14872*x14874))+(((-1.0)*sj2*x14867))+((r10*x14868))+(((-1.0)*x14871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14878=((1.0)*gconst53);
CheckValue<IkReal> x14879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14878))+(((-1.0)*gconst52*r10)))),-1);
if(!x14879.valid){
continue;
}
CheckValue<IkReal> x14880 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14879.value)))+(x14880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14881=IKsin(j4);
IkReal x14882=IKcos(j4);
IkReal x14883=(sj1*sj2);
IkReal x14884=((1.0)*cj1);
IkReal x14885=(cj3*gconst52);
IkReal x14886=(gconst53*sj3);
IkReal x14887=(cj3*gconst53);
IkReal x14888=(cj2*sj1);
IkReal x14889=(gconst52*sj3);
IkReal x14890=(cj2*x14884);
IkReal x14891=((1.0)*x14882);
IkReal x14892=((1.0)*x14881);
IkReal x14893=(gconst52*x14881);
IkReal x14894=(cj3*x14881);
evalcond[0]=((((-1.0)*r22*x14891))+((r21*x14893))+(((-1.0)*gconst53*r20*x14892)));
evalcond[1]=(((r11*x14893))+(((-1.0)*gconst53*r10*x14892))+(((-1.0)*r12*x14891)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14892))+((r01*x14893))+(((-1.0)*r02*x14891)));
evalcond[3]=(((r02*x14894))+(((-1.0)*r00*x14887*x14891))+((r01*x14882*x14885))+((r00*x14889))+((r01*x14886)));
evalcond[4]=(((r00*x14885))+((r01*x14887))+((r00*x14882*x14886))+(((-1.0)*r01*x14889*x14891))+(((-1.0)*r02*sj3*x14892)));
evalcond[5]=((((-1.0)*r20*x14887*x14891))+x14888+((cj1*sj2))+((r22*x14894))+((r21*x14886))+((r21*x14882*x14885))+((r20*x14889)));
evalcond[6]=(((r11*x14886))+((r12*x14894))+((r10*x14889))+((r11*x14882*x14885))+x14883+(((-1.0)*x14890))+(((-1.0)*r10*x14887*x14891)));
evalcond[7]=(((r20*x14882*x14886))+x14883+(((-1.0)*r21*x14889*x14891))+((r21*x14887))+(((-1.0)*x14890))+((r20*x14885))+(((-1.0)*r22*sj3*x14892)));
evalcond[8]=(((r11*x14887))+((r10*x14885))+(((-1.0)*r12*sj3*x14892))+((r10*x14882*x14886))+(((-1.0)*r11*x14889*x14891))+(((-1.0)*x14888))+(((-1.0)*sj2*x14884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14895 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14895.valid){
continue;
}
CheckValue<IkReal> x14896=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14895.value)+(((1.5707963267949)*(x14896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14897=IKsin(j4);
IkReal x14898=IKcos(j4);
IkReal x14899=(sj1*sj2);
IkReal x14900=((1.0)*cj1);
IkReal x14901=(cj3*gconst52);
IkReal x14902=(gconst53*sj3);
IkReal x14903=(cj3*gconst53);
IkReal x14904=(cj2*sj1);
IkReal x14905=(gconst52*sj3);
IkReal x14906=(cj2*x14900);
IkReal x14907=((1.0)*x14898);
IkReal x14908=((1.0)*x14897);
IkReal x14909=(gconst52*x14897);
IkReal x14910=(cj3*x14897);
evalcond[0]=(((r21*x14909))+(((-1.0)*r22*x14907))+(((-1.0)*gconst53*r20*x14908)));
evalcond[1]=((((-1.0)*r12*x14907))+((r11*x14909))+(((-1.0)*gconst53*r10*x14908)));
evalcond[2]=((-1.0)+((r01*x14909))+(((-1.0)*r02*x14907))+(((-1.0)*gconst53*r00*x14908)));
evalcond[3]=(((r00*x14905))+(((-1.0)*r00*x14903*x14907))+((r01*x14902))+((r02*x14910))+((r01*x14898*x14901)));
evalcond[4]=(((r00*x14901))+((r01*x14903))+(((-1.0)*r02*sj3*x14908))+((r00*x14898*x14902))+(((-1.0)*r01*x14905*x14907)));
evalcond[5]=(((r22*x14910))+((r21*x14902))+x14904+(((-1.0)*r20*x14903*x14907))+((cj1*sj2))+((r21*x14898*x14901))+((r20*x14905)));
evalcond[6]=(((r11*x14902))+(((-1.0)*x14906))+x14899+((r12*x14910))+(((-1.0)*r10*x14903*x14907))+((r10*x14905))+((r11*x14898*x14901)));
evalcond[7]=(((r21*x14903))+(((-1.0)*r21*x14905*x14907))+(((-1.0)*x14906))+x14899+((r20*x14898*x14902))+(((-1.0)*r22*sj3*x14908))+((r20*x14901)));
evalcond[8]=(((r11*x14903))+(((-1.0)*x14904))+((r10*x14898*x14902))+(((-1.0)*r11*x14905*x14907))+(((-1.0)*r12*sj3*x14908))+((r10*x14901))+(((-1.0)*sj2*x14900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14911=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14911);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14911);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14912=(r01*sj5);
IkReal x14913=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14913))+x14912);
j4eval[1]=(((cj3*x14912))+(((-1.0)*cj3*x14913)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14914=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14914);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14915=(cj5*r00);
IkReal x14916=(r01*sj5);
j4eval[0]=(x14916+(((-1.0)*x14915)));
j4eval[1]=((((-1.0)*sj3*x14916))+((sj3*x14915)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14917=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14917);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14917);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14918=((1.0)*r00);
CheckValue<IkReal> x14919=IKPowWithIntegerCheck(cj3,-1);
if(!x14919.valid){
continue;
}
CheckValue<IkReal> x14920=IKPowWithIntegerCheck(r22,-1);
if(!x14920.valid){
continue;
}
CheckValue<IkReal> x14921=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14918))+((cj3*r01*sj5))),-1);
if(!x14921.valid){
continue;
}
if( IKabs(((x14919.value)*(x14920.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14921.value)*(((((-1.0)*sj3*sj5*x14918))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14919.value)*(x14920.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14921.value)*(((((-1.0)*sj3*sj5*x14918))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14919.value)*(x14920.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14921.value)*(((((-1.0)*sj3*sj5*x14918))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14922=IKsin(j4);
IkReal x14923=IKcos(j4);
IkReal x14924=(sj1*sj2);
IkReal x14925=(cj5*sj3);
IkReal x14926=(r11*sj5);
IkReal x14927=(cj3*cj5);
IkReal x14928=((1.0)*cj1);
IkReal x14929=(cj3*sj5);
IkReal x14930=(sj3*sj5);
IkReal x14931=(cj2*sj1);
IkReal x14932=(r01*sj5);
IkReal x14933=((1.0)*sj3);
IkReal x14934=(cj2*x14928);
IkReal x14935=(r10*x14923);
IkReal x14936=(r22*x14922);
IkReal x14937=(cj3*x14923);
IkReal x14938=((1.0)*cj5*x14922);
evalcond[0]=((-1.0)*r22*x14923);
evalcond[1]=(x14931+((cj1*sj2))+((cj3*x14936)));
evalcond[2]=((((-1.0)*r10*x14938))+((x14922*x14926)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14938))+((x14922*x14932)));
evalcond[4]=((((-1.0)*x14933*x14936))+x14924+(((-1.0)*x14934)));
evalcond[5]=(((r01*x14925))+((r00*x14930))+(((-1.0)*r00*x14923*x14927))+((r01*x14923*x14929)));
evalcond[6]=(((r01*x14927))+(((-1.0)*r01*x14923*x14930))+((r00*x14929))+((r00*x14923*x14925)));
evalcond[7]=(x14924+((r10*x14930))+(((-1.0)*x14934))+((x14926*x14937))+((r11*x14925))+(((-1.0)*x14927*x14935)));
evalcond[8]=((((-1.0)*x14931))+(((-1.0)*x14923*x14926*x14933))+((r10*x14929))+(((-1.0)*sj2*x14928))+((r11*x14927))+((x14925*x14935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14939=((1.0)*cj3);
IkReal x14940=(cj5*r00);
IkReal x14941=(r01*sj5);
CheckValue<IkReal> x14942=IKPowWithIntegerCheck((x14941+(((-1.0)*x14940))),-1);
if(!x14942.valid){
continue;
}
CheckValue<IkReal> x14943=IKPowWithIntegerCheck((((sj3*x14940))+(((-1.0)*sj3*x14941))),-1);
if(!x14943.valid){
continue;
}
if( IKabs(x14942.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14943.value)*(((((-1.0)*cj5*r01*x14939))+(((-1.0)*r00*sj5*x14939)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14942.value)+IKsqr(((x14943.value)*(((((-1.0)*cj5*r01*x14939))+(((-1.0)*r00*sj5*x14939))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14942.value, ((x14943.value)*(((((-1.0)*cj5*r01*x14939))+(((-1.0)*r00*sj5*x14939))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14944=IKsin(j4);
IkReal x14945=IKcos(j4);
IkReal x14946=(sj1*sj2);
IkReal x14947=(cj5*sj3);
IkReal x14948=(r11*sj5);
IkReal x14949=(cj3*cj5);
IkReal x14950=((1.0)*cj1);
IkReal x14951=(cj3*sj5);
IkReal x14952=(sj3*sj5);
IkReal x14953=(cj2*sj1);
IkReal x14954=(r01*sj5);
IkReal x14955=((1.0)*sj3);
IkReal x14956=(cj2*x14950);
IkReal x14957=(r10*x14945);
IkReal x14958=(r22*x14944);
IkReal x14959=(cj3*x14945);
IkReal x14960=((1.0)*cj5*x14944);
evalcond[0]=((-1.0)*r22*x14945);
evalcond[1]=(x14953+((cj1*sj2))+((cj3*x14958)));
evalcond[2]=((((-1.0)*r10*x14960))+((x14944*x14948)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14960))+((x14944*x14954)));
evalcond[4]=(x14946+(((-1.0)*x14956))+(((-1.0)*x14955*x14958)));
evalcond[5]=(((r00*x14952))+((r01*x14947))+((r01*x14945*x14951))+(((-1.0)*r00*x14945*x14949)));
evalcond[6]=(((r00*x14951))+((r01*x14949))+(((-1.0)*r01*x14945*x14952))+((r00*x14945*x14947)));
evalcond[7]=(x14946+((r10*x14952))+((x14948*x14959))+(((-1.0)*x14949*x14957))+(((-1.0)*x14956))+((r11*x14947)));
evalcond[8]=((((-1.0)*x14945*x14948*x14955))+(((-1.0)*sj2*x14950))+((r10*x14951))+((x14947*x14957))+(((-1.0)*x14953))+((r11*x14949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14961=((1.0)*sj3);
IkReal x14962=(r01*sj5);
IkReal x14963=((1.0)*cj5*r00);
CheckValue<IkReal> x14964=IKPowWithIntegerCheck((x14962+(((-1.0)*x14963))),-1);
if(!x14964.valid){
continue;
}
CheckValue<IkReal> x14965=IKPowWithIntegerCheck((((cj3*x14962))+(((-1.0)*cj3*x14963))),-1);
if(!x14965.valid){
continue;
}
if( IKabs(x14964.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14965.value)*(((((-1.0)*cj5*r01*x14961))+(((-1.0)*r00*sj5*x14961)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14964.value)+IKsqr(((x14965.value)*(((((-1.0)*cj5*r01*x14961))+(((-1.0)*r00*sj5*x14961))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14964.value, ((x14965.value)*(((((-1.0)*cj5*r01*x14961))+(((-1.0)*r00*sj5*x14961))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14966=IKsin(j4);
IkReal x14967=IKcos(j4);
IkReal x14968=(sj1*sj2);
IkReal x14969=(cj5*sj3);
IkReal x14970=(r11*sj5);
IkReal x14971=(cj3*cj5);
IkReal x14972=((1.0)*cj1);
IkReal x14973=(cj3*sj5);
IkReal x14974=(sj3*sj5);
IkReal x14975=(cj2*sj1);
IkReal x14976=(r01*sj5);
IkReal x14977=((1.0)*sj3);
IkReal x14978=(cj2*x14972);
IkReal x14979=(r10*x14967);
IkReal x14980=(r22*x14966);
IkReal x14981=(cj3*x14967);
IkReal x14982=((1.0)*cj5*x14966);
evalcond[0]=((-1.0)*r22*x14967);
evalcond[1]=(x14975+((cj1*sj2))+((cj3*x14980)));
evalcond[2]=(((x14966*x14970))+(((-1.0)*r10*x14982)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14982))+((x14966*x14976)));
evalcond[4]=(x14968+(((-1.0)*x14978))+(((-1.0)*x14977*x14980)));
evalcond[5]=((((-1.0)*r00*x14967*x14971))+((r01*x14969))+((r01*x14967*x14973))+((r00*x14974)));
evalcond[6]=((((-1.0)*r01*x14967*x14974))+((r00*x14967*x14969))+((r01*x14971))+((r00*x14973)));
evalcond[7]=((((-1.0)*x14971*x14979))+((x14970*x14981))+x14968+(((-1.0)*x14978))+((r11*x14969))+((r10*x14974)));
evalcond[8]=((((-1.0)*sj2*x14972))+(((-1.0)*x14975))+((x14969*x14979))+((r11*x14971))+(((-1.0)*x14967*x14970*x14977))+((r10*x14973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14983=cj5*cj5;
IkReal x14984=(cj3*r20);
IkReal x14985=(r21*sj3);
IkReal x14986=((1.0)*cj3);
IkReal x14987=(r01*r21);
IkReal x14988=(r01*sj3);
IkReal x14989=(r00*sj5);
IkReal x14990=(cj5*r01*sj5);
IkReal x14991=((1.0)*x14983);
CheckValue<IkReal> x14992 = IKatan2WithCheck(IkReal((((cj5*r22*x14988))+((r22*sj3*x14989)))),IkReal(((((-1.0)*r20*x14988*x14991))+((x14985*x14990))+(((-1.0)*cj5*r20*sj3*x14989))+((r00*x14985))+(((-1.0)*r00*x14985*x14991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14992.valid){
continue;
}
CheckValue<IkReal> x14993=IKPowWithIntegerCheck(IKsign((((x14984*x14990))+(((-1.0)*r02*r22*x14986))+((cj3*cj5*r21*x14989))+(((-1.0)*x14986*x14987))+((cj3*x14983*x14987))+(((-1.0)*r00*x14984*x14991)))),-1);
if(!x14993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14992.value)+(((1.5707963267949)*(x14993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14994=IKsin(j4);
IkReal x14995=IKcos(j4);
IkReal x14996=(sj1*sj2);
IkReal x14997=(r11*sj5);
IkReal x14998=(cj5*r10);
IkReal x14999=(cj5*r01);
IkReal x15000=(cj5*r00);
IkReal x15001=((1.0)*cj1);
IkReal x15002=(cj3*sj5);
IkReal x15003=(r21*sj5);
IkReal x15004=(cj5*sj3);
IkReal x15005=(sj3*sj5);
IkReal x15006=(cj2*sj1);
IkReal x15007=(r01*sj5);
IkReal x15008=(cj3*cj5);
IkReal x15009=(cj5*r20);
IkReal x15010=(cj2*x15001);
IkReal x15011=((1.0)*x14995);
IkReal x15012=((1.0)*x14994);
IkReal x15013=(cj3*x14995);
IkReal x15014=(sj3*x14995);
IkReal x15015=(cj3*x14994);
evalcond[0]=(((x14994*x15003))+(((-1.0)*r22*x15011))+(((-1.0)*x15009*x15012)));
evalcond[1]=((((-1.0)*r12*x15011))+((x14994*x14997))+(((-1.0)*x14998*x15012)));
evalcond[2]=((-1.0)+((x14994*x15007))+(((-1.0)*x15000*x15012))+(((-1.0)*r02*x15011)));
evalcond[3]=((((-1.0)*cj3*x15000*x15011))+((r01*x14995*x15002))+((r00*x15005))+((sj3*x14999))+((r02*x15015)));
evalcond[4]=(((r00*x15002))+((cj3*x14999))+(((-1.0)*r01*x15005*x15011))+((x15000*x15014))+(((-1.0)*r02*sj3*x15012)));
evalcond[5]=(((r22*x15015))+(((-1.0)*r20*x15008*x15011))+((cj1*sj2))+((r20*x15005))+x15006+((r21*x14995*x15002))+((r21*x15004)));
evalcond[6]=(((x14997*x15013))+(((-1.0)*x15010))+x14996+(((-1.0)*cj3*x14998*x15011))+((r10*x15005))+((r11*x15004))+((r12*x15015)));
evalcond[7]=((((-1.0)*sj3*x15003*x15011))+(((-1.0)*x15010))+x14996+((r20*x15002))+((r20*x14995*x15004))+(((-1.0)*r22*sj3*x15012))+((r21*x15008)));
evalcond[8]=((((-1.0)*sj2*x15001))+((x14998*x15014))+(((-1.0)*x15006))+(((-1.0)*r12*sj3*x15012))+((r10*x15002))+((r11*x15008))+(((-1.0)*sj3*x14997*x15011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15016=((1.0)*cj5);
CheckValue<IkReal> x15017 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15017.valid){
continue;
}
CheckValue<IkReal> x15018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15016))+(((-1.0)*r10*sj5)))),-1);
if(!x15018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15017.value)+(((1.5707963267949)*(x15018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15019=IKsin(j4);
IkReal x15020=IKcos(j4);
IkReal x15021=(sj1*sj2);
IkReal x15022=(r11*sj5);
IkReal x15023=(cj5*r10);
IkReal x15024=(cj5*r01);
IkReal x15025=(cj5*r00);
IkReal x15026=((1.0)*cj1);
IkReal x15027=(cj3*sj5);
IkReal x15028=(r21*sj5);
IkReal x15029=(cj5*sj3);
IkReal x15030=(sj3*sj5);
IkReal x15031=(cj2*sj1);
IkReal x15032=(r01*sj5);
IkReal x15033=(cj3*cj5);
IkReal x15034=(cj5*r20);
IkReal x15035=(cj2*x15026);
IkReal x15036=((1.0)*x15020);
IkReal x15037=((1.0)*x15019);
IkReal x15038=(cj3*x15020);
IkReal x15039=(sj3*x15020);
IkReal x15040=(cj3*x15019);
evalcond[0]=((((-1.0)*r22*x15036))+((x15019*x15028))+(((-1.0)*x15034*x15037)));
evalcond[1]=((((-1.0)*x15023*x15037))+((x15019*x15022))+(((-1.0)*r12*x15036)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15036))+((x15019*x15032))+(((-1.0)*x15025*x15037)));
evalcond[3]=(((r02*x15040))+((r00*x15030))+((r01*x15020*x15027))+((sj3*x15024))+(((-1.0)*cj3*x15025*x15036)));
evalcond[4]=(((r00*x15027))+((x15025*x15039))+((cj3*x15024))+(((-1.0)*r02*sj3*x15037))+(((-1.0)*r01*x15030*x15036)));
evalcond[5]=(((r22*x15040))+((r21*x15020*x15027))+((cj1*sj2))+((r21*x15029))+(((-1.0)*r20*x15033*x15036))+x15031+((r20*x15030)));
evalcond[6]=((((-1.0)*x15035))+((r12*x15040))+x15021+((r10*x15030))+(((-1.0)*cj3*x15023*x15036))+((r11*x15029))+((x15022*x15038)));
evalcond[7]=(((r21*x15033))+(((-1.0)*x15035))+x15021+((r20*x15020*x15029))+((r20*x15027))+(((-1.0)*r22*sj3*x15037))+(((-1.0)*sj3*x15028*x15036)));
evalcond[8]=((((-1.0)*r12*sj3*x15037))+(((-1.0)*x15031))+(((-1.0)*sj3*x15022*x15036))+((r10*x15027))+((x15023*x15039))+((r11*x15033))+(((-1.0)*sj2*x15026)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15041.valid){
continue;
}
CheckValue<IkReal> x15042 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15041.value)))+(x15042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15043=IKsin(j4);
IkReal x15044=IKcos(j4);
IkReal x15045=(sj1*sj2);
IkReal x15046=(r11*sj5);
IkReal x15047=(cj5*r10);
IkReal x15048=(cj5*r01);
IkReal x15049=(cj5*r00);
IkReal x15050=((1.0)*cj1);
IkReal x15051=(cj3*sj5);
IkReal x15052=(r21*sj5);
IkReal x15053=(cj5*sj3);
IkReal x15054=(sj3*sj5);
IkReal x15055=(cj2*sj1);
IkReal x15056=(r01*sj5);
IkReal x15057=(cj3*cj5);
IkReal x15058=(cj5*r20);
IkReal x15059=(cj2*x15050);
IkReal x15060=((1.0)*x15044);
IkReal x15061=((1.0)*x15043);
IkReal x15062=(cj3*x15044);
IkReal x15063=(sj3*x15044);
IkReal x15064=(cj3*x15043);
evalcond[0]=((((-1.0)*r22*x15060))+(((-1.0)*x15058*x15061))+((x15043*x15052)));
evalcond[1]=(((x15043*x15046))+(((-1.0)*x15047*x15061))+(((-1.0)*r12*x15060)));
evalcond[2]=((-1.0)+(((-1.0)*x15049*x15061))+(((-1.0)*r02*x15060))+((x15043*x15056)));
evalcond[3]=(((sj3*x15048))+((r01*x15044*x15051))+((r02*x15064))+(((-1.0)*cj3*x15049*x15060))+((r00*x15054)));
evalcond[4]=(((cj3*x15048))+(((-1.0)*r02*sj3*x15061))+((x15049*x15063))+(((-1.0)*r01*x15054*x15060))+((r00*x15051)));
evalcond[5]=(((r20*x15054))+((cj1*sj2))+x15055+((r21*x15053))+(((-1.0)*r20*x15057*x15060))+((r21*x15044*x15051))+((r22*x15064)));
evalcond[6]=(((r10*x15054))+x15045+(((-1.0)*cj3*x15047*x15060))+((x15046*x15062))+((r12*x15064))+(((-1.0)*x15059))+((r11*x15053)));
evalcond[7]=(((r20*x15051))+(((-1.0)*sj3*x15052*x15060))+x15045+((r21*x15057))+((r20*x15044*x15053))+(((-1.0)*x15059))+(((-1.0)*r22*sj3*x15061)));
evalcond[8]=((((-1.0)*x15055))+((r10*x15051))+(((-1.0)*r12*sj3*x15061))+(((-1.0)*sj3*x15046*x15060))+((x15047*x15063))+(((-1.0)*sj2*x15050))+((r11*x15057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15065=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15065;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15066=((1.0)*cj5);
IkReal x15067=((((-1.0)*r21*x15066))+(((-1.0)*r20*sj5)));
j4eval[0]=x15067;
j4eval[1]=((IKabs(((((-1.0)*r10*x15066))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15068=cj5*cj5;
IkReal x15069=(cj3*r01);
IkReal x15070=(cj5*sj5);
IkReal x15071=((1.0)*cj3);
IkReal x15072=(((r21*x15068*x15069))+((r20*x15069*x15070))+(((-1.0)*r21*x15069))+(((-1.0)*r02*r22*x15071))+((cj3*r00*r21*x15070))+(((-1.0)*r00*r20*x15068*x15071)));
j4eval[0]=x15072;
j4eval[1]=IKsign(x15072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15073=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15073;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15074=((1.0)*cj5);
IkReal x15075=((((-1.0)*r21*x15074))+(((-1.0)*r20*sj5)));
j4eval[0]=x15075;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15074))))));
j4eval[2]=IKsign(x15075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15076=cj5*cj5;
IkReal x15077=r01*r01;
IkReal x15078=(cj5*r00);
IkReal x15079=(r01*sj5);
IkReal x15080=((((-2.0)*x15078*x15079))+x15077+(((-1.0)*x15076*x15077))+(r02*r02)+((x15076*(r00*r00))));
j4eval[0]=x15080;
j4eval[1]=((IKabs(r02))+(IKabs((x15078+(((-1.0)*x15079))))));
j4eval[2]=IKsign(x15080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15081=cj5*cj5;
IkReal x15082=r01*r01;
IkReal x15083=(r01*sj5);
IkReal x15084=(cj5*r00);
CheckValue<IkReal> x15085=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15081*x15082))+((x15081*(r00*r00)))+x15082+(r02*r02)+(((-2.0)*x15083*x15084)))),-1);
if(!x15085.valid){
continue;
}
CheckValue<IkReal> x15086 = IKatan2WithCheck(IkReal((x15084+(((-1.0)*x15083)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15085.value)))+(x15086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15087=IKsin(j4);
IkReal x15088=IKcos(j4);
IkReal x15089=(cj5*r10);
IkReal x15090=(r01*sj5);
IkReal x15091=(cj5*r00);
IkReal x15092=(cj5*r20);
IkReal x15093=((1.0)*x15088);
IkReal x15094=((1.0)*x15087);
IkReal x15095=(sj5*x15087);
evalcond[0]=(((r21*x15095))+(((-1.0)*r22*x15093))+(((-1.0)*x15092*x15094)));
evalcond[1]=(((r11*x15095))+(((-1.0)*r12*x15093))+(((-1.0)*x15089*x15094)));
evalcond[2]=((((-1.0)*r02*x15094))+((x15088*x15091))+(((-1.0)*x15090*x15093)));
evalcond[3]=((1.0)+((x15087*x15090))+(((-1.0)*r02*x15093))+(((-1.0)*x15091*x15094)));
evalcond[4]=(((cj2*sj1))+((x15088*x15089))+((cj1*sj2))+(((-1.0)*r11*sj5*x15093))+(((-1.0)*r12*x15094)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15094))+(((-1.0)*r21*sj5*x15093))+((x15088*x15092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15096=((1.0)*cj5);
CheckValue<IkReal> x15097=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15096))+(((-1.0)*r20*sj5)))),-1);
if(!x15097.valid){
continue;
}
CheckValue<IkReal> x15098 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15096))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15097.value)))+(x15098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15099=IKsin(j4);
IkReal x15100=IKcos(j4);
IkReal x15101=(cj5*r10);
IkReal x15102=(r01*sj5);
IkReal x15103=(cj5*r00);
IkReal x15104=(cj5*r20);
IkReal x15105=((1.0)*x15100);
IkReal x15106=((1.0)*x15099);
IkReal x15107=(sj5*x15099);
evalcond[0]=((((-1.0)*x15104*x15106))+((r21*x15107))+(((-1.0)*r22*x15105)));
evalcond[1]=((((-1.0)*r12*x15105))+(((-1.0)*x15101*x15106))+((r11*x15107)));
evalcond[2]=((((-1.0)*x15102*x15105))+(((-1.0)*r02*x15106))+((x15100*x15103)));
evalcond[3]=((1.0)+((x15099*x15102))+(((-1.0)*r02*x15105))+(((-1.0)*x15103*x15106)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x15106))+(((-1.0)*r11*sj5*x15105))+((cj1*sj2))+((x15100*x15101)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x15106))+((sj1*sj2))+(((-1.0)*r21*sj5*x15105))+((x15100*x15104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15108 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15108.valid){
continue;
}
CheckValue<IkReal> x15109=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15108.value)+(((1.5707963267949)*(x15109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15110=IKsin(j4);
IkReal x15111=IKcos(j4);
IkReal x15112=(cj5*r10);
IkReal x15113=(r01*sj5);
IkReal x15114=(cj5*r00);
IkReal x15115=(cj5*r20);
IkReal x15116=((1.0)*x15111);
IkReal x15117=((1.0)*x15110);
IkReal x15118=(sj5*x15110);
evalcond[0]=((((-1.0)*x15115*x15117))+(((-1.0)*r22*x15116))+((r21*x15118)));
evalcond[1]=(((r11*x15118))+(((-1.0)*x15112*x15117))+(((-1.0)*r12*x15116)));
evalcond[2]=((((-1.0)*x15113*x15116))+(((-1.0)*r02*x15117))+((x15111*x15114)));
evalcond[3]=((1.0)+(((-1.0)*x15114*x15117))+((x15110*x15113))+(((-1.0)*r02*x15116)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15116))+((cj1*sj2))+((x15111*x15112))+(((-1.0)*r12*x15117)));
evalcond[5]=((((-1.0)*r21*sj5*x15116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15111*x15115))+(((-1.0)*r22*x15117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15119=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15119;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15120=((1.0)*cj5);
IkReal x15121=((((-1.0)*r21*x15120))+(((-1.0)*r20*sj5)));
j4eval[0]=x15121;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15120))+((r11*sj5))))));
j4eval[2]=IKsign(x15121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15122=cj5*cj5;
IkReal x15123=r01*r01;
IkReal x15124=(r01*sj5);
IkReal x15125=(cj5*r00);
IkReal x15126=((((-1.0)*(r02*r02)))+(((2.0)*x15124*x15125))+(((-1.0)*x15122*(r00*r00)))+(((-1.0)*x15123))+((x15122*x15123)));
j4eval[0]=x15126;
j4eval[1]=IKsign(x15126);
j4eval[2]=((IKabs(r02))+(IKabs((x15124+(((-1.0)*x15125))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15127=cj5*cj5;
IkReal x15128=r01*r01;
IkReal x15129=(r01*sj5);
IkReal x15130=(cj5*r00);
CheckValue<IkReal> x15131=IKPowWithIntegerCheck(IKsign(((((2.0)*x15129*x15130))+((x15127*x15128))+(((-1.0)*(r02*r02)))+(((-1.0)*x15128))+(((-1.0)*x15127*(r00*r00))))),-1);
if(!x15131.valid){
continue;
}
CheckValue<IkReal> x15132 = IKatan2WithCheck(IkReal((x15129+(((-1.0)*x15130)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15131.value)))+(x15132.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15133=IKcos(j4);
IkReal x15134=IKsin(j4);
IkReal x15135=(cj5*r00);
IkReal x15136=(cj5*r10);
IkReal x15137=(r21*sj5);
IkReal x15138=(cj5*r20);
IkReal x15139=((1.0)*x15133);
IkReal x15140=((1.0)*x15134);
IkReal x15141=(sj5*x15134);
IkReal x15142=(sj5*x15133);
evalcond[0]=((((-1.0)*x15135*x15139))+((r01*x15142))+((r02*x15134)));
evalcond[1]=((((-1.0)*r22*x15139))+((x15134*x15137))+(((-1.0)*x15138*x15140)));
evalcond[2]=(((r11*x15141))+(((-1.0)*r12*x15139))+(((-1.0)*x15136*x15140)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15139))+(((-1.0)*x15135*x15140))+((r01*x15141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15142))+(((-1.0)*x15136*x15139))+((r12*x15134)));
evalcond[5]=(((x15133*x15137))+(((-1.0)*x15138*x15139))+((r22*x15134))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15143=((1.0)*cj5);
CheckValue<IkReal> x15144 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15143))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15144.valid){
continue;
}
CheckValue<IkReal> x15145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15143))+(((-1.0)*r20*sj5)))),-1);
if(!x15145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15144.value)+(((1.5707963267949)*(x15145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15146=IKcos(j4);
IkReal x15147=IKsin(j4);
IkReal x15148=(cj5*r00);
IkReal x15149=(cj5*r10);
IkReal x15150=(r21*sj5);
IkReal x15151=(cj5*r20);
IkReal x15152=((1.0)*x15146);
IkReal x15153=((1.0)*x15147);
IkReal x15154=(sj5*x15147);
IkReal x15155=(sj5*x15146);
evalcond[0]=(((r01*x15155))+((r02*x15147))+(((-1.0)*x15148*x15152)));
evalcond[1]=((((-1.0)*r22*x15152))+(((-1.0)*x15151*x15153))+((x15147*x15150)));
evalcond[2]=((((-1.0)*x15149*x15153))+(((-1.0)*r12*x15152))+((r11*x15154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15152))+((r01*x15154))+(((-1.0)*x15148*x15153)));
evalcond[4]=(((cj2*sj1))+((r12*x15147))+((cj1*sj2))+(((-1.0)*x15149*x15152))+((r11*x15155)));
evalcond[5]=(((r22*x15147))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15151*x15152))+((x15146*x15150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15156 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15156.valid){
continue;
}
CheckValue<IkReal> x15157=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15156.value)+(((1.5707963267949)*(x15157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15158=IKcos(j4);
IkReal x15159=IKsin(j4);
IkReal x15160=(cj5*r00);
IkReal x15161=(cj5*r10);
IkReal x15162=(r21*sj5);
IkReal x15163=(cj5*r20);
IkReal x15164=((1.0)*x15158);
IkReal x15165=((1.0)*x15159);
IkReal x15166=(sj5*x15159);
IkReal x15167=(sj5*x15158);
evalcond[0]=((((-1.0)*x15160*x15164))+((r02*x15159))+((r01*x15167)));
evalcond[1]=((((-1.0)*x15163*x15165))+((x15159*x15162))+(((-1.0)*r22*x15164)));
evalcond[2]=(((r11*x15166))+(((-1.0)*x15161*x15165))+(((-1.0)*r12*x15164)));
evalcond[3]=((1.0)+(((-1.0)*x15160*x15165))+(((-1.0)*r02*x15164))+((r01*x15166)));
evalcond[4]=(((cj2*sj1))+((r11*x15167))+((cj1*sj2))+((r12*x15159))+(((-1.0)*x15161*x15164)));
evalcond[5]=(((x15158*x15162))+(((-1.0)*x15163*x15164))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15169 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15169)==0){
continue;
}
IkReal x15168=pow(x15169,-0.5);
CheckValue<IkReal> x15170 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15170.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15170.value));
IkReal gconst61=((-1.0)*r11*x15168);
IkReal gconst62=(r10*x15168);
CheckValue<IkReal> x15171 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15171.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15171.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15174 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15174.valid){
continue;
}
IkReal x15172=((-1.0)*(x15174.value));
IkReal x15173=x15168;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15172;
IkReal gconst60=x15172;
IkReal gconst61=((-1.0)*r11*x15173);
IkReal gconst62=(r10*x15173);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15177 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15177.valid){
continue;
}
IkReal x15175=((-1.0)*(x15177.value));
IkReal x15176=x15168;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15175;
IkReal gconst60=x15175;
IkReal gconst61=((-1.0)*r11*x15176);
IkReal gconst62=(r10*x15176);
CheckValue<IkReal> x15185=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15185.valid){
continue;
}
IkReal x15178=x15185.value;
IkReal x15179=(sj3*x15178);
IkReal x15180=(r20*x15179);
IkReal x15181=(r00*x15179);
IkReal x15182=(r01*x15179);
IkReal x15183=(r21*x15179);
IkReal x15184=(r10*r11*x15179);
j4eval[0]=IKsign((((r01*r10*r11*x15180))+((r00*x15180*(r10*r10)))+((r10*r11*r21*x15181))+((r21*x15182*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15186=gconst61*gconst61;
IkReal x15187=gconst62*gconst62;
IkReal x15188=(cj3*r01);
IkReal x15189=(r22*sj3);
IkReal x15190=(gconst61*r00);
IkReal x15191=((1.0)*cj3);
IkReal x15192=(gconst62*r01);
IkReal x15193=((1.0)*sj3);
IkReal x15194=(gconst61*gconst62*r20);
IkReal x15195=(r21*x15186);
IkReal x15196=(r20*x15187);
CheckValue<IkReal> x15197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15191))+((x15188*x15194))+(((-1.0)*x15188*x15195))+((cj3*gconst62*r21*x15190))+(((-1.0)*r00*x15191*x15196)))),-1);
if(!x15197.valid){
continue;
}
CheckValue<IkReal> x15198 = IKatan2WithCheck(IkReal((((x15189*x15192))+((x15189*x15190)))),IkReal(((((-1.0)*r01*x15193*x15196))+((gconst61*r21*sj3*x15192))+((r00*sj3*x15195))+(((-1.0)*gconst62*r20*x15190*x15193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15197.value)))+(x15198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15199=IKsin(j4);
IkReal x15200=IKcos(j4);
IkReal x15201=(cj2*sj1);
IkReal x15202=(cj1*sj2);
IkReal x15203=(gconst61*sj3);
IkReal x15204=(cj3*gconst61);
IkReal x15205=(cj3*gconst62);
IkReal x15206=(sj1*sj2);
IkReal x15207=(gconst62*sj3);
IkReal x15208=(cj1*cj2);
IkReal x15209=((1.0)*x15200);
IkReal x15210=((1.0)*x15199);
IkReal x15211=(gconst61*x15199);
IkReal x15212=(cj3*x15199);
IkReal x15213=(x15202+x15201);
evalcond[0]=((((-1.0)*r22*x15209))+((r21*x15211))+(((-1.0)*gconst62*r20*x15210)));
evalcond[1]=(((r11*x15211))+(((-1.0)*r12*x15209))+(((-1.0)*gconst62*r10*x15210)));
evalcond[2]=((1.0)+((r01*x15211))+(((-1.0)*gconst62*r00*x15210))+(((-1.0)*r02*x15209)));
evalcond[3]=((((-1.0)*r00*x15205*x15209))+((r01*x15200*x15204))+((r00*x15203))+((r01*x15207))+((r02*x15212)));
evalcond[4]=(((r00*x15200*x15207))+(((-1.0)*r02*sj3*x15210))+(((-1.0)*r01*x15203*x15209))+((r00*x15204))+((r01*x15205)));
evalcond[5]=(((r21*x15200*x15204))+((r20*x15203))+x15213+((r22*x15212))+((r21*x15207))+(((-1.0)*r20*x15205*x15209)));
evalcond[6]=(((r10*x15203))+((r11*x15200*x15204))+(((-1.0)*x15206))+((r11*x15207))+x15208+((r12*x15212))+(((-1.0)*r10*x15205*x15209)));
evalcond[7]=(((r10*x15204))+(((-1.0)*r11*x15203*x15209))+((r11*x15205))+x15213+((r10*x15200*x15207))+(((-1.0)*r12*sj3*x15210)));
evalcond[8]=(((r20*x15200*x15207))+((r20*x15204))+(((-1.0)*x15208))+(((-1.0)*r21*x15203*x15209))+x15206+((r21*x15205))+(((-1.0)*r22*sj3*x15210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15214=gconst61*gconst61;
IkReal x15215=gconst62*gconst62;
IkReal x15216=(cj3*r22);
IkReal x15217=(gconst62*r01);
IkReal x15218=(gconst61*r00);
IkReal x15219=((1.0)*r20);
IkReal x15220=(cj3*r21);
IkReal x15221=(r21*sj3);
CheckValue<IkReal> x15222 = IKatan2WithCheck(IkReal((((x15216*x15217))+((x15216*x15218)))),IkReal((((gconst61*x15217*x15220))+(((-1.0)*cj3*gconst62*x15218*x15219))+((r00*x15214*x15220))+(((-1.0)*cj3*r01*x15215*x15219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15222.valid){
continue;
}
CheckValue<IkReal> x15223=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15215))+((r01*x15214*x15221))+(((-1.0)*gconst61*sj3*x15217*x15219))+(((-1.0)*gconst62*x15218*x15221))+((r02*r22*sj3)))),-1);
if(!x15223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15222.value)+(((1.5707963267949)*(x15223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15224=IKsin(j4);
IkReal x15225=IKcos(j4);
IkReal x15226=(cj2*sj1);
IkReal x15227=(cj1*sj2);
IkReal x15228=(gconst61*sj3);
IkReal x15229=(cj3*gconst61);
IkReal x15230=(cj3*gconst62);
IkReal x15231=(sj1*sj2);
IkReal x15232=(gconst62*sj3);
IkReal x15233=(cj1*cj2);
IkReal x15234=((1.0)*x15225);
IkReal x15235=((1.0)*x15224);
IkReal x15236=(gconst61*x15224);
IkReal x15237=(cj3*x15224);
IkReal x15238=(x15227+x15226);
evalcond[0]=((((-1.0)*gconst62*r20*x15235))+((r21*x15236))+(((-1.0)*r22*x15234)));
evalcond[1]=((((-1.0)*gconst62*r10*x15235))+(((-1.0)*r12*x15234))+((r11*x15236)));
evalcond[2]=((1.0)+((r01*x15236))+(((-1.0)*r02*x15234))+(((-1.0)*gconst62*r00*x15235)));
evalcond[3]=(((r02*x15237))+((r00*x15228))+(((-1.0)*r00*x15230*x15234))+((r01*x15232))+((r01*x15225*x15229)));
evalcond[4]=(((r00*x15229))+(((-1.0)*r01*x15228*x15234))+((r01*x15230))+(((-1.0)*r02*sj3*x15235))+((r00*x15225*x15232)));
evalcond[5]=(((r21*x15225*x15229))+x15238+((r20*x15228))+((r21*x15232))+((r22*x15237))+(((-1.0)*r20*x15230*x15234)));
evalcond[6]=((((-1.0)*x15231))+(((-1.0)*r10*x15230*x15234))+x15233+((r10*x15228))+((r11*x15225*x15229))+((r12*x15237))+((r11*x15232)));
evalcond[7]=((((-1.0)*r12*sj3*x15235))+x15238+((r10*x15229))+(((-1.0)*r11*x15228*x15234))+((r10*x15225*x15232))+((r11*x15230)));
evalcond[8]=((((-1.0)*x15233))+(((-1.0)*r21*x15228*x15234))+x15231+((r20*x15229))+((r21*x15230))+(((-1.0)*r22*sj3*x15235))+((r20*x15225*x15232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15239=((1.0)*gconst62);
CheckValue<IkReal> x15240=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15239)))),-1);
if(!x15240.valid){
continue;
}
CheckValue<IkReal> x15241 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15239))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15240.value)))+(x15241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15242=IKsin(j4);
IkReal x15243=IKcos(j4);
IkReal x15244=(cj2*sj1);
IkReal x15245=(cj1*sj2);
IkReal x15246=(gconst61*sj3);
IkReal x15247=(cj3*gconst61);
IkReal x15248=(cj3*gconst62);
IkReal x15249=(sj1*sj2);
IkReal x15250=(gconst62*sj3);
IkReal x15251=(cj1*cj2);
IkReal x15252=((1.0)*x15243);
IkReal x15253=((1.0)*x15242);
IkReal x15254=(gconst61*x15242);
IkReal x15255=(cj3*x15242);
IkReal x15256=(x15245+x15244);
evalcond[0]=((((-1.0)*gconst62*r20*x15253))+(((-1.0)*r22*x15252))+((r21*x15254)));
evalcond[1]=((((-1.0)*gconst62*r10*x15253))+(((-1.0)*r12*x15252))+((r11*x15254)));
evalcond[2]=((1.0)+((r01*x15254))+(((-1.0)*r02*x15252))+(((-1.0)*gconst62*r00*x15253)));
evalcond[3]=((((-1.0)*r00*x15248*x15252))+((r01*x15243*x15247))+((r00*x15246))+((r01*x15250))+((r02*x15255)));
evalcond[4]=(((r01*x15248))+(((-1.0)*r01*x15246*x15252))+((r00*x15247))+(((-1.0)*r02*sj3*x15253))+((r00*x15243*x15250)));
evalcond[5]=((((-1.0)*r20*x15248*x15252))+x15256+((r22*x15255))+((r21*x15250))+((r20*x15246))+((r21*x15243*x15247)));
evalcond[6]=((((-1.0)*x15249))+(((-1.0)*r10*x15248*x15252))+x15251+((r10*x15246))+((r11*x15250))+((r11*x15243*x15247))+((r12*x15255)));
evalcond[7]=((((-1.0)*r12*sj3*x15253))+x15256+(((-1.0)*r11*x15246*x15252))+((r10*x15243*x15250))+((r10*x15247))+((r11*x15248)));
evalcond[8]=(((r20*x15243*x15250))+(((-1.0)*x15251))+x15249+((r21*x15248))+(((-1.0)*r21*x15246*x15252))+(((-1.0)*r22*sj3*x15253))+((r20*x15247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15258 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15258)==0){
continue;
}
IkReal x15257=pow(x15258,-0.5);
CheckValue<IkReal> x15259 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15259.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15259.value))));
IkReal gconst64=((1.0)*r11*x15257);
IkReal gconst65=((-1.0)*r10*x15257);
CheckValue<IkReal> x15260 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15260.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15260.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15263 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15263.valid){
continue;
}
IkReal x15261=((1.0)*(x15263.value));
IkReal x15262=x15257;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15261)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15261)));
IkReal gconst64=((1.0)*r11*x15262);
IkReal gconst65=((-1.0)*r10*x15262);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15264=gconst64*gconst64;
IkReal x15265=gconst65*gconst65;
IkReal x15266=(gconst65*r01);
IkReal x15267=(cj3*r22);
IkReal x15268=(gconst64*r00);
IkReal x15269=(cj3*r21);
IkReal x15270=((1.0)*gconst64*sj3);
IkReal x15271=((1.0)*cj3*r20);
CheckValue<IkReal> x15272 = IKatan2WithCheck(IkReal((((x15267*x15268))+((x15266*x15267)))),IkReal((((gconst64*x15266*x15269))+((r00*x15264*x15269))+(((-1.0)*gconst65*x15268*x15271))+(((-1.0)*r01*x15265*x15271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15272.valid){
continue;
}
CheckValue<IkReal> x15273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15266*x15270))+((r00*r20*sj3*x15265))+(((-1.0)*gconst65*r21*sj3*x15268))+((r02*r22*sj3))+((r01*r21*sj3*x15264)))),-1);
if(!x15273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15272.value)+(((1.5707963267949)*(x15273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15274=IKsin(j4);
IkReal x15275=IKcos(j4);
IkReal x15276=(cj2*sj1);
IkReal x15277=(cj1*sj2);
IkReal x15278=(cj3*gconst64);
IkReal x15279=(gconst65*r21);
IkReal x15280=(sj1*sj2);
IkReal x15281=(gconst65*sj3);
IkReal x15282=(gconst64*sj3);
IkReal x15283=(cj3*gconst65);
IkReal x15284=(cj1*cj2);
IkReal x15285=((1.0)*x15275);
IkReal x15286=((1.0)*x15274);
IkReal x15287=(cj3*x15274);
IkReal x15288=(gconst64*x15274);
IkReal x15289=(x15276+x15277);
evalcond[0]=((((-1.0)*r22*x15285))+(((-1.0)*gconst65*r20*x15286))+((r21*x15288)));
evalcond[1]=((((-1.0)*r12*x15285))+(((-1.0)*gconst65*r10*x15286))+((r11*x15288)));
evalcond[2]=((1.0)+((r01*x15288))+(((-1.0)*r02*x15285))+(((-1.0)*gconst65*r00*x15286)));
evalcond[3]=(((r01*x15281))+((r00*x15282))+((r02*x15287))+((r01*x15275*x15278))+(((-1.0)*r00*x15283*x15285)));
evalcond[4]=((((-1.0)*r01*x15282*x15285))+((r01*x15283))+(((-1.0)*r02*sj3*x15286))+((r00*x15275*x15281))+((r00*x15278)));
evalcond[5]=(((r22*x15287))+x15289+(((-1.0)*r20*x15283*x15285))+((r20*x15282))+((sj3*x15279))+((r21*x15275*x15278)));
evalcond[6]=((((-1.0)*r10*x15283*x15285))+x15284+((r10*x15282))+((r11*x15275*x15278))+((r11*x15281))+((r12*x15287))+(((-1.0)*x15280)));
evalcond[7]=((((-1.0)*r12*sj3*x15286))+x15289+((r10*x15275*x15281))+((r10*x15278))+(((-1.0)*r11*x15282*x15285))+((r11*x15283)));
evalcond[8]=((((-1.0)*r22*sj3*x15286))+((r20*x15275*x15281))+x15280+(((-1.0)*r21*x15282*x15285))+((r20*x15278))+((cj3*x15279))+(((-1.0)*x15284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15290=((1.0)*gconst65);
CheckValue<IkReal> x15291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15290))+(((-1.0)*gconst64*r20)))),-1);
if(!x15291.valid){
continue;
}
CheckValue<IkReal> x15292 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15291.value)))+(x15292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15293=IKsin(j4);
IkReal x15294=IKcos(j4);
IkReal x15295=(cj2*sj1);
IkReal x15296=(cj1*sj2);
IkReal x15297=(cj3*gconst64);
IkReal x15298=(gconst65*r21);
IkReal x15299=(sj1*sj2);
IkReal x15300=(gconst65*sj3);
IkReal x15301=(gconst64*sj3);
IkReal x15302=(cj3*gconst65);
IkReal x15303=(cj1*cj2);
IkReal x15304=((1.0)*x15294);
IkReal x15305=((1.0)*x15293);
IkReal x15306=(cj3*x15293);
IkReal x15307=(gconst64*x15293);
IkReal x15308=(x15295+x15296);
evalcond[0]=(((r21*x15307))+(((-1.0)*gconst65*r20*x15305))+(((-1.0)*r22*x15304)));
evalcond[1]=((((-1.0)*gconst65*r10*x15305))+(((-1.0)*r12*x15304))+((r11*x15307)));
evalcond[2]=((1.0)+((r01*x15307))+(((-1.0)*gconst65*r00*x15305))+(((-1.0)*r02*x15304)));
evalcond[3]=(((r02*x15306))+((r00*x15301))+((r01*x15300))+((r01*x15294*x15297))+(((-1.0)*r00*x15302*x15304)));
evalcond[4]=((((-1.0)*r02*sj3*x15305))+(((-1.0)*r01*x15301*x15304))+((r01*x15302))+((r00*x15294*x15300))+((r00*x15297)));
evalcond[5]=((((-1.0)*r20*x15302*x15304))+((r20*x15301))+((sj3*x15298))+x15308+((r21*x15294*x15297))+((r22*x15306)));
evalcond[6]=((((-1.0)*x15299))+x15303+((r10*x15301))+(((-1.0)*r10*x15302*x15304))+((r11*x15294*x15297))+((r12*x15306))+((r11*x15300)));
evalcond[7]=(((r10*x15297))+(((-1.0)*r12*sj3*x15305))+x15308+((r10*x15294*x15300))+(((-1.0)*r11*x15301*x15304))+((r11*x15302)));
evalcond[8]=(((r20*x15297))+(((-1.0)*x15303))+x15299+(((-1.0)*r21*x15301*x15304))+((r20*x15294*x15300))+(((-1.0)*r22*sj3*x15305))+((cj3*x15298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15309=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15309);
rxp0_2=(py*r00);
rxp1_0=(r21*x15309);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15310=(r01*sj5);
IkReal x15311=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15311))+x15310);
j4eval[1]=((((-1.0)*cj3*x15311))+((cj3*x15310)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15312=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15312);
rxp0_2=(py*r00);
rxp1_0=(r21*x15312);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15313=(cj5*r00);
IkReal x15314=(r01*sj5);
j4eval[0]=((((-1.0)*x15313))+x15314);
j4eval[1]=(((sj3*x15313))+(((-1.0)*sj3*x15314)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15315=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15315);
rxp0_2=(py*r00);
rxp1_0=(r21*x15315);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15316=((1.0)*r00);
CheckValue<IkReal> x15317=IKPowWithIntegerCheck(cj3,-1);
if(!x15317.valid){
continue;
}
CheckValue<IkReal> x15318=IKPowWithIntegerCheck(r12,-1);
if(!x15318.valid){
continue;
}
CheckValue<IkReal> x15319=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15316))),-1);
if(!x15319.valid){
continue;
}
if( IKabs(((x15317.value)*(x15318.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15319.value)*(((((-1.0)*sj3*sj5*x15316))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15317.value)*(x15318.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15319.value)*(((((-1.0)*sj3*sj5*x15316))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15317.value)*(x15318.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15319.value)*(((((-1.0)*sj3*sj5*x15316))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15320=IKsin(j4);
IkReal x15321=IKcos(j4);
IkReal x15322=(cj2*sj1);
IkReal x15323=(cj1*sj2);
IkReal x15324=(sj1*sj2);
IkReal x15325=(cj5*sj3);
IkReal x15326=(cj3*cj5);
IkReal x15327=(r21*sj5);
IkReal x15328=(cj1*cj2);
IkReal x15329=(r00*sj5);
IkReal x15330=(r01*sj5);
IkReal x15331=(r20*sj5);
IkReal x15332=((1.0)*x15320);
IkReal x15333=(r20*x15321);
IkReal x15334=(r00*x15321);
IkReal x15335=(cj3*x15321);
IkReal x15336=(x15322+x15323);
IkReal x15337=((1.0)*sj3*x15321);
evalcond[0]=((-1.0)*r12*x15321);
evalcond[1]=(((x15320*x15327))+(((-1.0)*cj5*r20*x15332)));
evalcond[2]=((((-1.0)*x15324))+x15328+((cj3*r12*x15320)));
evalcond[3]=((((-1.0)*r12*sj3*x15332))+x15336);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15332))+((x15320*x15330)));
evalcond[5]=(((x15330*x15335))+(((-1.0)*x15326*x15334))+((r01*x15325))+((sj3*x15329)));
evalcond[6]=(((r01*x15326))+(((-1.0)*x15330*x15337))+((x15325*x15334))+((cj3*x15329)));
evalcond[7]=(((sj3*x15331))+(((-1.0)*x15326*x15333))+((x15327*x15335))+x15336+((r21*x15325)));
evalcond[8]=(((cj3*x15331))+(((-1.0)*x15328))+x15324+((x15325*x15333))+((r21*x15326))+(((-1.0)*x15327*x15337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15338=((1.0)*r01);
IkReal x15339=(cj5*r00);
CheckValue<IkReal> x15340=IKPowWithIntegerCheck(((((-1.0)*x15339))+((r01*sj5))),-1);
if(!x15340.valid){
continue;
}
CheckValue<IkReal> x15341=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x15338))+((sj3*x15339))),-1);
if(!x15341.valid){
continue;
}
if( IKabs(((-1.0)*(x15340.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15341.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15338)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15340.value)))+IKsqr(((x15341.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15338))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15340.value)), ((x15341.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15338))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15342=IKsin(j4);
IkReal x15343=IKcos(j4);
IkReal x15344=(cj2*sj1);
IkReal x15345=(cj1*sj2);
IkReal x15346=(sj1*sj2);
IkReal x15347=(cj5*sj3);
IkReal x15348=(cj3*cj5);
IkReal x15349=(r21*sj5);
IkReal x15350=(cj1*cj2);
IkReal x15351=(r00*sj5);
IkReal x15352=(r01*sj5);
IkReal x15353=(r20*sj5);
IkReal x15354=((1.0)*x15342);
IkReal x15355=(r20*x15343);
IkReal x15356=(r00*x15343);
IkReal x15357=(cj3*x15343);
IkReal x15358=(x15344+x15345);
IkReal x15359=((1.0)*sj3*x15343);
evalcond[0]=((-1.0)*r12*x15343);
evalcond[1]=(((x15342*x15349))+(((-1.0)*cj5*r20*x15354)));
evalcond[2]=(x15350+((cj3*r12*x15342))+(((-1.0)*x15346)));
evalcond[3]=((((-1.0)*r12*sj3*x15354))+x15358);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15354))+((x15342*x15352)));
evalcond[5]=(((r01*x15347))+((x15352*x15357))+(((-1.0)*x15348*x15356))+((sj3*x15351)));
evalcond[6]=(((r01*x15348))+((x15347*x15356))+(((-1.0)*x15352*x15359))+((cj3*x15351)));
evalcond[7]=(((r21*x15347))+(((-1.0)*x15348*x15355))+x15358+((x15349*x15357))+((sj3*x15353)));
evalcond[8]=(((r21*x15348))+((x15347*x15355))+(((-1.0)*x15349*x15359))+((cj3*x15353))+x15346+(((-1.0)*x15350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15360=((1.0)*r00);
IkReal x15361=(r01*sj5);
CheckValue<IkReal> x15362=IKPowWithIntegerCheck(((((-1.0)*cj5*x15360))+x15361),-1);
if(!x15362.valid){
continue;
}
CheckValue<IkReal> x15363=IKPowWithIntegerCheck((((cj3*x15361))+(((-1.0)*cj3*cj5*x15360))),-1);
if(!x15363.valid){
continue;
}
if( IKabs(((-1.0)*(x15362.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15363.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15360)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15362.value)))+IKsqr(((x15363.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15360))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15362.value)), ((x15363.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15360))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15364=IKsin(j4);
IkReal x15365=IKcos(j4);
IkReal x15366=(cj2*sj1);
IkReal x15367=(cj1*sj2);
IkReal x15368=(sj1*sj2);
IkReal x15369=(cj5*sj3);
IkReal x15370=(cj3*cj5);
IkReal x15371=(r21*sj5);
IkReal x15372=(cj1*cj2);
IkReal x15373=(r00*sj5);
IkReal x15374=(r01*sj5);
IkReal x15375=(r20*sj5);
IkReal x15376=((1.0)*x15364);
IkReal x15377=(r20*x15365);
IkReal x15378=(r00*x15365);
IkReal x15379=(cj3*x15365);
IkReal x15380=(x15366+x15367);
IkReal x15381=((1.0)*sj3*x15365);
evalcond[0]=((-1.0)*r12*x15365);
evalcond[1]=(((x15364*x15371))+(((-1.0)*cj5*r20*x15376)));
evalcond[2]=(x15372+(((-1.0)*x15368))+((cj3*r12*x15364)));
evalcond[3]=((((-1.0)*r12*sj3*x15376))+x15380);
evalcond[4]=((1.0)+((x15364*x15374))+(((-1.0)*cj5*r00*x15376)));
evalcond[5]=(((sj3*x15373))+((x15374*x15379))+(((-1.0)*x15370*x15378))+((r01*x15369)));
evalcond[6]=(((x15369*x15378))+((r01*x15370))+(((-1.0)*x15374*x15381))+((cj3*x15373)));
evalcond[7]=(((sj3*x15375))+x15380+((x15371*x15379))+(((-1.0)*x15370*x15377))+((r21*x15369)));
evalcond[8]=(((x15369*x15377))+(((-1.0)*x15372))+((r21*x15370))+x15368+(((-1.0)*x15371*x15381))+((cj3*x15375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15382=cj5*cj5;
IkReal x15383=(cj3*r20);
IkReal x15384=(r21*sj3);
IkReal x15385=((1.0)*cj3);
IkReal x15386=(r01*r21);
IkReal x15387=(r01*sj3);
IkReal x15388=(r00*sj5);
IkReal x15389=(cj5*r01*sj5);
IkReal x15390=((1.0)*x15382);
CheckValue<IkReal> x15391=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15385*x15386))+((x15383*x15389))+(((-1.0)*r02*r22*x15385))+((cj3*x15382*x15386))+(((-1.0)*r00*x15383*x15390))+((cj3*cj5*r21*x15388)))),-1);
if(!x15391.valid){
continue;
}
CheckValue<IkReal> x15392 = IKatan2WithCheck(IkReal((((r22*sj3*x15388))+((cj5*r22*x15387)))),IkReal(((((-1.0)*r00*x15384*x15390))+(((-1.0)*r20*x15387*x15390))+(((-1.0)*cj5*r20*sj3*x15388))+((x15384*x15389))+((r00*x15384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15391.value)))+(x15392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15393=IKsin(j4);
IkReal x15394=IKcos(j4);
IkReal x15395=(cj2*sj1);
IkReal x15396=(cj1*sj2);
IkReal x15397=(r11*sj5);
IkReal x15398=(cj5*r10);
IkReal x15399=(sj1*sj2);
IkReal x15400=(cj5*r01);
IkReal x15401=(cj5*r00);
IkReal x15402=(cj3*sj5);
IkReal x15403=(r21*sj5);
IkReal x15404=(cj1*cj2);
IkReal x15405=(cj5*sj3);
IkReal x15406=(sj3*sj5);
IkReal x15407=(r01*sj5);
IkReal x15408=(cj3*cj5);
IkReal x15409=(cj5*r20);
IkReal x15410=((1.0)*x15394);
IkReal x15411=((1.0)*x15393);
IkReal x15412=(cj3*x15394);
IkReal x15413=(sj3*x15394);
IkReal x15414=(cj3*x15393);
IkReal x15415=(x15395+x15396);
evalcond[0]=((((-1.0)*r22*x15410))+((x15393*x15403))+(((-1.0)*x15409*x15411)));
evalcond[1]=((((-1.0)*r12*x15410))+((x15393*x15397))+(((-1.0)*x15398*x15411)));
evalcond[2]=((1.0)+((x15393*x15407))+(((-1.0)*x15401*x15411))+(((-1.0)*r02*x15410)));
evalcond[3]=((((-1.0)*cj3*x15401*x15410))+((sj3*x15400))+((r00*x15406))+((r02*x15414))+((r01*x15394*x15402)));
evalcond[4]=((((-1.0)*r01*x15406*x15410))+((x15401*x15413))+((r00*x15402))+(((-1.0)*r02*sj3*x15411))+((cj3*x15400)));
evalcond[5]=(((r20*x15406))+x15415+((r22*x15414))+((r21*x15405))+((r21*x15394*x15402))+(((-1.0)*r20*x15408*x15410)));
evalcond[6]=(((x15397*x15412))+((r12*x15414))+x15404+((r10*x15406))+(((-1.0)*x15399))+(((-1.0)*cj3*x15398*x15410))+((r11*x15405)));
evalcond[7]=((((-1.0)*sj3*x15397*x15410))+((x15398*x15413))+x15415+((r10*x15402))+(((-1.0)*r12*sj3*x15411))+((r11*x15408)));
evalcond[8]=(((r20*x15394*x15405))+(((-1.0)*x15404))+x15399+((r20*x15402))+(((-1.0)*r22*sj3*x15411))+(((-1.0)*sj3*x15403*x15410))+((r21*x15408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15416=((1.0)*cj5);
CheckValue<IkReal> x15417 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15416))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15417.valid){
continue;
}
CheckValue<IkReal> x15418=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15416))+(((-1.0)*r20*sj5)))),-1);
if(!x15418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15417.value)+(((1.5707963267949)*(x15418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15419=IKsin(j4);
IkReal x15420=IKcos(j4);
IkReal x15421=(cj2*sj1);
IkReal x15422=(cj1*sj2);
IkReal x15423=(r11*sj5);
IkReal x15424=(cj5*r10);
IkReal x15425=(sj1*sj2);
IkReal x15426=(cj5*r01);
IkReal x15427=(cj5*r00);
IkReal x15428=(cj3*sj5);
IkReal x15429=(r21*sj5);
IkReal x15430=(cj1*cj2);
IkReal x15431=(cj5*sj3);
IkReal x15432=(sj3*sj5);
IkReal x15433=(r01*sj5);
IkReal x15434=(cj3*cj5);
IkReal x15435=(cj5*r20);
IkReal x15436=((1.0)*x15420);
IkReal x15437=((1.0)*x15419);
IkReal x15438=(cj3*x15420);
IkReal x15439=(sj3*x15420);
IkReal x15440=(cj3*x15419);
IkReal x15441=(x15422+x15421);
evalcond[0]=((((-1.0)*r22*x15436))+(((-1.0)*x15435*x15437))+((x15419*x15429)));
evalcond[1]=((((-1.0)*r12*x15436))+((x15419*x15423))+(((-1.0)*x15424*x15437)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15436))+(((-1.0)*x15427*x15437))+((x15419*x15433)));
evalcond[3]=(((sj3*x15426))+((r01*x15420*x15428))+(((-1.0)*cj3*x15427*x15436))+((r02*x15440))+((r00*x15432)));
evalcond[4]=(((cj3*x15426))+(((-1.0)*r02*sj3*x15437))+((r00*x15428))+((x15427*x15439))+(((-1.0)*r01*x15432*x15436)));
evalcond[5]=(((r21*x15431))+((r21*x15420*x15428))+((r22*x15440))+x15441+(((-1.0)*r20*x15434*x15436))+((r20*x15432)));
evalcond[6]=(((r10*x15432))+((r12*x15440))+((x15423*x15438))+(((-1.0)*x15425))+(((-1.0)*cj3*x15424*x15436))+((r11*x15431))+x15430);
evalcond[7]=(((r10*x15428))+(((-1.0)*r12*sj3*x15437))+((r11*x15434))+x15441+(((-1.0)*sj3*x15423*x15436))+((x15424*x15439)));
evalcond[8]=(((r20*x15428))+((r21*x15434))+(((-1.0)*r22*sj3*x15437))+(((-1.0)*sj3*x15429*x15436))+(((-1.0)*x15430))+x15425+((r20*x15420*x15431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15442 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15442.valid){
continue;
}
CheckValue<IkReal> x15443=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15442.value)+(((1.5707963267949)*(x15443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15444=IKsin(j4);
IkReal x15445=IKcos(j4);
IkReal x15446=(cj2*sj1);
IkReal x15447=(cj1*sj2);
IkReal x15448=(r11*sj5);
IkReal x15449=(cj5*r10);
IkReal x15450=(sj1*sj2);
IkReal x15451=(cj5*r01);
IkReal x15452=(cj5*r00);
IkReal x15453=(cj3*sj5);
IkReal x15454=(r21*sj5);
IkReal x15455=(cj1*cj2);
IkReal x15456=(cj5*sj3);
IkReal x15457=(sj3*sj5);
IkReal x15458=(r01*sj5);
IkReal x15459=(cj3*cj5);
IkReal x15460=(cj5*r20);
IkReal x15461=((1.0)*x15445);
IkReal x15462=((1.0)*x15444);
IkReal x15463=(cj3*x15445);
IkReal x15464=(sj3*x15445);
IkReal x15465=(cj3*x15444);
IkReal x15466=(x15447+x15446);
evalcond[0]=(((x15444*x15454))+(((-1.0)*r22*x15461))+(((-1.0)*x15460*x15462)));
evalcond[1]=(((x15444*x15448))+(((-1.0)*x15449*x15462))+(((-1.0)*r12*x15461)));
evalcond[2]=((1.0)+((x15444*x15458))+(((-1.0)*r02*x15461))+(((-1.0)*x15452*x15462)));
evalcond[3]=(((r01*x15445*x15453))+((r02*x15465))+((sj3*x15451))+((r00*x15457))+(((-1.0)*cj3*x15452*x15461)));
evalcond[4]=(((cj3*x15451))+((r00*x15453))+((x15452*x15464))+(((-1.0)*r01*x15457*x15461))+(((-1.0)*r02*sj3*x15462)));
evalcond[5]=(((r20*x15457))+((r22*x15465))+((r21*x15445*x15453))+x15466+(((-1.0)*r20*x15459*x15461))+((r21*x15456)));
evalcond[6]=(((r11*x15456))+((r10*x15457))+((x15448*x15463))+x15455+((r12*x15465))+(((-1.0)*cj3*x15449*x15461))+(((-1.0)*x15450)));
evalcond[7]=(((r11*x15459))+((r10*x15453))+(((-1.0)*sj3*x15448*x15461))+((x15449*x15464))+x15466+(((-1.0)*r12*sj3*x15462)));
evalcond[8]=(((r20*x15453))+((r20*x15445*x15456))+(((-1.0)*sj3*x15454*x15461))+x15450+((r21*x15459))+(((-1.0)*r22*sj3*x15462))+(((-1.0)*x15455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15467=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15467);
rxp1_1=(px*r21);
rxp1_2=(r11*x15467);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15468=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15468);
rxp1_1=(px*r21);
rxp1_2=(r11*x15468);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15469=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x15469))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15469)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15470=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15470);
rxp1_1=(px*r21);
rxp1_2=(r11*x15470);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15471=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15471);
rxp1_1=(px*r21);
rxp1_2=(r11*x15471);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15472=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15472);
rxp1_1=(px*r21);
rxp1_2=(r11*x15472);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15473=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15473);
rxp1_1=(px*r21);
rxp1_2=(r11*x15473);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15476=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15476.valid){
continue;
}
IkReal x15474=x15476.value;
IkReal x15475=(sj0*x15474);
cj4array[0]=(((cj2*sj1*x15475))+((cj1*sj2*x15475)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15477=IKsin(j4);
IkReal x15478=IKcos(j4);
IkReal x15479=(cj5*r20);
IkReal x15480=(r21*sj5);
IkReal x15481=((1.0)*x15477);
IkReal x15482=((1.0)*x15478);
evalcond[0]=((-1.0)*r02*x15477);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15482)));
evalcond[2]=((((-1.0)*x15479*x15481))+((x15477*x15480)));
evalcond[3]=((((-1.0)*cj5*r10*x15481))+((r11*sj5*x15477)));
evalcond[4]=(((x15478*x15479))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15480*x15482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15484=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15484.valid){
continue;
}
IkReal x15483=x15484.value;
cj4array[0]=(((cj1*cj2*x15483))+(((-1.0)*sj1*sj2*x15483)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15485=IKsin(j4);
IkReal x15486=IKcos(j4);
IkReal x15487=(r11*sj5);
IkReal x15488=((1.0)*sj0);
IkReal x15489=((1.0)*x15486);
IkReal x15490=((1.0)*cj5*x15485);
evalcond[0]=((-1.0)*r02*x15485);
evalcond[1]=((((-1.0)*r02*x15489))+(((-1.0)*x15488)));
evalcond[2]=((((-1.0)*r20*x15490))+((r21*sj5*x15485)));
evalcond[3]=(((x15485*x15487))+(((-1.0)*r10*x15490)));
evalcond[4]=((((-1.0)*cj1*sj2*x15488))+(((-1.0)*cj2*sj1*x15488))+(((-1.0)*x15487*x15489))+((cj5*r10*x15486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15491=IKPowWithIntegerCheck(r02,-1);
if(!x15491.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15491.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15492=IKsin(j4);
IkReal x15493=IKcos(j4);
IkReal x15494=((1.0)*sj0);
IkReal x15495=(cj5*x15493);
IkReal x15496=(sj5*x15492);
IkReal x15497=((1.0)*sj5*x15493);
IkReal x15498=((1.0)*cj5*x15492);
evalcond[0]=((-1.0)*r02*x15492);
evalcond[1]=((((-1.0)*r20*x15498))+((r21*x15496)));
evalcond[2]=(((r11*x15496))+(((-1.0)*r10*x15498)));
evalcond[3]=(((r20*x15495))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15497)));
evalcond[4]=(((r10*x15495))+(((-1.0)*r11*x15497))+(((-1.0)*cj1*sj2*x15494))+(((-1.0)*cj2*sj1*x15494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15499=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15499);
rxp1_1=(px*r21);
rxp1_2=(r11*x15499);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15500=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15500);
rxp1_1=(px*r21);
rxp1_2=(r11*x15500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15501=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15501);
rxp1_1=(px*r21);
rxp1_2=(r11*x15501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15504=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15504.valid){
continue;
}
IkReal x15502=x15504.value;
IkReal x15503=(sj0*x15502);
cj4array[0]=(((cj1*sj2*x15503))+((cj2*sj1*x15503)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15505=IKsin(j4);
IkReal x15506=IKcos(j4);
IkReal x15507=(r21*sj5);
IkReal x15508=((1.0)*cj5*r20);
evalcond[0]=(r02*x15505);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15506)));
evalcond[2]=(((x15505*x15507))+(((-1.0)*x15505*x15508)));
evalcond[3]=(((r11*sj5*x15505))+(((-1.0)*cj5*r10*x15505)));
evalcond[4]=(((x15506*x15507))+(((-1.0)*x15506*x15508))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15510=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15510.valid){
continue;
}
IkReal x15509=x15510.value;
cj4array[0]=(((cj1*cj2*x15509))+(((-1.0)*sj1*sj2*x15509)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15511=IKsin(j4);
IkReal x15512=IKcos(j4);
IkReal x15513=((1.0)*sj0);
IkReal x15514=((1.0)*cj5);
IkReal x15515=(sj5*x15511);
evalcond[0]=(r02*x15511);
evalcond[1]=((((-1.0)*r02*x15512))+(((-1.0)*x15513)));
evalcond[2]=(((r21*x15515))+(((-1.0)*r20*x15511*x15514)));
evalcond[3]=((((-1.0)*r10*x15511*x15514))+((r11*x15515)));
evalcond[4]=((((-1.0)*r10*x15512*x15514))+((r11*sj5*x15512))+(((-1.0)*cj1*sj2*x15513))+(((-1.0)*cj2*sj1*x15513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15516=IKPowWithIntegerCheck(r02,-1);
if(!x15516.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15516.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15517=IKsin(j4);
IkReal x15518=IKcos(j4);
IkReal x15519=((1.0)*cj1);
IkReal x15520=(r21*sj5);
IkReal x15521=((1.0)*cj5);
IkReal x15522=(r11*sj5);
evalcond[0]=(r02*x15517);
evalcond[1]=((((-1.0)*r20*x15517*x15521))+((x15517*x15520)));
evalcond[2]=(((x15517*x15522))+(((-1.0)*r10*x15517*x15521)));
evalcond[3]=((((-1.0)*cj2*x15519))+((sj1*sj2))+(((-1.0)*r20*x15518*x15521))+((x15518*x15520)));
evalcond[4]=((((-1.0)*r10*x15518*x15521))+(((-1.0)*sj0*sj2*x15519))+(((-1.0)*cj2*sj0*sj1))+((x15518*x15522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15523 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15523.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15523.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15524 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15524.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15524.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15525=((-1.0)*r10);
CheckValue<IkReal> x15527 = IKatan2WithCheck(IkReal(x15525),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15527.valid){
continue;
}
IkReal x15526=((-1.0)*(x15527.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15525);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15526;
IkReal gconst66=x15526;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15528=((-1.0)*r10);
CheckValue<IkReal> x15530 = IKatan2WithCheck(IkReal(x15528),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15530.valid){
continue;
}
IkReal x15529=((-1.0)*(x15530.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15528);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15529;
IkReal gconst66=x15529;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15531=((-1.0)*r10);
CheckValue<IkReal> x15533 = IKatan2WithCheck(IkReal(x15531),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15533.valid){
continue;
}
IkReal x15532=((-1.0)*(x15533.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15531);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15532;
IkReal gconst66=x15532;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15534=((1.0)*gconst67);
IkReal x15535=(cj1*cj2);
IkReal x15536=((1.0)*sj1*sj2);
CheckValue<IkReal> x15537=IKPowWithIntegerCheck(cj3,-1);
if(!x15537.valid){
continue;
}
CheckValue<IkReal> x15538=IKPowWithIntegerCheck(r02,-1);
if(!x15538.valid){
continue;
}
CheckValue<IkReal> x15539=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15534))+((gconst68*r20*sj3))),-1);
if(!x15539.valid){
continue;
}
if( IKabs(((x15537.value)*(x15538.value)*(((((-1.0)*cj0*x15536))+((cj0*x15535)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15539.value)*(((((-1.0)*x15536))+(((-1.0)*cj3*r20*x15534))+x15535+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15537.value)*(x15538.value)*(((((-1.0)*cj0*x15536))+((cj0*x15535))))))+IKsqr(((x15539.value)*(((((-1.0)*x15536))+(((-1.0)*cj3*r20*x15534))+x15535+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15537.value)*(x15538.value)*(((((-1.0)*cj0*x15536))+((cj0*x15535))))), ((x15539.value)*(((((-1.0)*x15536))+(((-1.0)*cj3*r20*x15534))+x15535+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15540=IKsin(j4);
IkReal x15541=IKcos(j4);
IkReal x15542=(sj1*sj2);
IkReal x15543=(gconst68*sj3);
IkReal x15544=(gconst67*r11);
IkReal x15545=(gconst67*sj3);
IkReal x15546=((1.0)*gconst68);
IkReal x15547=(cj2*sj1);
IkReal x15548=((1.0)*cj0);
IkReal x15549=((1.0)*sj0);
IkReal x15550=(cj3*gconst67);
IkReal x15551=(cj3*gconst68);
IkReal x15552=(cj1*sj2);
IkReal x15553=(gconst67*r21);
IkReal x15554=((1.0)*cj1*cj2);
IkReal x15555=(cj3*x15541);
IkReal x15556=((1.0)*x15541);
IkReal x15557=(r02*x15540);
evalcond[0]=((((-1.0)*x15549))+(((-1.0)*r02*x15556)));
evalcond[1]=(((x15540*x15553))+(((-1.0)*r20*x15540*x15546)));
evalcond[2]=(cj0+((x15540*x15544))+(((-1.0)*r10*x15540*x15546)));
evalcond[3]=((((-1.0)*cj1*cj2*x15548))+((cj3*x15557))+((cj0*x15542)));
evalcond[4]=((((-1.0)*x15547*x15548))+(((-1.0)*x15548*x15552))+(((-1.0)*sj3*x15557)));
evalcond[5]=(((r21*x15541*x15550))+((r20*x15545))+((r21*x15543))+(((-1.0)*r20*x15546*x15555))+x15547+x15552);
evalcond[6]=(((r21*x15551))+((r20*x15541*x15543))+(((-1.0)*r21*x15545*x15556))+((r20*x15550))+x15542+(((-1.0)*x15554)));
evalcond[7]=((((-1.0)*cj1*cj2*x15549))+(((-1.0)*r10*x15546*x15555))+((r10*x15545))+((x15544*x15555))+((sj0*x15542))+((r11*x15543)));
evalcond[8]=(((r10*x15541*x15543))+((r11*x15551))+(((-1.0)*sj3*x15544*x15556))+((r10*x15550))+(((-1.0)*x15547*x15549))+(((-1.0)*x15549*x15552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15560=IKPowWithIntegerCheck(r02,-1);
if(!x15560.valid){
continue;
}
IkReal x15558=x15560.value;
IkReal x15559=((1.0)*cj0);
CheckValue<IkReal> x15561=IKPowWithIntegerCheck(sj3,-1);
if(!x15561.valid){
continue;
}
if( IKabs((x15558*(x15561.value)*(((((-1.0)*cj1*sj2*x15559))+(((-1.0)*cj2*sj1*x15559)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15558)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15558*(x15561.value)*(((((-1.0)*cj1*sj2*x15559))+(((-1.0)*cj2*sj1*x15559))))))+IKsqr(((-1.0)*sj0*x15558))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15558*(x15561.value)*(((((-1.0)*cj1*sj2*x15559))+(((-1.0)*cj2*sj1*x15559))))), ((-1.0)*sj0*x15558));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15562=IKsin(j4);
IkReal x15563=IKcos(j4);
IkReal x15564=(sj1*sj2);
IkReal x15565=(gconst68*sj3);
IkReal x15566=(gconst67*r11);
IkReal x15567=(gconst67*sj3);
IkReal x15568=((1.0)*gconst68);
IkReal x15569=(cj2*sj1);
IkReal x15570=((1.0)*cj0);
IkReal x15571=((1.0)*sj0);
IkReal x15572=(cj3*gconst67);
IkReal x15573=(cj3*gconst68);
IkReal x15574=(cj1*sj2);
IkReal x15575=(gconst67*r21);
IkReal x15576=((1.0)*cj1*cj2);
IkReal x15577=(cj3*x15563);
IkReal x15578=((1.0)*x15563);
IkReal x15579=(r02*x15562);
evalcond[0]=((((-1.0)*r02*x15578))+(((-1.0)*x15571)));
evalcond[1]=(((x15562*x15575))+(((-1.0)*r20*x15562*x15568)));
evalcond[2]=(cj0+((x15562*x15566))+(((-1.0)*r10*x15562*x15568)));
evalcond[3]=(((cj0*x15564))+(((-1.0)*cj1*cj2*x15570))+((cj3*x15579)));
evalcond[4]=((((-1.0)*x15569*x15570))+(((-1.0)*x15570*x15574))+(((-1.0)*sj3*x15579)));
evalcond[5]=(((r21*x15565))+(((-1.0)*r20*x15568*x15577))+((r21*x15563*x15572))+((r20*x15567))+x15574+x15569);
evalcond[6]=(((r21*x15573))+((r20*x15563*x15565))+(((-1.0)*r21*x15567*x15578))+((r20*x15572))+x15564+(((-1.0)*x15576)));
evalcond[7]=(((x15566*x15577))+((sj0*x15564))+((r10*x15567))+(((-1.0)*cj1*cj2*x15571))+((r11*x15565))+(((-1.0)*r10*x15568*x15577)));
evalcond[8]=(((r10*x15563*x15565))+((r10*x15572))+(((-1.0)*x15569*x15571))+((r11*x15573))+(((-1.0)*x15571*x15574))+(((-1.0)*sj3*x15566*x15578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15581=IKPowWithIntegerCheck(r02,-1);
if(!x15581.valid){
continue;
}
IkReal x15580=x15581.value;
CheckValue<IkReal> x15582=IKPowWithIntegerCheck(cj3,-1);
if(!x15582.valid){
continue;
}
if( IKabs((x15580*(x15582.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15580)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15580*(x15582.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15580))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15580*(x15582.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15580));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15583=IKsin(j4);
IkReal x15584=IKcos(j4);
IkReal x15585=(sj1*sj2);
IkReal x15586=(gconst68*sj3);
IkReal x15587=(gconst67*r11);
IkReal x15588=(gconst67*sj3);
IkReal x15589=((1.0)*gconst68);
IkReal x15590=(cj2*sj1);
IkReal x15591=((1.0)*cj0);
IkReal x15592=((1.0)*sj0);
IkReal x15593=(cj3*gconst67);
IkReal x15594=(cj3*gconst68);
IkReal x15595=(cj1*sj2);
IkReal x15596=(gconst67*r21);
IkReal x15597=((1.0)*cj1*cj2);
IkReal x15598=(cj3*x15584);
IkReal x15599=((1.0)*x15584);
IkReal x15600=(r02*x15583);
evalcond[0]=((((-1.0)*r02*x15599))+(((-1.0)*x15592)));
evalcond[1]=(((x15583*x15596))+(((-1.0)*r20*x15583*x15589)));
evalcond[2]=(cj0+(((-1.0)*r10*x15583*x15589))+((x15583*x15587)));
evalcond[3]=(((cj0*x15585))+(((-1.0)*cj1*cj2*x15591))+((cj3*x15600)));
evalcond[4]=((((-1.0)*x15591*x15595))+(((-1.0)*sj3*x15600))+(((-1.0)*x15590*x15591)));
evalcond[5]=((((-1.0)*r20*x15589*x15598))+x15590+x15595+((r20*x15588))+((r21*x15584*x15593))+((r21*x15586)));
evalcond[6]=(((r20*x15584*x15586))+((r21*x15594))+(((-1.0)*r21*x15588*x15599))+((r20*x15593))+(((-1.0)*x15597))+x15585);
evalcond[7]=(((r11*x15586))+(((-1.0)*cj1*cj2*x15592))+((r10*x15588))+(((-1.0)*r10*x15589*x15598))+((x15587*x15598))+((sj0*x15585)));
evalcond[8]=((((-1.0)*x15592*x15595))+((r11*x15594))+((r10*x15593))+(((-1.0)*sj3*x15587*x15599))+((r10*x15584*x15586))+(((-1.0)*x15590*x15592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15601=((-1.0)*r10);
CheckValue<IkReal> x15602 = IKatan2WithCheck(IkReal(x15601),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15602.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15602.value))));
IkReal gconst70=x15601;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15603 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15603.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15603.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15604=((-1.0)*r10);
IkReal x15605=((-1.0)*r11);
CheckValue<IkReal> x15607 = IKatan2WithCheck(IkReal(x15604),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15607.valid){
continue;
}
IkReal x15606=((1.0)*(x15607.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15604);
rxp1_1=(px*r21);
rxp1_2=(px*x15605);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15606)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15606)));
IkReal gconst70=x15604;
IkReal gconst71=x15605;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15608=((-1.0)*r10);
IkReal x15609=((-1.0)*r11);
CheckValue<IkReal> x15611 = IKatan2WithCheck(IkReal(x15608),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15611.valid){
continue;
}
IkReal x15610=((1.0)*(x15611.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15608);
rxp1_1=(px*r21);
rxp1_2=(px*x15609);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15610)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15610)));
IkReal gconst70=x15608;
IkReal gconst71=x15609;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15612=((-1.0)*r10);
IkReal x15613=((-1.0)*r11);
CheckValue<IkReal> x15615 = IKatan2WithCheck(IkReal(x15612),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15615.valid){
continue;
}
IkReal x15614=((1.0)*(x15615.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15612);
rxp1_1=(px*r21);
rxp1_2=(px*x15613);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15614)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15614)));
IkReal gconst70=x15612;
IkReal gconst71=x15613;
IkReal x15616=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15616))+((r10*r21*x15616)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15617=((1.0)*r21);
IkReal x15618=(cj1*cj2);
IkReal x15619=((1.0)*sj1*sj2);
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(cj3,-1);
if(!x15620.valid){
continue;
}
CheckValue<IkReal> x15621=IKPowWithIntegerCheck(r02,-1);
if(!x15621.valid){
continue;
}
CheckValue<IkReal> x15622=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15617))+((gconst71*r20*sj3))),-1);
if(!x15622.valid){
continue;
}
if( IKabs(((x15620.value)*(x15621.value)*((((cj0*x15618))+(((-1.0)*cj0*x15619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15622.value)*(((((-1.0)*cj3*gconst71*x15617))+(((-1.0)*x15619))+x15618+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15620.value)*(x15621.value)*((((cj0*x15618))+(((-1.0)*cj0*x15619))))))+IKsqr(((x15622.value)*(((((-1.0)*cj3*gconst71*x15617))+(((-1.0)*x15619))+x15618+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15620.value)*(x15621.value)*((((cj0*x15618))+(((-1.0)*cj0*x15619))))), ((x15622.value)*(((((-1.0)*cj3*gconst71*x15617))+(((-1.0)*x15619))+x15618+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15623=IKsin(j4);
IkReal x15624=IKcos(j4);
IkReal x15625=(cj3*gconst70);
IkReal x15626=(sj1*sj2);
IkReal x15627=((1.0)*gconst71);
IkReal x15628=(gconst71*sj3);
IkReal x15629=(cj2*sj1);
IkReal x15630=((1.0)*sj0);
IkReal x15631=(gconst70*r11);
IkReal x15632=(gconst70*sj3);
IkReal x15633=((1.0)*cj0);
IkReal x15634=(cj3*gconst71);
IkReal x15635=(cj1*sj2);
IkReal x15636=((1.0)*cj1*cj2);
IkReal x15637=(r21*x15624);
IkReal x15638=(r10*x15624);
IkReal x15639=((1.0)*x15624);
IkReal x15640=(r02*x15623);
IkReal x15641=(r20*x15624);
evalcond[0]=((((-1.0)*r02*x15639))+(((-1.0)*x15630)));
evalcond[1]=(((gconst70*r21*x15623))+(((-1.0)*r20*x15623*x15627)));
evalcond[2]=(cj0+((x15623*x15631))+(((-1.0)*r10*x15623*x15627)));
evalcond[3]=((((-1.0)*cj1*cj2*x15633))+((cj0*x15626))+((cj3*x15640)));
evalcond[4]=((((-1.0)*x15633*x15635))+(((-1.0)*sj3*x15640))+(((-1.0)*x15629*x15633)));
evalcond[5]=(((r21*x15628))+((r20*x15632))+((x15625*x15637))+(((-1.0)*cj3*x15627*x15641))+x15629+x15635);
evalcond[6]=((((-1.0)*x15632*x15637))+x15626+((r20*x15625))+((r21*x15634))+(((-1.0)*x15636))+((x15628*x15641)));
evalcond[7]=((((-1.0)*cj1*cj2*x15630))+((sj0*x15626))+((r11*x15624*x15625))+(((-1.0)*cj3*x15627*x15638))+((r11*x15628))+((r10*x15632)));
evalcond[8]=((((-1.0)*x15630*x15635))+(((-1.0)*x15629*x15630))+(((-1.0)*sj3*x15631*x15639))+((r11*x15634))+((r10*x15625))+((x15628*x15638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15644=IKPowWithIntegerCheck(r02,-1);
if(!x15644.valid){
continue;
}
IkReal x15642=x15644.value;
IkReal x15643=((1.0)*cj0);
CheckValue<IkReal> x15645=IKPowWithIntegerCheck(sj3,-1);
if(!x15645.valid){
continue;
}
if( IKabs((x15642*(x15645.value)*(((((-1.0)*cj2*sj1*x15643))+(((-1.0)*cj1*sj2*x15643)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15642)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15642*(x15645.value)*(((((-1.0)*cj2*sj1*x15643))+(((-1.0)*cj1*sj2*x15643))))))+IKsqr(((-1.0)*sj0*x15642))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15642*(x15645.value)*(((((-1.0)*cj2*sj1*x15643))+(((-1.0)*cj1*sj2*x15643))))), ((-1.0)*sj0*x15642));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15646=IKsin(j4);
IkReal x15647=IKcos(j4);
IkReal x15648=(cj3*gconst70);
IkReal x15649=(sj1*sj2);
IkReal x15650=((1.0)*gconst71);
IkReal x15651=(gconst71*sj3);
IkReal x15652=(cj2*sj1);
IkReal x15653=((1.0)*sj0);
IkReal x15654=(gconst70*r11);
IkReal x15655=(gconst70*sj3);
IkReal x15656=((1.0)*cj0);
IkReal x15657=(cj3*gconst71);
IkReal x15658=(cj1*sj2);
IkReal x15659=((1.0)*cj1*cj2);
IkReal x15660=(r21*x15647);
IkReal x15661=(r10*x15647);
IkReal x15662=((1.0)*x15647);
IkReal x15663=(r02*x15646);
IkReal x15664=(r20*x15647);
evalcond[0]=((((-1.0)*x15653))+(((-1.0)*r02*x15662)));
evalcond[1]=(((gconst70*r21*x15646))+(((-1.0)*r20*x15646*x15650)));
evalcond[2]=(((x15646*x15654))+cj0+(((-1.0)*r10*x15646*x15650)));
evalcond[3]=((((-1.0)*cj1*cj2*x15656))+((cj3*x15663))+((cj0*x15649)));
evalcond[4]=((((-1.0)*x15656*x15658))+(((-1.0)*x15652*x15656))+(((-1.0)*sj3*x15663)));
evalcond[5]=((((-1.0)*cj3*x15650*x15664))+x15658+x15652+((r21*x15651))+((r20*x15655))+((x15648*x15660)));
evalcond[6]=(((x15651*x15664))+x15649+(((-1.0)*x15659))+((r21*x15657))+(((-1.0)*x15655*x15660))+((r20*x15648)));
evalcond[7]=(((r10*x15655))+(((-1.0)*cj3*x15650*x15661))+(((-1.0)*cj1*cj2*x15653))+((r11*x15651))+((sj0*x15649))+((r11*x15647*x15648)));
evalcond[8]=(((x15651*x15661))+((r11*x15657))+(((-1.0)*x15652*x15653))+(((-1.0)*x15653*x15658))+(((-1.0)*sj3*x15654*x15662))+((r10*x15648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15666=IKPowWithIntegerCheck(r02,-1);
if(!x15666.valid){
continue;
}
IkReal x15665=x15666.value;
CheckValue<IkReal> x15667=IKPowWithIntegerCheck(cj3,-1);
if(!x15667.valid){
continue;
}
if( IKabs((x15665*(x15667.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15665)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15665*(x15667.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15665))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15665*(x15667.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15665));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15668=IKsin(j4);
IkReal x15669=IKcos(j4);
IkReal x15670=(cj3*gconst70);
IkReal x15671=(sj1*sj2);
IkReal x15672=((1.0)*gconst71);
IkReal x15673=(gconst71*sj3);
IkReal x15674=(cj2*sj1);
IkReal x15675=((1.0)*sj0);
IkReal x15676=(gconst70*r11);
IkReal x15677=(gconst70*sj3);
IkReal x15678=((1.0)*cj0);
IkReal x15679=(cj3*gconst71);
IkReal x15680=(cj1*sj2);
IkReal x15681=((1.0)*cj1*cj2);
IkReal x15682=(r21*x15669);
IkReal x15683=(r10*x15669);
IkReal x15684=((1.0)*x15669);
IkReal x15685=(r02*x15668);
IkReal x15686=(r20*x15669);
evalcond[0]=((((-1.0)*x15675))+(((-1.0)*r02*x15684)));
evalcond[1]=((((-1.0)*r20*x15668*x15672))+((gconst70*r21*x15668)));
evalcond[2]=(cj0+((x15668*x15676))+(((-1.0)*r10*x15668*x15672)));
evalcond[3]=(((cj3*x15685))+(((-1.0)*cj1*cj2*x15678))+((cj0*x15671)));
evalcond[4]=((((-1.0)*sj3*x15685))+(((-1.0)*x15678*x15680))+(((-1.0)*x15674*x15678)));
evalcond[5]=(((r20*x15677))+x15674+x15680+((r21*x15673))+((x15670*x15682))+(((-1.0)*cj3*x15672*x15686)));
evalcond[6]=(((r20*x15670))+x15671+((r21*x15679))+((x15673*x15686))+(((-1.0)*x15681))+(((-1.0)*x15677*x15682)));
evalcond[7]=(((r10*x15677))+((r11*x15673))+((sj0*x15671))+(((-1.0)*cj1*cj2*x15675))+((r11*x15669*x15670))+(((-1.0)*cj3*x15672*x15683)));
evalcond[8]=((((-1.0)*sj3*x15676*x15684))+((r10*x15670))+((r11*x15679))+((x15673*x15683))+(((-1.0)*x15675*x15680))+(((-1.0)*x15674*x15675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15688=IKPowWithIntegerCheck(r02,-1);
if(!x15688.valid){
continue;
}
IkReal x15687=x15688.value;
CheckValue<IkReal> x15689=IKPowWithIntegerCheck(cj3,-1);
if(!x15689.valid){
continue;
}
if( IKabs((x15687*(x15689.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15687)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15687*(x15689.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15687))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15687*(x15689.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15687));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15690=IKsin(j4);
IkReal x15691=IKcos(j4);
IkReal x15692=(cj5*r10);
IkReal x15693=(sj1*sj2);
IkReal x15694=(cj5*sj3);
IkReal x15695=(r11*sj5);
IkReal x15696=(cj3*cj5);
IkReal x15697=(cj3*sj5);
IkReal x15698=(r21*sj5);
IkReal x15699=(cj2*sj1);
IkReal x15700=((1.0)*sj0);
IkReal x15701=((1.0)*cj0);
IkReal x15702=(sj3*sj5);
IkReal x15703=(cj1*sj2);
IkReal x15704=((1.0)*cj1*cj2);
IkReal x15705=((1.0)*x15690);
IkReal x15706=(r20*x15691);
IkReal x15707=(cj3*x15691);
IkReal x15708=(sj3*x15691);
evalcond[0]=((((-1.0)*x15700))+(((-1.0)*r02*x15691)));
evalcond[1]=((((-1.0)*cj5*r20*x15705))+((x15690*x15698)));
evalcond[2]=(cj0+((x15690*x15695))+(((-1.0)*x15692*x15705)));
evalcond[3]=((((-1.0)*cj1*cj2*x15701))+((cj3*r02*x15690))+((cj0*x15693)));
evalcond[4]=((((-1.0)*x15701*x15703))+(((-1.0)*r02*sj3*x15705))+(((-1.0)*x15699*x15701)));
evalcond[5]=((((-1.0)*x15696*x15706))+((r20*x15702))+((r21*x15694))+x15699+x15703+((r21*x15691*x15697)));
evalcond[6]=((((-1.0)*x15704))+((r20*x15697))+((x15694*x15706))+((r21*x15696))+x15693+(((-1.0)*x15698*x15708)));
evalcond[7]=(((x15695*x15707))+((r11*x15694))+((sj0*x15693))+(((-1.0)*cj1*cj2*x15700))+(((-1.0)*x15692*x15707))+((r10*x15702)));
evalcond[8]=(((r10*x15697))+(((-1.0)*x15700*x15703))+((r11*x15696))+(((-1.0)*x15695*x15708))+((x15692*x15708))+(((-1.0)*x15699*x15700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15709=((1.0)*sj3);
IkReal x15710=((1.0)*cj5);
CheckValue<IkReal> x15711=IKPowWithIntegerCheck(((((-1.0)*r10*x15710))+((r11*sj5))),-1);
if(!x15711.valid){
continue;
}
CheckValue<IkReal> x15712=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15710))+((cj3*r21*sj5))),-1);
if(!x15712.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15711.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15712.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15709))+(((-1.0)*r20*sj5*x15709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15711.value)))+IKsqr(((x15712.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15709))+(((-1.0)*r20*sj5*x15709))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15711.value)), ((x15712.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15709))+(((-1.0)*r20*sj5*x15709))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15713=IKsin(j4);
IkReal x15714=IKcos(j4);
IkReal x15715=(cj5*r10);
IkReal x15716=(sj1*sj2);
IkReal x15717=(cj5*sj3);
IkReal x15718=(r11*sj5);
IkReal x15719=(cj3*cj5);
IkReal x15720=(cj3*sj5);
IkReal x15721=(r21*sj5);
IkReal x15722=(cj2*sj1);
IkReal x15723=((1.0)*sj0);
IkReal x15724=((1.0)*cj0);
IkReal x15725=(sj3*sj5);
IkReal x15726=(cj1*sj2);
IkReal x15727=((1.0)*cj1*cj2);
IkReal x15728=((1.0)*x15713);
IkReal x15729=(r20*x15714);
IkReal x15730=(cj3*x15714);
IkReal x15731=(sj3*x15714);
evalcond[0]=((((-1.0)*x15723))+(((-1.0)*r02*x15714)));
evalcond[1]=((((-1.0)*cj5*r20*x15728))+((x15713*x15721)));
evalcond[2]=(cj0+(((-1.0)*x15715*x15728))+((x15713*x15718)));
evalcond[3]=((((-1.0)*cj1*cj2*x15724))+((cj3*r02*x15713))+((cj0*x15716)));
evalcond[4]=((((-1.0)*x15722*x15724))+(((-1.0)*x15724*x15726))+(((-1.0)*r02*sj3*x15728)));
evalcond[5]=(((r20*x15725))+(((-1.0)*x15719*x15729))+((r21*x15717))+x15722+x15726+((r21*x15714*x15720)));
evalcond[6]=((((-1.0)*x15727))+((r20*x15720))+((r21*x15719))+x15716+(((-1.0)*x15721*x15731))+((x15717*x15729)));
evalcond[7]=(((x15718*x15730))+(((-1.0)*x15715*x15730))+(((-1.0)*cj1*cj2*x15723))+((r10*x15725))+((sj0*x15716))+((r11*x15717)));
evalcond[8]=((((-1.0)*x15723*x15726))+(((-1.0)*x15722*x15723))+((x15715*x15731))+((r10*x15720))+(((-1.0)*x15718*x15731))+((r11*x15719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15732=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15732.valid){
continue;
}
CheckValue<IkReal> x15733=IKPowWithIntegerCheck(r02,-1);
if(!x15733.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15732.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15733.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15732.value)))+IKsqr(((-1.0)*sj0*(x15733.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15732.value)), ((-1.0)*sj0*(x15733.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15734=IKsin(j4);
IkReal x15735=IKcos(j4);
IkReal x15736=(cj5*r10);
IkReal x15737=(sj1*sj2);
IkReal x15738=(cj5*sj3);
IkReal x15739=(r11*sj5);
IkReal x15740=(cj3*cj5);
IkReal x15741=(cj3*sj5);
IkReal x15742=(r21*sj5);
IkReal x15743=(cj2*sj1);
IkReal x15744=((1.0)*sj0);
IkReal x15745=((1.0)*cj0);
IkReal x15746=(sj3*sj5);
IkReal x15747=(cj1*sj2);
IkReal x15748=((1.0)*cj1*cj2);
IkReal x15749=((1.0)*x15734);
IkReal x15750=(r20*x15735);
IkReal x15751=(cj3*x15735);
IkReal x15752=(sj3*x15735);
evalcond[0]=((((-1.0)*x15744))+(((-1.0)*r02*x15735)));
evalcond[1]=(((x15734*x15742))+(((-1.0)*cj5*r20*x15749)));
evalcond[2]=(((x15734*x15739))+cj0+(((-1.0)*x15736*x15749)));
evalcond[3]=(((cj3*r02*x15734))+((cj0*x15737))+(((-1.0)*cj1*cj2*x15745)));
evalcond[4]=((((-1.0)*r02*sj3*x15749))+(((-1.0)*x15745*x15747))+(((-1.0)*x15743*x15745)));
evalcond[5]=(((r21*x15735*x15741))+((r21*x15738))+(((-1.0)*x15740*x15750))+x15747+x15743+((r20*x15746)));
evalcond[6]=((((-1.0)*x15748))+(((-1.0)*x15742*x15752))+((x15738*x15750))+((r21*x15740))+x15737+((r20*x15741)));
evalcond[7]=(((r11*x15738))+(((-1.0)*x15736*x15751))+((sj0*x15737))+((x15739*x15751))+(((-1.0)*cj1*cj2*x15744))+((r10*x15746)));
evalcond[8]=((((-1.0)*x15744*x15747))+((r11*x15740))+((x15736*x15752))+(((-1.0)*x15739*x15752))+((r10*x15741))+(((-1.0)*x15743*x15744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15753=((1.0)*sj0);
IkReal x15754=((1.0)*cj0);
CheckValue<IkReal> x15755 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15754))+(((-1.0)*r12*x15753)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x15754))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x15753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15755.valid){
continue;
}
CheckValue<IkReal> x15756=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15755.value)+(((1.5707963267949)*(x15756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15757=IKsin(j4);
IkReal x15758=IKcos(j4);
IkReal x15759=(r11*sj5);
IkReal x15760=(cj5*r10);
IkReal x15761=(sj1*sj2);
IkReal x15762=(cj5*sj3);
IkReal x15763=((1.0)*sj0);
IkReal x15764=(cj3*cj5);
IkReal x15765=(cj3*sj5);
IkReal x15766=(r21*sj5);
IkReal x15767=(cj2*sj1);
IkReal x15768=(sj3*sj5);
IkReal x15769=(r01*sj5);
IkReal x15770=((1.0)*cj0);
IkReal x15771=(cj1*sj2);
IkReal x15772=((1.0)*x15758);
IkReal x15773=((1.0)*x15757);
IkReal x15774=(cj3*x15758);
IkReal x15775=((1.0)*cj1*cj2);
IkReal x15776=(cj3*x15757);
evalcond[0]=((((-1.0)*r22*x15772))+((x15757*x15766))+(((-1.0)*cj5*r20*x15773)));
evalcond[1]=(cj0+((x15757*x15759))+(((-1.0)*r12*x15772))+(((-1.0)*x15760*x15773)));
evalcond[2]=((((-1.0)*cj5*r00*x15773))+(((-1.0)*x15763))+(((-1.0)*r02*x15772))+((x15757*x15769)));
evalcond[3]=(((r22*x15776))+((r21*x15762))+((r20*x15768))+(((-1.0)*r20*x15764*x15772))+((r21*x15758*x15765))+x15771+x15767);
evalcond[4]=(((r21*x15764))+(((-1.0)*x15775))+((r20*x15765))+x15761+((r20*x15758*x15762))+(((-1.0)*r22*sj3*x15773))+(((-1.0)*sj3*x15766*x15772)));
evalcond[5]=((((-1.0)*r00*x15764*x15772))+((r02*x15776))+((r01*x15758*x15765))+((r01*x15762))+((r00*x15768))+((cj0*x15761))+(((-1.0)*cj1*cj2*x15770)));
evalcond[6]=(((r10*x15768))+((sj0*x15761))+((x15759*x15774))+(((-1.0)*cj1*cj2*x15763))+(((-1.0)*cj3*x15760*x15772))+((r12*x15776))+((r11*x15762)));
evalcond[7]=((((-1.0)*r02*sj3*x15773))+((r01*x15764))+(((-1.0)*x15770*x15771))+((r00*x15765))+((r00*x15758*x15762))+(((-1.0)*r01*x15768*x15772))+(((-1.0)*x15767*x15770)));
evalcond[8]=(((r10*x15765))+((sj3*x15758*x15760))+(((-1.0)*r12*sj3*x15773))+(((-1.0)*x15763*x15771))+(((-1.0)*sj3*x15759*x15772))+(((-1.0)*x15763*x15767))+((r11*x15764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15777=((1.0)*cj5);
CheckValue<IkReal> x15778 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15778.valid){
continue;
}
CheckValue<IkReal> x15779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15777)))),-1);
if(!x15779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15778.value)+(((1.5707963267949)*(x15779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15780=IKsin(j4);
IkReal x15781=IKcos(j4);
IkReal x15782=(r11*sj5);
IkReal x15783=(cj5*r10);
IkReal x15784=(sj1*sj2);
IkReal x15785=(cj5*sj3);
IkReal x15786=((1.0)*sj0);
IkReal x15787=(cj3*cj5);
IkReal x15788=(cj3*sj5);
IkReal x15789=(r21*sj5);
IkReal x15790=(cj2*sj1);
IkReal x15791=(sj3*sj5);
IkReal x15792=(r01*sj5);
IkReal x15793=((1.0)*cj0);
IkReal x15794=(cj1*sj2);
IkReal x15795=((1.0)*x15781);
IkReal x15796=((1.0)*x15780);
IkReal x15797=(cj3*x15781);
IkReal x15798=((1.0)*cj1*cj2);
IkReal x15799=(cj3*x15780);
evalcond[0]=((((-1.0)*r22*x15795))+(((-1.0)*cj5*r20*x15796))+((x15780*x15789)));
evalcond[1]=(cj0+(((-1.0)*x15783*x15796))+(((-1.0)*r12*x15795))+((x15780*x15782)));
evalcond[2]=((((-1.0)*cj5*r00*x15796))+(((-1.0)*r02*x15795))+((x15780*x15792))+(((-1.0)*x15786)));
evalcond[3]=(((r21*x15781*x15788))+(((-1.0)*r20*x15787*x15795))+((r21*x15785))+((r20*x15791))+x15794+x15790+((r22*x15799)));
evalcond[4]=(((r21*x15787))+(((-1.0)*r22*sj3*x15796))+(((-1.0)*x15798))+x15784+((r20*x15781*x15785))+(((-1.0)*sj3*x15789*x15795))+((r20*x15788)));
evalcond[5]=(((r01*x15781*x15788))+((r01*x15785))+((r02*x15799))+(((-1.0)*cj1*cj2*x15793))+((r00*x15791))+((cj0*x15784))+(((-1.0)*r00*x15787*x15795)));
evalcond[6]=((((-1.0)*cj1*cj2*x15786))+(((-1.0)*cj3*x15783*x15795))+((sj0*x15784))+((r10*x15791))+((x15782*x15797))+((r11*x15785))+((r12*x15799)));
evalcond[7]=(((r01*x15787))+((r00*x15788))+(((-1.0)*r02*sj3*x15796))+(((-1.0)*r01*x15791*x15795))+(((-1.0)*x15793*x15794))+((r00*x15781*x15785))+(((-1.0)*x15790*x15793)));
evalcond[8]=(((r10*x15788))+(((-1.0)*r12*sj3*x15796))+(((-1.0)*x15786*x15790))+(((-1.0)*x15786*x15794))+((sj3*x15781*x15783))+((r11*x15787))+(((-1.0)*sj3*x15782*x15795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15800=((1.0)*cj5);
CheckValue<IkReal> x15801=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15800))+(((-1.0)*r00*sj5)))),-1);
if(!x15801.valid){
continue;
}
CheckValue<IkReal> x15802 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15801.value)))+(x15802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15803=IKsin(j4);
IkReal x15804=IKcos(j4);
IkReal x15805=(r11*sj5);
IkReal x15806=(cj5*r10);
IkReal x15807=(sj1*sj2);
IkReal x15808=(cj5*sj3);
IkReal x15809=((1.0)*sj0);
IkReal x15810=(cj3*cj5);
IkReal x15811=(cj3*sj5);
IkReal x15812=(r21*sj5);
IkReal x15813=(cj2*sj1);
IkReal x15814=(sj3*sj5);
IkReal x15815=(r01*sj5);
IkReal x15816=((1.0)*cj0);
IkReal x15817=(cj1*sj2);
IkReal x15818=((1.0)*x15804);
IkReal x15819=((1.0)*x15803);
IkReal x15820=(cj3*x15804);
IkReal x15821=((1.0)*cj1*cj2);
IkReal x15822=(cj3*x15803);
evalcond[0]=((((-1.0)*cj5*r20*x15819))+(((-1.0)*r22*x15818))+((x15803*x15812)));
evalcond[1]=(cj0+((x15803*x15805))+(((-1.0)*x15806*x15819))+(((-1.0)*r12*x15818)));
evalcond[2]=((((-1.0)*x15809))+(((-1.0)*cj5*r00*x15819))+(((-1.0)*r02*x15818))+((x15803*x15815)));
evalcond[3]=((((-1.0)*r20*x15810*x15818))+((r21*x15808))+((r21*x15804*x15811))+((r22*x15822))+((r20*x15814))+x15813+x15817);
evalcond[4]=((((-1.0)*sj3*x15812*x15818))+(((-1.0)*x15821))+((r21*x15810))+((r20*x15804*x15808))+((r20*x15811))+x15807+(((-1.0)*r22*sj3*x15819)));
evalcond[5]=((((-1.0)*cj1*cj2*x15816))+((r02*x15822))+((cj0*x15807))+((r01*x15808))+(((-1.0)*r00*x15810*x15818))+((r01*x15804*x15811))+((r00*x15814)));
evalcond[6]=(((r10*x15814))+((x15805*x15820))+((r11*x15808))+(((-1.0)*cj3*x15806*x15818))+((sj0*x15807))+(((-1.0)*cj1*cj2*x15809))+((r12*x15822)));
evalcond[7]=((((-1.0)*x15813*x15816))+(((-1.0)*r01*x15814*x15818))+(((-1.0)*r02*sj3*x15819))+(((-1.0)*x15816*x15817))+((r00*x15804*x15808))+((r00*x15811))+((r01*x15810)));
evalcond[8]=((((-1.0)*r12*sj3*x15819))+((r11*x15810))+((sj3*x15804*x15806))+((r10*x15811))+(((-1.0)*sj3*x15805*x15818))+(((-1.0)*x15809*x15817))+(((-1.0)*x15809*x15813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15823=cj5*cj5;
IkReal x15824=r21*r21;
IkReal x15825=r20*r20;
IkReal x15826=(r20*r21);
IkReal x15827=((1.0)*cj3);
IkReal x15828=((1.0)*cj5);
IkReal x15829=(cj1*sj2);
IkReal x15830=(cj5*sj5);
IkReal x15831=(sj3*sj5);
IkReal x15832=(cj2*sj1);
IkReal x15833=(r21*sj5);
CheckValue<IkReal> x15834=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15824*x15827))+(((2.0)*cj3*x15826*x15830))+(((-1.0)*x15823*x15825*x15827))+(((-1.0)*x15827*(r22*r22)))+((cj3*x15823*x15824)))),-1);
if(!x15834.valid){
continue;
}
CheckValue<IkReal> x15835 = IKatan2WithCheck(IkReal((((r22*x15832))+((cj5*r21*r22*sj3))+((r22*x15829))+((r20*r22*x15831)))),IkReal(((((-1.0)*x15825*x15828*x15831))+((x15829*x15833))+((x15832*x15833))+(((-1.0)*r20*x15828*x15829))+((sj3*x15826))+(((-2.0)*sj3*x15823*x15826))+((sj3*x15824*x15830))+(((-1.0)*r20*x15828*x15832)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15834.value)))+(x15835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15836=IKsin(j4);
IkReal x15837=IKcos(j4);
IkReal x15838=(cj3*r21);
IkReal x15839=(r21*sj5);
IkReal x15840=(r20*sj5);
IkReal x15841=(cj5*r20);
IkReal x15842=((1.0)*x15837);
IkReal x15843=((1.0)*x15836);
evalcond[0]=((((-1.0)*x15841*x15843))+(((-1.0)*r22*x15842))+((x15836*x15839)));
evalcond[1]=(((cj2*sj1))+((sj5*x15837*x15838))+(((-1.0)*cj3*x15841*x15842))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15840))+((cj3*r22*x15836)));
evalcond[2]=((((-1.0)*sj3*x15839*x15842))+((cj5*x15838))+((sj3*x15837*x15841))+((cj3*x15840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15844=(cj5*sj4);
IkReal x15845=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15844))+((r01*x15845)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15844))+(((-1.0)*r11*x15845))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15844))+((r01*x15845))))+IKsqr((((r10*x15844))+(((-1.0)*r11*x15845))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15844))+((r01*x15845))), (((r10*x15844))+(((-1.0)*r11*x15845))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15846=IKcos(j0);
IkReal x15847=IKsin(j0);
IkReal x15848=(cj5*r01);
IkReal x15849=((1.0)*sj3);
IkReal x15850=(r12*sj4);
IkReal x15851=((1.0)*cj3);
IkReal x15852=(r11*sj5);
IkReal x15853=(cj3*cj4);
IkReal x15854=(r02*sj4);
IkReal x15855=(r01*sj5);
IkReal x15856=(r10*sj5);
IkReal x15857=(cj5*r11);
IkReal x15858=(r00*sj5);
IkReal x15859=((1.0)*cj2);
IkReal x15860=((0.5723)*sj2);
IkReal x15861=((1.0)*cj4);
IkReal x15862=((0.5723)*cj2);
IkReal x15863=(cj4*cj5*r00);
IkReal x15864=((1.0)*cj1*sj2);
IkReal x15865=(cj4*cj5*r10);
IkReal x15866=(sj1*x15846);
IkReal x15867=(cj1*x15847);
IkReal x15868=((1.0)*cj5*sj4);
IkReal x15869=(cj1*x15846);
IkReal x15870=(sj1*x15847);
evalcond[0]=(((sj4*x15852))+(((-1.0)*r10*x15868))+x15846+(((-1.0)*r12*x15861)));
evalcond[1]=(((sj4*x15855))+(((-1.0)*r00*x15868))+(((-1.0)*r02*x15861))+(((-1.0)*x15847)));
evalcond[2]=((((-0.163941)*x15847))+(((-1.0)*px))+(((-0.1157)*x15858))+(((-0.1157)*x15848))+((x15862*x15869))+(((-1.0)*x15860*x15866))+(((0.612)*x15869)));
evalcond[3]=((((-1.0)*x15860*x15870))+(((-1.0)*py))+(((-0.1157)*x15856))+(((-0.1157)*x15857))+((x15862*x15867))+(((0.163941)*x15846))+(((0.612)*x15867)));
evalcond[4]=((((-1.0)*x15859*x15869))+((cj3*x15854))+((sj2*x15866))+((x15853*x15855))+((sj3*x15858))+(((-1.0)*x15851*x15863))+((sj3*x15848)));
evalcond[5]=((((-1.0)*x15859*x15867))+((cj3*x15850))+((x15852*x15853))+((sj3*x15857))+((sj3*x15856))+(((-1.0)*x15851*x15865))+((sj2*x15870)));
evalcond[6]=((((-1.0)*x15859*x15866))+((cj3*x15858))+((sj3*x15863))+(((-1.0)*x15846*x15864))+((cj3*x15848))+(((-1.0)*x15849*x15854))+(((-1.0)*cj4*x15849*x15855)));
evalcond[7]=(((cj3*x15857))+((cj3*x15856))+((sj3*x15865))+(((-1.0)*x15847*x15864))+(((-1.0)*x15859*x15870))+(((-1.0)*x15849*x15850))+(((-1.0)*cj4*x15849*x15852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15871=cj5*cj5;
IkReal x15872=r21*r21;
IkReal x15873=r20*r20;
IkReal x15874=(r20*r21);
IkReal x15875=(sj1*sj2);
IkReal x15876=(r21*sj5);
IkReal x15877=(cj1*cj2);
IkReal x15878=(cj5*r20);
IkReal x15879=(cj5*sj5);
IkReal x15880=(cj3*r22);
IkReal x15881=(sj3*x15872);
CheckValue<IkReal> x15882=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15874*x15879))+((sj3*x15871*x15873))+x15881+(((-1.0)*x15871*x15881)))),-1);
if(!x15882.valid){
continue;
}
CheckValue<IkReal> x15883 = IKatan2WithCheck(IkReal((((r20*sj5*x15880))+((cj5*r21*x15880))+(((-1.0)*r22*x15877))+((r22*x15875)))),IkReal((((cj3*x15872*x15879))+((x15875*x15876))+((cj3*x15874))+(((-1.0)*cj3*x15873*x15879))+((x15877*x15878))+(((-2.0)*cj3*x15871*x15874))+(((-1.0)*x15876*x15877))+(((-1.0)*x15875*x15878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15882.value)))+(x15883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break;
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15884=IKsin(j4);
IkReal x15885=IKcos(j4);
IkReal x15886=(cj3*r21);
IkReal x15887=(r21*sj5);
IkReal x15888=(r20*sj5);
IkReal x15889=(cj5*r20);
IkReal x15890=((1.0)*x15885);
IkReal x15891=((1.0)*x15884);
evalcond[0]=((((-1.0)*x15889*x15891))+(((-1.0)*r22*x15890))+((x15884*x15887)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15885*x15886))+(((-1.0)*cj3*x15889*x15890))+((sj3*x15888))+((cj3*r22*x15884)));
evalcond[2]=(((sj3*x15885*x15889))+((cj3*x15888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15887*x15890))+(((-1.0)*r22*sj3*x15891))+((cj5*x15886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15892=(cj5*sj4);
IkReal x15893=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15893))+(((-1.0)*r00*x15892)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15892))+(((-1.0)*r11*x15893))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15893))+(((-1.0)*r00*x15892))))+IKsqr((((r10*x15892))+(((-1.0)*r11*x15893))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15893))+(((-1.0)*r00*x15892))), (((r10*x15892))+(((-1.0)*r11*x15893))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break;
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15894=IKcos(j0);
IkReal x15895=IKsin(j0);
IkReal x15896=(cj5*r01);
IkReal x15897=((1.0)*sj3);
IkReal x15898=(r12*sj4);
IkReal x15899=((1.0)*cj3);
IkReal x15900=(r11*sj5);
IkReal x15901=(cj3*cj4);
IkReal x15902=(r02*sj4);
IkReal x15903=(r01*sj5);
IkReal x15904=(r10*sj5);
IkReal x15905=(cj5*r11);
IkReal x15906=(r00*sj5);
IkReal x15907=((1.0)*cj2);
IkReal x15908=((0.5723)*sj2);
IkReal x15909=((1.0)*cj4);
IkReal x15910=((0.5723)*cj2);
IkReal x15911=(cj4*cj5*r00);
IkReal x15912=((1.0)*cj1*sj2);
IkReal x15913=(cj4*cj5*r10);
IkReal x15914=(sj1*x15894);
IkReal x15915=(cj1*x15895);
IkReal x15916=((1.0)*cj5*sj4);
IkReal x15917=(cj1*x15894);
IkReal x15918=(sj1*x15895);
evalcond[0]=((((-1.0)*r12*x15909))+(((-1.0)*r10*x15916))+((sj4*x15900))+x15894);
evalcond[1]=((((-1.0)*r02*x15909))+(((-1.0)*x15895))+((sj4*x15903))+(((-1.0)*r00*x15916)));
evalcond[2]=((((-0.163941)*x15895))+(((0.612)*x15917))+((x15910*x15917))+(((-1.0)*px))+(((-1.0)*x15908*x15914))+(((-0.1157)*x15896))+(((-0.1157)*x15906)));
evalcond[3]=((((0.612)*x15915))+((x15910*x15915))+(((-1.0)*py))+(((-1.0)*x15908*x15918))+(((-0.1157)*x15904))+(((-0.1157)*x15905))+(((0.163941)*x15894)));
evalcond[4]=((((-1.0)*x15907*x15917))+((sj3*x15906))+((sj2*x15914))+((x15901*x15903))+((sj3*x15896))+((cj3*x15902))+(((-1.0)*x15899*x15911)));
evalcond[5]=((((-1.0)*x15907*x15915))+((x15900*x15901))+((sj3*x15905))+((sj3*x15904))+((sj2*x15918))+((cj3*x15898))+(((-1.0)*x15899*x15913)));
evalcond[6]=((((-1.0)*x15894*x15912))+((sj3*x15911))+(((-1.0)*x15907*x15914))+(((-1.0)*x15897*x15902))+((cj3*x15896))+(((-1.0)*cj4*x15897*x15903))+((cj3*x15906)));
evalcond[7]=((((-1.0)*x15895*x15912))+((sj3*x15913))+(((-1.0)*x15907*x15918))+(((-1.0)*cj4*x15897*x15900))+(((-1.0)*x15897*x15898))+((cj3*x15904))+((cj3*x15905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10 (2dfe21c55533d00254ff7c09021198bd)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

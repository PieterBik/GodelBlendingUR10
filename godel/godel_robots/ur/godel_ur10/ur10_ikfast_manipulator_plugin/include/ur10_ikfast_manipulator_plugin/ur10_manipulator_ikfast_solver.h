/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-12-14 15:55:56.480050
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.1157)*x4);
x13=((0.5723)*x1);
x14=((0.1157)*x1);
x15=((1.0)*x10);
x16=((1.0)*x9);
x17=((0.0922)*x5);
x18=((1.0)*x5);
x19=((1.0)*x4);
x20=((1.0)*x1);
x21=((0.0922)*x6);
x22=(x0*x3);
x23=(x0*x1);
x24=(x11*x9);
x25=(x0*x2);
x26=(x11*x2);
x27=(x3*x4);
x28=(x0*x9);
x29=(x11*x3);
x30=(x11*x15);
x31=(x20*x3);
x32=(x25*x4);
x33=(x20*x22);
x34=(x20*x29);
x35=(((x1*x2))+x27);
x36=((((-1.0)*x19*x2))+x31);
x37=(x35*x5);
x38=(x36*x6);
x39=((((-1.0)*x33))+x32);
x40=((((-1.0)*x34))+((x26*x4)));
x41=(((x19*x22))+((x20*x25)));
x42=(((x19*x29))+((x20*x26)));
x43=(x40*x5);
x44=(x42*x6);
x45=(x41*x6);
x46=(((x36*x5))+((x6*(((((-1.0)*x19*x3))+(((-1.0)*x2*x20)))))));
x47=(x45+((x39*x5)));
x48=(x44+x43);
x49=(((x41*x5))+((x6*(((((-1.0)*x19*x25))+x33)))));
x50=(((x42*x5))+((x6*(((((-1.0)*x19*x26))+x34)))));
x51=(x48*x9);
eerot[0]=(((x7*(((((-1.0)*x30))+((x47*x9))))))+((x49*x8)));
eerot[1]=(((x8*(((((-1.0)*x16*x47))+x30))))+((x49*x7)));
eerot[2]=((((-1.0)*x11*x16))+((x10*(((((-1.0)*x18*x39))+(((-1.0)*x45)))))));
IkReal x52=((1.0)*x22);
eetrans[0]=((((-0.0922)*x24))+((x10*(((((-1.0)*x17*x39))+(((-1.0)*x21*x41))))))+(((-0.5723)*x32))+(((0.612)*x23))+(((-0.163941)*x11))+((x5*(((((-1.0)*x12*x52))+(((-1.0)*x14*x25))))))+((x13*x22))+((x6*(((((-1.0)*x14*x52))+((x12*x25)))))));
eerot[3]=(((x50*x8))+((x7*((((x0*x10))+x51)))));
eerot[4]=(((x50*x7))+((x8*(((((-1.0)*x0*x15))+(((-1.0)*x16*x48)))))));
eerot[5]=(x28+((x10*(((((-1.0)*x44))+(((-1.0)*x18*x40)))))));
IkReal x53=((1.0)*x29);
eetrans[1]=((((-0.5723)*x26*x4))+((x6*(((((-1.0)*x14*x53))+((x12*x26))))))+((x10*(((((-1.0)*x17*x40))+(((-1.0)*x21*x42))))))+((x5*(((((-1.0)*x12*x53))+(((-1.0)*x14*x26))))))+(((0.0922)*x28))+(((0.612)*x1*x11))+((x13*x29))+(((0.163941)*x0)));
eerot[6]=(((x7*x9*((x38+x37))))+((x46*x8)));
eerot[7]=(((x8*x9*(((((-1.0)*x37))+(((-1.0)*x38))))))+((x46*x7)));
eerot[8]=(x10*(((((-1.0)*x38))+(((-1.0)*x18*x35)))));
eetrans[2]=((0.1273)+(((-0.612)*x4))+((x5*(((((-1.0)*x14*x3))+((x12*x2))))))+((x6*((((x14*x2))+((x12*x3))))))+(((-0.5723)*x27))+((x10*(((((-1.0)*x17*x35))+(((-1.0)*x21*x36))))))+(((-1.0)*x13*x2)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0922)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0922)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.1273)+(((-0.0922)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x57=((0.2314)*npx);
IkReal x58=((0.2314)*npy);
IkReal x59=((0.1157)*r22);
IkReal x60=((0.1157)*r21);
IkReal x61=((-0.1157)*r20);
IkReal x62=((-1.0)*r20);
IkReal x63=((-1.0)*rxp0_2);
IkReal x64=((-0.1157)*r21);
IkReal x65=((-1.0)*r21);
IkReal x66=((-1.0)*rxp1_2);
IkReal x67=((-1.0)*npx);
IkReal x68=((-1.0)*r22);
IkReal x69=((-1.0)*npz);
matrixinvcoeffs[0]=x61;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x62;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x63;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x61;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x62;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x63;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x64;
matrixinvcoeffs[33]=x58;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x65;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x66;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x64;
matrixinvcoeffs[51]=x58;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x65;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x66;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x68;
matrixinvcoeffs[76]=x59;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x69;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x59;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x66;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x64;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x66;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x62;
matrixinvcoeffs[133]=x67;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1157)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x62;
matrixinvcoeffs[151]=x67;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x61;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x68;
matrixinvcoeffs[165]=x69;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x59;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x68;
matrixinvcoeffs[183]=x69;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1157)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x65;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x66;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x67;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x61;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x62;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x61;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x63;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x70=pz*pz;
IkReal x71=pp*pp;
IkReal x72=((0.2314)*pz);
IkReal x73=(pp*r21);
IkReal x74=((0.2314)*rxp0_2);
IkReal x75=((0.01338649)*r22);
IkReal x76=(gclwh9_0*pz);
IkReal x77=(gclwh4_3*r22);
IkReal x78=(pp*r20);
IkReal x79=((0.327882)*gclwh14_14);
IkReal x80=(npy*pz);
IkReal x81=((0.01338649)*r21);
IkReal x82=((0.26486044)*rxp0_2);
IkReal x83=((0.00219459455709)*r21);
IkReal x84=(npz*pz);
IkReal x85=(pp*r22);
IkReal x86=(gclwh15_1*r20);
IkReal x87=(gclwh14_8*r20);
IkReal x88=(gclwh13_9*r21);
IkReal x89=((0.27404702)*rxp2_2);
IkReal x90=((0.02677298)*r22);
IkReal x91=((2.0)*gclwh11_10);
IkReal x92=((0.26486044)*rxp2_2);
IkReal x93=(gclwh14_2*pz);
IkReal x94=(gclwh11_0*pz);
IkReal x95=((1.0)*pz);
IkReal x96=(gclwh5_15*rxp2_2);
IkReal x97=((0.00219459455709)*r20);
IkReal x98=((2.0)*gclwh4_11);
IkReal x99=((0.000201684224787892)*r20);
IkReal x100=((4.7372)*npx);
IkReal x101=(gclwh13_1*r21);
IkReal x102=((0.2314)*rxp2_2);
IkReal x103=(gclwh11_13*r22);
IkReal x104=((0.01338649)*r20);
IkReal x105=(npx*pz);
IkReal x106=((0.327882)*gclwh15_15);
IkReal x107=((0.327675509152703)*rxp0_2);
IkReal x108=((0.9256)*rxp2_2);
IkReal x109=((0.0379359474)*rxp1_2);
IkReal x110=(gclwh4_14*rxp2_2);
IkReal x111=(gclwh13_0*rxp1_2);
IkReal x112=(gclwh12_8*r21);
IkReal x113=(gclwh6_2*r21);
IkReal x114=(gclwh14_11*rxp0_2);
IkReal x115=((0.1517437896)*rxp1_2);
IkReal x116=((0.031707240214)*r22);
IkReal x117=((0.015322176454)*r22);
IkReal x118=((0.015322176454)*r20);
IkReal x119=((0.001062887306)*r22);
IkReal x120=((2.0)*gclwh9_10);
IkReal x121=(gclwh12_3*rxp1_2);
IkReal x122=((0.2832336)*rxp2_2);
IkReal x123=((0.02677298)*r20);
IkReal x124=(gclwh6_12*r21);
IkReal x125=(gclwh12_3*r21);
IkReal x126=(gclwh15_9*r20);
IkReal x127=((0.05354596)*r20);
IkReal x128=((0.02677298)*r21);
IkReal x129=((0.0379359474)*rxp0_2);
IkReal x130=(gclwh5_0*rxp2_2);
IkReal x131=((0.00918658)*rxp2_2);
IkReal x132=(gclwh4_3*rxp2_2);
IkReal x133=((0.031707240214)*r21);
IkReal x134=((2.0)*gclwh10_11);
IkReal x135=((4.0)*gclwh8_11);
IkReal x136=((2.0)*pp);
IkReal x137=((4.0)*gclwh11_10);
IkReal x138=(gclwh13_9*rxp1_2);
IkReal x139=((0.00918658)*rxp0_2);
IkReal x140=((0.015853620107)*r22);
IkReal x141=(gclwh7_13*r21);
IkReal x142=(gclwh1_2*pz);
IkReal x143=((2.0)*gclwh7_10);
IkReal x144=((0.030644352908)*r20);
IkReal x145=((0.2314)*rxp1_2);
IkReal x146=(gclwh5_1*rxp2_2);
IkReal x147=(gclwh12_2*rxp1_2);
IkReal x148=(gclwh15_0*pz);
IkReal x149=(gclwh15_9*rxp0_2);
IkReal x150=(gclwh4_2*rxp2_2);
IkReal x151=(gclwh5_9*r22);
IkReal x152=(gclwh12_8*rxp1_2);
IkReal x153=((0.4628)*rxp1_2);
IkReal x154=(gclwh7_13*rxp1_2);
IkReal x155=((0.26486044)*rxp1_2);
IkReal x156=(gclwh6_2*rxp1_2);
IkReal x157=((0.05354596)*r21);
IkReal x158=(gclwh8_2*pz);
IkReal x159=((0.05354596)*r22);
IkReal x160=((4.0)*gclwh9_10);
IkReal x161=(gclwh5_0*pz);
IkReal x162=((0.54809404)*rxp0_2);
IkReal x163=(gclwh4_2*pz);
IkReal x164=((0.015322176454)*r21);
IkReal x165=(gclwh9_0*r20);
IkReal x166=(gclwh15_15*rxp0_2);
IkReal x167=((4.0)*gclwh7_10);
IkReal x168=(gclwh10_2*pz);
IkReal x169=((0.327882)*gclwh12_14);
IkReal x170=(gclwh10_12*r22);
IkReal x171=(gclwh13_1*rxp1_2);
IkReal x172=((0.4628)*rxp0_2);
IkReal x173=(gclwh13_0*pz);
IkReal x174=((0.0189560282044839)*r20);
IkReal x175=((0.031707240214)*r20);
IkReal x176=(gclwh8_12*r20);
IkReal x177=((2.0)*gclwh6_11);
IkReal x178=((2.2892)*npx);
IkReal x179=(gclwh2_1*r21);
IkReal x180=((2.0)*gclwh12_11);
IkReal x181=((0.00438918911418)*r21);
IkReal x182=(gclwh14_14*rxp0_2);
IkReal x183=((0.27404702)*rxp0_2);
IkReal x184=((0.327882)*gclwh5_15);
IkReal x185=((0.0379359474)*rxp2_2);
IkReal x186=((2.0)*gclwh8_11);
IkReal x187=((4.0)*gclwh10_11);
IkReal x188=(gclwh3_3*r21);
IkReal x189=(gclwh9_13*r20);
IkReal x190=(gclwh5_1*r22);
IkReal x191=((0.00438918911418)*r22);
IkReal x192=((2.0)*gclwh5_10);
IkReal x193=(gclwh6_12*rxp1_2);
IkReal x194=((2.0)*gclwh15_10);
IkReal x195=((0.0758718948)*rxp1_2);
IkReal x196=((0.327882)*gclwh4_14);
IkReal x197=((0.00438918911418)*r20);
IkReal x198=((0.4628)*rxp2_2);
IkReal x199=((4.0)*gclwh6_11);
IkReal x200=((0.327882)*gclwh13_15);
IkReal x201=((0.01837316)*rxp0_2);
IkReal x202=((0.9256)*rxp1_2);
IkReal x203=((2.0)*gclwh13_10);
IkReal x204=((0.0034863305927034)*rxp0_2);
IkReal x205=((0.00219459455709)*r22);
IkReal x206=(gclwh14_8*rxp0_2);
IkReal x207=(gclwh4_8*r22);
IkReal x208=((0.02677298)*rxp2_2);
IkReal x209=((2.0)*gclwh14_11);
IkReal x210=(gclwh14_14*x129);
IkReal x211=(gclwh6_5*x83);
IkReal x212=(gclwh10_5*x205);
IkReal x213=(gclwh12_14*x109);
IkReal x214=(gclwh8_5*x97);
IkReal x215=((0.0379359474)*x110);
IkReal x216=(gclwh4_11*x102);
IkReal x217=(gclwh12_11*x145);
IkReal x218=(gclwh6_11*x81);
IkReal x219=(gclwh4_8*x208);
IkReal x220=((0.02677298)*x152);
IkReal x221=(gclwh14_11*x74);
IkReal x222=(gclwh10_11*x75);
IkReal x223=(gclwh8_11*x104);
IkReal x224=((0.02677298)*x206);
IkReal x225=(gclwh11_10*x75);
IkReal x226=(gclwh9_10*x104);
IkReal x227=((0.02677298)*x138);
IkReal x228=(gclwh15_10*x74);
IkReal x229=(gclwh5_9*x208);
IkReal x230=(gclwh5_10*x102);
IkReal x231=(gclwh13_10*x145);
IkReal x232=((0.02677298)*x149);
IkReal x233=(gclwh7_10*x81);
IkReal x234=(gclwh15_15*x129);
IkReal x235=(gclwh7_7*x83);
IkReal x236=(gclwh9_7*x97);
IkReal x237=((0.0379359474)*x96);
IkReal x238=(gclwh13_15*x109);
IkReal x239=(gclwh11_7*x205);
IkReal x240=(gclwh8_5*x129);
IkReal x241=(gclwh14_14*x97);
IkReal x242=(gclwh10_5*x185);
IkReal x243=(gclwh4_14*x205);
IkReal x244=(gclwh6_5*x109);
IkReal x245=(gclwh12_14*x83);
IkReal x246=(gclwh4_11*x75);
IkReal x247=(gclwh12_11*x81);
IkReal x248=((0.001548816893)*x112);
IkReal x249=(gclwh8_11*x74);
IkReal x250=((0.001548816893)*x207);
IkReal x251=(gclwh10_11*x102);
IkReal x252=(gclwh14_11*x104);
IkReal x253=(gclwh6_11*x145);
IkReal x254=((0.001548816893)*x87);
IkReal x255=(gclwh5_10*x75);
IkReal x256=((0.001548816893)*x126);
IkReal x257=(gclwh9_10*x74);
IkReal x258=(gclwh11_10*x102);
IkReal x259=(gclwh13_10*x81);
IkReal x260=((0.001548816893)*x151);
IkReal x261=((0.001548816893)*x88);
IkReal x262=(gclwh7_10*x145);
IkReal x263=(gclwh15_10*x104);
IkReal x264=(gclwh7_7*x109);
IkReal x265=(gclwh5_15*x205);
IkReal x266=(gclwh13_15*x83);
IkReal x267=(gclwh9_7*x129);
IkReal x268=(gclwh11_7*x185);
IkReal x269=(gclwh15_15*x97);
IkReal x270=((0.4628)*x114);
IkReal x271=(gclwh10_11*x90);
IkReal x272=(gclwh8_11*x123);
IkReal x273=((0.0758718948)*x182);
IkReal x274=((0.0758718948)*x110);
IkReal x275=(gclwh12_14*x195);
IkReal x276=(gclwh4_11*x198);
IkReal x277=(gclwh6_11*x128);
IkReal x278=(gclwh12_11*x153);
IkReal x279=(gclwh13_15*x195);
IkReal x280=((0.0758718948)*x96);
IkReal x281=((0.0758718948)*x166);
IkReal x282=(gclwh15_10*x172);
IkReal x283=(gclwh11_10*x90);
IkReal x284=(gclwh9_10*x123);
IkReal x285=(gclwh13_10*x153);
IkReal x286=(gclwh7_10*x128);
IkReal x287=(gclwh5_10*x198);
IkReal x288=(gclwh6_11*x153);
IkReal x289=(gclwh14_11*x123);
IkReal x290=(gclwh14_14*x197);
IkReal x291=(gclwh4_14*x191);
IkReal x292=(gclwh12_14*x181);
IkReal x293=(pp*x145);
IkReal x294=((2.0)*x70);
IkReal x295=((1.0)*x71);
IkReal x296=(r20*x71);
IkReal x297=((0.163941)*gclwh6_5*x73);
IkReal x298=((0.327882)*gclwh10_5*x84);
IkReal x299=((0.327882)*gclwh8_5*x105);
IkReal x300=((0.163941)*gclwh10_5*x85);
IkReal x301=((0.327882)*gclwh6_5*x80);
IkReal x302=((0.163941)*gclwh8_5*x78);
IkReal x303=(gclwh14_2*rxp0_2*x72);
IkReal x304=((0.2314)*pp*x121);
IkReal x305=(x168*x75);
IkReal x306=(x134*x84);
IkReal x307=(x105*x186);
IkReal x308=(x168*x85);
IkReal x309=(gclwh4_3*pp*x102);
IkReal x310=(x158*x78);
IkReal x311=(x104*x158);
IkReal x312=(x177*x80);
IkReal x313=(gclwh14_3*pp*x74);
IkReal x314=(x150*x72);
IkReal x315=(x147*x72);
IkReal x316=(gclwh6_2*pz*x81);
IkReal x317=(x75*x94);
IkReal x318=(gclwh13_1*x293);
IkReal x319=(gclwh15_0*rxp0_2*x72);
IkReal x320=(gclwh5_1*pp*x102);
IkReal x321=(x104*x76);
IkReal x322=(x85*x94);
IkReal x323=(x143*x80);
IkReal x324=(x76*x78);
IkReal x325=(gclwh7_0*pz*x81);
IkReal x326=(x84*x91);
IkReal x327=(x111*x72);
IkReal x328=(x105*x120);
IkReal x329=(gclwh15_1*pp*x74);
IkReal x330=(x130*x72);
IkReal x331=((0.327882)*gclwh11_7*x84);
IkReal x332=((0.163941)*gclwh7_7*x73);
IkReal x333=((0.327882)*gclwh9_7*x105);
IkReal x334=((0.163941)*gclwh11_7*x85);
IkReal x335=((0.327882)*gclwh7_7*x80);
IkReal x336=((0.163941)*gclwh9_7*x78);
IkReal x337=((0.163941)*gclwh14_14*x78);
IkReal x338=(x169*x80);
IkReal x339=(x196*x84);
IkReal x340=((0.163941)*gclwh12_14*x73);
IkReal x341=((0.163941)*gclwh4_14*x85);
IkReal x342=(x105*x79);
IkReal x343=(x78*x93);
IkReal x344=((0.1157)*gclwh4_8*x85);
IkReal x345=(x156*x72);
IkReal x346=(x125*x71);
IkReal x347=(x104*x142);
IkReal x348=((0.1157)*gclwh12_8*x73);
IkReal x349=(x104*x93);
IkReal x350=(gclwh14_8*npx*x72);
IkReal x351=(x188*x71);
IkReal x352=(gclwh1_3*x296);
IkReal x353=(x105*x209);
IkReal x354=(gclwh3_2*pz*x81);
IkReal x355=(x71*x77);
IkReal x356=(gclwh12_2*pz*x81);
IkReal x357=(x84*x98);
IkReal x358=(gclwh12_8*npy*x72);
IkReal x359=(gclwh10_2*rxp2_2*x72);
IkReal x360=(x163*x75);
IkReal x361=(gclwh4_8*npz*x72);
IkReal x362=(x180*x80);
IkReal x363=((0.1157)*gclwh14_8*x78);
IkReal x364=(gclwh8_2*rxp0_2*x72);
IkReal x365=(gclwh2_0*pz*x81);
IkReal x366=(x71*x86);
IkReal x367=(gclwh11_0*rxp2_2*x72);
IkReal x368=(x161*x85);
IkReal x369=(x173*x73);
IkReal x370=(gclwh0_0*pz*x104);
IkReal x371=(gclwh5_9*npz*x72);
IkReal x372=(x161*x75);
IkReal x373=(x173*x81);
IkReal x374=(gclwh13_9*npy*x72);
IkReal x375=((0.1157)*gclwh15_9*x78);
IkReal x376=(x105*x194);
IkReal x377=(gclwh9_0*rxp0_2*x72);
IkReal x378=(x179*x71);
IkReal x379=(gclwh0_1*x296);
IkReal x380=((0.1157)*gclwh5_9*x85);
IkReal x381=(x192*x84);
IkReal x382=((0.1157)*gclwh13_9*x73);
IkReal x383=(x203*x80);
IkReal x384=(gclwh7_0*rxp1_2*x72);
IkReal x385=(gclwh15_9*npx*x72);
IkReal x386=(x104*x148);
IkReal x387=((0.163941)*gclwh13_15*x73);
IkReal x388=((0.163941)*gclwh5_15*x85);
IkReal x389=(x105*x106);
IkReal x390=(x200*x80);
IkReal x391=((0.163941)*gclwh15_15*x78);
IkReal x392=(x184*x84);
IkReal x393=(x186*x78);
IkReal x394=(x134*x85);
IkReal x395=(x199*x80);
IkReal x396=(x105*x135);
IkReal x397=(x177*x73);
IkReal x398=(x187*x84);
IkReal x399=(x85*x91);
IkReal x400=(x167*x80);
IkReal x401=(x120*x78);
IkReal x402=(x143*x73);
IkReal x403=(x105*x160);
IkReal x404=(x137*x84);
IkReal x405=(x209*x78);
IkReal x406=((4.0)*gclwh12_11*x80);
IkReal x407=((4.0)*gclwh4_11*x84);
IkReal x408=(x78*x79);
IkReal x409=((0.655764)*gclwh12_14*x80);
IkReal x410=((0.655764)*gclwh4_14*x84);
IkReal x411=((0.655764)*gclwh14_14*x105);
IkReal x412=(x169*x73);
IkReal x413=(x196*x85);
IkReal x414=(gclwh6_2*npy*x294);
IkReal x415=(gclwh6_2*x73*x95);
IkReal x416=(gclwh10_2*npz*x294);
IkReal x417=(gclwh8_2*npx*x294);
IkReal x418=(gclwh7_0*npy*x294);
IkReal x419=(gclwh9_0*npx*x294);
IkReal x420=(gclwh11_0*npz*x294);
IkReal x421=(gclwh7_0*x73*x95);
IkReal x422=(gclwh12_2*npy*x294);
IkReal x423=(gclwh3_2*npy*x294);
IkReal x424=(gclwh1_2*npx*x294);
IkReal x425=(gclwh14_3*x105*x136);
IkReal x426=(gclwh4_2*npz*x294);
IkReal x427=(gclwh4_3*x136*x84);
IkReal x428=(gclwh12_2*x73*x95);
IkReal x429=(gclwh1_2*x78*x95);
IkReal x430=(gclwh3_3*x136*x80);
IkReal x431=(gclwh4_2*x85*x95);
IkReal x432=(gclwh1_3*x105*x136);
IkReal x433=(gclwh3_2*x73*x95);
IkReal x434=(gclwh12_3*x136*x80);
IkReal x435=(gclwh14_2*npx*x294);
IkReal x436=(gclwh14_3*r20*x295);
IkReal x437=(gclwh0_0*npx*x294);
IkReal x438=(gclwh2_0*npy*x294);
IkReal x439=(gclwh5_1*x136*x84);
IkReal x440=(gclwh13_1*x136*x80);
IkReal x441=(gclwh15_0*npx*x294);
IkReal x442=(gclwh2_1*x136*x80);
IkReal x443=(gclwh0_1*x105*x136);
IkReal x444=(gclwh5_0*npz*x294);
IkReal x445=(gclwh13_0*npy*x294);
IkReal x446=(gclwh0_0*x78*x95);
IkReal x447=(gclwh15_0*x78*x95);
IkReal x448=(gclwh2_0*x73*x95);
IkReal x449=(x101*x295);
IkReal x450=(x190*x295);
IkReal x451=(gclwh15_1*x105*x136);
IkReal x452=(x238+x237);
IkReal x453=(x267+x268);
IkReal x454=(x274+x275);
IkReal x455=(x279+x280);
IkReal x456=(x213+x215);
IkReal x457=(x242+x240);
IkReal x458=(x312+x221+x223+x222);
IkReal x459=(x323+x228+x225+x226);
IkReal x460=(x357+x362+x252+x253);
IkReal x461=(x383+x381+x263+x262);
IkReal x462=(x333+x332+x331+x235);
IkReal x463=(x391+x390+x392+x269);
IkReal x464=(x211+x298+x299+x297);
IkReal x465=(x290+x409+x408+x410);
IkReal x466=(x339+x338+x337+x241);
IkReal x467=(x353+x251+x247+x246+x249);
IkReal x468=(x376+x258+x259+x255+x257);
IkReal x469=(x326+x328+x233+x230+x231);
IkReal x470=(x306+x307+x216+x217+x218);
IkReal x471=(x387+x388+x389+x265+x266);
IkReal x472=(x336+x335+x334+x239+x236);
IkReal x473=(x302+x300+x301+x212+x214);
IkReal x474=(x289+x288+x405+x407+x406);
IkReal x475=(x291+x292+x412+x413+x411);
IkReal x476=(x342+x340+x341+x243+x245);
IkReal x477=(x397+x396+x398+x276+x277+x278);
IkReal x478=(x287+x286+x285+x403+x402+x404);
IkReal x479=(x399+x284+x283+x282+x401+x400);
IkReal x480=(x395+x394+x393+x272+x270+x271);
IkReal x481=(((gclwh10_11*x198))+(((4.0)*gclwh14_11*x105))+((x180*x73))+((x85*x98))+((gclwh4_11*x90))+((gclwh8_11*x172))+((gclwh12_11*x128)));
IkReal x482=(x330+x325+x327+x329+x232+x419+x421+x420);
IkReal x483=(x315+x314+x316+x313+x224+x416+x417+x415);
IkReal x484=(x308+x309+x304+x305+x303+x311+x310+x219+x220+x414);
IkReal x485=(x324+x320+x321+x322+x319+x318+x317+x229+x227+x418);
IkReal x486=(x386+x384+x385+x382+x380+x261+x260+x449+x448+x445+x444+x447+x446+x443+x442+x450+x451);
IkReal x487=(x351+x350+x352+x355+x354+x343+x346+x347+x344+x345+x348+x349+x250+x248+x426+x425+x424+x423+x422+x72);
IkReal x488=(x356+x359+x358+x360+x361+x363+x364+x254+x429+x428+x427+x430+x431+x432+x433+x434+x435+x436);
IkReal x489=(x379+x378+x377+x375+x374+x373+x372+x371+x370+x368+x369+x365+x366+x367+x256+x438+x439+x437+x441+x440+x72);
op[0]=((((-1.1843)*gclwh10_12*x85))+(((-2.3686)*gclwh6_12*x80))+(((-0.27404702)*x152))+(((-1.0)*x473))+(((0.015853620107)*x124))+(((-1.0)*gclwh4_8*x89))+(((2.3686)*gclwh8_12*x105))+x456+x464+(((-1.1843)*gclwh8_12*x78))+(((1.1843)*gclwh6_12*x73))+((gclwh14_8*x183))+(((2.3686)*gclwh10_12*x84))+(((-0.015853620107)*x176))+(((-1.0)*x210))+(((-1.0)*gclwh10_12*x140)));
op[1]=((((-1.0)*x483))+(((-0.327675509152703)*x121))+((gclwh14_3*x107))+(((-1.0)*x470))+(((-0.327675509152703)*x132))+x484+x458+(((-1.0)*gclwh6_11*x73))+((gclwh8_11*x78))+((gclwh10_11*x85)));
op[2]=((-0.3752937372)+(((-1.0)*x477))+x480);
op[3]=((((-2.2892)*gclwh8_2*x105))+(((-1.1446)*gclwh6_2*x73))+(((-1.0)*gclwh4_2*x92))+((gclwh8_2*x118))+(((0.2832336)*x152))+(((1.1446)*gclwh8_2*x78))+(((-0.015322176454)*x113))+(((-1.0)*x454))+x273+(((-0.26486044)*x147))+((gclwh14_2*x82))+(((-2.2892)*gclwh10_2*x84))+(((2.2892)*gclwh6_2*x80))+(((1.1446)*gclwh10_2*x85))+((gclwh10_2*x117))+((gclwh4_8*x122))+(((-0.2832336)*x206)));
op[4]=((((-1.0)*gclwh14_8*x139))+(((-0.0397)*gclwh8_12*x78))+(((0.0397)*gclwh6_12*x73))+(((0.0794)*gclwh8_12*x105))+(((0.000531443653)*x124))+(((0.00918658)*x152))+(((-0.000531443653)*x176))+(((-0.000531443653)*x170))+(((-1.0)*x473))+(((-1.0)*x456))+x210+(((-0.0397)*gclwh10_12*x85))+x464+(((-0.0794)*gclwh6_12*x80))+((gclwh4_8*x131))+(((0.0794)*gclwh10_12*x84)));
op[5]=(((gclwh6_11*x73))+(((-1.0)*x483))+(((-1.0)*gclwh10_11*x85))+(((-1.0)*x458))+x484+x470+((gclwh14_3*x204))+(((-0.0034863305927034)*x132))+(((-0.0034863305927034)*x121))+(((-1.0)*gclwh8_11*x78)));
op[6]=(((gclwh7_10*x73))+(((-1.0)*x482))+((gclwh15_1*x107))+(((-0.327675509152703)*x146))+(((-1.0)*x459))+x485+x469+(((-0.327675509152703)*x171))+(((-1.0)*gclwh9_10*x78))+(((-1.0)*gclwh11_10*x85)));
op[7]=((((-1.1843)*gclwh9_13*x78))+(((-0.015853620107)*x103))+(((-1.0)*x472))+(((-1.0)*gclwh5_9*x89))+(((-1.0)*x234))+(((0.015853620107)*x141))+(((0.27404702)*x149))+x452+x462+(((2.3686)*gclwh11_13*x84))+(((-0.015853620107)*x189))+(((-1.1843)*gclwh11_13*x85))+(((1.1843)*gclwh7_13*x73))+(((-0.27404702)*x138))+(((-2.3686)*gclwh7_13*x80))+(((2.3686)*gclwh9_13*x105)));
op[8]=((((-0.26486044)*x111))+(((-1.1446)*gclwh7_0*x73))+(((1.1446)*gclwh11_0*x85))+(((-1.0)*gclwh5_9*x122))+((gclwh15_0*x82))+(((0.2832336)*x149))+((gclwh11_0*x117))+(((-1.0)*x178*x76))+(((-0.2832336)*x138))+(((-1.0)*gclwh7_0*x164))+x455+(((2.2892)*gclwh7_0*x80))+(((-1.0)*x281))+((gclwh9_0*x118))+(((1.1446)*gclwh9_0*x78))+(((-2.2892)*gclwh11_0*x84))+(((-1.0)*gclwh5_0*x92)));
op[9]=((-0.3752937372)+(((-1.0)*x478))+x479);
op[10]=((((-1.0)*x482))+(((-1.0)*x469))+(((-1.0)*gclwh7_10*x73))+(((-0.0034863305927034)*x146))+x485+x459+((gclwh15_1*x204))+(((-0.0034863305927034)*x171))+((gclwh11_10*x85))+((gclwh9_10*x78)));
op[11]=((((0.0794)*gclwh9_13*x105))+(((0.0397)*gclwh7_13*x73))+((gclwh5_9*x131))+(((-1.0)*x472))+(((0.00918658)*x138))+(((-0.000531443653)*x103))+(((-0.000531443653)*x189))+(((-1.0)*x452))+x234+(((-0.0397)*gclwh11_13*x85))+(((0.0794)*gclwh11_13*x84))+x462+(((0.000531443653)*x141))+(((-0.0794)*gclwh7_13*x80))+(((-1.0)*gclwh15_9*x139))+(((-0.0397)*gclwh9_13*x78)));
op[12]=((((-1.0)*gclwh4_8*x140))+(((-0.015853620107)*x112))+(((-1.1843)*gclwh12_8*x73))+(((0.015853620107)*x87))+(((-0.27404702)*x193))+(((-1.0)*x466))+((gclwh10_12*x89))+(((2.3686)*gclwh12_8*x80))+((gclwh8_12*x183))+x457+x476+(((-1.0)*x244))+(((-1.1843)*gclwh4_8*x85))+(((2.3686)*gclwh4_8*x84))+(((-2.3686)*gclwh14_8*x105))+(((1.1843)*gclwh14_8*x78)));
op[13]=((-1.429443141481)+(((-0.0189560282044839)*x77))+(((0.0189560282044839)*x188))+(((-1.429443141481)*gclwh1_3*x78))+(((-1.0)*x488))+(((-1.0)*gclwh4_11*x85))+(((-2.832113302962)*gclwh14_3*x105))+(((2.832113302962)*gclwh4_3*x84))+(((2.832113302962)*gclwh12_3*x80))+(((1.402670161481)*gclwh14_3*x78))+(((-1.0)*x467))+(((2.832113302962)*gclwh1_3*x105))+(((-1.0)*gclwh12_11*x73))+x487+x460+(((-1.402670161481)*gclwh12_3*x73))+((gclwh14_11*x78))+((gclwh1_3*x174))+(((2.832113302962)*gclwh3_3*x80))+(((-1.429443141481)*gclwh3_3*x73))+(((-0.0189560282044839)*x125))+((gclwh14_3*x174))+(((-1.402670161481)*pp*x77)));
op[14]=((-0.147786722962)+(((-1.0)*x481))+x474);
op[15]=((((-1.0)*x178*x93))+(((2.2892)*gclwh4_2*x84))+(((-1.0)*gclwh12_2*x164))+(((0.01638506376)*x207))+(((-1.1446)*gclwh4_2*x85))+(((-1.0)*gclwh8_2*x82))+(((2.2892)*gclwh3_2*x80))+(((-1.0)*gclwh4_2*x117))+(((-0.01638506376)*x87))+(((1.1446)*gclwh14_2*x78))+((gclwh14_2*x118))+(((-1.0)*x475))+(((-2.448)*gclwh4_8*x84))+(((-1.0)*gclwh10_2*x92))+(((1.224)*gclwh4_8*x85))+x465+(((2.2892)*gclwh1_2*x105))+(((2.448)*gclwh14_8*x105))+(((-1.1446)*gclwh12_2*x73))+((gclwh1_2*x118))+(((-1.224)*gclwh14_8*x78))+(((1.224)*gclwh12_8*x73))+(((2.2892)*gclwh12_2*x80))+((gclwh3_2*x164))+((gclwh6_2*x155))+(((-1.1446)*gclwh3_2*x73))+(((0.01638506376)*x112))+(((-2.448)*gclwh12_8*x80))+(((-1.1446)*gclwh1_2*x78)));
op[16]=(((gclwh8_12*x139))+(((0.0397)*gclwh12_8*x73))+(((-0.0794)*gclwh12_8*x80))+(((0.0794)*gclwh14_8*x105))+(((-1.0)*x476))+(((0.000531443653)*x207))+((gclwh10_12*x131))+(((0.000531443653)*x112))+x457+x466+(((-0.0397)*gclwh14_8*x78))+(((-1.0)*x244))+(((-0.000531443653)*x87))+(((-0.0794)*gclwh4_8*x84))+(((-0.00918658)*x193))+(((0.0397)*gclwh4_8*x85)));
op[17]=((0.028452741481)+(((-0.028452741481)*gclwh1_3*x78))+(((0.030132502962)*gclwh12_3*x80))+(((-0.000201684224787892)*x125))+(((-1.0)*x488))+(((0.030132502962)*gclwh3_3*x80))+(((0.000201684224787892)*x188))+((gclwh12_11*x73))+(((-1.0)*x460))+((gclwh4_11*x85))+(((-0.030132502962)*gclwh14_3*x105))+(((-0.001679761481)*gclwh12_3*x73))+x487+x467+(((0.001679761481)*gclwh14_3*x78))+((gclwh1_3*x99))+((gclwh14_3*x99))+(((-0.028452741481)*gclwh3_3*x73))+(((-0.001679761481)*pp*x77))+(((-0.000201684224787892)*x77))+(((-1.0)*gclwh14_11*x78))+(((0.030132502962)*gclwh4_3*x84))+(((0.030132502962)*gclwh1_3*x105)));
op[18]=((1.429443141481)+(((2.832113302962)*gclwh2_1*x80))+(((0.0189560282044839)*x190))+(((-1.0)*gclwh13_10*x73))+(((-1.402670161481)*gclwh15_1*x78))+(((-0.0189560282044839)*x86))+(((0.0189560282044839)*x179))+(((-1.0)*gclwh5_10*x85))+(((-1.0)*x486))+(((1.402670161481)*gclwh5_1*x85))+(((2.832113302962)*gclwh15_1*x105))+(((-1.429443141481)*gclwh2_1*x73))+(((0.0189560282044839)*x101))+(((-1.0)*x468))+(((-1.429443141481)*gclwh0_1*x78))+x489+x461+(((2.832113302962)*gclwh0_1*x105))+(((1.402670161481)*gclwh13_1*x73))+((gclwh15_10*x78))+((gclwh0_1*x174))+(((-2.832113302962)*gclwh13_1*x80))+(((-2.832113302962)*gclwh5_1*x84)));
op[19]=(((gclwh5_9*x140))+(((1.1843)*gclwh13_9*x73))+(((-0.015853620107)*x126))+(((2.3686)*gclwh15_9*x105))+(((-2.3686)*gclwh13_9*x80))+(((-1.1843)*gclwh15_9*x78))+(((0.015853620107)*x88))+(((-1.0)*x471))+(((1.1843)*gclwh5_9*x85))+(((-1.0)*gclwh11_13*x89))+(((-2.3686)*gclwh5_9*x84))+(((-1.0)*gclwh9_13*x183))+(((0.27404702)*x154))+(((-1.0)*x453))+x264+x463);
op[20]=((((0.655764)*gclwh13_15*x80))+(((-1.1446)*gclwh0_0*x78))+((gclwh0_0*x118))+(((1.224)*gclwh5_9*x85))+((gclwh13_0*x164))+((gclwh2_0*x164))+((x106*x78))+(((1.224)*gclwh13_9*x73))+(((-0.01638506376)*x126))+(((0.01638506376)*x151))+(((-2.448)*gclwh5_9*x84))+(((-1.0)*gclwh15_0*x118))+(((0.01638506376)*x88))+(((-0.655764)*gclwh15_15*x105))+(((-1.224)*gclwh15_9*x78))+(((2.2892)*gclwh15_0*x105))+(((-1.0)*x200*x73))+(((2.2892)*gclwh2_0*x80))+(((-2.2892)*gclwh13_0*x80))+(((-1.1446)*gclwh2_0*x73))+(((-1.0)*x184*x85))+(((1.1446)*gclwh13_0*x73))+(((-2.448)*gclwh13_9*x80))+(((2.2892)*gclwh0_0*x105))+(((1.1446)*gclwh5_0*x85))+(((-1.0)*gclwh7_0*x155))+((gclwh11_0*x92))+(((-1.0)*gclwh13_15*x181))+(((-1.1446)*gclwh15_0*x78))+(((0.655764)*gclwh5_15*x84))+(((2.448)*gclwh15_9*x105))+((gclwh15_15*x197))+((gclwh9_0*x82))+(((-2.2892)*gclwh5_0*x84))+((gclwh5_0*x117))+(((-1.0)*gclwh5_15*x191)));
op[21]=((-0.147786722962)+((gclwh5_10*x90))+(((-4.0)*gclwh5_10*x84))+((gclwh11_10*x198))+((gclwh9_10*x172))+((x203*x73))+(((-1.0)*x194*x78))+((x192*x85))+((gclwh13_10*x128))+(((4.0)*gclwh15_10*x105))+(((-1.0)*gclwh7_10*x153))+(((-1.0)*gclwh15_10*x123))+(((-4.0)*gclwh13_10*x80)));
op[22]=((-0.028452741481)+(((-0.030132502962)*gclwh5_1*x84))+(((0.000201684224787892)*x101))+(((-0.030132502962)*gclwh13_1*x80))+((gclwh5_10*x85))+(((0.000201684224787892)*x179))+(((-1.0)*x486))+(((0.000201684224787892)*x190))+((gclwh13_10*x73))+((gclwh0_1*x99))+(((-1.0)*x461))+(((-0.001679761481)*gclwh15_1*x78))+x489+x468+(((0.030132502962)*gclwh15_1*x105))+(((-0.028452741481)*gclwh0_1*x78))+(((0.030132502962)*gclwh2_1*x80))+(((-0.000201684224787892)*x86))+(((-0.028452741481)*gclwh2_1*x73))+(((0.001679761481)*gclwh13_1*x73))+(((0.001679761481)*gclwh5_1*x85))+(((0.030132502962)*gclwh0_1*x105))+(((-1.0)*gclwh15_10*x78)));
op[23]=((((-1.0)*gclwh11_13*x131))+(((-0.000531443653)*x151))+(((0.0794)*gclwh13_9*x80))+(((0.000531443653)*x126))+(((-0.0794)*gclwh15_9*x105))+(((0.00918658)*x154))+(((-0.0397)*gclwh13_9*x73))+(((-1.0)*x463))+(((0.0794)*gclwh5_9*x84))+(((-1.0)*x453))+x264+x471+(((-1.0)*gclwh9_13*x139))+(((-0.000531443653)*x88))+(((0.0397)*gclwh15_9*x78))+(((-0.0397)*gclwh5_9*x85)));
op[24]=((-0.7766213052)+(((-1.0)*x477))+x480);
op[25]=((((4.7372)*gclwh6_2*x80))+((gclwh8_2*x175))+(((-0.031707240214)*x113))+(((2.3686)*gclwh10_2*x85))+(((-1.0)*x454))+x273+(((-2.3686)*gclwh6_2*x73))+((gclwh14_2*x162))+(((2.3686)*gclwh8_2*x78))+(((-0.54809404)*x150))+(((-1.0)*x100*x158))+(((-4.7372)*gclwh10_2*x84))+(((-0.54809404)*x147))+((gclwh10_2*x116)));
op[26]=((((2.2892)*gclwh8_12*x78))+(((0.030644352908)*x170))+(((4.5784)*gclwh6_12*x80))+(((2.2892)*gclwh10_12*x85))+(((-0.030644352908)*x124))+(((0.1517437896)*x182))+(((-1.0)*gclwh12_14*x115))+(((-4.5784)*gclwh8_12*x105))+(((-4.5784)*gclwh10_12*x84))+(((-0.1517437896)*x110))+((gclwh8_12*x144))+(((-2.2892)*gclwh6_12*x73)));
op[27]=((((-1.0)*gclwh8_11*x127))+(((-8.0)*gclwh6_11*x80))+(((-1.0)*x135*x78))+((gclwh4_11*x108))+(((-0.9256)*x114))+(((-1.0)*gclwh10_11*x159))+((gclwh12_11*x202))+(((8.0)*gclwh10_11*x84))+(((-1.0)*x187*x85))+(((8.0)*gclwh8_11*x105))+((x199*x73))+((gclwh6_11*x157)));
op[28]=((-0.0260338308)+(((-1.0)*x480))+x477);
op[29]=((((0.0794)*gclwh10_2*x85))+(((0.1588)*gclwh6_2*x80))+(((0.0794)*gclwh8_2*x78))+(((-0.01837316)*x147))+(((-0.0794)*gclwh6_2*x73))+(((-0.01837316)*x150))+x454+(((-0.1588)*gclwh10_2*x84))+((gclwh14_2*x201))+(((-1.0)*x273))+(((0.001062887306)*gclwh8_2*r20))+(((-0.1588)*gclwh8_2*x105))+(((-0.001062887306)*x113))+((gclwh10_2*x119)));
op[30]=((((-0.54809404)*x111))+(((-1.0)*gclwh7_0*x133))+(((2.3686)*gclwh11_0*x85))+(((-0.54809404)*x130))+(((-4.7372)*gclwh11_0*x84))+(((-2.3686)*gclwh7_0*x73))+((gclwh11_0*x116))+(((2.3686)*gclwh9_0*x78))+((gclwh15_0*x162))+x455+(((4.7372)*gclwh7_0*x80))+(((-1.0)*x281))+(((-1.0)*x100*x76))+(((0.031707240214)*x165)));
op[31]=((-0.7766213052)+(((-1.0)*x478))+x479);
op[32]=(((x160*x78))+((x137*x85))+(((-8.0)*gclwh9_10*x105))+((gclwh11_10*x159))+(((-1.0)*gclwh13_10*x202))+(((8.0)*gclwh7_10*x80))+(((-1.0)*gclwh7_10*x157))+(((-8.0)*gclwh11_10*x84))+(((-1.0)*x167*x73))+(((0.9256)*gclwh15_10*rxp0_2))+((gclwh9_10*x127))+(((-1.0)*gclwh5_10*x108)));
op[33]=((((-1.0)*gclwh13_15*x115))+(((-0.1517437896)*x96))+(((-0.030644352908)*x141))+(((0.030644352908)*x103))+(((2.2892)*gclwh9_13*x78))+(((0.1517437896)*x166))+(((-4.5784)*gclwh11_13*x84))+(((4.5784)*gclwh7_13*x80))+((gclwh9_13*x144))+(((-4.5784)*gclwh9_13*x105))+(((-2.2892)*gclwh7_13*x73))+(((2.2892)*gclwh11_13*x85)));
op[34]=((((-0.0794)*gclwh7_0*x73))+(((-0.01837316)*x111))+(((-0.001062887306)*gclwh7_0*r21))+(((-0.1588)*npx*x76))+(((0.0794)*gclwh9_0*x78))+(((-0.1588)*gclwh11_0*x84))+((gclwh11_0*x119))+(((0.0794)*gclwh11_0*x85))+(((-1.0)*x455))+x281+(((0.001062887306)*x165))+((gclwh15_0*x201))+(((0.1588)*gclwh7_0*x80))+(((-0.01837316)*x130)));
op[35]=((-0.0260338308)+(((-1.0)*x479))+x478);
op[36]=((2.751379677038)+(((-1.0)*x481))+x474);
op[37]=((((4.7372)*gclwh4_2*x84))+((gclwh1_2*x175))+(((-2.3686)*gclwh1_2*x78))+((gclwh3_2*x133))+(((-1.0)*gclwh4_2*x116))+((x100*x142))+(((-1.0)*gclwh12_2*x133))+(((-1.0)*x475))+(((-2.3686)*gclwh4_2*x85))+(((4.7372)*gclwh3_2*x80))+(((0.54809404)*x156))+x465+(((2.3686)*gclwh14_2*x78))+(((-2.3686)*gclwh3_2*x73))+(((-1.0)*x100*x93))+((gclwh14_2*x175))+(((-2.3686)*gclwh12_2*x73))+(((-0.54809404)*gclwh10_2*rxp2_2))+(((4.7372)*gclwh12_2*x80))+(((-1.0)*gclwh8_2*x162)));
IkReal x490=pz*pz;
IkReal x491=pp*pp;
IkReal x492=((0.2314)*pz);
IkReal x493=(pp*r21);
IkReal x494=((0.2314)*rxp0_2);
IkReal x495=((0.01338649)*r22);
IkReal x496=(gclwh9_0*pz);
IkReal x497=(gclwh4_3*r22);
IkReal x498=(pp*r20);
IkReal x499=((0.327882)*gclwh14_14);
IkReal x500=(npy*pz);
IkReal x501=((0.655764)*gclwh12_14);
IkReal x502=((0.01338649)*r21);
IkReal x503=((4.0)*gclwh12_11);
IkReal x504=((0.26486044)*rxp0_2);
IkReal x505=((0.01837316)*rxp1_2);
IkReal x506=((0.00219459455709)*r21);
IkReal x507=(npz*pz);
IkReal x508=(gclwh15_1*r20);
IkReal x509=(gclwh14_8*r20);
IkReal x510=(gclwh13_9*r21);
IkReal x511=(pp*r22);
IkReal x512=((0.27404702)*rxp2_2);
IkReal x513=(npx*pz);
IkReal x514=((0.02677298)*r22);
IkReal x515=((2.0)*gclwh11_10);
IkReal x516=((0.26486044)*rxp2_2);
IkReal x517=(gclwh14_2*pz);
IkReal x518=(gclwh11_0*pz);
IkReal x519=((0.001062887306)*r20);
IkReal x520=((0.0379359474)*rxp1_2);
IkReal x521=((0.00219459455709)*r20);
IkReal x522=((2.0)*gclwh4_11);
IkReal x523=((0.000201684224787892)*r20);
IkReal x524=(gclwh13_1*r21);
IkReal x525=((0.2314)*rxp2_2);
IkReal x526=(gclwh11_13*r22);
IkReal x527=((0.01338649)*r20);
IkReal x528=((0.327882)*gclwh15_15);
IkReal x529=(gclwh12_8*r21);
IkReal x530=((0.655764)*gclwh14_14);
IkReal x531=(gclwh2_0*pz);
IkReal x532=((0.655764)*gclwh5_15);
IkReal x533=((0.015322176454)*r22);
IkReal x534=(gclwh15_0*r20);
IkReal x535=((2.0)*gclwh9_10);
IkReal x536=(gclwh12_3*rxp1_2);
IkReal x537=((2.0)*gclwh15_10);
IkReal x538=(gclwh15_10*r20);
IkReal x539=((4.0)*gclwh14_11);
IkReal x540=(gclwh12_3*r21);
IkReal x541=((0.655764)*gclwh15_15);
IkReal x542=((0.02677298)*r21);
IkReal x543=((0.0379359474)*rxp0_2);
IkReal x544=(gclwh11_13*rxp2_2);
IkReal x545=((0.05354596)*r22);
IkReal x546=(gclwh4_3*rxp2_2);
IkReal x547=(gclwh12_14*r21);
IkReal x548=((2.0)*gclwh10_11);
IkReal x549=((2.0)*pp);
IkReal x550=(gclwh13_9*rxp1_2);
IkReal x551=((0.0758718948)*rxp2_2);
IkReal x552=(gclwh14_8*rxp0_2);
IkReal x553=((0.015853620107)*r22);
IkReal x554=((0.001062887306)*r22);
IkReal x555=(gclwh7_13*r21);
IkReal x556=(gclwh1_2*pz);
IkReal x557=((2.0)*gclwh7_10);
IkReal x558=((1.0)*pz);
IkReal x559=((0.2314)*rxp1_2);
IkReal x560=(gclwh13_0*pz);
IkReal x561=((4.0)*gclwh15_10);
IkReal x562=(gclwh5_1*rxp2_2);
IkReal x563=(gclwh12_2*pz);
IkReal x564=(gclwh15_0*pz);
IkReal x565=((0.9256)*rxp0_2);
IkReal x566=(gclwh15_9*rxp0_2);
IkReal x567=((0.0189560282044839)*r21);
IkReal x568=(gclwh5_9*r22);
IkReal x569=(gclwh12_8*rxp1_2);
IkReal x570=((0.4628)*rxp1_2);
IkReal x571=(gclwh7_13*rxp1_2);
IkReal x572=((0.327882)*gclwh5_15);
IkReal x573=((0.26486044)*rxp1_2);
IkReal x574=(gclwh6_2*pz);
IkReal x575=(gclwh8_2*pz);
IkReal x576=(gclwh5_0*pz);
IkReal x577=((0.015322176454)*r20);
IkReal x578=(gclwh4_2*pz);
IkReal x579=(gclwh6_12*r21);
IkReal x580=(gclwh11_0*rxp2_2);
IkReal x581=((0.00918658)*rxp2_2);
IkReal x582=(gclwh13_0*r21);
IkReal x583=((0.0758718948)*rxp0_2);
IkReal x584=(gclwh10_2*pz);
IkReal x585=((0.001062887306)*r21);
IkReal x586=((0.015322176454)*r21);
IkReal x587=(gclwh10_11*rxp2_2);
IkReal x588=((0.327882)*gclwh12_14);
IkReal x589=((4.0)*gclwh4_11);
IkReal x590=(gclwh13_1*rxp1_2);
IkReal x591=((0.327675509152703)*rxp0_2);
IkReal x592=((0.4628)*rxp0_2);
IkReal x593=((0.0189560282044839)*r20);
IkReal x594=(gclwh8_12*r20);
IkReal x595=((2.0)*gclwh6_11);
IkReal x596=(gclwh8_12*rxp0_2);
IkReal x597=((2.0)*gclwh12_11);
IkReal x598=((0.9256)*rxp1_2);
IkReal x599=(gclwh9_13*rxp0_2);
IkReal x600=((0.0379359474)*rxp2_2);
IkReal x601=(gclwh5_15*r22);
IkReal x602=((0.05354596)*r21);
IkReal x603=((0.655764)*gclwh13_15);
IkReal x604=(gclwh13_15*r21);
IkReal x605=((0.02677298)*r20);
IkReal x606=((2.0)*gclwh8_11);
IkReal x607=((0.000201684224787892)*r21);
IkReal x608=((0.000531443653)*r20);
IkReal x609=((4.0)*gclwh5_10);
IkReal x610=(gclwh5_1*r22);
IkReal x611=((2.0)*gclwh5_10);
IkReal x612=(gclwh6_12*rxp1_2);
IkReal x613=((0.2832336)*rxp2_2);
IkReal x614=((4.0)*gclwh13_10);
IkReal x615=((0.0758718948)*rxp1_2);
IkReal x616=((0.327882)*gclwh4_14);
IkReal x617=((0.00438918911418)*r20);
IkReal x618=((0.4628)*rxp2_2);
IkReal x619=((0.000531443653)*r22);
IkReal x620=((0.327882)*gclwh13_15);
IkReal x621=((2.0)*gclwh13_10);
IkReal x622=(gclwh4_14*r22);
IkReal x623=(gclwh15_9*r20);
IkReal x624=((0.0034863305927034)*rxp0_2);
IkReal x625=((0.00219459455709)*r22);
IkReal x626=((0.655764)*gclwh4_14);
IkReal x627=(gclwh7_0*pz);
IkReal x628=((0.00877837822836)*r20);
IkReal x629=((0.01837316)*rxp0_2);
IkReal x630=(gclwh4_8*r22);
IkReal x631=((0.02677298)*rxp2_2);
IkReal x632=((2.0)*gclwh14_11);
IkReal x633=((0.00438918911418)*x604);
IkReal x634=((0.00438918911418)*x601);
IkReal x635=(gclwh15_15*x617);
IkReal x636=((0.02677298)*x538);
IkReal x637=(gclwh7_10*x570);
IkReal x638=(gclwh11_10*x618);
IkReal x639=(gclwh9_10*x592);
IkReal x640=(gclwh13_10*x542);
IkReal x641=(gclwh5_10*x514);
IkReal x642=(gclwh12_14*x520);
IkReal x643=(gclwh6_5*x506);
IkReal x644=(gclwh4_14*x600);
IkReal x645=(gclwh10_5*x625);
IkReal x646=(gclwh14_14*x543);
IkReal x647=(gclwh8_5*x521);
IkReal x648=(gclwh14_11*x494);
IkReal x649=(gclwh10_11*x495);
IkReal x650=(gclwh4_8*x631);
IkReal x651=(gclwh8_11*x527);
IkReal x652=((0.02677298)*x569);
IkReal x653=(gclwh4_11*x525);
IkReal x654=(gclwh12_11*x559);
IkReal x655=(gclwh6_11*x502);
IkReal x656=((0.02677298)*x552);
IkReal x657=(gclwh5_10*x525);
IkReal x658=(gclwh13_10*x559);
IkReal x659=((0.02677298)*x550);
IkReal x660=(gclwh5_9*x631);
IkReal x661=(gclwh7_10*x502);
IkReal x662=(gclwh11_10*x495);
IkReal x663=(gclwh9_10*x527);
IkReal x664=(gclwh15_10*x494);
IkReal x665=((0.02677298)*x566);
IkReal x666=(gclwh5_15*x600);
IkReal x667=(gclwh13_15*x520);
IkReal x668=(gclwh7_7*x506);
IkReal x669=(gclwh9_7*x521);
IkReal x670=(gclwh11_7*x625);
IkReal x671=(gclwh15_15*x543);
IkReal x672=(gclwh4_11*x514);
IkReal x673=((0.4628)*x587);
IkReal x674=(gclwh8_11*x592);
IkReal x675=(gclwh12_11*x542);
IkReal x676=((0.00438918911418)*x622);
IkReal x677=((0.00438918911418)*x547);
IkReal x678=(gclwh14_14*x617);
IkReal x679=(gclwh8_5*x543);
IkReal x680=((0.00219459455709)*x622);
IkReal x681=(gclwh12_14*x506);
IkReal x682=(gclwh10_5*x600);
IkReal x683=(gclwh14_14*x521);
IkReal x684=(gclwh6_5*x520);
IkReal x685=(gclwh14_11*x527);
IkReal x686=((0.001548816893)*x529);
IkReal x687=(gclwh6_11*x559);
IkReal x688=((0.001548816893)*x630);
IkReal x689=(gclwh4_11*x495);
IkReal x690=(gclwh12_11*x502);
IkReal x691=(gclwh8_11*x494);
IkReal x692=(gclwh10_11*x525);
IkReal x693=((0.001548816893)*x509);
IkReal x694=((0.001548816893)*x623);
IkReal x695=(gclwh7_10*x559);
IkReal x696=(gclwh15_10*x527);
IkReal x697=((0.001548816893)*x568);
IkReal x698=(gclwh5_10*x495);
IkReal x699=((0.001548816893)*x510);
IkReal x700=(gclwh9_10*x494);
IkReal x701=(gclwh11_10*x525);
IkReal x702=(gclwh13_10*x502);
IkReal x703=(gclwh7_7*x520);
IkReal x704=(gclwh15_15*x521);
IkReal x705=(gclwh9_7*x543);
IkReal x706=(gclwh11_7*x600);
IkReal x707=((0.00219459455709)*x601);
IkReal x708=(gclwh13_15*x506);
IkReal x709=(pp*x559);
IkReal x710=((2.0)*x490);
IkReal x711=((1.0)*x491);
IkReal x712=(r20*x491);
IkReal x713=(r21*x491);
IkReal x714=(x513*x541);
IkReal x715=(x511*x572);
IkReal x716=(x493*x620);
IkReal x717=(x498*x528);
IkReal x718=(x507*x532);
IkReal x719=(x500*x603);
IkReal x720=(x498*x537);
IkReal x721=(x507*x609);
IkReal x722=(x500*x614);
IkReal x723=(x493*x621);
IkReal x724=(x513*x561);
IkReal x725=(x511*x611);
IkReal x726=((0.163941)*gclwh6_5*x493);
IkReal x727=((0.327882)*gclwh10_5*x507);
IkReal x728=((0.327882)*gclwh8_5*x513);
IkReal x729=((0.163941)*gclwh10_5*x511);
IkReal x730=((0.327882)*gclwh6_5*x500);
IkReal x731=((0.163941)*gclwh8_5*x498);
IkReal x732=(gclwh14_2*rxp0_2*x492);
IkReal x733=((0.2314)*pp*x536);
IkReal x734=(x495*x584);
IkReal x735=(x500*x595);
IkReal x736=(x511*x584);
IkReal x737=(gclwh4_3*pp*x525);
IkReal x738=(x498*x575);
IkReal x739=(x527*x575);
IkReal x740=(x507*x548);
IkReal x741=(gclwh14_3*pp*x494);
IkReal x742=(gclwh4_2*rxp2_2*x492);
IkReal x743=(gclwh12_2*rxp1_2*x492);
IkReal x744=(x513*x606);
IkReal x745=(x502*x574);
IkReal x746=(x495*x518);
IkReal x747=(gclwh13_1*x709);
IkReal x748=(x507*x515);
IkReal x749=(x513*x535);
IkReal x750=(gclwh15_0*rxp0_2*x492);
IkReal x751=(gclwh5_1*pp*x525);
IkReal x752=(x496*x527);
IkReal x753=(x511*x518);
IkReal x754=(x496*x498);
IkReal x755=(x502*x627);
IkReal x756=(gclwh13_0*rxp1_2*x492);
IkReal x757=(gclwh15_1*pp*x494);
IkReal x758=(gclwh5_0*rxp2_2*x492);
IkReal x759=(x500*x557);
IkReal x760=((0.327882)*gclwh11_7*x507);
IkReal x761=((0.163941)*gclwh7_7*x493);
IkReal x762=((0.327882)*gclwh9_7*x513);
IkReal x763=((0.163941)*gclwh11_7*x511);
IkReal x764=((0.327882)*gclwh7_7*x500);
IkReal x765=((0.163941)*gclwh9_7*x498);
IkReal x766=(x511*x522);
IkReal x767=(x493*x597);
IkReal x768=(x513*x539);
IkReal x769=(x513*x530);
IkReal x770=(x493*x588);
IkReal x771=(x511*x616);
IkReal x772=(x498*x499);
IkReal x773=(x500*x501);
IkReal x774=(x507*x626);
IkReal x775=((0.163941)*gclwh12_14*x493);
IkReal x776=((0.163941)*gclwh4_14*x511);
IkReal x777=(x499*x513);
IkReal x778=((0.163941)*gclwh14_14*x498);
IkReal x779=(x500*x588);
IkReal x780=(x507*x616);
IkReal x781=(x498*x517);
IkReal x782=((0.1157)*gclwh4_8*x511);
IkReal x783=(gclwh6_2*rxp1_2*x492);
IkReal x784=(x491*x540);
IkReal x785=(x527*x556);
IkReal x786=((0.1157)*gclwh12_8*x493);
IkReal x787=(x507*x522);
IkReal x788=(x517*x527);
IkReal x789=(gclwh14_8*npx*x492);
IkReal x790=(gclwh3_3*x713);
IkReal x791=(gclwh1_3*x712);
IkReal x792=(gclwh3_2*pz*x502);
IkReal x793=(x491*x497);
IkReal x794=(x500*x597);
IkReal x795=(x502*x563);
IkReal x796=(gclwh12_8*npy*x492);
IkReal x797=(gclwh10_2*rxp2_2*x492);
IkReal x798=(x513*x632);
IkReal x799=(x495*x578);
IkReal x800=(gclwh4_8*npz*x492);
IkReal x801=((0.1157)*gclwh14_8*x498);
IkReal x802=(gclwh8_2*rxp0_2*x492);
IkReal x803=(x502*x531);
IkReal x804=(x491*x508);
IkReal x805=(x492*x580);
IkReal x806=(x511*x576);
IkReal x807=(x493*x560);
IkReal x808=(gclwh0_0*pz*x527);
IkReal x809=(gclwh5_9*npz*x492);
IkReal x810=(x495*x576);
IkReal x811=(x502*x560);
IkReal x812=(gclwh13_9*npy*x492);
IkReal x813=((0.1157)*gclwh15_9*x498);
IkReal x814=(gclwh9_0*rxp0_2*x492);
IkReal x815=(gclwh2_1*x713);
IkReal x816=(x507*x611);
IkReal x817=(x500*x621);
IkReal x818=(gclwh0_1*x712);
IkReal x819=((0.1157)*gclwh5_9*x511);
IkReal x820=(x513*x537);
IkReal x821=((0.1157)*gclwh13_9*x493);
IkReal x822=(gclwh7_0*rxp1_2*x492);
IkReal x823=(gclwh15_9*npx*x492);
IkReal x824=(x527*x564);
IkReal x825=(x500*x620);
IkReal x826=((0.163941)*gclwh15_15*x498);
IkReal x827=(x507*x572);
IkReal x828=((0.163941)*gclwh13_15*x493);
IkReal x829=((0.163941)*gclwh5_15*x511);
IkReal x830=(x513*x528);
IkReal x831=(gclwh6_2*npy*x710);
IkReal x832=(gclwh6_2*x493*x558);
IkReal x833=(gclwh10_2*npz*x710);
IkReal x834=(gclwh8_2*npx*x710);
IkReal x835=(gclwh7_0*npy*x710);
IkReal x836=(gclwh9_0*npx*x710);
IkReal x837=(gclwh11_0*npz*x710);
IkReal x838=(gclwh7_0*x493*x558);
IkReal x839=(gclwh12_2*npy*x710);
IkReal x840=(gclwh3_2*npy*x710);
IkReal x841=(gclwh1_2*npx*x710);
IkReal x842=(gclwh14_3*x513*x549);
IkReal x843=(gclwh4_2*npz*x710);
IkReal x844=(gclwh4_3*x507*x549);
IkReal x845=(gclwh12_2*x493*x558);
IkReal x846=((1.0)*x498*x556);
IkReal x847=(gclwh3_3*x500*x549);
IkReal x848=(gclwh4_2*x511*x558);
IkReal x849=(gclwh1_3*x513*x549);
IkReal x850=(gclwh3_2*x493*x558);
IkReal x851=(gclwh12_3*x500*x549);
IkReal x852=(gclwh14_2*npx*x710);
IkReal x853=(gclwh14_3*r20*x711);
IkReal x854=(gclwh0_0*npx*x710);
IkReal x855=(gclwh2_0*npy*x710);
IkReal x856=(gclwh5_1*x507*x549);
IkReal x857=(gclwh13_1*x500*x549);
IkReal x858=(gclwh15_0*npx*x710);
IkReal x859=(gclwh2_1*x500*x549);
IkReal x860=(gclwh0_1*x513*x549);
IkReal x861=(gclwh5_0*npz*x710);
IkReal x862=(gclwh13_0*npy*x710);
IkReal x863=(gclwh0_0*x498*x558);
IkReal x864=(gclwh15_0*x498*x558);
IkReal x865=((1.0)*x493*x531);
IkReal x866=(x524*x711);
IkReal x867=(x610*x711);
IkReal x868=(gclwh15_1*x513*x549);
IkReal x869=(x667+x666);
IkReal x870=(x706+x705);
IkReal x871=(x644+x642);
IkReal x872=(x679+x682);
IkReal x873=(x663+x662+x664+x759);
IkReal x874=(x649+x648+x651+x735);
IkReal x875=(x687+x685+x794+x787);
IkReal x876=(x695+x696+x816+x817);
IkReal x877=(x668+x760+x761+x762);
IkReal x878=(x635+x719+x718+x717);
IkReal x879=(x704+x827+x826+x825);
IkReal x880=(x683+x779+x778+x780);
IkReal x881=(x678+x773+x772+x774);
IkReal x882=(x643+x726+x727+x728);
IkReal x883=(x689+x690+x691+x692+x798);
IkReal x884=(x698+x702+x700+x701+x820);
IkReal x885=(x657+x658+x661+x748+x749);
IkReal x886=(x653+x654+x655+x744+x740);
IkReal x887=(((x500*x503))+((gclwh6_11*x570))+((x498*x632))+((gclwh14_11*x605))+((x507*x589)));
IkReal x888=(x669+x670+x764+x765+x763);
IkReal x889=(x634+x633+x715+x714+x716);
IkReal x890=(x708+x707+x829+x828+x830);
IkReal x891=(x647+x645+x731+x730+x729);
IkReal x892=(x676+x677+x771+x770+x769);
IkReal x893=(x636+x637+x720+x721+x722);
IkReal x894=(x681+x680+x777+x776+x775);
IkReal x895=(x641+x640+x638+x639+x723+x724+x725);
IkReal x896=(x672+x673+x674+x675+x768+x766+x767);
IkReal x897=(x665+x755+x757+x756+x758+x836+x837+x838);
IkReal x898=(x656+x745+x742+x743+x741+x834+x832+x833);
IkReal x899=(x659+x660+x754+x751+x750+x753+x752+x746+x747+x835);
IkReal x900=(x650+x652+x737+x736+x734+x733+x732+x739+x738+x831);
IkReal x901=(x697+x699+x859+x868+x867+x866+x865+x864+x863+x862+x861+x860+x819+x823+x822+x821+x824);
IkReal x902=(x492+x688+x686+x791+x790+x793+x792+x782+x783+x781+x786+x784+x785+x788+x789+x839+x841+x840+x843+x842);
IkReal x903=(x693+x795+x797+x796+x799+x852+x853+x850+x851+x845+x844+x847+x846+x849+x848+x801+x800+x802);
IkReal x904=(x492+x694+x856+x857+x854+x855+x858+x818+x814+x815+x812+x813+x810+x811+x809+x808+x805+x804+x807+x806+x803);
op[38]=((((-1.0)*x511*x626))+(((1.311528)*gclwh12_14*x500))+(((1.311528)*gclwh4_14*x507))+(((0.52972088)*x612))+(((-0.00877837822836)*x622))+(((-0.52972088)*x596))+(((-0.52972088)*gclwh10_12*rxp2_2))+((gclwh14_14*x628))+(((-1.0)*x493*x501))+((x498*x530))+(((-0.00877837822836)*x547))+(((-1.311528)*gclwh14_14*x513)));
op[39]=((-0.080560234076)+(((8.0)*gclwh14_11*x513))+(((-0.05354596)*gclwh14_11*r20))+((gclwh12_11*x602))+((x511*x589))+(((-1.0)*gclwh6_11*x598))+((x493*x503))+(((-8.0)*gclwh4_11*x507))+(((-1.0)*x498*x539))+(((-8.0)*gclwh12_11*x500))+((gclwh8_11*x565))+((gclwh4_11*x545))+(((0.9256)*x587)));
op[40]=((0.050601122962)+(((-1.0)*x887))+x896);
op[41]=((((-0.0794)*gclwh1_2*x498))+(((0.0794)*gclwh14_2*x498))+(((-1.0)*gclwh8_2*x629))+(((0.1588)*gclwh4_2*x507))+(((-0.0794)*gclwh3_2*x493))+(((0.1588)*gclwh3_2*x500))+((gclwh6_2*x505))+(((-1.0)*gclwh12_2*x585))+(((-1.0)*x881))+((gclwh14_2*x519))+((gclwh1_2*x519))+(((0.1588)*gclwh12_2*x500))+(((-0.01837316)*gclwh10_2*rxp2_2))+(((-0.0794)*gclwh4_2*x511))+(((-1.0)*gclwh4_2*x554))+(((0.1588)*gclwh1_2*x513))+x892+(((-0.0794)*gclwh12_2*x493))+((gclwh3_2*x585))+(((-0.1588)*gclwh14_2*x513)));
op[42]=((((4.7372)*gclwh15_0*x513))+(((0.031707240214)*gclwh0_0*r20))+(((4.7372)*gclwh2_0*x500))+(((2.3686)*gclwh13_0*x493))+(((-2.3686)*gclwh0_0*x498))+(((-2.3686)*gclwh15_0*x498))+(((0.54809404)*gclwh9_0*rxp0_2))+(((0.031707240214)*x582))+(((-4.7372)*gclwh13_0*x500))+(((0.54809404)*x580))+(((-0.031707240214)*x534))+(((-1.0)*x889))+(((-4.7372)*gclwh5_0*x507))+(((4.7372)*gclwh0_0*x513))+(((-2.3686)*gclwh2_0*x493))+(((0.031707240214)*gclwh5_0*r22))+(((2.3686)*gclwh5_0*x511))+(((0.031707240214)*gclwh2_0*r21))+x878+(((-0.54809404)*gclwh7_0*rxp1_2)));
op[43]=((2.751379677038)+(((-1.0)*x893))+x895);
op[44]=((0.080560234076)+(((-1.0)*x498*x561))+(((-0.05354596)*x538))+(((-8.0)*gclwh5_10*x507))+(((-8.0)*gclwh13_10*x500))+((gclwh5_10*x545))+((gclwh9_10*x565))+(((-1.0)*gclwh7_10*x598))+((gclwh13_10*x602))+((x511*x609))+(((8.0)*gclwh15_10*x513))+(((0.9256)*gclwh11_10*rxp2_2))+((x493*x614)));
op[45]=(((x493*x603))+(((-0.52972088)*x571))+(((-1.311528)*gclwh5_15*x507))+(((1.311528)*gclwh15_15*x513))+(((0.00877837822836)*x601))+(((0.00877837822836)*x604))+(((0.52972088)*x599))+(((-1.0)*gclwh15_15*x628))+(((-1.311528)*gclwh13_15*x500))+(((-1.0)*x498*x541))+((x511*x532))+(((0.52972088)*x544)));
op[46]=((((0.01837316)*x580))+(((0.001062887306)*x582))+(((-1.0)*gclwh15_0*x519))+((gclwh0_0*x519))+(((0.0794)*gclwh5_0*x511))+(((-0.0794)*gclwh15_0*x498))+(((0.0794)*gclwh13_0*x493))+(((-0.0794)*gclwh2_0*x493))+(((0.1588)*gclwh0_0*x513))+(((-1.0)*gclwh7_0*x505))+((gclwh2_0*x585))+((gclwh5_0*x554))+(((-0.1588)*gclwh13_0*x500))+((gclwh9_0*x629))+x889+(((0.1588)*gclwh2_0*x500))+(((-0.1588)*gclwh5_0*x507))+(((-0.0794)*gclwh0_0*x498))+(((0.1588)*gclwh15_0*x513))+(((-1.0)*x878)));
op[47]=((0.050601122962)+(((-1.0)*x895))+x893);
op[48]=((((-0.27404702)*x569))+(((-2.3686)*gclwh10_12*x507))+(((1.1843)*gclwh8_12*x498))+(((0.27404702)*x552))+((gclwh10_12*x553))+(((-1.0)*gclwh4_8*x512))+(((-1.0)*x891))+(((2.3686)*gclwh6_12*x500))+(((1.1843)*gclwh10_12*x511))+(((-1.1843)*gclwh6_12*x493))+x646+(((-0.015853620107)*x579))+x882+(((0.015853620107)*x594))+(((-2.3686)*gclwh8_12*x513))+(((-1.0)*x871)));
op[49]=((((-1.0)*x898))+(((-1.0)*gclwh8_11*x498))+((gclwh6_11*x493))+((gclwh14_3*x591))+(((-1.0)*gclwh10_11*x511))+(((-0.327675509152703)*x536))+x886+(((-0.327675509152703)*x546))+x900+(((-1.0)*x874)));
op[50]=((0.3752937372)+((gclwh6_11*x542))+(((-1.0)*gclwh10_11*x514))+((x493*x595))+(((-1.0)*x511*x548))+(((-4.0)*gclwh6_11*x500))+((gclwh12_11*x570))+(((-1.0)*x498*x606))+(((4.0)*gclwh10_11*x507))+(((-1.0)*gclwh8_11*x605))+((gclwh4_11*x618))+(((-1.0)*gclwh14_11*x592))+(((4.0)*gclwh8_11*x513)));
op[51]=((((1.1446)*gclwh6_2*x493))+(((-1.0)*gclwh14_2*x504))+(((-1.0)*gclwh14_14*x583))+(((-1.1446)*gclwh8_2*x498))+(((-1.0)*gclwh8_2*x577))+(((-1.0)*gclwh10_2*x533))+((gclwh4_8*x613))+(((-0.2832336)*x552))+(((0.2832336)*x569))+((gclwh4_2*x516))+(((-1.1446)*gclwh10_2*x511))+((gclwh4_14*x551))+(((-2.2892)*gclwh6_2*x500))+(((2.2892)*gclwh8_2*x513))+((gclwh6_2*x586))+((gclwh12_14*x615))+((gclwh12_2*x573))+(((2.2892)*gclwh10_2*x507)));
op[52]=((((0.00918658)*x569))+(((-0.0794)*gclwh8_12*x513))+((gclwh4_8*x581))+(((-0.0397)*gclwh6_12*x493))+(((0.0397)*gclwh8_12*x498))+(((0.0794)*gclwh6_12*x500))+(((-1.0)*x891))+(((-0.00918658)*x552))+(((-0.000531443653)*x579))+(((-1.0)*x646))+x871+x882+(((0.0397)*gclwh10_12*x511))+(((-0.0794)*gclwh10_12*x507))+(((0.000531443653)*x594))+((gclwh10_12*x619)));
op[53]=(((gclwh10_11*x511))+(((-1.0)*x898))+(((-0.0034863305927034)*x546))+(((-1.0)*x886))+(((-0.0034863305927034)*x536))+x874+(((-1.0)*gclwh6_11*x493))+x900+((gclwh14_3*x624))+((gclwh8_11*x498)));
op[54]=(((gclwh9_10*x498))+(((-0.327675509152703)*x562))+(((-1.0)*x897))+(((-1.0)*x885))+(((-0.327675509152703)*x590))+((gclwh15_1*x591))+((gclwh11_10*x511))+(((-1.0)*gclwh7_10*x493))+x873+x899);
op[55]=((((-1.0)*x869))+(((-2.3686)*gclwh11_13*x507))+(((-1.0)*gclwh5_9*x512))+(((0.015853620107)*gclwh9_13*r20))+(((-0.015853620107)*x555))+(((-1.0)*x888))+(((-2.3686)*gclwh9_13*x513))+(((-0.27404702)*x550))+(((2.3686)*gclwh7_13*x500))+(((0.015853620107)*x526))+x671+(((-1.1843)*gclwh7_13*x493))+(((0.27404702)*x566))+(((1.1843)*gclwh11_13*x511))+x877+(((1.1843)*gclwh9_13*x498)));
op[56]=((((-1.0)*gclwh13_15*x615))+((gclwh13_0*x573))+((gclwh5_0*x516))+(((-1.0)*gclwh5_15*x551))+(((-0.2832336)*x550))+(((2.2892)*gclwh11_0*x507))+(((-1.0)*gclwh9_0*x577))+(((0.2832336)*x566))+(((2.2892)*npx*x496))+(((-1.0)*gclwh5_9*x613))+((gclwh15_15*x583))+(((-1.0)*gclwh11_0*x533))+((gclwh7_0*x586))+(((-1.1446)*gclwh9_0*x498))+(((-1.0)*gclwh15_0*x504))+(((1.1446)*gclwh7_0*x493))+(((-1.1446)*gclwh11_0*x511))+(((-2.2892)*gclwh7_0*x500)));
op[57]=((0.3752937372)+(((-1.0)*gclwh9_10*x605))+(((4.0)*gclwh11_10*x507))+(((-1.0)*x511*x515))+(((-1.0)*gclwh15_10*x592))+(((-1.0)*gclwh11_10*x514))+((gclwh13_10*x570))+(((4.0)*gclwh9_10*x513))+((gclwh7_10*x542))+((gclwh5_10*x618))+(((-1.0)*x498*x535))+((x493*x557))+(((-4.0)*gclwh7_10*x500)));
op[58]=((((-0.0034863305927034)*x562))+((gclwh15_1*x624))+(((-1.0)*x897))+(((-1.0)*gclwh9_10*x498))+(((-1.0)*gclwh11_10*x511))+x885+x899+((gclwh7_10*x493))+(((-0.0034863305927034)*x590))+(((-1.0)*x873)));
op[59]=((((-0.00918658)*x566))+(((0.0397)*gclwh11_13*x511))+(((-0.0794)*gclwh11_13*x507))+(((-0.000531443653)*x555))+(((-1.0)*x888))+(((0.0794)*gclwh7_13*x500))+(((0.00918658)*x550))+(((0.000531443653)*x526))+x869+x877+(((0.0397)*gclwh9_13*x498))+((gclwh9_13*x608))+(((-0.0397)*gclwh7_13*x493))+(((-0.0794)*gclwh9_13*x513))+((gclwh5_9*x581))+(((-1.0)*x671)));
op[60]=((((2.3686)*gclwh4_8*x507))+(((-1.0)*gclwh10_12*x512))+(((0.27404702)*x612))+(((0.015853620107)*x509))+(((-1.0)*x684))+(((-1.0)*gclwh4_8*x553))+(((-1.0)*x894))+(((2.3686)*gclwh12_8*x500))+(((-1.1843)*gclwh4_8*x511))+(((-0.015853620107)*x529))+(((-0.27404702)*x596))+(((-1.1843)*gclwh12_8*x493))+(((1.1843)*gclwh14_8*x498))+x872+x880+(((-2.3686)*gclwh14_8*x513)));
op[61]=((1.429443141481)+(((-0.0189560282044839)*x540))+(((-1.429443141481)*gclwh1_3*x498))+(((2.832113302962)*gclwh3_3*x500))+((gclwh3_3*x567))+(((-1.0)*x903))+(((-1.402670161481)*gclwh12_3*x493))+((gclwh12_11*x493))+((gclwh4_11*x511))+((gclwh14_3*x593))+(((-0.0189560282044839)*x497))+(((-2.832113302962)*gclwh14_3*x513))+(((2.832113302962)*gclwh12_3*x500))+((gclwh1_3*x593))+(((1.402670161481)*gclwh14_3*x498))+(((2.832113302962)*gclwh1_3*x513))+(((-1.0)*gclwh14_11*x498))+(((-1.402670161481)*pp*x497))+(((2.832113302962)*gclwh4_3*x507))+x883+x902+(((-1.429443141481)*gclwh3_3*x493))+(((-1.0)*x875)));
op[62]=((0.147786722962)+(((-1.0)*x887))+x896);
op[63]=((((-2.2892)*gclwh1_2*x513))+(((1.1446)*gclwh3_2*x493))+(((0.01638506376)*x529))+(((-2.2892)*gclwh3_2*x500))+(((-1.0)*gclwh14_2*x577))+(((-1.0)*gclwh3_2*x586))+(((-1.0)*gclwh1_2*x577))+(((1.1446)*gclwh1_2*x498))+(((-1.0)*x881))+(((2.448)*gclwh14_8*x513))+(((-2.448)*gclwh12_8*x500))+(((1.1446)*gclwh4_2*x511))+(((0.01638506376)*x630))+(((1.1446)*gclwh12_2*x493))+(((2.2892)*gclwh14_2*x513))+(((-2.2892)*gclwh4_2*x507))+(((-1.224)*gclwh14_8*x498))+(((-2.2892)*gclwh12_2*x500))+((gclwh12_2*x586))+(((-2.448)*gclwh4_8*x507))+x892+(((-1.1446)*gclwh14_2*x498))+(((1.224)*gclwh12_8*x493))+((gclwh4_2*x533))+((gclwh8_2*x504))+((gclwh10_2*x516))+(((1.224)*gclwh4_8*x511))+(((-1.0)*gclwh6_2*x573))+(((-0.01638506376)*x509)));
op[64]=((((-1.0)*gclwh10_12*x581))+(((0.0794)*gclwh14_8*x513))+(((-0.000531443653)*x509))+(((-0.0794)*gclwh4_8*x507))+(((-1.0)*x684))+(((-0.0794)*gclwh12_8*x500))+(((0.0397)*gclwh12_8*x493))+((gclwh4_8*x619))+(((-1.0)*x880))+(((0.00918658)*x612))+(((0.000531443653)*x529))+(((-0.00918658)*x596))+(((-0.0397)*gclwh14_8*x498))+x872+x894+(((0.0397)*gclwh4_8*x511)));
op[65]=((-0.028452741481)+((gclwh1_3*x523))+((gclwh14_11*x498))+(((-0.001679761481)*pp*x497))+(((-0.001679761481)*gclwh12_3*x493))+(((-1.0)*gclwh4_11*x511))+(((0.030132502962)*gclwh4_3*x507))+(((-1.0)*x903))+(((-1.0)*x883))+(((0.030132502962)*gclwh3_3*x500))+((gclwh14_3*x523))+(((-0.028452741481)*gclwh1_3*x498))+(((0.030132502962)*gclwh12_3*x500))+(((0.001679761481)*gclwh14_3*x498))+(((-0.030132502962)*gclwh14_3*x513))+(((0.030132502962)*gclwh1_3*x513))+(((-0.000201684224787892)*x540))+((gclwh3_3*x607))+(((-0.000201684224787892)*x497))+(((-0.028452741481)*gclwh3_3*x493))+x875+x902+(((-1.0)*gclwh12_11*x493)));
op[66]=((-1.429443141481)+(((-0.0189560282044839)*x508))+((gclwh5_10*x511))+(((1.402670161481)*gclwh5_1*x511))+(((2.832113302962)*gclwh2_1*x500))+(((-2.832113302962)*gclwh5_1*x507))+((gclwh2_1*x567))+(((-1.0)*x901))+(((-1.429443141481)*gclwh0_1*x498))+(((-1.0)*gclwh15_10*x498))+((gclwh13_10*x493))+x884+(((2.832113302962)*gclwh0_1*x513))+(((-2.832113302962)*gclwh13_1*x500))+((gclwh0_1*x593))+(((1.402670161481)*gclwh13_1*x493))+x904+(((0.0189560282044839)*x524))+(((2.832113302962)*gclwh15_1*x513))+(((0.0189560282044839)*x610))+(((-1.429443141481)*gclwh2_1*x493))+(((-1.402670161481)*gclwh15_1*x498))+(((-1.0)*x876)));
op[67]=((((1.1843)*gclwh13_9*x493))+(((1.1843)*gclwh5_9*x511))+(((2.3686)*gclwh15_9*x513))+((gclwh11_13*x512))+(((-1.1843)*gclwh15_9*x498))+(((-2.3686)*gclwh13_9*x500))+(((0.015853620107)*x510))+((gclwh5_9*x553))+(((-0.27404702)*x571))+(((0.27404702)*x599))+x703+(((-2.3686)*gclwh5_9*x507))+x890+(((-0.015853620107)*x623))+(((-1.0)*x879))+(((-1.0)*x870)));
op[68]=((((-1.1446)*gclwh13_0*x493))+(((-2.448)*gclwh13_9*x500))+(((0.015322176454)*x534))+(((1.224)*gclwh13_9*x493))+(((0.01638506376)*x510))+(((-1.0)*gclwh11_0*x516))+(((-2.2892)*gclwh2_0*x500))+(((-0.01638506376)*x623))+(((-1.1446)*gclwh5_0*x511))+(((1.1446)*gclwh15_0*x498))+(((-2.2892)*gclwh0_0*x513))+(((-1.224)*gclwh15_9*x498))+(((-2.448)*gclwh5_9*x507))+(((-1.0)*gclwh5_0*x533))+(((-0.015322176454)*x582))+(((2.2892)*gclwh13_0*x500))+(((-1.0)*gclwh9_0*x504))+(((0.01638506376)*x568))+(((1.1446)*gclwh0_0*x498))+((gclwh7_0*x573))+x889+(((2.448)*gclwh15_9*x513))+(((-2.2892)*gclwh15_0*x513))+(((1.1446)*gclwh2_0*x493))+(((-1.0)*gclwh0_0*x577))+(((1.224)*gclwh5_9*x511))+(((2.2892)*gclwh5_0*x507))+(((-1.0)*x878))+(((-1.0)*gclwh2_0*x586)));
op[69]=((0.147786722962)+(((-1.0)*x895))+x893);
op[70]=((0.028452741481)+(((0.000201684224787892)*x524))+(((0.001679761481)*gclwh13_1*x493))+(((-1.0)*gclwh13_10*x493))+((gclwh15_10*x498))+(((-1.0)*x901))+(((0.000201684224787892)*x610))+((gclwh2_1*x607))+(((-0.000201684224787892)*x508))+(((0.030132502962)*gclwh2_1*x500))+(((0.001679761481)*gclwh5_1*x511))+(((-0.030132502962)*gclwh13_1*x500))+(((-1.0)*x884))+(((-0.028452741481)*gclwh2_1*x493))+(((-1.0)*gclwh5_10*x511))+(((0.030132502962)*gclwh15_1*x513))+(((-0.001679761481)*gclwh15_1*x498))+(((0.030132502962)*gclwh0_1*x513))+(((-0.030132502962)*gclwh5_1*x507))+x876+x904+((gclwh0_1*x523))+(((-0.028452741481)*gclwh0_1*x498)));
op[71]=(((gclwh15_9*x608))+(((0.0397)*gclwh15_9*x498))+(((-1.0)*x890))+(((-0.00918658)*x571))+(((-0.000531443653)*x510))+(((0.00918658)*x544))+(((-0.0794)*gclwh15_9*x513))+(((-0.0397)*gclwh5_9*x511))+x703+x879+(((0.0794)*gclwh13_9*x500))+(((-0.0397)*gclwh13_9*x493))+(((0.0794)*gclwh5_9*x507))+(((0.00918658)*x599))+(((-0.000531443653)*x568))+(((-1.0)*x870)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x905=htj1*htj1;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+x905),-1);
if(!x906.valid){
continue;
}
cj1array[numsolutions]=((x906.value)*(((1.0)+(((-1.0)*x905)))));
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x907.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x907.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x908=htj2*htj2;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+x908),-1);
if(!x909.valid){
continue;
}
cj2array[numsolutions]=((x909.value)*(((1.0)+(((-1.0)*x908)))));
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x910.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x910.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x911=htj3*htj3;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+x911),-1);
if(!x912.valid){
continue;
}
cj3array[numsolutions]=((x912.value)*(((1.0)+(((-1.0)*x911)))));
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x913.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x913.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x914=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x914);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(r22,-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917=IKPowWithIntegerCheck(sj3,-1);
if(!x917.valid){
continue;
}
sj4array[0]=((x916.value)*(x917.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
IkReal x919=((16.0)*sj4);
IkReal x920=(cj1*cj2);
IkReal x921=((4.0)*sj3);
IkReal x922=((8.0)*sj4);
IkReal x923=((4.0)*cj4);
IkReal x924=(sj1*sj2);
IkReal x925=((4.0)*sj4);
IkReal x926=(cj3*r02);
IkReal x927=((16.0)*sj3);
IkReal x928=((8.0)*sj3);
IkReal x929=((12.0)*cj4);
IkReal x930=((12.0)*sj4);
IkReal x931=(cj3*r12);
IkReal x932=(r11*x921);
IkReal x933=(r01*x921);
IkReal x934=(r01*x924);
IkReal x935=(cj3*cj4*r01);
IkReal x936=(cj3*cj4*r11);
IkReal x937=(cj3*r10*x923);
IkReal x938=(x930*x931);
IkReal x939=(cj3*r00*x923);
IkReal x940=(x926*x930);
IkReal x941=(r00*x924*x925);
IkReal x942=(r02*x924*x929);
IkReal x943=(r00*x920*x925);
IkReal x944=(r02*x920*x929);
IkReal x945=(r10*x924*x925);
IkReal x946=(r12*x920*x929);
IkReal x947=(r12*x924*x929);
IkReal x948=(r10*x920*x925);
IkReal x949=(x932+x943);
IkReal x950=(x933+x945);
IkReal x951=(x937+x941);
IkReal x952=(x938+x944);
IkReal x953=(x939+x948);
IkReal x954=(x940+x947);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r11*x919*x920))+(((-16.0)*x935))+((r11*x919*x924))+(((-1.0)*r00*x927)))))))+(IKabs(((((-8.0)*x935))+(((-1.0)*r00*x928))+((r11*x922*x924))+(((-1.0)*r11*x920*x922)))))+(((0.5)*(IKabs(((((-1.0)*r10*x927))+((r01*x919*x920))+(((-1.0)*x919*x934))+(((-16.0)*x936)))))))+(((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x949+x942)))))+(((0.5)*(IKabs(((((-1.0)*x925*x926))+((r12*x920*x923))+(((-1.0)*r12*x923*x924))+(((-1.0)*x953))+x950)))))+(((0.5)*(IKabs(((((-1.0)*x925*x931))+(((-1.0)*r02*x920*x923))+((r02*x923*x924))+(((-1.0)*x951))+x949)))))+(IKabs(((((-1.0)*r10*x928))+(((-8.0)*x936))+((r01*x920*x922))+(((-1.0)*x922*x934)))))+(((0.5)*(IKabs(((((-1.0)*x954))+(((-1.0)*x950))+x953+x946)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x952))+x951+x942)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x954))+x950+x946))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x955=(r10*sj3);
IkReal x956=(r01*sj4);
IkReal x957=(cj1*cj2);
IkReal x958=(cj3*cj4);
IkReal x959=(sj1*sj2);
IkReal x960=(cj4*r02);
IkReal x961=((4.0)*r11*sj3);
IkReal x962=(cj3*r12*sj4);
IkReal x963=((4.0)*r00*sj4);
IkReal x964=((4.0)*r10*x958);
IkReal x965=((12.0)*x962);
IkReal x966=((4.0)*x962);
IkReal x967=(x957*x963);
IkReal x968=(x959*x963);
IkReal x969=((12.0)*x959*x960);
IkReal x970=((12.0)*x957*x960);
IkReal x971=((4.0)*x959*x960);
IkReal x972=((4.0)*x957*x960);
IkReal x973=(x961+x967);
IkReal x974=(x964+x968);
IkReal x975=(x972+x966);
IkReal x976=(x970+x965);
IkReal x977=((((-8.0)*x955))+(((8.0)*x956*x957))+(((-8.0)*x956*x959))+(((-8.0)*r11*x958)));
op[0]=(x971+x973+(((-1.0)*x974))+(((-1.0)*x975)));
op[1]=x977;
op[2]=(x973+x969+(((-1.0)*x974))+(((-1.0)*x976)));
op[3]=((((-16.0)*r11*x958))+(((-16.0)*x956*x959))+(((-16.0)*x955))+(((16.0)*x956*x957)));
op[4]=(x974+x969+(((-1.0)*x973))+(((-1.0)*x976)));
op[5]=x977;
op[6]=(x971+x974+(((-1.0)*x975))+(((-1.0)*x973)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x978=(cj1*cj2);
IkReal x979=((4.0)*cj4);
IkReal x980=(sj1*sj2);
IkReal x981=((4.0)*sj4);
IkReal x982=(r00*sj3);
IkReal x983=(cj3*r02);
IkReal x984=((4.0)*r01*sj3);
IkReal x985=((16.0)*r11*sj4);
IkReal x986=(cj3*cj4*r01);
IkReal x987=((12.0)*cj4*r12);
IkReal x988=((8.0)*r11*sj4);
IkReal x989=(cj3*r00*x979);
IkReal x990=((12.0)*sj4*x983);
IkReal x991=(x981*x983);
IkReal x992=(r10*x978*x981);
IkReal x993=(r10*x980*x981);
IkReal x994=(x978*x987);
IkReal x995=(x980*x987);
IkReal x996=(r12*x978*x979);
IkReal x997=(r12*x979*x980);
IkReal x998=(x993+x984);
IkReal x999=(x992+x989);
IkReal x1000=(x991+x997);
IkReal x1001=(x990+x995);
IkReal x1002=((((-1.0)*x978*x988))+(((-8.0)*x982))+(((-8.0)*x986))+((x980*x988)));
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x1000))+(((-1.0)*x999))+x996+x998))))+(((-1.0)*x1000))+(((htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x998))+x994+x999))))+(((-1.0)*x998))+((x1002*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1001))+(((-1.0)*x999))+x994+x998))))+((htj5*x1002))+x996+x999+(((htj5*htj5*htj5)*(((((-16.0)*x982))+(((-16.0)*x986))+(((-1.0)*x978*x985))+((x980*x985)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1003=(cj5*sj4);
IkReal x1004=(sj4*sj5);
if( IKabs((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003))))+IKsqr(((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1004))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1003))), ((((-1.0)*r11*x1004))+((cj4*r12))+((r10*x1003))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1005=IKcos(j0);
IkReal x1006=IKsin(j0);
IkReal x1007=(cj5*r01);
IkReal x1008=((1.0)*sj3);
IkReal x1009=(r12*sj4);
IkReal x1010=((1.0)*cj3);
IkReal x1011=(r11*sj5);
IkReal x1012=(cj3*cj4);
IkReal x1013=(r02*sj4);
IkReal x1014=(r01*sj5);
IkReal x1015=(r10*sj5);
IkReal x1016=(cj5*r11);
IkReal x1017=(r00*sj5);
IkReal x1018=((1.0)*cj2);
IkReal x1019=((0.5723)*sj2);
IkReal x1020=((1.0)*cj4);
IkReal x1021=((0.5723)*cj2);
IkReal x1022=(cj4*cj5*r00);
IkReal x1023=((1.0)*cj1*sj2);
IkReal x1024=(cj4*cj5*r10);
IkReal x1025=(sj1*x1005);
IkReal x1026=(cj1*x1006);
IkReal x1027=((1.0)*cj5*sj4);
IkReal x1028=(cj1*x1005);
IkReal x1029=(sj1*x1006);
evalcond[0]=((((-1.0)*r12*x1020))+x1005+((sj4*x1011))+(((-1.0)*r10*x1027)));
evalcond[1]=((((-1.0)*x1006))+((sj4*x1014))+(((-1.0)*r00*x1027))+(((-1.0)*r02*x1020)));
evalcond[2]=((((-0.163941)*x1006))+(((-1.0)*x1019*x1025))+(((0.612)*x1028))+(((-1.0)*px))+((x1021*x1028))+(((-0.1157)*x1007))+(((-0.1157)*x1017)));
evalcond[3]=((((0.163941)*x1005))+(((-1.0)*x1019*x1029))+(((0.612)*x1026))+(((-1.0)*py))+((x1021*x1026))+(((-0.1157)*x1016))+(((-0.1157)*x1015)));
evalcond[4]=(((cj3*x1013))+(((-1.0)*x1018*x1028))+((sj3*x1007))+((x1012*x1014))+((sj3*x1017))+(((-1.0)*x1010*x1022))+((sj2*x1025)));
evalcond[5]=(((cj3*x1009))+(((-1.0)*x1018*x1026))+((sj3*x1015))+((sj3*x1016))+(((-1.0)*x1010*x1024))+((x1011*x1012))+((sj2*x1029)));
evalcond[6]=((((-1.0)*cj4*x1008*x1014))+(((-1.0)*x1005*x1023))+((cj3*x1007))+((cj3*x1017))+(((-1.0)*x1018*x1025))+(((-1.0)*x1008*x1013))+((sj3*x1022)));
evalcond[7]=((((-1.0)*cj4*x1008*x1011))+(((-1.0)*x1008*x1009))+((cj3*x1015))+((cj3*x1016))+(((-1.0)*x1018*x1029))+((sj3*x1024))+(((-1.0)*x1006*x1023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(cj3,-1);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031=IKPowWithIntegerCheck(r22,-1);
if(!x1031.valid){
continue;
}
sj4array[0]=((-1.0)*(x1030.value)*(x1031.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1032=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1032);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1032);
IkReal x1033=((16.0)*sj4);
IkReal x1034=(cj1*cj2);
IkReal x1035=((4.0)*sj3);
IkReal x1036=((8.0)*sj4);
IkReal x1037=((4.0)*cj4);
IkReal x1038=(sj1*sj2);
IkReal x1039=((4.0)*sj4);
IkReal x1040=(cj3*r02);
IkReal x1041=((16.0)*sj3);
IkReal x1042=((8.0)*sj3);
IkReal x1043=((12.0)*cj4);
IkReal x1044=((12.0)*sj4);
IkReal x1045=(cj3*r12);
IkReal x1046=(r11*x1035);
IkReal x1047=(r01*x1035);
IkReal x1048=(r01*x1038);
IkReal x1049=(cj3*cj4*r01);
IkReal x1050=(cj3*cj4*r11);
IkReal x1051=(cj3*r10*x1037);
IkReal x1052=(x1044*x1045);
IkReal x1053=(cj3*r00*x1037);
IkReal x1054=(x1040*x1044);
IkReal x1055=(r00*x1038*x1039);
IkReal x1056=(r02*x1038*x1043);
IkReal x1057=(r00*x1034*x1039);
IkReal x1058=(r02*x1034*x1043);
IkReal x1059=(r10*x1038*x1039);
IkReal x1060=(r12*x1034*x1043);
IkReal x1061=(r12*x1038*x1043);
IkReal x1062=(r10*x1034*x1039);
IkReal x1063=(x1057+x1046);
IkReal x1064=(x1059+x1047);
IkReal x1065=(x1051+x1055);
IkReal x1066=(x1052+x1058);
IkReal x1067=(x1053+x1062);
IkReal x1068=(x1054+x1061);
j5eval[0]=((((0.5)*(IKabs((x1056+x1063+(((-1.0)*x1066))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1064+(((-1.0)*r12*x1037*x1038))+(((-1.0)*x1039*x1040))+((r12*x1034*x1037))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs((x1060+x1067+(((-1.0)*x1068))+(((-1.0)*x1064)))))))+(((0.5)*(IKabs((x1060+x1064+(((-1.0)*x1068))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1041))+(((-1.0)*x1033*x1048))+(((-16.0)*x1050))+((r01*x1033*x1034)))))))+(((0.5)*(IKabs((((r02*x1037*x1038))+x1063+(((-1.0)*x1039*x1045))+(((-1.0)*r02*x1034*x1037))+(((-1.0)*x1065)))))))+(IKabs(((((-1.0)*r00*x1042))+(((-8.0)*x1049))+((r11*x1036*x1038))+(((-1.0)*r11*x1034*x1036)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1041))+((r11*x1033*x1038))+(((-1.0)*r11*x1033*x1034))+(((-16.0)*x1049)))))))+(IKabs(((((-8.0)*x1050))+(((-1.0)*r10*x1042))+((r01*x1034*x1036))+(((-1.0)*x1036*x1048)))))+(((0.5)*(IKabs((x1056+x1065+(((-1.0)*x1066))+(((-1.0)*x1063))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1069=(r10*sj3);
IkReal x1070=(r01*sj4);
IkReal x1071=(cj1*cj2);
IkReal x1072=(cj3*cj4);
IkReal x1073=(sj1*sj2);
IkReal x1074=(cj4*r02);
IkReal x1075=((4.0)*r11*sj3);
IkReal x1076=(cj3*r12*sj4);
IkReal x1077=((4.0)*r00*sj4);
IkReal x1078=((4.0)*r10*x1072);
IkReal x1079=((12.0)*x1076);
IkReal x1080=((4.0)*x1076);
IkReal x1081=(x1071*x1077);
IkReal x1082=(x1073*x1077);
IkReal x1083=((12.0)*x1073*x1074);
IkReal x1084=((12.0)*x1071*x1074);
IkReal x1085=((4.0)*x1073*x1074);
IkReal x1086=((4.0)*x1071*x1074);
IkReal x1087=(x1075+x1081);
IkReal x1088=(x1078+x1082);
IkReal x1089=(x1086+x1080);
IkReal x1090=(x1079+x1084);
IkReal x1091=((((-8.0)*x1070*x1073))+(((8.0)*x1070*x1071))+(((-8.0)*x1069))+(((-8.0)*r11*x1072)));
op[0]=(x1087+x1085+(((-1.0)*x1088))+(((-1.0)*x1089)));
op[1]=x1091;
op[2]=(x1087+x1083+(((-1.0)*x1090))+(((-1.0)*x1088)));
op[3]=((((16.0)*x1070*x1071))+(((-16.0)*r11*x1072))+(((-16.0)*x1069))+(((-16.0)*x1070*x1073)));
op[4]=(x1083+x1088+(((-1.0)*x1090))+(((-1.0)*x1087)));
op[5]=x1091;
op[6]=(x1085+x1088+(((-1.0)*x1087))+(((-1.0)*x1089)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1092=(cj1*cj2);
IkReal x1093=((4.0)*cj4);
IkReal x1094=(sj1*sj2);
IkReal x1095=((4.0)*sj4);
IkReal x1096=(r00*sj3);
IkReal x1097=(cj3*r02);
IkReal x1098=((4.0)*r01*sj3);
IkReal x1099=((16.0)*r11*sj4);
IkReal x1100=(cj3*cj4*r01);
IkReal x1101=((12.0)*cj4*r12);
IkReal x1102=((8.0)*r11*sj4);
IkReal x1103=(cj3*r00*x1093);
IkReal x1104=((12.0)*sj4*x1097);
IkReal x1105=(x1095*x1097);
IkReal x1106=(r10*x1092*x1095);
IkReal x1107=(r10*x1094*x1095);
IkReal x1108=(x1092*x1101);
IkReal x1109=(x1094*x1101);
IkReal x1110=(r12*x1092*x1093);
IkReal x1111=(r12*x1093*x1094);
IkReal x1112=(x1107+x1098);
IkReal x1113=(x1106+x1103);
IkReal x1114=(x1105+x1111);
IkReal x1115=(x1104+x1109);
IkReal x1116=(((x1094*x1102))+(((-1.0)*x1092*x1102))+(((-8.0)*x1096))+(((-8.0)*x1100)));
j5evalpoly[0]=((((htj5*htj5)*((x1108+x1113+(((-1.0)*x1115))+(((-1.0)*x1112))))))+x1110+x1113+((x1116*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1100))+((x1094*x1099))+(((-16.0)*x1096))+(((-1.0)*x1092*x1099))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1110+x1112+(((-1.0)*x1114))+(((-1.0)*x1113))))))+(((htj5*htj5*htj5*htj5)*((x1108+x1112+(((-1.0)*x1115))+(((-1.0)*x1113))))))+(((-1.0)*x1114))+(((-1.0)*x1112))+((htj5*x1116)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1117=(cj5*sj4);
IkReal x1118=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1118))+(((-1.0)*r00*x1117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1118))+((cj4*r12))+((r10*x1117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1118))+(((-1.0)*r00*x1117))))+IKsqr(((((-1.0)*r11*x1118))+((cj4*r12))+((r10*x1117))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1118))+(((-1.0)*r00*x1117))), ((((-1.0)*r11*x1118))+((cj4*r12))+((r10*x1117))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1119=IKcos(j0);
IkReal x1120=IKsin(j0);
IkReal x1121=(cj5*r01);
IkReal x1122=((1.0)*sj3);
IkReal x1123=(r12*sj4);
IkReal x1124=((1.0)*cj3);
IkReal x1125=(r11*sj5);
IkReal x1126=(cj3*cj4);
IkReal x1127=(r02*sj4);
IkReal x1128=(r01*sj5);
IkReal x1129=(r10*sj5);
IkReal x1130=(cj5*r11);
IkReal x1131=(r00*sj5);
IkReal x1132=((1.0)*cj2);
IkReal x1133=((0.5723)*sj2);
IkReal x1134=((1.0)*cj4);
IkReal x1135=((0.5723)*cj2);
IkReal x1136=(cj4*cj5*r00);
IkReal x1137=((1.0)*cj1*sj2);
IkReal x1138=(cj4*cj5*r10);
IkReal x1139=(sj1*x1119);
IkReal x1140=(cj1*x1120);
IkReal x1141=((1.0)*cj5*sj4);
IkReal x1142=(cj1*x1119);
IkReal x1143=(sj1*x1120);
evalcond[0]=(x1119+(((-1.0)*r12*x1134))+((sj4*x1125))+(((-1.0)*r10*x1141)));
evalcond[1]=((((-1.0)*r00*x1141))+((sj4*x1128))+(((-1.0)*x1120))+(((-1.0)*r02*x1134)));
evalcond[2]=((((0.612)*x1142))+(((-1.0)*px))+(((-0.163941)*x1120))+(((-0.1157)*x1131))+(((-0.1157)*x1121))+(((-1.0)*x1133*x1139))+((x1135*x1142)));
evalcond[3]=((((0.612)*x1140))+(((-1.0)*py))+(((0.163941)*x1119))+(((-0.1157)*x1130))+(((-1.0)*x1133*x1143))+(((-0.1157)*x1129))+((x1135*x1140)));
evalcond[4]=((((-1.0)*x1132*x1142))+((sj2*x1139))+((sj3*x1121))+((sj3*x1131))+(((-1.0)*x1124*x1136))+((x1126*x1128))+((cj3*x1127)));
evalcond[5]=((((-1.0)*x1132*x1140))+((x1125*x1126))+((sj2*x1143))+((sj3*x1129))+((sj3*x1130))+(((-1.0)*x1124*x1138))+((cj3*x1123)));
evalcond[6]=(((cj3*x1131))+(((-1.0)*x1122*x1127))+(((-1.0)*x1132*x1139))+(((-1.0)*cj4*x1122*x1128))+(((-1.0)*x1119*x1137))+((sj3*x1136))+((cj3*x1121)));
evalcond[7]=(((cj3*x1130))+(((-1.0)*x1122*x1123))+(((-1.0)*x1132*x1143))+(((-1.0)*cj4*x1122*x1125))+((sj3*x1138))+(((-1.0)*x1120*x1137))+((cj3*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1145=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1145);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1145);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(r22,-1);
if(!x1147.valid){
continue;
}
sj4array[0]=((-1.0)*(x1147.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1148=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1148);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1148);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1150 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1150.valid){
continue;
}
IkReal x1149=x1150.value;
j5array[0]=((-1.0)*x1149);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1149)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1151=(cj5*sj4);
IkReal x1152=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1151))+((r01*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1152))+((r10*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1151))+((r01*x1152))))+IKsqr(((((-1.0)*r11*x1152))+((r10*x1151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1151))+((r01*x1152))), ((((-1.0)*r11*x1152))+((r10*x1151))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1153=IKcos(j0);
IkReal x1154=IKsin(j0);
IkReal x1155=(cj5*r01);
IkReal x1156=(sj4*sj5);
IkReal x1157=((0.1157)*sj5);
IkReal x1158=((0.612)*cj1);
IkReal x1159=(cj5*r11);
IkReal x1160=((1.0)*cj1*sj2);
IkReal x1161=((1.0)*cj2*sj1);
IkReal x1162=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1162))+x1153+((r11*x1156)));
evalcond[1]=((((-1.0)*x1154))+(((-1.0)*r00*x1162))+((r01*x1156)));
evalcond[2]=(((r00*sj5))+x1155+(((-1.0)*x1153*x1161))+(((-1.0)*x1153*x1160)));
evalcond[3]=(x1159+((r10*sj5))+(((-1.0)*x1154*x1160))+(((-1.0)*x1154*x1161)));
evalcond[4]=((((-1.0)*r00*x1157))+((x1153*x1158))+(((-1.0)*px))+(((-0.163941)*x1154))+(((-0.1157)*x1155)));
evalcond[5]=((((0.163941)*x1153))+(((-1.0)*py))+(((-1.0)*r10*x1157))+(((-0.1157)*x1159))+((x1154*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1164=IKPowWithIntegerCheck(r22,-1);
if(!x1164.valid){
continue;
}
sj4array[0]=((x1164.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
IkReal x1166=x1167.value;
j5array[0]=((-1.0)*x1166);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1166)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1168=(cj5*sj4);
IkReal x1169=(sj4*sj5);
if( IKabs((((r01*x1169))+(((-1.0)*r00*x1168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1168))+(((-1.0)*r11*x1169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1169))+(((-1.0)*r00*x1168))))+IKsqr((((r10*x1168))+(((-1.0)*r11*x1169))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1169))+(((-1.0)*r00*x1168))), (((r10*x1168))+(((-1.0)*r11*x1169))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1170=IKcos(j0);
IkReal x1171=IKsin(j0);
IkReal x1172=(cj5*r01);
IkReal x1173=(sj4*sj5);
IkReal x1174=((1.0)*sj5);
IkReal x1175=((1.0)*cj5);
IkReal x1176=((0.1157)*sj5);
IkReal x1177=((0.612)*cj1);
IkReal x1178=((1.0)*cj1*sj2);
IkReal x1179=((1.0)*cj2*sj1);
evalcond[0]=(x1170+(((-1.0)*r10*sj4*x1175))+((r11*x1173)));
evalcond[1]=((((-1.0)*r00*sj4*x1175))+((r01*x1173))+(((-1.0)*x1171)));
evalcond[2]=((((-0.163941)*x1171))+(((-0.1157)*x1172))+(((-1.0)*px))+(((-1.0)*r00*x1176))+((x1170*x1177)));
evalcond[3]=((((-1.0)*py))+(((0.163941)*x1170))+(((-0.1157)*cj5*r11))+(((-1.0)*r10*x1176))+((x1171*x1177)));
evalcond[4]=((((-1.0)*x1170*x1179))+(((-1.0)*x1170*x1178))+(((-1.0)*r00*x1174))+(((-1.0)*x1172)));
evalcond[5]=((((-1.0)*r11*x1175))+(((-1.0)*x1171*x1178))+(((-1.0)*x1171*x1179))+(((-1.0)*r10*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(r22,-1);
if(!x1181.valid){
continue;
}
sj4array[0]=((x1181.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1182=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1182);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1182);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1184 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1184.valid){
continue;
}
IkReal x1183=x1184.value;
j5array[0]=((-1.0)*x1183);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1183)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1185=(cj5*sj4);
IkReal x1186=(sj4*sj5);
if( IKabs((((r01*x1186))+(((-1.0)*r00*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1185))+(((-1.0)*r11*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1186))+(((-1.0)*r00*x1185))))+IKsqr((((r10*x1185))+(((-1.0)*r11*x1186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1186))+(((-1.0)*r00*x1185))), (((r10*x1185))+(((-1.0)*r11*x1186))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1187=IKcos(j0);
IkReal x1188=IKsin(j0);
IkReal x1189=(cj5*r01);
IkReal x1190=(sj4*sj5);
IkReal x1191=((0.1157)*sj5);
IkReal x1192=(cj5*r11);
IkReal x1193=((1.0)*x1188);
IkReal x1194=(cj1*x1188);
IkReal x1195=((1.0)*cj5*sj4);
IkReal x1196=(sj1*sj2*x1187);
IkReal x1197=(cj1*cj2*x1187);
IkReal x1198=(sj1*sj2*x1188);
evalcond[0]=(x1187+(((-1.0)*r10*x1195))+((r11*x1190)));
evalcond[1]=((((-1.0)*r00*x1195))+((r01*x1190))+(((-1.0)*x1193)));
evalcond[2]=(((r00*sj5))+x1189+x1196+(((-1.0)*x1197)));
evalcond[3]=(x1198+x1192+((r10*sj5))+(((-1.0)*cj1*cj2*x1193)));
evalcond[4]=((((-1.0)*r00*x1191))+(((-0.5723)*x1196))+(((0.612)*cj1*x1187))+(((-0.163941)*x1188))+(((0.5723)*x1197))+(((-1.0)*px))+(((-0.1157)*x1189)));
evalcond[5]=((((-0.5723)*x1198))+(((0.163941)*x1187))+(((-1.0)*r10*x1191))+(((-0.1157)*x1192))+(((-1.0)*py))+(((0.5723)*cj2*x1194))+(((0.612)*x1194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1200=IKPowWithIntegerCheck(r22,-1);
if(!x1200.valid){
continue;
}
sj4array[0]=((-1.0)*(x1200.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1201=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1201);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1201);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1203 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1203.valid){
continue;
}
IkReal x1202=x1203.value;
j5array[0]=((-1.0)*x1202);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1202)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1204=(cj5*sj4);
IkReal x1205=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1204))+((r01*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1204))+(((-1.0)*r11*x1205)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1204))+((r01*x1205))))+IKsqr((((r10*x1204))+(((-1.0)*r11*x1205))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1204))+((r01*x1205))), (((r10*x1204))+(((-1.0)*r11*x1205))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1206=IKcos(j0);
IkReal x1207=IKsin(j0);
IkReal x1208=(cj5*r01);
IkReal x1209=(sj4*sj5);
IkReal x1210=((1.0)*cj5);
IkReal x1211=(r10*sj5);
IkReal x1212=(r00*sj5);
IkReal x1213=(cj1*x1207);
IkReal x1214=(sj1*sj2*x1206);
IkReal x1215=(cj1*cj2*x1206);
IkReal x1216=(sj1*sj2*x1207);
evalcond[0]=(x1206+((r11*x1209))+(((-1.0)*r10*sj4*x1210)));
evalcond[1]=((((-1.0)*x1207))+((r01*x1209))+(((-1.0)*r00*sj4*x1210)));
evalcond[2]=(x1214+(((-1.0)*x1208))+(((-1.0)*x1212))+(((-1.0)*x1215)));
evalcond[3]=(x1216+(((-1.0)*cj2*x1213))+(((-1.0)*r11*x1210))+(((-1.0)*x1211)));
evalcond[4]=((((0.612)*cj1*x1206))+(((-0.1157)*x1208))+(((-0.1157)*x1212))+(((-0.5723)*x1214))+(((-1.0)*px))+(((0.5723)*x1215))+(((-0.163941)*x1207)));
evalcond[5]=((((0.612)*x1213))+(((-0.1157)*x1211))+(((-0.5723)*x1216))+(((0.163941)*x1206))+(((-1.0)*py))+(((0.5723)*cj2*x1213))+(((-0.1157)*cj5*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(r22,-1);
if(!x1217.valid){
continue;
}
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(sj3,-1);
if(!x1218.valid){
continue;
}
sj4array[0]=((x1217.value)*(x1218.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1219=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1219);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1219);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1220=((4.0)*r01);
IkReal x1221=((16.0)*r00);
IkReal x1222=(cj3*sj2);
IkReal x1223=((8.0)*r00);
IkReal x1224=(cj2*cj3);
IkReal x1225=(cj4*r01);
IkReal x1226=((16.0)*cj1);
IkReal x1227=((8.0)*sj1);
IkReal x1228=((16.0)*sj1);
IkReal x1229=((8.0)*cj1);
IkReal x1230=(sj2*sj3);
IkReal x1231=(cj2*sj3);
IkReal x1232=(sj1*x1231);
IkReal x1233=((4.0)*cj4*r00);
IkReal x1234=(((x1220*x1232))+((sj1*x1230*x1233))+((cj1*x1220*x1230))+((sj1*x1220*x1222)));
IkReal x1235=(((sj1*x1224*x1233))+((cj1*x1231*x1233))+((cj1*x1222*x1233))+((cj1*x1220*x1224)));
IkReal x1236=(x1235+(((-1.0)*x1234)));
IkReal x1237=(((x1222*x1225*x1229))+((x1223*x1232))+(((-1.0)*x1225*x1227*x1230))+((cj1*x1223*x1230))+(((-1.0)*cj1*x1223*x1224))+((x1225*x1229*x1231))+((sj1*x1222*x1223))+((x1224*x1225*x1227)));
IkReal x1238=(x1234+(((-1.0)*x1235)));
op[0]=x1236;
op[1]=x1237;
op[2]=x1236;
op[3]=((((-1.0)*cj1*x1221*x1224))+((x1222*x1225*x1226))+(((-1.0)*x1225*x1228*x1230))+((x1221*x1232))+((x1224*x1225*x1228))+((cj1*x1221*x1230))+((sj1*x1221*x1222))+((x1225*x1226*x1231)));
op[4]=x1238;
op[5]=x1237;
op[6]=x1238;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1239=(cj5*sj4);
IkReal x1240=(sj4*sj5);
if( IKabs((((r01*x1240))+(((-1.0)*r00*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1240))+((r10*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1240))+(((-1.0)*r00*x1239))))+IKsqr(((((-1.0)*r11*x1240))+((r10*x1239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1240))+(((-1.0)*r00*x1239))), ((((-1.0)*r11*x1240))+((r10*x1239))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1241=IKcos(j0);
IkReal x1242=IKsin(j0);
IkReal x1243=(cj5*r01);
IkReal x1244=((1.0)*cj3);
IkReal x1245=(r11*sj5);
IkReal x1246=(r01*sj5);
IkReal x1247=(r10*sj5);
IkReal x1248=(cj5*r11);
IkReal x1249=(cj3*cj4);
IkReal x1250=(r00*sj5);
IkReal x1251=((1.0)*cj2);
IkReal x1252=((0.5723)*cj2);
IkReal x1253=((0.5723)*sj2);
IkReal x1254=(cj4*cj5*r00);
IkReal x1255=((1.0)*cj1*sj2);
IkReal x1256=(cj4*cj5*r10);
IkReal x1257=((1.0)*cj4*sj3);
IkReal x1258=(sj1*x1241);
IkReal x1259=(cj1*x1242);
IkReal x1260=((1.0)*cj5*sj4);
IkReal x1261=(cj1*x1241);
IkReal x1262=(sj1*x1242);
evalcond[0]=((((-1.0)*r10*x1260))+x1241+((sj4*x1245)));
evalcond[1]=((((-1.0)*x1242))+(((-1.0)*r00*x1260))+((sj4*x1246)));
evalcond[2]=(((sj3*x1243))+(((-1.0)*x1244*x1254))+((x1246*x1249))+(((-1.0)*x1251*x1261))+((sj3*x1250))+((sj2*x1258)));
evalcond[3]=(((sj3*x1247))+((sj3*x1248))+(((-1.0)*x1244*x1256))+(((-1.0)*x1251*x1259))+((x1245*x1249))+((sj2*x1262)));
evalcond[4]=(((cj3*x1250))+(((-1.0)*x1241*x1255))+(((-1.0)*x1246*x1257))+(((-1.0)*x1251*x1258))+((sj3*x1254))+((cj3*x1243)));
evalcond[5]=((((-1.0)*x1242*x1255))+(((-1.0)*x1245*x1257))+(((-1.0)*x1251*x1262))+((sj3*x1256))+((cj3*x1247))+((cj3*x1248)));
evalcond[6]=((((0.612)*x1261))+(((-0.163941)*x1242))+(((-0.1157)*x1250))+(((-1.0)*x1253*x1258))+(((-0.1157)*x1243))+(((-1.0)*px))+((x1252*x1261)));
evalcond[7]=((((0.612)*x1259))+(((0.163941)*x1241))+(((-1.0)*x1253*x1262))+(((-0.1157)*x1248))+(((-0.1157)*x1247))+(((-1.0)*py))+((x1252*x1259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(cj3,-1);
if(!x1263.valid){
continue;
}
CheckValue<IkReal> x1264=IKPowWithIntegerCheck(r22,-1);
if(!x1264.valid){
continue;
}
sj4array[0]=((-1.0)*(x1263.value)*(x1264.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1265=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1265);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1265);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1266=((4.0)*r01);
IkReal x1267=((16.0)*r00);
IkReal x1268=(cj3*sj2);
IkReal x1269=((8.0)*r00);
IkReal x1270=(cj2*cj3);
IkReal x1271=(cj4*r01);
IkReal x1272=((16.0)*cj1);
IkReal x1273=((8.0)*sj1);
IkReal x1274=((16.0)*sj1);
IkReal x1275=((8.0)*cj1);
IkReal x1276=(sj2*sj3);
IkReal x1277=(cj2*sj3);
IkReal x1278=(sj1*x1277);
IkReal x1279=((4.0)*cj4*r00);
IkReal x1280=(((cj1*x1266*x1276))+((x1266*x1278))+((sj1*x1266*x1268))+((sj1*x1276*x1279)));
IkReal x1281=(((cj1*x1268*x1279))+((cj1*x1266*x1270))+((sj1*x1270*x1279))+((cj1*x1277*x1279)));
IkReal x1282=(x1281+(((-1.0)*x1280)));
IkReal x1283=(((x1269*x1278))+(((-1.0)*x1271*x1273*x1276))+(((-1.0)*cj1*x1269*x1270))+((x1268*x1271*x1275))+((x1271*x1275*x1277))+((cj1*x1269*x1276))+((sj1*x1268*x1269))+((x1270*x1271*x1273)));
IkReal x1284=(x1280+(((-1.0)*x1281)));
op[0]=x1282;
op[1]=x1283;
op[2]=x1282;
op[3]=(((cj1*x1267*x1276))+(((-1.0)*x1271*x1274*x1276))+((x1271*x1272*x1277))+((x1267*x1278))+(((-1.0)*cj1*x1267*x1270))+((sj1*x1267*x1268))+((x1268*x1271*x1272))+((x1270*x1271*x1274)));
op[4]=x1284;
op[5]=x1283;
op[6]=x1284;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1285=(cj5*sj4);
IkReal x1286=(sj4*sj5);
if( IKabs((((r01*x1286))+(((-1.0)*r00*x1285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1285))+(((-1.0)*r11*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1286))+(((-1.0)*r00*x1285))))+IKsqr((((r10*x1285))+(((-1.0)*r11*x1286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1286))+(((-1.0)*r00*x1285))), (((r10*x1285))+(((-1.0)*r11*x1286))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1287=IKcos(j0);
IkReal x1288=IKsin(j0);
IkReal x1289=(cj5*r01);
IkReal x1290=((1.0)*cj3);
IkReal x1291=(r11*sj5);
IkReal x1292=(r01*sj5);
IkReal x1293=(r10*sj5);
IkReal x1294=(cj5*r11);
IkReal x1295=(cj3*cj4);
IkReal x1296=(r00*sj5);
IkReal x1297=((1.0)*cj2);
IkReal x1298=((0.5723)*cj2);
IkReal x1299=((0.5723)*sj2);
IkReal x1300=(cj4*cj5*r00);
IkReal x1301=((1.0)*cj1*sj2);
IkReal x1302=(cj4*cj5*r10);
IkReal x1303=((1.0)*cj4*sj3);
IkReal x1304=(sj1*x1287);
IkReal x1305=(cj1*x1288);
IkReal x1306=((1.0)*cj5*sj4);
IkReal x1307=(cj1*x1287);
IkReal x1308=(sj1*x1288);
evalcond[0]=(x1287+(((-1.0)*r10*x1306))+((sj4*x1291)));
evalcond[1]=((((-1.0)*x1288))+(((-1.0)*r00*x1306))+((sj4*x1292)));
evalcond[2]=(((sj2*x1304))+((sj3*x1296))+(((-1.0)*x1297*x1307))+((sj3*x1289))+(((-1.0)*x1290*x1300))+((x1292*x1295)));
evalcond[3]=(((sj2*x1308))+((sj3*x1293))+((sj3*x1294))+(((-1.0)*x1297*x1305))+((x1291*x1295))+(((-1.0)*x1290*x1302)));
evalcond[4]=(((cj3*x1296))+((sj3*x1300))+(((-1.0)*x1287*x1301))+(((-1.0)*x1297*x1304))+(((-1.0)*x1292*x1303))+((cj3*x1289)));
evalcond[5]=(((cj3*x1293))+((cj3*x1294))+((sj3*x1302))+(((-1.0)*x1297*x1308))+(((-1.0)*x1291*x1303))+(((-1.0)*x1288*x1301)));
evalcond[6]=((((0.612)*x1307))+(((-0.163941)*x1288))+(((-0.1157)*x1289))+(((-1.0)*x1299*x1304))+(((-1.0)*px))+(((-0.1157)*x1296))+((x1298*x1307)));
evalcond[7]=((((0.612)*x1305))+(((-1.0)*x1299*x1308))+(((-1.0)*py))+(((0.163941)*x1287))+(((-0.1157)*x1294))+(((-0.1157)*x1293))+((x1298*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1311 = IKatan2WithCheck(IkReal(((-0.1157)*r21)),IkReal(((-0.1157)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1311.valid){
continue;
}
IkReal x1309=((1.0)*(x1311.value));
if((((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1312=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01338649)*(r20*r20)))+(((0.01338649)*(r21*r21)))))),-1);
if(!x1312.valid){
continue;
}
if( (((-1.0)*(x1312.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1312.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1310=((-1.0)*(IKasin(((-1.0)*(x1312.value)*(((((-1.0)*pz))+(((-0.5723)*cj1*sj2))+(((-0.5723)*cj2*sj1))+(((-0.612)*sj1))))))));
j5array[0]=((((-1.0)*x1310))+(((-1.0)*x1309)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1309))+(((1.0)*x1310)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1313=cj5*cj5;
IkReal x1314=r21*r21;
IkReal x1315=(sj3*x1313);
IkReal x1316=(((sj3*(r22*r22)))+((sj3*x1314))+(((-1.0)*x1314*x1315))+((x1315*(r20*r20)))+(((-2.0)*cj5*r20*r21*sj3*sj5)));
j4eval[0]=x1316;
j4eval[1]=IKsign(x1316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1317=cj5*cj5;
IkReal x1318=r21*r21;
IkReal x1319=((1.0)*cj3);
IkReal x1320=(cj3*x1317);
IkReal x1321=((((-1.0)*x1317*x1319*(r20*r20)))+(((-1.0)*x1318*x1319))+(((-1.0)*x1319*(r22*r22)))+((x1318*x1320))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1321;
j4eval[1]=IKsign(x1321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1322=cj1*cj1;
IkReal x1323=cj2*cj2;
IkReal x1324=(cj1*sj1*sj2);
IkReal x1325=(cj2*x1322);
IkReal x1326=(x1322*x1323);
j0eval[0]=((7.53782945427275)+x1322+(((-6.96618904215118)*x1323))+(((13.9323780843024)*x1326))+(((14.8988561726246)*x1325))+(((-14.8988561726246)*x1324))+(((-13.9323780843024)*cj2*x1324)));
j0eval[1]=IKsign(((354403941481.0)+(((655054580000.0)*x1326))+(((-327527290000.0)*x1323))+(((700495200000.0)*x1325))+(((-700495200000.0)*x1324))+(((-655054580000.0)*cj2*x1324))+(((47016710000.0)*x1322))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1327=((1.0)*cj5);
IkReal x1328=((1.0)*sj5);
IkReal x1329=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1329;
j0eval[1]=((IKabs(((((-1.0)*r11*x1327))+(((-1.0)*r10*x1328)))))+(IKabs(((((-1.0)*r01*x1327))+(((-1.0)*r00*x1328))))));
j0eval[2]=IKsign(x1329);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1330=cj5*cj5;
IkReal x1331=r21*r21;
IkReal x1332=(sj1*sj2);
IkReal x1333=(r21*sj5);
IkReal x1334=(cj5*r20);
IkReal x1335=(cj1*cj2);
IkReal x1336=(x1331+(r22*r22)+(((-1.0)*x1330*x1331))+(((-2.0)*x1333*x1334))+((x1330*(r20*r20))));
j4eval[0]=x1336;
j4eval[1]=IKsign(x1336);
j4eval[2]=((IKabs(((((-1.0)*x1333*x1335))+(((-1.0)*x1332*x1334))+((x1334*x1335))+((x1332*x1333)))))+(IKabs(((((-1.0)*r22*x1335))+((r22*x1332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1337=IKsin(j0);
IkReal x1338=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x1337))+(((0.612)*x1338)));
evalcond[1]=((((0.163941)*x1338))+(((-1.0)*py))+(((0.612)*x1337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1339=((1.0)*cj5);
IkReal x1340=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1339)));
j4eval[0]=x1340;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1339)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1340);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1341=((1.0)*cj5);
IkReal x1342=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1341)));
j4eval[0]=x1342;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1341))))));
j4eval[2]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1343=cj5*cj5;
IkReal x1344=((1.0)*sj5);
IkReal x1345=(cj5*r20);
IkReal x1346=(r11*r21);
IkReal x1347=(x1346+(((-1.0)*cj5*r10*r21*x1344))+((r12*r22))+(((-1.0)*r11*x1344*x1345))+((r10*r20*x1343))+(((-1.0)*x1343*x1346)));
j4eval[0]=x1347;
j4eval[1]=IKsign(x1347);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x1345))+(((-1.0)*cj0*r21*x1344))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1348=cj5*cj5;
IkReal x1349=((1.0)*sj5);
IkReal x1350=(cj5*r20);
IkReal x1351=(r11*r21);
CheckValue<IkReal> x1352=IKPowWithIntegerCheck(IKsign((x1351+(((-1.0)*r11*x1349*x1350))+(((-1.0)*cj5*r10*r21*x1349))+((r12*r22))+((r10*r20*x1348))+(((-1.0)*x1348*x1351)))),-1);
if(!x1352.valid){
continue;
}
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1349))+((cj0*x1350)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1352.value)))+(x1353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1354=IKsin(j4);
IkReal x1355=IKcos(j4);
IkReal x1356=((1.0)*sj0);
IkReal x1357=(cj5*r00);
IkReal x1358=(r11*sj5);
IkReal x1359=(cj5*r10);
IkReal x1360=(r21*sj5);
IkReal x1361=(cj5*r20);
IkReal x1362=(r01*sj5);
IkReal x1363=((1.0)*x1355);
IkReal x1364=((1.0)*x1354);
evalcond[0]=(((x1354*x1360))+(((-1.0)*r22*x1363))+(((-1.0)*x1361*x1364)));
evalcond[1]=(((x1355*x1361))+(((-1.0)*r22*x1364))+(((-1.0)*x1360*x1363)));
evalcond[2]=((((-1.0)*r12*x1363))+cj0+((x1354*x1358))+(((-1.0)*x1359*x1364)));
evalcond[3]=((((-1.0)*x1356))+(((-1.0)*r02*x1363))+((x1354*x1362))+(((-1.0)*x1357*x1364)));
evalcond[4]=(((x1355*x1357))+(((-1.0)*r02*x1364))+(((-1.0)*x1362*x1363))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1356))+((x1355*x1359))+(((-1.0)*r12*x1364))+(((-1.0)*x1358*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1365=((1.0)*cj5);
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1365))+(((-1.0)*r10*sj5)))),-1);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1366.value)))+(x1367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1368=IKsin(j4);
IkReal x1369=IKcos(j4);
IkReal x1370=((1.0)*sj0);
IkReal x1371=(cj5*r00);
IkReal x1372=(r11*sj5);
IkReal x1373=(cj5*r10);
IkReal x1374=(r21*sj5);
IkReal x1375=(cj5*r20);
IkReal x1376=(r01*sj5);
IkReal x1377=((1.0)*x1369);
IkReal x1378=((1.0)*x1368);
evalcond[0]=((((-1.0)*r22*x1377))+(((-1.0)*x1375*x1378))+((x1368*x1374)));
evalcond[1]=((((-1.0)*r22*x1378))+(((-1.0)*x1374*x1377))+((x1369*x1375)));
evalcond[2]=(cj0+(((-1.0)*r12*x1377))+((x1368*x1372))+(((-1.0)*x1373*x1378)));
evalcond[3]=((((-1.0)*x1371*x1378))+(((-1.0)*r02*x1377))+(((-1.0)*x1370))+((x1368*x1376)));
evalcond[4]=((((-1.0)*r02*x1378))+(((-1.0)*x1376*x1377))+((x1369*x1371))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1372*x1377))+(((-1.0)*x1370))+(((-1.0)*r12*x1378))+((x1369*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1379=((1.0)*cj5);
CheckValue<IkReal> x1380 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1380.valid){
continue;
}
CheckValue<IkReal> x1381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1379))+(((-1.0)*r00*sj5)))),-1);
if(!x1381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1380.value)+(((1.5707963267949)*(x1381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1382=IKsin(j4);
IkReal x1383=IKcos(j4);
IkReal x1384=((1.0)*sj0);
IkReal x1385=(cj5*r00);
IkReal x1386=(r11*sj5);
IkReal x1387=(cj5*r10);
IkReal x1388=(r21*sj5);
IkReal x1389=(cj5*r20);
IkReal x1390=(r01*sj5);
IkReal x1391=((1.0)*x1383);
IkReal x1392=((1.0)*x1382);
evalcond[0]=((((-1.0)*x1389*x1392))+(((-1.0)*r22*x1391))+((x1382*x1388)));
evalcond[1]=((((-1.0)*r22*x1392))+(((-1.0)*x1388*x1391))+((x1383*x1389)));
evalcond[2]=((((-1.0)*r12*x1391))+cj0+(((-1.0)*x1387*x1392))+((x1382*x1386)));
evalcond[3]=(((x1382*x1390))+(((-1.0)*x1384))+(((-1.0)*x1385*x1392))+(((-1.0)*r02*x1391)));
evalcond[4]=((((-1.0)*r02*x1392))+(((-1.0)*x1390*x1391))+(((-1.0)*cj0))+((x1383*x1385)));
evalcond[5]=((((-1.0)*x1384))+(((-1.0)*r12*x1392))+(((-1.0)*x1386*x1391))+((x1383*x1387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1393=IKsin(j0);
IkReal x1394=IKcos(j0);
evalcond[0]=((((-0.163941)*x1393))+(((-1.0)*px))+(((0.612)*x1394)));
evalcond[1]=((((0.163941)*x1394))+(((-1.0)*py))+(((0.612)*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1395=((1.0)*cj5);
IkReal x1396=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1395)));
j4eval[0]=x1396;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1395))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1397=cj5*cj5;
IkReal x1398=((1.0)*r21);
IkReal x1399=(cj5*sj5);
IkReal x1400=((1.0)*r20);
IkReal x1401=((((-1.0)*r01*x1399*x1400))+((r01*r21))+(((-1.0)*r00*x1398*x1399))+(((-1.0)*r01*x1397*x1398))+((r02*r22))+((r00*r20*x1397)));
j4eval[0]=x1401;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1400)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1401);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1402=cj5*cj5;
IkReal x1403=(r21*sj5);
IkReal x1404=(r11*r21);
IkReal x1405=((1.0)*cj5*r20);
IkReal x1406=((((-1.0)*cj5*r10*x1403))+(((-1.0)*r11*sj5*x1405))+((r10*r20*x1402))+((r12*r22))+(((-1.0)*x1402*x1404))+x1404);
j4eval[0]=x1406;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1405))+((sj0*x1403))))));
j4eval[2]=IKsign(x1406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1407=cj5*cj5;
IkReal x1408=(r21*sj5);
IkReal x1409=(r11*r21);
IkReal x1410=((1.0)*cj5*r20);
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1408))+((r10*r20*x1407))+((r12*r22))+(((-1.0)*r11*sj5*x1410))+(((-1.0)*x1407*x1409))+x1409)),-1);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1410))+((sj0*x1408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1411.value)))+(x1412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1413=IKsin(j4);
IkReal x1414=IKcos(j4);
IkReal x1415=(r11*sj5);
IkReal x1416=(cj5*r00);
IkReal x1417=(cj5*r10);
IkReal x1418=(r21*sj5);
IkReal x1419=(cj5*r20);
IkReal x1420=(r01*sj5);
IkReal x1421=((1.0)*x1414);
IkReal x1422=((1.0)*x1413);
evalcond[0]=(((x1413*x1418))+(((-1.0)*x1419*x1422))+(((-1.0)*r22*x1421)));
evalcond[1]=((((-1.0)*x1418*x1421))+(((-1.0)*r22*x1422))+((x1414*x1419)));
evalcond[2]=(((x1413*x1415))+cj0+(((-1.0)*x1417*x1422))+(((-1.0)*r12*x1421)));
evalcond[3]=(cj0+(((-1.0)*x1420*x1421))+(((-1.0)*r02*x1422))+((x1414*x1416)));
evalcond[4]=((((-1.0)*x1415*x1421))+sj0+(((-1.0)*r12*x1422))+((x1414*x1417)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1416*x1422))+(((-1.0)*r02*x1421))+((x1413*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1423=cj5*cj5;
IkReal x1424=((1.0)*r21);
IkReal x1425=(cj5*sj5);
IkReal x1426=((1.0)*r20);
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1425*x1426))+((r00*r20*x1423))+((r01*r21))+((r02*r22))+(((-1.0)*r01*x1423*x1424))+(((-1.0)*r00*x1424*x1425)))),-1);
if(!x1428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1427.value)+(((1.5707963267949)*(x1428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1429=IKsin(j4);
IkReal x1430=IKcos(j4);
IkReal x1431=(r11*sj5);
IkReal x1432=(cj5*r00);
IkReal x1433=(cj5*r10);
IkReal x1434=(r21*sj5);
IkReal x1435=(cj5*r20);
IkReal x1436=(r01*sj5);
IkReal x1437=((1.0)*x1430);
IkReal x1438=((1.0)*x1429);
evalcond[0]=(((x1429*x1434))+(((-1.0)*x1435*x1438))+(((-1.0)*r22*x1437)));
evalcond[1]=(((x1430*x1435))+(((-1.0)*x1434*x1437))+(((-1.0)*r22*x1438)));
evalcond[2]=(((x1429*x1431))+(((-1.0)*r12*x1437))+cj0+(((-1.0)*x1433*x1438)));
evalcond[3]=((((-1.0)*x1436*x1437))+cj0+((x1430*x1432))+(((-1.0)*r02*x1438)));
evalcond[4]=((((-1.0)*r12*x1438))+sj0+((x1430*x1433))+(((-1.0)*x1431*x1437)));
evalcond[5]=(((x1429*x1436))+(((-1.0)*sj0))+(((-1.0)*r02*x1437))+(((-1.0)*x1432*x1438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1439=((1.0)*cj5);
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1439)))),-1);
if(!x1440.valid){
continue;
}
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1439)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1440.value)))+(x1441.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1442=IKsin(j4);
IkReal x1443=IKcos(j4);
IkReal x1444=(r11*sj5);
IkReal x1445=(cj5*r00);
IkReal x1446=(cj5*r10);
IkReal x1447=(r21*sj5);
IkReal x1448=(cj5*r20);
IkReal x1449=(r01*sj5);
IkReal x1450=((1.0)*x1443);
IkReal x1451=((1.0)*x1442);
evalcond[0]=(((x1442*x1447))+(((-1.0)*r22*x1450))+(((-1.0)*x1448*x1451)));
evalcond[1]=((((-1.0)*x1447*x1450))+(((-1.0)*r22*x1451))+((x1443*x1448)));
evalcond[2]=(((x1442*x1444))+cj0+(((-1.0)*x1446*x1451))+(((-1.0)*r12*x1450)));
evalcond[3]=(((x1443*x1445))+cj0+(((-1.0)*r02*x1451))+(((-1.0)*x1449*x1450)));
evalcond[4]=(sj0+((x1443*x1446))+(((-1.0)*r12*x1451))+(((-1.0)*x1444*x1450)));
evalcond[5]=((((-1.0)*sj0))+((x1442*x1449))+(((-1.0)*x1445*x1451))+(((-1.0)*r02*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1452=((1.0)*cj5);
IkReal x1453=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1452)));
j4eval[0]=x1453;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1452))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1454=((1.0)*cj5);
IkReal x1455=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1454)));
j4eval[0]=x1455;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1454))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1456=cj5*cj5;
IkReal x1457=((1.0)*sj5);
IkReal x1458=(cj5*r20);
IkReal x1459=(r11*r21);
IkReal x1460=(((r10*r20*x1456))+((r12*r22))+(((-1.0)*x1456*x1459))+x1459+(((-1.0)*r11*x1457*x1458))+(((-1.0)*cj5*r10*r21*x1457)));
j4eval[0]=x1460;
j4eval[1]=IKsign(x1460);
j4eval[2]=((IKabs((((cj0*x1458))+(((-1.0)*cj0*r21*x1457)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1461=cj5*cj5;
IkReal x1462=((1.0)*sj5);
IkReal x1463=(cj5*r20);
IkReal x1464=(r11*r21);
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x1462))+((r12*r22))+((r10*r20*x1461))+x1464+(((-1.0)*r11*x1462*x1463))+(((-1.0)*x1461*x1464)))),-1);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal((((cj0*x1463))+(((-1.0)*cj0*r21*x1462)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1465.value)))+(x1466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j4);
IkReal x1468=IKcos(j4);
IkReal x1469=((1.0)*sj0);
IkReal x1470=(cj5*r00);
IkReal x1471=(r11*sj5);
IkReal x1472=(cj5*r10);
IkReal x1473=(r21*sj5);
IkReal x1474=(cj5*r20);
IkReal x1475=(r01*sj5);
IkReal x1476=((1.0)*x1468);
IkReal x1477=((1.0)*x1467);
evalcond[0]=((((-1.0)*r22*x1476))+((x1467*x1473))+(((-1.0)*x1474*x1477)));
evalcond[1]=((((-1.0)*r22*x1477))+((x1468*x1474))+(((-1.0)*x1473*x1476)));
evalcond[2]=(cj0+((x1467*x1471))+(((-1.0)*r12*x1476))+(((-1.0)*x1472*x1477)));
evalcond[3]=((((-1.0)*x1470*x1477))+(((-1.0)*x1469))+((x1467*x1475))+(((-1.0)*r02*x1476)));
evalcond[4]=((((-1.0)*x1475*x1476))+(((-1.0)*r02*x1477))+((x1468*x1470))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1471*x1476))+(((-1.0)*x1469))+(((-1.0)*r12*x1477))+((x1468*x1472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1478=((1.0)*cj5);
CheckValue<IkReal> x1479 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1478))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1479.valid){
continue;
}
CheckValue<IkReal> x1480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1478)))),-1);
if(!x1480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1479.value)+(((1.5707963267949)*(x1480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1481=IKsin(j4);
IkReal x1482=IKcos(j4);
IkReal x1483=((1.0)*sj0);
IkReal x1484=(cj5*r00);
IkReal x1485=(r11*sj5);
IkReal x1486=(cj5*r10);
IkReal x1487=(r21*sj5);
IkReal x1488=(cj5*r20);
IkReal x1489=(r01*sj5);
IkReal x1490=((1.0)*x1482);
IkReal x1491=((1.0)*x1481);
evalcond[0]=(((x1481*x1487))+(((-1.0)*r22*x1490))+(((-1.0)*x1488*x1491)));
evalcond[1]=((((-1.0)*x1487*x1490))+((x1482*x1488))+(((-1.0)*r22*x1491)));
evalcond[2]=((((-1.0)*r12*x1490))+cj0+(((-1.0)*x1486*x1491))+((x1481*x1485)));
evalcond[3]=((((-1.0)*x1483))+((x1481*x1489))+(((-1.0)*x1484*x1491))+(((-1.0)*r02*x1490)));
evalcond[4]=(((x1482*x1484))+(((-1.0)*r02*x1491))+(((-1.0)*cj0))+(((-1.0)*x1489*x1490)));
evalcond[5]=((((-1.0)*r12*x1491))+((x1482*x1486))+(((-1.0)*x1483))+(((-1.0)*x1485*x1490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1492=((1.0)*cj5);
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1492))+(((-1.0)*r00*sj5)))),-1);
if(!x1493.valid){
continue;
}
CheckValue<IkReal> x1494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1493.value)))+(x1494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1495=IKsin(j4);
IkReal x1496=IKcos(j4);
IkReal x1497=((1.0)*sj0);
IkReal x1498=(cj5*r00);
IkReal x1499=(r11*sj5);
IkReal x1500=(cj5*r10);
IkReal x1501=(r21*sj5);
IkReal x1502=(cj5*r20);
IkReal x1503=(r01*sj5);
IkReal x1504=((1.0)*x1496);
IkReal x1505=((1.0)*x1495);
evalcond[0]=((((-1.0)*r22*x1504))+((x1495*x1501))+(((-1.0)*x1502*x1505)));
evalcond[1]=((((-1.0)*r22*x1505))+(((-1.0)*x1501*x1504))+((x1496*x1502)));
evalcond[2]=(cj0+((x1495*x1499))+(((-1.0)*x1500*x1505))+(((-1.0)*r12*x1504)));
evalcond[3]=((((-1.0)*x1498*x1505))+(((-1.0)*x1497))+(((-1.0)*r02*x1504))+((x1495*x1503)));
evalcond[4]=(((x1496*x1498))+(((-1.0)*r02*x1505))+(((-1.0)*x1503*x1504))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1499*x1504))+(((-1.0)*x1497))+((x1496*x1500))+(((-1.0)*r12*x1505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1506=((1.0)*cj5);
IkReal x1507=((((-1.0)*r01*x1506))+(((-1.0)*r00*sj5)));
j4eval[0]=x1507;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1506))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1508=cj5*cj5;
IkReal x1509=((1.0)*r21);
IkReal x1510=(cj5*sj5);
IkReal x1511=((1.0)*r20);
IkReal x1512=(((r01*r21))+(((-1.0)*r00*x1509*x1510))+(((-1.0)*r01*x1510*x1511))+((r00*r20*x1508))+((r02*r22))+(((-1.0)*r01*x1508*x1509)));
j4eval[0]=x1512;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1511))))));
j4eval[2]=IKsign(x1512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1513=cj5*cj5;
IkReal x1514=(r21*sj5);
IkReal x1515=(r11*r21);
IkReal x1516=((1.0)*cj5*r20);
IkReal x1517=((((-1.0)*x1513*x1515))+((r12*r22))+(((-1.0)*r11*sj5*x1516))+x1515+((r10*r20*x1513))+(((-1.0)*cj5*r10*x1514)));
j4eval[0]=x1517;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1516))+((sj0*x1514)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1518=cj5*cj5;
IkReal x1519=(r21*sj5);
IkReal x1520=(r11*r21);
IkReal x1521=((1.0)*cj5*r20);
CheckValue<IkReal> x1522=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1518*x1520))+((r12*r22))+(((-1.0)*r11*sj5*x1521))+x1520+((r10*r20*x1518))+(((-1.0)*cj5*r10*x1519)))),-1);
if(!x1522.valid){
continue;
}
CheckValue<IkReal> x1523 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1521))+((sj0*x1519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1522.value)))+(x1523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1524=IKsin(j4);
IkReal x1525=IKcos(j4);
IkReal x1526=(r11*sj5);
IkReal x1527=(cj5*r00);
IkReal x1528=(cj5*r10);
IkReal x1529=(r21*sj5);
IkReal x1530=(cj5*r20);
IkReal x1531=(r01*sj5);
IkReal x1532=((1.0)*x1525);
IkReal x1533=((1.0)*x1524);
evalcond[0]=(((x1524*x1529))+(((-1.0)*x1530*x1533))+(((-1.0)*r22*x1532)));
evalcond[1]=((((-1.0)*x1529*x1532))+((x1525*x1530))+(((-1.0)*r22*x1533)));
evalcond[2]=(((x1524*x1526))+(((-1.0)*r12*x1532))+cj0+(((-1.0)*x1528*x1533)));
evalcond[3]=(((x1525*x1527))+cj0+(((-1.0)*x1531*x1532))+(((-1.0)*r02*x1533)));
evalcond[4]=(((x1525*x1528))+sj0+(((-1.0)*r12*x1533))+(((-1.0)*x1526*x1532)));
evalcond[5]=((((-1.0)*sj0))+((x1524*x1531))+(((-1.0)*r02*x1532))+(((-1.0)*x1527*x1533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1534=cj5*cj5;
IkReal x1535=((1.0)*r21);
IkReal x1536=(cj5*sj5);
IkReal x1537=((1.0)*r20);
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1537)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1534*x1535))+(((-1.0)*r01*x1536*x1537))+((r02*r22))+(((-1.0)*r00*x1535*x1536))+((r00*r20*x1534)))),-1);
if(!x1539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1538.value)+(((1.5707963267949)*(x1539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1540=IKsin(j4);
IkReal x1541=IKcos(j4);
IkReal x1542=(r11*sj5);
IkReal x1543=(cj5*r00);
IkReal x1544=(cj5*r10);
IkReal x1545=(r21*sj5);
IkReal x1546=(cj5*r20);
IkReal x1547=(r01*sj5);
IkReal x1548=((1.0)*x1541);
IkReal x1549=((1.0)*x1540);
evalcond[0]=((((-1.0)*x1546*x1549))+(((-1.0)*r22*x1548))+((x1540*x1545)));
evalcond[1]=(((x1541*x1546))+(((-1.0)*r22*x1549))+(((-1.0)*x1545*x1548)));
evalcond[2]=(cj0+((x1540*x1542))+(((-1.0)*x1544*x1549))+(((-1.0)*r12*x1548)));
evalcond[3]=((((-1.0)*r02*x1549))+cj0+((x1541*x1543))+(((-1.0)*x1547*x1548)));
evalcond[4]=(sj0+((x1541*x1544))+(((-1.0)*x1542*x1548))+(((-1.0)*r12*x1549)));
evalcond[5]=((((-1.0)*x1543*x1549))+(((-1.0)*sj0))+(((-1.0)*r02*x1548))+((x1540*x1547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1550=((1.0)*cj5);
CheckValue<IkReal> x1551 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1551.valid){
continue;
}
CheckValue<IkReal> x1552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1550)))),-1);
if(!x1552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1551.value)+(((1.5707963267949)*(x1552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1553=IKsin(j4);
IkReal x1554=IKcos(j4);
IkReal x1555=(r11*sj5);
IkReal x1556=(cj5*r00);
IkReal x1557=(cj5*r10);
IkReal x1558=(r21*sj5);
IkReal x1559=(cj5*r20);
IkReal x1560=(r01*sj5);
IkReal x1561=((1.0)*x1554);
IkReal x1562=((1.0)*x1553);
evalcond[0]=((((-1.0)*x1559*x1562))+((x1553*x1558))+(((-1.0)*r22*x1561)));
evalcond[1]=((((-1.0)*r22*x1562))+((x1554*x1559))+(((-1.0)*x1558*x1561)));
evalcond[2]=(((x1553*x1555))+cj0+(((-1.0)*x1557*x1562))+(((-1.0)*r12*x1561)));
evalcond[3]=((((-1.0)*r02*x1562))+cj0+(((-1.0)*x1560*x1561))+((x1554*x1556)));
evalcond[4]=(sj0+(((-1.0)*x1555*x1561))+((x1554*x1557))+(((-1.0)*r12*x1562)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1561))+((x1553*x1560))+(((-1.0)*x1556*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1563=IKcos(j0);
IkReal x1564=IKsin(j0);
evalcond[0]=((((-0.163941)*x1564))+(((-0.612)*x1563))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x1563))+(((-0.612)*x1564))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1565=((1.0)*cj5);
IkReal x1566=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1565)));
j4eval[0]=x1566;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1565)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1567=cj5*cj5;
IkReal x1568=((1.0)*r21);
IkReal x1569=(cj5*sj5);
IkReal x1570=((1.0)*r20);
IkReal x1571=((((-1.0)*r01*x1569*x1570))+((r01*r21))+((r00*r20*x1567))+((r02*r22))+(((-1.0)*r01*x1567*x1568))+(((-1.0)*r00*x1568*x1569)));
j4eval[0]=x1571;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1570)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1572=cj5*cj5;
IkReal x1573=(r21*sj5);
IkReal x1574=(r11*r21);
IkReal x1575=((1.0)*cj5*r20);
IkReal x1576=((((-1.0)*cj5*r10*x1573))+(((-1.0)*r11*sj5*x1575))+((r12*r22))+(((-1.0)*x1572*x1574))+x1574+((r10*r20*x1572)));
j4eval[0]=x1576;
j4eval[1]=((IKabs((((sj0*x1573))+(((-1.0)*sj0*x1575)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1577=cj5*cj5;
IkReal x1578=(r21*sj5);
IkReal x1579=(r11*r21);
IkReal x1580=((1.0)*cj5*r20);
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1578))+((r12*r22))+x1579+(((-1.0)*r11*sj5*x1580))+(((-1.0)*x1577*x1579))+((r10*r20*x1577)))),-1);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1580))+((sj0*x1578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1581.value)))+(x1582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1583=IKsin(j4);
IkReal x1584=IKcos(j4);
IkReal x1585=(r11*sj5);
IkReal x1586=(cj5*r00);
IkReal x1587=(cj5*r10);
IkReal x1588=(r21*sj5);
IkReal x1589=(cj5*r20);
IkReal x1590=(r01*sj5);
IkReal x1591=((1.0)*x1584);
IkReal x1592=((1.0)*x1583);
evalcond[0]=(((x1583*x1588))+(((-1.0)*x1589*x1592))+(((-1.0)*r22*x1591)));
evalcond[1]=(((x1584*x1589))+(((-1.0)*x1588*x1591))+(((-1.0)*r22*x1592)));
evalcond[2]=(cj0+((x1583*x1585))+(((-1.0)*x1587*x1592))+(((-1.0)*r12*x1591)));
evalcond[3]=(cj0+((x1584*x1586))+(((-1.0)*r02*x1592))+(((-1.0)*x1590*x1591)));
evalcond[4]=((((-1.0)*x1585*x1591))+sj0+((x1584*x1587))+(((-1.0)*r12*x1592)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1591))+((x1583*x1590))+(((-1.0)*x1586*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1593=cj5*cj5;
IkReal x1594=((1.0)*r21);
IkReal x1595=(cj5*sj5);
IkReal x1596=((1.0)*r20);
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*x1593*x1594))+(((-1.0)*r01*x1595*x1596))+(((-1.0)*r00*x1594*x1595))+((r00*r20*x1593))+((r02*r22)))),-1);
if(!x1598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1597.value)+(((1.5707963267949)*(x1598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1599=IKsin(j4);
IkReal x1600=IKcos(j4);
IkReal x1601=(r11*sj5);
IkReal x1602=(cj5*r00);
IkReal x1603=(cj5*r10);
IkReal x1604=(r21*sj5);
IkReal x1605=(cj5*r20);
IkReal x1606=(r01*sj5);
IkReal x1607=((1.0)*x1600);
IkReal x1608=((1.0)*x1599);
evalcond[0]=(((x1599*x1604))+(((-1.0)*r22*x1607))+(((-1.0)*x1605*x1608)));
evalcond[1]=(((x1600*x1605))+(((-1.0)*r22*x1608))+(((-1.0)*x1604*x1607)));
evalcond[2]=(cj0+((x1599*x1601))+(((-1.0)*x1603*x1608))+(((-1.0)*r12*x1607)));
evalcond[3]=(cj0+((x1600*x1602))+(((-1.0)*r02*x1608))+(((-1.0)*x1606*x1607)));
evalcond[4]=(sj0+((x1600*x1603))+(((-1.0)*x1601*x1607))+(((-1.0)*r12*x1608)));
evalcond[5]=((((-1.0)*sj0))+((x1599*x1606))+(((-1.0)*r02*x1607))+(((-1.0)*x1602*x1608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1609=((1.0)*cj5);
CheckValue<IkReal> x1610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1609)))),-1);
if(!x1610.valid){
continue;
}
CheckValue<IkReal> x1611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1609))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1610.value)))+(x1611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1612=IKsin(j4);
IkReal x1613=IKcos(j4);
IkReal x1614=(r11*sj5);
IkReal x1615=(cj5*r00);
IkReal x1616=(cj5*r10);
IkReal x1617=(r21*sj5);
IkReal x1618=(cj5*r20);
IkReal x1619=(r01*sj5);
IkReal x1620=((1.0)*x1613);
IkReal x1621=((1.0)*x1612);
evalcond[0]=((((-1.0)*r22*x1620))+((x1612*x1617))+(((-1.0)*x1618*x1621)));
evalcond[1]=((((-1.0)*x1617*x1620))+(((-1.0)*r22*x1621))+((x1613*x1618)));
evalcond[2]=((((-1.0)*r12*x1620))+(((-1.0)*x1616*x1621))+cj0+((x1612*x1614)));
evalcond[3]=((((-1.0)*x1619*x1620))+cj0+(((-1.0)*r02*x1621))+((x1613*x1615)));
evalcond[4]=((((-1.0)*r12*x1621))+sj0+(((-1.0)*x1614*x1620))+((x1613*x1616)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1620))+((x1612*x1619))+(((-1.0)*x1615*x1621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1622=IKcos(j0);
IkReal x1623=IKsin(j0);
evalcond[0]=((((-0.163941)*x1623))+(((-0.612)*x1622))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x1622))+(((-0.612)*x1623))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1624=((1.0)*cj5);
IkReal x1625=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1624)));
j4eval[0]=x1625;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1624)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1626=((1.0)*cj5);
IkReal x1627=((((-1.0)*r11*x1626))+(((-1.0)*r10*sj5)));
j4eval[0]=x1627;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1626))))));
j4eval[2]=IKsign(x1627);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1628=cj5*cj5;
IkReal x1629=((1.0)*sj5);
IkReal x1630=(cj5*r20);
IkReal x1631=(r11*r21);
IkReal x1632=(x1631+((r10*r20*x1628))+((r12*r22))+(((-1.0)*x1628*x1631))+(((-1.0)*cj5*r10*r21*x1629))+(((-1.0)*r11*x1629*x1630)));
j4eval[0]=x1632;
j4eval[1]=IKsign(x1632);
j4eval[2]=((IKabs((((cj0*x1630))+(((-1.0)*cj0*r21*x1629)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1633=cj5*cj5;
IkReal x1634=((1.0)*sj5);
IkReal x1635=(cj5*r20);
IkReal x1636=(r11*r21);
CheckValue<IkReal> x1637 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1634))+((cj0*x1635)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1637.valid){
continue;
}
CheckValue<IkReal> x1638=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1634*x1635))+x1636+(((-1.0)*x1633*x1636))+(((-1.0)*cj5*r10*r21*x1634))+((r12*r22))+((r10*r20*x1633)))),-1);
if(!x1638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1637.value)+(((1.5707963267949)*(x1638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1639=IKsin(j4);
IkReal x1640=IKcos(j4);
IkReal x1641=((1.0)*sj0);
IkReal x1642=(cj5*r00);
IkReal x1643=(r11*sj5);
IkReal x1644=(cj5*r10);
IkReal x1645=(r21*sj5);
IkReal x1646=(cj5*r20);
IkReal x1647=(r01*sj5);
IkReal x1648=((1.0)*x1640);
IkReal x1649=((1.0)*x1639);
evalcond[0]=((((-1.0)*x1646*x1649))+(((-1.0)*r22*x1648))+((x1639*x1645)));
evalcond[1]=(((x1640*x1646))+(((-1.0)*r22*x1649))+(((-1.0)*x1645*x1648)));
evalcond[2]=(cj0+(((-1.0)*r12*x1648))+(((-1.0)*x1644*x1649))+((x1639*x1643)));
evalcond[3]=((((-1.0)*x1642*x1649))+(((-1.0)*x1641))+((x1639*x1647))+(((-1.0)*r02*x1648)));
evalcond[4]=((((-1.0)*x1647*x1648))+((x1640*x1642))+(((-1.0)*r02*x1649))+(((-1.0)*cj0)));
evalcond[5]=(((x1640*x1644))+(((-1.0)*r12*x1649))+(((-1.0)*x1641))+(((-1.0)*x1643*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1650=((1.0)*cj5);
CheckValue<IkReal> x1651=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1650)))),-1);
if(!x1651.valid){
continue;
}
CheckValue<IkReal> x1652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1650))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1651.value)))+(x1652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1653=IKsin(j4);
IkReal x1654=IKcos(j4);
IkReal x1655=((1.0)*sj0);
IkReal x1656=(cj5*r00);
IkReal x1657=(r11*sj5);
IkReal x1658=(cj5*r10);
IkReal x1659=(r21*sj5);
IkReal x1660=(cj5*r20);
IkReal x1661=(r01*sj5);
IkReal x1662=((1.0)*x1654);
IkReal x1663=((1.0)*x1653);
evalcond[0]=((((-1.0)*r22*x1662))+(((-1.0)*x1660*x1663))+((x1653*x1659)));
evalcond[1]=(((x1654*x1660))+(((-1.0)*r22*x1663))+(((-1.0)*x1659*x1662)));
evalcond[2]=(cj0+(((-1.0)*r12*x1662))+(((-1.0)*x1658*x1663))+((x1653*x1657)));
evalcond[3]=((((-1.0)*x1656*x1663))+(((-1.0)*x1655))+(((-1.0)*r02*x1662))+((x1653*x1661)));
evalcond[4]=(((x1654*x1656))+(((-1.0)*x1661*x1662))+(((-1.0)*r02*x1663))+(((-1.0)*cj0)));
evalcond[5]=(((x1654*x1658))+(((-1.0)*r12*x1663))+(((-1.0)*x1655))+(((-1.0)*x1657*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1664=((1.0)*cj5);
CheckValue<IkReal> x1665 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1664)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1665.valid){
continue;
}
CheckValue<IkReal> x1666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1664))+(((-1.0)*r00*sj5)))),-1);
if(!x1666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1665.value)+(((1.5707963267949)*(x1666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1667=IKsin(j4);
IkReal x1668=IKcos(j4);
IkReal x1669=((1.0)*sj0);
IkReal x1670=(cj5*r00);
IkReal x1671=(r11*sj5);
IkReal x1672=(cj5*r10);
IkReal x1673=(r21*sj5);
IkReal x1674=(cj5*r20);
IkReal x1675=(r01*sj5);
IkReal x1676=((1.0)*x1668);
IkReal x1677=((1.0)*x1667);
evalcond[0]=(((x1667*x1673))+(((-1.0)*x1674*x1677))+(((-1.0)*r22*x1676)));
evalcond[1]=((((-1.0)*x1673*x1676))+((x1668*x1674))+(((-1.0)*r22*x1677)));
evalcond[2]=((((-1.0)*x1672*x1677))+cj0+((x1667*x1671))+(((-1.0)*r12*x1676)));
evalcond[3]=((((-1.0)*r02*x1676))+((x1667*x1675))+(((-1.0)*x1669))+(((-1.0)*x1670*x1677)));
evalcond[4]=((((-1.0)*r02*x1677))+((x1668*x1670))+(((-1.0)*cj0))+(((-1.0)*x1675*x1676)));
evalcond[5]=(((x1668*x1672))+(((-1.0)*x1671*x1676))+(((-1.0)*r12*x1677))+(((-1.0)*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1678=((1.0)*cj5);
IkReal x1679=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1678)));
j4eval[0]=x1679;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1678))))));
j4eval[2]=IKsign(x1679);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1680=cj5*cj5;
IkReal x1681=((1.0)*r21);
IkReal x1682=(cj5*sj5);
IkReal x1683=((1.0)*r20);
IkReal x1684=((((-1.0)*r01*x1682*x1683))+((r01*r21))+(((-1.0)*r01*x1680*x1681))+((r00*r20*x1680))+(((-1.0)*r00*x1681*x1682))+((r02*r22)));
j4eval[0]=x1684;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1683)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1685=cj5*cj5;
IkReal x1686=(r21*sj5);
IkReal x1687=(r11*r21);
IkReal x1688=((1.0)*cj5*r20);
IkReal x1689=((((-1.0)*cj5*r10*x1686))+(((-1.0)*r11*sj5*x1688))+x1687+((r12*r22))+((r10*r20*x1685))+(((-1.0)*x1685*x1687)));
j4eval[0]=x1689;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1688))+((sj0*x1686))))));
j4eval[2]=IKsign(x1689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1690=cj5*cj5;
IkReal x1691=(r21*sj5);
IkReal x1692=(r11*r21);
IkReal x1693=((1.0)*cj5*r20);
CheckValue<IkReal> x1694=IKPowWithIntegerCheck(IKsign((x1692+((r12*r22))+(((-1.0)*r11*sj5*x1693))+((r10*r20*x1690))+(((-1.0)*x1690*x1692))+(((-1.0)*cj5*r10*x1691)))),-1);
if(!x1694.valid){
continue;
}
CheckValue<IkReal> x1695 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1693))+((sj0*x1691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1694.value)))+(x1695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1696=IKsin(j4);
IkReal x1697=IKcos(j4);
IkReal x1698=(r11*sj5);
IkReal x1699=(cj5*r00);
IkReal x1700=(cj5*r10);
IkReal x1701=(r21*sj5);
IkReal x1702=(cj5*r20);
IkReal x1703=(r01*sj5);
IkReal x1704=((1.0)*x1697);
IkReal x1705=((1.0)*x1696);
evalcond[0]=((((-1.0)*x1702*x1705))+((x1696*x1701))+(((-1.0)*r22*x1704)));
evalcond[1]=(((x1697*x1702))+(((-1.0)*r22*x1705))+(((-1.0)*x1701*x1704)));
evalcond[2]=(cj0+(((-1.0)*x1700*x1705))+((x1696*x1698))+(((-1.0)*r12*x1704)));
evalcond[3]=(cj0+(((-1.0)*r02*x1705))+(((-1.0)*x1703*x1704))+((x1697*x1699)));
evalcond[4]=(((x1697*x1700))+(((-1.0)*x1698*x1704))+sj0+(((-1.0)*r12*x1705)));
evalcond[5]=((((-1.0)*sj0))+((x1696*x1703))+(((-1.0)*x1699*x1705))+(((-1.0)*r02*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1706=cj5*cj5;
IkReal x1707=((1.0)*r21);
IkReal x1708=(cj5*sj5);
IkReal x1709=((1.0)*r20);
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1707*x1708))+(((-1.0)*r01*x1706*x1707))+((r01*r21))+((r00*r20*x1706))+((r02*r22))+(((-1.0)*r01*x1708*x1709)))),-1);
if(!x1710.valid){
continue;
}
CheckValue<IkReal> x1711 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1709)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1711.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1710.value)))+(x1711.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1712=IKsin(j4);
IkReal x1713=IKcos(j4);
IkReal x1714=(r11*sj5);
IkReal x1715=(cj5*r00);
IkReal x1716=(cj5*r10);
IkReal x1717=(r21*sj5);
IkReal x1718=(cj5*r20);
IkReal x1719=(r01*sj5);
IkReal x1720=((1.0)*x1713);
IkReal x1721=((1.0)*x1712);
evalcond[0]=((((-1.0)*r22*x1720))+((x1712*x1717))+(((-1.0)*x1718*x1721)));
evalcond[1]=((((-1.0)*r22*x1721))+((x1713*x1718))+(((-1.0)*x1717*x1720)));
evalcond[2]=(cj0+((x1712*x1714))+(((-1.0)*r12*x1720))+(((-1.0)*x1716*x1721)));
evalcond[3]=(cj0+((x1713*x1715))+(((-1.0)*x1719*x1720))+(((-1.0)*r02*x1721)));
evalcond[4]=(sj0+(((-1.0)*r12*x1721))+((x1713*x1716))+(((-1.0)*x1714*x1720)));
evalcond[5]=((((-1.0)*x1715*x1721))+(((-1.0)*sj0))+((x1712*x1719))+(((-1.0)*r02*x1720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1722=((1.0)*cj5);
CheckValue<IkReal> x1723=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1722))+(((-1.0)*r00*sj5)))),-1);
if(!x1723.valid){
continue;
}
CheckValue<IkReal> x1724 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1722)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1723.value)))+(x1724.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1725=IKsin(j4);
IkReal x1726=IKcos(j4);
IkReal x1727=(r11*sj5);
IkReal x1728=(cj5*r00);
IkReal x1729=(cj5*r10);
IkReal x1730=(r21*sj5);
IkReal x1731=(cj5*r20);
IkReal x1732=(r01*sj5);
IkReal x1733=((1.0)*x1726);
IkReal x1734=((1.0)*x1725);
evalcond[0]=((((-1.0)*x1731*x1734))+((x1725*x1730))+(((-1.0)*r22*x1733)));
evalcond[1]=(((x1726*x1731))+(((-1.0)*x1730*x1733))+(((-1.0)*r22*x1734)));
evalcond[2]=(((x1725*x1727))+cj0+(((-1.0)*r12*x1733))+(((-1.0)*x1729*x1734)));
evalcond[3]=(cj0+((x1726*x1728))+(((-1.0)*x1732*x1733))+(((-1.0)*r02*x1734)));
evalcond[4]=(sj0+(((-1.0)*r12*x1734))+((x1726*x1729))+(((-1.0)*x1727*x1733)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1728*x1734))+((x1725*x1732))+(((-1.0)*r02*x1733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1735=((1.0)*cj5);
IkReal x1736=((((-1.0)*r01*x1735))+(((-1.0)*r00*sj5)));
j4eval[0]=x1736;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1735)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1737=((1.0)*cj5);
IkReal x1738=((((-1.0)*r11*x1737))+(((-1.0)*r10*sj5)));
j4eval[0]=x1738;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1737))))));
j4eval[2]=IKsign(x1738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1739=cj5*cj5;
IkReal x1740=((1.0)*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=(r11*r21);
IkReal x1743=((((-1.0)*r11*x1740*x1741))+(((-1.0)*cj5*r10*r21*x1740))+x1742+(((-1.0)*x1739*x1742))+((r12*r22))+((r10*r20*x1739)));
j4eval[0]=x1743;
j4eval[1]=IKsign(x1743);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1740))+((cj0*x1741)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1744=cj5*cj5;
IkReal x1745=((1.0)*sj5);
IkReal x1746=(cj5*r20);
IkReal x1747=(r11*r21);
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign((((r10*r20*x1744))+(((-1.0)*cj5*r10*r21*x1745))+x1747+((r12*r22))+(((-1.0)*r11*x1745*x1746))+(((-1.0)*x1744*x1747)))),-1);
if(!x1748.valid){
continue;
}
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1745))+((cj0*x1746)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1748.value)))+(x1749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1750=IKsin(j4);
IkReal x1751=IKcos(j4);
IkReal x1752=((1.0)*sj0);
IkReal x1753=(cj5*r00);
IkReal x1754=(r11*sj5);
IkReal x1755=(cj5*r10);
IkReal x1756=(r21*sj5);
IkReal x1757=(cj5*r20);
IkReal x1758=(r01*sj5);
IkReal x1759=((1.0)*x1751);
IkReal x1760=((1.0)*x1750);
evalcond[0]=((((-1.0)*r22*x1759))+((x1750*x1756))+(((-1.0)*x1757*x1760)));
evalcond[1]=((((-1.0)*x1756*x1759))+(((-1.0)*r22*x1760))+((x1751*x1757)));
evalcond[2]=((((-1.0)*r12*x1759))+cj0+(((-1.0)*x1755*x1760))+((x1750*x1754)));
evalcond[3]=((((-1.0)*x1753*x1760))+((x1750*x1758))+(((-1.0)*x1752))+(((-1.0)*r02*x1759)));
evalcond[4]=((((-1.0)*x1758*x1759))+(((-1.0)*r02*x1760))+(((-1.0)*cj0))+((x1751*x1753)));
evalcond[5]=((((-1.0)*r12*x1760))+(((-1.0)*x1752))+(((-1.0)*x1754*x1759))+((x1751*x1755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1761=((1.0)*cj5);
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1761))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1761)))),-1);
if(!x1763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1762.value)+(((1.5707963267949)*(x1763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1764=IKsin(j4);
IkReal x1765=IKcos(j4);
IkReal x1766=((1.0)*sj0);
IkReal x1767=(cj5*r00);
IkReal x1768=(r11*sj5);
IkReal x1769=(cj5*r10);
IkReal x1770=(r21*sj5);
IkReal x1771=(cj5*r20);
IkReal x1772=(r01*sj5);
IkReal x1773=((1.0)*x1765);
IkReal x1774=((1.0)*x1764);
evalcond[0]=(((x1764*x1770))+(((-1.0)*x1771*x1774))+(((-1.0)*r22*x1773)));
evalcond[1]=(((x1765*x1771))+(((-1.0)*x1770*x1773))+(((-1.0)*r22*x1774)));
evalcond[2]=(cj0+((x1764*x1768))+(((-1.0)*r12*x1773))+(((-1.0)*x1769*x1774)));
evalcond[3]=((((-1.0)*x1766))+((x1764*x1772))+(((-1.0)*x1767*x1774))+(((-1.0)*r02*x1773)));
evalcond[4]=((((-1.0)*x1772*x1773))+((x1765*x1767))+(((-1.0)*r02*x1774))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1766))+((x1765*x1769))+(((-1.0)*x1768*x1773))+(((-1.0)*r12*x1774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1775=((1.0)*cj5);
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1775)))),-1);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1775)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1776.value)))+(x1777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1778=IKsin(j4);
IkReal x1779=IKcos(j4);
IkReal x1780=((1.0)*sj0);
IkReal x1781=(cj5*r00);
IkReal x1782=(r11*sj5);
IkReal x1783=(cj5*r10);
IkReal x1784=(r21*sj5);
IkReal x1785=(cj5*r20);
IkReal x1786=(r01*sj5);
IkReal x1787=((1.0)*x1779);
IkReal x1788=((1.0)*x1778);
evalcond[0]=((((-1.0)*r22*x1787))+((x1778*x1784))+(((-1.0)*x1785*x1788)));
evalcond[1]=((((-1.0)*r22*x1788))+((x1779*x1785))+(((-1.0)*x1784*x1787)));
evalcond[2]=((((-1.0)*x1783*x1788))+cj0+(((-1.0)*r12*x1787))+((x1778*x1782)));
evalcond[3]=((((-1.0)*x1780))+((x1778*x1786))+(((-1.0)*x1781*x1788))+(((-1.0)*r02*x1787)));
evalcond[4]=(((x1779*x1781))+(((-1.0)*x1786*x1787))+(((-1.0)*r02*x1788))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1780))+(((-1.0)*r12*x1788))+((x1779*x1783))+(((-1.0)*x1782*x1787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1789=(sj1*sj2);
IkReal x1790=(r00*sj5);
IkReal x1791=((612000.0)*cj1);
IkReal x1792=(cj1*cj2);
IkReal x1793=(cj5*r01);
IkReal x1794=((1000000.0)*px);
CheckValue<IkReal> x1795=IKPowWithIntegerCheck(((((163941.0)*x1789))+(((-163941.0)*x1792))),-1);
if(!x1795.valid){
continue;
}
CheckValue<IkReal> x1796=IKPowWithIntegerCheck((x1789+(((-1.0)*x1792))),-1);
if(!x1796.valid){
continue;
}
if( IKabs(((x1795.value)*(((((-1.0)*x1790*x1791))+(((456600.0)*x1789*x1790))+(((456600.0)*x1789*x1793))+(((-456600.0)*x1790*x1792))+(((-456600.0)*x1792*x1793))+(((-1.0)*x1789*x1794))+((x1792*x1794))+(((-1.0)*x1791*x1793)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1796.value)*(((((-1.0)*x1790))+(((-1.0)*x1793)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1795.value)*(((((-1.0)*x1790*x1791))+(((456600.0)*x1789*x1790))+(((456600.0)*x1789*x1793))+(((-456600.0)*x1790*x1792))+(((-456600.0)*x1792*x1793))+(((-1.0)*x1789*x1794))+((x1792*x1794))+(((-1.0)*x1791*x1793))))))+IKsqr(((x1796.value)*(((((-1.0)*x1790))+(((-1.0)*x1793))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1795.value)*(((((-1.0)*x1790*x1791))+(((456600.0)*x1789*x1790))+(((456600.0)*x1789*x1793))+(((-456600.0)*x1790*x1792))+(((-456600.0)*x1792*x1793))+(((-1.0)*x1789*x1794))+((x1792*x1794))+(((-1.0)*x1791*x1793))))), ((x1796.value)*(((((-1.0)*x1790))+(((-1.0)*x1793))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1797=IKcos(j0);
IkReal x1798=IKsin(j0);
IkReal x1799=(cj5*r01);
IkReal x1800=(sj1*sj2);
IkReal x1801=((0.1157)*sj5);
IkReal x1802=(cj5*r11);
IkReal x1803=(cj1*cj2);
IkReal x1804=((0.5723)*x1798);
IkReal x1805=(cj1*x1798);
IkReal x1806=((0.5723)*x1797);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1797*x1803))+x1799+((x1797*x1800)));
evalcond[1]=((((-1.0)*x1798*x1803))+((r10*sj5))+((x1798*x1800))+x1802);
evalcond[2]=((((-1.0)*r00*x1801))+(((-0.1157)*x1799))+((x1803*x1806))+(((-1.0)*px))+(((-1.0)*x1800*x1806))+(((0.612)*cj1*x1797))+(((-0.163941)*x1798)));
evalcond[3]=((((-1.0)*r10*x1801))+(((0.612)*x1805))+((x1803*x1804))+(((-1.0)*py))+(((-1.0)*x1800*x1804))+(((0.163941)*x1797))+(((-0.1157)*x1802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1807=((1.0)*cj5);
IkReal x1808=((((-1.0)*r01*x1807))+(((-1.0)*r00*sj5)));
j4eval[0]=x1808;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1807))))));
j4eval[2]=IKsign(x1808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1809=((1.0)*cj5);
IkReal x1810=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1809)));
j4eval[0]=x1810;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1809))))));
j4eval[2]=IKsign(x1810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1811=((1.0)*sj0);
IkReal x1812=((1.0)*cj0);
IkReal x1813=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1813;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1811))+(((-1.0)*r01*sj5*x1812)))))+(IKabs(((((-1.0)*r02*x1812))+(((-1.0)*r12*x1811))))));
j4eval[2]=IKsign(x1813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1814=((-1.0)*r20);
IkReal x1816 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1816)==0){
continue;
}
IkReal x1815=pow(x1816,-0.5);
CheckValue<IkReal> x1817 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1814),IKFAST_ATAN2_MAGTHRESH);
if(!x1817.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1817.value));
IkReal gconst79=(r21*x1815);
IkReal gconst80=(x1814*x1815);
CheckValue<IkReal> x1818 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1818.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1818.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1819=((-1.0)*r20);
IkReal x1820=x1815;
CheckValue<IkReal> x1822 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1819),IKFAST_ATAN2_MAGTHRESH);
if(!x1822.valid){
continue;
}
IkReal x1821=((-1.0)*(x1822.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1821;
IkReal gconst78=x1821;
IkReal gconst79=(r21*x1820);
IkReal gconst80=(x1819*x1820);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1823=((-1.0)*r20);
IkReal x1824=x1815;
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1823),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
IkReal x1825=((-1.0)*(x1826.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1825;
IkReal gconst78=x1825;
IkReal gconst79=(r21*x1824);
IkReal gconst80=(x1823*x1824);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1827=((-1.0)*r20);
IkReal x1828=x1815;
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1827),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
IkReal x1829=((-1.0)*(x1830.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1829;
IkReal gconst78=x1829;
IkReal gconst79=(r21*x1828);
IkReal gconst80=(x1827*x1828);
IkReal x1831=r22*r22;
CheckValue<IkReal> x1834=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1831))),-1);
if(!x1834.valid){
continue;
}
IkReal x1832=x1834.value;
IkReal x1833=(x1831+(((2.0)*x1832*(r20*r20)*(r21*r21)))+((x1832*(r20*r20*r20*r20)))+((x1832*(r21*r21*r21*r21))));
j4eval[0]=x1833;
j4eval[1]=IKsign(x1833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1835=(sj1*sj2);
IkReal x1836=(gconst80*r20);
IkReal x1837=(gconst79*r21);
IkReal x1838=(cj1*cj2);
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1838))+((r22*x1835)))),IkReal(((((-1.0)*x1837*x1838))+((x1835*x1837))+(((-1.0)*x1835*x1836))+((x1836*x1838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1836*x1837))+(x1837*x1837)+(x1836*x1836))),-1);
if(!x1840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1839.value)+(((1.5707963267949)*(x1840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1841=IKsin(j4);
IkReal x1842=IKcos(j4);
IkReal x1843=(gconst79*r01);
IkReal x1844=(gconst79*r21);
IkReal x1845=((1.0)*cj2);
IkReal x1846=(gconst79*r11);
IkReal x1847=((1.0)*sj0);
IkReal x1848=(cj1*sj2);
IkReal x1849=((1.0)*x1842);
IkReal x1850=(gconst80*x1842);
IkReal x1851=((1.0)*x1841);
IkReal x1852=(gconst80*x1851);
evalcond[0]=((((-1.0)*r22*x1849))+((x1841*x1844))+(((-1.0)*r20*x1852)));
evalcond[1]=(cj0+(((-1.0)*r12*x1849))+((x1841*x1846))+(((-1.0)*r10*x1852)));
evalcond[2]=((((-1.0)*x1847))+(((-1.0)*r02*x1849))+(((-1.0)*r00*x1852))+((x1841*x1843)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x1851))+(((-1.0)*cj1*x1845))+(((-1.0)*x1844*x1849))+((r20*x1850)));
evalcond[4]=((((-1.0)*x1843*x1849))+(((-1.0)*cj0*x1848))+(((-1.0)*cj0*sj1*x1845))+((r00*x1850))+(((-1.0)*r02*x1851)));
evalcond[5]=(((r10*x1850))+(((-1.0)*sj0*sj1*x1845))+(((-1.0)*r12*x1851))+(((-1.0)*x1847*x1848))+(((-1.0)*x1846*x1849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1853=((1.0)*gconst80);
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1853))+(((-1.0)*gconst79*r10)))),-1);
if(!x1854.valid){
continue;
}
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1854.value)))+(x1855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1856=IKsin(j4);
IkReal x1857=IKcos(j4);
IkReal x1858=(gconst79*r01);
IkReal x1859=(gconst79*r21);
IkReal x1860=((1.0)*cj2);
IkReal x1861=(gconst79*r11);
IkReal x1862=((1.0)*sj0);
IkReal x1863=(cj1*sj2);
IkReal x1864=((1.0)*x1857);
IkReal x1865=(gconst80*x1857);
IkReal x1866=((1.0)*x1856);
IkReal x1867=(gconst80*x1866);
evalcond[0]=(((x1856*x1859))+(((-1.0)*r20*x1867))+(((-1.0)*r22*x1864)));
evalcond[1]=(cj0+((x1856*x1861))+(((-1.0)*r12*x1864))+(((-1.0)*r10*x1867)));
evalcond[2]=((((-1.0)*r02*x1864))+((x1856*x1858))+(((-1.0)*r00*x1867))+(((-1.0)*x1862)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1860))+(((-1.0)*x1859*x1864))+((r20*x1865))+(((-1.0)*r22*x1866)));
evalcond[4]=((((-1.0)*r02*x1866))+(((-1.0)*cj0*x1863))+(((-1.0)*cj0*sj1*x1860))+(((-1.0)*x1858*x1864))+((r00*x1865)));
evalcond[5]=((((-1.0)*x1862*x1863))+(((-1.0)*r12*x1866))+(((-1.0)*x1861*x1864))+((r10*x1865))+(((-1.0)*sj0*sj1*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1868=((1.0)*gconst80);
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1868)))),-1);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1868)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1869.value)))+(x1870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1871=IKsin(j4);
IkReal x1872=IKcos(j4);
IkReal x1873=(gconst79*r01);
IkReal x1874=(gconst79*r21);
IkReal x1875=((1.0)*cj2);
IkReal x1876=(gconst79*r11);
IkReal x1877=((1.0)*sj0);
IkReal x1878=(cj1*sj2);
IkReal x1879=((1.0)*x1872);
IkReal x1880=(gconst80*x1872);
IkReal x1881=((1.0)*x1871);
IkReal x1882=(gconst80*x1881);
evalcond[0]=((((-1.0)*r22*x1879))+((x1871*x1874))+(((-1.0)*r20*x1882)));
evalcond[1]=(cj0+((x1871*x1876))+(((-1.0)*r10*x1882))+(((-1.0)*r12*x1879)));
evalcond[2]=((((-1.0)*x1877))+(((-1.0)*r02*x1879))+((x1871*x1873))+(((-1.0)*r00*x1882)));
evalcond[3]=((((-1.0)*x1874*x1879))+((r20*x1880))+(((-1.0)*r22*x1881))+((sj1*sj2))+(((-1.0)*cj1*x1875)));
evalcond[4]=((((-1.0)*x1873*x1879))+(((-1.0)*cj0*x1878))+(((-1.0)*r02*x1881))+(((-1.0)*cj0*sj1*x1875))+((r00*x1880)));
evalcond[5]=((((-1.0)*x1876*x1879))+(((-1.0)*x1877*x1878))+(((-1.0)*r12*x1881))+(((-1.0)*sj0*sj1*x1875))+((r10*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1883=((-1.0)*r21);
IkReal x1885 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1885)==0){
continue;
}
IkReal x1884=pow(x1885,-0.5);
CheckValue<IkReal> x1886 = IKatan2WithCheck(IkReal(x1883),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1886.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1886.value))));
IkReal gconst82=(x1883*x1884);
IkReal gconst83=((1.0)*r20*x1884);
CheckValue<IkReal> x1887 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1887.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1887.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1888=((-1.0)*r21);
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal(x1888),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
IkReal x1889=((1.0)*(x1891.value));
IkReal x1890=x1884;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1889)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1889)));
IkReal gconst82=(x1888*x1890);
IkReal gconst83=((1.0)*r20*x1890);
IkReal x1892=r22*r22;
IkReal x1893=((1.0)*x1892);
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(((-1.0)+x1892),-1);
if(!x1897.valid){
continue;
}
IkReal x1894=x1897.value;
if((((1.0)+(((-1.0)*x1893)))) < -0.00001)
continue;
IkReal x1895=IKsqrt(((1.0)+(((-1.0)*x1893))));
IkReal x1896=(cj0*x1894*x1895);
j4eval[0]=((IKabs(((((-1.0)*x1893*x1896))+x1896)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1898=((-1.0)*r21);
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal(x1898),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
IkReal x1899=((1.0)*(x1901.value));
IkReal x1900=x1884;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1899)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1899)));
IkReal gconst82=(x1898*x1900);
IkReal gconst83=((1.0)*r20*x1900);
IkReal x1902=r22*r22;
IkReal x1903=((1.0)*x1902);
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(((-1.0)+x1902),-1);
if(!x1907.valid){
continue;
}
IkReal x1904=x1907.value;
if((((1.0)+(((-1.0)*x1903)))) < -0.00001)
continue;
IkReal x1905=IKsqrt(((1.0)+(((-1.0)*x1903))));
IkReal x1906=(sj0*x1904*x1905);
j4eval[0]=((IKabs(((((-1.0)*x1903*x1906))+x1906)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1908=((-1.0)*r21);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(x1908),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
IkReal x1909=((1.0)*(x1911.value));
IkReal x1910=x1884;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1909)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1909)));
IkReal gconst82=(x1908*x1910);
IkReal gconst83=((1.0)*r20*x1910);
IkReal x1912=r22*r22;
IkReal x1913=(r12*sj0);
IkReal x1914=(cj0*r02);
CheckValue<IkReal> x1918=IKPowWithIntegerCheck(((-1.0)+x1912),-1);
if(!x1918.valid){
continue;
}
IkReal x1915=x1918.value;
if((((1.0)+(((-1.0)*x1912)))) < -0.00001)
continue;
IkReal x1916=IKsqrt(((1.0)+(((-1.0)*x1912))));
IkReal x1917=(r22*x1915*x1916);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1913*x1917))+((x1914*x1917)))))+(IKabs(((((-1.0)*x1914))+(((-1.0)*x1913))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1919=((1.0)*sj0);
IkReal x1920=((1.0)*cj0);
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1921.valid){
continue;
}
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1919))+(((-1.0)*r02*x1920)))),IkReal(((((-1.0)*gconst82*r11*x1919))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1921.value)))+(x1922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1923=IKsin(j4);
IkReal x1924=IKcos(j4);
IkReal x1925=(gconst82*r11);
IkReal x1926=((1.0)*cj2);
IkReal x1927=((1.0)*sj0);
IkReal x1928=(cj1*sj2);
IkReal x1929=((1.0)*x1924);
IkReal x1930=(gconst83*x1924);
IkReal x1931=(gconst82*x1923);
IkReal x1932=((1.0)*x1923);
evalcond[0]=(((r21*x1931))+(((-1.0)*r22*x1929))+(((-1.0)*gconst83*r20*x1932)));
evalcond[1]=((((-1.0)*r12*x1929))+cj0+((x1923*x1925))+(((-1.0)*gconst83*r10*x1932)));
evalcond[2]=((((-1.0)*gconst83*r00*x1932))+((r01*x1931))+(((-1.0)*x1927))+(((-1.0)*r02*x1929)));
evalcond[3]=((((-1.0)*cj1*x1926))+((sj1*sj2))+(((-1.0)*r22*x1932))+(((-1.0)*gconst82*r21*x1929))+((r20*x1930)));
evalcond[4]=(((r00*x1930))+(((-1.0)*cj0*x1928))+(((-1.0)*cj0*sj1*x1926))+(((-1.0)*gconst82*r01*x1929))+(((-1.0)*r02*x1932)));
evalcond[5]=((((-1.0)*sj0*sj1*x1926))+(((-1.0)*r12*x1932))+(((-1.0)*x1927*x1928))+(((-1.0)*x1925*x1929))+((r10*x1930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1933=((1.0)*gconst83);
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
CheckValue<IkReal> x1935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1933)))),-1);
if(!x1935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1934.value)+(((1.5707963267949)*(x1935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1936=IKsin(j4);
IkReal x1937=IKcos(j4);
IkReal x1938=(gconst82*r11);
IkReal x1939=((1.0)*cj2);
IkReal x1940=((1.0)*sj0);
IkReal x1941=(cj1*sj2);
IkReal x1942=((1.0)*x1937);
IkReal x1943=(gconst83*x1937);
IkReal x1944=(gconst82*x1936);
IkReal x1945=((1.0)*x1936);
evalcond[0]=((((-1.0)*r22*x1942))+(((-1.0)*gconst83*r20*x1945))+((r21*x1944)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1945))+((x1936*x1938))+(((-1.0)*r12*x1942)));
evalcond[2]=((((-1.0)*x1940))+(((-1.0)*r02*x1942))+((r01*x1944))+(((-1.0)*gconst83*r00*x1945)));
evalcond[3]=((((-1.0)*r22*x1945))+((r20*x1943))+(((-1.0)*cj1*x1939))+(((-1.0)*gconst82*r21*x1942))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x1941))+(((-1.0)*r02*x1945))+(((-1.0)*gconst82*r01*x1942))+((r00*x1943))+(((-1.0)*cj0*sj1*x1939)));
evalcond[5]=((((-1.0)*x1940*x1941))+((r10*x1943))+(((-1.0)*x1938*x1942))+(((-1.0)*r12*x1945))+(((-1.0)*sj0*sj1*x1939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1946=((1.0)*gconst83);
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1946))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
CheckValue<IkReal> x1948=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1946)))),-1);
if(!x1948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1947.value)+(((1.5707963267949)*(x1948.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1949=IKsin(j4);
IkReal x1950=IKcos(j4);
IkReal x1951=(gconst82*r11);
IkReal x1952=((1.0)*cj2);
IkReal x1953=((1.0)*sj0);
IkReal x1954=(cj1*sj2);
IkReal x1955=((1.0)*x1950);
IkReal x1956=(gconst83*x1950);
IkReal x1957=(gconst82*x1949);
IkReal x1958=((1.0)*x1949);
evalcond[0]=((((-1.0)*r22*x1955))+((r21*x1957))+(((-1.0)*gconst83*r20*x1958)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1958))+(((-1.0)*r12*x1955))+((x1949*x1951)));
evalcond[2]=((((-1.0)*x1953))+(((-1.0)*r02*x1955))+((r01*x1957))+(((-1.0)*gconst83*r00*x1958)));
evalcond[3]=((((-1.0)*r22*x1958))+((r20*x1956))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1955))+(((-1.0)*cj1*x1952)));
evalcond[4]=((((-1.0)*cj0*sj1*x1952))+(((-1.0)*cj0*x1954))+(((-1.0)*r02*x1958))+(((-1.0)*gconst82*r01*x1955))+((r00*x1956)));
evalcond[5]=(((r10*x1956))+(((-1.0)*x1951*x1955))+(((-1.0)*x1953*x1954))+(((-1.0)*r12*x1958))+(((-1.0)*sj0*sj1*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1959=((-1.0)*r10);
IkReal x1961 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1961)==0){
continue;
}
IkReal x1960=pow(x1961,-0.5);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1959),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1962.value));
IkReal gconst85=(r11*x1960);
IkReal gconst86=(x1959*x1960);
CheckValue<IkReal> x1963 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1963.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1963.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1964=((-1.0)*r10);
IkReal x1965=x1960;
CheckValue<IkReal> x1967 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1964),IKFAST_ATAN2_MAGTHRESH);
if(!x1967.valid){
continue;
}
IkReal x1966=((-1.0)*(x1967.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1966;
IkReal gconst84=x1966;
IkReal gconst85=(r11*x1965);
IkReal gconst86=(x1964*x1965);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1968=((1.0)*sj0);
IkReal x1969=((1.0)*gconst85);
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1968)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1969))+(((-1.0)*gconst85*r11*x1968))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1969)))),-1);
if(!x1971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1970.value)+(((1.5707963267949)*(x1971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1972=IKsin(j4);
IkReal x1973=IKcos(j4);
IkReal x1974=(gconst85*r21);
IkReal x1975=(gconst86*r00);
IkReal x1976=(gconst86*r10);
IkReal x1977=((1.0)*cj2);
IkReal x1978=(gconst85*r11);
IkReal x1979=(gconst85*r01);
IkReal x1980=((1.0)*sj0);
IkReal x1981=(gconst86*r20);
IkReal x1982=(cj1*sj2);
IkReal x1983=((1.0)*x1973);
IkReal x1984=((1.0)*x1972);
evalcond[0]=((((-1.0)*x1981*x1984))+((x1972*x1974))+(((-1.0)*r22*x1983)));
evalcond[1]=((((-1.0)*x1976*x1984))+cj0+((x1972*x1978))+(((-1.0)*r12*x1983)));
evalcond[2]=((((-1.0)*x1980))+(((-1.0)*r02*x1983))+((x1972*x1979))+(((-1.0)*x1975*x1984)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x1974*x1983))+((x1973*x1981))+(((-1.0)*cj1*x1977))+(((-1.0)*r22*x1984)));
evalcond[4]=((((-1.0)*cj0*sj1*x1977))+(((-1.0)*r02*x1984))+(((-1.0)*x1979*x1983))+((x1973*x1975))+(((-1.0)*cj0*x1982)));
evalcond[5]=((((-1.0)*x1980*x1982))+(((-1.0)*sj0*sj1*x1977))+(((-1.0)*r12*x1984))+((x1973*x1976))+(((-1.0)*x1978*x1983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1985=((1.0)*gconst86);
CheckValue<IkReal> x1986 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x1985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1986.valid){
continue;
}
CheckValue<IkReal> x1987=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x1985)))),-1);
if(!x1987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1986.value)+(((1.5707963267949)*(x1987.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1988=IKsin(j4);
IkReal x1989=IKcos(j4);
IkReal x1990=(gconst85*r21);
IkReal x1991=(gconst86*r00);
IkReal x1992=(gconst86*r10);
IkReal x1993=((1.0)*cj2);
IkReal x1994=(gconst85*r11);
IkReal x1995=(gconst85*r01);
IkReal x1996=((1.0)*sj0);
IkReal x1997=(gconst86*r20);
IkReal x1998=(cj1*sj2);
IkReal x1999=((1.0)*x1989);
IkReal x2000=((1.0)*x1988);
evalcond[0]=(((x1988*x1990))+(((-1.0)*x1997*x2000))+(((-1.0)*r22*x1999)));
evalcond[1]=(((x1988*x1994))+cj0+(((-1.0)*x1992*x2000))+(((-1.0)*r12*x1999)));
evalcond[2]=((((-1.0)*x1991*x2000))+((x1988*x1995))+(((-1.0)*r02*x1999))+(((-1.0)*x1996)));
evalcond[3]=((((-1.0)*r22*x2000))+((sj1*sj2))+((x1989*x1997))+(((-1.0)*x1990*x1999))+(((-1.0)*cj1*x1993)));
evalcond[4]=((((-1.0)*cj0*x1998))+(((-1.0)*cj0*sj1*x1993))+(((-1.0)*r02*x2000))+(((-1.0)*x1995*x1999))+((x1989*x1991)));
evalcond[5]=((((-1.0)*x1996*x1998))+(((-1.0)*sj0*sj1*x1993))+(((-1.0)*r12*x2000))+((x1989*x1992))+(((-1.0)*x1994*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2001=((-1.0)*r11);
IkReal x2003 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2003)==0){
continue;
}
IkReal x2002=pow(x2003,-0.5);
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal(x2001),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2004.value))));
IkReal gconst88=(x2001*x2002);
IkReal gconst89=((1.0)*r10*x2002);
CheckValue<IkReal> x2005 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2005.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2005.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2006=((-1.0)*r11);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal(x2006),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
IkReal x2007=((1.0)*(x2009.value));
IkReal x2008=x2002;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2007)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2007)));
IkReal gconst88=(x2006*x2008);
IkReal gconst89=((1.0)*r10*x2008);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2010=((-1.0)*r11);
CheckValue<IkReal> x2013 = IKatan2WithCheck(IkReal(x2010),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2013.valid){
continue;
}
IkReal x2011=((1.0)*(x2013.value));
IkReal x2012=x2002;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2011)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2011)));
IkReal gconst88=(x2010*x2012);
IkReal gconst89=((1.0)*r10*x2012);
IkReal x2014=r12*r12;
IkReal x2015=((1.0)*sj0);
IkReal x2016=(cj0*r02);
IkReal x2017=x2002;
j4eval[0]=((IKabs(((((-1.0)*r12*x2015))+(((-1.0)*x2016)))))+(IKabs(((((-1.0)*x2015*x2017))+((r12*x2016*x2017))+((sj0*x2014*x2017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2018=((-1.0)*r11);
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(x2018),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
IkReal x2019=((1.0)*(x2021.value));
IkReal x2020=x2002;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2019)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2019)));
IkReal gconst88=(x2018*x2020);
IkReal gconst89=((1.0)*r10*x2020);
IkReal x2022=r12*r12;
IkReal x2023=(cj1*cj2*r22);
IkReal x2024=(r22*sj1*sj2);
CheckValue<IkReal> x2028=IKPowWithIntegerCheck(((-1.0)+x2022),-1);
if(!x2028.valid){
continue;
}
IkReal x2025=x2028.value;
if((((1.0)+(((-1.0)*x2022)))) < -0.00001)
continue;
IkReal x2026=IKsqrt(((1.0)+(((-1.0)*x2022))));
IkReal x2027=(r12*x2025*x2026);
j4eval[0]=((IKabs((x2024+(((-1.0)*x2023)))))+(IKabs(((((-1.0)*x2024*x2027))+((x2023*x2027))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2029=(cj1*cj2);
IkReal x2030=(gconst89*r20);
IkReal x2031=(gconst88*r21);
IkReal x2032=(sj1*sj2);
CheckValue<IkReal> x2033=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2031*x2031)+(x2030*x2030)+(((-2.0)*x2030*x2031)))),-1);
if(!x2033.valid){
continue;
}
CheckValue<IkReal> x2034 = IKatan2WithCheck(IkReal((((r22*x2032))+(((-1.0)*r22*x2029)))),IkReal((((x2031*x2032))+(((-1.0)*x2029*x2031))+((x2029*x2030))+(((-1.0)*x2030*x2032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2033.value)))+(x2034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2035=IKsin(j4);
IkReal x2036=IKcos(j4);
IkReal x2037=((1.0)*sj0);
IkReal x2038=((1.0)*cj2);
IkReal x2039=(gconst89*r20);
IkReal x2040=(gconst89*r10);
IkReal x2041=(gconst89*r00);
IkReal x2042=(cj1*sj2);
IkReal x2043=((1.0)*x2036);
IkReal x2044=((1.0)*x2035);
IkReal x2045=(gconst88*x2035);
evalcond[0]=(((r21*x2045))+(((-1.0)*r22*x2043))+(((-1.0)*x2039*x2044)));
evalcond[1]=(cj0+((r11*x2045))+(((-1.0)*x2040*x2044))+(((-1.0)*r12*x2043)));
evalcond[2]=((((-1.0)*r02*x2043))+(((-1.0)*x2041*x2044))+(((-1.0)*x2037))+((r01*x2045)));
evalcond[3]=((((-1.0)*r22*x2044))+(((-1.0)*cj1*x2038))+((sj1*sj2))+((x2036*x2039))+(((-1.0)*gconst88*r21*x2043)));
evalcond[4]=((((-1.0)*cj0*x2042))+(((-1.0)*r02*x2044))+(((-1.0)*gconst88*r01*x2043))+(((-1.0)*cj0*sj1*x2038))+((x2036*x2041)));
evalcond[5]=((((-1.0)*cj2*sj1*x2037))+(((-1.0)*x2037*x2042))+(((-1.0)*gconst88*r11*x2043))+((x2036*x2040))+(((-1.0)*r12*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2046=((1.0)*sj0);
IkReal x2047=((1.0)*cj0);
CheckValue<IkReal> x2048 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2047))+(((-1.0)*r12*x2046)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2047))+(((-1.0)*gconst88*r11*x2046))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2048.valid){
continue;
}
CheckValue<IkReal> x2049=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2048.value)+(((1.5707963267949)*(x2049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2050=IKsin(j4);
IkReal x2051=IKcos(j4);
IkReal x2052=((1.0)*sj0);
IkReal x2053=((1.0)*cj2);
IkReal x2054=(gconst89*r20);
IkReal x2055=(gconst89*r10);
IkReal x2056=(gconst89*r00);
IkReal x2057=(cj1*sj2);
IkReal x2058=((1.0)*x2051);
IkReal x2059=((1.0)*x2050);
IkReal x2060=(gconst88*x2050);
evalcond[0]=((((-1.0)*x2054*x2059))+((r21*x2060))+(((-1.0)*r22*x2058)));
evalcond[1]=(cj0+(((-1.0)*r12*x2058))+((r11*x2060))+(((-1.0)*x2055*x2059)));
evalcond[2]=((((-1.0)*r02*x2058))+(((-1.0)*x2056*x2059))+((r01*x2060))+(((-1.0)*x2052)));
evalcond[3]=((((-1.0)*cj1*x2053))+(((-1.0)*r22*x2059))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2058))+((x2051*x2054)));
evalcond[4]=((((-1.0)*gconst88*r01*x2058))+(((-1.0)*r02*x2059))+(((-1.0)*cj0*x2057))+((x2051*x2056))+(((-1.0)*cj0*sj1*x2053)));
evalcond[5]=((((-1.0)*cj2*sj1*x2052))+(((-1.0)*r12*x2059))+(((-1.0)*gconst88*r11*x2058))+((x2051*x2055))+(((-1.0)*x2052*x2057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2061=((1.0)*gconst89);
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2061))+(((-1.0)*gconst88*r00)))),-1);
if(!x2062.valid){
continue;
}
CheckValue<IkReal> x2063 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2061))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2062.value)))+(x2063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2064=IKsin(j4);
IkReal x2065=IKcos(j4);
IkReal x2066=((1.0)*sj0);
IkReal x2067=((1.0)*cj2);
IkReal x2068=(gconst89*r20);
IkReal x2069=(gconst89*r10);
IkReal x2070=(gconst89*r00);
IkReal x2071=(cj1*sj2);
IkReal x2072=((1.0)*x2065);
IkReal x2073=((1.0)*x2064);
IkReal x2074=(gconst88*x2064);
evalcond[0]=((((-1.0)*r22*x2072))+(((-1.0)*x2068*x2073))+((r21*x2074)));
evalcond[1]=(cj0+(((-1.0)*r12*x2072))+((r11*x2074))+(((-1.0)*x2069*x2073)));
evalcond[2]=((((-1.0)*r02*x2072))+(((-1.0)*x2070*x2073))+(((-1.0)*x2066))+((r01*x2074)));
evalcond[3]=((((-1.0)*gconst88*r21*x2072))+(((-1.0)*r22*x2073))+((sj1*sj2))+(((-1.0)*cj1*x2067))+((x2065*x2068)));
evalcond[4]=((((-1.0)*r02*x2073))+(((-1.0)*cj0*sj1*x2067))+(((-1.0)*gconst88*r01*x2072))+((x2065*x2070))+(((-1.0)*cj0*x2071)));
evalcond[5]=((((-1.0)*r12*x2073))+(((-1.0)*gconst88*r11*x2072))+(((-1.0)*x2066*x2071))+(((-1.0)*cj2*sj1*x2066))+((x2065*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2075=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2075;
j4eval[1]=IKsign(x2075);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2076=((1.0)*cj5);
IkReal x2077=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2076)));
j4eval[0]=x2077;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2076))))));
j4eval[2]=IKsign(x2077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2078=cj5*cj5;
IkReal x2079=r11*r11;
IkReal x2080=(r11*sj5);
IkReal x2081=(cj5*r10);
IkReal x2082=((((-1.0)*x2078*x2079))+(r12*r12)+x2079+(((-2.0)*x2080*x2081))+((x2078*(r10*r10))));
j4eval[0]=x2082;
j4eval[1]=IKsign(x2082);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2080))+x2081))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2083=cj5*cj5;
IkReal x2084=r11*r11;
IkReal x2085=(cj5*r10);
IkReal x2086=(r11*sj5);
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2084+(((-2.0)*x2085*x2086))+((x2083*(r10*r10)))+(((-1.0)*x2083*x2084)))),-1);
if(!x2087.valid){
continue;
}
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal(((((-1.0)*x2086))+x2085)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2087.value)))+(x2088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2089=IKsin(j4);
IkReal x2090=IKcos(j4);
IkReal x2091=(cj5*r10);
IkReal x2092=(r01*sj5);
IkReal x2093=((1.0)*cj2);
IkReal x2094=(cj5*r00);
IkReal x2095=(cj5*r20);
IkReal x2096=((1.0)*x2090);
IkReal x2097=((1.0)*x2089);
IkReal x2098=(sj5*x2089);
evalcond[0]=((((-1.0)*x2095*x2097))+((r21*x2098))+(((-1.0)*r22*x2096)));
evalcond[1]=((((-1.0)*x2094*x2097))+((x2089*x2092))+(((-1.0)*r02*x2096)));
evalcond[2]=((((-1.0)*r11*sj5*x2096))+((x2090*x2091))+(((-1.0)*r12*x2097)));
evalcond[3]=((1.0)+(((-1.0)*x2091*x2097))+(((-1.0)*r12*x2096))+((r11*x2098)));
evalcond[4]=((((-1.0)*r21*sj5*x2096))+((sj1*sj2))+((x2090*x2095))+(((-1.0)*cj1*x2093))+(((-1.0)*r22*x2097)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x2090*x2094))+(((-1.0)*x2092*x2096))+(((-1.0)*r02*x2097))+(((-1.0)*sj1*x2093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2099=((1.0)*cj5);
CheckValue<IkReal> x2100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2099)))),-1);
if(!x2100.valid){
continue;
}
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2099))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2100.value)))+(x2101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2102=IKsin(j4);
IkReal x2103=IKcos(j4);
IkReal x2104=(cj5*r10);
IkReal x2105=(r01*sj5);
IkReal x2106=((1.0)*cj2);
IkReal x2107=(cj5*r00);
IkReal x2108=(cj5*r20);
IkReal x2109=((1.0)*x2103);
IkReal x2110=((1.0)*x2102);
IkReal x2111=(sj5*x2102);
evalcond[0]=((((-1.0)*r22*x2109))+((r21*x2111))+(((-1.0)*x2108*x2110)));
evalcond[1]=((((-1.0)*x2107*x2110))+(((-1.0)*r02*x2109))+((x2102*x2105)));
evalcond[2]=(((x2103*x2104))+(((-1.0)*r11*sj5*x2109))+(((-1.0)*r12*x2110)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2109))+(((-1.0)*x2104*x2110))+((r11*x2111)));
evalcond[4]=(((x2103*x2108))+(((-1.0)*cj1*x2106))+((sj1*sj2))+(((-1.0)*r21*sj5*x2109))+(((-1.0)*r22*x2110)));
evalcond[5]=((((-1.0)*sj1*x2106))+((x2103*x2107))+(((-1.0)*cj1*sj2))+(((-1.0)*x2105*x2109))+(((-1.0)*r02*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2112=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2112.value)))+(x2113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2114=IKsin(j4);
IkReal x2115=IKcos(j4);
IkReal x2116=(cj5*r10);
IkReal x2117=(r01*sj5);
IkReal x2118=((1.0)*cj2);
IkReal x2119=(cj5*r00);
IkReal x2120=(cj5*r20);
IkReal x2121=((1.0)*x2115);
IkReal x2122=((1.0)*x2114);
IkReal x2123=(sj5*x2114);
evalcond[0]=((((-1.0)*r22*x2121))+(((-1.0)*x2120*x2122))+((r21*x2123)));
evalcond[1]=((((-1.0)*x2119*x2122))+(((-1.0)*r02*x2121))+((x2114*x2117)));
evalcond[2]=((((-1.0)*r12*x2122))+(((-1.0)*r11*sj5*x2121))+((x2115*x2116)));
evalcond[3]=((1.0)+(((-1.0)*x2116*x2122))+((r11*x2123))+(((-1.0)*r12*x2121)));
evalcond[4]=((((-1.0)*r22*x2122))+((x2115*x2120))+((sj1*sj2))+(((-1.0)*cj1*x2118))+(((-1.0)*r21*sj5*x2121)));
evalcond[5]=((((-1.0)*x2117*x2121))+(((-1.0)*sj1*x2118))+(((-1.0)*r02*x2122))+(((-1.0)*cj1*sj2))+((x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2124=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2124;
j4eval[1]=IKsign(x2124);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2125=((1.0)*cj5);
IkReal x2126=((((-1.0)*r21*x2125))+(((-1.0)*r20*sj5)));
j4eval[0]=x2126;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2125)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2127=cj5*cj5;
IkReal x2128=r11*r11;
IkReal x2129=(cj5*r10);
IkReal x2130=(r11*sj5);
IkReal x2131=((((-1.0)*x2127*(r10*r10)))+(((-1.0)*x2128))+(((-1.0)*(r12*r12)))+(((2.0)*x2129*x2130))+((x2127*x2128)));
j4eval[0]=x2131;
j4eval[1]=((IKabs(r12))+(IKabs((x2129+(((-1.0)*x2130))))));
j4eval[2]=IKsign(x2131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2132=cj5*cj5;
IkReal x2133=r11*r11;
IkReal x2134=(cj5*r10);
IkReal x2135=(r11*sj5);
CheckValue<IkReal> x2136=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x2134*x2135))+(((-1.0)*x2133))+((x2132*x2133))+(((-1.0)*x2132*(r10*r10))))),-1);
if(!x2136.valid){
continue;
}
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal((x2134+(((-1.0)*x2135)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2136.value)))+(x2137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2138=IKsin(j4);
IkReal x2139=IKcos(j4);
IkReal x2140=(cj5*r10);
IkReal x2141=(r01*sj5);
IkReal x2142=(cj5*r00);
IkReal x2143=(cj5*r20);
IkReal x2144=((1.0)*x2139);
IkReal x2145=((1.0)*x2138);
IkReal x2146=(sj5*x2138);
evalcond[0]=((((-1.0)*x2143*x2145))+(((-1.0)*r22*x2144))+((r21*x2146)));
evalcond[1]=(((x2138*x2141))+(((-1.0)*x2142*x2145))+(((-1.0)*r02*x2144)));
evalcond[2]=((((-1.0)*r11*sj5*x2144))+(((-1.0)*r12*x2145))+((x2139*x2140)));
evalcond[3]=((-1.0)+((r11*x2146))+(((-1.0)*r12*x2144))+(((-1.0)*x2140*x2145)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2145))+((cj1*sj2))+(((-1.0)*x2141*x2144))+((x2139*x2142)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2145))+(((-1.0)*r21*sj5*x2144))+((x2139*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2147=((1.0)*cj5);
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2147)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
CheckValue<IkReal> x2149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2147))+(((-1.0)*r20*sj5)))),-1);
if(!x2149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2148.value)+(((1.5707963267949)*(x2149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2150=IKsin(j4);
IkReal x2151=IKcos(j4);
IkReal x2152=(cj5*r10);
IkReal x2153=(r01*sj5);
IkReal x2154=(cj5*r00);
IkReal x2155=(cj5*r20);
IkReal x2156=((1.0)*x2151);
IkReal x2157=((1.0)*x2150);
IkReal x2158=(sj5*x2150);
evalcond[0]=((((-1.0)*x2155*x2157))+(((-1.0)*r22*x2156))+((r21*x2158)));
evalcond[1]=((((-1.0)*r02*x2156))+((x2150*x2153))+(((-1.0)*x2154*x2157)));
evalcond[2]=((((-1.0)*r11*sj5*x2156))+(((-1.0)*r12*x2157))+((x2151*x2152)));
evalcond[3]=((-1.0)+(((-1.0)*x2152*x2157))+(((-1.0)*r12*x2156))+((r11*x2158)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2157))+(((-1.0)*x2153*x2156))+((x2151*x2154)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2151*x2155))+(((-1.0)*r22*x2157))+(((-1.0)*r21*sj5*x2156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2159.value)+(((1.5707963267949)*(x2160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2161=IKsin(j4);
IkReal x2162=IKcos(j4);
IkReal x2163=(cj5*r10);
IkReal x2164=(r01*sj5);
IkReal x2165=(cj5*r00);
IkReal x2166=(cj5*r20);
IkReal x2167=((1.0)*x2162);
IkReal x2168=((1.0)*x2161);
IkReal x2169=(sj5*x2161);
evalcond[0]=(((r21*x2169))+(((-1.0)*x2166*x2168))+(((-1.0)*r22*x2167)));
evalcond[1]=(((x2161*x2164))+(((-1.0)*x2165*x2168))+(((-1.0)*r02*x2167)));
evalcond[2]=((((-1.0)*r11*sj5*x2167))+((x2162*x2163))+(((-1.0)*r12*x2168)));
evalcond[3]=((-1.0)+(((-1.0)*x2163*x2168))+(((-1.0)*r12*x2167))+((r11*x2169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2164*x2167))+((x2162*x2165))+(((-1.0)*r02*x2168)));
evalcond[5]=((((-1.0)*r21*sj5*x2167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2162*x2166))+(((-1.0)*r22*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2170=((-1.0)*r00);
IkReal x2172 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2172)==0){
continue;
}
IkReal x2171=pow(x2172,-0.5);
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2170),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2173.value));
IkReal gconst91=(r01*x2171);
IkReal gconst92=(x2170*x2171);
CheckValue<IkReal> x2174 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2174.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2174.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2175=((-1.0)*r00);
IkReal x2176=x2171;
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2175),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
IkReal x2177=((-1.0)*(x2178.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2177;
IkReal gconst90=x2177;
IkReal gconst91=(r01*x2176);
IkReal gconst92=(x2175*x2176);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2179=((1.0)*sj0);
IkReal x2180=((1.0)*cj0);
CheckValue<IkReal> x2181 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2180))+(((-1.0)*r12*x2179)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2179))+(((-1.0)*gconst91*r01*x2180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
CheckValue<IkReal> x2182=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2181.value)+(((1.5707963267949)*(x2182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2183=IKsin(j4);
IkReal x2184=IKcos(j4);
IkReal x2185=((1.0)*cj2);
IkReal x2186=(gconst92*r00);
IkReal x2187=(gconst92*r20);
IkReal x2188=((1.0)*sj0);
IkReal x2189=(gconst92*r10);
IkReal x2190=(cj1*sj2);
IkReal x2191=((1.0)*x2184);
IkReal x2192=(gconst91*x2183);
IkReal x2193=((1.0)*x2183);
evalcond[0]=((((-1.0)*x2187*x2193))+((r21*x2192))+(((-1.0)*r22*x2191)));
evalcond[1]=(cj0+(((-1.0)*x2189*x2193))+((r11*x2192))+(((-1.0)*r12*x2191)));
evalcond[2]=((((-1.0)*x2186*x2193))+(((-1.0)*r02*x2191))+(((-1.0)*x2188))+((r01*x2192)));
evalcond[3]=((((-1.0)*gconst91*r21*x2191))+((sj1*sj2))+(((-1.0)*r22*x2193))+(((-1.0)*cj1*x2185))+((x2184*x2187)));
evalcond[4]=((((-1.0)*cj0*sj1*x2185))+(((-1.0)*r02*x2193))+(((-1.0)*cj0*x2190))+(((-1.0)*gconst91*r01*x2191))+((x2184*x2186)));
evalcond[5]=((((-1.0)*sj0*sj1*x2185))+(((-1.0)*x2188*x2190))+(((-1.0)*r12*x2193))+((x2184*x2189))+(((-1.0)*gconst91*r11*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2194=((1.0)*gconst92);
CheckValue<IkReal> x2195 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2194))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2195.valid){
continue;
}
CheckValue<IkReal> x2196=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2194)))),-1);
if(!x2196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2195.value)+(((1.5707963267949)*(x2196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2197=IKsin(j4);
IkReal x2198=IKcos(j4);
IkReal x2199=((1.0)*cj2);
IkReal x2200=(gconst92*r00);
IkReal x2201=(gconst92*r20);
IkReal x2202=((1.0)*sj0);
IkReal x2203=(gconst92*r10);
IkReal x2204=(cj1*sj2);
IkReal x2205=((1.0)*x2198);
IkReal x2206=(gconst91*x2197);
IkReal x2207=((1.0)*x2197);
evalcond[0]=((((-1.0)*r22*x2205))+((r21*x2206))+(((-1.0)*x2201*x2207)));
evalcond[1]=((((-1.0)*x2203*x2207))+cj0+(((-1.0)*r12*x2205))+((r11*x2206)));
evalcond[2]=(((r01*x2206))+(((-1.0)*x2202))+(((-1.0)*x2200*x2207))+(((-1.0)*r02*x2205)));
evalcond[3]=(((x2198*x2201))+(((-1.0)*r22*x2207))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2205))+(((-1.0)*cj1*x2199)));
evalcond[4]=(((x2198*x2200))+(((-1.0)*gconst91*r01*x2205))+(((-1.0)*cj0*sj1*x2199))+(((-1.0)*r02*x2207))+(((-1.0)*cj0*x2204)));
evalcond[5]=(((x2198*x2203))+(((-1.0)*r12*x2207))+(((-1.0)*sj0*sj1*x2199))+(((-1.0)*x2202*x2204))+(((-1.0)*gconst91*r11*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2208=((-1.0)*r01);
IkReal x2210 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2210)==0){
continue;
}
IkReal x2209=pow(x2210,-0.5);
CheckValue<IkReal> x2211 = IKatan2WithCheck(IkReal(x2208),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2211.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2211.value))));
IkReal gconst94=(x2208*x2209);
IkReal gconst95=((1.0)*r00*x2209);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2212.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2213=((-1.0)*r01);
CheckValue<IkReal> x2216 = IKatan2WithCheck(IkReal(x2213),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2216.valid){
continue;
}
IkReal x2214=((1.0)*(x2216.value));
IkReal x2215=x2209;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2214)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2214)));
IkReal gconst94=(x2213*x2215);
IkReal gconst95=((1.0)*r00*x2215);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2217=((-1.0)*r01);
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(x2217),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
IkReal x2218=((1.0)*(x2220.value));
IkReal x2219=x2209;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2218)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2218)));
IkReal gconst94=(x2217*x2219);
IkReal gconst95=((1.0)*r00*x2219);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2221=((-1.0)*r01);
CheckValue<IkReal> x2224 = IKatan2WithCheck(IkReal(x2221),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2224.valid){
continue;
}
IkReal x2222=((1.0)*(x2224.value));
IkReal x2223=x2209;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2222)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2222)));
IkReal gconst94=(x2221*x2223);
IkReal gconst95=((1.0)*r00*x2223);
IkReal x2225=r02*r02;
IkReal x2226=(r12*sj0);
IkReal x2227=((1.0)*cj0);
IkReal x2228=x2209;
j4eval[0]=((IKabs((((cj0*x2225*x2228))+(((-1.0)*x2227*x2228))+((r02*x2226*x2228)))))+(IKabs(((((-1.0)*r02*x2227))+(((-1.0)*x2226))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2229=((1.0)*sj0);
IkReal x2230=((1.0)*cj0);
CheckValue<IkReal> x2231=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2231.valid){
continue;
}
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2230))+(((-1.0)*r12*x2229)))),IkReal(((((-1.0)*gconst94*r11*x2229))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2230))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2231.value)))+(x2232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2233=IKsin(j4);
IkReal x2234=IKcos(j4);
IkReal x2235=(gconst94*r11);
IkReal x2236=((1.0)*cj2);
IkReal x2237=(gconst94*r21);
IkReal x2238=((1.0)*sj0);
IkReal x2239=(gconst94*r01);
IkReal x2240=(cj1*sj2);
IkReal x2241=((1.0)*x2234);
IkReal x2242=(gconst95*x2234);
IkReal x2243=((1.0)*x2233);
IkReal x2244=(gconst95*x2243);
evalcond[0]=((((-1.0)*r22*x2241))+((x2233*x2237))+(((-1.0)*r20*x2244)));
evalcond[1]=(cj0+(((-1.0)*r10*x2244))+((x2233*x2235))+(((-1.0)*r12*x2241)));
evalcond[2]=((((-1.0)*r02*x2241))+(((-1.0)*r00*x2244))+(((-1.0)*x2238))+((x2233*x2239)));
evalcond[3]=((((-1.0)*x2237*x2241))+(((-1.0)*cj1*x2236))+(((-1.0)*r22*x2243))+((sj1*sj2))+((r20*x2242)));
evalcond[4]=((((-1.0)*r02*x2243))+(((-1.0)*cj0*x2240))+((r00*x2242))+(((-1.0)*x2239*x2241))+(((-1.0)*cj0*sj1*x2236)));
evalcond[5]=(((r10*x2242))+(((-1.0)*sj0*sj1*x2236))+(((-1.0)*r12*x2243))+(((-1.0)*x2238*x2240))+(((-1.0)*x2235*x2241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2245=((1.0)*gconst95);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2245)))),-1);
if(!x2247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2246.value)+(((1.5707963267949)*(x2247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2248=IKsin(j4);
IkReal x2249=IKcos(j4);
IkReal x2250=(gconst94*r11);
IkReal x2251=((1.0)*cj2);
IkReal x2252=(gconst94*r21);
IkReal x2253=((1.0)*sj0);
IkReal x2254=(gconst94*r01);
IkReal x2255=(cj1*sj2);
IkReal x2256=((1.0)*x2249);
IkReal x2257=(gconst95*x2249);
IkReal x2258=((1.0)*x2248);
IkReal x2259=(gconst95*x2258);
evalcond[0]=((((-1.0)*r22*x2256))+(((-1.0)*r20*x2259))+((x2248*x2252)));
evalcond[1]=(cj0+(((-1.0)*r12*x2256))+(((-1.0)*r10*x2259))+((x2248*x2250)));
evalcond[2]=((((-1.0)*r02*x2256))+(((-1.0)*x2253))+(((-1.0)*r00*x2259))+((x2248*x2254)));
evalcond[3]=((((-1.0)*r22*x2258))+((sj1*sj2))+(((-1.0)*x2252*x2256))+((r20*x2257))+(((-1.0)*cj1*x2251)));
evalcond[4]=((((-1.0)*r02*x2258))+(((-1.0)*cj0*x2255))+((r00*x2257))+(((-1.0)*cj0*sj1*x2251))+(((-1.0)*x2254*x2256)));
evalcond[5]=(((r10*x2257))+(((-1.0)*sj0*sj1*x2251))+(((-1.0)*x2253*x2255))+(((-1.0)*r12*x2258))+(((-1.0)*x2250*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2260=((1.0)*gconst95);
CheckValue<IkReal> x2261 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2260))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2261.valid){
continue;
}
CheckValue<IkReal> x2262=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2260)))),-1);
if(!x2262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2261.value)+(((1.5707963267949)*(x2262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2263=IKsin(j4);
IkReal x2264=IKcos(j4);
IkReal x2265=(gconst94*r11);
IkReal x2266=((1.0)*cj2);
IkReal x2267=(gconst94*r21);
IkReal x2268=((1.0)*sj0);
IkReal x2269=(gconst94*r01);
IkReal x2270=(cj1*sj2);
IkReal x2271=((1.0)*x2264);
IkReal x2272=(gconst95*x2264);
IkReal x2273=((1.0)*x2263);
IkReal x2274=(gconst95*x2273);
evalcond[0]=(((x2263*x2267))+(((-1.0)*r20*x2274))+(((-1.0)*r22*x2271)));
evalcond[1]=(((x2263*x2265))+cj0+(((-1.0)*r10*x2274))+(((-1.0)*r12*x2271)));
evalcond[2]=(((x2263*x2269))+(((-1.0)*r00*x2274))+(((-1.0)*r02*x2271))+(((-1.0)*x2268)));
evalcond[3]=((((-1.0)*cj1*x2266))+((sj1*sj2))+(((-1.0)*r22*x2273))+((r20*x2272))+(((-1.0)*x2267*x2271)));
evalcond[4]=(((r00*x2272))+(((-1.0)*cj0*sj1*x2266))+(((-1.0)*x2269*x2271))+(((-1.0)*r02*x2273))+(((-1.0)*cj0*x2270)));
evalcond[5]=((((-1.0)*sj0*sj1*x2266))+((r10*x2272))+(((-1.0)*x2268*x2270))+(((-1.0)*x2265*x2271))+(((-1.0)*r12*x2273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2275=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2275;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2276=((1.0)*cj5);
IkReal x2277=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2276)));
j4eval[0]=x2277;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2276)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2277);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2278=cj5*cj5;
IkReal x2279=r01*r01;
IkReal x2280=(r01*sj5);
IkReal x2281=(cj5*r00);
IkReal x2282=((((-1.0)*x2278*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x2280*x2281))+(((-1.0)*x2279))+((x2278*x2279)));
j4eval[0]=x2282;
j4eval[1]=IKsign(x2282);
j4eval[2]=((IKabs(r02))+(IKabs((x2281+(((-1.0)*x2280))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2283=cj5*cj5;
IkReal x2284=r01*r01;
IkReal x2285=(r01*sj5);
IkReal x2286=(cj5*r00);
CheckValue<IkReal> x2287=IKPowWithIntegerCheck(IKsign(((((2.0)*x2285*x2286))+(((-1.0)*(r02*r02)))+(((-1.0)*x2284))+(((-1.0)*x2283*(r00*r00)))+((x2283*x2284)))),-1);
if(!x2287.valid){
continue;
}
CheckValue<IkReal> x2288 = IKatan2WithCheck(IkReal((x2286+(((-1.0)*x2285)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2287.value)))+(x2288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2289=IKsin(j4);
IkReal x2290=IKcos(j4);
IkReal x2291=(cj5*r10);
IkReal x2292=(r01*sj5);
IkReal x2293=((1.0)*cj2);
IkReal x2294=(cj5*r00);
IkReal x2295=(cj5*r20);
IkReal x2296=((1.0)*x2290);
IkReal x2297=((1.0)*x2289);
IkReal x2298=(sj5*x2289);
evalcond[0]=(((r21*x2298))+(((-1.0)*x2295*x2297))+(((-1.0)*r22*x2296)));
evalcond[1]=((((-1.0)*r12*x2296))+(((-1.0)*x2291*x2297))+((r11*x2298)));
evalcond[2]=((((-1.0)*r02*x2297))+(((-1.0)*x2292*x2296))+((x2290*x2294)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2296))+((x2289*x2292))+(((-1.0)*x2294*x2297)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x2296))+(((-1.0)*cj1*x2293))+(((-1.0)*r22*x2297))+((x2290*x2295)));
evalcond[5]=((((-1.0)*r11*sj5*x2296))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2297))+(((-1.0)*sj1*x2293))+((x2290*x2291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2299=((1.0)*cj5);
CheckValue<IkReal> x2300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2299)))),-1);
if(!x2300.valid){
continue;
}
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2300.value)))+(x2301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2302=IKsin(j4);
IkReal x2303=IKcos(j4);
IkReal x2304=(cj5*r10);
IkReal x2305=(r01*sj5);
IkReal x2306=((1.0)*cj2);
IkReal x2307=(cj5*r00);
IkReal x2308=(cj5*r20);
IkReal x2309=((1.0)*x2303);
IkReal x2310=((1.0)*x2302);
IkReal x2311=(sj5*x2302);
evalcond[0]=((((-1.0)*r22*x2309))+((r21*x2311))+(((-1.0)*x2308*x2310)));
evalcond[1]=((((-1.0)*x2304*x2310))+((r11*x2311))+(((-1.0)*r12*x2309)));
evalcond[2]=(((x2303*x2307))+(((-1.0)*r02*x2310))+(((-1.0)*x2305*x2309)));
evalcond[3]=((-1.0)+(((-1.0)*x2307*x2310))+(((-1.0)*r02*x2309))+((x2302*x2305)));
evalcond[4]=((((-1.0)*r22*x2310))+((x2303*x2308))+((sj1*sj2))+(((-1.0)*r21*sj5*x2309))+(((-1.0)*cj1*x2306)));
evalcond[5]=((((-1.0)*sj1*x2306))+(((-1.0)*r11*sj5*x2309))+((x2303*x2304))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2312=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2312.valid){
continue;
}
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2312.value)))+(x2313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2314=IKsin(j4);
IkReal x2315=IKcos(j4);
IkReal x2316=(cj5*r10);
IkReal x2317=(r01*sj5);
IkReal x2318=((1.0)*cj2);
IkReal x2319=(cj5*r00);
IkReal x2320=(cj5*r20);
IkReal x2321=((1.0)*x2315);
IkReal x2322=((1.0)*x2314);
IkReal x2323=(sj5*x2314);
evalcond[0]=((((-1.0)*r22*x2321))+((r21*x2323))+(((-1.0)*x2320*x2322)));
evalcond[1]=(((r11*x2323))+(((-1.0)*r12*x2321))+(((-1.0)*x2316*x2322)));
evalcond[2]=(((x2315*x2319))+(((-1.0)*x2317*x2321))+(((-1.0)*r02*x2322)));
evalcond[3]=((-1.0)+(((-1.0)*x2319*x2322))+((x2314*x2317))+(((-1.0)*r02*x2321)));
evalcond[4]=(((x2315*x2320))+(((-1.0)*r22*x2322))+((sj1*sj2))+(((-1.0)*cj1*x2318))+(((-1.0)*r21*sj5*x2321)));
evalcond[5]=(((x2315*x2316))+(((-1.0)*r11*sj5*x2321))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2322))+(((-1.0)*sj1*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2324=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2324;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2325=((1.0)*cj5);
IkReal x2326=((((-1.0)*r20*sj5))+(((-1.0)*r21*x2325)));
j4eval[0]=x2326;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2325)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2326);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2327=cj5*cj5;
IkReal x2328=r01*r01;
IkReal x2329=(cj5*r00);
IkReal x2330=(r01*sj5);
IkReal x2331=((((-2.0)*x2329*x2330))+x2328+(((-1.0)*x2327*x2328))+((x2327*(r00*r00)))+(r02*r02));
j4eval[0]=x2331;
j4eval[1]=((IKabs(r02))+(IKabs((x2329+(((-1.0)*x2330))))));
j4eval[2]=IKsign(x2331);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2332=cj5*cj5;
IkReal x2333=r01*r01;
IkReal x2334=(r01*sj5);
IkReal x2335=(cj5*r00);
CheckValue<IkReal> x2336=IKPowWithIntegerCheck(IKsign((x2333+(((-1.0)*x2332*x2333))+(((-2.0)*x2334*x2335))+((x2332*(r00*r00)))+(r02*r02))),-1);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal((x2335+(((-1.0)*x2334)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2336.value)))+(x2337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2338=IKsin(j4);
IkReal x2339=IKcos(j4);
IkReal x2340=(cj5*r10);
IkReal x2341=(r01*sj5);
IkReal x2342=(cj5*r00);
IkReal x2343=(cj5*r20);
IkReal x2344=((1.0)*x2339);
IkReal x2345=((1.0)*x2338);
IkReal x2346=(sj5*x2338);
evalcond[0]=((((-1.0)*r22*x2344))+(((-1.0)*x2343*x2345))+((r21*x2346)));
evalcond[1]=((((-1.0)*x2340*x2345))+((r11*x2346))+(((-1.0)*r12*x2344)));
evalcond[2]=((((-1.0)*x2341*x2344))+(((-1.0)*r02*x2345))+((x2339*x2342)));
evalcond[3]=((1.0)+((x2338*x2341))+(((-1.0)*r02*x2344))+(((-1.0)*x2342*x2345)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x2344))+((x2339*x2340))+(((-1.0)*r12*x2345)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2345))+((x2339*x2343))+(((-1.0)*r21*sj5*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2347=((1.0)*cj5);
CheckValue<IkReal> x2348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2347))+(((-1.0)*r20*sj5)))),-1);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2348.value)))+(x2349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2350=IKsin(j4);
IkReal x2351=IKcos(j4);
IkReal x2352=(cj5*r10);
IkReal x2353=(r01*sj5);
IkReal x2354=(cj5*r00);
IkReal x2355=(cj5*r20);
IkReal x2356=((1.0)*x2351);
IkReal x2357=((1.0)*x2350);
IkReal x2358=(sj5*x2350);
evalcond[0]=((((-1.0)*x2355*x2357))+(((-1.0)*r22*x2356))+((r21*x2358)));
evalcond[1]=(((r11*x2358))+(((-1.0)*x2352*x2357))+(((-1.0)*r12*x2356)));
evalcond[2]=(((x2351*x2354))+(((-1.0)*x2353*x2356))+(((-1.0)*r02*x2357)));
evalcond[3]=((1.0)+(((-1.0)*x2354*x2357))+((x2350*x2353))+(((-1.0)*r02*x2356)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2356))+((cj1*sj2))+((x2351*x2352))+(((-1.0)*r12*x2357)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2351*x2355))+(((-1.0)*r22*x2357))+(((-1.0)*r21*sj5*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2359 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2359.value)+(((1.5707963267949)*(x2360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2361=IKsin(j4);
IkReal x2362=IKcos(j4);
IkReal x2363=(cj5*r10);
IkReal x2364=(r01*sj5);
IkReal x2365=(cj5*r00);
IkReal x2366=(cj5*r20);
IkReal x2367=((1.0)*x2362);
IkReal x2368=((1.0)*x2361);
IkReal x2369=(sj5*x2361);
evalcond[0]=((((-1.0)*r22*x2367))+(((-1.0)*x2366*x2368))+((r21*x2369)));
evalcond[1]=(((r11*x2369))+(((-1.0)*r12*x2367))+(((-1.0)*x2363*x2368)));
evalcond[2]=((((-1.0)*x2364*x2367))+((x2362*x2365))+(((-1.0)*r02*x2368)));
evalcond[3]=((1.0)+((x2361*x2364))+(((-1.0)*x2365*x2368))+(((-1.0)*r02*x2367)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2367))+((cj1*sj2))+((x2362*x2363))+(((-1.0)*r12*x2368)));
evalcond[5]=((((-1.0)*r21*sj5*x2367))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2368))+((x2362*x2366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2370=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2370);
rxp1_1=(px*r21);
rxp1_2=(r11*x2370);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2371=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2371);
rxp1_1=(px*r21);
rxp1_2=(r11*x2371);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2372=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2372);
rxp1_1=(px*r21);
rxp1_2=(r11*x2372);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2375=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2375.valid){
continue;
}
IkReal x2373=x2375.value;
IkReal x2374=(sj0*x2373);
cj4array[0]=(((cj2*sj1*x2374))+((cj1*sj2*x2374)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2376=IKsin(j4);
IkReal x2377=IKcos(j4);
IkReal x2378=(cj5*r20);
IkReal x2379=(r21*sj5);
IkReal x2380=((1.0)*x2376);
IkReal x2381=((1.0)*x2377);
evalcond[0]=((-1.0)*r02*x2376);
evalcond[1]=((((-1.0)*r02*x2381))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2378*x2380))+((x2376*x2379)));
evalcond[3]=((((-1.0)*cj5*r10*x2380))+((r11*sj5*x2376)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2379*x2381))+((x2377*x2378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2383=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2383.valid){
continue;
}
IkReal x2382=x2383.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2382))+((cj1*cj2*x2382)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2384=IKsin(j4);
IkReal x2385=IKcos(j4);
IkReal x2386=(r11*sj5);
IkReal x2387=((1.0)*sj0);
IkReal x2388=((1.0)*x2385);
IkReal x2389=((1.0)*cj5*x2384);
evalcond[0]=((-1.0)*r02*x2384);
evalcond[1]=((((-1.0)*r02*x2388))+(((-1.0)*x2387)));
evalcond[2]=(((r21*sj5*x2384))+(((-1.0)*r20*x2389)));
evalcond[3]=((((-1.0)*r10*x2389))+((x2384*x2386)));
evalcond[4]=((((-1.0)*cj1*sj2*x2387))+(((-1.0)*x2386*x2388))+(((-1.0)*cj2*sj1*x2387))+((cj5*r10*x2385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(r02,-1);
if(!x2390.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2390.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2391=IKsin(j4);
IkReal x2392=IKcos(j4);
IkReal x2393=((1.0)*sj0);
IkReal x2394=(cj5*x2392);
IkReal x2395=(sj5*x2391);
IkReal x2396=((1.0)*sj5*x2392);
IkReal x2397=((1.0)*cj5*x2391);
evalcond[0]=((-1.0)*r02*x2391);
evalcond[1]=((((-1.0)*r20*x2397))+((r21*x2395)));
evalcond[2]=((((-1.0)*r10*x2397))+((r11*x2395)));
evalcond[3]=(((r20*x2394))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2396)));
evalcond[4]=((((-1.0)*cj1*sj2*x2393))+(((-1.0)*cj2*sj1*x2393))+((r10*x2394))+(((-1.0)*r11*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2398=((1.0)*sj0);
IkReal x2399=((1.0)*cj0);
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2399))+(((-1.0)*r12*x2398)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2399))+(((-1.0)*r11*sj5*x2398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
CheckValue<IkReal> x2401=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2400.value)+(((1.5707963267949)*(x2401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2402=IKsin(j4);
IkReal x2403=IKcos(j4);
IkReal x2404=(cj5*r10);
IkReal x2405=(r01*sj5);
IkReal x2406=((1.0)*cj2);
IkReal x2407=(cj5*r00);
IkReal x2408=((1.0)*sj0);
IkReal x2409=(cj5*r20);
IkReal x2410=(cj1*sj2);
IkReal x2411=((1.0)*x2403);
IkReal x2412=((1.0)*x2402);
IkReal x2413=(sj5*x2402);
evalcond[0]=(((r21*x2413))+(((-1.0)*r22*x2411))+(((-1.0)*x2409*x2412)));
evalcond[1]=(((r11*x2413))+cj0+(((-1.0)*r12*x2411))+(((-1.0)*x2404*x2412)));
evalcond[2]=((((-1.0)*x2408))+(((-1.0)*x2407*x2412))+(((-1.0)*r02*x2411))+((x2402*x2405)));
evalcond[3]=(((x2403*x2409))+((sj1*sj2))+(((-1.0)*cj1*x2406))+(((-1.0)*r21*sj5*x2411))+(((-1.0)*r22*x2412)));
evalcond[4]=((((-1.0)*cj0*x2410))+((x2403*x2407))+(((-1.0)*x2405*x2411))+(((-1.0)*r02*x2412))+(((-1.0)*cj0*sj1*x2406)));
evalcond[5]=(((x2403*x2404))+(((-1.0)*sj0*sj1*x2406))+(((-1.0)*x2408*x2410))+(((-1.0)*r12*x2412))+(((-1.0)*r11*sj5*x2411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2414=((1.0)*cj5);
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2414)))),-1);
if(!x2416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2415.value)+(((1.5707963267949)*(x2416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2417=IKsin(j4);
IkReal x2418=IKcos(j4);
IkReal x2419=(cj5*r10);
IkReal x2420=(r01*sj5);
IkReal x2421=((1.0)*cj2);
IkReal x2422=(cj5*r00);
IkReal x2423=((1.0)*sj0);
IkReal x2424=(cj5*r20);
IkReal x2425=(cj1*sj2);
IkReal x2426=((1.0)*x2418);
IkReal x2427=((1.0)*x2417);
IkReal x2428=(sj5*x2417);
evalcond[0]=(((r21*x2428))+(((-1.0)*x2424*x2427))+(((-1.0)*r22*x2426)));
evalcond[1]=(cj0+(((-1.0)*r12*x2426))+((r11*x2428))+(((-1.0)*x2419*x2427)));
evalcond[2]=((((-1.0)*r02*x2426))+((x2417*x2420))+(((-1.0)*x2422*x2427))+(((-1.0)*x2423)));
evalcond[3]=(((x2418*x2424))+((sj1*sj2))+(((-1.0)*r22*x2427))+(((-1.0)*r21*sj5*x2426))+(((-1.0)*cj1*x2421)));
evalcond[4]=(((x2418*x2422))+(((-1.0)*r02*x2427))+(((-1.0)*cj0*sj1*x2421))+(((-1.0)*cj0*x2425))+(((-1.0)*x2420*x2426)));
evalcond[5]=((((-1.0)*r11*sj5*x2426))+(((-1.0)*x2423*x2425))+(((-1.0)*r12*x2427))+((x2418*x2419))+(((-1.0)*sj0*sj1*x2421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2429=((1.0)*cj5);
CheckValue<IkReal> x2430 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2429))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2430.valid){
continue;
}
CheckValue<IkReal> x2431=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2429))+(((-1.0)*r00*sj5)))),-1);
if(!x2431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2430.value)+(((1.5707963267949)*(x2431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2432=IKsin(j4);
IkReal x2433=IKcos(j4);
IkReal x2434=(cj5*r10);
IkReal x2435=(r01*sj5);
IkReal x2436=((1.0)*cj2);
IkReal x2437=(cj5*r00);
IkReal x2438=((1.0)*sj0);
IkReal x2439=(cj5*r20);
IkReal x2440=(cj1*sj2);
IkReal x2441=((1.0)*x2433);
IkReal x2442=((1.0)*x2432);
IkReal x2443=(sj5*x2432);
evalcond[0]=((((-1.0)*x2439*x2442))+(((-1.0)*r22*x2441))+((r21*x2443)));
evalcond[1]=(cj0+(((-1.0)*r12*x2441))+(((-1.0)*x2434*x2442))+((r11*x2443)));
evalcond[2]=((((-1.0)*x2438))+(((-1.0)*x2437*x2442))+((x2432*x2435))+(((-1.0)*r02*x2441)));
evalcond[3]=((((-1.0)*r21*sj5*x2441))+((sj1*sj2))+(((-1.0)*cj1*x2436))+((x2433*x2439))+(((-1.0)*r22*x2442)));
evalcond[4]=((((-1.0)*cj0*x2440))+(((-1.0)*x2435*x2441))+((x2433*x2437))+(((-1.0)*cj0*sj1*x2436))+(((-1.0)*r02*x2442)));
evalcond[5]=((((-1.0)*sj0*sj1*x2436))+(((-1.0)*r11*sj5*x2441))+(((-1.0)*r12*x2442))+((x2433*x2434))+(((-1.0)*x2438*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2444=cj5*cj5;
IkReal x2445=r21*r21;
IkReal x2446=(sj1*sj2);
IkReal x2447=(r21*sj5);
IkReal x2448=(cj1*cj2);
IkReal x2449=(cj5*r20);
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(IKsign((x2445+(r22*r22)+((x2444*(r20*r20)))+(((-1.0)*x2444*x2445))+(((-2.0)*x2447*x2449)))),-1);
if(!x2450.valid){
continue;
}
CheckValue<IkReal> x2451 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2448))+((r22*x2446)))),IkReal((((x2446*x2447))+((x2448*x2449))+(((-1.0)*x2446*x2449))+(((-1.0)*x2447*x2448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2450.value)))+(x2451.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2452=IKsin(j4);
IkReal x2453=IKcos(j4);
IkReal x2454=(r21*sj5);
IkReal x2455=(cj5*r20);
IkReal x2456=((1.0)*x2453);
IkReal x2457=((1.0)*x2452);
evalcond[0]=(((x2452*x2454))+(((-1.0)*r22*x2456))+(((-1.0)*x2455*x2457)));
evalcond[1]=((((-1.0)*x2454*x2456))+((x2453*x2455))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2458=(cj5*sj4);
IkReal x2459=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x2459))+(((-1.0)*r00*x2458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2459))+((r10*x2458))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x2459))+(((-1.0)*r00*x2458))))+IKsqr(((((-1.0)*r11*x2459))+((r10*x2458))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x2459))+(((-1.0)*r00*x2458))), ((((-1.0)*r11*x2459))+((r10*x2458))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2460=IKcos(j0);
IkReal x2461=IKsin(j0);
IkReal x2462=(cj4*cj5);
IkReal x2463=(cj5*r01);
IkReal x2464=(r11*sj5);
IkReal x2465=((0.1157)*sj5);
IkReal x2466=((1.0)*sj4);
IkReal x2467=((1.0)*cj2);
IkReal x2468=((0.5723)*sj2);
IkReal x2469=(cj5*r11);
IkReal x2470=((1.0)*cj4);
IkReal x2471=((0.5723)*cj2);
IkReal x2472=(r01*sj5);
IkReal x2473=((1.0)*cj1*sj2);
IkReal x2474=(sj1*x2460);
IkReal x2475=(cj1*x2460);
IkReal x2476=(cj1*x2461);
IkReal x2477=(sj1*x2461);
evalcond[0]=(x2460+(((-1.0)*r12*x2470))+(((-1.0)*cj5*r10*x2466))+((sj4*x2464)));
evalcond[1]=(((sj4*x2472))+(((-1.0)*x2461))+(((-1.0)*cj5*r00*x2466))+(((-1.0)*r02*x2470)));
evalcond[2]=(((r00*sj5))+x2463+(((-1.0)*x2467*x2475))+((sj2*x2474)));
evalcond[3]=(x2469+(((-1.0)*x2467*x2476))+((r10*sj5))+((sj2*x2477)));
evalcond[4]=((((-1.0)*x2460*x2473))+(((-1.0)*x2467*x2474))+(((-1.0)*x2470*x2472))+(((-1.0)*r02*x2466))+((r00*x2462)));
evalcond[5]=((((-1.0)*x2467*x2477))+(((-1.0)*r12*x2466))+(((-1.0)*x2461*x2473))+(((-1.0)*x2464*x2470))+((r10*x2462)));
evalcond[6]=(((x2471*x2475))+(((-1.0)*r00*x2465))+(((-0.1157)*x2463))+(((-0.163941)*x2461))+(((-1.0)*px))+(((0.612)*x2475))+(((-1.0)*x2468*x2474)));
evalcond[7]=(((x2471*x2476))+(((0.163941)*x2460))+(((-0.1157)*x2469))+(((-1.0)*py))+(((0.612)*x2476))+(((-1.0)*x2468*x2477))+(((-1.0)*r10*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2478=((1.0)*cj5);
IkReal x2479=((1.0)*sj5);
CheckValue<IkReal> x2480 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2478))+(((-1.0)*r10*x2479)))),IkReal(((((-1.0)*r01*x2478))+(((-1.0)*r00*x2479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2480.valid){
continue;
}
CheckValue<IkReal> x2481=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2481.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2480.value)+(((1.5707963267949)*(x2481.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2482=IKcos(j0);
IkReal x2483=IKsin(j0);
IkReal x2484=(cj5*r01);
IkReal x2485=(sj1*sj2);
IkReal x2486=((0.1157)*sj5);
IkReal x2487=(cj5*r11);
IkReal x2488=(cj1*cj2);
IkReal x2489=((0.5723)*x2483);
IkReal x2490=(cj1*x2483);
IkReal x2491=((0.5723)*x2482);
evalcond[0]=(((x2482*x2485))+((r00*sj5))+x2484+(((-1.0)*x2482*x2488)));
evalcond[1]=(x2487+((r10*sj5))+((x2483*x2485))+(((-1.0)*x2483*x2488)));
evalcond[2]=(((x2488*x2491))+(((-0.1157)*x2484))+(((-0.163941)*x2483))+(((-1.0)*r00*x2486))+(((-1.0)*px))+(((-1.0)*x2485*x2491))+(((0.612)*cj1*x2482)));
evalcond[3]=(((x2488*x2489))+(((-0.1157)*x2487))+(((-1.0)*r10*x2486))+(((0.612)*x2490))+(((-1.0)*py))+(((-1.0)*x2485*x2489))+(((0.163941)*x2482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2492=((1.0)*cj5);
IkReal x2493=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2492)));
j4eval[0]=x2493;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2492)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2494=((1.0)*cj5);
IkReal x2495=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2494)));
j4eval[0]=x2495;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2494))))));
j4eval[2]=IKsign(x2495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2496=((1.0)*sj0);
IkReal x2497=((1.0)*cj0);
IkReal x2498=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2498;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x2497))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x2496))+((cj5*r10*sj0)))))+(IKabs(((((-1.0)*r02*x2497))+(((-1.0)*r12*x2496))))));
j4eval[2]=IKsign(x2498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2499=((-1.0)*r20);
IkReal x2501 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2501)==0){
continue;
}
IkReal x2500=pow(x2501,-0.5);
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2499),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2502.value));
IkReal gconst79=(r21*x2500);
IkReal gconst80=(x2499*x2500);
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2503.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2504=((-1.0)*r20);
IkReal x2505=x2500;
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2504),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
IkReal x2506=((-1.0)*(x2507.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2506;
IkReal gconst78=x2506;
IkReal gconst79=(r21*x2505);
IkReal gconst80=(x2504*x2505);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2508=((-1.0)*r20);
IkReal x2509=x2500;
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2508),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
IkReal x2510=((-1.0)*(x2511.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2510;
IkReal gconst78=x2510;
IkReal gconst79=(r21*x2509);
IkReal gconst80=(x2508*x2509);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2512=((-1.0)*r20);
IkReal x2513=x2500;
CheckValue<IkReal> x2515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2512),IKFAST_ATAN2_MAGTHRESH);
if(!x2515.valid){
continue;
}
IkReal x2514=((-1.0)*(x2515.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2514;
IkReal gconst78=x2514;
IkReal gconst79=(r21*x2513);
IkReal gconst80=(x2512*x2513);
IkReal x2516=r22*r22;
CheckValue<IkReal> x2519=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2516))),-1);
if(!x2519.valid){
continue;
}
IkReal x2517=x2519.value;
IkReal x2518=(x2516+(((2.0)*x2517*(r20*r20)*(r21*r21)))+((x2517*(r21*r21*r21*r21)))+((x2517*(r20*r20*r20*r20))));
j4eval[0]=x2518;
j4eval[1]=IKsign(x2518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2520=(sj1*sj2);
IkReal x2521=(gconst80*r20);
IkReal x2522=(gconst79*r21);
IkReal x2523=(cj1*cj2);
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal((((r22*x2520))+(((-1.0)*r22*x2523)))),IkReal(((((-1.0)*x2520*x2521))+((x2521*x2523))+((x2520*x2522))+(((-1.0)*x2522*x2523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
CheckValue<IkReal> x2525=IKPowWithIntegerCheck(IKsign(((x2521*x2521)+(r22*r22)+(x2522*x2522)+(((-2.0)*x2521*x2522)))),-1);
if(!x2525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2524.value)+(((1.5707963267949)*(x2525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2526=IKsin(j4);
IkReal x2527=IKcos(j4);
IkReal x2528=(gconst79*r01);
IkReal x2529=(gconst79*r21);
IkReal x2530=((1.0)*cj2);
IkReal x2531=(gconst79*r11);
IkReal x2532=((1.0)*sj0);
IkReal x2533=(cj1*sj2);
IkReal x2534=((1.0)*x2527);
IkReal x2535=(gconst80*x2527);
IkReal x2536=((1.0)*x2526);
IkReal x2537=(gconst80*x2536);
evalcond[0]=((((-1.0)*r20*x2537))+(((-1.0)*r22*x2534))+((x2526*x2529)));
evalcond[1]=(((x2526*x2531))+cj0+(((-1.0)*r10*x2537))+(((-1.0)*r12*x2534)));
evalcond[2]=((((-1.0)*r00*x2537))+(((-1.0)*r02*x2534))+(((-1.0)*x2532))+((x2526*x2528)));
evalcond[3]=(((r20*x2535))+((sj1*sj2))+(((-1.0)*r22*x2536))+(((-1.0)*x2529*x2534))+(((-1.0)*cj1*x2530)));
evalcond[4]=((((-1.0)*x2528*x2534))+(((-1.0)*r02*x2536))+(((-1.0)*cj0*sj1*x2530))+((r00*x2535))+(((-1.0)*cj0*x2533)));
evalcond[5]=(((r10*x2535))+(((-1.0)*sj0*sj1*x2530))+(((-1.0)*x2531*x2534))+(((-1.0)*r12*x2536))+(((-1.0)*x2532*x2533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2538=((1.0)*gconst80);
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2538)))),-1);
if(!x2539.valid){
continue;
}
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2538))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2539.value)))+(x2540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2541=IKsin(j4);
IkReal x2542=IKcos(j4);
IkReal x2543=(gconst79*r01);
IkReal x2544=(gconst79*r21);
IkReal x2545=((1.0)*cj2);
IkReal x2546=(gconst79*r11);
IkReal x2547=((1.0)*sj0);
IkReal x2548=(cj1*sj2);
IkReal x2549=((1.0)*x2542);
IkReal x2550=(gconst80*x2542);
IkReal x2551=((1.0)*x2541);
IkReal x2552=(gconst80*x2551);
evalcond[0]=((((-1.0)*r20*x2552))+(((-1.0)*r22*x2549))+((x2541*x2544)));
evalcond[1]=((((-1.0)*r12*x2549))+cj0+(((-1.0)*r10*x2552))+((x2541*x2546)));
evalcond[2]=((((-1.0)*r00*x2552))+(((-1.0)*x2547))+(((-1.0)*r02*x2549))+((x2541*x2543)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2544*x2549))+(((-1.0)*cj1*x2545))+((r20*x2550))+(((-1.0)*r22*x2551)));
evalcond[4]=((((-1.0)*x2543*x2549))+((r00*x2550))+(((-1.0)*r02*x2551))+(((-1.0)*cj0*x2548))+(((-1.0)*cj0*sj1*x2545)));
evalcond[5]=((((-1.0)*r12*x2551))+(((-1.0)*sj0*sj1*x2545))+(((-1.0)*x2546*x2549))+(((-1.0)*x2547*x2548))+((r10*x2550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2553=((1.0)*gconst80);
CheckValue<IkReal> x2554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2554.valid){
continue;
}
CheckValue<IkReal> x2555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x2553)))),-1);
if(!x2555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2554.value)+(((1.5707963267949)*(x2555.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2556=IKsin(j4);
IkReal x2557=IKcos(j4);
IkReal x2558=(gconst79*r01);
IkReal x2559=(gconst79*r21);
IkReal x2560=((1.0)*cj2);
IkReal x2561=(gconst79*r11);
IkReal x2562=((1.0)*sj0);
IkReal x2563=(cj1*sj2);
IkReal x2564=((1.0)*x2557);
IkReal x2565=(gconst80*x2557);
IkReal x2566=((1.0)*x2556);
IkReal x2567=(gconst80*x2566);
evalcond[0]=((((-1.0)*r22*x2564))+(((-1.0)*r20*x2567))+((x2556*x2559)));
evalcond[1]=(cj0+((x2556*x2561))+(((-1.0)*r12*x2564))+(((-1.0)*r10*x2567)));
evalcond[2]=((((-1.0)*r00*x2567))+(((-1.0)*r02*x2564))+((x2556*x2558))+(((-1.0)*x2562)));
evalcond[3]=((((-1.0)*cj1*x2560))+(((-1.0)*r22*x2566))+((sj1*sj2))+((r20*x2565))+(((-1.0)*x2559*x2564)));
evalcond[4]=((((-1.0)*cj0*x2563))+((r00*x2565))+(((-1.0)*r02*x2566))+(((-1.0)*x2558*x2564))+(((-1.0)*cj0*sj1*x2560)));
evalcond[5]=((((-1.0)*x2562*x2563))+((r10*x2565))+(((-1.0)*x2561*x2564))+(((-1.0)*sj0*sj1*x2560))+(((-1.0)*r12*x2566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2568=((-1.0)*r21);
IkReal x2570 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2570)==0){
continue;
}
IkReal x2569=pow(x2570,-0.5);
CheckValue<IkReal> x2571 = IKatan2WithCheck(IkReal(x2568),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2571.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2571.value))));
IkReal gconst82=(x2568*x2569);
IkReal gconst83=((1.0)*r20*x2569);
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2572.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2573=((-1.0)*r21);
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal(x2573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
IkReal x2574=((1.0)*(x2576.value));
IkReal x2575=x2569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2574)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2574)));
IkReal gconst82=(x2573*x2575);
IkReal gconst83=((1.0)*r20*x2575);
IkReal x2577=r22*r22;
IkReal x2578=((1.0)*x2577);
CheckValue<IkReal> x2582=IKPowWithIntegerCheck(((-1.0)+x2577),-1);
if(!x2582.valid){
continue;
}
IkReal x2579=x2582.value;
if((((1.0)+(((-1.0)*x2578)))) < -0.00001)
continue;
IkReal x2580=IKsqrt(((1.0)+(((-1.0)*x2578))));
IkReal x2581=(cj0*x2579*x2580);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x2581+(((-1.0)*x2578*x2581))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2583=((-1.0)*r21);
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(x2583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
IkReal x2584=((1.0)*(x2586.value));
IkReal x2585=x2569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2584)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2584)));
IkReal gconst82=(x2583*x2585);
IkReal gconst83=((1.0)*r20*x2585);
IkReal x2587=r22*r22;
IkReal x2588=((1.0)*x2587);
CheckValue<IkReal> x2592=IKPowWithIntegerCheck(((-1.0)+x2587),-1);
if(!x2592.valid){
continue;
}
IkReal x2589=x2592.value;
if((((1.0)+(((-1.0)*x2588)))) < -0.00001)
continue;
IkReal x2590=IKsqrt(((1.0)+(((-1.0)*x2588))));
IkReal x2591=(sj0*x2589*x2590);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2591+(((-1.0)*x2588*x2591))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2593=((-1.0)*r21);
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal(x2593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
IkReal x2594=((1.0)*(x2596.value));
IkReal x2595=x2569;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2594)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2594)));
IkReal gconst82=(x2593*x2595);
IkReal gconst83=((1.0)*r20*x2595);
IkReal x2597=r22*r22;
IkReal x2598=(r12*sj0);
IkReal x2599=(cj0*r02);
CheckValue<IkReal> x2603=IKPowWithIntegerCheck(((-1.0)+x2597),-1);
if(!x2603.valid){
continue;
}
IkReal x2600=x2603.value;
if((((1.0)+(((-1.0)*x2597)))) < -0.00001)
continue;
IkReal x2601=IKsqrt(((1.0)+(((-1.0)*x2597))));
IkReal x2602=(r22*x2600*x2601);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2598))+(((-1.0)*x2599)))))+(IKabs((((x2598*x2602))+((x2599*x2602))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2604=((1.0)*sj0);
IkReal x2605=((1.0)*cj0);
CheckValue<IkReal> x2606=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2604))+(((-1.0)*r02*x2605)))),IkReal(((((-1.0)*gconst82*r01*x2605))+(((-1.0)*gconst82*r11*x2604))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2606.value)))+(x2607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2608=IKsin(j4);
IkReal x2609=IKcos(j4);
IkReal x2610=(gconst82*r11);
IkReal x2611=((1.0)*cj2);
IkReal x2612=((1.0)*sj0);
IkReal x2613=(cj1*sj2);
IkReal x2614=((1.0)*x2609);
IkReal x2615=(gconst83*x2609);
IkReal x2616=(gconst82*x2608);
IkReal x2617=((1.0)*x2608);
evalcond[0]=((((-1.0)*gconst83*r20*x2617))+(((-1.0)*r22*x2614))+((r21*x2616)));
evalcond[1]=(cj0+(((-1.0)*r12*x2614))+((x2608*x2610))+(((-1.0)*gconst83*r10*x2617)));
evalcond[2]=(((r01*x2616))+(((-1.0)*gconst83*r00*x2617))+(((-1.0)*r02*x2614))+(((-1.0)*x2612)));
evalcond[3]=(((r20*x2615))+(((-1.0)*gconst82*r21*x2614))+((sj1*sj2))+(((-1.0)*r22*x2617))+(((-1.0)*cj1*x2611)));
evalcond[4]=(((r00*x2615))+(((-1.0)*gconst82*r01*x2614))+(((-1.0)*cj0*x2613))+(((-1.0)*cj0*sj1*x2611))+(((-1.0)*r02*x2617)));
evalcond[5]=((((-1.0)*x2610*x2614))+(((-1.0)*r12*x2617))+(((-1.0)*x2612*x2613))+(((-1.0)*sj0*sj1*x2611))+((r10*x2615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2618=((1.0)*gconst83);
CheckValue<IkReal> x2619 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2618))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2618))+(((-1.0)*gconst82*r10)))),-1);
if(!x2620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2619.value)+(((1.5707963267949)*(x2620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2621=IKsin(j4);
IkReal x2622=IKcos(j4);
IkReal x2623=(gconst82*r11);
IkReal x2624=((1.0)*cj2);
IkReal x2625=((1.0)*sj0);
IkReal x2626=(cj1*sj2);
IkReal x2627=((1.0)*x2622);
IkReal x2628=(gconst83*x2622);
IkReal x2629=(gconst82*x2621);
IkReal x2630=((1.0)*x2621);
evalcond[0]=((((-1.0)*r22*x2627))+(((-1.0)*gconst83*r20*x2630))+((r21*x2629)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2630))+(((-1.0)*r12*x2627))+((x2621*x2623)));
evalcond[2]=(((r01*x2629))+(((-1.0)*gconst83*r00*x2630))+(((-1.0)*r02*x2627))+(((-1.0)*x2625)));
evalcond[3]=(((r20*x2628))+(((-1.0)*gconst82*r21*x2627))+((sj1*sj2))+(((-1.0)*cj1*x2624))+(((-1.0)*r22*x2630)));
evalcond[4]=(((r00*x2628))+(((-1.0)*gconst82*r01*x2627))+(((-1.0)*r02*x2630))+(((-1.0)*cj0*x2626))+(((-1.0)*cj0*sj1*x2624)));
evalcond[5]=((((-1.0)*x2623*x2627))+(((-1.0)*x2625*x2626))+(((-1.0)*sj0*sj1*x2624))+(((-1.0)*r12*x2630))+((r10*x2628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2631=((1.0)*gconst83);
CheckValue<IkReal> x2632 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2632.valid){
continue;
}
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2631))+(((-1.0)*gconst82*r00)))),-1);
if(!x2633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2632.value)+(((1.5707963267949)*(x2633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2634=IKsin(j4);
IkReal x2635=IKcos(j4);
IkReal x2636=(gconst82*r11);
IkReal x2637=((1.0)*cj2);
IkReal x2638=((1.0)*sj0);
IkReal x2639=(cj1*sj2);
IkReal x2640=((1.0)*x2635);
IkReal x2641=(gconst83*x2635);
IkReal x2642=(gconst82*x2634);
IkReal x2643=((1.0)*x2634);
evalcond[0]=((((-1.0)*gconst83*r20*x2643))+(((-1.0)*r22*x2640))+((r21*x2642)));
evalcond[1]=((((-1.0)*r12*x2640))+cj0+((x2634*x2636))+(((-1.0)*gconst83*r10*x2643)));
evalcond[2]=((((-1.0)*x2638))+(((-1.0)*r02*x2640))+((r01*x2642))+(((-1.0)*gconst83*r00*x2643)));
evalcond[3]=((((-1.0)*r22*x2643))+(((-1.0)*cj1*x2637))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2640))+((r20*x2641)));
evalcond[4]=((((-1.0)*cj0*sj1*x2637))+(((-1.0)*r02*x2643))+(((-1.0)*gconst82*r01*x2640))+((r00*x2641))+(((-1.0)*cj0*x2639)));
evalcond[5]=((((-1.0)*sj0*sj1*x2637))+(((-1.0)*r12*x2643))+((r10*x2641))+(((-1.0)*x2638*x2639))+(((-1.0)*x2636*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2644=((-1.0)*r10);
IkReal x2646 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2646)==0){
continue;
}
IkReal x2645=pow(x2646,-0.5);
CheckValue<IkReal> x2647 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2644),IKFAST_ATAN2_MAGTHRESH);
if(!x2647.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2647.value));
IkReal gconst85=(r11*x2645);
IkReal gconst86=(x2644*x2645);
CheckValue<IkReal> x2648 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2648.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2649=((-1.0)*r10);
IkReal x2650=x2645;
CheckValue<IkReal> x2652 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2649),IKFAST_ATAN2_MAGTHRESH);
if(!x2652.valid){
continue;
}
IkReal x2651=((-1.0)*(x2652.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2651;
IkReal gconst84=x2651;
IkReal gconst85=(r11*x2650);
IkReal gconst86=(x2649*x2650);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2653=((1.0)*sj0);
IkReal x2654=((1.0)*gconst85);
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2653))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2653))+(((-1.0)*cj0*r01*x2654))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
CheckValue<IkReal> x2656=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2654)))),-1);
if(!x2656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2655.value)+(((1.5707963267949)*(x2656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2657=IKsin(j4);
IkReal x2658=IKcos(j4);
IkReal x2659=(gconst85*r21);
IkReal x2660=(gconst86*r00);
IkReal x2661=(gconst86*r10);
IkReal x2662=((1.0)*cj2);
IkReal x2663=(gconst85*r11);
IkReal x2664=(gconst85*r01);
IkReal x2665=((1.0)*sj0);
IkReal x2666=(gconst86*r20);
IkReal x2667=(cj1*sj2);
IkReal x2668=((1.0)*x2658);
IkReal x2669=((1.0)*x2657);
evalcond[0]=(((x2657*x2659))+(((-1.0)*x2666*x2669))+(((-1.0)*r22*x2668)));
evalcond[1]=(((x2657*x2663))+(((-1.0)*r12*x2668))+cj0+(((-1.0)*x2661*x2669)));
evalcond[2]=(((x2657*x2664))+(((-1.0)*x2660*x2669))+(((-1.0)*r02*x2668))+(((-1.0)*x2665)));
evalcond[3]=(((x2658*x2666))+((sj1*sj2))+(((-1.0)*cj1*x2662))+(((-1.0)*x2659*x2668))+(((-1.0)*r22*x2669)));
evalcond[4]=((((-1.0)*cj0*x2667))+((x2658*x2660))+(((-1.0)*cj0*sj1*x2662))+(((-1.0)*r02*x2669))+(((-1.0)*x2664*x2668)));
evalcond[5]=((((-1.0)*r12*x2669))+((x2658*x2661))+(((-1.0)*sj0*sj1*x2662))+(((-1.0)*x2663*x2668))+(((-1.0)*x2665*x2667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2670=((1.0)*gconst86);
CheckValue<IkReal> x2671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2670))+(((-1.0)*gconst85*r00)))),-1);
if(!x2671.valid){
continue;
}
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2670)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2671.value)))+(x2672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2673=IKsin(j4);
IkReal x2674=IKcos(j4);
IkReal x2675=(gconst85*r21);
IkReal x2676=(gconst86*r00);
IkReal x2677=(gconst86*r10);
IkReal x2678=((1.0)*cj2);
IkReal x2679=(gconst85*r11);
IkReal x2680=(gconst85*r01);
IkReal x2681=((1.0)*sj0);
IkReal x2682=(gconst86*r20);
IkReal x2683=(cj1*sj2);
IkReal x2684=((1.0)*x2674);
IkReal x2685=((1.0)*x2673);
evalcond[0]=(((x2673*x2675))+(((-1.0)*r22*x2684))+(((-1.0)*x2682*x2685)));
evalcond[1]=((((-1.0)*r12*x2684))+((x2673*x2679))+cj0+(((-1.0)*x2677*x2685)));
evalcond[2]=((((-1.0)*r02*x2684))+((x2673*x2680))+(((-1.0)*x2676*x2685))+(((-1.0)*x2681)));
evalcond[3]=(((x2674*x2682))+(((-1.0)*cj1*x2678))+((sj1*sj2))+(((-1.0)*r22*x2685))+(((-1.0)*x2675*x2684)));
evalcond[4]=((((-1.0)*cj0*x2683))+(((-1.0)*r02*x2685))+(((-1.0)*cj0*sj1*x2678))+(((-1.0)*x2680*x2684))+((x2674*x2676)));
evalcond[5]=((((-1.0)*r12*x2685))+(((-1.0)*sj0*sj1*x2678))+(((-1.0)*x2679*x2684))+(((-1.0)*x2681*x2683))+((x2674*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2686=((-1.0)*r11);
IkReal x2688 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2688)==0){
continue;
}
IkReal x2687=pow(x2688,-0.5);
CheckValue<IkReal> x2689 = IKatan2WithCheck(IkReal(x2686),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2689.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2689.value))));
IkReal gconst88=(x2686*x2687);
IkReal gconst89=((1.0)*r10*x2687);
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2690.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2691=((-1.0)*r11);
CheckValue<IkReal> x2694 = IKatan2WithCheck(IkReal(x2691),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2694.valid){
continue;
}
IkReal x2692=((1.0)*(x2694.value));
IkReal x2693=x2687;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2692)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2692)));
IkReal gconst88=(x2691*x2693);
IkReal gconst89=((1.0)*r10*x2693);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2695=((-1.0)*r11);
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(x2695),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
IkReal x2696=((1.0)*(x2698.value));
IkReal x2697=x2687;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2696)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2696)));
IkReal gconst88=(x2695*x2697);
IkReal gconst89=((1.0)*r10*x2697);
IkReal x2699=r12*r12;
IkReal x2700=((1.0)*sj0);
IkReal x2701=(cj0*r02);
IkReal x2702=x2687;
j4eval[0]=((IKabs((((r12*x2701*x2702))+((sj0*x2699*x2702))+(((-1.0)*x2700*x2702)))))+(IKabs(((((-1.0)*r12*x2700))+(((-1.0)*x2701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2703=((-1.0)*r11);
CheckValue<IkReal> x2706 = IKatan2WithCheck(IkReal(x2703),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2706.valid){
continue;
}
IkReal x2704=((1.0)*(x2706.value));
IkReal x2705=x2687;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2704)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2704)));
IkReal gconst88=(x2703*x2705);
IkReal gconst89=((1.0)*r10*x2705);
IkReal x2707=r12*r12;
IkReal x2708=(cj1*cj2*r22);
IkReal x2709=(r22*sj1*sj2);
CheckValue<IkReal> x2713=IKPowWithIntegerCheck(((-1.0)+x2707),-1);
if(!x2713.valid){
continue;
}
IkReal x2710=x2713.value;
if((((1.0)+(((-1.0)*x2707)))) < -0.00001)
continue;
IkReal x2711=IKsqrt(((1.0)+(((-1.0)*x2707))));
IkReal x2712=(r12*x2710*x2711);
j4eval[0]=((IKabs(((((-1.0)*x2709*x2712))+((x2708*x2712)))))+(IKabs((x2709+(((-1.0)*x2708))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2714=(cj1*cj2);
IkReal x2715=(gconst89*r20);
IkReal x2716=(gconst88*r21);
IkReal x2717=(sj1*sj2);
CheckValue<IkReal> x2718 = IKatan2WithCheck(IkReal((((r22*x2717))+(((-1.0)*r22*x2714)))),IkReal(((((-1.0)*x2714*x2716))+(((-1.0)*x2715*x2717))+((x2716*x2717))+((x2714*x2715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2718.valid){
continue;
}
CheckValue<IkReal> x2719=IKPowWithIntegerCheck(IKsign(((x2715*x2715)+(r22*r22)+(x2716*x2716)+(((-2.0)*x2715*x2716)))),-1);
if(!x2719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2718.value)+(((1.5707963267949)*(x2719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2720=IKsin(j4);
IkReal x2721=IKcos(j4);
IkReal x2722=((1.0)*sj0);
IkReal x2723=((1.0)*cj2);
IkReal x2724=(gconst89*r20);
IkReal x2725=(gconst89*r10);
IkReal x2726=(gconst89*r00);
IkReal x2727=(cj1*sj2);
IkReal x2728=((1.0)*x2721);
IkReal x2729=((1.0)*x2720);
IkReal x2730=(gconst88*x2720);
evalcond[0]=((((-1.0)*x2724*x2729))+((r21*x2730))+(((-1.0)*r22*x2728)));
evalcond[1]=((((-1.0)*x2725*x2729))+cj0+(((-1.0)*r12*x2728))+((r11*x2730)));
evalcond[2]=((((-1.0)*x2726*x2729))+((r01*x2730))+(((-1.0)*x2722))+(((-1.0)*r02*x2728)));
evalcond[3]=(((sj1*sj2))+((x2721*x2724))+(((-1.0)*r22*x2729))+(((-1.0)*gconst88*r21*x2728))+(((-1.0)*cj1*x2723)));
evalcond[4]=(((x2721*x2726))+(((-1.0)*cj0*x2727))+(((-1.0)*gconst88*r01*x2728))+(((-1.0)*r02*x2729))+(((-1.0)*cj0*sj1*x2723)));
evalcond[5]=((((-1.0)*cj2*sj1*x2722))+(((-1.0)*gconst88*r11*x2728))+(((-1.0)*x2722*x2727))+(((-1.0)*r12*x2729))+((x2721*x2725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2731=((1.0)*sj0);
IkReal x2732=((1.0)*cj0);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2732))+(((-1.0)*r12*x2731)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2732))+(((-1.0)*gconst88*r11*x2731))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
CheckValue<IkReal> x2734=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2733.value)+(((1.5707963267949)*(x2734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2735=IKsin(j4);
IkReal x2736=IKcos(j4);
IkReal x2737=((1.0)*sj0);
IkReal x2738=((1.0)*cj2);
IkReal x2739=(gconst89*r20);
IkReal x2740=(gconst89*r10);
IkReal x2741=(gconst89*r00);
IkReal x2742=(cj1*sj2);
IkReal x2743=((1.0)*x2736);
IkReal x2744=((1.0)*x2735);
IkReal x2745=(gconst88*x2735);
evalcond[0]=(((r21*x2745))+(((-1.0)*x2739*x2744))+(((-1.0)*r22*x2743)));
evalcond[1]=(((r11*x2745))+cj0+(((-1.0)*x2740*x2744))+(((-1.0)*r12*x2743)));
evalcond[2]=((((-1.0)*x2741*x2744))+((r01*x2745))+(((-1.0)*x2737))+(((-1.0)*r02*x2743)));
evalcond[3]=((((-1.0)*gconst88*r21*x2743))+((sj1*sj2))+((x2736*x2739))+(((-1.0)*cj1*x2738))+(((-1.0)*r22*x2744)));
evalcond[4]=((((-1.0)*cj0*sj1*x2738))+(((-1.0)*cj0*x2742))+((x2736*x2741))+(((-1.0)*r02*x2744))+(((-1.0)*gconst88*r01*x2743)));
evalcond[5]=((((-1.0)*cj2*sj1*x2737))+(((-1.0)*gconst88*r11*x2743))+(((-1.0)*r12*x2744))+(((-1.0)*x2737*x2742))+((x2736*x2740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2746=((1.0)*gconst89);
CheckValue<IkReal> x2747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2746))+(((-1.0)*gconst88*r00)))),-1);
if(!x2747.valid){
continue;
}
CheckValue<IkReal> x2748 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2746))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2747.value)))+(x2748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2749=IKsin(j4);
IkReal x2750=IKcos(j4);
IkReal x2751=((1.0)*sj0);
IkReal x2752=((1.0)*cj2);
IkReal x2753=(gconst89*r20);
IkReal x2754=(gconst89*r10);
IkReal x2755=(gconst89*r00);
IkReal x2756=(cj1*sj2);
IkReal x2757=((1.0)*x2750);
IkReal x2758=((1.0)*x2749);
IkReal x2759=(gconst88*x2749);
evalcond[0]=((((-1.0)*r22*x2757))+((r21*x2759))+(((-1.0)*x2753*x2758)));
evalcond[1]=(((r11*x2759))+cj0+(((-1.0)*r12*x2757))+(((-1.0)*x2754*x2758)));
evalcond[2]=(((r01*x2759))+(((-1.0)*x2755*x2758))+(((-1.0)*x2751))+(((-1.0)*r02*x2757)));
evalcond[3]=((((-1.0)*r22*x2758))+(((-1.0)*gconst88*r21*x2757))+((x2750*x2753))+((sj1*sj2))+(((-1.0)*cj1*x2752)));
evalcond[4]=((((-1.0)*gconst88*r01*x2757))+((x2750*x2755))+(((-1.0)*cj0*x2756))+(((-1.0)*cj0*sj1*x2752))+(((-1.0)*r02*x2758)));
evalcond[5]=((((-1.0)*gconst88*r11*x2757))+(((-1.0)*cj2*sj1*x2751))+((x2750*x2754))+(((-1.0)*r12*x2758))+(((-1.0)*x2751*x2756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2760=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2760;
j4eval[1]=IKsign(x2760);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2761=((1.0)*cj5);
IkReal x2762=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2761)));
j4eval[0]=x2762;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2761)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2763=cj5*cj5;
IkReal x2764=r11*r11;
IkReal x2765=(r11*sj5);
IkReal x2766=(cj5*r10);
IkReal x2767=(x2764+(r12*r12)+(((-1.0)*x2763*x2764))+(((-2.0)*x2765*x2766))+((x2763*(r10*r10))));
j4eval[0]=x2767;
j4eval[1]=IKsign(x2767);
j4eval[2]=((IKabs(r12))+(IKabs((x2766+(((-1.0)*x2765))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2768=cj5*cj5;
IkReal x2769=r11*r11;
IkReal x2770=(cj5*r10);
IkReal x2771=(r11*sj5);
CheckValue<IkReal> x2772 = IKatan2WithCheck(IkReal((x2770+(((-1.0)*x2771)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2772.valid){
continue;
}
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(IKsign((x2769+(((-1.0)*x2768*x2769))+(r12*r12)+((x2768*(r10*r10)))+(((-2.0)*x2770*x2771)))),-1);
if(!x2773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2772.value)+(((1.5707963267949)*(x2773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2774=IKsin(j4);
IkReal x2775=IKcos(j4);
IkReal x2776=(cj5*r10);
IkReal x2777=(r01*sj5);
IkReal x2778=((1.0)*cj2);
IkReal x2779=(cj5*r00);
IkReal x2780=(cj5*r20);
IkReal x2781=((1.0)*x2775);
IkReal x2782=((1.0)*x2774);
IkReal x2783=(sj5*x2774);
evalcond[0]=(((r21*x2783))+(((-1.0)*x2780*x2782))+(((-1.0)*r22*x2781)));
evalcond[1]=(((x2774*x2777))+(((-1.0)*x2779*x2782))+(((-1.0)*r02*x2781)));
evalcond[2]=((((-1.0)*r12*x2782))+((x2775*x2776))+(((-1.0)*r11*sj5*x2781)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2781))+((r11*x2783))+(((-1.0)*x2776*x2782)));
evalcond[4]=((((-1.0)*r21*sj5*x2781))+((sj1*sj2))+(((-1.0)*r22*x2782))+(((-1.0)*cj1*x2778))+((x2775*x2780)));
evalcond[5]=(((x2775*x2779))+(((-1.0)*cj1*sj2))+(((-1.0)*x2777*x2781))+(((-1.0)*sj1*x2778))+(((-1.0)*r02*x2782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2784=((1.0)*cj5);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2784))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2784)))),-1);
if(!x2786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2785.value)+(((1.5707963267949)*(x2786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2787=IKsin(j4);
IkReal x2788=IKcos(j4);
IkReal x2789=(cj5*r10);
IkReal x2790=(r01*sj5);
IkReal x2791=((1.0)*cj2);
IkReal x2792=(cj5*r00);
IkReal x2793=(cj5*r20);
IkReal x2794=((1.0)*x2788);
IkReal x2795=((1.0)*x2787);
IkReal x2796=(sj5*x2787);
evalcond[0]=(((r21*x2796))+(((-1.0)*r22*x2794))+(((-1.0)*x2793*x2795)));
evalcond[1]=(((x2787*x2790))+(((-1.0)*x2792*x2795))+(((-1.0)*r02*x2794)));
evalcond[2]=((((-1.0)*r11*sj5*x2794))+((x2788*x2789))+(((-1.0)*r12*x2795)));
evalcond[3]=((1.0)+(((-1.0)*x2789*x2795))+((r11*x2796))+(((-1.0)*r12*x2794)));
evalcond[4]=((((-1.0)*r21*sj5*x2794))+((sj1*sj2))+(((-1.0)*r22*x2795))+(((-1.0)*cj1*x2791))+((x2788*x2793)));
evalcond[5]=((((-1.0)*x2790*x2794))+(((-1.0)*sj1*x2791))+(((-1.0)*cj1*sj2))+((x2788*x2792))+(((-1.0)*r02*x2795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2797=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2797.valid){
continue;
}
CheckValue<IkReal> x2798 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2797.value)))+(x2798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2799=IKsin(j4);
IkReal x2800=IKcos(j4);
IkReal x2801=(cj5*r10);
IkReal x2802=(r01*sj5);
IkReal x2803=((1.0)*cj2);
IkReal x2804=(cj5*r00);
IkReal x2805=(cj5*r20);
IkReal x2806=((1.0)*x2800);
IkReal x2807=((1.0)*x2799);
IkReal x2808=(sj5*x2799);
evalcond[0]=((((-1.0)*x2805*x2807))+(((-1.0)*r22*x2806))+((r21*x2808)));
evalcond[1]=((((-1.0)*x2804*x2807))+((x2799*x2802))+(((-1.0)*r02*x2806)));
evalcond[2]=((((-1.0)*r12*x2807))+(((-1.0)*r11*sj5*x2806))+((x2800*x2801)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2806))+((r11*x2808))+(((-1.0)*x2801*x2807)));
evalcond[4]=((((-1.0)*r21*sj5*x2806))+(((-1.0)*cj1*x2803))+((sj1*sj2))+(((-1.0)*r22*x2807))+((x2800*x2805)));
evalcond[5]=((((-1.0)*sj1*x2803))+(((-1.0)*x2802*x2806))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2807))+((x2800*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2809=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2809;
j4eval[1]=IKsign(x2809);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2810=((1.0)*cj5);
IkReal x2811=((((-1.0)*r21*x2810))+(((-1.0)*r20*sj5)));
j4eval[0]=x2811;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2810)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2812=cj5*cj5;
IkReal x2813=r11*r11;
IkReal x2814=(cj5*r10);
IkReal x2815=(r11*sj5);
IkReal x2816=(((x2812*x2813))+(((-1.0)*x2813))+(((2.0)*x2814*x2815))+(((-1.0)*(r12*r12)))+(((-1.0)*x2812*(r10*r10))));
j4eval[0]=x2816;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2815))+x2814))));
j4eval[2]=IKsign(x2816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2817=cj5*cj5;
IkReal x2818=r11*r11;
IkReal x2819=(cj5*r10);
IkReal x2820=(r11*sj5);
CheckValue<IkReal> x2821=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2818))+(((-1.0)*x2817*(r10*r10)))+(((2.0)*x2819*x2820))+(((-1.0)*(r12*r12)))+((x2817*x2818)))),-1);
if(!x2821.valid){
continue;
}
CheckValue<IkReal> x2822 = IKatan2WithCheck(IkReal(((((-1.0)*x2820))+x2819)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2821.value)))+(x2822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2823=IKsin(j4);
IkReal x2824=IKcos(j4);
IkReal x2825=(cj5*r10);
IkReal x2826=(r01*sj5);
IkReal x2827=(cj5*r00);
IkReal x2828=(cj5*r20);
IkReal x2829=((1.0)*x2824);
IkReal x2830=((1.0)*x2823);
IkReal x2831=(sj5*x2823);
evalcond[0]=((((-1.0)*r22*x2829))+(((-1.0)*x2828*x2830))+((r21*x2831)));
evalcond[1]=(((x2823*x2826))+(((-1.0)*r02*x2829))+(((-1.0)*x2827*x2830)));
evalcond[2]=(((x2824*x2825))+(((-1.0)*r11*sj5*x2829))+(((-1.0)*r12*x2830)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2829))+(((-1.0)*x2825*x2830))+((r11*x2831)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2824*x2827))+(((-1.0)*x2826*x2829))+(((-1.0)*r02*x2830)));
evalcond[5]=(((x2824*x2828))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2830))+(((-1.0)*r21*sj5*x2829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2832=((1.0)*cj5);
CheckValue<IkReal> x2833 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2832))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2833.valid){
continue;
}
CheckValue<IkReal> x2834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2832))+(((-1.0)*r20*sj5)))),-1);
if(!x2834.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2833.value)+(((1.5707963267949)*(x2834.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2835=IKsin(j4);
IkReal x2836=IKcos(j4);
IkReal x2837=(cj5*r10);
IkReal x2838=(r01*sj5);
IkReal x2839=(cj5*r00);
IkReal x2840=(cj5*r20);
IkReal x2841=((1.0)*x2836);
IkReal x2842=((1.0)*x2835);
IkReal x2843=(sj5*x2835);
evalcond[0]=(((r21*x2843))+(((-1.0)*x2840*x2842))+(((-1.0)*r22*x2841)));
evalcond[1]=((((-1.0)*x2839*x2842))+(((-1.0)*r02*x2841))+((x2835*x2838)));
evalcond[2]=(((x2836*x2837))+(((-1.0)*r12*x2842))+(((-1.0)*r11*sj5*x2841)));
evalcond[3]=((-1.0)+((r11*x2843))+(((-1.0)*r12*x2841))+(((-1.0)*x2837*x2842)));
evalcond[4]=(((x2836*x2839))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2842))+(((-1.0)*x2838*x2841)));
evalcond[5]=(((x2836*x2840))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2842))+(((-1.0)*r21*sj5*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2844 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2844.valid){
continue;
}
CheckValue<IkReal> x2845=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2844.value)+(((1.5707963267949)*(x2845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2846=IKsin(j4);
IkReal x2847=IKcos(j4);
IkReal x2848=(cj5*r10);
IkReal x2849=(r01*sj5);
IkReal x2850=(cj5*r00);
IkReal x2851=(cj5*r20);
IkReal x2852=((1.0)*x2847);
IkReal x2853=((1.0)*x2846);
IkReal x2854=(sj5*x2846);
evalcond[0]=(((r21*x2854))+(((-1.0)*x2851*x2853))+(((-1.0)*r22*x2852)));
evalcond[1]=(((x2846*x2849))+(((-1.0)*x2850*x2853))+(((-1.0)*r02*x2852)));
evalcond[2]=((((-1.0)*r11*sj5*x2852))+((x2847*x2848))+(((-1.0)*r12*x2853)));
evalcond[3]=((-1.0)+((r11*x2854))+(((-1.0)*r12*x2852))+(((-1.0)*x2848*x2853)));
evalcond[4]=(((cj2*sj1))+((x2847*x2850))+((cj1*sj2))+(((-1.0)*x2849*x2852))+(((-1.0)*r02*x2853)));
evalcond[5]=(((x2847*x2851))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2853))+(((-1.0)*r21*sj5*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2855=((-1.0)*r00);
IkReal x2857 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2857)==0){
continue;
}
IkReal x2856=pow(x2857,-0.5);
CheckValue<IkReal> x2858 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2855),IKFAST_ATAN2_MAGTHRESH);
if(!x2858.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2858.value));
IkReal gconst91=(r01*x2856);
IkReal gconst92=(x2855*x2856);
CheckValue<IkReal> x2859 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2859.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2859.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2860=((-1.0)*r00);
IkReal x2861=x2856;
CheckValue<IkReal> x2863 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2860),IKFAST_ATAN2_MAGTHRESH);
if(!x2863.valid){
continue;
}
IkReal x2862=((-1.0)*(x2863.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2862;
IkReal gconst90=x2862;
IkReal gconst91=(r01*x2861);
IkReal gconst92=(x2860*x2861);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2864=((1.0)*sj0);
IkReal x2865=((1.0)*cj0);
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2865))+(((-1.0)*r12*x2864)))),IkReal(((((-1.0)*gconst91*r11*x2864))+(((-1.0)*gconst91*r01*x2865))+((cj0*gconst92*r00))+((gconst92*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
CheckValue<IkReal> x2867=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2866.value)+(((1.5707963267949)*(x2867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2868=IKsin(j4);
IkReal x2869=IKcos(j4);
IkReal x2870=((1.0)*cj2);
IkReal x2871=(gconst92*r00);
IkReal x2872=(gconst92*r20);
IkReal x2873=((1.0)*sj0);
IkReal x2874=(gconst92*r10);
IkReal x2875=(cj1*sj2);
IkReal x2876=((1.0)*x2869);
IkReal x2877=(gconst91*x2868);
IkReal x2878=((1.0)*x2868);
evalcond[0]=((((-1.0)*r22*x2876))+((r21*x2877))+(((-1.0)*x2872*x2878)));
evalcond[1]=(cj0+((r11*x2877))+(((-1.0)*x2874*x2878))+(((-1.0)*r12*x2876)));
evalcond[2]=((((-1.0)*r02*x2876))+((r01*x2877))+(((-1.0)*x2871*x2878))+(((-1.0)*x2873)));
evalcond[3]=(((x2869*x2872))+(((-1.0)*r22*x2878))+(((-1.0)*cj1*x2870))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2876)));
evalcond[4]=((((-1.0)*r02*x2878))+(((-1.0)*cj0*x2875))+(((-1.0)*cj0*sj1*x2870))+((x2869*x2871))+(((-1.0)*gconst91*r01*x2876)));
evalcond[5]=((((-1.0)*sj0*sj1*x2870))+(((-1.0)*gconst91*r11*x2876))+((x2869*x2874))+(((-1.0)*x2873*x2875))+(((-1.0)*r12*x2878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2879=((1.0)*gconst92);
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2879)))),-1);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2880.value)))+(x2881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2882=IKsin(j4);
IkReal x2883=IKcos(j4);
IkReal x2884=((1.0)*cj2);
IkReal x2885=(gconst92*r00);
IkReal x2886=(gconst92*r20);
IkReal x2887=((1.0)*sj0);
IkReal x2888=(gconst92*r10);
IkReal x2889=(cj1*sj2);
IkReal x2890=((1.0)*x2883);
IkReal x2891=(gconst91*x2882);
IkReal x2892=((1.0)*x2882);
evalcond[0]=((((-1.0)*r22*x2890))+((r21*x2891))+(((-1.0)*x2886*x2892)));
evalcond[1]=(cj0+(((-1.0)*x2888*x2892))+((r11*x2891))+(((-1.0)*r12*x2890)));
evalcond[2]=((((-1.0)*r02*x2890))+((r01*x2891))+(((-1.0)*x2885*x2892))+(((-1.0)*x2887)));
evalcond[3]=((((-1.0)*r22*x2892))+(((-1.0)*gconst91*r21*x2890))+((sj1*sj2))+(((-1.0)*cj1*x2884))+((x2883*x2886)));
evalcond[4]=((((-1.0)*r02*x2892))+(((-1.0)*cj0*sj1*x2884))+(((-1.0)*cj0*x2889))+(((-1.0)*gconst91*r01*x2890))+((x2883*x2885)));
evalcond[5]=((((-1.0)*sj0*sj1*x2884))+(((-1.0)*x2887*x2889))+(((-1.0)*gconst91*r11*x2890))+((x2883*x2888))+(((-1.0)*r12*x2892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2893=((-1.0)*r01);
IkReal x2895 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2895)==0){
continue;
}
IkReal x2894=pow(x2895,-0.5);
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(x2893),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2896.value))));
IkReal gconst94=(x2893*x2894);
IkReal gconst95=((1.0)*r00*x2894);
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2897.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2898=((-1.0)*r01);
CheckValue<IkReal> x2901 = IKatan2WithCheck(IkReal(x2898),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2901.valid){
continue;
}
IkReal x2899=((1.0)*(x2901.value));
IkReal x2900=x2894;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2899)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2899)));
IkReal gconst94=(x2898*x2900);
IkReal gconst95=((1.0)*r00*x2900);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2902=((-1.0)*r01);
CheckValue<IkReal> x2905 = IKatan2WithCheck(IkReal(x2902),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2905.valid){
continue;
}
IkReal x2903=((1.0)*(x2905.value));
IkReal x2904=x2894;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2903)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2903)));
IkReal gconst94=(x2902*x2904);
IkReal gconst95=((1.0)*r00*x2904);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2906=((-1.0)*r01);
CheckValue<IkReal> x2909 = IKatan2WithCheck(IkReal(x2906),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2909.valid){
continue;
}
IkReal x2907=((1.0)*(x2909.value));
IkReal x2908=x2894;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2907)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2907)));
IkReal gconst94=(x2906*x2908);
IkReal gconst95=((1.0)*r00*x2908);
IkReal x2910=r02*r02;
IkReal x2911=(r12*sj0);
IkReal x2912=((1.0)*cj0);
IkReal x2913=x2894;
j4eval[0]=((IKabs((((r02*x2911*x2913))+(((-1.0)*x2912*x2913))+((cj0*x2910*x2913)))))+(IKabs(((((-1.0)*x2911))+(((-1.0)*r02*x2912))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2914=((1.0)*sj0);
IkReal x2915=((1.0)*cj0);
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2914))+(((-1.0)*r02*x2915)))),IkReal((((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2915))+(((-1.0)*gconst94*r11*x2914))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
CheckValue<IkReal> x2917=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2916.value)+(((1.5707963267949)*(x2917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2918=IKsin(j4);
IkReal x2919=IKcos(j4);
IkReal x2920=(gconst94*r11);
IkReal x2921=((1.0)*cj2);
IkReal x2922=(gconst94*r21);
IkReal x2923=((1.0)*sj0);
IkReal x2924=(gconst94*r01);
IkReal x2925=(cj1*sj2);
IkReal x2926=((1.0)*x2919);
IkReal x2927=(gconst95*x2919);
IkReal x2928=((1.0)*x2918);
IkReal x2929=(gconst95*x2928);
evalcond[0]=((((-1.0)*r20*x2929))+((x2918*x2922))+(((-1.0)*r22*x2926)));
evalcond[1]=(cj0+(((-1.0)*r10*x2929))+((x2918*x2920))+(((-1.0)*r12*x2926)));
evalcond[2]=((((-1.0)*r02*x2926))+(((-1.0)*x2923))+((x2918*x2924))+(((-1.0)*r00*x2929)));
evalcond[3]=(((sj1*sj2))+((r20*x2927))+(((-1.0)*cj1*x2921))+(((-1.0)*r22*x2928))+(((-1.0)*x2922*x2926)));
evalcond[4]=((((-1.0)*r02*x2928))+(((-1.0)*cj0*sj1*x2921))+(((-1.0)*cj0*x2925))+((r00*x2927))+(((-1.0)*x2924*x2926)));
evalcond[5]=((((-1.0)*x2920*x2926))+(((-1.0)*x2923*x2925))+((r10*x2927))+(((-1.0)*sj0*sj1*x2921))+(((-1.0)*r12*x2928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2930=((1.0)*gconst95);
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2930)))),-1);
if(!x2932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2931.value)+(((1.5707963267949)*(x2932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2933=IKsin(j4);
IkReal x2934=IKcos(j4);
IkReal x2935=(gconst94*r11);
IkReal x2936=((1.0)*cj2);
IkReal x2937=(gconst94*r21);
IkReal x2938=((1.0)*sj0);
IkReal x2939=(gconst94*r01);
IkReal x2940=(cj1*sj2);
IkReal x2941=((1.0)*x2934);
IkReal x2942=(gconst95*x2934);
IkReal x2943=((1.0)*x2933);
IkReal x2944=(gconst95*x2943);
evalcond[0]=((((-1.0)*r20*x2944))+(((-1.0)*r22*x2941))+((x2933*x2937)));
evalcond[1]=((((-1.0)*r12*x2941))+cj0+(((-1.0)*r10*x2944))+((x2933*x2935)));
evalcond[2]=((((-1.0)*r02*x2941))+(((-1.0)*x2938))+(((-1.0)*r00*x2944))+((x2933*x2939)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2936))+(((-1.0)*r22*x2943))+((r20*x2942))+(((-1.0)*x2937*x2941)));
evalcond[4]=((((-1.0)*x2939*x2941))+(((-1.0)*r02*x2943))+(((-1.0)*cj0*x2940))+((r00*x2942))+(((-1.0)*cj0*sj1*x2936)));
evalcond[5]=((((-1.0)*r12*x2943))+(((-1.0)*x2935*x2941))+((r10*x2942))+(((-1.0)*sj0*sj1*x2936))+(((-1.0)*x2938*x2940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2945=((1.0)*gconst95);
CheckValue<IkReal> x2946 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2945)))),-1);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2946.value)+(((1.5707963267949)*(x2947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(gconst94*r11);
IkReal x2951=((1.0)*cj2);
IkReal x2952=(gconst94*r21);
IkReal x2953=((1.0)*sj0);
IkReal x2954=(gconst94*r01);
IkReal x2955=(cj1*sj2);
IkReal x2956=((1.0)*x2949);
IkReal x2957=(gconst95*x2949);
IkReal x2958=((1.0)*x2948);
IkReal x2959=(gconst95*x2958);
evalcond[0]=((((-1.0)*r20*x2959))+((x2948*x2952))+(((-1.0)*r22*x2956)));
evalcond[1]=((((-1.0)*r10*x2959))+cj0+((x2948*x2950))+(((-1.0)*r12*x2956)));
evalcond[2]=((((-1.0)*r02*x2956))+(((-1.0)*x2953))+((x2948*x2954))+(((-1.0)*r00*x2959)));
evalcond[3]=((((-1.0)*x2952*x2956))+((sj1*sj2))+((r20*x2957))+(((-1.0)*r22*x2958))+(((-1.0)*cj1*x2951)));
evalcond[4]=((((-1.0)*r02*x2958))+(((-1.0)*cj0*x2955))+(((-1.0)*cj0*sj1*x2951))+((r00*x2957))+(((-1.0)*x2954*x2956)));
evalcond[5]=((((-1.0)*x2953*x2955))+((r10*x2957))+(((-1.0)*sj0*sj1*x2951))+(((-1.0)*r12*x2958))+(((-1.0)*x2950*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2960=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2960;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2961=((1.0)*cj5);
IkReal x2962=((((-1.0)*r11*x2961))+(((-1.0)*r10*sj5)));
j4eval[0]=x2962;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2961))))));
j4eval[2]=IKsign(x2962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2963=cj5*cj5;
IkReal x2964=r01*r01;
IkReal x2965=(r01*sj5);
IkReal x2966=(cj5*r00);
IkReal x2967=((((2.0)*x2965*x2966))+(((-1.0)*x2964))+(((-1.0)*(r02*r02)))+(((-1.0)*x2963*(r00*r00)))+((x2963*x2964)));
j4eval[0]=x2967;
j4eval[1]=IKsign(x2967);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2965))+x2966))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2968=cj5*cj5;
IkReal x2969=r01*r01;
IkReal x2970=(r01*sj5);
IkReal x2971=(cj5*r00);
CheckValue<IkReal> x2972=IKPowWithIntegerCheck(IKsign(((((2.0)*x2970*x2971))+(((-1.0)*x2969))+(((-1.0)*(r02*r02)))+(((-1.0)*x2968*(r00*r00)))+((x2968*x2969)))),-1);
if(!x2972.valid){
continue;
}
CheckValue<IkReal> x2973 = IKatan2WithCheck(IkReal(((((-1.0)*x2970))+x2971)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2972.value)))+(x2973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2974=IKsin(j4);
IkReal x2975=IKcos(j4);
IkReal x2976=(cj5*r10);
IkReal x2977=(r01*sj5);
IkReal x2978=((1.0)*cj2);
IkReal x2979=(cj5*r00);
IkReal x2980=(cj5*r20);
IkReal x2981=((1.0)*x2975);
IkReal x2982=((1.0)*x2974);
IkReal x2983=(sj5*x2974);
evalcond[0]=((((-1.0)*x2980*x2982))+(((-1.0)*r22*x2981))+((r21*x2983)));
evalcond[1]=(((r11*x2983))+(((-1.0)*x2976*x2982))+(((-1.0)*r12*x2981)));
evalcond[2]=((((-1.0)*x2977*x2981))+((x2975*x2979))+(((-1.0)*r02*x2982)));
evalcond[3]=((-1.0)+(((-1.0)*x2979*x2982))+((x2974*x2977))+(((-1.0)*r02*x2981)));
evalcond[4]=((((-1.0)*r21*sj5*x2981))+((sj1*sj2))+(((-1.0)*r22*x2982))+(((-1.0)*cj1*x2978))+((x2975*x2980)));
evalcond[5]=((((-1.0)*r12*x2982))+(((-1.0)*cj1*sj2))+((x2975*x2976))+(((-1.0)*r11*sj5*x2981))+(((-1.0)*sj1*x2978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2984=((1.0)*cj5);
CheckValue<IkReal> x2985 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2984)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2985.valid){
continue;
}
CheckValue<IkReal> x2986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2984)))),-1);
if(!x2986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2985.value)+(((1.5707963267949)*(x2986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2987=IKsin(j4);
IkReal x2988=IKcos(j4);
IkReal x2989=(cj5*r10);
IkReal x2990=(r01*sj5);
IkReal x2991=((1.0)*cj2);
IkReal x2992=(cj5*r00);
IkReal x2993=(cj5*r20);
IkReal x2994=((1.0)*x2988);
IkReal x2995=((1.0)*x2987);
IkReal x2996=(sj5*x2987);
evalcond[0]=((((-1.0)*r22*x2994))+(((-1.0)*x2993*x2995))+((r21*x2996)));
evalcond[1]=((((-1.0)*r12*x2994))+(((-1.0)*x2989*x2995))+((r11*x2996)));
evalcond[2]=(((x2988*x2992))+(((-1.0)*r02*x2995))+(((-1.0)*x2990*x2994)));
evalcond[3]=((-1.0)+(((-1.0)*x2992*x2995))+((x2987*x2990))+(((-1.0)*r02*x2994)));
evalcond[4]=((((-1.0)*r22*x2995))+((sj1*sj2))+(((-1.0)*cj1*x2991))+(((-1.0)*r21*sj5*x2994))+((x2988*x2993)));
evalcond[5]=(((x2988*x2989))+(((-1.0)*sj1*x2991))+(((-1.0)*r12*x2995))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2997=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2997.valid){
continue;
}
CheckValue<IkReal> x2998 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2997.value)))+(x2998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2999=IKsin(j4);
IkReal x3000=IKcos(j4);
IkReal x3001=(cj5*r10);
IkReal x3002=(r01*sj5);
IkReal x3003=((1.0)*cj2);
IkReal x3004=(cj5*r00);
IkReal x3005=(cj5*r20);
IkReal x3006=((1.0)*x3000);
IkReal x3007=((1.0)*x2999);
IkReal x3008=(sj5*x2999);
evalcond[0]=((((-1.0)*r22*x3006))+(((-1.0)*x3005*x3007))+((r21*x3008)));
evalcond[1]=((((-1.0)*r12*x3006))+((r11*x3008))+(((-1.0)*x3001*x3007)));
evalcond[2]=((((-1.0)*x3002*x3006))+(((-1.0)*r02*x3007))+((x3000*x3004)));
evalcond[3]=((-1.0)+((x2999*x3002))+(((-1.0)*r02*x3006))+(((-1.0)*x3004*x3007)));
evalcond[4]=((((-1.0)*r22*x3007))+(((-1.0)*r21*sj5*x3006))+((sj1*sj2))+((x3000*x3005))+(((-1.0)*cj1*x3003)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3006))+((x3000*x3001))+(((-1.0)*r12*x3007))+(((-1.0)*sj1*x3003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3009=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3009;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3010=((1.0)*cj5);
IkReal x3011=((((-1.0)*r21*x3010))+(((-1.0)*r20*sj5)));
j4eval[0]=x3011;
j4eval[1]=((IKabs(((((-1.0)*r10*x3010))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3012=cj5*cj5;
IkReal x3013=r01*r01;
IkReal x3014=(cj5*r00);
IkReal x3015=(r01*sj5);
IkReal x3016=(x3013+(((-1.0)*x3012*x3013))+(r02*r02)+((x3012*(r00*r00)))+(((-2.0)*x3014*x3015)));
j4eval[0]=x3016;
j4eval[1]=((IKabs(r02))+(IKabs((x3014+(((-1.0)*x3015))))));
j4eval[2]=IKsign(x3016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3017=cj5*cj5;
IkReal x3018=r01*r01;
IkReal x3019=(r01*sj5);
IkReal x3020=(cj5*r00);
CheckValue<IkReal> x3021=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3017*x3018))+x3018+(((-2.0)*x3019*x3020))+((x3017*(r00*r00)))+(r02*r02))),-1);
if(!x3021.valid){
continue;
}
CheckValue<IkReal> x3022 = IKatan2WithCheck(IkReal((x3020+(((-1.0)*x3019)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3021.value)))+(x3022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3023=IKsin(j4);
IkReal x3024=IKcos(j4);
IkReal x3025=(cj5*r10);
IkReal x3026=(r01*sj5);
IkReal x3027=(cj5*r00);
IkReal x3028=(cj5*r20);
IkReal x3029=((1.0)*x3024);
IkReal x3030=((1.0)*x3023);
IkReal x3031=(sj5*x3023);
evalcond[0]=((((-1.0)*x3028*x3030))+((r21*x3031))+(((-1.0)*r22*x3029)));
evalcond[1]=((((-1.0)*r12*x3029))+(((-1.0)*x3025*x3030))+((r11*x3031)));
evalcond[2]=((((-1.0)*x3026*x3029))+(((-1.0)*r02*x3030))+((x3024*x3027)));
evalcond[3]=((1.0)+(((-1.0)*x3027*x3030))+((x3023*x3026))+(((-1.0)*r02*x3029)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3029))+((cj1*sj2))+(((-1.0)*r12*x3030))+((x3024*x3025)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3030))+((x3024*x3028))+(((-1.0)*r21*sj5*x3029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3032=((1.0)*cj5);
CheckValue<IkReal> x3033 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3033.valid){
continue;
}
CheckValue<IkReal> x3034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3032))+(((-1.0)*r20*sj5)))),-1);
if(!x3034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3033.value)+(((1.5707963267949)*(x3034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3035=IKsin(j4);
IkReal x3036=IKcos(j4);
IkReal x3037=(cj5*r10);
IkReal x3038=(r01*sj5);
IkReal x3039=(cj5*r00);
IkReal x3040=(cj5*r20);
IkReal x3041=((1.0)*x3036);
IkReal x3042=((1.0)*x3035);
IkReal x3043=(sj5*x3035);
evalcond[0]=(((r21*x3043))+(((-1.0)*r22*x3041))+(((-1.0)*x3040*x3042)));
evalcond[1]=((((-1.0)*r12*x3041))+(((-1.0)*x3037*x3042))+((r11*x3043)));
evalcond[2]=((((-1.0)*x3038*x3041))+((x3036*x3039))+(((-1.0)*r02*x3042)));
evalcond[3]=((1.0)+(((-1.0)*x3039*x3042))+((x3035*x3038))+(((-1.0)*r02*x3041)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3042))+((cj1*sj2))+((x3036*x3037))+(((-1.0)*r11*sj5*x3041)));
evalcond[5]=((((-1.0)*r22*x3042))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3041))+((x3036*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3044 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3044.valid){
continue;
}
CheckValue<IkReal> x3045=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3044.value)+(((1.5707963267949)*(x3045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3046=IKsin(j4);
IkReal x3047=IKcos(j4);
IkReal x3048=(cj5*r10);
IkReal x3049=(r01*sj5);
IkReal x3050=(cj5*r00);
IkReal x3051=(cj5*r20);
IkReal x3052=((1.0)*x3047);
IkReal x3053=((1.0)*x3046);
IkReal x3054=(sj5*x3046);
evalcond[0]=((((-1.0)*x3051*x3053))+((r21*x3054))+(((-1.0)*r22*x3052)));
evalcond[1]=(((r11*x3054))+(((-1.0)*x3048*x3053))+(((-1.0)*r12*x3052)));
evalcond[2]=((((-1.0)*r02*x3053))+((x3047*x3050))+(((-1.0)*x3049*x3052)));
evalcond[3]=((1.0)+((x3046*x3049))+(((-1.0)*r02*x3052))+(((-1.0)*x3050*x3053)));
evalcond[4]=(((cj2*sj1))+((x3047*x3048))+((cj1*sj2))+(((-1.0)*r12*x3053))+(((-1.0)*r11*sj5*x3052)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3052))+((x3047*x3051))+(((-1.0)*r22*x3053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3055=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3055);
rxp1_1=(px*r21);
rxp1_2=(r11*x3055);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3056=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3056);
rxp1_1=(px*r21);
rxp1_2=(r11*x3056);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3057=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3057);
rxp1_1=(px*r21);
rxp1_2=(r11*x3057);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3060=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3060.valid){
continue;
}
IkReal x3058=x3060.value;
IkReal x3059=(sj0*x3058);
cj4array[0]=(((cj1*sj2*x3059))+((cj2*sj1*x3059)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3061=IKsin(j4);
IkReal x3062=IKcos(j4);
IkReal x3063=(cj5*r20);
IkReal x3064=(r21*sj5);
IkReal x3065=((1.0)*x3061);
IkReal x3066=((1.0)*x3062);
evalcond[0]=((-1.0)*r02*x3061);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3066)));
evalcond[2]=((((-1.0)*x3063*x3065))+((x3061*x3064)));
evalcond[3]=((((-1.0)*cj5*r10*x3065))+((r11*sj5*x3061)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3064*x3066))+((x3062*x3063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3068=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3068.valid){
continue;
}
IkReal x3067=x3068.value;
cj4array[0]=((((-1.0)*sj1*sj2*x3067))+((cj1*cj2*x3067)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3069=IKsin(j4);
IkReal x3070=IKcos(j4);
IkReal x3071=(r11*sj5);
IkReal x3072=((1.0)*sj0);
IkReal x3073=((1.0)*x3070);
IkReal x3074=((1.0)*cj5*x3069);
evalcond[0]=((-1.0)*r02*x3069);
evalcond[1]=((((-1.0)*r02*x3073))+(((-1.0)*x3072)));
evalcond[2]=(((r21*sj5*x3069))+(((-1.0)*r20*x3074)));
evalcond[3]=((((-1.0)*r10*x3074))+((x3069*x3071)));
evalcond[4]=((((-1.0)*cj1*sj2*x3072))+(((-1.0)*x3071*x3073))+(((-1.0)*cj2*sj1*x3072))+((cj5*r10*x3070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3075=IKPowWithIntegerCheck(r02,-1);
if(!x3075.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3075.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3076=IKsin(j4);
IkReal x3077=IKcos(j4);
IkReal x3078=((1.0)*sj0);
IkReal x3079=(cj5*x3077);
IkReal x3080=(sj5*x3076);
IkReal x3081=((1.0)*sj5*x3077);
IkReal x3082=((1.0)*cj5*x3076);
evalcond[0]=((-1.0)*r02*x3076);
evalcond[1]=((((-1.0)*r20*x3082))+((r21*x3080)));
evalcond[2]=(((r11*x3080))+(((-1.0)*r10*x3082)));
evalcond[3]=((((-1.0)*r21*x3081))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3079)));
evalcond[4]=(((r10*x3079))+(((-1.0)*cj1*sj2*x3078))+(((-1.0)*cj2*sj1*x3078))+(((-1.0)*r11*x3081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3083=((1.0)*sj0);
IkReal x3084=((1.0)*cj0);
CheckValue<IkReal> x3085 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3084))+(((-1.0)*r12*x3083)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3084))+(((-1.0)*r11*sj5*x3083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3085.valid){
continue;
}
CheckValue<IkReal> x3086=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3085.value)+(((1.5707963267949)*(x3086.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3087=IKsin(j4);
IkReal x3088=IKcos(j4);
IkReal x3089=(cj5*r10);
IkReal x3090=(r01*sj5);
IkReal x3091=((1.0)*cj2);
IkReal x3092=(cj5*r00);
IkReal x3093=((1.0)*sj0);
IkReal x3094=(cj5*r20);
IkReal x3095=(cj1*sj2);
IkReal x3096=((1.0)*x3088);
IkReal x3097=((1.0)*x3087);
IkReal x3098=(sj5*x3087);
evalcond[0]=((((-1.0)*r22*x3096))+((r21*x3098))+(((-1.0)*x3094*x3097)));
evalcond[1]=((((-1.0)*r12*x3096))+cj0+(((-1.0)*x3089*x3097))+((r11*x3098)));
evalcond[2]=((((-1.0)*r02*x3096))+(((-1.0)*x3093))+((x3087*x3090))+(((-1.0)*x3092*x3097)));
evalcond[3]=((((-1.0)*r22*x3097))+((x3088*x3094))+((sj1*sj2))+(((-1.0)*cj1*x3091))+(((-1.0)*r21*sj5*x3096)));
evalcond[4]=((((-1.0)*r02*x3097))+((x3088*x3092))+(((-1.0)*cj0*sj1*x3091))+(((-1.0)*x3090*x3096))+(((-1.0)*cj0*x3095)));
evalcond[5]=((((-1.0)*r12*x3097))+(((-1.0)*r11*sj5*x3096))+(((-1.0)*sj0*sj1*x3091))+(((-1.0)*x3093*x3095))+((x3088*x3089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3099=((1.0)*cj5);
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
CheckValue<IkReal> x3101=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3099))+(((-1.0)*r10*sj5)))),-1);
if(!x3101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3100.value)+(((1.5707963267949)*(x3101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3102=IKsin(j4);
IkReal x3103=IKcos(j4);
IkReal x3104=(cj5*r10);
IkReal x3105=(r01*sj5);
IkReal x3106=((1.0)*cj2);
IkReal x3107=(cj5*r00);
IkReal x3108=((1.0)*sj0);
IkReal x3109=(cj5*r20);
IkReal x3110=(cj1*sj2);
IkReal x3111=((1.0)*x3103);
IkReal x3112=((1.0)*x3102);
IkReal x3113=(sj5*x3102);
evalcond[0]=((((-1.0)*x3109*x3112))+((r21*x3113))+(((-1.0)*r22*x3111)));
evalcond[1]=(cj0+(((-1.0)*r12*x3111))+(((-1.0)*x3104*x3112))+((r11*x3113)));
evalcond[2]=((((-1.0)*r02*x3111))+(((-1.0)*x3108))+((x3102*x3105))+(((-1.0)*x3107*x3112)));
evalcond[3]=((((-1.0)*cj1*x3106))+((sj1*sj2))+((x3103*x3109))+(((-1.0)*r22*x3112))+(((-1.0)*r21*sj5*x3111)));
evalcond[4]=((((-1.0)*r02*x3112))+(((-1.0)*cj0*x3110))+((x3103*x3107))+(((-1.0)*x3105*x3111))+(((-1.0)*cj0*sj1*x3106)));
evalcond[5]=((((-1.0)*r12*x3112))+(((-1.0)*r11*sj5*x3111))+((x3103*x3104))+(((-1.0)*sj0*sj1*x3106))+(((-1.0)*x3108*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3114=((1.0)*cj5);
CheckValue<IkReal> x3115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3114)))),-1);
if(!x3115.valid){
continue;
}
CheckValue<IkReal> x3116 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3115.value)))+(x3116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3117=IKsin(j4);
IkReal x3118=IKcos(j4);
IkReal x3119=(cj5*r10);
IkReal x3120=(r01*sj5);
IkReal x3121=((1.0)*cj2);
IkReal x3122=(cj5*r00);
IkReal x3123=((1.0)*sj0);
IkReal x3124=(cj5*r20);
IkReal x3125=(cj1*sj2);
IkReal x3126=((1.0)*x3118);
IkReal x3127=((1.0)*x3117);
IkReal x3128=(sj5*x3117);
evalcond[0]=((((-1.0)*x3124*x3127))+((r21*x3128))+(((-1.0)*r22*x3126)));
evalcond[1]=(cj0+(((-1.0)*r12*x3126))+((r11*x3128))+(((-1.0)*x3119*x3127)));
evalcond[2]=((((-1.0)*r02*x3126))+(((-1.0)*x3122*x3127))+(((-1.0)*x3123))+((x3117*x3120)));
evalcond[3]=((((-1.0)*r21*sj5*x3126))+((sj1*sj2))+((x3118*x3124))+(((-1.0)*cj1*x3121))+(((-1.0)*r22*x3127)));
evalcond[4]=((((-1.0)*cj0*sj1*x3121))+(((-1.0)*r02*x3127))+(((-1.0)*cj0*x3125))+((x3118*x3122))+(((-1.0)*x3120*x3126)));
evalcond[5]=(((x3118*x3119))+(((-1.0)*x3123*x3125))+(((-1.0)*r12*x3127))+(((-1.0)*r11*sj5*x3126))+(((-1.0)*sj0*sj1*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3129=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3129;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3129);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3130=r21*r21;
IkReal x3131=cj5*cj5;
IkReal x3132=(sj1*sj2);
IkReal x3133=(r21*sj5);
IkReal x3134=(cj5*r20);
IkReal x3135=(cj1*cj2);
IkReal x3136=((((2.0)*x3133*x3134))+((x3130*x3131))+(((-1.0)*x3130))+(((-1.0)*(r22*r22)))+(((-1.0)*x3131*(r20*r20))));
j4eval[0]=x3136;
j4eval[1]=((IKabs((((r22*x3132))+(((-1.0)*r22*x3135)))))+(IKabs(((((-1.0)*x3132*x3134))+((x3132*x3133))+(((-1.0)*x3133*x3135))+((x3134*x3135))))));
j4eval[2]=IKsign(x3136);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3137=IKsin(j0);
IkReal x3138=IKcos(j0);
evalcond[0]=((((0.612)*x3138))+(((-0.163941)*x3137))+(((-1.0)*px)));
evalcond[1]=((((0.163941)*x3138))+(((0.612)*x3137))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3139=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3139;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3140=((1.0)*cj5);
IkReal x3141=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3140)));
j4eval[0]=x3141;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3140)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3142=((1.0)*cj5);
IkReal x3143=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3142)));
j4eval[0]=x3143;
j4eval[1]=IKsign(x3143);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3142))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3144=((1.0)*cj5);
CheckValue<IkReal> x3145=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3144)))),-1);
if(!x3145.valid){
continue;
}
CheckValue<IkReal> x3146 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3144)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3145.value)))+(x3146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3147=IKcos(j4);
IkReal x3148=IKsin(j4);
IkReal x3149=((1.0)*sj0);
IkReal x3150=(cj5*r00);
IkReal x3151=(cj5*r10);
IkReal x3152=(cj5*r20);
IkReal x3153=((1.0)*x3147);
IkReal x3154=((1.0)*x3148);
IkReal x3155=(sj5*x3147);
IkReal x3156=(sj5*x3148);
evalcond[0]=(((r22*x3148))+((r21*x3155))+(((-1.0)*x3152*x3153)));
evalcond[1]=((((-1.0)*r22*x3153))+((r21*x3156))+(((-1.0)*x3152*x3154)));
evalcond[2]=(cj0+((r11*x3156))+(((-1.0)*r12*x3153))+(((-1.0)*x3151*x3154)));
evalcond[3]=(((r02*x3148))+(((-1.0)*x3150*x3153))+((r01*x3155))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3149))+((r12*x3148))+((r11*x3155))+(((-1.0)*x3151*x3153)));
evalcond[5]=((((-1.0)*x3149))+(((-1.0)*x3150*x3154))+((r01*x3156))+(((-1.0)*r02*x3153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3157=((1.0)*cj5);
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3157)))),-1);
if(!x3158.valid){
continue;
}
CheckValue<IkReal> x3159 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3158.value)))+(x3159.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3160=IKcos(j4);
IkReal x3161=IKsin(j4);
IkReal x3162=((1.0)*sj0);
IkReal x3163=(cj5*r00);
IkReal x3164=(cj5*r10);
IkReal x3165=(cj5*r20);
IkReal x3166=((1.0)*x3160);
IkReal x3167=((1.0)*x3161);
IkReal x3168=(sj5*x3160);
IkReal x3169=(sj5*x3161);
evalcond[0]=(((r22*x3161))+(((-1.0)*x3165*x3166))+((r21*x3168)));
evalcond[1]=((((-1.0)*x3165*x3167))+((r21*x3169))+(((-1.0)*r22*x3166)));
evalcond[2]=((((-1.0)*r12*x3166))+cj0+((r11*x3169))+(((-1.0)*x3164*x3167)));
evalcond[3]=(((r02*x3161))+(((-1.0)*x3163*x3166))+((r01*x3168))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3168))+((r12*x3161))+(((-1.0)*x3164*x3166))+(((-1.0)*x3162)));
evalcond[5]=((((-1.0)*x3163*x3167))+((r01*x3169))+(((-1.0)*r02*x3166))+(((-1.0)*x3162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3170 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3170.valid){
continue;
}
CheckValue<IkReal> x3171=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3170.value)+(((1.5707963267949)*(x3171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3172=IKcos(j4);
IkReal x3173=IKsin(j4);
IkReal x3174=((1.0)*sj0);
IkReal x3175=(cj5*r00);
IkReal x3176=(cj5*r10);
IkReal x3177=(cj5*r20);
IkReal x3178=((1.0)*x3172);
IkReal x3179=((1.0)*x3173);
IkReal x3180=(sj5*x3172);
IkReal x3181=(sj5*x3173);
evalcond[0]=(((r22*x3173))+(((-1.0)*x3177*x3178))+((r21*x3180)));
evalcond[1]=((((-1.0)*x3177*x3179))+(((-1.0)*r22*x3178))+((r21*x3181)));
evalcond[2]=(cj0+(((-1.0)*r12*x3178))+((r11*x3181))+(((-1.0)*x3176*x3179)));
evalcond[3]=(((r01*x3180))+((r02*x3173))+(((-1.0)*cj0))+(((-1.0)*x3175*x3178)));
evalcond[4]=((((-1.0)*x3174))+((r11*x3180))+(((-1.0)*x3176*x3178))+((r12*x3173)));
evalcond[5]=(((r01*x3181))+(((-1.0)*x3174))+(((-1.0)*r02*x3178))+(((-1.0)*x3175*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3182=IKsin(j0);
IkReal x3183=IKcos(j0);
evalcond[0]=((((0.612)*x3183))+(((-0.163941)*x3182))+(((-1.0)*px)));
evalcond[1]=((((0.612)*x3182))+(((0.163941)*x3183))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3184=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3184;
j4eval[1]=IKsign(x3184);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3185=((1.0)*cj5);
IkReal x3186=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3185)));
j4eval[0]=x3186;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3185))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3186);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3187=cj5*cj5;
IkReal x3188=((1.0)*r20);
IkReal x3189=(r01*r21);
IkReal x3190=(r21*sj5);
IkReal x3191=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3190))+((x3187*x3189))+(((-1.0)*x3189))+(((-1.0)*r00*x3187*x3188)));
j4eval[0]=x3191;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3188))+((cj0*x3190)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3192=cj5*cj5;
IkReal x3193=((1.0)*r20);
IkReal x3194=(r01*r21);
IkReal x3195=(r21*sj5);
CheckValue<IkReal> x3196 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3195))+(((-1.0)*cj0*cj5*x3193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3196.valid){
continue;
}
CheckValue<IkReal> x3197=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x3192*x3193))+(((-1.0)*r02*r22))+((cj5*r00*x3195))+((x3192*x3194))+(((-1.0)*x3194)))),-1);
if(!x3197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3196.value)+(((1.5707963267949)*(x3197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3198=IKcos(j4);
IkReal x3199=IKsin(j4);
IkReal x3200=(cj5*r00);
IkReal x3201=(cj5*r10);
IkReal x3202=(cj5*r20);
IkReal x3203=((1.0)*x3198);
IkReal x3204=((1.0)*x3199);
IkReal x3205=(sj5*x3198);
IkReal x3206=(sj5*x3199);
evalcond[0]=((((-1.0)*x3202*x3203))+((r22*x3199))+((r21*x3205)));
evalcond[1]=((((-1.0)*x3202*x3204))+(((-1.0)*r22*x3203))+((r21*x3206)));
evalcond[2]=(cj0+(((-1.0)*x3200*x3203))+((r01*x3205))+((r02*x3199)));
evalcond[3]=(sj0+((r11*x3205))+(((-1.0)*x3201*x3203))+((r12*x3199)));
evalcond[4]=(cj0+((r11*x3206))+(((-1.0)*r12*x3203))+(((-1.0)*x3201*x3204)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3203))+(((-1.0)*x3200*x3204))+((r01*x3206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3207=((1.0)*cj5);
CheckValue<IkReal> x3208 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3207)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3208.valid){
continue;
}
CheckValue<IkReal> x3209=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3207)))),-1);
if(!x3209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3208.value)+(((1.5707963267949)*(x3209.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3210=IKcos(j4);
IkReal x3211=IKsin(j4);
IkReal x3212=(cj5*r00);
IkReal x3213=(cj5*r10);
IkReal x3214=(cj5*r20);
IkReal x3215=((1.0)*x3210);
IkReal x3216=((1.0)*x3211);
IkReal x3217=(sj5*x3210);
IkReal x3218=(sj5*x3211);
evalcond[0]=((((-1.0)*x3214*x3215))+((r22*x3211))+((r21*x3217)));
evalcond[1]=((((-1.0)*x3214*x3216))+((r21*x3218))+(((-1.0)*r22*x3215)));
evalcond[2]=(cj0+((r01*x3217))+(((-1.0)*x3212*x3215))+((r02*x3211)));
evalcond[3]=(sj0+((r12*x3211))+((r11*x3217))+(((-1.0)*x3213*x3215)));
evalcond[4]=(cj0+((r11*x3218))+(((-1.0)*r12*x3215))+(((-1.0)*x3213*x3216)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3218))+(((-1.0)*x3212*x3216))+(((-1.0)*r02*x3215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3219 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3219.value)+(((1.5707963267949)*(x3220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3221=IKcos(j4);
IkReal x3222=IKsin(j4);
IkReal x3223=(cj5*r00);
IkReal x3224=(cj5*r10);
IkReal x3225=(cj5*r20);
IkReal x3226=((1.0)*x3221);
IkReal x3227=((1.0)*x3222);
IkReal x3228=(sj5*x3221);
IkReal x3229=(sj5*x3222);
evalcond[0]=((((-1.0)*x3225*x3226))+((r21*x3228))+((r22*x3222)));
evalcond[1]=((((-1.0)*x3225*x3227))+((r21*x3229))+(((-1.0)*r22*x3226)));
evalcond[2]=(cj0+((r02*x3222))+((r01*x3228))+(((-1.0)*x3223*x3226)));
evalcond[3]=(((r12*x3222))+sj0+((r11*x3228))+(((-1.0)*x3224*x3226)));
evalcond[4]=(cj0+((r11*x3229))+(((-1.0)*x3224*x3227))+(((-1.0)*r12*x3226)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3226))+((r01*x3229))+(((-1.0)*x3223*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3230=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3230;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3231=((1.0)*cj5);
IkReal x3232=((((-1.0)*r01*x3231))+(((-1.0)*r00*sj5)));
j4eval[0]=x3232;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3231)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3232);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3233=((1.0)*cj5);
IkReal x3234=((((-1.0)*r01*x3233))+(((-1.0)*r00*sj5)));
j4eval[0]=x3234;
j4eval[1]=IKsign(x3234);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3233))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3235=((1.0)*cj5);
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3235)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
CheckValue<IkReal> x3237=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3235))+(((-1.0)*r00*sj5)))),-1);
if(!x3237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3236.value)+(((1.5707963267949)*(x3237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3238=IKcos(j4);
IkReal x3239=IKsin(j4);
IkReal x3240=((1.0)*sj0);
IkReal x3241=(cj5*r00);
IkReal x3242=(cj5*r10);
IkReal x3243=(cj5*r20);
IkReal x3244=((1.0)*x3238);
IkReal x3245=((1.0)*x3239);
IkReal x3246=(sj5*x3238);
IkReal x3247=(sj5*x3239);
evalcond[0]=((((-1.0)*x3243*x3244))+((r21*x3246))+((r22*x3239)));
evalcond[1]=((((-1.0)*x3243*x3245))+((r21*x3247))+(((-1.0)*r22*x3244)));
evalcond[2]=(cj0+(((-1.0)*r12*x3244))+(((-1.0)*x3242*x3245))+((r11*x3247)));
evalcond[3]=(((r01*x3246))+(((-1.0)*x3241*x3244))+((r02*x3239))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3239))+(((-1.0)*x3240))+(((-1.0)*x3242*x3244))+((r11*x3246)));
evalcond[5]=(((r01*x3247))+(((-1.0)*x3240))+(((-1.0)*r02*x3244))+(((-1.0)*x3241*x3245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3248=((1.0)*cj5);
CheckValue<IkReal> x3249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3248)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3249.valid){
continue;
}
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3248))+(((-1.0)*r00*sj5)))),-1);
if(!x3250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3249.value)+(((1.5707963267949)*(x3250.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3251=IKcos(j4);
IkReal x3252=IKsin(j4);
IkReal x3253=((1.0)*sj0);
IkReal x3254=(cj5*r00);
IkReal x3255=(cj5*r10);
IkReal x3256=(cj5*r20);
IkReal x3257=((1.0)*x3251);
IkReal x3258=((1.0)*x3252);
IkReal x3259=(sj5*x3251);
IkReal x3260=(sj5*x3252);
evalcond[0]=(((r21*x3259))+((r22*x3252))+(((-1.0)*x3256*x3257)));
evalcond[1]=(((r21*x3260))+(((-1.0)*r22*x3257))+(((-1.0)*x3256*x3258)));
evalcond[2]=(cj0+((r11*x3260))+(((-1.0)*r12*x3257))+(((-1.0)*x3255*x3258)));
evalcond[3]=(((r02*x3252))+(((-1.0)*x3254*x3257))+((r01*x3259))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3252))+((r11*x3259))+(((-1.0)*x3255*x3257))+(((-1.0)*x3253)));
evalcond[5]=((((-1.0)*r02*x3257))+((r01*x3260))+(((-1.0)*x3254*x3258))+(((-1.0)*x3253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3261 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3261.valid){
continue;
}
CheckValue<IkReal> x3262=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3261.value)+(((1.5707963267949)*(x3262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3263=IKcos(j4);
IkReal x3264=IKsin(j4);
IkReal x3265=((1.0)*sj0);
IkReal x3266=(cj5*r00);
IkReal x3267=(cj5*r10);
IkReal x3268=(cj5*r20);
IkReal x3269=((1.0)*x3263);
IkReal x3270=((1.0)*x3264);
IkReal x3271=(sj5*x3263);
IkReal x3272=(sj5*x3264);
evalcond[0]=(((r21*x3271))+((r22*x3264))+(((-1.0)*x3268*x3269)));
evalcond[1]=((((-1.0)*x3268*x3270))+((r21*x3272))+(((-1.0)*r22*x3269)));
evalcond[2]=(cj0+(((-1.0)*r12*x3269))+((r11*x3272))+(((-1.0)*x3267*x3270)));
evalcond[3]=(((r01*x3271))+((r02*x3264))+(((-1.0)*x3266*x3269))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3265))+((r11*x3271))+(((-1.0)*x3267*x3269))+((r12*x3264)));
evalcond[5]=(((r01*x3272))+(((-1.0)*x3265))+(((-1.0)*x3266*x3270))+(((-1.0)*r02*x3269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3273=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3273;
j4eval[1]=IKsign(x3273);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3274=((1.0)*cj5);
IkReal x3275=((((-1.0)*r11*x3274))+(((-1.0)*r10*sj5)));
j4eval[0]=x3275;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3274))))));
j4eval[2]=IKsign(x3275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3276=cj5*cj5;
IkReal x3277=((1.0)*r20);
IkReal x3278=(r01*r21);
IkReal x3279=(r21*sj5);
IkReal x3280=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3278))+((cj5*r00*x3279))+((x3276*x3278))+(((-1.0)*r00*x3276*x3277)));
j4eval[0]=x3280;
j4eval[1]=((IKabs((((cj0*x3279))+(((-1.0)*cj0*cj5*x3277)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3281=cj5*cj5;
IkReal x3282=((1.0)*r20);
IkReal x3283=(r01*r21);
IkReal x3284=(r21*sj5);
CheckValue<IkReal> x3285=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3281*x3282))+((cj5*r00*x3284))+((x3281*x3283))+(((-1.0)*x3283)))),-1);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3282))+((cj0*x3284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3285.value)))+(x3286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3287=IKcos(j4);
IkReal x3288=IKsin(j4);
IkReal x3289=(cj5*r00);
IkReal x3290=(cj5*r10);
IkReal x3291=(cj5*r20);
IkReal x3292=((1.0)*x3287);
IkReal x3293=((1.0)*x3288);
IkReal x3294=(sj5*x3287);
IkReal x3295=(sj5*x3288);
evalcond[0]=((((-1.0)*x3291*x3292))+((r22*x3288))+((r21*x3294)));
evalcond[1]=((((-1.0)*r22*x3292))+(((-1.0)*x3291*x3293))+((r21*x3295)));
evalcond[2]=(((r01*x3294))+cj0+((r02*x3288))+(((-1.0)*x3289*x3292)));
evalcond[3]=(sj0+((r11*x3294))+((r12*x3288))+(((-1.0)*x3290*x3292)));
evalcond[4]=((((-1.0)*r12*x3292))+cj0+((r11*x3295))+(((-1.0)*x3290*x3293)));
evalcond[5]=(((r01*x3295))+(((-1.0)*sj0))+(((-1.0)*r02*x3292))+(((-1.0)*x3289*x3293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3296=((1.0)*cj5);
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3296))+(((-1.0)*r10*sj5)))),-1);
if(!x3297.valid){
continue;
}
CheckValue<IkReal> x3298 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3296))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3297.value)))+(x3298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3299=IKcos(j4);
IkReal x3300=IKsin(j4);
IkReal x3301=(cj5*r00);
IkReal x3302=(cj5*r10);
IkReal x3303=(cj5*r20);
IkReal x3304=((1.0)*x3299);
IkReal x3305=((1.0)*x3300);
IkReal x3306=(sj5*x3299);
IkReal x3307=(sj5*x3300);
evalcond[0]=(((r21*x3306))+((r22*x3300))+(((-1.0)*x3303*x3304)));
evalcond[1]=(((r21*x3307))+(((-1.0)*r22*x3304))+(((-1.0)*x3303*x3305)));
evalcond[2]=(cj0+((r02*x3300))+(((-1.0)*x3301*x3304))+((r01*x3306)));
evalcond[3]=(sj0+((r11*x3306))+(((-1.0)*x3302*x3304))+((r12*x3300)));
evalcond[4]=(cj0+((r11*x3307))+(((-1.0)*x3302*x3305))+(((-1.0)*r12*x3304)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3304))+(((-1.0)*x3301*x3305))+((r01*x3307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3308 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3308.valid){
continue;
}
CheckValue<IkReal> x3309=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3308.value)+(((1.5707963267949)*(x3309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3310=IKcos(j4);
IkReal x3311=IKsin(j4);
IkReal x3312=(cj5*r00);
IkReal x3313=(cj5*r10);
IkReal x3314=(cj5*r20);
IkReal x3315=((1.0)*x3310);
IkReal x3316=((1.0)*x3311);
IkReal x3317=(sj5*x3310);
IkReal x3318=(sj5*x3311);
evalcond[0]=(((r21*x3317))+((r22*x3311))+(((-1.0)*x3314*x3315)));
evalcond[1]=(((r21*x3318))+(((-1.0)*r22*x3315))+(((-1.0)*x3314*x3316)));
evalcond[2]=(cj0+((r02*x3311))+(((-1.0)*x3312*x3315))+((r01*x3317)));
evalcond[3]=(sj0+((r11*x3317))+((r12*x3311))+(((-1.0)*x3313*x3315)));
evalcond[4]=(cj0+((r11*x3318))+(((-1.0)*x3313*x3316))+(((-1.0)*r12*x3315)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3312*x3316))+(((-1.0)*r02*x3315))+((r01*x3318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3319=IKcos(j0);
IkReal x3320=IKsin(j0);
evalcond[0]=((((-0.163941)*x3320))+(((-1.0)*px))+(((-0.612)*x3319)));
evalcond[1]=((((-0.612)*x3320))+(((-1.0)*py))+(((0.163941)*x3319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3321=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3321;
j4eval[1]=IKsign(x3321);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3322=((1.0)*cj5);
IkReal x3323=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3322)));
j4eval[0]=x3323;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3322)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3324=cj5*cj5;
IkReal x3325=((1.0)*r20);
IkReal x3326=(r01*r21);
IkReal x3327=(r21*sj5);
IkReal x3328=(((cj5*r01*r20*sj5))+(((-1.0)*x3326))+(((-1.0)*r02*r22))+((x3324*x3326))+(((-1.0)*r00*x3324*x3325))+((cj5*r00*x3327)));
j4eval[0]=x3328;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3325))+((cj0*x3327))))));
j4eval[2]=IKsign(x3328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3329=cj5*cj5;
IkReal x3330=((1.0)*r20);
IkReal x3331=(r01*r21);
IkReal x3332=(r21*sj5);
CheckValue<IkReal> x3333 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3332))+(((-1.0)*cj0*cj5*x3330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3333.valid){
continue;
}
CheckValue<IkReal> x3334=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3332))+((x3329*x3331))+(((-1.0)*x3331))+(((-1.0)*r00*x3329*x3330)))),-1);
if(!x3334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3333.value)+(((1.5707963267949)*(x3334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3335=IKcos(j4);
IkReal x3336=IKsin(j4);
IkReal x3337=(cj5*r00);
IkReal x3338=(cj5*r10);
IkReal x3339=(cj5*r20);
IkReal x3340=((1.0)*x3335);
IkReal x3341=((1.0)*x3336);
IkReal x3342=(sj5*x3335);
IkReal x3343=(sj5*x3336);
evalcond[0]=(((r21*x3342))+((r22*x3336))+(((-1.0)*x3339*x3340)));
evalcond[1]=(((r21*x3343))+(((-1.0)*x3339*x3341))+(((-1.0)*r22*x3340)));
evalcond[2]=(cj0+(((-1.0)*x3337*x3340))+((r02*x3336))+((r01*x3342)));
evalcond[3]=(sj0+((r12*x3336))+(((-1.0)*x3338*x3340))+((r11*x3342)));
evalcond[4]=(cj0+(((-1.0)*x3338*x3341))+(((-1.0)*r12*x3340))+((r11*x3343)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3337*x3341))+(((-1.0)*r02*x3340))+((r01*x3343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3344=((1.0)*cj5);
CheckValue<IkReal> x3345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3344)))),-1);
if(!x3345.valid){
continue;
}
CheckValue<IkReal> x3346 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3344)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3345.value)))+(x3346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3347=IKcos(j4);
IkReal x3348=IKsin(j4);
IkReal x3349=(cj5*r00);
IkReal x3350=(cj5*r10);
IkReal x3351=(cj5*r20);
IkReal x3352=((1.0)*x3347);
IkReal x3353=((1.0)*x3348);
IkReal x3354=(sj5*x3347);
IkReal x3355=(sj5*x3348);
evalcond[0]=(((r22*x3348))+(((-1.0)*x3351*x3352))+((r21*x3354)));
evalcond[1]=((((-1.0)*x3351*x3353))+((r21*x3355))+(((-1.0)*r22*x3352)));
evalcond[2]=(cj0+(((-1.0)*x3349*x3352))+((r01*x3354))+((r02*x3348)));
evalcond[3]=(sj0+((r11*x3354))+(((-1.0)*x3350*x3352))+((r12*x3348)));
evalcond[4]=(cj0+((r11*x3355))+(((-1.0)*x3350*x3353))+(((-1.0)*r12*x3352)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3349*x3353))+(((-1.0)*r02*x3352))+((r01*x3355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3356.value)+(((1.5707963267949)*(x3357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3358=IKcos(j4);
IkReal x3359=IKsin(j4);
IkReal x3360=(cj5*r00);
IkReal x3361=(cj5*r10);
IkReal x3362=(cj5*r20);
IkReal x3363=((1.0)*x3358);
IkReal x3364=((1.0)*x3359);
IkReal x3365=(sj5*x3358);
IkReal x3366=(sj5*x3359);
evalcond[0]=((((-1.0)*x3362*x3363))+((r21*x3365))+((r22*x3359)));
evalcond[1]=((((-1.0)*x3362*x3364))+((r21*x3366))+(((-1.0)*r22*x3363)));
evalcond[2]=((((-1.0)*x3360*x3363))+cj0+((r01*x3365))+((r02*x3359)));
evalcond[3]=((((-1.0)*x3361*x3363))+((r12*x3359))+sj0+((r11*x3365)));
evalcond[4]=((((-1.0)*x3361*x3364))+(((-1.0)*r12*x3363))+cj0+((r11*x3366)));
evalcond[5]=((((-1.0)*x3360*x3364))+(((-1.0)*sj0))+((r01*x3366))+(((-1.0)*r02*x3363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.52458523930468)*py))+(((-0.408402007707268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.52458523930468)*px))+(((0.408402007707268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))))+IKsqr(((((-1.52458523930468)*px))+(((0.408402007707268)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.52458523930468)*py))+(((-0.408402007707268)*px))), ((((-1.52458523930468)*px))+(((0.408402007707268)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3367=IKcos(j0);
IkReal x3368=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.612)*x3367))+(((-0.163941)*x3368)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x3367))+(((-0.612)*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3369=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3369;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3369);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3370=((1.0)*cj5);
IkReal x3371=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3370)));
j4eval[0]=x3371;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3370))))));
j4eval[2]=IKsign(x3371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3372=((1.0)*cj5);
IkReal x3373=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3372)));
j4eval[0]=x3373;
j4eval[1]=IKsign(x3373);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3372))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3374=((1.0)*cj5);
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3374)))),-1);
if(!x3375.valid){
continue;
}
CheckValue<IkReal> x3376 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3374))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3375.value)))+(x3376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3377=IKcos(j4);
IkReal x3378=IKsin(j4);
IkReal x3379=((1.0)*sj0);
IkReal x3380=(cj5*r00);
IkReal x3381=(cj5*r10);
IkReal x3382=(cj5*r20);
IkReal x3383=((1.0)*x3377);
IkReal x3384=((1.0)*x3378);
IkReal x3385=(sj5*x3377);
IkReal x3386=(sj5*x3378);
evalcond[0]=((((-1.0)*x3382*x3383))+((r22*x3378))+((r21*x3385)));
evalcond[1]=((((-1.0)*x3382*x3384))+(((-1.0)*r22*x3383))+((r21*x3386)));
evalcond[2]=(cj0+(((-1.0)*x3381*x3384))+((r11*x3386))+(((-1.0)*r12*x3383)));
evalcond[3]=(((r01*x3385))+(((-1.0)*x3380*x3383))+((r02*x3378))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3378))+(((-1.0)*x3381*x3383))+(((-1.0)*x3379))+((r11*x3385)));
evalcond[5]=(((r01*x3386))+(((-1.0)*x3380*x3384))+(((-1.0)*x3379))+(((-1.0)*r02*x3383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3387=((1.0)*cj5);
CheckValue<IkReal> x3388 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3389=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3387)))),-1);
if(!x3389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3388.value)+(((1.5707963267949)*(x3389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3390=IKcos(j4);
IkReal x3391=IKsin(j4);
IkReal x3392=((1.0)*sj0);
IkReal x3393=(cj5*r00);
IkReal x3394=(cj5*r10);
IkReal x3395=(cj5*r20);
IkReal x3396=((1.0)*x3390);
IkReal x3397=((1.0)*x3391);
IkReal x3398=(sj5*x3390);
IkReal x3399=(sj5*x3391);
evalcond[0]=((((-1.0)*x3395*x3396))+((r21*x3398))+((r22*x3391)));
evalcond[1]=((((-1.0)*r22*x3396))+(((-1.0)*x3395*x3397))+((r21*x3399)));
evalcond[2]=((((-1.0)*x3394*x3397))+cj0+((r11*x3399))+(((-1.0)*r12*x3396)));
evalcond[3]=(((r01*x3398))+((r02*x3391))+(((-1.0)*x3393*x3396))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3394*x3396))+((r11*x3398))+(((-1.0)*x3392))+((r12*x3391)));
evalcond[5]=(((r01*x3399))+(((-1.0)*r02*x3396))+(((-1.0)*x3392))+(((-1.0)*x3393*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3400 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3400.valid){
continue;
}
CheckValue<IkReal> x3401=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3400.value)+(((1.5707963267949)*(x3401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3402=IKcos(j4);
IkReal x3403=IKsin(j4);
IkReal x3404=((1.0)*sj0);
IkReal x3405=(cj5*r00);
IkReal x3406=(cj5*r10);
IkReal x3407=(cj5*r20);
IkReal x3408=((1.0)*x3402);
IkReal x3409=((1.0)*x3403);
IkReal x3410=(sj5*x3402);
IkReal x3411=(sj5*x3403);
evalcond[0]=(((r22*x3403))+(((-1.0)*x3407*x3408))+((r21*x3410)));
evalcond[1]=((((-1.0)*x3407*x3409))+((r21*x3411))+(((-1.0)*r22*x3408)));
evalcond[2]=(cj0+(((-1.0)*r12*x3408))+((r11*x3411))+(((-1.0)*x3406*x3409)));
evalcond[3]=((((-1.0)*x3405*x3408))+((r02*x3403))+((r01*x3410))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3410))+((r12*x3403))+(((-1.0)*x3406*x3408))+(((-1.0)*x3404)));
evalcond[5]=((((-1.0)*x3405*x3409))+((r01*x3411))+(((-1.0)*r02*x3408))+(((-1.0)*x3404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3412=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3412;
j4eval[1]=IKsign(x3412);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3413=((1.0)*cj5);
IkReal x3414=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3413)));
j4eval[0]=x3414;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3413))))));
j4eval[2]=IKsign(x3414);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3415=cj5*cj5;
IkReal x3416=((1.0)*r20);
IkReal x3417=(r01*r21);
IkReal x3418=(r21*sj5);
IkReal x3419=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3415*x3416))+(((-1.0)*r02*r22))+(((-1.0)*x3417))+((x3415*x3417))+((cj5*r00*x3418)));
j4eval[0]=x3419;
j4eval[1]=((IKabs((((cj0*x3418))+(((-1.0)*cj0*cj5*x3416)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3419);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3420=cj5*cj5;
IkReal x3421=((1.0)*r20);
IkReal x3422=(r01*r21);
IkReal x3423=(r21*sj5);
CheckValue<IkReal> x3424=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3420*x3422))+((cj5*r00*x3423))+(((-1.0)*r00*x3420*x3421))+(((-1.0)*x3422)))),-1);
if(!x3424.valid){
continue;
}
CheckValue<IkReal> x3425 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3421))+((cj0*x3423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3424.value)))+(x3425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3426=IKcos(j4);
IkReal x3427=IKsin(j4);
IkReal x3428=(cj5*r00);
IkReal x3429=(cj5*r10);
IkReal x3430=(cj5*r20);
IkReal x3431=((1.0)*x3426);
IkReal x3432=((1.0)*x3427);
IkReal x3433=(sj5*x3426);
IkReal x3434=(sj5*x3427);
evalcond[0]=((((-1.0)*x3430*x3431))+((r21*x3433))+((r22*x3427)));
evalcond[1]=((((-1.0)*x3430*x3432))+(((-1.0)*r22*x3431))+((r21*x3434)));
evalcond[2]=((((-1.0)*x3428*x3431))+((r01*x3433))+cj0+((r02*x3427)));
evalcond[3]=(sj0+((r12*x3427))+((r11*x3433))+(((-1.0)*x3429*x3431)));
evalcond[4]=((((-1.0)*r12*x3431))+cj0+((r11*x3434))+(((-1.0)*x3429*x3432)));
evalcond[5]=((((-1.0)*x3428*x3432))+((r01*x3434))+(((-1.0)*sj0))+(((-1.0)*r02*x3431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3435=((1.0)*cj5);
CheckValue<IkReal> x3436 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3435)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3436.valid){
continue;
}
CheckValue<IkReal> x3437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3435)))),-1);
if(!x3437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3436.value)+(((1.5707963267949)*(x3437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3438=IKcos(j4);
IkReal x3439=IKsin(j4);
IkReal x3440=(cj5*r00);
IkReal x3441=(cj5*r10);
IkReal x3442=(cj5*r20);
IkReal x3443=((1.0)*x3438);
IkReal x3444=((1.0)*x3439);
IkReal x3445=(sj5*x3438);
IkReal x3446=(sj5*x3439);
evalcond[0]=(((r21*x3445))+(((-1.0)*x3442*x3443))+((r22*x3439)));
evalcond[1]=(((r21*x3446))+(((-1.0)*r22*x3443))+(((-1.0)*x3442*x3444)));
evalcond[2]=(cj0+((r01*x3445))+((r02*x3439))+(((-1.0)*x3440*x3443)));
evalcond[3]=(((r11*x3445))+sj0+(((-1.0)*x3441*x3443))+((r12*x3439)));
evalcond[4]=(((r11*x3446))+cj0+(((-1.0)*x3441*x3444))+(((-1.0)*r12*x3443)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3443))+((r01*x3446))+(((-1.0)*x3440*x3444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3447 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3447.valid){
continue;
}
CheckValue<IkReal> x3448=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3447.value)+(((1.5707963267949)*(x3448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3449=IKcos(j4);
IkReal x3450=IKsin(j4);
IkReal x3451=(cj5*r00);
IkReal x3452=(cj5*r10);
IkReal x3453=(cj5*r20);
IkReal x3454=((1.0)*x3449);
IkReal x3455=((1.0)*x3450);
IkReal x3456=(sj5*x3449);
IkReal x3457=(sj5*x3450);
evalcond[0]=((((-1.0)*x3453*x3454))+((r21*x3456))+((r22*x3450)));
evalcond[1]=((((-1.0)*x3453*x3455))+((r21*x3457))+(((-1.0)*r22*x3454)));
evalcond[2]=((((-1.0)*x3451*x3454))+cj0+((r02*x3450))+((r01*x3456)));
evalcond[3]=(sj0+((r12*x3450))+(((-1.0)*x3452*x3454))+((r11*x3456)));
evalcond[4]=(cj0+(((-1.0)*r12*x3454))+(((-1.0)*x3452*x3455))+((r11*x3457)));
evalcond[5]=((((-1.0)*x3451*x3455))+(((-1.0)*sj0))+(((-1.0)*r02*x3454))+((r01*x3457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-6.09975539980847)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.09975539980847)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-6.09975539980847)*px))+IKsqr(((6.09975539980847)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-6.09975539980847)*px), ((6.09975539980847)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.163941)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3458=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3458;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3459=((1.0)*cj5);
IkReal x3460=((((-1.0)*r01*x3459))+(((-1.0)*r00*sj5)));
j4eval[0]=x3460;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3459))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3460);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3461=((1.0)*cj5);
IkReal x3462=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3461)));
j4eval[0]=x3462;
j4eval[1]=IKsign(x3462);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3461))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3463=((1.0)*cj5);
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3463))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
CheckValue<IkReal> x3465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3463)))),-1);
if(!x3465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3464.value)+(((1.5707963267949)*(x3465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3466=IKcos(j4);
IkReal x3467=IKsin(j4);
IkReal x3468=((1.0)*sj0);
IkReal x3469=(cj5*r00);
IkReal x3470=(cj5*r10);
IkReal x3471=(cj5*r20);
IkReal x3472=((1.0)*x3466);
IkReal x3473=((1.0)*x3467);
IkReal x3474=(sj5*x3466);
IkReal x3475=(sj5*x3467);
evalcond[0]=((((-1.0)*x3471*x3472))+((r21*x3474))+((r22*x3467)));
evalcond[1]=((((-1.0)*x3471*x3473))+(((-1.0)*r22*x3472))+((r21*x3475)));
evalcond[2]=(cj0+(((-1.0)*r12*x3472))+((r11*x3475))+(((-1.0)*x3470*x3473)));
evalcond[3]=(((r01*x3474))+(((-1.0)*x3469*x3472))+((r02*x3467))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3467))+((r11*x3474))+(((-1.0)*x3470*x3472))+(((-1.0)*x3468)));
evalcond[5]=((((-1.0)*r02*x3472))+((r01*x3475))+(((-1.0)*x3469*x3473))+(((-1.0)*x3468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3476=((1.0)*cj5);
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3476)))),-1);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3477.value)))+(x3478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3479=IKcos(j4);
IkReal x3480=IKsin(j4);
IkReal x3481=((1.0)*sj0);
IkReal x3482=(cj5*r00);
IkReal x3483=(cj5*r10);
IkReal x3484=(cj5*r20);
IkReal x3485=((1.0)*x3479);
IkReal x3486=((1.0)*x3480);
IkReal x3487=(sj5*x3479);
IkReal x3488=(sj5*x3480);
evalcond[0]=((((-1.0)*x3484*x3485))+((r21*x3487))+((r22*x3480)));
evalcond[1]=((((-1.0)*r22*x3485))+(((-1.0)*x3484*x3486))+((r21*x3488)));
evalcond[2]=((((-1.0)*x3483*x3486))+cj0+(((-1.0)*r12*x3485))+((r11*x3488)));
evalcond[3]=((((-1.0)*x3482*x3485))+((r01*x3487))+((r02*x3480))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3483*x3485))+((r12*x3480))+((r11*x3487))+(((-1.0)*x3481)));
evalcond[5]=((((-1.0)*x3482*x3486))+(((-1.0)*r02*x3485))+((r01*x3488))+(((-1.0)*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3489 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3489.valid){
continue;
}
CheckValue<IkReal> x3490=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3489.value)+(((1.5707963267949)*(x3490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3491=IKcos(j4);
IkReal x3492=IKsin(j4);
IkReal x3493=((1.0)*sj0);
IkReal x3494=(cj5*r00);
IkReal x3495=(cj5*r10);
IkReal x3496=(cj5*r20);
IkReal x3497=((1.0)*x3491);
IkReal x3498=((1.0)*x3492);
IkReal x3499=(sj5*x3491);
IkReal x3500=(sj5*x3492);
evalcond[0]=((((-1.0)*x3496*x3497))+((r22*x3492))+((r21*x3499)));
evalcond[1]=((((-1.0)*x3496*x3498))+(((-1.0)*r22*x3497))+((r21*x3500)));
evalcond[2]=((((-1.0)*r12*x3497))+cj0+((r11*x3500))+(((-1.0)*x3495*x3498)));
evalcond[3]=(((r01*x3499))+(((-1.0)*x3494*x3497))+((r02*x3492))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3493))+((r11*x3499))+(((-1.0)*x3495*x3497))+((r12*x3492)));
evalcond[5]=(((r01*x3500))+(((-1.0)*r02*x3497))+(((-1.0)*x3494*x3498))+(((-1.0)*x3493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3501=(r00*sj5);
IkReal x3502=((612000.0)*cj1);
IkReal x3503=(cj5*r01);
IkReal x3504=(sj1*sj2);
IkReal x3505=(cj1*cj2);
IkReal x3506=((1000000.0)*px);
CheckValue<IkReal> x3507=IKPowWithIntegerCheck(((((-163941.0)*x3505))+(((163941.0)*x3504))),-1);
if(!x3507.valid){
continue;
}
CheckValue<IkReal> x3508=IKPowWithIntegerCheck((x3504+(((-1.0)*x3505))),-1);
if(!x3508.valid){
continue;
}
if( IKabs(((x3507.value)*(((((688000.0)*x3501*x3505))+((x3501*x3502))+(((-688000.0)*x3503*x3504))+(((688000.0)*x3503*x3505))+(((-688000.0)*x3501*x3504))+((x3502*x3503))+(((-1.0)*x3504*x3506))+((x3505*x3506)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3508.value)*((x3501+x3503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3507.value)*(((((688000.0)*x3501*x3505))+((x3501*x3502))+(((-688000.0)*x3503*x3504))+(((688000.0)*x3503*x3505))+(((-688000.0)*x3501*x3504))+((x3502*x3503))+(((-1.0)*x3504*x3506))+((x3505*x3506))))))+IKsqr(((x3508.value)*((x3501+x3503))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3507.value)*(((((688000.0)*x3501*x3505))+((x3501*x3502))+(((-688000.0)*x3503*x3504))+(((688000.0)*x3503*x3505))+(((-688000.0)*x3501*x3504))+((x3502*x3503))+(((-1.0)*x3504*x3506))+((x3505*x3506))))), ((x3508.value)*((x3501+x3503))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3509=IKcos(j0);
IkReal x3510=IKsin(j0);
IkReal x3511=(cj5*r01);
IkReal x3512=(sj1*sj2);
IkReal x3513=(cj5*r11);
IkReal x3514=(r10*sj5);
IkReal x3515=(r00*sj5);
IkReal x3516=(cj1*cj2);
IkReal x3517=((0.5723)*x3510);
IkReal x3518=(cj1*x3510);
IkReal x3519=((0.5723)*x3509);
evalcond[0]=((((-1.0)*x3509*x3516))+((x3509*x3512))+(((-1.0)*x3511))+(((-1.0)*x3515)));
evalcond[1]=(((x3510*x3512))+(((-1.0)*x3510*x3516))+(((-1.0)*x3513))+(((-1.0)*x3514)));
evalcond[2]=((((0.612)*cj1*x3509))+(((-1.0)*x3512*x3519))+(((-0.1157)*x3511))+(((-0.1157)*x3515))+(((-0.163941)*x3510))+(((-1.0)*px))+((x3516*x3519)));
evalcond[3]=((((-1.0)*x3512*x3517))+(((-0.1157)*x3513))+(((-0.1157)*x3514))+(((-1.0)*py))+(((0.612)*x3518))+(((0.163941)*x3509))+((x3516*x3517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3520=((1.0)*cj5);
IkReal x3521=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3520)));
j4eval[0]=x3521;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3520))))));
j4eval[2]=IKsign(x3521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3522=((1.0)*cj5);
IkReal x3523=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3522)));
j4eval[0]=x3523;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3522)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3524=((1.0)*sj0);
IkReal x3525=((1.0)*cj0);
IkReal x3526=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3526;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x3524))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3525)))))+(IKabs(((((-1.0)*r02*x3525))+(((-1.0)*r12*x3524))))));
j4eval[2]=IKsign(x3526);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3527=((-1.0)*r20);
IkReal x3529 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3529)==0){
continue;
}
IkReal x3528=pow(x3529,-0.5);
CheckValue<IkReal> x3530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3527),IKFAST_ATAN2_MAGTHRESH);
if(!x3530.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3530.value));
IkReal gconst97=(r21*x3528);
IkReal gconst98=(x3527*x3528);
CheckValue<IkReal> x3531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3531.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3531.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3532=((-1.0)*r20);
IkReal x3533=x3528;
CheckValue<IkReal> x3535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3532),IKFAST_ATAN2_MAGTHRESH);
if(!x3535.valid){
continue;
}
IkReal x3534=((-1.0)*(x3535.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3534;
IkReal gconst96=x3534;
IkReal gconst97=(r21*x3533);
IkReal gconst98=(x3532*x3533);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3536=((-1.0)*r20);
IkReal x3537=x3528;
CheckValue<IkReal> x3539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3536),IKFAST_ATAN2_MAGTHRESH);
if(!x3539.valid){
continue;
}
IkReal x3538=((-1.0)*(x3539.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3538;
IkReal gconst96=x3538;
IkReal gconst97=(r21*x3537);
IkReal gconst98=(x3536*x3537);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3540=((-1.0)*r20);
IkReal x3541=x3528;
CheckValue<IkReal> x3543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3540),IKFAST_ATAN2_MAGTHRESH);
if(!x3543.valid){
continue;
}
IkReal x3542=((-1.0)*(x3543.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3542;
IkReal gconst96=x3542;
IkReal gconst97=(r21*x3541);
IkReal gconst98=(x3540*x3541);
IkReal x3544=((1.0)*(r22*r22));
CheckValue<IkReal> x3548=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3544))),-1);
if(!x3548.valid){
continue;
}
IkReal x3545=x3548.value;
IkReal x3546=((1.0)*x3545);
IkReal x3547=((((-2.0)*x3545*(r20*r20)*(r21*r21)))+(((-1.0)*x3546*(r21*r21*r21*r21)))+(((-1.0)*x3544))+(((-1.0)*x3546*(r20*r20*r20*r20))));
j4eval[0]=x3547;
j4eval[1]=IKsign(x3547);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3549=(cj1*cj2);
IkReal x3550=(gconst98*r20);
IkReal x3551=(sj1*sj2);
IkReal x3552=(gconst97*r21);
CheckValue<IkReal> x3553=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3552*x3552)))+(((-1.0)*(x3550*x3550)))+(((-1.0)*(r22*r22)))+(((2.0)*x3550*x3552)))),-1);
if(!x3553.valid){
continue;
}
CheckValue<IkReal> x3554 = IKatan2WithCheck(IkReal((((r22*x3551))+(((-1.0)*r22*x3549)))),IkReal(((((-1.0)*x3549*x3552))+(((-1.0)*x3550*x3551))+((x3551*x3552))+((x3549*x3550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3553.value)))+(x3554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3555=IKsin(j4);
IkReal x3556=IKcos(j4);
IkReal x3557=(gconst98*r10);
IkReal x3558=(gconst97*r21);
IkReal x3559=(gconst98*r20);
IkReal x3560=((1.0)*cj2);
IkReal x3561=((1.0)*sj0);
IkReal x3562=(gconst98*r00);
IkReal x3563=(cj1*sj2);
IkReal x3564=((1.0)*x3556);
IkReal x3565=((1.0)*x3555);
IkReal x3566=(gconst97*x3555);
IkReal x3567=(gconst97*x3556);
evalcond[0]=((((-1.0)*r22*x3564))+(((-1.0)*x3559*x3565))+((x3555*x3558)));
evalcond[1]=(cj0+(((-1.0)*r12*x3564))+((r11*x3566))+(((-1.0)*x3557*x3565)));
evalcond[2]=((((-1.0)*r02*x3564))+((r01*x3566))+(((-1.0)*x3561))+(((-1.0)*x3562*x3565)));
evalcond[3]=(((x3556*x3558))+((sj1*sj2))+(((-1.0)*x3559*x3564))+((r22*x3555))+(((-1.0)*cj1*x3560)));
evalcond[4]=(((r01*x3567))+(((-1.0)*cj0*sj1*x3560))+(((-1.0)*x3562*x3564))+(((-1.0)*cj0*x3563))+((r02*x3555)));
evalcond[5]=((((-1.0)*x3561*x3563))+(((-1.0)*sj0*sj1*x3560))+((r12*x3555))+((r11*x3567))+(((-1.0)*x3557*x3564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3568=((1.0)*gconst98);
CheckValue<IkReal> x3569=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3568))+(((-1.0)*gconst97*r10)))),-1);
if(!x3569.valid){
continue;
}
CheckValue<IkReal> x3570 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3568)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3569.value)))+(x3570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3571=IKsin(j4);
IkReal x3572=IKcos(j4);
IkReal x3573=(gconst98*r10);
IkReal x3574=(gconst97*r21);
IkReal x3575=(gconst98*r20);
IkReal x3576=((1.0)*cj2);
IkReal x3577=((1.0)*sj0);
IkReal x3578=(gconst98*r00);
IkReal x3579=(cj1*sj2);
IkReal x3580=((1.0)*x3572);
IkReal x3581=((1.0)*x3571);
IkReal x3582=(gconst97*x3571);
IkReal x3583=(gconst97*x3572);
evalcond[0]=((((-1.0)*r22*x3580))+((x3571*x3574))+(((-1.0)*x3575*x3581)));
evalcond[1]=((((-1.0)*x3573*x3581))+cj0+((r11*x3582))+(((-1.0)*r12*x3580)));
evalcond[2]=((((-1.0)*r02*x3580))+(((-1.0)*x3577))+((r01*x3582))+(((-1.0)*x3578*x3581)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3575*x3580))+((x3572*x3574))+((r22*x3571))+(((-1.0)*cj1*x3576)));
evalcond[4]=((((-1.0)*cj0*x3579))+((r01*x3583))+((r02*x3571))+(((-1.0)*x3578*x3580))+(((-1.0)*cj0*sj1*x3576)));
evalcond[5]=((((-1.0)*sj0*sj1*x3576))+(((-1.0)*x3573*x3580))+((r11*x3583))+((r12*x3571))+(((-1.0)*x3577*x3579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3584=((1.0)*gconst98);
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r00))+(((-1.0)*r01*x3584)))),-1);
if(!x3586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3585.value)+(((1.5707963267949)*(x3586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3587=IKsin(j4);
IkReal x3588=IKcos(j4);
IkReal x3589=(gconst98*r10);
IkReal x3590=(gconst97*r21);
IkReal x3591=(gconst98*r20);
IkReal x3592=((1.0)*cj2);
IkReal x3593=((1.0)*sj0);
IkReal x3594=(gconst98*r00);
IkReal x3595=(cj1*sj2);
IkReal x3596=((1.0)*x3588);
IkReal x3597=((1.0)*x3587);
IkReal x3598=(gconst97*x3587);
IkReal x3599=(gconst97*x3588);
evalcond[0]=((((-1.0)*r22*x3596))+((x3587*x3590))+(((-1.0)*x3591*x3597)));
evalcond[1]=((((-1.0)*x3589*x3597))+cj0+((r11*x3598))+(((-1.0)*r12*x3596)));
evalcond[2]=((((-1.0)*x3594*x3597))+(((-1.0)*r02*x3596))+((r01*x3598))+(((-1.0)*x3593)));
evalcond[3]=((((-1.0)*cj1*x3592))+((sj1*sj2))+((x3588*x3590))+(((-1.0)*x3591*x3596))+((r22*x3587)));
evalcond[4]=((((-1.0)*x3594*x3596))+((r02*x3587))+(((-1.0)*cj0*x3595))+((r01*x3599))+(((-1.0)*cj0*sj1*x3592)));
evalcond[5]=((((-1.0)*x3589*x3596))+((r12*x3587))+((r11*x3599))+(((-1.0)*x3593*x3595))+(((-1.0)*sj0*sj1*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3600=((-1.0)*r21);
IkReal x3602 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3602)==0){
continue;
}
IkReal x3601=pow(x3602,-0.5);
CheckValue<IkReal> x3603 = IKatan2WithCheck(IkReal(x3600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3603.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3603.value))));
IkReal gconst100=(x3600*x3601);
IkReal gconst101=((1.0)*r20*x3601);
CheckValue<IkReal> x3604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3604.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3604.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3605=((-1.0)*r21);
CheckValue<IkReal> x3608 = IKatan2WithCheck(IkReal(x3605),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3608.valid){
continue;
}
IkReal x3606=((1.0)*(x3608.value));
IkReal x3607=x3601;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3606)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3606)));
IkReal gconst100=(x3605*x3607);
IkReal gconst101=((1.0)*r20*x3607);
IkReal x3609=r22*r22;
IkReal x3610=((1.0)*x3609);
CheckValue<IkReal> x3614=IKPowWithIntegerCheck(((-1.0)+x3609),-1);
if(!x3614.valid){
continue;
}
IkReal x3611=x3614.value;
if((((1.0)+(((-1.0)*x3610)))) < -0.00001)
continue;
IkReal x3612=IKsqrt(((1.0)+(((-1.0)*x3610))));
IkReal x3613=(cj0*x3611*x3612);
j4eval[0]=((IKabs((x3613+(((-1.0)*x3610*x3613)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3615=((-1.0)*r21);
CheckValue<IkReal> x3618 = IKatan2WithCheck(IkReal(x3615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3618.valid){
continue;
}
IkReal x3616=((1.0)*(x3618.value));
IkReal x3617=x3601;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3616)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3616)));
IkReal gconst100=(x3615*x3617);
IkReal gconst101=((1.0)*r20*x3617);
IkReal x3619=r22*r22;
IkReal x3620=((1.0)*x3619);
CheckValue<IkReal> x3624=IKPowWithIntegerCheck(((-1.0)+x3619),-1);
if(!x3624.valid){
continue;
}
IkReal x3621=x3624.value;
if((((1.0)+(((-1.0)*x3620)))) < -0.00001)
continue;
IkReal x3622=IKsqrt(((1.0)+(((-1.0)*x3620))));
IkReal x3623=(sj0*x3621*x3622);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x3623+(((-1.0)*x3620*x3623))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3625=((-1.0)*r21);
CheckValue<IkReal> x3628 = IKatan2WithCheck(IkReal(x3625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3628.valid){
continue;
}
IkReal x3626=((1.0)*(x3628.value));
IkReal x3627=x3601;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3626)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3626)));
IkReal gconst100=(x3625*x3627);
IkReal gconst101=((1.0)*r20*x3627);
IkReal x3629=r22*r22;
IkReal x3630=(r12*sj0);
IkReal x3631=(cj0*r02);
CheckValue<IkReal> x3635=IKPowWithIntegerCheck(((-1.0)+x3629),-1);
if(!x3635.valid){
continue;
}
IkReal x3632=x3635.value;
if((((1.0)+(((-1.0)*x3629)))) < -0.00001)
continue;
IkReal x3633=IKsqrt(((1.0)+(((-1.0)*x3629))));
IkReal x3634=(r22*x3632*x3633);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3631*x3634))+((x3630*x3634)))))+(IKabs(((((-1.0)*x3630))+(((-1.0)*x3631))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3636=((1.0)*sj0);
IkReal x3637=((1.0)*gconst100);
CheckValue<IkReal> x3638 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3636))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3636))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3638.valid){
continue;
}
CheckValue<IkReal> x3639=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x3637)))),-1);
if(!x3639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3638.value)+(((1.5707963267949)*(x3639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3640=IKsin(j4);
IkReal x3641=IKcos(j4);
IkReal x3642=(gconst101*r20);
IkReal x3643=(gconst101*r10);
IkReal x3644=((1.0)*cj2);
IkReal x3645=(gconst101*r00);
IkReal x3646=((1.0)*sj0);
IkReal x3647=(cj1*sj2);
IkReal x3648=((1.0)*x3641);
IkReal x3649=((1.0)*x3640);
IkReal x3650=(gconst100*x3640);
IkReal x3651=(gconst100*x3641);
evalcond[0]=(((r21*x3650))+(((-1.0)*r22*x3648))+(((-1.0)*x3642*x3649)));
evalcond[1]=(cj0+(((-1.0)*x3643*x3649))+((r11*x3650))+(((-1.0)*r12*x3648)));
evalcond[2]=((((-1.0)*x3645*x3649))+(((-1.0)*r02*x3648))+(((-1.0)*x3646))+((r01*x3650)));
evalcond[3]=(((sj1*sj2))+((r21*x3651))+(((-1.0)*cj1*x3644))+((r22*x3640))+(((-1.0)*x3642*x3648)));
evalcond[4]=((((-1.0)*cj0*x3647))+(((-1.0)*x3645*x3648))+((r02*x3640))+(((-1.0)*cj0*sj1*x3644))+((r01*x3651)));
evalcond[5]=((((-1.0)*x3646*x3647))+(((-1.0)*x3643*x3648))+((r12*x3640))+((r11*x3651))+(((-1.0)*sj0*sj1*x3644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3652=((1.0)*gconst101);
CheckValue<IkReal> x3653 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3652))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3653.valid){
continue;
}
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3652)))),-1);
if(!x3654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3653.value)+(((1.5707963267949)*(x3654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3655=IKsin(j4);
IkReal x3656=IKcos(j4);
IkReal x3657=(gconst101*r20);
IkReal x3658=(gconst101*r10);
IkReal x3659=((1.0)*cj2);
IkReal x3660=(gconst101*r00);
IkReal x3661=((1.0)*sj0);
IkReal x3662=(cj1*sj2);
IkReal x3663=((1.0)*x3656);
IkReal x3664=((1.0)*x3655);
IkReal x3665=(gconst100*x3655);
IkReal x3666=(gconst100*x3656);
evalcond[0]=((((-1.0)*r22*x3663))+((r21*x3665))+(((-1.0)*x3657*x3664)));
evalcond[1]=(cj0+((r11*x3665))+(((-1.0)*x3658*x3664))+(((-1.0)*r12*x3663)));
evalcond[2]=((((-1.0)*x3660*x3664))+(((-1.0)*x3661))+(((-1.0)*r02*x3663))+((r01*x3665)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3659))+((r21*x3666))+(((-1.0)*x3657*x3663))+((r22*x3655)));
evalcond[4]=((((-1.0)*x3660*x3663))+((r01*x3666))+(((-1.0)*cj0*x3662))+((r02*x3655))+(((-1.0)*cj0*sj1*x3659)));
evalcond[5]=((((-1.0)*sj0*sj1*x3659))+((r12*x3655))+(((-1.0)*x3661*x3662))+((r11*x3666))+(((-1.0)*x3658*x3663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3667=((1.0)*gconst101);
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3667)))),-1);
if(!x3668.valid){
continue;
}
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3668.value)))+(x3669.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3670=IKsin(j4);
IkReal x3671=IKcos(j4);
IkReal x3672=(gconst101*r20);
IkReal x3673=(gconst101*r10);
IkReal x3674=((1.0)*cj2);
IkReal x3675=(gconst101*r00);
IkReal x3676=((1.0)*sj0);
IkReal x3677=(cj1*sj2);
IkReal x3678=((1.0)*x3671);
IkReal x3679=((1.0)*x3670);
IkReal x3680=(gconst100*x3670);
IkReal x3681=(gconst100*x3671);
evalcond[0]=(((r21*x3680))+(((-1.0)*x3672*x3679))+(((-1.0)*r22*x3678)));
evalcond[1]=(cj0+(((-1.0)*x3673*x3679))+(((-1.0)*r12*x3678))+((r11*x3680)));
evalcond[2]=(((r01*x3680))+(((-1.0)*r02*x3678))+(((-1.0)*x3676))+(((-1.0)*x3675*x3679)));
evalcond[3]=(((r21*x3681))+((sj1*sj2))+(((-1.0)*x3672*x3678))+((r22*x3670))+(((-1.0)*cj1*x3674)));
evalcond[4]=(((r01*x3681))+(((-1.0)*cj0*x3677))+((r02*x3670))+(((-1.0)*cj0*sj1*x3674))+(((-1.0)*x3675*x3678)));
evalcond[5]=((((-1.0)*x3676*x3677))+((r12*x3670))+(((-1.0)*x3673*x3678))+((r11*x3681))+(((-1.0)*sj0*sj1*x3674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3682=((-1.0)*r10);
IkReal x3684 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3684)==0){
continue;
}
IkReal x3683=pow(x3684,-0.5);
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3682),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3685.value));
IkReal gconst103=(r11*x3683);
IkReal gconst104=(x3682*x3683);
CheckValue<IkReal> x3686 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3686.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3686.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3687=((-1.0)*r10);
IkReal x3688=x3683;
CheckValue<IkReal> x3690 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3687),IKFAST_ATAN2_MAGTHRESH);
if(!x3690.valid){
continue;
}
IkReal x3689=((-1.0)*(x3690.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3689;
IkReal gconst102=x3689;
IkReal gconst103=(r11*x3688);
IkReal gconst104=(x3687*x3688);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3691=((1.0)*sj0);
IkReal x3692=((1.0)*gconst103);
CheckValue<IkReal> x3693=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3692))+(((-1.0)*gconst104*r21)))),-1);
if(!x3693.valid){
continue;
}
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3691))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3692))+(((-1.0)*gconst103*r11*x3691))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3693.value)))+(x3694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3695=IKsin(j4);
IkReal x3696=IKcos(j4);
IkReal x3697=(gconst103*r11);
IkReal x3698=((1.0)*cj2);
IkReal x3699=((1.0)*sj0);
IkReal x3700=(cj1*sj2);
IkReal x3701=((1.0)*x3696);
IkReal x3702=(gconst103*x3696);
IkReal x3703=(gconst103*x3695);
IkReal x3704=((1.0)*gconst104*x3695);
evalcond[0]=(((r21*x3703))+(((-1.0)*r20*x3704))+(((-1.0)*r22*x3701)));
evalcond[1]=(cj0+(((-1.0)*r10*x3704))+((x3695*x3697))+(((-1.0)*r12*x3701)));
evalcond[2]=((((-1.0)*r02*x3701))+(((-1.0)*r00*x3704))+((r01*x3703))+(((-1.0)*x3699)));
evalcond[3]=((((-1.0)*gconst104*r20*x3701))+(((-1.0)*cj1*x3698))+((sj1*sj2))+((r21*x3702))+((r22*x3695)));
evalcond[4]=((((-1.0)*cj0*x3700))+((r01*x3702))+((r02*x3695))+(((-1.0)*gconst104*r00*x3701))+(((-1.0)*cj0*sj1*x3698)));
evalcond[5]=((((-1.0)*x3699*x3700))+((x3696*x3697))+(((-1.0)*sj0*sj1*x3698))+(((-1.0)*gconst104*r10*x3701))+((r12*x3695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3705=((1.0)*gconst104);
CheckValue<IkReal> x3706=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3705))+(((-1.0)*gconst103*r00)))),-1);
if(!x3706.valid){
continue;
}
CheckValue<IkReal> x3707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3705))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3706.value)))+(x3707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3708=IKsin(j4);
IkReal x3709=IKcos(j4);
IkReal x3710=(gconst103*r11);
IkReal x3711=((1.0)*cj2);
IkReal x3712=((1.0)*sj0);
IkReal x3713=(cj1*sj2);
IkReal x3714=((1.0)*x3709);
IkReal x3715=(gconst103*x3709);
IkReal x3716=(gconst103*x3708);
IkReal x3717=((1.0)*gconst104*x3708);
evalcond[0]=((((-1.0)*r20*x3717))+((r21*x3716))+(((-1.0)*r22*x3714)));
evalcond[1]=(cj0+((x3708*x3710))+(((-1.0)*r10*x3717))+(((-1.0)*r12*x3714)));
evalcond[2]=((((-1.0)*r00*x3717))+(((-1.0)*r02*x3714))+(((-1.0)*x3712))+((r01*x3716)));
evalcond[3]=((((-1.0)*gconst104*r20*x3714))+(((-1.0)*cj1*x3711))+((sj1*sj2))+((r21*x3715))+((r22*x3708)));
evalcond[4]=((((-1.0)*cj0*x3713))+((r01*x3715))+(((-1.0)*gconst104*r00*x3714))+((r02*x3708))+(((-1.0)*cj0*sj1*x3711)));
evalcond[5]=(((r12*x3708))+((x3709*x3710))+(((-1.0)*sj0*sj1*x3711))+(((-1.0)*x3712*x3713))+(((-1.0)*gconst104*r10*x3714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3718=((-1.0)*r11);
IkReal x3720 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3720)==0){
continue;
}
IkReal x3719=pow(x3720,-0.5);
CheckValue<IkReal> x3721 = IKatan2WithCheck(IkReal(x3718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3721.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3721.value))));
IkReal gconst106=(x3718*x3719);
IkReal gconst107=((1.0)*r10*x3719);
CheckValue<IkReal> x3722 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3722.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3722.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3723=((-1.0)*r11);
CheckValue<IkReal> x3726 = IKatan2WithCheck(IkReal(x3723),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3726.valid){
continue;
}
IkReal x3724=((1.0)*(x3726.value));
IkReal x3725=x3719;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3724)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3724)));
IkReal gconst106=(x3723*x3725);
IkReal gconst107=((1.0)*r10*x3725);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3727=((-1.0)*r11);
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal(x3727),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
IkReal x3728=((1.0)*(x3730.value));
IkReal x3729=x3719;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3728)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3728)));
IkReal gconst106=(x3727*x3729);
IkReal gconst107=((1.0)*r10*x3729);
IkReal x3731=r12*r12;
IkReal x3732=((1.0)*sj0);
IkReal x3733=(cj0*r02);
IkReal x3734=x3719;
j4eval[0]=((IKabs((((r12*x3733*x3734))+(((-1.0)*x3732*x3734))+((sj0*x3731*x3734)))))+(IKabs(((((-1.0)*r12*x3732))+(((-1.0)*x3733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3735=((-1.0)*r11);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(x3735),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
IkReal x3736=((1.0)*(x3738.value));
IkReal x3737=x3719;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3736)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3736)));
IkReal gconst106=(x3735*x3737);
IkReal gconst107=((1.0)*r10*x3737);
IkReal x3739=r12*r12;
IkReal x3740=((1.0)+(((-1.0)*x3739)));
IkReal x3741=(r22*sj1*sj2);
IkReal x3742=(cj1*cj2*r22);
CheckValue<IkReal> x3749=IKPowWithIntegerCheck(x3740,-1);
if(!x3749.valid){
continue;
}
IkReal x3743=x3749.value;
CheckValue<IkReal> x3750=IKPowWithIntegerCheck(((-1.0)+x3739),-1);
if(!x3750.valid){
continue;
}
IkReal x3744=x3750.value;
IkReal x3745=((1.0)*x3743);
if((x3740) < -0.00001)
continue;
IkReal x3746=IKsqrt(x3740);
IkReal x3747=(r12*x3744*x3746);
IkReal x3748=((((-2.0)*r10*r11*r20*r21*x3743))+(((-1.0)*x3745*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x3745*(r10*r10)*(r20*r20))));
j4eval[0]=x3748;
j4eval[1]=((IKabs((((x3742*x3747))+(((-1.0)*x3741*x3747)))))+(IKabs((x3741+(((-1.0)*x3742))))));
j4eval[2]=IKsign(x3748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3751=(sj1*sj2);
IkReal x3752=(gconst106*r21);
IkReal x3753=(gconst107*r20);
IkReal x3754=(cj1*cj2);
CheckValue<IkReal> x3755=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3753*x3753)))+(((-1.0)*(x3752*x3752)))+(((-1.0)*(r22*r22)))+(((2.0)*x3752*x3753)))),-1);
if(!x3755.valid){
continue;
}
CheckValue<IkReal> x3756 = IKatan2WithCheck(IkReal((((r22*x3751))+(((-1.0)*r22*x3754)))),IkReal((((x3751*x3752))+(((-1.0)*x3752*x3754))+(((-1.0)*x3751*x3753))+((x3753*x3754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3755.value)))+(x3756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3757=IKsin(j4);
IkReal x3758=IKcos(j4);
IkReal x3759=(gconst107*r10);
IkReal x3760=(gconst107*r00);
IkReal x3761=((1.0)*cj2);
IkReal x3762=(gconst107*r20);
IkReal x3763=((1.0)*sj0);
IkReal x3764=(cj1*sj2);
IkReal x3765=((1.0)*x3758);
IkReal x3766=(gconst106*x3758);
IkReal x3767=(gconst106*x3757);
IkReal x3768=((1.0)*x3757);
evalcond[0]=((((-1.0)*x3762*x3768))+((r21*x3767))+(((-1.0)*r22*x3765)));
evalcond[1]=(cj0+(((-1.0)*x3759*x3768))+((r11*x3767))+(((-1.0)*r12*x3765)));
evalcond[2]=((((-1.0)*x3760*x3768))+(((-1.0)*r02*x3765))+(((-1.0)*x3763))+((r01*x3767)));
evalcond[3]=((((-1.0)*x3762*x3765))+((r21*x3766))+((sj1*sj2))+((r22*x3757))+(((-1.0)*cj1*x3761)));
evalcond[4]=((((-1.0)*cj0*sj1*x3761))+((r02*x3757))+(((-1.0)*x3760*x3765))+(((-1.0)*cj0*x3764))+((r01*x3766)));
evalcond[5]=((((-1.0)*x3763*x3764))+((r12*x3757))+(((-1.0)*x3759*x3765))+((r11*x3766))+(((-1.0)*sj0*sj1*x3761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3769=((1.0)*sj0);
IkReal x3770=((1.0)*gconst106);
CheckValue<IkReal> x3771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3770))+(((-1.0)*gconst107*r21)))),-1);
if(!x3771.valid){
continue;
}
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3769)))),IkReal(((((-1.0)*cj0*r01*x3770))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3769))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3771.value)))+(x3772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3773=IKsin(j4);
IkReal x3774=IKcos(j4);
IkReal x3775=(gconst107*r10);
IkReal x3776=(gconst107*r00);
IkReal x3777=((1.0)*cj2);
IkReal x3778=(gconst107*r20);
IkReal x3779=((1.0)*sj0);
IkReal x3780=(cj1*sj2);
IkReal x3781=((1.0)*x3774);
IkReal x3782=(gconst106*x3774);
IkReal x3783=(gconst106*x3773);
IkReal x3784=((1.0)*x3773);
evalcond[0]=((((-1.0)*x3778*x3784))+((r21*x3783))+(((-1.0)*r22*x3781)));
evalcond[1]=(cj0+(((-1.0)*r12*x3781))+(((-1.0)*x3775*x3784))+((r11*x3783)));
evalcond[2]=((((-1.0)*r02*x3781))+((r01*x3783))+(((-1.0)*x3779))+(((-1.0)*x3776*x3784)));
evalcond[3]=((((-1.0)*x3778*x3781))+((r22*x3773))+((r21*x3782))+((sj1*sj2))+(((-1.0)*cj1*x3777)));
evalcond[4]=(((r02*x3773))+(((-1.0)*cj0*sj1*x3777))+(((-1.0)*cj0*x3780))+((r01*x3782))+(((-1.0)*x3776*x3781)));
evalcond[5]=((((-1.0)*x3779*x3780))+((r12*x3773))+(((-1.0)*sj0*sj1*x3777))+(((-1.0)*x3775*x3781))+((r11*x3782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3785=((1.0)*gconst107);
CheckValue<IkReal> x3786 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3785))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3786.valid){
continue;
}
CheckValue<IkReal> x3787=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3785)))),-1);
if(!x3787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3786.value)+(((1.5707963267949)*(x3787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3788=IKsin(j4);
IkReal x3789=IKcos(j4);
IkReal x3790=(gconst107*r10);
IkReal x3791=(gconst107*r00);
IkReal x3792=((1.0)*cj2);
IkReal x3793=(gconst107*r20);
IkReal x3794=((1.0)*sj0);
IkReal x3795=(cj1*sj2);
IkReal x3796=((1.0)*x3789);
IkReal x3797=(gconst106*x3789);
IkReal x3798=(gconst106*x3788);
IkReal x3799=((1.0)*x3788);
evalcond[0]=(((r21*x3798))+(((-1.0)*r22*x3796))+(((-1.0)*x3793*x3799)));
evalcond[1]=((((-1.0)*r12*x3796))+cj0+(((-1.0)*x3790*x3799))+((r11*x3798)));
evalcond[2]=((((-1.0)*x3794))+(((-1.0)*x3791*x3799))+(((-1.0)*r02*x3796))+((r01*x3798)));
evalcond[3]=(((r21*x3797))+((r22*x3788))+((sj1*sj2))+(((-1.0)*x3793*x3796))+(((-1.0)*cj1*x3792)));
evalcond[4]=(((r02*x3788))+(((-1.0)*x3791*x3796))+(((-1.0)*cj0*sj1*x3792))+(((-1.0)*cj0*x3795))+((r01*x3797)));
evalcond[5]=((((-1.0)*sj0*sj1*x3792))+((r12*x3788))+(((-1.0)*x3790*x3796))+((r11*x3797))+(((-1.0)*x3794*x3795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3800=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3800;
j4eval[1]=IKsign(x3800);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3801=((1.0)*cj5);
IkReal x3802=((((-1.0)*r01*x3801))+(((-1.0)*r00*sj5)));
j4eval[0]=x3802;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3801))))));
j4eval[2]=IKsign(x3802);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3803=(sj1*sj2);
IkReal x3804=(cj5*r10);
IkReal x3805=(r11*sj5);
IkReal x3806=(cj1*cj2);
IkReal x3807=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3807;
j4eval[1]=((IKabs(((((-1.0)*x3803*x3804))+((x3804*x3806))+((x3803*x3805))+(((-1.0)*x3805*x3806)))))+(IKabs(((((-1.0)*r12*x3803))+((r12*x3806))))));
j4eval[2]=IKsign(x3807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3808=(sj1*sj2);
IkReal x3809=(cj5*r10);
IkReal x3810=(r11*sj5);
IkReal x3811=(cj1*cj2);
CheckValue<IkReal> x3812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3812.valid){
continue;
}
CheckValue<IkReal> x3813 = IKatan2WithCheck(IkReal((((x3809*x3811))+((x3808*x3810))+(((-1.0)*x3808*x3809))+(((-1.0)*x3810*x3811)))),IkReal((((r12*x3811))+(((-1.0)*r12*x3808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3812.value)))+(x3813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3814=IKcos(j4);
IkReal x3815=IKsin(j4);
IkReal x3816=(cj5*r00);
IkReal x3817=(cj5*r10);
IkReal x3818=(r21*sj5);
IkReal x3819=((1.0)*cj2);
IkReal x3820=(cj5*r20);
IkReal x3821=((1.0)*x3814);
IkReal x3822=((1.0)*x3815);
IkReal x3823=(sj5*x3815);
IkReal x3824=(sj5*x3814);
evalcond[0]=(((r12*x3815))+(((-1.0)*x3817*x3821))+((r11*x3824)));
evalcond[1]=((((-1.0)*r22*x3821))+((x3815*x3818))+(((-1.0)*x3820*x3822)));
evalcond[2]=((((-1.0)*r02*x3821))+(((-1.0)*x3816*x3822))+((r01*x3823)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3821))+(((-1.0)*x3817*x3822))+((r11*x3823)));
evalcond[4]=((((-1.0)*cj1*x3819))+((sj1*sj2))+((r22*x3815))+((x3814*x3818))+(((-1.0)*x3820*x3821)));
evalcond[5]=((((-1.0)*sj1*x3819))+(((-1.0)*cj1*sj2))+((r02*x3815))+(((-1.0)*x3816*x3821))+((r01*x3824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3825=((1.0)*cj5);
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3825))+(((-1.0)*r00*sj5)))),-1);
if(!x3826.valid){
continue;
}
CheckValue<IkReal> x3827 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3826.value)))+(x3827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3828=IKcos(j4);
IkReal x3829=IKsin(j4);
IkReal x3830=(cj5*r00);
IkReal x3831=(cj5*r10);
IkReal x3832=(r21*sj5);
IkReal x3833=((1.0)*cj2);
IkReal x3834=(cj5*r20);
IkReal x3835=((1.0)*x3828);
IkReal x3836=((1.0)*x3829);
IkReal x3837=(sj5*x3829);
IkReal x3838=(sj5*x3828);
evalcond[0]=(((r12*x3829))+(((-1.0)*x3831*x3835))+((r11*x3838)));
evalcond[1]=(((x3829*x3832))+(((-1.0)*r22*x3835))+(((-1.0)*x3834*x3836)));
evalcond[2]=((((-1.0)*x3830*x3836))+((r01*x3837))+(((-1.0)*r02*x3835)));
evalcond[3]=((1.0)+(((-1.0)*x3831*x3836))+(((-1.0)*r12*x3835))+((r11*x3837)));
evalcond[4]=(((sj1*sj2))+((x3828*x3832))+((r22*x3829))+(((-1.0)*cj1*x3833))+(((-1.0)*x3834*x3835)));
evalcond[5]=((((-1.0)*x3830*x3835))+((r01*x3838))+(((-1.0)*cj1*sj2))+((r02*x3829))+(((-1.0)*sj1*x3833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3839=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3839.valid){
continue;
}
CheckValue<IkReal> x3840 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3839.value)))+(x3840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3841=IKcos(j4);
IkReal x3842=IKsin(j4);
IkReal x3843=(cj5*r00);
IkReal x3844=(cj5*r10);
IkReal x3845=(r21*sj5);
IkReal x3846=((1.0)*cj2);
IkReal x3847=(cj5*r20);
IkReal x3848=((1.0)*x3841);
IkReal x3849=((1.0)*x3842);
IkReal x3850=(sj5*x3842);
IkReal x3851=(sj5*x3841);
evalcond[0]=(((r12*x3842))+((r11*x3851))+(((-1.0)*x3844*x3848)));
evalcond[1]=(((x3842*x3845))+(((-1.0)*r22*x3848))+(((-1.0)*x3847*x3849)));
evalcond[2]=((((-1.0)*r02*x3848))+(((-1.0)*x3843*x3849))+((r01*x3850)));
evalcond[3]=((1.0)+((r11*x3850))+(((-1.0)*x3844*x3849))+(((-1.0)*r12*x3848)));
evalcond[4]=(((x3841*x3845))+((sj1*sj2))+(((-1.0)*cj1*x3846))+((r22*x3842))+(((-1.0)*x3847*x3848)));
evalcond[5]=((((-1.0)*x3843*x3848))+(((-1.0)*sj1*x3846))+(((-1.0)*cj1*sj2))+((r01*x3851))+((r02*x3842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3852=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3852;
j4eval[1]=IKsign(x3852);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3853=((1.0)*cj5);
IkReal x3854=((((-1.0)*r21*x3853))+(((-1.0)*r20*sj5)));
j4eval[0]=x3854;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3853))))));
j4eval[2]=IKsign(x3854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3855=cj5*cj5;
IkReal x3856=r11*r11;
IkReal x3857=(r11*sj5);
IkReal x3858=(cj5*r10);
IkReal x3859=((r12*r12)+(((-1.0)*x3855*x3856))+((x3855*(r10*r10)))+x3856+(((-2.0)*x3857*x3858)));
j4eval[0]=x3859;
j4eval[1]=IKsign(x3859);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3858))+x3857))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3860=cj5*cj5;
IkReal x3861=r11*r11;
IkReal x3862=(cj5*r10);
IkReal x3863=(r11*sj5);
CheckValue<IkReal> x3864 = IKatan2WithCheck(IkReal(((((-1.0)*x3862))+x3863)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3864.valid){
continue;
}
CheckValue<IkReal> x3865=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3860*x3861))+x3861+((x3860*(r10*r10)))+(((-2.0)*x3862*x3863)))),-1);
if(!x3865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3864.value)+(((1.5707963267949)*(x3865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3866=IKcos(j4);
IkReal x3867=IKsin(j4);
IkReal x3868=(cj5*r00);
IkReal x3869=(cj5*r10);
IkReal x3870=(r21*sj5);
IkReal x3871=(cj5*r20);
IkReal x3872=((1.0)*x3866);
IkReal x3873=((1.0)*x3867);
IkReal x3874=(sj5*x3867);
IkReal x3875=(sj5*x3866);
evalcond[0]=((((-1.0)*x3869*x3872))+((r11*x3875))+((r12*x3867)));
evalcond[1]=(((x3867*x3870))+(((-1.0)*x3871*x3873))+(((-1.0)*r22*x3872)));
evalcond[2]=(((r01*x3874))+(((-1.0)*r02*x3872))+(((-1.0)*x3868*x3873)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3872))+(((-1.0)*x3869*x3873))+((r11*x3874)));
evalcond[4]=(((cj2*sj1))+((r02*x3867))+((r01*x3875))+((cj1*sj2))+(((-1.0)*x3868*x3872)));
evalcond[5]=(((x3866*x3870))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3871*x3872))+((r22*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3876=((1.0)*cj5);
CheckValue<IkReal> x3877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3876))+(((-1.0)*r20*sj5)))),-1);
if(!x3877.valid){
continue;
}
CheckValue<IkReal> x3878 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3877.value)))+(x3878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3879=IKcos(j4);
IkReal x3880=IKsin(j4);
IkReal x3881=(cj5*r00);
IkReal x3882=(cj5*r10);
IkReal x3883=(r21*sj5);
IkReal x3884=(cj5*r20);
IkReal x3885=((1.0)*x3879);
IkReal x3886=((1.0)*x3880);
IkReal x3887=(sj5*x3880);
IkReal x3888=(sj5*x3879);
evalcond[0]=(((r12*x3880))+((r11*x3888))+(((-1.0)*x3882*x3885)));
evalcond[1]=(((x3880*x3883))+(((-1.0)*r22*x3885))+(((-1.0)*x3884*x3886)));
evalcond[2]=((((-1.0)*r02*x3885))+((r01*x3887))+(((-1.0)*x3881*x3886)));
evalcond[3]=((-1.0)+((r11*x3887))+(((-1.0)*r12*x3885))+(((-1.0)*x3882*x3886)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x3880))+((r01*x3888))+(((-1.0)*x3881*x3885)));
evalcond[5]=(((r22*x3880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3879*x3883))+(((-1.0)*x3884*x3885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3889.value)+(((1.5707963267949)*(x3890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3891=IKcos(j4);
IkReal x3892=IKsin(j4);
IkReal x3893=(cj5*r00);
IkReal x3894=(cj5*r10);
IkReal x3895=(r21*sj5);
IkReal x3896=(cj5*r20);
IkReal x3897=((1.0)*x3891);
IkReal x3898=((1.0)*x3892);
IkReal x3899=(sj5*x3892);
IkReal x3900=(sj5*x3891);
evalcond[0]=((((-1.0)*x3894*x3897))+((r12*x3892))+((r11*x3900)));
evalcond[1]=((((-1.0)*x3896*x3898))+(((-1.0)*r22*x3897))+((x3892*x3895)));
evalcond[2]=(((r01*x3899))+(((-1.0)*x3893*x3898))+(((-1.0)*r02*x3897)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3897))+((r11*x3899))+(((-1.0)*x3894*x3898)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3900))+(((-1.0)*x3893*x3897))+((r02*x3892)));
evalcond[5]=((((-1.0)*x3896*x3897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3891*x3895))+((r22*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3901=((-1.0)*r00);
IkReal x3903 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3903)==0){
continue;
}
IkReal x3902=pow(x3903,-0.5);
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3901),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3904.value));
IkReal gconst109=(r01*x3902);
IkReal gconst110=(x3901*x3902);
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3905.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3906=((-1.0)*r00);
IkReal x3907=x3902;
CheckValue<IkReal> x3909 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3906),IKFAST_ATAN2_MAGTHRESH);
if(!x3909.valid){
continue;
}
IkReal x3908=((-1.0)*(x3909.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3908;
IkReal gconst108=x3908;
IkReal gconst109=(r01*x3907);
IkReal gconst110=(x3906*x3907);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3910=((1.0)*sj0);
IkReal x3911=((1.0)*gconst109);
CheckValue<IkReal> x3912 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3910)))),IkReal(((((-1.0)*cj0*r01*x3911))+(((-1.0)*gconst109*r11*x3910))+((cj0*gconst110*r00))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3912.valid){
continue;
}
CheckValue<IkReal> x3913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3911))+(((-1.0)*gconst110*r21)))),-1);
if(!x3913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3912.value)+(((1.5707963267949)*(x3913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3914=IKsin(j4);
IkReal x3915=IKcos(j4);
IkReal x3916=(gconst109*r21);
IkReal x3917=((1.0)*cj2);
IkReal x3918=((1.0)*sj0);
IkReal x3919=(cj1*sj2);
IkReal x3920=((1.0)*x3915);
IkReal x3921=(gconst109*x3914);
IkReal x3922=(gconst109*x3915);
IkReal x3923=((1.0)*gconst110*x3914);
evalcond[0]=(((x3914*x3916))+(((-1.0)*r20*x3923))+(((-1.0)*r22*x3920)));
evalcond[1]=(((r11*x3921))+(((-1.0)*r10*x3923))+cj0+(((-1.0)*r12*x3920)));
evalcond[2]=((((-1.0)*x3918))+(((-1.0)*r02*x3920))+(((-1.0)*r00*x3923))+((r01*x3921)));
evalcond[3]=((((-1.0)*gconst110*r20*x3920))+((x3915*x3916))+((sj1*sj2))+(((-1.0)*cj1*x3917))+((r22*x3914)));
evalcond[4]=((((-1.0)*gconst110*r00*x3920))+(((-1.0)*cj0*sj1*x3917))+((r02*x3914))+((r01*x3922))+(((-1.0)*cj0*x3919)));
evalcond[5]=(((r11*x3922))+(((-1.0)*gconst110*r10*x3920))+((r12*x3914))+(((-1.0)*x3918*x3919))+(((-1.0)*sj0*sj1*x3917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3924=((1.0)*gconst110);
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
CheckValue<IkReal> x3926=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3924))+(((-1.0)*gconst109*r10)))),-1);
if(!x3926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3925.value)+(((1.5707963267949)*(x3926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3927=IKsin(j4);
IkReal x3928=IKcos(j4);
IkReal x3929=(gconst109*r21);
IkReal x3930=((1.0)*cj2);
IkReal x3931=((1.0)*sj0);
IkReal x3932=(cj1*sj2);
IkReal x3933=((1.0)*x3928);
IkReal x3934=(gconst109*x3927);
IkReal x3935=(gconst109*x3928);
IkReal x3936=((1.0)*gconst110*x3927);
evalcond[0]=((((-1.0)*r22*x3933))+(((-1.0)*r20*x3936))+((x3927*x3929)));
evalcond[1]=(cj0+(((-1.0)*r12*x3933))+(((-1.0)*r10*x3936))+((r11*x3934)));
evalcond[2]=(((r01*x3934))+(((-1.0)*r00*x3936))+(((-1.0)*r02*x3933))+(((-1.0)*x3931)));
evalcond[3]=(((x3928*x3929))+(((-1.0)*cj1*x3930))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3933))+((r22*x3927)));
evalcond[4]=(((r01*x3935))+(((-1.0)*cj0*sj1*x3930))+(((-1.0)*cj0*x3932))+((r02*x3927))+(((-1.0)*gconst110*r00*x3933)));
evalcond[5]=(((r12*x3927))+(((-1.0)*x3931*x3932))+(((-1.0)*gconst110*r10*x3933))+(((-1.0)*sj0*sj1*x3930))+((r11*x3935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3937=((-1.0)*r01);
IkReal x3939 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3939)==0){
continue;
}
IkReal x3938=pow(x3939,-0.5);
CheckValue<IkReal> x3940 = IKatan2WithCheck(IkReal(x3937),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3940.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3940.value))));
IkReal gconst112=(x3937*x3938);
IkReal gconst113=((1.0)*r00*x3938);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3942=((-1.0)*r01);
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal(x3942),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
IkReal x3943=((1.0)*(x3945.value));
IkReal x3944=x3938;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3943)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3943)));
IkReal gconst112=(x3942*x3944);
IkReal gconst113=((1.0)*r00*x3944);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3946=((-1.0)*r01);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(x3946),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
IkReal x3947=((1.0)*(x3949.value));
IkReal x3948=x3938;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3947)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3947)));
IkReal gconst112=(x3946*x3948);
IkReal gconst113=((1.0)*r00*x3948);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3950=((-1.0)*r01);
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(x3950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
IkReal x3951=((1.0)*(x3953.value));
IkReal x3952=x3938;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3951)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3951)));
IkReal gconst112=(x3950*x3952);
IkReal gconst113=((1.0)*r00*x3952);
IkReal x3954=r02*r02;
IkReal x3955=(r12*sj0);
IkReal x3956=((1.0)*cj0);
IkReal x3957=x3938;
j4eval[0]=((IKabs(((((-1.0)*x3956*x3957))+((r02*x3955*x3957))+((cj0*x3954*x3957)))))+(IKabs(((((-1.0)*x3955))+(((-1.0)*r02*x3956))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3958=((1.0)*sj0);
IkReal x3959=((1.0)*gconst112);
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3958)))),IkReal(((((-1.0)*cj0*r01*x3959))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x3958)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
CheckValue<IkReal> x3961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x3959)))),-1);
if(!x3961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3960.value)+(((1.5707963267949)*(x3961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3962=IKsin(j4);
IkReal x3963=IKcos(j4);
IkReal x3964=(gconst113*r20);
IkReal x3965=(gconst112*r21);
IkReal x3966=((1.0)*cj2);
IkReal x3967=(gconst113*r00);
IkReal x3968=(gconst113*r10);
IkReal x3969=((1.0)*sj0);
IkReal x3970=(cj1*sj2);
IkReal x3971=((1.0)*x3963);
IkReal x3972=((1.0)*x3962);
IkReal x3973=(gconst112*x3963);
IkReal x3974=(gconst112*x3962);
evalcond[0]=(((x3962*x3965))+(((-1.0)*r22*x3971))+(((-1.0)*x3964*x3972)));
evalcond[1]=((((-1.0)*r12*x3971))+cj0+(((-1.0)*x3968*x3972))+((r11*x3974)));
evalcond[2]=((((-1.0)*r02*x3971))+(((-1.0)*x3969))+((r01*x3974))+(((-1.0)*x3967*x3972)));
evalcond[3]=(((r22*x3962))+((sj1*sj2))+((x3963*x3965))+(((-1.0)*x3964*x3971))+(((-1.0)*cj1*x3966)));
evalcond[4]=(((r02*x3962))+(((-1.0)*cj0*sj1*x3966))+((r01*x3973))+(((-1.0)*x3967*x3971))+(((-1.0)*cj0*x3970)));
evalcond[5]=((((-1.0)*x3969*x3970))+(((-1.0)*x3968*x3971))+((r11*x3973))+((r12*x3962))+(((-1.0)*sj0*sj1*x3966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3975=((1.0)*gconst113);
CheckValue<IkReal> x3976 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3976.valid){
continue;
}
CheckValue<IkReal> x3977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x3975)))),-1);
if(!x3977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3976.value)+(((1.5707963267949)*(x3977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3978=IKsin(j4);
IkReal x3979=IKcos(j4);
IkReal x3980=(gconst113*r20);
IkReal x3981=(gconst112*r21);
IkReal x3982=((1.0)*cj2);
IkReal x3983=(gconst113*r00);
IkReal x3984=(gconst113*r10);
IkReal x3985=((1.0)*sj0);
IkReal x3986=(cj1*sj2);
IkReal x3987=((1.0)*x3979);
IkReal x3988=((1.0)*x3978);
IkReal x3989=(gconst112*x3979);
IkReal x3990=(gconst112*x3978);
evalcond[0]=((((-1.0)*r22*x3987))+((x3978*x3981))+(((-1.0)*x3980*x3988)));
evalcond[1]=((((-1.0)*r12*x3987))+cj0+(((-1.0)*x3984*x3988))+((r11*x3990)));
evalcond[2]=((((-1.0)*x3983*x3988))+((r01*x3990))+(((-1.0)*x3985))+(((-1.0)*r02*x3987)));
evalcond[3]=(((sj1*sj2))+((r22*x3978))+((x3979*x3981))+(((-1.0)*cj1*x3982))+(((-1.0)*x3980*x3987)));
evalcond[4]=((((-1.0)*cj0*sj1*x3982))+((r02*x3978))+((r01*x3989))+(((-1.0)*cj0*x3986))+(((-1.0)*x3983*x3987)));
evalcond[5]=(((r11*x3989))+(((-1.0)*x3984*x3987))+(((-1.0)*x3985*x3986))+((r12*x3978))+(((-1.0)*sj0*sj1*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3991=((1.0)*gconst113);
CheckValue<IkReal> x3992 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3991))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3992.valid){
continue;
}
CheckValue<IkReal> x3993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3991))+(((-1.0)*gconst112*r00)))),-1);
if(!x3993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3992.value)+(((1.5707963267949)*(x3993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3994=IKsin(j4);
IkReal x3995=IKcos(j4);
IkReal x3996=(gconst113*r20);
IkReal x3997=(gconst112*r21);
IkReal x3998=((1.0)*cj2);
IkReal x3999=(gconst113*r00);
IkReal x4000=(gconst113*r10);
IkReal x4001=((1.0)*sj0);
IkReal x4002=(cj1*sj2);
IkReal x4003=((1.0)*x3995);
IkReal x4004=((1.0)*x3994);
IkReal x4005=(gconst112*x3995);
IkReal x4006=(gconst112*x3994);
evalcond[0]=(((x3994*x3997))+(((-1.0)*r22*x4003))+(((-1.0)*x3996*x4004)));
evalcond[1]=(cj0+(((-1.0)*x4000*x4004))+(((-1.0)*r12*x4003))+((r11*x4006)));
evalcond[2]=((((-1.0)*x3999*x4004))+(((-1.0)*r02*x4003))+(((-1.0)*x4001))+((r01*x4006)));
evalcond[3]=(((x3995*x3997))+((sj1*sj2))+((r22*x3994))+(((-1.0)*x3996*x4003))+(((-1.0)*cj1*x3998)));
evalcond[4]=((((-1.0)*x3999*x4003))+(((-1.0)*cj0*x4002))+((r01*x4005))+(((-1.0)*cj0*sj1*x3998))+((r02*x3994)));
evalcond[5]=((((-1.0)*x4001*x4002))+(((-1.0)*x4000*x4003))+((r12*x3994))+(((-1.0)*sj0*sj1*x3998))+((r11*x4005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4007=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4007;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4007);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4008=((1.0)*cj5);
IkReal x4009=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4008)));
j4eval[0]=x4009;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4008))))));
j4eval[2]=IKsign(x4009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4010=cj5*cj5;
IkReal x4011=r01*r01;
IkReal x4012=(cj5*r00);
IkReal x4013=(r01*sj5);
IkReal x4014=(x4011+(((-2.0)*x4012*x4013))+((x4010*(r00*r00)))+(r02*r02)+(((-1.0)*x4010*x4011)));
j4eval[0]=x4014;
j4eval[1]=IKsign(x4014);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4012))+x4013))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4015=cj5*cj5;
IkReal x4016=r01*r01;
IkReal x4017=(r01*sj5);
IkReal x4018=(cj5*r00);
CheckValue<IkReal> x4019=IKPowWithIntegerCheck(IKsign((((x4015*(r00*r00)))+(((-1.0)*x4015*x4016))+(((-2.0)*x4017*x4018))+x4016+(r02*r02))),-1);
if(!x4019.valid){
continue;
}
CheckValue<IkReal> x4020 = IKatan2WithCheck(IkReal(((((-1.0)*x4018))+x4017)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4019.value)))+(x4020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4021=IKcos(j4);
IkReal x4022=IKsin(j4);
IkReal x4023=(cj5*r00);
IkReal x4024=(cj5*r10);
IkReal x4025=(r21*sj5);
IkReal x4026=((1.0)*cj2);
IkReal x4027=(cj5*r20);
IkReal x4028=((1.0)*x4021);
IkReal x4029=((1.0)*x4022);
IkReal x4030=(sj5*x4022);
IkReal x4031=(sj5*x4021);
evalcond[0]=((((-1.0)*x4023*x4028))+((r01*x4031))+((r02*x4022)));
evalcond[1]=((((-1.0)*r22*x4028))+((x4022*x4025))+(((-1.0)*x4027*x4029)));
evalcond[2]=((((-1.0)*r12*x4028))+(((-1.0)*x4024*x4029))+((r11*x4030)));
evalcond[3]=((-1.0)+(((-1.0)*x4023*x4029))+(((-1.0)*r02*x4028))+((r01*x4030)));
evalcond[4]=(((x4021*x4025))+((sj1*sj2))+(((-1.0)*cj1*x4026))+(((-1.0)*x4027*x4028))+((r22*x4022)));
evalcond[5]=((((-1.0)*x4024*x4028))+(((-1.0)*cj1*sj2))+((r12*x4022))+(((-1.0)*sj1*x4026))+((r11*x4031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4032=((1.0)*cj5);
CheckValue<IkReal> x4033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4032)))),-1);
if(!x4033.valid){
continue;
}
CheckValue<IkReal> x4034 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4033.value)))+(x4034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4035=IKcos(j4);
IkReal x4036=IKsin(j4);
IkReal x4037=(cj5*r00);
IkReal x4038=(cj5*r10);
IkReal x4039=(r21*sj5);
IkReal x4040=((1.0)*cj2);
IkReal x4041=(cj5*r20);
IkReal x4042=((1.0)*x4035);
IkReal x4043=((1.0)*x4036);
IkReal x4044=(sj5*x4036);
IkReal x4045=(sj5*x4035);
evalcond[0]=(((r02*x4036))+((r01*x4045))+(((-1.0)*x4037*x4042)));
evalcond[1]=(((x4036*x4039))+(((-1.0)*x4041*x4043))+(((-1.0)*r22*x4042)));
evalcond[2]=((((-1.0)*r12*x4042))+((r11*x4044))+(((-1.0)*x4038*x4043)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4042))+((r01*x4044))+(((-1.0)*x4037*x4043)));
evalcond[4]=(((x4035*x4039))+((sj1*sj2))+(((-1.0)*x4041*x4042))+(((-1.0)*cj1*x4040))+((r22*x4036)));
evalcond[5]=((((-1.0)*sj1*x4040))+(((-1.0)*cj1*sj2))+((r11*x4045))+((r12*x4036))+(((-1.0)*x4038*x4042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4046=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4046.valid){
continue;
}
CheckValue<IkReal> x4047 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4046.value)))+(x4047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4048=IKcos(j4);
IkReal x4049=IKsin(j4);
IkReal x4050=(cj5*r00);
IkReal x4051=(cj5*r10);
IkReal x4052=(r21*sj5);
IkReal x4053=((1.0)*cj2);
IkReal x4054=(cj5*r20);
IkReal x4055=((1.0)*x4048);
IkReal x4056=((1.0)*x4049);
IkReal x4057=(sj5*x4049);
IkReal x4058=(sj5*x4048);
evalcond[0]=((((-1.0)*x4050*x4055))+((r02*x4049))+((r01*x4058)));
evalcond[1]=(((x4049*x4052))+(((-1.0)*x4054*x4056))+(((-1.0)*r22*x4055)));
evalcond[2]=((((-1.0)*x4051*x4056))+(((-1.0)*r12*x4055))+((r11*x4057)));
evalcond[3]=((-1.0)+(((-1.0)*x4050*x4056))+(((-1.0)*r02*x4055))+((r01*x4057)));
evalcond[4]=(((r22*x4049))+((x4048*x4052))+((sj1*sj2))+(((-1.0)*x4054*x4055))+(((-1.0)*cj1*x4053)));
evalcond[5]=((((-1.0)*x4051*x4055))+(((-1.0)*cj1*sj2))+((r11*x4058))+((r12*x4049))+(((-1.0)*sj1*x4053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4059=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4059;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4060=((1.0)*cj5);
IkReal x4061=((((-1.0)*r21*x4060))+(((-1.0)*r20*sj5)));
j4eval[0]=x4061;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4060))))));
j4eval[2]=IKsign(x4061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4062=cj5*cj5;
IkReal x4063=r01*r01;
IkReal x4064=(r01*sj5);
IkReal x4065=(cj5*r00);
IkReal x4066=((((-1.0)*x4062*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4064*x4065))+(((-1.0)*x4063))+((x4062*x4063)));
j4eval[0]=x4066;
j4eval[1]=IKsign(x4066);
j4eval[2]=((IKabs(r02))+(IKabs((x4064+(((-1.0)*x4065))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4067=cj5*cj5;
IkReal x4068=r01*r01;
IkReal x4069=(r01*sj5);
IkReal x4070=(cj5*r00);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(((((-1.0)*x4070))+x4069)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign((((x4067*x4068))+(((-1.0)*(r02*r02)))+(((-1.0)*x4068))+(((2.0)*x4069*x4070))+(((-1.0)*x4067*(r00*r00))))),-1);
if(!x4072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4071.value)+(((1.5707963267949)*(x4072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4073=IKcos(j4);
IkReal x4074=IKsin(j4);
IkReal x4075=(cj5*r00);
IkReal x4076=(cj5*r10);
IkReal x4077=(r21*sj5);
IkReal x4078=(cj5*r20);
IkReal x4079=((1.0)*x4073);
IkReal x4080=((1.0)*x4074);
IkReal x4081=(sj5*x4074);
IkReal x4082=(sj5*x4073);
evalcond[0]=(((r01*x4082))+(((-1.0)*x4075*x4079))+((r02*x4074)));
evalcond[1]=(((x4074*x4077))+(((-1.0)*r22*x4079))+(((-1.0)*x4078*x4080)));
evalcond[2]=((((-1.0)*r12*x4079))+((r11*x4081))+(((-1.0)*x4076*x4080)));
evalcond[3]=((1.0)+((r01*x4081))+(((-1.0)*r02*x4079))+(((-1.0)*x4075*x4080)));
evalcond[4]=(((cj2*sj1))+((r12*x4074))+((cj1*sj2))+((r11*x4082))+(((-1.0)*x4076*x4079)));
evalcond[5]=(((r22*x4074))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4073*x4077))+(((-1.0)*x4078*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4083=((1.0)*cj5);
CheckValue<IkReal> x4084 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4084.valid){
continue;
}
CheckValue<IkReal> x4085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4083))+(((-1.0)*r20*sj5)))),-1);
if(!x4085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4084.value)+(((1.5707963267949)*(x4085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4086=IKcos(j4);
IkReal x4087=IKsin(j4);
IkReal x4088=(cj5*r00);
IkReal x4089=(cj5*r10);
IkReal x4090=(r21*sj5);
IkReal x4091=(cj5*r20);
IkReal x4092=((1.0)*x4086);
IkReal x4093=((1.0)*x4087);
IkReal x4094=(sj5*x4087);
IkReal x4095=(sj5*x4086);
evalcond[0]=(((r01*x4095))+((r02*x4087))+(((-1.0)*x4088*x4092)));
evalcond[1]=(((x4087*x4090))+(((-1.0)*r22*x4092))+(((-1.0)*x4091*x4093)));
evalcond[2]=((((-1.0)*r12*x4092))+(((-1.0)*x4089*x4093))+((r11*x4094)));
evalcond[3]=((1.0)+((r01*x4094))+(((-1.0)*r02*x4092))+(((-1.0)*x4088*x4093)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4089*x4092))+((cj1*sj2))+((r11*x4095))+((r12*x4087)));
evalcond[5]=(((x4086*x4090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4087))+(((-1.0)*x4091*x4092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4096 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4096.valid){
continue;
}
CheckValue<IkReal> x4097=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4096.value)+(((1.5707963267949)*(x4097.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4098=IKcos(j4);
IkReal x4099=IKsin(j4);
IkReal x4100=(cj5*r00);
IkReal x4101=(cj5*r10);
IkReal x4102=(r21*sj5);
IkReal x4103=(cj5*r20);
IkReal x4104=((1.0)*x4098);
IkReal x4105=((1.0)*x4099);
IkReal x4106=(sj5*x4099);
IkReal x4107=(sj5*x4098);
evalcond[0]=(((r02*x4099))+(((-1.0)*x4100*x4104))+((r01*x4107)));
evalcond[1]=(((x4099*x4102))+(((-1.0)*r22*x4104))+(((-1.0)*x4103*x4105)));
evalcond[2]=((((-1.0)*r12*x4104))+((r11*x4106))+(((-1.0)*x4101*x4105)));
evalcond[3]=((1.0)+(((-1.0)*x4100*x4105))+((r01*x4106))+(((-1.0)*r02*x4104)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4099))+((r11*x4107))+(((-1.0)*x4101*x4104)));
evalcond[5]=(((x4098*x4102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4099))+(((-1.0)*x4103*x4104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4108=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4108);
rxp1_1=(px*r21);
rxp1_2=(r11*x4108);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4109=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4109);
rxp1_1=(px*r21);
rxp1_2=(r11*x4109);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4110=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4110);
rxp1_1=(px*r21);
rxp1_2=(r11*x4110);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4113.valid){
continue;
}
IkReal x4111=x4113.value;
IkReal x4112=(sj0*x4111);
cj4array[0]=(((cj1*sj2*x4112))+((cj2*sj1*x4112)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4114=IKsin(j4);
IkReal x4115=IKcos(j4);
IkReal x4116=(r21*sj5);
IkReal x4117=((1.0)*cj5*r20);
evalcond[0]=(r02*x4114);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4115)));
evalcond[2]=(((x4114*x4116))+(((-1.0)*x4114*x4117)));
evalcond[3]=(((r11*sj5*x4114))+(((-1.0)*cj5*r10*x4114)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4115*x4116))+(((-1.0)*x4115*x4117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4119=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4119.valid){
continue;
}
IkReal x4118=x4119.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4118))+((cj1*cj2*x4118)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4120=IKsin(j4);
IkReal x4121=IKcos(j4);
IkReal x4122=((1.0)*sj0);
IkReal x4123=((1.0)*cj5);
IkReal x4124=(sj5*x4120);
evalcond[0]=(r02*x4120);
evalcond[1]=((((-1.0)*r02*x4121))+(((-1.0)*x4122)));
evalcond[2]=(((r21*x4124))+(((-1.0)*r20*x4120*x4123)));
evalcond[3]=((((-1.0)*r10*x4120*x4123))+((r11*x4124)));
evalcond[4]=(((r11*sj5*x4121))+(((-1.0)*r10*x4121*x4123))+(((-1.0)*cj2*sj1*x4122))+(((-1.0)*cj1*sj2*x4122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4125=IKPowWithIntegerCheck(r02,-1);
if(!x4125.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4125.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4126=IKsin(j4);
IkReal x4127=IKcos(j4);
IkReal x4128=((1.0)*cj1);
IkReal x4129=(r21*sj5);
IkReal x4130=((1.0)*cj5);
IkReal x4131=(r11*sj5);
evalcond[0]=(r02*x4126);
evalcond[1]=((((-1.0)*r20*x4126*x4130))+((x4126*x4129)));
evalcond[2]=((((-1.0)*r10*x4126*x4130))+((x4126*x4131)));
evalcond[3]=(((x4127*x4129))+(((-1.0)*cj2*x4128))+((sj1*sj2))+(((-1.0)*r20*x4127*x4130)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x4127*x4131))+(((-1.0)*sj0*sj2*x4128))+(((-1.0)*r10*x4127*x4130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4132=((1.0)*sj0);
IkReal x4133=((1.0)*cj0);
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4133))+(((-1.0)*r12*x4132)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4132))+(((-1.0)*r01*sj5*x4133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4134.value)))+(x4135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4136=IKsin(j4);
IkReal x4137=IKcos(j4);
IkReal x4138=(cj5*r00);
IkReal x4139=(cj5*r10);
IkReal x4140=(r21*sj5);
IkReal x4141=((1.0)*cj2);
IkReal x4142=((1.0)*sj0);
IkReal x4143=(cj1*sj2);
IkReal x4144=(cj5*r20);
IkReal x4145=((1.0)*x4137);
IkReal x4146=((1.0)*x4136);
IkReal x4147=(sj5*x4136);
IkReal x4148=(sj5*x4137);
evalcond[0]=((((-1.0)*x4144*x4146))+(((-1.0)*r22*x4145))+((x4136*x4140)));
evalcond[1]=(cj0+((r11*x4147))+(((-1.0)*x4139*x4146))+(((-1.0)*r12*x4145)));
evalcond[2]=(((r01*x4147))+(((-1.0)*r02*x4145))+(((-1.0)*x4138*x4146))+(((-1.0)*x4142)));
evalcond[3]=(((x4137*x4140))+((r22*x4136))+(((-1.0)*x4144*x4145))+((sj1*sj2))+(((-1.0)*cj1*x4141)));
evalcond[4]=(((r01*x4148))+(((-1.0)*x4138*x4145))+(((-1.0)*cj0*x4143))+(((-1.0)*cj0*sj1*x4141))+((r02*x4136)));
evalcond[5]=((((-1.0)*sj0*sj1*x4141))+(((-1.0)*x4142*x4143))+((r11*x4148))+((r12*x4136))+(((-1.0)*x4139*x4145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4149=((1.0)*cj5);
CheckValue<IkReal> x4150 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4149))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4150.valid){
continue;
}
CheckValue<IkReal> x4151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4149)))),-1);
if(!x4151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4150.value)+(((1.5707963267949)*(x4151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4152=IKsin(j4);
IkReal x4153=IKcos(j4);
IkReal x4154=(cj5*r00);
IkReal x4155=(cj5*r10);
IkReal x4156=(r21*sj5);
IkReal x4157=((1.0)*cj2);
IkReal x4158=((1.0)*sj0);
IkReal x4159=(cj1*sj2);
IkReal x4160=(cj5*r20);
IkReal x4161=((1.0)*x4153);
IkReal x4162=((1.0)*x4152);
IkReal x4163=(sj5*x4152);
IkReal x4164=(sj5*x4153);
evalcond[0]=(((x4152*x4156))+(((-1.0)*x4160*x4162))+(((-1.0)*r22*x4161)));
evalcond[1]=(cj0+(((-1.0)*r12*x4161))+(((-1.0)*x4155*x4162))+((r11*x4163)));
evalcond[2]=(((r01*x4163))+(((-1.0)*r02*x4161))+(((-1.0)*x4154*x4162))+(((-1.0)*x4158)));
evalcond[3]=(((x4153*x4156))+(((-1.0)*x4160*x4161))+((r22*x4152))+((sj1*sj2))+(((-1.0)*cj1*x4157)));
evalcond[4]=(((r01*x4164))+((r02*x4152))+(((-1.0)*cj0*sj1*x4157))+(((-1.0)*x4154*x4161))+(((-1.0)*cj0*x4159)));
evalcond[5]=(((r12*x4152))+(((-1.0)*x4155*x4161))+(((-1.0)*sj0*sj1*x4157))+((r11*x4164))+(((-1.0)*x4158*x4159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4165=((1.0)*cj5);
CheckValue<IkReal> x4166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4165)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4166.valid){
continue;
}
CheckValue<IkReal> x4167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4165)))),-1);
if(!x4167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4166.value)+(((1.5707963267949)*(x4167.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4168=IKsin(j4);
IkReal x4169=IKcos(j4);
IkReal x4170=(cj5*r00);
IkReal x4171=(cj5*r10);
IkReal x4172=(r21*sj5);
IkReal x4173=((1.0)*cj2);
IkReal x4174=((1.0)*sj0);
IkReal x4175=(cj1*sj2);
IkReal x4176=(cj5*r20);
IkReal x4177=((1.0)*x4169);
IkReal x4178=((1.0)*x4168);
IkReal x4179=(sj5*x4168);
IkReal x4180=(sj5*x4169);
evalcond[0]=((((-1.0)*x4176*x4178))+(((-1.0)*r22*x4177))+((x4168*x4172)));
evalcond[1]=(((r11*x4179))+(((-1.0)*x4171*x4178))+cj0+(((-1.0)*r12*x4177)));
evalcond[2]=((((-1.0)*x4174))+(((-1.0)*x4170*x4178))+((r01*x4179))+(((-1.0)*r02*x4177)));
evalcond[3]=(((r22*x4168))+(((-1.0)*cj1*x4173))+((x4169*x4172))+(((-1.0)*x4176*x4177))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x4170*x4177))+(((-1.0)*cj0*x4175))+((r01*x4180))+((r02*x4168))+(((-1.0)*cj0*sj1*x4173)));
evalcond[5]=((((-1.0)*x4171*x4177))+((r11*x4180))+(((-1.0)*x4174*x4175))+(((-1.0)*sj0*sj1*x4173))+((r12*x4168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4181=r21*r21;
IkReal x4182=cj5*cj5;
IkReal x4183=(sj1*sj2);
IkReal x4184=(r21*sj5);
IkReal x4185=(cj1*cj2);
IkReal x4186=(cj5*r20);
CheckValue<IkReal> x4187 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4185))+((r22*x4183)))),IkReal((((x4183*x4184))+((x4185*x4186))+(((-1.0)*x4183*x4186))+(((-1.0)*x4184*x4185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4187.valid){
continue;
}
CheckValue<IkReal> x4188=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4181))+(((-1.0)*x4182*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x4184*x4186))+((x4181*x4182)))),-1);
if(!x4188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4187.value)+(((1.5707963267949)*(x4188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4189=IKsin(j4);
IkReal x4190=IKcos(j4);
IkReal x4191=(r21*sj5);
IkReal x4192=(cj5*r20);
IkReal x4193=((1.0)*x4190);
evalcond[0]=(((x4189*x4191))+(((-1.0)*r22*x4193))+(((-1.0)*x4189*x4192)));
evalcond[1]=(((x4190*x4191))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4189))+(((-1.0)*x4192*x4193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4194=(cj5*sj4);
IkReal x4195=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4194))+((r01*x4195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x4195))+((r10*x4194))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4194))+((r01*x4195))))+IKsqr(((((-1.0)*r11*x4195))+((r10*x4194))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4194))+((r01*x4195))), ((((-1.0)*r11*x4195))+((r10*x4194))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4196=IKcos(j0);
IkReal x4197=IKsin(j0);
IkReal x4198=(cj5*r01);
IkReal x4199=(r11*sj5);
IkReal x4200=((1.0)*sj5);
IkReal x4201=((1.0)*cj5);
IkReal x4202=((0.1157)*sj5);
IkReal x4203=((1.0)*cj2);
IkReal x4204=((0.5723)*sj2);
IkReal x4205=((1.0)*cj4);
IkReal x4206=(r01*sj5);
IkReal x4207=((0.5723)*cj2);
IkReal x4208=((1.0)*cj1*sj2);
IkReal x4209=(cj4*x4201);
IkReal x4210=(sj1*x4196);
IkReal x4211=(cj1*x4197);
IkReal x4212=(cj1*x4196);
IkReal x4213=(sj1*x4197);
evalcond[0]=((((-1.0)*r12*x4205))+(((-1.0)*r10*sj4*x4201))+x4196+((sj4*x4199)));
evalcond[1]=((((-1.0)*r02*x4205))+(((-1.0)*x4197))+(((-1.0)*r00*sj4*x4201))+((sj4*x4206)));
evalcond[2]=((((-1.0)*r00*x4200))+(((-1.0)*x4198))+((sj2*x4210))+(((-1.0)*x4203*x4212)));
evalcond[3]=((((-1.0)*r10*x4200))+(((-1.0)*r11*x4201))+((sj2*x4213))+(((-1.0)*x4203*x4211)));
evalcond[4]=(((cj4*x4206))+(((-1.0)*r00*x4209))+((r02*sj4))+(((-1.0)*x4196*x4208))+(((-1.0)*x4203*x4210)));
evalcond[5]=((((-1.0)*r10*x4209))+(((-1.0)*x4197*x4208))+((r12*sj4))+((cj4*x4199))+(((-1.0)*x4203*x4213)));
evalcond[6]=((((-0.163941)*x4197))+(((-1.0)*x4204*x4210))+(((-1.0)*r00*x4202))+(((0.612)*x4212))+(((-1.0)*px))+((x4207*x4212))+(((-0.1157)*x4198)));
evalcond[7]=((((-1.0)*r10*x4202))+(((-1.0)*x4204*x4213))+(((0.163941)*x4196))+(((0.612)*x4211))+(((-1.0)*py))+((x4207*x4211))+(((-0.1157)*cj5*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4214 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4214.valid){
continue;
}
CheckValue<IkReal> x4215=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4215.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4214.value)+(((1.5707963267949)*(x4215.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4216=IKcos(j0);
IkReal x4217=IKsin(j0);
IkReal x4218=(cj5*r01);
IkReal x4219=(sj1*sj2);
IkReal x4220=(cj5*r11);
IkReal x4221=(r10*sj5);
IkReal x4222=(r00*sj5);
IkReal x4223=(cj1*cj2);
IkReal x4224=((0.5723)*x4217);
IkReal x4225=(cj1*x4217);
IkReal x4226=((0.5723)*x4216);
evalcond[0]=((((-1.0)*x4222))+(((-1.0)*x4216*x4223))+((x4216*x4219))+(((-1.0)*x4218)));
evalcond[1]=((((-1.0)*x4221))+(((-1.0)*x4220))+((x4217*x4219))+(((-1.0)*x4217*x4223)));
evalcond[2]=((((-0.1157)*x4222))+(((0.612)*cj1*x4216))+(((-0.1157)*x4218))+(((-1.0)*px))+((x4223*x4226))+(((-1.0)*x4219*x4226))+(((-0.163941)*x4217)));
evalcond[3]=((((-0.1157)*x4221))+(((-0.1157)*x4220))+(((0.163941)*x4216))+(((0.612)*x4225))+(((-1.0)*py))+((x4223*x4224))+(((-1.0)*x4219*x4224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4227=((1.0)*cj5);
IkReal x4228=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4227)));
j4eval[0]=x4228;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4227))))));
j4eval[2]=IKsign(x4228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4229=((1.0)*cj5);
IkReal x4230=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4229)));
j4eval[0]=x4230;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4229))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4231=((1.0)*sj0);
IkReal x4232=((1.0)*cj0);
IkReal x4233=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4233;
j4eval[1]=((IKabs(((((-1.0)*r12*x4231))+(((-1.0)*r02*x4232)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4231))+(((-1.0)*r01*sj5*x4232))))));
j4eval[2]=IKsign(x4233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4234=((-1.0)*r20);
IkReal x4236 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4236)==0){
continue;
}
IkReal x4235=pow(x4236,-0.5);
CheckValue<IkReal> x4237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4234),IKFAST_ATAN2_MAGTHRESH);
if(!x4237.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4237.value));
IkReal gconst97=(r21*x4235);
IkReal gconst98=(x4234*x4235);
CheckValue<IkReal> x4238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4238.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4238.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4239=((-1.0)*r20);
IkReal x4240=x4235;
CheckValue<IkReal> x4242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4239),IKFAST_ATAN2_MAGTHRESH);
if(!x4242.valid){
continue;
}
IkReal x4241=((-1.0)*(x4242.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4241;
IkReal gconst96=x4241;
IkReal gconst97=(r21*x4240);
IkReal gconst98=(x4239*x4240);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4243=((-1.0)*r20);
IkReal x4244=x4235;
CheckValue<IkReal> x4246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4243),IKFAST_ATAN2_MAGTHRESH);
if(!x4246.valid){
continue;
}
IkReal x4245=((-1.0)*(x4246.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4245;
IkReal gconst96=x4245;
IkReal gconst97=(r21*x4244);
IkReal gconst98=(x4243*x4244);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4247=((-1.0)*r20);
IkReal x4248=x4235;
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4247),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
IkReal x4249=((-1.0)*(x4250.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4249;
IkReal gconst96=x4249;
IkReal gconst97=(r21*x4248);
IkReal gconst98=(x4247*x4248);
IkReal x4251=((1.0)*(r22*r22));
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4251))),-1);
if(!x4255.valid){
continue;
}
IkReal x4252=x4255.value;
IkReal x4253=((1.0)*x4252);
IkReal x4254=((((-1.0)*x4253*(r21*r21*r21*r21)))+(((-1.0)*x4251))+(((-1.0)*x4253*(r20*r20*r20*r20)))+(((-2.0)*x4252*(r20*r20)*(r21*r21))));
j4eval[0]=x4254;
j4eval[1]=IKsign(x4254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4256=(cj1*cj2);
IkReal x4257=(gconst98*r20);
IkReal x4258=(sj1*sj2);
IkReal x4259=(gconst97*r21);
CheckValue<IkReal> x4260=IKPowWithIntegerCheck(IKsign(((((2.0)*x4257*x4259))+(((-1.0)*(x4257*x4257)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4259*x4259))))),-1);
if(!x4260.valid){
continue;
}
CheckValue<IkReal> x4261 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4256))+((r22*x4258)))),IkReal((((x4258*x4259))+((x4256*x4257))+(((-1.0)*x4256*x4259))+(((-1.0)*x4257*x4258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4260.value)))+(x4261.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4262=IKsin(j4);
IkReal x4263=IKcos(j4);
IkReal x4264=(gconst98*r10);
IkReal x4265=(gconst97*r21);
IkReal x4266=(gconst98*r20);
IkReal x4267=((1.0)*cj2);
IkReal x4268=((1.0)*sj0);
IkReal x4269=(gconst98*r00);
IkReal x4270=(cj1*sj2);
IkReal x4271=((1.0)*x4263);
IkReal x4272=((1.0)*x4262);
IkReal x4273=(gconst97*x4262);
IkReal x4274=(gconst97*x4263);
evalcond[0]=((((-1.0)*r22*x4271))+((x4262*x4265))+(((-1.0)*x4266*x4272)));
evalcond[1]=((((-1.0)*r12*x4271))+(((-1.0)*x4264*x4272))+cj0+((r11*x4273)));
evalcond[2]=((((-1.0)*r02*x4271))+(((-1.0)*x4269*x4272))+(((-1.0)*x4268))+((r01*x4273)));
evalcond[3]=(((sj1*sj2))+((x4263*x4265))+(((-1.0)*cj1*x4267))+((r22*x4262))+(((-1.0)*x4266*x4271)));
evalcond[4]=(((r02*x4262))+(((-1.0)*cj0*x4270))+(((-1.0)*x4269*x4271))+(((-1.0)*cj0*sj1*x4267))+((r01*x4274)));
evalcond[5]=((((-1.0)*x4264*x4271))+((r11*x4274))+((r12*x4262))+(((-1.0)*sj0*sj1*x4267))+(((-1.0)*x4268*x4270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4275=((1.0)*gconst98);
CheckValue<IkReal> x4276 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4276.valid){
continue;
}
CheckValue<IkReal> x4277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4275))+(((-1.0)*gconst97*r10)))),-1);
if(!x4277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4276.value)+(((1.5707963267949)*(x4277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4278=IKsin(j4);
IkReal x4279=IKcos(j4);
IkReal x4280=(gconst98*r10);
IkReal x4281=(gconst97*r21);
IkReal x4282=(gconst98*r20);
IkReal x4283=((1.0)*cj2);
IkReal x4284=((1.0)*sj0);
IkReal x4285=(gconst98*r00);
IkReal x4286=(cj1*sj2);
IkReal x4287=((1.0)*x4279);
IkReal x4288=((1.0)*x4278);
IkReal x4289=(gconst97*x4278);
IkReal x4290=(gconst97*x4279);
evalcond[0]=((((-1.0)*x4282*x4288))+((x4278*x4281))+(((-1.0)*r22*x4287)));
evalcond[1]=(cj0+((r11*x4289))+(((-1.0)*x4280*x4288))+(((-1.0)*r12*x4287)));
evalcond[2]=((((-1.0)*x4284))+(((-1.0)*r02*x4287))+(((-1.0)*x4285*x4288))+((r01*x4289)));
evalcond[3]=((((-1.0)*x4282*x4287))+((x4279*x4281))+((sj1*sj2))+(((-1.0)*cj1*x4283))+((r22*x4278)));
evalcond[4]=(((r02*x4278))+(((-1.0)*cj0*x4286))+((r01*x4290))+(((-1.0)*x4285*x4287))+(((-1.0)*cj0*sj1*x4283)));
evalcond[5]=((((-1.0)*x4280*x4287))+((r12*x4278))+(((-1.0)*sj0*sj1*x4283))+(((-1.0)*x4284*x4286))+((r11*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4291=((1.0)*gconst98);
CheckValue<IkReal> x4292=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4291))+(((-1.0)*gconst97*r00)))),-1);
if(!x4292.valid){
continue;
}
CheckValue<IkReal> x4293 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4291))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4292.value)))+(x4293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4294=IKsin(j4);
IkReal x4295=IKcos(j4);
IkReal x4296=(gconst98*r10);
IkReal x4297=(gconst97*r21);
IkReal x4298=(gconst98*r20);
IkReal x4299=((1.0)*cj2);
IkReal x4300=((1.0)*sj0);
IkReal x4301=(gconst98*r00);
IkReal x4302=(cj1*sj2);
IkReal x4303=((1.0)*x4295);
IkReal x4304=((1.0)*x4294);
IkReal x4305=(gconst97*x4294);
IkReal x4306=(gconst97*x4295);
evalcond[0]=((((-1.0)*r22*x4303))+(((-1.0)*x4298*x4304))+((x4294*x4297)));
evalcond[1]=((((-1.0)*r12*x4303))+(((-1.0)*x4296*x4304))+((r11*x4305))+cj0);
evalcond[2]=(((r01*x4305))+(((-1.0)*x4301*x4304))+(((-1.0)*r02*x4303))+(((-1.0)*x4300)));
evalcond[3]=(((sj1*sj2))+((x4295*x4297))+((r22*x4294))+(((-1.0)*x4298*x4303))+(((-1.0)*cj1*x4299)));
evalcond[4]=((((-1.0)*cj0*sj1*x4299))+(((-1.0)*cj0*x4302))+((r01*x4306))+(((-1.0)*x4301*x4303))+((r02*x4294)));
evalcond[5]=((((-1.0)*x4296*x4303))+((r11*x4306))+((r12*x4294))+(((-1.0)*x4300*x4302))+(((-1.0)*sj0*sj1*x4299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4307=((-1.0)*r21);
IkReal x4309 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4309)==0){
continue;
}
IkReal x4308=pow(x4309,-0.5);
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal(x4307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4310.value))));
IkReal gconst100=(x4307*x4308);
IkReal gconst101=((1.0)*r20*x4308);
CheckValue<IkReal> x4311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4311.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4311.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4312=((-1.0)*r21);
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal(x4312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
IkReal x4313=((1.0)*(x4315.value));
IkReal x4314=x4308;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4313)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4313)));
IkReal gconst100=(x4312*x4314);
IkReal gconst101=((1.0)*r20*x4314);
IkReal x4316=r22*r22;
IkReal x4317=((1.0)*x4316);
CheckValue<IkReal> x4321=IKPowWithIntegerCheck(((-1.0)+x4316),-1);
if(!x4321.valid){
continue;
}
IkReal x4318=x4321.value;
if((((1.0)+(((-1.0)*x4317)))) < -0.00001)
continue;
IkReal x4319=IKsqrt(((1.0)+(((-1.0)*x4317))));
IkReal x4320=(cj0*x4318*x4319);
j4eval[0]=((IKabs(((((-1.0)*x4317*x4320))+x4320)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4322=((-1.0)*r21);
CheckValue<IkReal> x4325 = IKatan2WithCheck(IkReal(x4322),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4325.valid){
continue;
}
IkReal x4323=((1.0)*(x4325.value));
IkReal x4324=x4308;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4323)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4323)));
IkReal gconst100=(x4322*x4324);
IkReal gconst101=((1.0)*r20*x4324);
IkReal x4326=r22*r22;
IkReal x4327=((1.0)*x4326);
CheckValue<IkReal> x4331=IKPowWithIntegerCheck(((-1.0)+x4326),-1);
if(!x4331.valid){
continue;
}
IkReal x4328=x4331.value;
if((((1.0)+(((-1.0)*x4327)))) < -0.00001)
continue;
IkReal x4329=IKsqrt(((1.0)+(((-1.0)*x4327))));
IkReal x4330=(sj0*x4328*x4329);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4327*x4330))+x4330))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4332=((-1.0)*r21);
CheckValue<IkReal> x4335 = IKatan2WithCheck(IkReal(x4332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4335.valid){
continue;
}
IkReal x4333=((1.0)*(x4335.value));
IkReal x4334=x4308;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4333)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4333)));
IkReal gconst100=(x4332*x4334);
IkReal gconst101=((1.0)*r20*x4334);
IkReal x4336=r22*r22;
IkReal x4337=(r12*sj0);
IkReal x4338=(cj0*r02);
CheckValue<IkReal> x4342=IKPowWithIntegerCheck(((-1.0)+x4336),-1);
if(!x4342.valid){
continue;
}
IkReal x4339=x4342.value;
if((((1.0)+(((-1.0)*x4336)))) < -0.00001)
continue;
IkReal x4340=IKsqrt(((1.0)+(((-1.0)*x4336))));
IkReal x4341=(r22*x4339*x4340);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4338*x4341))+((x4337*x4341)))))+(IKabs(((((-1.0)*x4337))+(((-1.0)*x4338))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4343=((1.0)*sj0);
IkReal x4344=((1.0)*gconst100);
CheckValue<IkReal> x4345=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4344))+(((-1.0)*gconst101*r21)))),-1);
if(!x4345.valid){
continue;
}
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4343))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4344))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4345.value)))+(x4346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4347=IKsin(j4);
IkReal x4348=IKcos(j4);
IkReal x4349=(gconst101*r20);
IkReal x4350=(gconst101*r10);
IkReal x4351=((1.0)*cj2);
IkReal x4352=(gconst101*r00);
IkReal x4353=((1.0)*sj0);
IkReal x4354=(cj1*sj2);
IkReal x4355=((1.0)*x4348);
IkReal x4356=((1.0)*x4347);
IkReal x4357=(gconst100*x4347);
IkReal x4358=(gconst100*x4348);
evalcond[0]=((((-1.0)*x4349*x4356))+((r21*x4357))+(((-1.0)*r22*x4355)));
evalcond[1]=(cj0+(((-1.0)*r12*x4355))+(((-1.0)*x4350*x4356))+((r11*x4357)));
evalcond[2]=((((-1.0)*r02*x4355))+(((-1.0)*x4353))+(((-1.0)*x4352*x4356))+((r01*x4357)));
evalcond[3]=((((-1.0)*x4349*x4355))+((sj1*sj2))+((r22*x4347))+((r21*x4358))+(((-1.0)*cj1*x4351)));
evalcond[4]=(((r02*x4347))+(((-1.0)*x4352*x4355))+(((-1.0)*cj0*sj1*x4351))+(((-1.0)*cj0*x4354))+((r01*x4358)));
evalcond[5]=((((-1.0)*x4353*x4354))+(((-1.0)*sj0*sj1*x4351))+(((-1.0)*x4350*x4355))+((r12*x4347))+((r11*x4358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4359=((1.0)*gconst101);
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4359)))),-1);
if(!x4360.valid){
continue;
}
CheckValue<IkReal> x4361 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4359))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4360.value)))+(x4361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4362=IKsin(j4);
IkReal x4363=IKcos(j4);
IkReal x4364=(gconst101*r20);
IkReal x4365=(gconst101*r10);
IkReal x4366=((1.0)*cj2);
IkReal x4367=(gconst101*r00);
IkReal x4368=((1.0)*sj0);
IkReal x4369=(cj1*sj2);
IkReal x4370=((1.0)*x4363);
IkReal x4371=((1.0)*x4362);
IkReal x4372=(gconst100*x4362);
IkReal x4373=(gconst100*x4363);
evalcond[0]=((((-1.0)*r22*x4370))+(((-1.0)*x4364*x4371))+((r21*x4372)));
evalcond[1]=(cj0+((r11*x4372))+(((-1.0)*x4365*x4371))+(((-1.0)*r12*x4370)));
evalcond[2]=(((r01*x4372))+(((-1.0)*x4368))+(((-1.0)*r02*x4370))+(((-1.0)*x4367*x4371)));
evalcond[3]=((((-1.0)*cj1*x4366))+((sj1*sj2))+(((-1.0)*x4364*x4370))+((r22*x4362))+((r21*x4373)));
evalcond[4]=(((r01*x4373))+(((-1.0)*cj0*x4369))+(((-1.0)*cj0*sj1*x4366))+(((-1.0)*x4367*x4370))+((r02*x4362)));
evalcond[5]=(((r11*x4373))+((r12*x4362))+(((-1.0)*x4365*x4370))+(((-1.0)*sj0*sj1*x4366))+(((-1.0)*x4368*x4369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4374=((1.0)*gconst101);
CheckValue<IkReal> x4375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4374)))),-1);
if(!x4375.valid){
continue;
}
CheckValue<IkReal> x4376 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4375.value)))+(x4376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4377=IKsin(j4);
IkReal x4378=IKcos(j4);
IkReal x4379=(gconst101*r20);
IkReal x4380=(gconst101*r10);
IkReal x4381=((1.0)*cj2);
IkReal x4382=(gconst101*r00);
IkReal x4383=((1.0)*sj0);
IkReal x4384=(cj1*sj2);
IkReal x4385=((1.0)*x4378);
IkReal x4386=((1.0)*x4377);
IkReal x4387=(gconst100*x4377);
IkReal x4388=(gconst100*x4378);
evalcond[0]=((((-1.0)*x4379*x4386))+(((-1.0)*r22*x4385))+((r21*x4387)));
evalcond[1]=((((-1.0)*x4380*x4386))+(((-1.0)*r12*x4385))+cj0+((r11*x4387)));
evalcond[2]=((((-1.0)*r02*x4385))+(((-1.0)*x4382*x4386))+(((-1.0)*x4383))+((r01*x4387)));
evalcond[3]=(((r22*x4377))+(((-1.0)*x4379*x4385))+((sj1*sj2))+((r21*x4388))+(((-1.0)*cj1*x4381)));
evalcond[4]=(((r02*x4377))+(((-1.0)*x4382*x4385))+(((-1.0)*cj0*sj1*x4381))+(((-1.0)*cj0*x4384))+((r01*x4388)));
evalcond[5]=((((-1.0)*x4380*x4385))+((r12*x4377))+((r11*x4388))+(((-1.0)*x4383*x4384))+(((-1.0)*sj0*sj1*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4389=((-1.0)*r10);
IkReal x4391 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4391)==0){
continue;
}
IkReal x4390=pow(x4391,-0.5);
CheckValue<IkReal> x4392 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4389),IKFAST_ATAN2_MAGTHRESH);
if(!x4392.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4392.value));
IkReal gconst103=(r11*x4390);
IkReal gconst104=(x4389*x4390);
CheckValue<IkReal> x4393 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4393.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4393.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4394=((-1.0)*r10);
IkReal x4395=x4390;
CheckValue<IkReal> x4397 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4394),IKFAST_ATAN2_MAGTHRESH);
if(!x4397.valid){
continue;
}
IkReal x4396=((-1.0)*(x4397.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4396;
IkReal gconst102=x4396;
IkReal gconst103=(r11*x4395);
IkReal gconst104=(x4394*x4395);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4398=((1.0)*sj0);
IkReal x4399=((1.0)*gconst103);
CheckValue<IkReal> x4400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4399)))),-1);
if(!x4400.valid){
continue;
}
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4398))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4398))+((gconst104*r10*sj0))+(((-1.0)*cj0*r01*x4399))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4400.value)))+(x4401.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4402=IKsin(j4);
IkReal x4403=IKcos(j4);
IkReal x4404=(gconst103*r11);
IkReal x4405=((1.0)*cj2);
IkReal x4406=((1.0)*sj0);
IkReal x4407=(cj1*sj2);
IkReal x4408=((1.0)*x4403);
IkReal x4409=(gconst103*x4403);
IkReal x4410=(gconst103*x4402);
IkReal x4411=((1.0)*gconst104*x4402);
evalcond[0]=(((r21*x4410))+(((-1.0)*r20*x4411))+(((-1.0)*r22*x4408)));
evalcond[1]=(cj0+(((-1.0)*r10*x4411))+(((-1.0)*r12*x4408))+((x4402*x4404)));
evalcond[2]=(((r01*x4410))+(((-1.0)*r00*x4411))+(((-1.0)*r02*x4408))+(((-1.0)*x4406)));
evalcond[3]=(((r22*x4402))+((r21*x4409))+((sj1*sj2))+(((-1.0)*cj1*x4405))+(((-1.0)*gconst104*r20*x4408)));
evalcond[4]=((((-1.0)*cj0*x4407))+((r01*x4409))+(((-1.0)*gconst104*r00*x4408))+((r02*x4402))+(((-1.0)*cj0*sj1*x4405)));
evalcond[5]=((((-1.0)*gconst104*r10*x4408))+((x4403*x4404))+((r12*x4402))+(((-1.0)*x4406*x4407))+(((-1.0)*sj0*sj1*x4405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4412=((1.0)*gconst104);
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4412)))),-1);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4412))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4413.value)))+(x4414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=(gconst103*r11);
IkReal x4418=((1.0)*cj2);
IkReal x4419=((1.0)*sj0);
IkReal x4420=(cj1*sj2);
IkReal x4421=((1.0)*x4416);
IkReal x4422=(gconst103*x4416);
IkReal x4423=(gconst103*x4415);
IkReal x4424=((1.0)*gconst104*x4415);
evalcond[0]=((((-1.0)*r22*x4421))+(((-1.0)*r20*x4424))+((r21*x4423)));
evalcond[1]=(cj0+((x4415*x4417))+(((-1.0)*r12*x4421))+(((-1.0)*r10*x4424)));
evalcond[2]=((((-1.0)*x4419))+((r01*x4423))+(((-1.0)*r02*x4421))+(((-1.0)*r00*x4424)));
evalcond[3]=(((r22*x4415))+(((-1.0)*gconst104*r20*x4421))+((sj1*sj2))+((r21*x4422))+(((-1.0)*cj1*x4418)));
evalcond[4]=((((-1.0)*cj0*sj1*x4418))+(((-1.0)*cj0*x4420))+((r01*x4422))+((r02*x4415))+(((-1.0)*gconst104*r00*x4421)));
evalcond[5]=(((r12*x4415))+(((-1.0)*gconst104*r10*x4421))+(((-1.0)*sj0*sj1*x4418))+((x4416*x4417))+(((-1.0)*x4419*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4425=((-1.0)*r11);
IkReal x4427 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4427)==0){
continue;
}
IkReal x4426=pow(x4427,-0.5);
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(x4425),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4428.value))));
IkReal gconst106=(x4425*x4426);
IkReal gconst107=((1.0)*r10*x4426);
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4429.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4430=((-1.0)*r11);
CheckValue<IkReal> x4433 = IKatan2WithCheck(IkReal(x4430),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4433.valid){
continue;
}
IkReal x4431=((1.0)*(x4433.value));
IkReal x4432=x4426;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4431)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4431)));
IkReal gconst106=(x4430*x4432);
IkReal gconst107=((1.0)*r10*x4432);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4434=((-1.0)*r11);
CheckValue<IkReal> x4437 = IKatan2WithCheck(IkReal(x4434),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4437.valid){
continue;
}
IkReal x4435=((1.0)*(x4437.value));
IkReal x4436=x4426;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4435)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4435)));
IkReal gconst106=(x4434*x4436);
IkReal gconst107=((1.0)*r10*x4436);
IkReal x4438=r12*r12;
IkReal x4439=((1.0)*sj0);
IkReal x4440=(cj0*r02);
IkReal x4441=x4426;
j4eval[0]=((IKabs((((sj0*x4438*x4441))+(((-1.0)*x4439*x4441))+((r12*x4440*x4441)))))+(IKabs(((((-1.0)*x4440))+(((-1.0)*r12*x4439))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4442=((-1.0)*r11);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(x4442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal x4443=((1.0)*(x4445.value));
IkReal x4444=x4426;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4443)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4443)));
IkReal gconst106=(x4442*x4444);
IkReal gconst107=((1.0)*r10*x4444);
IkReal x4446=r12*r12;
IkReal x4447=((1.0)+(((-1.0)*x4446)));
IkReal x4448=(r22*sj1*sj2);
IkReal x4449=(cj1*cj2*r22);
CheckValue<IkReal> x4456=IKPowWithIntegerCheck(x4447,-1);
if(!x4456.valid){
continue;
}
IkReal x4450=x4456.value;
CheckValue<IkReal> x4457=IKPowWithIntegerCheck(((-1.0)+x4446),-1);
if(!x4457.valid){
continue;
}
IkReal x4451=x4457.value;
IkReal x4452=((1.0)*x4450);
if((x4447) < -0.00001)
continue;
IkReal x4453=IKsqrt(x4447);
IkReal x4454=(r12*x4451*x4453);
IkReal x4455=((((-2.0)*r10*r11*r20*r21*x4450))+(((-1.0)*x4452*(r11*r11)*(r21*r21)))+(((-1.0)*x4452*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4455;
j4eval[1]=((IKabs((x4448+(((-1.0)*x4449)))))+(IKabs(((((-1.0)*x4448*x4454))+((x4449*x4454))))));
j4eval[2]=IKsign(x4455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4458=(sj1*sj2);
IkReal x4459=(gconst106*r21);
IkReal x4460=(gconst107*r20);
IkReal x4461=(cj1*cj2);
CheckValue<IkReal> x4462=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4459*x4459)))+(((-1.0)*(x4460*x4460)))+(((2.0)*x4459*x4460))+(((-1.0)*(r22*r22))))),-1);
if(!x4462.valid){
continue;
}
CheckValue<IkReal> x4463 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4461))+((r22*x4458)))),IkReal(((((-1.0)*x4459*x4461))+((x4458*x4459))+(((-1.0)*x4458*x4460))+((x4460*x4461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4462.value)))+(x4463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4464=IKsin(j4);
IkReal x4465=IKcos(j4);
IkReal x4466=(gconst107*r10);
IkReal x4467=(gconst107*r00);
IkReal x4468=((1.0)*cj2);
IkReal x4469=(gconst107*r20);
IkReal x4470=((1.0)*sj0);
IkReal x4471=(cj1*sj2);
IkReal x4472=((1.0)*x4465);
IkReal x4473=(gconst106*x4465);
IkReal x4474=(gconst106*x4464);
IkReal x4475=((1.0)*x4464);
evalcond[0]=(((r21*x4474))+(((-1.0)*x4469*x4475))+(((-1.0)*r22*x4472)));
evalcond[1]=((((-1.0)*r12*x4472))+cj0+(((-1.0)*x4466*x4475))+((r11*x4474)));
evalcond[2]=((((-1.0)*x4470))+(((-1.0)*x4467*x4475))+((r01*x4474))+(((-1.0)*r02*x4472)));
evalcond[3]=(((r22*x4464))+((r21*x4473))+((sj1*sj2))+(((-1.0)*x4469*x4472))+(((-1.0)*cj1*x4468)));
evalcond[4]=((((-1.0)*cj0*x4471))+(((-1.0)*cj0*sj1*x4468))+(((-1.0)*x4467*x4472))+((r01*x4473))+((r02*x4464)));
evalcond[5]=(((r12*x4464))+(((-1.0)*sj0*sj1*x4468))+(((-1.0)*x4470*x4471))+(((-1.0)*x4466*x4472))+((r11*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4476=((1.0)*sj0);
IkReal x4477=((1.0)*gconst106);
CheckValue<IkReal> x4478 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4476))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4477))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x4476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4478.valid){
continue;
}
CheckValue<IkReal> x4479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4477))+(((-1.0)*gconst107*r21)))),-1);
if(!x4479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4478.value)+(((1.5707963267949)*(x4479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4480=IKsin(j4);
IkReal x4481=IKcos(j4);
IkReal x4482=(gconst107*r10);
IkReal x4483=(gconst107*r00);
IkReal x4484=((1.0)*cj2);
IkReal x4485=(gconst107*r20);
IkReal x4486=((1.0)*sj0);
IkReal x4487=(cj1*sj2);
IkReal x4488=((1.0)*x4481);
IkReal x4489=(gconst106*x4481);
IkReal x4490=(gconst106*x4480);
IkReal x4491=((1.0)*x4480);
evalcond[0]=(((r21*x4490))+(((-1.0)*x4485*x4491))+(((-1.0)*r22*x4488)));
evalcond[1]=((((-1.0)*r12*x4488))+cj0+((r11*x4490))+(((-1.0)*x4482*x4491)));
evalcond[2]=((((-1.0)*x4483*x4491))+(((-1.0)*r02*x4488))+((r01*x4490))+(((-1.0)*x4486)));
evalcond[3]=((((-1.0)*cj1*x4484))+((r21*x4489))+((sj1*sj2))+(((-1.0)*x4485*x4488))+((r22*x4480)));
evalcond[4]=((((-1.0)*cj0*x4487))+(((-1.0)*cj0*sj1*x4484))+((r02*x4480))+((r01*x4489))+(((-1.0)*x4483*x4488)));
evalcond[5]=(((r11*x4489))+(((-1.0)*x4486*x4487))+(((-1.0)*sj0*sj1*x4484))+((r12*x4480))+(((-1.0)*x4482*x4488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4492=((1.0)*gconst107);
CheckValue<IkReal> x4493=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4492)))),-1);
if(!x4493.valid){
continue;
}
CheckValue<IkReal> x4494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4492))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4493.value)))+(x4494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4495=IKsin(j4);
IkReal x4496=IKcos(j4);
IkReal x4497=(gconst107*r10);
IkReal x4498=(gconst107*r00);
IkReal x4499=((1.0)*cj2);
IkReal x4500=(gconst107*r20);
IkReal x4501=((1.0)*sj0);
IkReal x4502=(cj1*sj2);
IkReal x4503=((1.0)*x4496);
IkReal x4504=(gconst106*x4496);
IkReal x4505=(gconst106*x4495);
IkReal x4506=((1.0)*x4495);
evalcond[0]=(((r21*x4505))+(((-1.0)*x4500*x4506))+(((-1.0)*r22*x4503)));
evalcond[1]=(cj0+((r11*x4505))+(((-1.0)*x4497*x4506))+(((-1.0)*r12*x4503)));
evalcond[2]=((((-1.0)*x4501))+(((-1.0)*r02*x4503))+(((-1.0)*x4498*x4506))+((r01*x4505)));
evalcond[3]=((((-1.0)*cj1*x4499))+((r21*x4504))+((sj1*sj2))+((r22*x4495))+(((-1.0)*x4500*x4503)));
evalcond[4]=(((r02*x4495))+(((-1.0)*x4498*x4503))+(((-1.0)*cj0*x4502))+((r01*x4504))+(((-1.0)*cj0*sj1*x4499)));
evalcond[5]=(((r12*x4495))+((r11*x4504))+(((-1.0)*x4497*x4503))+(((-1.0)*sj0*sj1*x4499))+(((-1.0)*x4501*x4502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4507=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4507;
j4eval[1]=IKsign(x4507);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4508=((1.0)*cj5);
IkReal x4509=((((-1.0)*r01*x4508))+(((-1.0)*r00*sj5)));
j4eval[0]=x4509;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4508)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4510=(sj1*sj2);
IkReal x4511=(cj5*r10);
IkReal x4512=(r11*sj5);
IkReal x4513=(cj1*cj2);
IkReal x4514=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4514;
j4eval[1]=((IKabs(((((-1.0)*x4512*x4513))+((x4510*x4512))+((x4511*x4513))+(((-1.0)*x4510*x4511)))))+(IKabs((((r12*x4513))+(((-1.0)*r12*x4510))))));
j4eval[2]=IKsign(x4514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4515=(sj1*sj2);
IkReal x4516=(cj5*r10);
IkReal x4517=(r11*sj5);
IkReal x4518=(cj1*cj2);
CheckValue<IkReal> x4519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4519.valid){
continue;
}
CheckValue<IkReal> x4520 = IKatan2WithCheck(IkReal((((x4516*x4518))+(((-1.0)*x4517*x4518))+((x4515*x4517))+(((-1.0)*x4515*x4516)))),IkReal((((r12*x4518))+(((-1.0)*r12*x4515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4519.value)))+(x4520.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4521=IKcos(j4);
IkReal x4522=IKsin(j4);
IkReal x4523=(cj5*r00);
IkReal x4524=(cj5*r10);
IkReal x4525=(r21*sj5);
IkReal x4526=((1.0)*cj2);
IkReal x4527=(cj5*r20);
IkReal x4528=((1.0)*x4521);
IkReal x4529=((1.0)*x4522);
IkReal x4530=(sj5*x4522);
IkReal x4531=(sj5*x4521);
evalcond[0]=(((r12*x4522))+(((-1.0)*x4524*x4528))+((r11*x4531)));
evalcond[1]=((((-1.0)*r22*x4528))+(((-1.0)*x4527*x4529))+((x4522*x4525)));
evalcond[2]=(((r01*x4530))+(((-1.0)*x4523*x4529))+(((-1.0)*r02*x4528)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4528))+(((-1.0)*x4524*x4529))+((r11*x4530)));
evalcond[4]=(((x4521*x4525))+((sj1*sj2))+(((-1.0)*cj1*x4526))+((r22*x4522))+(((-1.0)*x4527*x4528)));
evalcond[5]=(((r01*x4531))+(((-1.0)*sj1*x4526))+(((-1.0)*cj1*sj2))+((r02*x4522))+(((-1.0)*x4523*x4528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4532=((1.0)*cj5);
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
CheckValue<IkReal> x4534=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4532))+(((-1.0)*r00*sj5)))),-1);
if(!x4534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4533.value)+(((1.5707963267949)*(x4534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4535=IKcos(j4);
IkReal x4536=IKsin(j4);
IkReal x4537=(cj5*r00);
IkReal x4538=(cj5*r10);
IkReal x4539=(r21*sj5);
IkReal x4540=((1.0)*cj2);
IkReal x4541=(cj5*r20);
IkReal x4542=((1.0)*x4535);
IkReal x4543=((1.0)*x4536);
IkReal x4544=(sj5*x4536);
IkReal x4545=(sj5*x4535);
evalcond[0]=(((r12*x4536))+(((-1.0)*x4538*x4542))+((r11*x4545)));
evalcond[1]=((((-1.0)*r22*x4542))+((x4536*x4539))+(((-1.0)*x4541*x4543)));
evalcond[2]=((((-1.0)*r02*x4542))+(((-1.0)*x4537*x4543))+((r01*x4544)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4542))+(((-1.0)*x4538*x4543))+((r11*x4544)));
evalcond[4]=(((sj1*sj2))+((r22*x4536))+(((-1.0)*x4541*x4542))+(((-1.0)*cj1*x4540))+((x4535*x4539)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4537*x4542))+((r01*x4545))+((r02*x4536))+(((-1.0)*sj1*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4546=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4546.valid){
continue;
}
CheckValue<IkReal> x4547 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4546.value)))+(x4547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4548=IKcos(j4);
IkReal x4549=IKsin(j4);
IkReal x4550=(cj5*r00);
IkReal x4551=(cj5*r10);
IkReal x4552=(r21*sj5);
IkReal x4553=((1.0)*cj2);
IkReal x4554=(cj5*r20);
IkReal x4555=((1.0)*x4548);
IkReal x4556=((1.0)*x4549);
IkReal x4557=(sj5*x4549);
IkReal x4558=(sj5*x4548);
evalcond[0]=((((-1.0)*x4551*x4555))+((r11*x4558))+((r12*x4549)));
evalcond[1]=((((-1.0)*r22*x4555))+(((-1.0)*x4554*x4556))+((x4549*x4552)));
evalcond[2]=(((r01*x4557))+(((-1.0)*x4550*x4556))+(((-1.0)*r02*x4555)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4555))+(((-1.0)*x4551*x4556))+((r11*x4557)));
evalcond[4]=(((r22*x4549))+(((-1.0)*cj1*x4553))+((sj1*sj2))+(((-1.0)*x4554*x4555))+((x4548*x4552)));
evalcond[5]=(((r01*x4558))+((r02*x4549))+(((-1.0)*x4550*x4555))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4559=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4559;
j4eval[1]=IKsign(x4559);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4560=((1.0)*cj5);
IkReal x4561=((((-1.0)*r21*x4560))+(((-1.0)*r20*sj5)));
j4eval[0]=x4561;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4560))))));
j4eval[2]=IKsign(x4561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4562=cj5*cj5;
IkReal x4563=r11*r11;
IkReal x4564=(r11*sj5);
IkReal x4565=(cj5*r10);
IkReal x4566=((r12*r12)+((x4562*(r10*r10)))+(((-2.0)*x4564*x4565))+x4563+(((-1.0)*x4562*x4563)));
j4eval[0]=x4566;
j4eval[1]=IKsign(x4566);
j4eval[2]=((IKabs(r12))+(IKabs((x4564+(((-1.0)*x4565))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4567=cj5*cj5;
IkReal x4568=r11*r11;
IkReal x4569=(cj5*r10);
IkReal x4570=(r11*sj5);
CheckValue<IkReal> x4571 = IKatan2WithCheck(IkReal((x4570+(((-1.0)*x4569)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4571.valid){
continue;
}
CheckValue<IkReal> x4572=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4568+((x4567*(r10*r10)))+(((-1.0)*x4567*x4568))+(((-2.0)*x4569*x4570)))),-1);
if(!x4572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4571.value)+(((1.5707963267949)*(x4572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4573=IKcos(j4);
IkReal x4574=IKsin(j4);
IkReal x4575=(cj5*r00);
IkReal x4576=(cj5*r10);
IkReal x4577=(r21*sj5);
IkReal x4578=(cj5*r20);
IkReal x4579=((1.0)*x4573);
IkReal x4580=((1.0)*x4574);
IkReal x4581=(sj5*x4574);
IkReal x4582=(sj5*x4573);
evalcond[0]=((((-1.0)*x4576*x4579))+((r12*x4574))+((r11*x4582)));
evalcond[1]=(((x4574*x4577))+(((-1.0)*r22*x4579))+(((-1.0)*x4578*x4580)));
evalcond[2]=((((-1.0)*x4575*x4580))+(((-1.0)*r02*x4579))+((r01*x4581)));
evalcond[3]=((-1.0)+((r11*x4581))+(((-1.0)*r12*x4579))+(((-1.0)*x4576*x4580)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4575*x4579))+((r02*x4574))+((r01*x4582)));
evalcond[5]=(((r22*x4574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4573*x4577))+(((-1.0)*x4578*x4579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4583=((1.0)*cj5);
CheckValue<IkReal> x4584 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4584.valid){
continue;
}
CheckValue<IkReal> x4585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4583))+(((-1.0)*r20*sj5)))),-1);
if(!x4585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4584.value)+(((1.5707963267949)*(x4585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4586=IKcos(j4);
IkReal x4587=IKsin(j4);
IkReal x4588=(cj5*r00);
IkReal x4589=(cj5*r10);
IkReal x4590=(r21*sj5);
IkReal x4591=(cj5*r20);
IkReal x4592=((1.0)*x4586);
IkReal x4593=((1.0)*x4587);
IkReal x4594=(sj5*x4587);
IkReal x4595=(sj5*x4586);
evalcond[0]=((((-1.0)*x4589*x4592))+((r11*x4595))+((r12*x4587)));
evalcond[1]=((((-1.0)*r22*x4592))+(((-1.0)*x4591*x4593))+((x4587*x4590)));
evalcond[2]=((((-1.0)*r02*x4592))+(((-1.0)*x4588*x4593))+((r01*x4594)));
evalcond[3]=((-1.0)+(((-1.0)*x4589*x4593))+((r11*x4594))+(((-1.0)*r12*x4592)));
evalcond[4]=(((cj2*sj1))+((r02*x4587))+((cj1*sj2))+(((-1.0)*x4588*x4592))+((r01*x4595)));
evalcond[5]=(((r22*x4587))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4591*x4592))+((x4586*x4590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4596 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4596.valid){
continue;
}
CheckValue<IkReal> x4597=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4596.value)+(((1.5707963267949)*(x4597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4598=IKcos(j4);
IkReal x4599=IKsin(j4);
IkReal x4600=(cj5*r00);
IkReal x4601=(cj5*r10);
IkReal x4602=(r21*sj5);
IkReal x4603=(cj5*r20);
IkReal x4604=((1.0)*x4598);
IkReal x4605=((1.0)*x4599);
IkReal x4606=(sj5*x4599);
IkReal x4607=(sj5*x4598);
evalcond[0]=(((r11*x4607))+(((-1.0)*x4601*x4604))+((r12*x4599)));
evalcond[1]=((((-1.0)*x4603*x4605))+((x4599*x4602))+(((-1.0)*r22*x4604)));
evalcond[2]=((((-1.0)*x4600*x4605))+((r01*x4606))+(((-1.0)*r02*x4604)));
evalcond[3]=((-1.0)+((r11*x4606))+(((-1.0)*x4601*x4605))+(((-1.0)*r12*x4604)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4600*x4604))+((cj1*sj2))+((r01*x4607))+((r02*x4599)));
evalcond[5]=(((r22*x4599))+(((-1.0)*x4603*x4604))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4598*x4602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4608=((-1.0)*r00);
IkReal x4610 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4610)==0){
continue;
}
IkReal x4609=pow(x4610,-0.5);
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4608),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4611.value));
IkReal gconst109=(r01*x4609);
IkReal gconst110=(x4608*x4609);
CheckValue<IkReal> x4612 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4612.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4612.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4613=((-1.0)*r00);
IkReal x4614=x4609;
CheckValue<IkReal> x4616 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4613),IKFAST_ATAN2_MAGTHRESH);
if(!x4616.valid){
continue;
}
IkReal x4615=((-1.0)*(x4616.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4615;
IkReal gconst108=x4615;
IkReal gconst109=(r01*x4614);
IkReal gconst110=(x4613*x4614);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4617=((1.0)*sj0);
IkReal x4618=((1.0)*gconst109);
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4618))+(((-1.0)*gconst110*r21)))),-1);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4617))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4618))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4619.value)))+(x4620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKsin(j4);
IkReal x4622=IKcos(j4);
IkReal x4623=(gconst109*r21);
IkReal x4624=((1.0)*cj2);
IkReal x4625=((1.0)*sj0);
IkReal x4626=(cj1*sj2);
IkReal x4627=((1.0)*x4622);
IkReal x4628=(gconst109*x4621);
IkReal x4629=(gconst109*x4622);
IkReal x4630=((1.0)*gconst110*x4621);
evalcond[0]=((((-1.0)*r20*x4630))+(((-1.0)*r22*x4627))+((x4621*x4623)));
evalcond[1]=(cj0+((r11*x4628))+(((-1.0)*r10*x4630))+(((-1.0)*r12*x4627)));
evalcond[2]=((((-1.0)*r02*x4627))+(((-1.0)*r00*x4630))+((r01*x4628))+(((-1.0)*x4625)));
evalcond[3]=((((-1.0)*gconst110*r20*x4627))+(((-1.0)*cj1*x4624))+((sj1*sj2))+((x4622*x4623))+((r22*x4621)));
evalcond[4]=((((-1.0)*gconst110*r00*x4627))+(((-1.0)*cj0*x4626))+((r02*x4621))+((r01*x4629))+(((-1.0)*cj0*sj1*x4624)));
evalcond[5]=(((r12*x4621))+((r11*x4629))+(((-1.0)*x4625*x4626))+(((-1.0)*gconst110*r10*x4627))+(((-1.0)*sj0*sj1*x4624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4631=((1.0)*gconst110);
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4631))+(((-1.0)*gconst109*r10)))),-1);
if(!x4632.valid){
continue;
}
CheckValue<IkReal> x4633 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4631))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4632.value)))+(x4633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4634=IKsin(j4);
IkReal x4635=IKcos(j4);
IkReal x4636=(gconst109*r21);
IkReal x4637=((1.0)*cj2);
IkReal x4638=((1.0)*sj0);
IkReal x4639=(cj1*sj2);
IkReal x4640=((1.0)*x4635);
IkReal x4641=(gconst109*x4634);
IkReal x4642=(gconst109*x4635);
IkReal x4643=((1.0)*gconst110*x4634);
evalcond[0]=((((-1.0)*r20*x4643))+(((-1.0)*r22*x4640))+((x4634*x4636)));
evalcond[1]=(cj0+(((-1.0)*r10*x4643))+((r11*x4641))+(((-1.0)*r12*x4640)));
evalcond[2]=((((-1.0)*r02*x4640))+(((-1.0)*x4638))+((r01*x4641))+(((-1.0)*r00*x4643)));
evalcond[3]=((((-1.0)*cj1*x4637))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4640))+((x4635*x4636))+((r22*x4634)));
evalcond[4]=((((-1.0)*cj0*sj1*x4637))+(((-1.0)*cj0*x4639))+((r01*x4642))+((r02*x4634))+(((-1.0)*gconst110*r00*x4640)));
evalcond[5]=(((r12*x4634))+(((-1.0)*gconst110*r10*x4640))+((r11*x4642))+(((-1.0)*sj0*sj1*x4637))+(((-1.0)*x4638*x4639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4644=((-1.0)*r01);
IkReal x4646 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4646)==0){
continue;
}
IkReal x4645=pow(x4646,-0.5);
CheckValue<IkReal> x4647 = IKatan2WithCheck(IkReal(x4644),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4647.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4647.value))));
IkReal gconst112=(x4644*x4645);
IkReal gconst113=((1.0)*r00*x4645);
CheckValue<IkReal> x4648 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4648.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4648.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4649=((-1.0)*r01);
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal(x4649),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
IkReal x4650=((1.0)*(x4652.value));
IkReal x4651=x4645;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4650)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4650)));
IkReal gconst112=(x4649*x4651);
IkReal gconst113=((1.0)*r00*x4651);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4653=((-1.0)*r01);
CheckValue<IkReal> x4656 = IKatan2WithCheck(IkReal(x4653),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4656.valid){
continue;
}
IkReal x4654=((1.0)*(x4656.value));
IkReal x4655=x4645;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4654)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4654)));
IkReal gconst112=(x4653*x4655);
IkReal gconst113=((1.0)*r00*x4655);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4657=((-1.0)*r01);
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(x4657),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
IkReal x4658=((1.0)*(x4660.value));
IkReal x4659=x4645;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4658)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4658)));
IkReal gconst112=(x4657*x4659);
IkReal gconst113=((1.0)*r00*x4659);
IkReal x4661=r02*r02;
IkReal x4662=(r12*sj0);
IkReal x4663=((1.0)*cj0);
IkReal x4664=x4645;
j4eval[0]=((IKabs(((((-1.0)*x4662))+(((-1.0)*r02*x4663)))))+(IKabs(((((-1.0)*x4663*x4664))+((r02*x4662*x4664))+((cj0*x4661*x4664))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4665=((1.0)*sj0);
IkReal x4666=((1.0)*gconst112);
CheckValue<IkReal> x4667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4666))+(((-1.0)*gconst113*r21)))),-1);
if(!x4667.valid){
continue;
}
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4665)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4666))+(((-1.0)*gconst112*r11*x4665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4667.value)))+(x4668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4669=IKsin(j4);
IkReal x4670=IKcos(j4);
IkReal x4671=(gconst113*r20);
IkReal x4672=(gconst112*r21);
IkReal x4673=((1.0)*cj2);
IkReal x4674=(gconst113*r00);
IkReal x4675=(gconst113*r10);
IkReal x4676=((1.0)*sj0);
IkReal x4677=(cj1*sj2);
IkReal x4678=((1.0)*x4670);
IkReal x4679=((1.0)*x4669);
IkReal x4680=(gconst112*x4670);
IkReal x4681=(gconst112*x4669);
evalcond[0]=(((x4669*x4672))+(((-1.0)*r22*x4678))+(((-1.0)*x4671*x4679)));
evalcond[1]=((((-1.0)*x4675*x4679))+cj0+(((-1.0)*r12*x4678))+((r11*x4681)));
evalcond[2]=((((-1.0)*r02*x4678))+(((-1.0)*x4674*x4679))+(((-1.0)*x4676))+((r01*x4681)));
evalcond[3]=((((-1.0)*cj1*x4673))+((x4670*x4672))+((sj1*sj2))+((r22*x4669))+(((-1.0)*x4671*x4678)));
evalcond[4]=((((-1.0)*cj0*x4677))+((r02*x4669))+(((-1.0)*x4674*x4678))+(((-1.0)*cj0*sj1*x4673))+((r01*x4680)));
evalcond[5]=((((-1.0)*x4675*x4678))+(((-1.0)*x4676*x4677))+((r12*x4669))+(((-1.0)*sj0*sj1*x4673))+((r11*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4682=((1.0)*gconst113);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
CheckValue<IkReal> x4684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4682))+(((-1.0)*gconst112*r10)))),-1);
if(!x4684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4683.value)+(((1.5707963267949)*(x4684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4685=IKsin(j4);
IkReal x4686=IKcos(j4);
IkReal x4687=(gconst113*r20);
IkReal x4688=(gconst112*r21);
IkReal x4689=((1.0)*cj2);
IkReal x4690=(gconst113*r00);
IkReal x4691=(gconst113*r10);
IkReal x4692=((1.0)*sj0);
IkReal x4693=(cj1*sj2);
IkReal x4694=((1.0)*x4686);
IkReal x4695=((1.0)*x4685);
IkReal x4696=(gconst112*x4686);
IkReal x4697=(gconst112*x4685);
evalcond[0]=((((-1.0)*x4687*x4695))+(((-1.0)*r22*x4694))+((x4685*x4688)));
evalcond[1]=((((-1.0)*r12*x4694))+cj0+((r11*x4697))+(((-1.0)*x4691*x4695)));
evalcond[2]=((((-1.0)*x4690*x4695))+(((-1.0)*r02*x4694))+((r01*x4697))+(((-1.0)*x4692)));
evalcond[3]=((((-1.0)*x4687*x4694))+(((-1.0)*cj1*x4689))+((sj1*sj2))+((r22*x4685))+((x4686*x4688)));
evalcond[4]=(((r02*x4685))+(((-1.0)*cj0*sj1*x4689))+(((-1.0)*cj0*x4693))+(((-1.0)*x4690*x4694))+((r01*x4696)));
evalcond[5]=((((-1.0)*x4692*x4693))+(((-1.0)*sj0*sj1*x4689))+((r12*x4685))+((r11*x4696))+(((-1.0)*x4691*x4694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4698=((1.0)*gconst113);
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4698))+(((-1.0)*gconst112*r00)))),-1);
if(!x4699.valid){
continue;
}
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4699.value)))+(x4700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4701=IKsin(j4);
IkReal x4702=IKcos(j4);
IkReal x4703=(gconst113*r20);
IkReal x4704=(gconst112*r21);
IkReal x4705=((1.0)*cj2);
IkReal x4706=(gconst113*r00);
IkReal x4707=(gconst113*r10);
IkReal x4708=((1.0)*sj0);
IkReal x4709=(cj1*sj2);
IkReal x4710=((1.0)*x4702);
IkReal x4711=((1.0)*x4701);
IkReal x4712=(gconst112*x4702);
IkReal x4713=(gconst112*x4701);
evalcond[0]=((((-1.0)*r22*x4710))+(((-1.0)*x4703*x4711))+((x4701*x4704)));
evalcond[1]=(cj0+(((-1.0)*r12*x4710))+(((-1.0)*x4707*x4711))+((r11*x4713)));
evalcond[2]=((((-1.0)*r02*x4710))+((r01*x4713))+(((-1.0)*x4708))+(((-1.0)*x4706*x4711)));
evalcond[3]=((((-1.0)*x4703*x4710))+((sj1*sj2))+(((-1.0)*cj1*x4705))+((x4702*x4704))+((r22*x4701)));
evalcond[4]=((((-1.0)*cj0*sj1*x4705))+((r01*x4712))+(((-1.0)*cj0*x4709))+((r02*x4701))+(((-1.0)*x4706*x4710)));
evalcond[5]=((((-1.0)*sj0*sj1*x4705))+(((-1.0)*x4708*x4709))+(((-1.0)*x4707*x4710))+((r11*x4712))+((r12*x4701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4714=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4714;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4715=((1.0)*cj5);
IkReal x4716=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4715)));
j4eval[0]=x4716;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4715)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4717=cj5*cj5;
IkReal x4718=r01*r01;
IkReal x4719=(cj5*r00);
IkReal x4720=(r01*sj5);
IkReal x4721=((((-1.0)*x4717*x4718))+x4718+(r02*r02)+(((-2.0)*x4719*x4720))+((x4717*(r00*r00))));
j4eval[0]=x4721;
j4eval[1]=IKsign(x4721);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4719))+x4720))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4722=cj5*cj5;
IkReal x4723=r01*r01;
IkReal x4724=(r01*sj5);
IkReal x4725=(cj5*r00);
CheckValue<IkReal> x4726=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4722*x4723))+x4723+(((-2.0)*x4724*x4725))+(r02*r02)+((x4722*(r00*r00))))),-1);
if(!x4726.valid){
continue;
}
CheckValue<IkReal> x4727 = IKatan2WithCheck(IkReal(((((-1.0)*x4725))+x4724)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4726.value)))+(x4727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4728=IKcos(j4);
IkReal x4729=IKsin(j4);
IkReal x4730=(cj5*r00);
IkReal x4731=(cj5*r10);
IkReal x4732=(r21*sj5);
IkReal x4733=((1.0)*cj2);
IkReal x4734=(cj5*r20);
IkReal x4735=((1.0)*x4728);
IkReal x4736=((1.0)*x4729);
IkReal x4737=(sj5*x4729);
IkReal x4738=(sj5*x4728);
evalcond[0]=((((-1.0)*x4730*x4735))+((r02*x4729))+((r01*x4738)));
evalcond[1]=((((-1.0)*x4734*x4736))+((x4729*x4732))+(((-1.0)*r22*x4735)));
evalcond[2]=(((r11*x4737))+(((-1.0)*x4731*x4736))+(((-1.0)*r12*x4735)));
evalcond[3]=((-1.0)+(((-1.0)*x4730*x4736))+((r01*x4737))+(((-1.0)*r02*x4735)));
evalcond[4]=((((-1.0)*x4734*x4735))+(((-1.0)*cj1*x4733))+((sj1*sj2))+((r22*x4729))+((x4728*x4732)));
evalcond[5]=(((r11*x4738))+(((-1.0)*sj1*x4733))+(((-1.0)*x4731*x4735))+(((-1.0)*cj1*sj2))+((r12*x4729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4739=((1.0)*cj5);
CheckValue<IkReal> x4740 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4739)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4740.valid){
continue;
}
CheckValue<IkReal> x4741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4739)))),-1);
if(!x4741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4740.value)+(((1.5707963267949)*(x4741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4742=IKcos(j4);
IkReal x4743=IKsin(j4);
IkReal x4744=(cj5*r00);
IkReal x4745=(cj5*r10);
IkReal x4746=(r21*sj5);
IkReal x4747=((1.0)*cj2);
IkReal x4748=(cj5*r20);
IkReal x4749=((1.0)*x4742);
IkReal x4750=((1.0)*x4743);
IkReal x4751=(sj5*x4743);
IkReal x4752=(sj5*x4742);
evalcond[0]=(((r01*x4752))+(((-1.0)*x4744*x4749))+((r02*x4743)));
evalcond[1]=((((-1.0)*x4748*x4750))+(((-1.0)*r22*x4749))+((x4743*x4746)));
evalcond[2]=((((-1.0)*r12*x4749))+((r11*x4751))+(((-1.0)*x4745*x4750)));
evalcond[3]=((-1.0)+((r01*x4751))+(((-1.0)*x4744*x4750))+(((-1.0)*r02*x4749)));
evalcond[4]=(((x4742*x4746))+(((-1.0)*cj1*x4747))+((sj1*sj2))+(((-1.0)*x4748*x4749))+((r22*x4743)));
evalcond[5]=((((-1.0)*sj1*x4747))+((r11*x4752))+((r12*x4743))+(((-1.0)*cj1*sj2))+(((-1.0)*x4745*x4749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4753.valid){
continue;
}
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4753.value)))+(x4754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4755=IKcos(j4);
IkReal x4756=IKsin(j4);
IkReal x4757=(cj5*r00);
IkReal x4758=(cj5*r10);
IkReal x4759=(r21*sj5);
IkReal x4760=((1.0)*cj2);
IkReal x4761=(cj5*r20);
IkReal x4762=((1.0)*x4755);
IkReal x4763=((1.0)*x4756);
IkReal x4764=(sj5*x4756);
IkReal x4765=(sj5*x4755);
evalcond[0]=(((r01*x4765))+(((-1.0)*x4757*x4762))+((r02*x4756)));
evalcond[1]=((((-1.0)*x4761*x4763))+((x4756*x4759))+(((-1.0)*r22*x4762)));
evalcond[2]=((((-1.0)*x4758*x4763))+(((-1.0)*r12*x4762))+((r11*x4764)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4762))+((r01*x4764))+(((-1.0)*x4757*x4763)));
evalcond[4]=((((-1.0)*x4761*x4762))+((x4755*x4759))+((sj1*sj2))+(((-1.0)*cj1*x4760))+((r22*x4756)));
evalcond[5]=((((-1.0)*x4758*x4762))+((r12*x4756))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4760))+((r11*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4766=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4766;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4767=((1.0)*cj5);
IkReal x4768=((((-1.0)*r21*x4767))+(((-1.0)*r20*sj5)));
j4eval[0]=x4768;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4767))))));
j4eval[2]=IKsign(x4768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4769=cj5*cj5;
IkReal x4770=r01*r01;
IkReal x4771=(r01*sj5);
IkReal x4772=(cj5*r00);
IkReal x4773=((((-1.0)*x4770))+(((2.0)*x4771*x4772))+(((-1.0)*x4769*(r00*r00)))+((x4769*x4770))+(((-1.0)*(r02*r02))));
j4eval[0]=x4773;
j4eval[1]=IKsign(x4773);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4772))+x4771))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4774=cj5*cj5;
IkReal x4775=r01*r01;
IkReal x4776=(r01*sj5);
IkReal x4777=(cj5*r00);
CheckValue<IkReal> x4778=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4775))+(((-1.0)*(r02*r02)))+(((2.0)*x4776*x4777))+(((-1.0)*x4774*(r00*r00)))+((x4774*x4775)))),-1);
if(!x4778.valid){
continue;
}
CheckValue<IkReal> x4779 = IKatan2WithCheck(IkReal(((((-1.0)*x4777))+x4776)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4778.value)))+(x4779.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4780=IKcos(j4);
IkReal x4781=IKsin(j4);
IkReal x4782=(cj5*r00);
IkReal x4783=(cj5*r10);
IkReal x4784=(r21*sj5);
IkReal x4785=(cj5*r20);
IkReal x4786=((1.0)*x4780);
IkReal x4787=((1.0)*x4781);
IkReal x4788=(sj5*x4781);
IkReal x4789=(sj5*x4780);
evalcond[0]=(((r02*x4781))+((r01*x4789))+(((-1.0)*x4782*x4786)));
evalcond[1]=((((-1.0)*r22*x4786))+(((-1.0)*x4785*x4787))+((x4781*x4784)));
evalcond[2]=((((-1.0)*x4783*x4787))+((r11*x4788))+(((-1.0)*r12*x4786)));
evalcond[3]=((1.0)+((r01*x4788))+(((-1.0)*x4782*x4787))+(((-1.0)*r02*x4786)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4781))+(((-1.0)*x4783*x4786))+((r11*x4789)));
evalcond[5]=(((x4780*x4784))+((r22*x4781))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4785*x4786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4790=((1.0)*cj5);
CheckValue<IkReal> x4791 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4791.valid){
continue;
}
CheckValue<IkReal> x4792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4790))+(((-1.0)*r20*sj5)))),-1);
if(!x4792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4791.value)+(((1.5707963267949)*(x4792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4793=IKcos(j4);
IkReal x4794=IKsin(j4);
IkReal x4795=(cj5*r00);
IkReal x4796=(cj5*r10);
IkReal x4797=(r21*sj5);
IkReal x4798=(cj5*r20);
IkReal x4799=((1.0)*x4793);
IkReal x4800=((1.0)*x4794);
IkReal x4801=(sj5*x4794);
IkReal x4802=(sj5*x4793);
evalcond[0]=(((r01*x4802))+((r02*x4794))+(((-1.0)*x4795*x4799)));
evalcond[1]=((((-1.0)*r22*x4799))+(((-1.0)*x4798*x4800))+((x4794*x4797)));
evalcond[2]=((((-1.0)*x4796*x4800))+(((-1.0)*r12*x4799))+((r11*x4801)));
evalcond[3]=((1.0)+((r01*x4801))+(((-1.0)*r02*x4799))+(((-1.0)*x4795*x4800)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4796*x4799))+((r12*x4794))+((r11*x4802)));
evalcond[5]=(((x4793*x4797))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4798*x4799))+((r22*x4794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4803 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4803.valid){
continue;
}
CheckValue<IkReal> x4804=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4803.value)+(((1.5707963267949)*(x4804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4805=IKcos(j4);
IkReal x4806=IKsin(j4);
IkReal x4807=(cj5*r00);
IkReal x4808=(cj5*r10);
IkReal x4809=(r21*sj5);
IkReal x4810=(cj5*r20);
IkReal x4811=((1.0)*x4805);
IkReal x4812=((1.0)*x4806);
IkReal x4813=(sj5*x4806);
IkReal x4814=(sj5*x4805);
evalcond[0]=(((r02*x4806))+(((-1.0)*x4807*x4811))+((r01*x4814)));
evalcond[1]=((((-1.0)*r22*x4811))+((x4806*x4809))+(((-1.0)*x4810*x4812)));
evalcond[2]=((((-1.0)*x4808*x4812))+((r11*x4813))+(((-1.0)*r12*x4811)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4811))+(((-1.0)*x4807*x4812))+((r01*x4813)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4808*x4811))+((r11*x4814))+((cj1*sj2))+((r12*x4806)));
evalcond[5]=(((x4805*x4809))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4806))+(((-1.0)*x4810*x4811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4815=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4815);
rxp1_1=(px*r21);
rxp1_2=(r11*x4815);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4816=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4816);
rxp1_1=(px*r21);
rxp1_2=(r11*x4816);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4817=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4817);
rxp1_1=(px*r21);
rxp1_2=(r11*x4817);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4820=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4820.valid){
continue;
}
IkReal x4818=x4820.value;
IkReal x4819=(sj0*x4818);
cj4array[0]=(((cj1*sj2*x4819))+((cj2*sj1*x4819)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4821=IKsin(j4);
IkReal x4822=IKcos(j4);
IkReal x4823=(r21*sj5);
IkReal x4824=((1.0)*cj5*r20);
evalcond[0]=(r02*x4821);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4822)));
evalcond[2]=(((x4821*x4823))+(((-1.0)*x4821*x4824)));
evalcond[3]=((((-1.0)*cj5*r10*x4821))+((r11*sj5*x4821)));
evalcond[4]=((((-1.0)*x4822*x4824))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4822*x4823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4826=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4826.valid){
continue;
}
IkReal x4825=x4826.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4825))+((cj1*cj2*x4825)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4827=IKsin(j4);
IkReal x4828=IKcos(j4);
IkReal x4829=((1.0)*sj0);
IkReal x4830=((1.0)*cj5);
IkReal x4831=(sj5*x4827);
evalcond[0]=(r02*x4827);
evalcond[1]=((((-1.0)*x4829))+(((-1.0)*r02*x4828)));
evalcond[2]=((((-1.0)*r20*x4827*x4830))+((r21*x4831)));
evalcond[3]=(((r11*x4831))+(((-1.0)*r10*x4827*x4830)));
evalcond[4]=((((-1.0)*r10*x4828*x4830))+(((-1.0)*cj2*sj1*x4829))+(((-1.0)*cj1*sj2*x4829))+((r11*sj5*x4828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4832=IKPowWithIntegerCheck(r02,-1);
if(!x4832.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4832.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4833=IKsin(j4);
IkReal x4834=IKcos(j4);
IkReal x4835=((1.0)*cj1);
IkReal x4836=(r21*sj5);
IkReal x4837=((1.0)*cj5);
IkReal x4838=(r11*sj5);
evalcond[0]=(r02*x4833);
evalcond[1]=(((x4833*x4836))+(((-1.0)*r20*x4833*x4837)));
evalcond[2]=(((x4833*x4838))+(((-1.0)*r10*x4833*x4837)));
evalcond[3]=((((-1.0)*r20*x4834*x4837))+((sj1*sj2))+(((-1.0)*cj2*x4835))+((x4834*x4836)));
evalcond[4]=((((-1.0)*sj0*sj2*x4835))+(((-1.0)*cj2*sj0*sj1))+((x4834*x4838))+(((-1.0)*r10*x4834*x4837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4839=((1.0)*sj0);
IkReal x4840=((1.0)*cj0);
CheckValue<IkReal> x4841 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4840))+(((-1.0)*r12*x4839)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x4839))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4841.valid){
continue;
}
CheckValue<IkReal> x4842=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4841.value)+(((1.5707963267949)*(x4842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4843=IKsin(j4);
IkReal x4844=IKcos(j4);
IkReal x4845=(cj5*r00);
IkReal x4846=(cj5*r10);
IkReal x4847=(r21*sj5);
IkReal x4848=((1.0)*cj2);
IkReal x4849=((1.0)*sj0);
IkReal x4850=(cj1*sj2);
IkReal x4851=(cj5*r20);
IkReal x4852=((1.0)*x4844);
IkReal x4853=((1.0)*x4843);
IkReal x4854=(sj5*x4843);
IkReal x4855=(sj5*x4844);
evalcond[0]=((((-1.0)*r22*x4852))+(((-1.0)*x4851*x4853))+((x4843*x4847)));
evalcond[1]=(cj0+(((-1.0)*r12*x4852))+(((-1.0)*x4846*x4853))+((r11*x4854)));
evalcond[2]=((((-1.0)*x4849))+((r01*x4854))+(((-1.0)*r02*x4852))+(((-1.0)*x4845*x4853)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4848))+((r22*x4843))+((x4844*x4847))+(((-1.0)*x4851*x4852)));
evalcond[4]=(((r02*x4843))+((r01*x4855))+(((-1.0)*cj0*sj1*x4848))+(((-1.0)*cj0*x4850))+(((-1.0)*x4845*x4852)));
evalcond[5]=(((r12*x4843))+(((-1.0)*x4846*x4852))+(((-1.0)*sj0*sj1*x4848))+(((-1.0)*x4849*x4850))+((r11*x4855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4856=((1.0)*cj5);
CheckValue<IkReal> x4857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4856)))),-1);
if(!x4857.valid){
continue;
}
CheckValue<IkReal> x4858 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4856))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4857.value)))+(x4858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4859=IKsin(j4);
IkReal x4860=IKcos(j4);
IkReal x4861=(cj5*r00);
IkReal x4862=(cj5*r10);
IkReal x4863=(r21*sj5);
IkReal x4864=((1.0)*cj2);
IkReal x4865=((1.0)*sj0);
IkReal x4866=(cj1*sj2);
IkReal x4867=(cj5*r20);
IkReal x4868=((1.0)*x4860);
IkReal x4869=((1.0)*x4859);
IkReal x4870=(sj5*x4859);
IkReal x4871=(sj5*x4860);
evalcond[0]=(((x4859*x4863))+(((-1.0)*r22*x4868))+(((-1.0)*x4867*x4869)));
evalcond[1]=((((-1.0)*x4862*x4869))+cj0+(((-1.0)*r12*x4868))+((r11*x4870)));
evalcond[2]=(((r01*x4870))+(((-1.0)*x4865))+(((-1.0)*r02*x4868))+(((-1.0)*x4861*x4869)));
evalcond[3]=(((r22*x4859))+((sj1*sj2))+((x4860*x4863))+(((-1.0)*x4867*x4868))+(((-1.0)*cj1*x4864)));
evalcond[4]=((((-1.0)*cj0*sj1*x4864))+((r01*x4871))+(((-1.0)*cj0*x4866))+((r02*x4859))+(((-1.0)*x4861*x4868)));
evalcond[5]=((((-1.0)*x4862*x4868))+(((-1.0)*sj0*sj1*x4864))+((r12*x4859))+((r11*x4871))+(((-1.0)*x4865*x4866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4872=((1.0)*cj5);
CheckValue<IkReal> x4873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4873.valid){
continue;
}
CheckValue<IkReal> x4874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4872)))),-1);
if(!x4874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4873.value)+(((1.5707963267949)*(x4874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4875=IKsin(j4);
IkReal x4876=IKcos(j4);
IkReal x4877=(cj5*r00);
IkReal x4878=(cj5*r10);
IkReal x4879=(r21*sj5);
IkReal x4880=((1.0)*cj2);
IkReal x4881=((1.0)*sj0);
IkReal x4882=(cj1*sj2);
IkReal x4883=(cj5*r20);
IkReal x4884=((1.0)*x4876);
IkReal x4885=((1.0)*x4875);
IkReal x4886=(sj5*x4875);
IkReal x4887=(sj5*x4876);
evalcond[0]=((((-1.0)*x4883*x4885))+((x4875*x4879))+(((-1.0)*r22*x4884)));
evalcond[1]=(((r11*x4886))+cj0+(((-1.0)*r12*x4884))+(((-1.0)*x4878*x4885)));
evalcond[2]=((((-1.0)*x4877*x4885))+(((-1.0)*x4881))+(((-1.0)*r02*x4884))+((r01*x4886)));
evalcond[3]=((((-1.0)*cj1*x4880))+(((-1.0)*x4883*x4884))+((sj1*sj2))+((r22*x4875))+((x4876*x4879)));
evalcond[4]=((((-1.0)*cj0*x4882))+(((-1.0)*x4877*x4884))+((r02*x4875))+(((-1.0)*cj0*sj1*x4880))+((r01*x4887)));
evalcond[5]=(((r11*x4887))+(((-1.0)*x4881*x4882))+(((-1.0)*sj0*sj1*x4880))+((r12*x4875))+(((-1.0)*x4878*x4884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4888=((1.0)*cj5);
IkReal x4889=((1.0)*sj5);
IkReal x4890=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4890;
j0eval[1]=((IKabs(((((-1.0)*r00*x4889))+(((-1.0)*r01*x4888)))))+(IKabs(((((-1.0)*r10*x4889))+(((-1.0)*r11*x4888))))));
j0eval[2]=IKsign(x4890);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4891=r21*r21;
IkReal x4892=cj5*cj5;
IkReal x4893=(cj2*sj1);
IkReal x4894=(cj1*sj2);
IkReal x4895=(r21*sj5);
IkReal x4896=((1.0)*cj5*r20);
IkReal x4897=(((x4891*x4892))+(((-1.0)*x4891))+(((-1.0)*(r22*r22)))+(((2.0)*cj5*r20*x4895))+(((-1.0)*x4892*(r20*r20))));
j4eval[0]=x4897;
j4eval[1]=((IKabs(((((-1.0)*x4893*x4896))+(((-1.0)*x4894*x4896))+((x4893*x4895))+((x4894*x4895)))))+(IKabs((((r22*x4893))+((r22*x4894))))));
j4eval[2]=IKsign(x4897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4898=cj1*cj1;
IkReal x4899=(cj2*sj2);
IkReal x4900=(cj2*sj1);
IkReal x4901=(cj1*sj1);
j0eval[0]=(x4901+(((-2.0)*x4898*x4899))+(((-1.06936921195177)*sj2*x4898))+(((-1.06936921195177)*cj1*x4900))+x4899+(((-2.0)*cj1*cj2*x4900)));
j0eval[1]=((((-1.0)*x4900))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.114688717055332)*px))+(((0.828504447384304)*py))), ((((0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4902=IKsin(j0);
IkReal x4903=IKcos(j0);
evalcond[0]=((((-0.163941)*x4902))+(((-1.0)*px))+(((1.1843)*x4903)));
evalcond[1]=((((0.163941)*x4903))+(((-1.0)*py))+(((1.1843)*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4904=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4904;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4905=((1.0)*cj5);
IkReal x4906=((((-1.0)*r01*x4905))+(((-1.0)*r00*sj5)));
j4eval[0]=x4906;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4905)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4907=((1.0)*cj5);
IkReal x4908=((((-1.0)*r01*x4907))+(((-1.0)*r00*sj5)));
j4eval[0]=x4908;
j4eval[1]=IKsign(x4908);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x4907))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4909=((1.0)*cj5);
CheckValue<IkReal> x4910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4909))+(((-1.0)*r00*sj5)))),-1);
if(!x4910.valid){
continue;
}
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4909))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4910.value)))+(x4911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4912=IKcos(j4);
IkReal x4913=IKsin(j4);
IkReal x4914=((1.0)*sj0);
IkReal x4915=(cj5*r00);
IkReal x4916=(cj5*r10);
IkReal x4917=(cj5*r20);
IkReal x4918=((1.0)*x4912);
IkReal x4919=((1.0)*x4913);
IkReal x4920=(sj5*x4912);
IkReal x4921=(sj5*x4913);
evalcond[0]=(((r21*x4920))+((r22*x4913))+(((-1.0)*x4917*x4918)));
evalcond[1]=(((r21*x4921))+(((-1.0)*r22*x4918))+(((-1.0)*x4917*x4919)));
evalcond[2]=(cj0+(((-1.0)*r12*x4918))+(((-1.0)*x4916*x4919))+((r11*x4921)));
evalcond[3]=((((-1.0)*x4915*x4918))+((r02*x4913))+((r01*x4920))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4914))+((r12*x4913))+(((-1.0)*x4916*x4918))+((r11*x4920)));
evalcond[5]=((((-1.0)*x4915*x4919))+(((-1.0)*r02*x4918))+(((-1.0)*x4914))+((r01*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4922=((1.0)*cj5);
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4922))+(((-1.0)*r00*sj5)))),-1);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4923.value)+(((1.5707963267949)*(x4924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKcos(j4);
IkReal x4926=IKsin(j4);
IkReal x4927=((1.0)*sj0);
IkReal x4928=(cj5*r00);
IkReal x4929=(cj5*r10);
IkReal x4930=(cj5*r20);
IkReal x4931=((1.0)*x4925);
IkReal x4932=((1.0)*x4926);
IkReal x4933=(sj5*x4925);
IkReal x4934=(sj5*x4926);
evalcond[0]=((((-1.0)*x4930*x4931))+((r22*x4926))+((r21*x4933)));
evalcond[1]=((((-1.0)*x4930*x4932))+((r21*x4934))+(((-1.0)*r22*x4931)));
evalcond[2]=(cj0+(((-1.0)*r12*x4931))+(((-1.0)*x4929*x4932))+((r11*x4934)));
evalcond[3]=(((r01*x4933))+((r02*x4926))+(((-1.0)*x4928*x4931))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4929*x4931))+((r11*x4933))+(((-1.0)*x4927))+((r12*x4926)));
evalcond[5]=((((-1.0)*r02*x4931))+((r01*x4934))+(((-1.0)*x4928*x4932))+(((-1.0)*x4927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4935 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4935.valid){
continue;
}
CheckValue<IkReal> x4936=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4935.value)+(((1.5707963267949)*(x4936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4937=IKcos(j4);
IkReal x4938=IKsin(j4);
IkReal x4939=((1.0)*sj0);
IkReal x4940=(cj5*r00);
IkReal x4941=(cj5*r10);
IkReal x4942=(cj5*r20);
IkReal x4943=((1.0)*x4937);
IkReal x4944=((1.0)*x4938);
IkReal x4945=(sj5*x4937);
IkReal x4946=(sj5*x4938);
evalcond[0]=((((-1.0)*x4942*x4943))+((r21*x4945))+((r22*x4938)));
evalcond[1]=((((-1.0)*x4942*x4944))+((r21*x4946))+(((-1.0)*r22*x4943)));
evalcond[2]=((((-1.0)*x4941*x4944))+cj0+((r11*x4946))+(((-1.0)*r12*x4943)));
evalcond[3]=(((r01*x4945))+(((-1.0)*x4940*x4943))+((r02*x4938))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4938))+(((-1.0)*x4941*x4943))+((r11*x4945))+(((-1.0)*x4939)));
evalcond[5]=(((r01*x4946))+(((-1.0)*x4940*x4944))+(((-1.0)*r02*x4943))+(((-1.0)*x4939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4947=IKsin(j0);
IkReal x4948=IKcos(j0);
evalcond[0]=((((-0.163941)*x4947))+(((-1.0)*px))+(((0.0397)*x4948)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x4948))+(((0.0397)*x4947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4949=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4949;
j4eval[1]=IKsign(x4949);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4950=((1.0)*cj5);
IkReal x4951=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4950)));
j4eval[0]=x4951;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4950)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4951);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4952=cj5*cj5;
IkReal x4953=((1.0)*r20);
IkReal x4954=(r01*r21);
IkReal x4955=(r21*sj5);
IkReal x4956=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4955))+(((-1.0)*x4954))+((x4952*x4954))+(((-1.0)*r00*x4952*x4953)));
j4eval[0]=x4956;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4953))+((cj0*x4955)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4956);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4957=cj5*cj5;
IkReal x4958=((1.0)*r20);
IkReal x4959=(r01*r21);
IkReal x4960=(r21*sj5);
CheckValue<IkReal> x4961=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4960))+((x4957*x4959))+(((-1.0)*x4959))+(((-1.0)*r00*x4957*x4958)))),-1);
if(!x4961.valid){
continue;
}
CheckValue<IkReal> x4962 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4958))+((cj0*x4960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4961.value)))+(x4962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4963=IKcos(j4);
IkReal x4964=IKsin(j4);
IkReal x4965=(cj5*r00);
IkReal x4966=(cj5*r10);
IkReal x4967=(cj5*r20);
IkReal x4968=((1.0)*x4963);
IkReal x4969=((1.0)*x4964);
IkReal x4970=(sj5*x4963);
IkReal x4971=(sj5*x4964);
evalcond[0]=(((r22*x4964))+(((-1.0)*x4967*x4968))+((r21*x4970)));
evalcond[1]=((((-1.0)*r22*x4968))+(((-1.0)*x4967*x4969))+((r21*x4971)));
evalcond[2]=(cj0+((r02*x4964))+(((-1.0)*x4965*x4968))+((r01*x4970)));
evalcond[3]=(sj0+((r12*x4964))+((r11*x4970))+(((-1.0)*x4966*x4968)));
evalcond[4]=(cj0+((r11*x4971))+(((-1.0)*r12*x4968))+(((-1.0)*x4966*x4969)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4968))+(((-1.0)*x4965*x4969))+((r01*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4972=((1.0)*cj5);
CheckValue<IkReal> x4973 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4972)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4973.valid){
continue;
}
CheckValue<IkReal> x4974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4972)))),-1);
if(!x4974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4973.value)+(((1.5707963267949)*(x4974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4975=IKcos(j4);
IkReal x4976=IKsin(j4);
IkReal x4977=(cj5*r00);
IkReal x4978=(cj5*r10);
IkReal x4979=(cj5*r20);
IkReal x4980=((1.0)*x4975);
IkReal x4981=((1.0)*x4976);
IkReal x4982=(sj5*x4975);
IkReal x4983=(sj5*x4976);
evalcond[0]=(((r22*x4976))+((r21*x4982))+(((-1.0)*x4979*x4980)));
evalcond[1]=((((-1.0)*r22*x4980))+((r21*x4983))+(((-1.0)*x4979*x4981)));
evalcond[2]=((((-1.0)*x4977*x4980))+((r01*x4982))+cj0+((r02*x4976)));
evalcond[3]=(sj0+((r11*x4982))+((r12*x4976))+(((-1.0)*x4978*x4980)));
evalcond[4]=(cj0+((r11*x4983))+(((-1.0)*r12*x4980))+(((-1.0)*x4978*x4981)));
evalcond[5]=((((-1.0)*x4977*x4981))+(((-1.0)*sj0))+((r01*x4983))+(((-1.0)*r02*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4984 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4984.valid){
continue;
}
CheckValue<IkReal> x4985=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4984.value)+(((1.5707963267949)*(x4985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4986=IKcos(j4);
IkReal x4987=IKsin(j4);
IkReal x4988=(cj5*r00);
IkReal x4989=(cj5*r10);
IkReal x4990=(cj5*r20);
IkReal x4991=((1.0)*x4986);
IkReal x4992=((1.0)*x4987);
IkReal x4993=(sj5*x4986);
IkReal x4994=(sj5*x4987);
evalcond[0]=((((-1.0)*x4990*x4991))+((r22*x4987))+((r21*x4993)));
evalcond[1]=((((-1.0)*r22*x4991))+(((-1.0)*x4990*x4992))+((r21*x4994)));
evalcond[2]=(cj0+(((-1.0)*x4988*x4991))+((r01*x4993))+((r02*x4987)));
evalcond[3]=(sj0+((r12*x4987))+((r11*x4993))+(((-1.0)*x4989*x4991)));
evalcond[4]=(cj0+(((-1.0)*r12*x4991))+((r11*x4994))+(((-1.0)*x4989*x4992)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4991))+(((-1.0)*x4988*x4992))+((r01*x4994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4995=IKsin(j0);
IkReal x4996=IKcos(j0);
IkReal x4997=(cj5*r01);
IkReal x4998=((0.1157)*sj5);
IkReal x4999=(cj5*r11);
evalcond[0]=(x4997+((r00*sj5))+(((-1.0)*x4996)));
evalcond[1]=(x4999+((r10*sj5))+(((-1.0)*x4995)));
evalcond[2]=((((-0.163941)*x4995))+(((-1.0)*r00*x4998))+(((-1.0)*px))+(((-0.1157)*x4997)));
evalcond[3]=((((-1.0)*py))+(((0.163941)*x4996))+(((-0.1157)*x4999))+(((-1.0)*r10*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5000=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5000;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5001=((1.0)*cj5);
IkReal x5002=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5001)));
j4eval[0]=x5002;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5001))))));
j4eval[2]=IKsign(x5002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5003=cj5*cj5;
IkReal x5004=(r01*r11);
IkReal x5005=((1.0)*r00);
IkReal x5006=(r01*sj5);
IkReal x5007=(((x5003*x5004))+((cj5*r10*x5006))+(((-1.0)*r02*r12))+(((-1.0)*x5004))+(((-1.0)*r10*x5003*x5005))+((cj5*r00*r11*sj5)));
j4eval[0]=x5007;
j4eval[1]=IKsign(x5007);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x5005))+((cj0*x5006)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5008=cj5*cj5;
IkReal x5009=(r01*r11);
IkReal x5010=(cj5*r00);
IkReal x5011=(r01*sj5);
CheckValue<IkReal> x5012 = IKatan2WithCheck(IkReal((((cj0*x5011))+(((-1.0)*cj0*x5010)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5012.valid){
continue;
}
CheckValue<IkReal> x5013=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5010))+(((-1.0)*r02*r12))+(((-1.0)*x5009))+((x5008*x5009))+((cj5*r10*x5011))+(((-1.0)*r00*r10*x5008)))),-1);
if(!x5013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5012.value)+(((1.5707963267949)*(x5013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5014=IKcos(j4);
IkReal x5015=IKsin(j4);
IkReal x5016=(cj5*r00);
IkReal x5017=(r01*sj5);
IkReal x5018=(cj5*r10);
IkReal x5019=(cj5*r20);
IkReal x5020=((1.0)*x5014);
IkReal x5021=((1.0)*x5015);
IkReal x5022=(sj5*x5015);
IkReal x5023=(sj5*x5014);
evalcond[0]=(((x5014*x5017))+((r02*x5015))+(((-1.0)*x5016*x5020)));
evalcond[1]=(((r11*x5023))+(((-1.0)*x5018*x5020))+((r12*x5015)));
evalcond[2]=((((-1.0)*x5019*x5021))+(((-1.0)*r22*x5020))+((r21*x5022)));
evalcond[3]=((1.0)+(((-1.0)*x5019*x5020))+((r22*x5015))+((r21*x5023)));
evalcond[4]=(((r11*x5022))+cj0+(((-1.0)*r12*x5020))+(((-1.0)*x5018*x5021)));
evalcond[5]=((((-1.0)*r02*x5020))+(((-1.0)*sj0))+(((-1.0)*x5016*x5021))+((x5015*x5017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5024=((1.0)*cj5);
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5024)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
CheckValue<IkReal> x5026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5024))+(((-1.0)*r00*sj5)))),-1);
if(!x5026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5025.value)+(((1.5707963267949)*(x5026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5027=IKcos(j4);
IkReal x5028=IKsin(j4);
IkReal x5029=(cj5*r00);
IkReal x5030=(r01*sj5);
IkReal x5031=(cj5*r10);
IkReal x5032=(cj5*r20);
IkReal x5033=((1.0)*x5027);
IkReal x5034=((1.0)*x5028);
IkReal x5035=(sj5*x5028);
IkReal x5036=(sj5*x5027);
evalcond[0]=(((r02*x5028))+(((-1.0)*x5029*x5033))+((x5027*x5030)));
evalcond[1]=(((r12*x5028))+((r11*x5036))+(((-1.0)*x5031*x5033)));
evalcond[2]=((((-1.0)*x5032*x5034))+((r21*x5035))+(((-1.0)*r22*x5033)));
evalcond[3]=((1.0)+(((-1.0)*x5032*x5033))+((r22*x5028))+((r21*x5036)));
evalcond[4]=(cj0+((r11*x5035))+(((-1.0)*x5031*x5034))+(((-1.0)*r12*x5033)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5029*x5034))+((x5028*x5030))+(((-1.0)*r02*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5037 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5037.valid){
continue;
}
CheckValue<IkReal> x5038=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5037.value)+(((1.5707963267949)*(x5038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5039=IKcos(j4);
IkReal x5040=IKsin(j4);
IkReal x5041=(cj5*r00);
IkReal x5042=(r01*sj5);
IkReal x5043=(cj5*r10);
IkReal x5044=(cj5*r20);
IkReal x5045=((1.0)*x5039);
IkReal x5046=((1.0)*x5040);
IkReal x5047=(sj5*x5040);
IkReal x5048=(sj5*x5039);
evalcond[0]=((((-1.0)*x5041*x5045))+((x5039*x5042))+((r02*x5040)));
evalcond[1]=((((-1.0)*x5043*x5045))+((r12*x5040))+((r11*x5048)));
evalcond[2]=(((r21*x5047))+(((-1.0)*r22*x5045))+(((-1.0)*x5044*x5046)));
evalcond[3]=((1.0)+((r21*x5048))+(((-1.0)*x5044*x5045))+((r22*x5040)));
evalcond[4]=((((-1.0)*x5043*x5046))+cj0+(((-1.0)*r12*x5045))+((r11*x5047)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5045))+((x5040*x5042))+(((-1.0)*x5041*x5046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5049=IKcos(j0);
IkReal x5050=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.5723)*x5049))+(((-0.163941)*x5050)));
evalcond[1]=((((-0.5723)*x5050))+(((-1.0)*py))+(((0.163941)*x5049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5051=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5051;
j4eval[1]=IKsign(x5051);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5052=((1.0)*cj5);
IkReal x5053=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5052)));
j4eval[0]=x5053;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5052)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5054=cj5*cj5;
IkReal x5055=((1.0)*r20);
IkReal x5056=(r01*r21);
IkReal x5057=(r21*sj5);
IkReal x5058=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5054*x5055))+((cj5*r00*x5057))+(((-1.0)*x5056))+((x5054*x5056)));
j4eval[0]=x5058;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5055))+((cj0*x5057)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5059=cj5*cj5;
IkReal x5060=((1.0)*r20);
IkReal x5061=(r01*r21);
IkReal x5062=(r21*sj5);
CheckValue<IkReal> x5063 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5062))+(((-1.0)*cj0*cj5*x5060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5063.valid){
continue;
}
CheckValue<IkReal> x5064=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5059*x5060))+(((-1.0)*x5061))+((x5059*x5061))+((cj5*r00*x5062)))),-1);
if(!x5064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5063.value)+(((1.5707963267949)*(x5064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5065=IKcos(j4);
IkReal x5066=IKsin(j4);
IkReal x5067=(cj5*r00);
IkReal x5068=(cj5*r10);
IkReal x5069=(cj5*r20);
IkReal x5070=((1.0)*x5065);
IkReal x5071=((1.0)*x5066);
IkReal x5072=(sj5*x5065);
IkReal x5073=(sj5*x5066);
evalcond[0]=((((-1.0)*x5069*x5070))+((r21*x5072))+((r22*x5066)));
evalcond[1]=((((-1.0)*x5069*x5071))+((r21*x5073))+(((-1.0)*r22*x5070)));
evalcond[2]=((((-1.0)*x5067*x5070))+cj0+((r02*x5066))+((r01*x5072)));
evalcond[3]=(sj0+(((-1.0)*x5068*x5070))+((r12*x5066))+((r11*x5072)));
evalcond[4]=(cj0+(((-1.0)*r12*x5070))+(((-1.0)*x5068*x5071))+((r11*x5073)));
evalcond[5]=((((-1.0)*x5067*x5071))+(((-1.0)*sj0))+(((-1.0)*r02*x5070))+((r01*x5073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5074=((1.0)*cj5);
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5074)))),-1);
if(!x5075.valid){
continue;
}
CheckValue<IkReal> x5076 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5074))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5075.value)))+(x5076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5077=IKcos(j4);
IkReal x5078=IKsin(j4);
IkReal x5079=(cj5*r00);
IkReal x5080=(cj5*r10);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*x5077);
IkReal x5083=((1.0)*x5078);
IkReal x5084=(sj5*x5077);
IkReal x5085=(sj5*x5078);
evalcond[0]=(((r21*x5084))+(((-1.0)*x5081*x5082))+((r22*x5078)));
evalcond[1]=(((r21*x5085))+(((-1.0)*x5081*x5083))+(((-1.0)*r22*x5082)));
evalcond[2]=(cj0+((r01*x5084))+(((-1.0)*x5079*x5082))+((r02*x5078)));
evalcond[3]=((((-1.0)*x5080*x5082))+sj0+((r11*x5084))+((r12*x5078)));
evalcond[4]=((((-1.0)*r12*x5082))+(((-1.0)*x5080*x5083))+cj0+((r11*x5085)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5085))+(((-1.0)*x5079*x5083))+(((-1.0)*r02*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
CheckValue<IkReal> x5087=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5086.value)+(((1.5707963267949)*(x5087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5088=IKcos(j4);
IkReal x5089=IKsin(j4);
IkReal x5090=(cj5*r00);
IkReal x5091=(cj5*r10);
IkReal x5092=(cj5*r20);
IkReal x5093=((1.0)*x5088);
IkReal x5094=((1.0)*x5089);
IkReal x5095=(sj5*x5088);
IkReal x5096=(sj5*x5089);
evalcond[0]=(((r21*x5095))+((r22*x5089))+(((-1.0)*x5092*x5093)));
evalcond[1]=((((-1.0)*r22*x5093))+((r21*x5096))+(((-1.0)*x5092*x5094)));
evalcond[2]=(cj0+(((-1.0)*x5090*x5093))+((r01*x5095))+((r02*x5089)));
evalcond[3]=(sj0+(((-1.0)*x5091*x5093))+((r11*x5095))+((r12*x5089)));
evalcond[4]=(cj0+(((-1.0)*x5091*x5094))+((r11*x5096))+(((-1.0)*r12*x5093)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5090*x5094))+((r01*x5096))+(((-1.0)*r02*x5093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5097=((1.0)*sj5);
IkReal x5098=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5098))+(((-1.0)*r10*x5097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5097))+(((-1.0)*r01*x5098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5098))+(((-1.0)*r10*x5097))))+IKsqr(((((-1.0)*r00*x5097))+(((-1.0)*r01*x5098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5098))+(((-1.0)*r10*x5097))), ((((-1.0)*r00*x5097))+(((-1.0)*r01*x5098))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5099=IKsin(j0);
IkReal x5100=IKcos(j0);
IkReal x5101=(cj5*r01);
IkReal x5102=((0.1157)*sj5);
IkReal x5103=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5100+x5101);
evalcond[1]=(((r10*sj5))+x5103+x5099);
evalcond[2]=((((-0.1157)*x5101))+(((-1.0)*px))+(((-0.163941)*x5099))+(((-1.0)*r00*x5102)));
evalcond[3]=((((-1.0)*r10*x5102))+(((0.163941)*x5100))+(((-0.1157)*x5103))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5104=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5104;
j4eval[1]=IKsign(x5104);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5105=((1.0)*cj5);
IkReal x5106=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5105)));
j4eval[0]=x5106;
j4eval[1]=IKsign(x5106);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5105))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5107=cj5*cj5;
IkReal x5108=(r01*r11);
IkReal x5109=((1.0)*r00);
IkReal x5110=(r01*sj5);
IkReal x5111=(((cj5*r10*x5110))+((x5107*x5108))+(((-1.0)*r02*r12))+(((-1.0)*x5108))+(((-1.0)*r10*x5107*x5109))+((cj5*r00*r11*sj5)));
j4eval[0]=x5111;
j4eval[1]=IKsign(x5111);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5110))+(((-1.0)*cj0*cj5*x5109))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5112=cj5*cj5;
IkReal x5113=(r01*r11);
IkReal x5114=(cj5*r00);
IkReal x5115=(r01*sj5);
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign((((x5112*x5113))+((cj5*r10*x5115))+(((-1.0)*r00*r10*x5112))+(((-1.0)*r02*r12))+(((-1.0)*x5113))+((r11*sj5*x5114)))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5114))+((cj0*x5115)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5116.value)))+(x5117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKcos(j4);
IkReal x5119=IKsin(j4);
IkReal x5120=(cj5*r00);
IkReal x5121=(r01*sj5);
IkReal x5122=(cj5*r10);
IkReal x5123=(cj5*r20);
IkReal x5124=((1.0)*x5118);
IkReal x5125=((1.0)*x5119);
IkReal x5126=(sj5*x5119);
IkReal x5127=(sj5*x5118);
evalcond[0]=(((r02*x5119))+((x5118*x5121))+(((-1.0)*x5120*x5124)));
evalcond[1]=(((r11*x5127))+(((-1.0)*x5122*x5124))+((r12*x5119)));
evalcond[2]=((((-1.0)*x5123*x5125))+((r21*x5126))+(((-1.0)*r22*x5124)));
evalcond[3]=((-1.0)+((r22*x5119))+(((-1.0)*x5123*x5124))+((r21*x5127)));
evalcond[4]=(cj0+((r11*x5126))+(((-1.0)*x5122*x5125))+(((-1.0)*r12*x5124)));
evalcond[5]=((((-1.0)*sj0))+((x5119*x5121))+(((-1.0)*r02*x5124))+(((-1.0)*x5120*x5125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5128=((1.0)*cj5);
CheckValue<IkReal> x5129 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5128)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5129.valid){
continue;
}
CheckValue<IkReal> x5130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5128)))),-1);
if(!x5130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5129.value)+(((1.5707963267949)*(x5130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5131=IKcos(j4);
IkReal x5132=IKsin(j4);
IkReal x5133=(cj5*r00);
IkReal x5134=(r01*sj5);
IkReal x5135=(cj5*r10);
IkReal x5136=(cj5*r20);
IkReal x5137=((1.0)*x5131);
IkReal x5138=((1.0)*x5132);
IkReal x5139=(sj5*x5132);
IkReal x5140=(sj5*x5131);
evalcond[0]=(((x5131*x5134))+((r02*x5132))+(((-1.0)*x5133*x5137)));
evalcond[1]=(((r12*x5132))+(((-1.0)*x5135*x5137))+((r11*x5140)));
evalcond[2]=((((-1.0)*x5136*x5138))+((r21*x5139))+(((-1.0)*r22*x5137)));
evalcond[3]=((-1.0)+((r21*x5140))+((r22*x5132))+(((-1.0)*x5136*x5137)));
evalcond[4]=(cj0+(((-1.0)*x5135*x5138))+((r11*x5139))+(((-1.0)*r12*x5137)));
evalcond[5]=(((x5132*x5134))+(((-1.0)*sj0))+(((-1.0)*r02*x5137))+(((-1.0)*x5133*x5138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5141=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5141.valid){
continue;
}
CheckValue<IkReal> x5142 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5141.value)))+(x5142.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5143=IKcos(j4);
IkReal x5144=IKsin(j4);
IkReal x5145=(cj5*r00);
IkReal x5146=(r01*sj5);
IkReal x5147=(cj5*r10);
IkReal x5148=(cj5*r20);
IkReal x5149=((1.0)*x5143);
IkReal x5150=((1.0)*x5144);
IkReal x5151=(sj5*x5144);
IkReal x5152=(sj5*x5143);
evalcond[0]=(((x5143*x5146))+((r02*x5144))+(((-1.0)*x5145*x5149)));
evalcond[1]=(((r11*x5152))+((r12*x5144))+(((-1.0)*x5147*x5149)));
evalcond[2]=(((r21*x5151))+(((-1.0)*x5148*x5150))+(((-1.0)*r22*x5149)));
evalcond[3]=((-1.0)+((r21*x5152))+(((-1.0)*x5148*x5149))+((r22*x5144)));
evalcond[4]=(((r11*x5151))+cj0+(((-1.0)*r12*x5149))+(((-1.0)*x5147*x5150)));
evalcond[5]=(((x5144*x5146))+(((-1.0)*sj0))+(((-1.0)*r02*x5149))+(((-1.0)*x5145*x5150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5153=IKsin(j0);
IkReal x5154=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x5153))+(((0.5723)*x5154)));
evalcond[1]=((((0.163941)*x5154))+(((-1.0)*py))+(((0.5723)*x5153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5155=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5155;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5156=((1.0)*cj5);
IkReal x5157=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5156)));
j4eval[0]=x5157;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5156))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5158=((1.0)*cj5);
IkReal x5159=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5158)));
j4eval[0]=x5159;
j4eval[1]=IKsign(x5159);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5158))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5160=((1.0)*cj5);
CheckValue<IkReal> x5161=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5160)))),-1);
if(!x5161.valid){
continue;
}
CheckValue<IkReal> x5162 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5160))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5161.value)))+(x5162.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5163=IKcos(j4);
IkReal x5164=IKsin(j4);
IkReal x5165=((1.0)*sj0);
IkReal x5166=(cj5*r00);
IkReal x5167=(cj5*r10);
IkReal x5168=(cj5*r20);
IkReal x5169=((1.0)*x5163);
IkReal x5170=((1.0)*x5164);
IkReal x5171=(sj5*x5163);
IkReal x5172=(sj5*x5164);
evalcond[0]=((((-1.0)*x5168*x5169))+((r22*x5164))+((r21*x5171)));
evalcond[1]=((((-1.0)*r22*x5169))+(((-1.0)*x5168*x5170))+((r21*x5172)));
evalcond[2]=(cj0+(((-1.0)*r12*x5169))+((r11*x5172))+(((-1.0)*x5167*x5170)));
evalcond[3]=(((r01*x5171))+((r02*x5164))+(((-1.0)*x5166*x5169))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5165))+((r12*x5164))+((r11*x5171))+(((-1.0)*x5167*x5169)));
evalcond[5]=(((r01*x5172))+(((-1.0)*r02*x5169))+(((-1.0)*x5165))+(((-1.0)*x5166*x5170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5173=((1.0)*cj5);
CheckValue<IkReal> x5174 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5173)))),-1);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5174.value)+(((1.5707963267949)*(x5175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=((1.0)*sj0);
IkReal x5179=(cj5*r00);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5176);
IkReal x5185=(sj5*x5177);
evalcond[0]=(((r21*x5184))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[1]=((((-1.0)*r22*x5182))+((r21*x5185))+(((-1.0)*x5181*x5183)));
evalcond[2]=(cj0+(((-1.0)*r12*x5182))+((r11*x5185))+(((-1.0)*x5180*x5183)));
evalcond[3]=(((r01*x5184))+((r02*x5177))+(((-1.0)*x5179*x5182))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5178))+((r12*x5177))+((r11*x5184))+(((-1.0)*x5180*x5182)));
evalcond[5]=((((-1.0)*r02*x5182))+((r01*x5185))+(((-1.0)*x5178))+(((-1.0)*x5179*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5186 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5186.valid){
continue;
}
CheckValue<IkReal> x5187=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5186.value)+(((1.5707963267949)*(x5187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5188=IKcos(j4);
IkReal x5189=IKsin(j4);
IkReal x5190=((1.0)*sj0);
IkReal x5191=(cj5*r00);
IkReal x5192=(cj5*r10);
IkReal x5193=(cj5*r20);
IkReal x5194=((1.0)*x5188);
IkReal x5195=((1.0)*x5189);
IkReal x5196=(sj5*x5188);
IkReal x5197=(sj5*x5189);
evalcond[0]=(((r22*x5189))+((r21*x5196))+(((-1.0)*x5193*x5194)));
evalcond[1]=(((r21*x5197))+(((-1.0)*x5193*x5195))+(((-1.0)*r22*x5194)));
evalcond[2]=((((-1.0)*r12*x5194))+cj0+((r11*x5197))+(((-1.0)*x5192*x5195)));
evalcond[3]=((((-1.0)*x5191*x5194))+((r02*x5189))+((r01*x5196))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5196))+(((-1.0)*x5190))+(((-1.0)*x5192*x5194))+((r12*x5189)));
evalcond[5]=((((-1.0)*x5190))+(((-1.0)*x5191*x5195))+(((-1.0)*r02*x5194))+((r01*x5197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((-0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5198=IKcos(j0);
IkReal x5199=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-1.1843)*x5198))+(((-0.163941)*x5199)));
evalcond[1]=((((-1.0)*py))+(((-1.1843)*x5199))+(((0.163941)*x5198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5200=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5200;
j4eval[1]=IKsign(x5200);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5201=((1.0)*cj5);
IkReal x5202=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5201)));
j4eval[0]=x5202;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5201)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5203=cj5*cj5;
IkReal x5204=((1.0)*r20);
IkReal x5205=(r01*r21);
IkReal x5206=(r21*sj5);
IkReal x5207=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5203*x5205))+(((-1.0)*r00*x5203*x5204))+((cj5*r00*x5206))+(((-1.0)*x5205)));
j4eval[0]=x5207;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5204))+((cj0*x5206))))));
j4eval[2]=IKsign(x5207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5208=cj5*cj5;
IkReal x5209=((1.0)*r20);
IkReal x5210=(r01*r21);
IkReal x5211=(r21*sj5);
CheckValue<IkReal> x5212 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5209))+((cj0*x5211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5212.valid){
continue;
}
CheckValue<IkReal> x5213=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5208*x5209))+((x5208*x5210))+((cj5*r00*x5211))+(((-1.0)*x5210)))),-1);
if(!x5213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5212.value)+(((1.5707963267949)*(x5213.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5214=IKcos(j4);
IkReal x5215=IKsin(j4);
IkReal x5216=(cj5*r00);
IkReal x5217=(cj5*r10);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*x5214);
IkReal x5220=((1.0)*x5215);
IkReal x5221=(sj5*x5214);
IkReal x5222=(sj5*x5215);
evalcond[0]=(((r21*x5221))+(((-1.0)*x5218*x5219))+((r22*x5215)));
evalcond[1]=(((r21*x5222))+(((-1.0)*x5218*x5220))+(((-1.0)*r22*x5219)));
evalcond[2]=(cj0+((r02*x5215))+((r01*x5221))+(((-1.0)*x5216*x5219)));
evalcond[3]=((((-1.0)*x5217*x5219))+sj0+((r12*x5215))+((r11*x5221)));
evalcond[4]=(cj0+(((-1.0)*x5217*x5220))+((r11*x5222))+(((-1.0)*r12*x5219)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5216*x5220))+((r01*x5222))+(((-1.0)*r02*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5223=((1.0)*cj5);
CheckValue<IkReal> x5224 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5223)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5224.valid){
continue;
}
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5223)))),-1);
if(!x5225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5224.value)+(((1.5707963267949)*(x5225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5226=IKcos(j4);
IkReal x5227=IKsin(j4);
IkReal x5228=(cj5*r00);
IkReal x5229=(cj5*r10);
IkReal x5230=(cj5*r20);
IkReal x5231=((1.0)*x5226);
IkReal x5232=((1.0)*x5227);
IkReal x5233=(sj5*x5226);
IkReal x5234=(sj5*x5227);
evalcond[0]=(((r22*x5227))+((r21*x5233))+(((-1.0)*x5230*x5231)));
evalcond[1]=((((-1.0)*r22*x5231))+((r21*x5234))+(((-1.0)*x5230*x5232)));
evalcond[2]=(cj0+((r02*x5227))+((r01*x5233))+(((-1.0)*x5228*x5231)));
evalcond[3]=(sj0+((r11*x5233))+(((-1.0)*x5229*x5231))+((r12*x5227)));
evalcond[4]=(cj0+((r11*x5234))+(((-1.0)*r12*x5231))+(((-1.0)*x5229*x5232)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5231))+((r01*x5234))+(((-1.0)*x5228*x5232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5235.value)+(((1.5707963267949)*(x5236.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5237=IKcos(j4);
IkReal x5238=IKsin(j4);
IkReal x5239=(cj5*r00);
IkReal x5240=(cj5*r10);
IkReal x5241=(cj5*r20);
IkReal x5242=((1.0)*x5237);
IkReal x5243=((1.0)*x5238);
IkReal x5244=(sj5*x5237);
IkReal x5245=(sj5*x5238);
evalcond[0]=((((-1.0)*x5241*x5242))+((r21*x5244))+((r22*x5238)));
evalcond[1]=((((-1.0)*r22*x5242))+(((-1.0)*x5241*x5243))+((r21*x5245)));
evalcond[2]=(cj0+((r01*x5244))+(((-1.0)*x5239*x5242))+((r02*x5238)));
evalcond[3]=(sj0+((r11*x5244))+((r12*x5238))+(((-1.0)*x5240*x5242)));
evalcond[4]=((((-1.0)*r12*x5242))+((r11*x5245))+cj0+(((-1.0)*x5240*x5243)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5245))+(((-1.0)*r02*x5242))+(((-1.0)*x5239*x5243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5246=IKcos(j0);
IkReal x5247=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x5247))+(((-0.0397)*x5246)));
evalcond[1]=((((0.163941)*x5246))+(((-1.0)*py))+(((-0.0397)*x5247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5248=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5248;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5249=((1.0)*cj5);
IkReal x5250=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5249)));
j4eval[0]=x5250;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5249))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5251=((1.0)*cj5);
IkReal x5252=((((-1.0)*r01*x5251))+(((-1.0)*r00*sj5)));
j4eval[0]=x5252;
j4eval[1]=IKsign(x5252);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5251))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5253=((1.0)*cj5);
CheckValue<IkReal> x5254=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5253))+(((-1.0)*r00*sj5)))),-1);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5253))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5254.value)))+(x5255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKcos(j4);
IkReal x5257=IKsin(j4);
IkReal x5258=((1.0)*sj0);
IkReal x5259=(cj5*r00);
IkReal x5260=(cj5*r10);
IkReal x5261=(cj5*r20);
IkReal x5262=((1.0)*x5256);
IkReal x5263=((1.0)*x5257);
IkReal x5264=(sj5*x5256);
IkReal x5265=(sj5*x5257);
evalcond[0]=(((r22*x5257))+((r21*x5264))+(((-1.0)*x5261*x5262)));
evalcond[1]=(((r21*x5265))+(((-1.0)*r22*x5262))+(((-1.0)*x5261*x5263)));
evalcond[2]=(cj0+(((-1.0)*r12*x5262))+((r11*x5265))+(((-1.0)*x5260*x5263)));
evalcond[3]=((((-1.0)*x5259*x5262))+((r01*x5264))+(((-1.0)*cj0))+((r02*x5257)));
evalcond[4]=(((r12*x5257))+(((-1.0)*x5258))+((r11*x5264))+(((-1.0)*x5260*x5262)));
evalcond[5]=((((-1.0)*x5259*x5263))+((r01*x5265))+(((-1.0)*r02*x5262))+(((-1.0)*x5258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5266=((1.0)*cj5);
CheckValue<IkReal> x5267 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5267.valid){
continue;
}
CheckValue<IkReal> x5268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5266)))),-1);
if(!x5268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5267.value)+(((1.5707963267949)*(x5268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5269=IKcos(j4);
IkReal x5270=IKsin(j4);
IkReal x5271=((1.0)*sj0);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(cj5*r20);
IkReal x5275=((1.0)*x5269);
IkReal x5276=((1.0)*x5270);
IkReal x5277=(sj5*x5269);
IkReal x5278=(sj5*x5270);
evalcond[0]=(((r22*x5270))+(((-1.0)*x5274*x5275))+((r21*x5277)));
evalcond[1]=((((-1.0)*x5274*x5276))+((r21*x5278))+(((-1.0)*r22*x5275)));
evalcond[2]=(cj0+(((-1.0)*r12*x5275))+((r11*x5278))+(((-1.0)*x5273*x5276)));
evalcond[3]=((((-1.0)*x5272*x5275))+((r02*x5270))+((r01*x5277))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5271))+((r11*x5277))+(((-1.0)*x5273*x5275))+((r12*x5270)));
evalcond[5]=((((-1.0)*x5272*x5276))+(((-1.0)*x5271))+((r01*x5278))+(((-1.0)*r02*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5279 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5279.valid){
continue;
}
CheckValue<IkReal> x5280=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5279.value)+(((1.5707963267949)*(x5280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5281=IKcos(j4);
IkReal x5282=IKsin(j4);
IkReal x5283=((1.0)*sj0);
IkReal x5284=(cj5*r00);
IkReal x5285=(cj5*r10);
IkReal x5286=(cj5*r20);
IkReal x5287=((1.0)*x5281);
IkReal x5288=((1.0)*x5282);
IkReal x5289=(sj5*x5281);
IkReal x5290=(sj5*x5282);
evalcond[0]=(((r22*x5282))+((r21*x5289))+(((-1.0)*x5286*x5287)));
evalcond[1]=((((-1.0)*r22*x5287))+(((-1.0)*x5286*x5288))+((r21*x5290)));
evalcond[2]=(cj0+(((-1.0)*r12*x5287))+((r11*x5290))+(((-1.0)*x5285*x5288)));
evalcond[3]=((((-1.0)*x5284*x5287))+((r02*x5282))+((r01*x5289))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5282))+(((-1.0)*x5283))+((r11*x5289))+(((-1.0)*x5285*x5287)));
evalcond[5]=((((-1.0)*x5284*x5288))+(((-1.0)*x5283))+(((-1.0)*r02*x5287))+((r01*x5290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5291=((1.0)*sj5);
IkReal x5292=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5292))+(((-1.0)*r10*x5291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5291))+(((-1.0)*r01*x5292)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5292))+(((-1.0)*r10*x5291))))+IKsqr(((((-1.0)*r00*x5291))+(((-1.0)*r01*x5292))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5292))+(((-1.0)*r10*x5291))), ((((-1.0)*r00*x5291))+(((-1.0)*r01*x5292))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5293=IKsin(j0);
IkReal x5294=IKcos(j0);
IkReal x5295=(cj5*r01);
IkReal x5296=((0.1157)*sj5);
IkReal x5297=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5294+x5295);
evalcond[1]=(((r10*sj5))+x5297+x5293);
evalcond[2]=((((-1.0)*r00*x5296))+(((-0.163941)*x5293))+(((-0.1157)*x5295))+(((-1.0)*px)));
evalcond[3]=((((0.163941)*x5294))+(((-0.1157)*x5297))+(((-1.0)*py))+(((-1.0)*r10*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5298=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5298;
j4eval[1]=IKsign(x5298);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5299=((1.0)*cj5);
IkReal x5300=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5299)));
j4eval[0]=x5300;
j4eval[1]=IKsign(x5300);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5299))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5301=cj5*cj5;
IkReal x5302=(r01*r11);
IkReal x5303=((1.0)*r00);
IkReal x5304=(r01*sj5);
IkReal x5305=(((x5301*x5302))+(((-1.0)*r10*x5301*x5303))+(((-1.0)*r02*r12))+((cj5*r10*x5304))+(((-1.0)*x5302))+((cj5*r00*r11*sj5)));
j4eval[0]=x5305;
j4eval[1]=IKsign(x5305);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5303))+((cj0*x5304))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5306=cj5*cj5;
IkReal x5307=(r01*r11);
IkReal x5308=(cj5*r00);
IkReal x5309=(r01*sj5);
CheckValue<IkReal> x5310=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5308))+((x5306*x5307))+(((-1.0)*r02*r12))+((cj5*r10*x5309))+(((-1.0)*r00*r10*x5306))+(((-1.0)*x5307)))),-1);
if(!x5310.valid){
continue;
}
CheckValue<IkReal> x5311 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5308))+((cj0*x5309)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5310.value)))+(x5311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5312=IKcos(j4);
IkReal x5313=IKsin(j4);
IkReal x5314=(cj5*r00);
IkReal x5315=(r01*sj5);
IkReal x5316=(cj5*r10);
IkReal x5317=(cj5*r20);
IkReal x5318=((1.0)*x5312);
IkReal x5319=((1.0)*x5313);
IkReal x5320=(sj5*x5313);
IkReal x5321=(sj5*x5312);
evalcond[0]=((((-1.0)*x5314*x5318))+((r02*x5313))+((x5312*x5315)));
evalcond[1]=(((r11*x5321))+(((-1.0)*x5316*x5318))+((r12*x5313)));
evalcond[2]=(((r21*x5320))+(((-1.0)*x5317*x5319))+(((-1.0)*r22*x5318)));
evalcond[3]=((-1.0)+((r22*x5313))+((r21*x5321))+(((-1.0)*x5317*x5318)));
evalcond[4]=((((-1.0)*r12*x5318))+((r11*x5320))+cj0+(((-1.0)*x5316*x5319)));
evalcond[5]=((((-1.0)*x5314*x5319))+(((-1.0)*sj0))+((x5313*x5315))+(((-1.0)*r02*x5318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5322=((1.0)*cj5);
CheckValue<IkReal> x5323 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5322)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5323.valid){
continue;
}
CheckValue<IkReal> x5324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5322)))),-1);
if(!x5324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5323.value)+(((1.5707963267949)*(x5324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5325=IKcos(j4);
IkReal x5326=IKsin(j4);
IkReal x5327=(cj5*r00);
IkReal x5328=(r01*sj5);
IkReal x5329=(cj5*r10);
IkReal x5330=(cj5*r20);
IkReal x5331=((1.0)*x5325);
IkReal x5332=((1.0)*x5326);
IkReal x5333=(sj5*x5326);
IkReal x5334=(sj5*x5325);
evalcond[0]=(((x5325*x5328))+((r02*x5326))+(((-1.0)*x5327*x5331)));
evalcond[1]=(((r11*x5334))+((r12*x5326))+(((-1.0)*x5329*x5331)));
evalcond[2]=((((-1.0)*x5330*x5332))+(((-1.0)*r22*x5331))+((r21*x5333)));
evalcond[3]=((-1.0)+(((-1.0)*x5330*x5331))+((r22*x5326))+((r21*x5334)));
evalcond[4]=(cj0+((r11*x5333))+(((-1.0)*x5329*x5332))+(((-1.0)*r12*x5331)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5331))+((x5326*x5328))+(((-1.0)*x5327*x5332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5335=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5335.valid){
continue;
}
CheckValue<IkReal> x5336 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5335.value)))+(x5336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5337=IKcos(j4);
IkReal x5338=IKsin(j4);
IkReal x5339=(cj5*r00);
IkReal x5340=(r01*sj5);
IkReal x5341=(cj5*r10);
IkReal x5342=(cj5*r20);
IkReal x5343=((1.0)*x5337);
IkReal x5344=((1.0)*x5338);
IkReal x5345=(sj5*x5338);
IkReal x5346=(sj5*x5337);
evalcond[0]=(((x5337*x5340))+(((-1.0)*x5339*x5343))+((r02*x5338)));
evalcond[1]=(((r12*x5338))+((r11*x5346))+(((-1.0)*x5341*x5343)));
evalcond[2]=((((-1.0)*r22*x5343))+((r21*x5345))+(((-1.0)*x5342*x5344)));
evalcond[3]=((-1.0)+((r22*x5338))+((r21*x5346))+(((-1.0)*x5342*x5343)));
evalcond[4]=(cj0+((r11*x5345))+(((-1.0)*r12*x5343))+(((-1.0)*x5341*x5344)));
evalcond[5]=((((-1.0)*r02*x5343))+(((-1.0)*sj0))+(((-1.0)*x5339*x5344))+((x5338*x5340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5347=IKsin(j0);
IkReal x5348=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.5723)*x5348))+(((-0.163941)*x5347)));
evalcond[1]=((((0.163941)*x5348))+(((-1.0)*py))+(((0.5723)*x5347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5349=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5349;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5350=((1.0)*cj5);
IkReal x5351=((((-1.0)*r01*x5350))+(((-1.0)*r00*sj5)));
j4eval[0]=x5351;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5350))))));
j4eval[2]=IKsign(x5351);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5352=((1.0)*cj5);
IkReal x5353=((((-1.0)*r01*x5352))+(((-1.0)*r00*sj5)));
j4eval[0]=x5353;
j4eval[1]=IKsign(x5353);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5352))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5354=((1.0)*cj5);
CheckValue<IkReal> x5355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5354))+(((-1.0)*r00*sj5)))),-1);
if(!x5355.valid){
continue;
}
CheckValue<IkReal> x5356 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5354))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5355.value)))+(x5356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5357=IKcos(j4);
IkReal x5358=IKsin(j4);
IkReal x5359=((1.0)*sj0);
IkReal x5360=(cj5*r00);
IkReal x5361=(cj5*r10);
IkReal x5362=(cj5*r20);
IkReal x5363=((1.0)*x5357);
IkReal x5364=((1.0)*x5358);
IkReal x5365=(sj5*x5357);
IkReal x5366=(sj5*x5358);
evalcond[0]=(((r22*x5358))+((r21*x5365))+(((-1.0)*x5362*x5363)));
evalcond[1]=((((-1.0)*r22*x5363))+((r21*x5366))+(((-1.0)*x5362*x5364)));
evalcond[2]=(cj0+(((-1.0)*x5361*x5364))+(((-1.0)*r12*x5363))+((r11*x5366)));
evalcond[3]=((((-1.0)*x5360*x5363))+((r02*x5358))+((r01*x5365))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5359))+((r12*x5358))+(((-1.0)*x5361*x5363))+((r11*x5365)));
evalcond[5]=((((-1.0)*x5360*x5364))+(((-1.0)*x5359))+(((-1.0)*r02*x5363))+((r01*x5366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5367=((1.0)*cj5);
CheckValue<IkReal> x5368 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5368.valid){
continue;
}
CheckValue<IkReal> x5369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5367)))),-1);
if(!x5369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5368.value)+(((1.5707963267949)*(x5369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5370=IKcos(j4);
IkReal x5371=IKsin(j4);
IkReal x5372=((1.0)*sj0);
IkReal x5373=(cj5*r00);
IkReal x5374=(cj5*r10);
IkReal x5375=(cj5*r20);
IkReal x5376=((1.0)*x5370);
IkReal x5377=((1.0)*x5371);
IkReal x5378=(sj5*x5370);
IkReal x5379=(sj5*x5371);
evalcond[0]=(((r21*x5378))+((r22*x5371))+(((-1.0)*x5375*x5376)));
evalcond[1]=((((-1.0)*r22*x5376))+((r21*x5379))+(((-1.0)*x5375*x5377)));
evalcond[2]=(cj0+(((-1.0)*r12*x5376))+((r11*x5379))+(((-1.0)*x5374*x5377)));
evalcond[3]=((((-1.0)*x5373*x5376))+((r02*x5371))+((r01*x5378))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5372))+((r12*x5371))+((r11*x5378))+(((-1.0)*x5374*x5376)));
evalcond[5]=((((-1.0)*x5372))+(((-1.0)*x5373*x5377))+(((-1.0)*r02*x5376))+((r01*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5380 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5380.valid){
continue;
}
CheckValue<IkReal> x5381=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5380.value)+(((1.5707963267949)*(x5381.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5382=IKcos(j4);
IkReal x5383=IKsin(j4);
IkReal x5384=((1.0)*sj0);
IkReal x5385=(cj5*r00);
IkReal x5386=(cj5*r10);
IkReal x5387=(cj5*r20);
IkReal x5388=((1.0)*x5382);
IkReal x5389=((1.0)*x5383);
IkReal x5390=(sj5*x5382);
IkReal x5391=(sj5*x5383);
evalcond[0]=((((-1.0)*x5387*x5388))+((r21*x5390))+((r22*x5383)));
evalcond[1]=((((-1.0)*x5387*x5389))+((r21*x5391))+(((-1.0)*r22*x5388)));
evalcond[2]=(cj0+((r11*x5391))+(((-1.0)*r12*x5388))+(((-1.0)*x5386*x5389)));
evalcond[3]=(((r02*x5383))+(((-1.0)*x5385*x5388))+((r01*x5390))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5390))+(((-1.0)*x5386*x5388))+((r12*x5383))+(((-1.0)*x5384)));
evalcond[5]=((((-1.0)*x5385*x5389))+(((-1.0)*r02*x5388))+((r01*x5391))+(((-1.0)*x5384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5392=IKsin(j0);
IkReal x5393=IKcos(j0);
IkReal x5394=(cj5*r01);
IkReal x5395=((0.1157)*sj5);
IkReal x5396=(cj5*r11);
evalcond[0]=(((r00*sj5))+x5394+(((-1.0)*x5393)));
evalcond[1]=(((r10*sj5))+x5396+(((-1.0)*x5392)));
evalcond[2]=((((-0.1157)*x5394))+(((-0.163941)*x5392))+(((-1.0)*px))+(((-1.0)*r00*x5395)));
evalcond[3]=((((-0.1157)*x5396))+(((-1.0)*py))+(((-1.0)*r10*x5395))+(((0.163941)*x5393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5397=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5397;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5398=((1.0)*cj5);
IkReal x5399=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5398)));
j4eval[0]=x5399;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5398))))));
j4eval[2]=IKsign(x5399);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5400=cj5*cj5;
IkReal x5401=(r01*r11);
IkReal x5402=((1.0)*r00);
IkReal x5403=(r01*sj5);
IkReal x5404=((((-1.0)*x5401))+(((-1.0)*r02*r12))+((x5400*x5401))+(((-1.0)*r10*x5400*x5402))+((cj5*r10*x5403))+((cj5*r00*r11*sj5)));
j4eval[0]=x5404;
j4eval[1]=IKsign(x5404);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5402))+((cj0*x5403))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5405=cj5*cj5;
IkReal x5406=(r01*r11);
IkReal x5407=(cj5*r00);
IkReal x5408=(r01*sj5);
CheckValue<IkReal> x5409=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5406))+((r11*sj5*x5407))+(((-1.0)*r02*r12))+((x5405*x5406))+(((-1.0)*r00*r10*x5405))+((cj5*r10*x5408)))),-1);
if(!x5409.valid){
continue;
}
CheckValue<IkReal> x5410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5407))+((cj0*x5408)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5409.value)))+(x5410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5411=IKcos(j4);
IkReal x5412=IKsin(j4);
IkReal x5413=(cj5*r00);
IkReal x5414=(r01*sj5);
IkReal x5415=(cj5*r10);
IkReal x5416=(cj5*r20);
IkReal x5417=((1.0)*x5411);
IkReal x5418=((1.0)*x5412);
IkReal x5419=(sj5*x5412);
IkReal x5420=(sj5*x5411);
evalcond[0]=(((r02*x5412))+((x5411*x5414))+(((-1.0)*x5413*x5417)));
evalcond[1]=((((-1.0)*x5415*x5417))+((r12*x5412))+((r11*x5420)));
evalcond[2]=((((-1.0)*x5416*x5418))+(((-1.0)*r22*x5417))+((r21*x5419)));
evalcond[3]=((1.0)+(((-1.0)*x5416*x5417))+((r22*x5412))+((r21*x5420)));
evalcond[4]=(((r11*x5419))+(((-1.0)*x5415*x5418))+cj0+(((-1.0)*r12*x5417)));
evalcond[5]=((((-1.0)*r02*x5417))+(((-1.0)*sj0))+((x5412*x5414))+(((-1.0)*x5413*x5418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5421=((1.0)*cj5);
CheckValue<IkReal> x5422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5421)))),-1);
if(!x5422.valid){
continue;
}
CheckValue<IkReal> x5423 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5421)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5422.value)))+(x5423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5424=IKcos(j4);
IkReal x5425=IKsin(j4);
IkReal x5426=(cj5*r00);
IkReal x5427=(r01*sj5);
IkReal x5428=(cj5*r10);
IkReal x5429=(cj5*r20);
IkReal x5430=((1.0)*x5424);
IkReal x5431=((1.0)*x5425);
IkReal x5432=(sj5*x5425);
IkReal x5433=(sj5*x5424);
evalcond[0]=((((-1.0)*x5426*x5430))+((r02*x5425))+((x5424*x5427)));
evalcond[1]=((((-1.0)*x5428*x5430))+((r12*x5425))+((r11*x5433)));
evalcond[2]=((((-1.0)*x5429*x5431))+(((-1.0)*r22*x5430))+((r21*x5432)));
evalcond[3]=((1.0)+((r22*x5425))+(((-1.0)*x5429*x5430))+((r21*x5433)));
evalcond[4]=((((-1.0)*x5428*x5431))+cj0+(((-1.0)*r12*x5430))+((r11*x5432)));
evalcond[5]=((((-1.0)*x5426*x5431))+(((-1.0)*sj0))+(((-1.0)*r02*x5430))+((x5425*x5427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5434 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5434.valid){
continue;
}
CheckValue<IkReal> x5435=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5434.value)+(((1.5707963267949)*(x5435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5436=IKcos(j4);
IkReal x5437=IKsin(j4);
IkReal x5438=(cj5*r00);
IkReal x5439=(r01*sj5);
IkReal x5440=(cj5*r10);
IkReal x5441=(cj5*r20);
IkReal x5442=((1.0)*x5436);
IkReal x5443=((1.0)*x5437);
IkReal x5444=(sj5*x5437);
IkReal x5445=(sj5*x5436);
evalcond[0]=(((r02*x5437))+((x5436*x5439))+(((-1.0)*x5438*x5442)));
evalcond[1]=((((-1.0)*x5440*x5442))+((r11*x5445))+((r12*x5437)));
evalcond[2]=((((-1.0)*r22*x5442))+(((-1.0)*x5441*x5443))+((r21*x5444)));
evalcond[3]=((1.0)+((r22*x5437))+(((-1.0)*x5441*x5442))+((r21*x5445)));
evalcond[4]=(cj0+(((-1.0)*r12*x5442))+(((-1.0)*x5440*x5443))+((r11*x5444)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5438*x5443))+(((-1.0)*r02*x5442))+((x5437*x5439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5446=IKcos(j0);
IkReal x5447=IKsin(j0);
evalcond[0]=((((-0.163941)*x5447))+(((-1.0)*px))+(((-0.5723)*x5446)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x5446))+(((-0.5723)*x5447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5448=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5448;
j4eval[1]=IKsign(x5448);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5449=((1.0)*cj5);
IkReal x5450=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5449)));
j4eval[0]=x5450;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5449))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5451=cj5*cj5;
IkReal x5452=((1.0)*r20);
IkReal x5453=(r01*r21);
IkReal x5454=(r21*sj5);
IkReal x5455=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5451*x5452))+((cj5*r00*x5454))+(((-1.0)*x5453))+((x5451*x5453)));
j4eval[0]=x5455;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x5452))+((cj0*x5454))))));
j4eval[2]=IKsign(x5455);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5456=cj5*cj5;
IkReal x5457=((1.0)*r20);
IkReal x5458=(r01*r21);
IkReal x5459=(r21*sj5);
CheckValue<IkReal> x5460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5457))+((cj0*x5459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5460.valid){
continue;
}
CheckValue<IkReal> x5461=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5456*x5458))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5456*x5457))+((cj5*r00*x5459))+(((-1.0)*x5458)))),-1);
if(!x5461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5460.value)+(((1.5707963267949)*(x5461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5462=IKcos(j4);
IkReal x5463=IKsin(j4);
IkReal x5464=(cj5*r00);
IkReal x5465=(cj5*r10);
IkReal x5466=(cj5*r20);
IkReal x5467=((1.0)*x5462);
IkReal x5468=((1.0)*x5463);
IkReal x5469=(sj5*x5462);
IkReal x5470=(sj5*x5463);
evalcond[0]=((((-1.0)*x5466*x5467))+((r22*x5463))+((r21*x5469)));
evalcond[1]=((((-1.0)*x5466*x5468))+((r21*x5470))+(((-1.0)*r22*x5467)));
evalcond[2]=((((-1.0)*x5464*x5467))+((r01*x5469))+cj0+((r02*x5463)));
evalcond[3]=(sj0+((r11*x5469))+((r12*x5463))+(((-1.0)*x5465*x5467)));
evalcond[4]=(cj0+(((-1.0)*r12*x5467))+((r11*x5470))+(((-1.0)*x5465*x5468)));
evalcond[5]=((((-1.0)*x5464*x5468))+(((-1.0)*sj0))+((r01*x5470))+(((-1.0)*r02*x5467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5471=((1.0)*cj5);
CheckValue<IkReal> x5472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5471)))),-1);
if(!x5472.valid){
continue;
}
CheckValue<IkReal> x5473 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5471)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5472.value)))+(x5473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5474=IKcos(j4);
IkReal x5475=IKsin(j4);
IkReal x5476=(cj5*r00);
IkReal x5477=(cj5*r10);
IkReal x5478=(cj5*r20);
IkReal x5479=((1.0)*x5474);
IkReal x5480=((1.0)*x5475);
IkReal x5481=(sj5*x5474);
IkReal x5482=(sj5*x5475);
evalcond[0]=((((-1.0)*x5478*x5479))+((r21*x5481))+((r22*x5475)));
evalcond[1]=(((r21*x5482))+(((-1.0)*r22*x5479))+(((-1.0)*x5478*x5480)));
evalcond[2]=(cj0+(((-1.0)*x5476*x5479))+((r01*x5481))+((r02*x5475)));
evalcond[3]=(sj0+(((-1.0)*x5477*x5479))+((r11*x5481))+((r12*x5475)));
evalcond[4]=(cj0+((r11*x5482))+(((-1.0)*r12*x5479))+(((-1.0)*x5477*x5480)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5482))+(((-1.0)*x5476*x5480))+(((-1.0)*r02*x5479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
CheckValue<IkReal> x5484=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5483.value)+(((1.5707963267949)*(x5484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5485=IKcos(j4);
IkReal x5486=IKsin(j4);
IkReal x5487=(cj5*r00);
IkReal x5488=(cj5*r10);
IkReal x5489=(cj5*r20);
IkReal x5490=((1.0)*x5485);
IkReal x5491=((1.0)*x5486);
IkReal x5492=(sj5*x5485);
IkReal x5493=(sj5*x5486);
evalcond[0]=((((-1.0)*x5489*x5490))+((r21*x5492))+((r22*x5486)));
evalcond[1]=((((-1.0)*x5489*x5491))+((r21*x5493))+(((-1.0)*r22*x5490)));
evalcond[2]=(((r01*x5492))+cj0+(((-1.0)*x5487*x5490))+((r02*x5486)));
evalcond[3]=(sj0+(((-1.0)*x5488*x5490))+((r12*x5486))+((r11*x5492)));
evalcond[4]=(cj0+(((-1.0)*x5488*x5491))+(((-1.0)*r12*x5490))+((r11*x5493)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5493))+(((-1.0)*x5487*x5491))+(((-1.0)*r02*x5490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5494=cj1*cj1;
IkReal x5495=(cj2*sj1);
IkReal x5496=(cj5*r01);
IkReal x5497=(r00*sj5);
IkReal x5498=((1000000.0)*py);
IkReal x5499=(cj1*sj2);
IkReal x5500=(cj1*sj1);
IkReal x5501=(sj2*x5494);
IkReal x5502=((115700.0)*r10*sj5);
IkReal x5503=((115700.0)*cj5*r11);
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(((((572300.0)*cj2*sj2))+(((-612000.0)*cj1*x5495))+(((-612000.0)*x5501))+(((-1144600.0)*cj2*x5501))+(((-1144600.0)*cj1*cj2*x5495))+(((572300.0)*x5500))),-1);
if(!x5504.valid){
continue;
}
CheckValue<IkReal> x5505=IKPowWithIntegerCheck(((((-1.0)*x5495))+(((-1.0)*x5499))),-1);
if(!x5505.valid){
continue;
}
if( IKabs(((x5504.value)*(((((163941.0)*x5497))+(((163941.0)*x5496))+(((-1.0)*x5495*x5498))+(((-1.0)*x5498*x5499))+(((-1.0)*x5499*x5503))+(((-1.0)*x5499*x5502))+(((-1.0)*x5495*x5502))+(((-1.0)*x5495*x5503)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5505.value)*(((((-1.0)*x5496))+(((-1.0)*x5497)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5504.value)*(((((163941.0)*x5497))+(((163941.0)*x5496))+(((-1.0)*x5495*x5498))+(((-1.0)*x5498*x5499))+(((-1.0)*x5499*x5503))+(((-1.0)*x5499*x5502))+(((-1.0)*x5495*x5502))+(((-1.0)*x5495*x5503))))))+IKsqr(((x5505.value)*(((((-1.0)*x5496))+(((-1.0)*x5497))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5504.value)*(((((163941.0)*x5497))+(((163941.0)*x5496))+(((-1.0)*x5495*x5498))+(((-1.0)*x5498*x5499))+(((-1.0)*x5499*x5503))+(((-1.0)*x5499*x5502))+(((-1.0)*x5495*x5502))+(((-1.0)*x5495*x5503))))), ((x5505.value)*(((((-1.0)*x5496))+(((-1.0)*x5497))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5506=IKcos(j0);
IkReal x5507=IKsin(j0);
IkReal x5508=(cj5*r01);
IkReal x5509=((0.1157)*sj5);
IkReal x5510=((1.0)*sj1);
IkReal x5511=(cj5*r11);
IkReal x5512=((1.0)*cj1*sj2);
IkReal x5513=((0.5723)*sj1*sj2);
IkReal x5514=(cj2*x5506);
IkReal x5515=(cj1*x5507);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5510*x5514))+x5508+(((-1.0)*x5506*x5512)));
evalcond[1]=((((-1.0)*cj2*x5507*x5510))+x5511+((r10*sj5))+(((-1.0)*x5507*x5512)));
evalcond[2]=((((-0.163941)*x5507))+(((-1.0)*r00*x5509))+(((-1.0)*x5506*x5513))+(((-1.0)*px))+(((-0.1157)*x5508))+(((0.5723)*cj1*x5514))+(((0.612)*cj1*x5506)));
evalcond[3]=((((-1.0)*r10*x5509))+(((0.612)*x5515))+(((-1.0)*x5507*x5513))+(((-0.1157)*x5511))+(((-1.0)*py))+(((0.163941)*x5506))+(((0.5723)*cj2*x5515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5516=((1.0)*cj5);
IkReal x5517=((((-1.0)*r01*x5516))+(((-1.0)*r00*sj5)));
j4eval[0]=x5517;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5516))))));
j4eval[2]=IKsign(x5517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5518=((1.0)*cj5);
IkReal x5519=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5518)));
j4eval[0]=x5519;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5518)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x5519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5520=((1.0)*sj0);
IkReal x5521=((1.0)*cj0);
IkReal x5522=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5522;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5521))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5520)))))+(IKabs(((((-1.0)*r02*x5521))+(((-1.0)*r12*x5520))))));
j4eval[2]=IKsign(x5522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5523=((-1.0)*r20);
IkReal x5525 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5525)==0){
continue;
}
IkReal x5524=pow(x5525,-0.5);
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5523),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5526.value));
IkReal gconst115=(r21*x5524);
IkReal gconst116=(x5523*x5524);
CheckValue<IkReal> x5527 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5527.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5527.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5528=((-1.0)*r20);
IkReal x5529=x5524;
CheckValue<IkReal> x5531 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5528),IKFAST_ATAN2_MAGTHRESH);
if(!x5531.valid){
continue;
}
IkReal x5530=((-1.0)*(x5531.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5530;
IkReal gconst114=x5530;
IkReal gconst115=(r21*x5529);
IkReal gconst116=(x5528*x5529);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5532=((-1.0)*r20);
IkReal x5533=x5524;
CheckValue<IkReal> x5535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5532),IKFAST_ATAN2_MAGTHRESH);
if(!x5535.valid){
continue;
}
IkReal x5534=((-1.0)*(x5535.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5534;
IkReal gconst114=x5534;
IkReal gconst115=(r21*x5533);
IkReal gconst116=(x5532*x5533);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5536=((-1.0)*r20);
IkReal x5537=x5524;
CheckValue<IkReal> x5539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5536),IKFAST_ATAN2_MAGTHRESH);
if(!x5539.valid){
continue;
}
IkReal x5538=((-1.0)*(x5539.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5538;
IkReal gconst114=x5538;
IkReal gconst115=(r21*x5537);
IkReal gconst116=(x5536*x5537);
IkReal x5540=((1.0)*(r22*r22));
CheckValue<IkReal> x5544=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5540))),-1);
if(!x5544.valid){
continue;
}
IkReal x5541=x5544.value;
IkReal x5542=((1.0)*x5541);
IkReal x5543=((((-2.0)*x5541*(r20*r20)*(r21*r21)))+(((-1.0)*x5542*(r20*r20*r20*r20)))+(((-1.0)*x5540))+(((-1.0)*x5542*(r21*r21*r21*r21))));
j4eval[0]=x5543;
j4eval[1]=IKsign(x5543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5545=(cj2*sj1);
IkReal x5546=(gconst115*r21);
IkReal x5547=(cj1*sj2);
IkReal x5548=((1.0)*gconst116*r20);
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x5548))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x5546))+(((-1.0)*(x5546*x5546))))),-1);
if(!x5549.valid){
continue;
}
CheckValue<IkReal> x5550 = IKatan2WithCheck(IkReal((((r22*x5547))+((r22*x5545)))),IkReal(((((-1.0)*x5545*x5548))+((x5546*x5547))+(((-1.0)*x5547*x5548))+((x5545*x5546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5549.value)))+(x5550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5551=IKsin(j4);
IkReal x5552=IKcos(j4);
IkReal x5553=(sj1*sj2);
IkReal x5554=((1.0)*x5552);
IkReal x5555=((1.0)*cj1*cj2);
IkReal x5556=(gconst115*x5551);
IkReal x5557=(gconst115*x5552);
IkReal x5558=((1.0)*gconst116*x5551);
evalcond[0]=((((-1.0)*r20*x5558))+((r21*x5556))+(((-1.0)*r22*x5554)));
evalcond[1]=(cj0+((r11*x5556))+(((-1.0)*r12*x5554))+(((-1.0)*r10*x5558)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5558))+((r01*x5556))+(((-1.0)*r02*x5554)));
evalcond[3]=(((cj2*sj1))+((r21*x5557))+(((-1.0)*gconst116*r20*x5554))+((cj1*sj2))+((r22*x5551)));
evalcond[4]=(((r01*x5557))+((r02*x5551))+((cj0*x5553))+(((-1.0)*cj0*x5555))+(((-1.0)*gconst116*r00*x5554)));
evalcond[5]=((((-1.0)*sj0*x5555))+((r11*x5557))+(((-1.0)*gconst116*r10*x5554))+((sj0*x5553))+((r12*x5551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5559=((1.0)*gconst116);
CheckValue<IkReal> x5560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5559)))),-1);
if(!x5560.valid){
continue;
}
CheckValue<IkReal> x5561 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5559))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5560.value)))+(x5561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5562=IKsin(j4);
IkReal x5563=IKcos(j4);
IkReal x5564=(sj1*sj2);
IkReal x5565=((1.0)*x5563);
IkReal x5566=((1.0)*cj1*cj2);
IkReal x5567=(gconst115*x5562);
IkReal x5568=(gconst115*x5563);
IkReal x5569=((1.0)*gconst116*x5562);
evalcond[0]=((((-1.0)*r22*x5565))+((r21*x5567))+(((-1.0)*r20*x5569)));
evalcond[1]=((((-1.0)*r12*x5565))+cj0+(((-1.0)*r10*x5569))+((r11*x5567)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5569))+(((-1.0)*r02*x5565))+((r01*x5567)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5562))+((r21*x5568))+(((-1.0)*gconst116*r20*x5565)));
evalcond[4]=(((r02*x5562))+((cj0*x5564))+(((-1.0)*gconst116*r00*x5565))+(((-1.0)*cj0*x5566))+((r01*x5568)));
evalcond[5]=((((-1.0)*sj0*x5566))+((r11*x5568))+(((-1.0)*gconst116*r10*x5565))+((sj0*x5564))+((r12*x5562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5570=((1.0)*gconst116);
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5570)))),-1);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5570))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5571.value)))+(x5572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5573=IKsin(j4);
IkReal x5574=IKcos(j4);
IkReal x5575=(sj1*sj2);
IkReal x5576=((1.0)*x5574);
IkReal x5577=((1.0)*cj1*cj2);
IkReal x5578=(gconst115*x5573);
IkReal x5579=(gconst115*x5574);
IkReal x5580=((1.0)*gconst116*x5573);
evalcond[0]=((((-1.0)*r20*x5580))+((r21*x5578))+(((-1.0)*r22*x5576)));
evalcond[1]=(cj0+(((-1.0)*r12*x5576))+(((-1.0)*r10*x5580))+((r11*x5578)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5576))+(((-1.0)*r00*x5580))+((r01*x5578)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5573))+((r21*x5579))+(((-1.0)*gconst116*r20*x5576)));
evalcond[4]=(((r02*x5573))+((cj0*x5575))+(((-1.0)*gconst116*r00*x5576))+(((-1.0)*cj0*x5577))+((r01*x5579)));
evalcond[5]=((((-1.0)*sj0*x5577))+((r11*x5579))+((r12*x5573))+((sj0*x5575))+(((-1.0)*gconst116*r10*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5581=((-1.0)*r21);
IkReal x5583 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5583)==0){
continue;
}
IkReal x5582=pow(x5583,-0.5);
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(x5581),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5584.value))));
IkReal gconst118=(x5581*x5582);
IkReal gconst119=((1.0)*r20*x5582);
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5585.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5586=((-1.0)*r21);
CheckValue<IkReal> x5589 = IKatan2WithCheck(IkReal(x5586),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5589.valid){
continue;
}
IkReal x5587=((1.0)*(x5589.value));
IkReal x5588=x5582;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5587)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5587)));
IkReal gconst118=(x5586*x5588);
IkReal gconst119=((1.0)*r20*x5588);
IkReal x5590=r22*r22;
IkReal x5591=((1.0)*x5590);
CheckValue<IkReal> x5595=IKPowWithIntegerCheck(((-1.0)+x5590),-1);
if(!x5595.valid){
continue;
}
IkReal x5592=x5595.value;
if((((1.0)+(((-1.0)*x5591)))) < -0.00001)
continue;
IkReal x5593=IKsqrt(((1.0)+(((-1.0)*x5591))));
IkReal x5594=(cj0*x5592*x5593);
j4eval[0]=((IKabs((x5594+(((-1.0)*x5591*x5594)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5596=((-1.0)*r21);
CheckValue<IkReal> x5599 = IKatan2WithCheck(IkReal(x5596),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5599.valid){
continue;
}
IkReal x5597=((1.0)*(x5599.value));
IkReal x5598=x5582;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5597)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5597)));
IkReal gconst118=(x5596*x5598);
IkReal gconst119=((1.0)*r20*x5598);
IkReal x5600=r22*r22;
IkReal x5601=((1.0)*x5600);
CheckValue<IkReal> x5605=IKPowWithIntegerCheck(((-1.0)+x5600),-1);
if(!x5605.valid){
continue;
}
IkReal x5602=x5605.value;
if((((1.0)+(((-1.0)*x5601)))) < -0.00001)
continue;
IkReal x5603=IKsqrt(((1.0)+(((-1.0)*x5601))));
IkReal x5604=(sj0*x5602*x5603);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5604+(((-1.0)*x5601*x5604))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5606=((-1.0)*r21);
CheckValue<IkReal> x5609 = IKatan2WithCheck(IkReal(x5606),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5609.valid){
continue;
}
IkReal x5607=((1.0)*(x5609.value));
IkReal x5608=x5582;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5607)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5607)));
IkReal gconst118=(x5606*x5608);
IkReal gconst119=((1.0)*r20*x5608);
IkReal x5610=r22*r22;
IkReal x5611=(r12*sj0);
IkReal x5612=(cj0*r02);
CheckValue<IkReal> x5616=IKPowWithIntegerCheck(((-1.0)+x5610),-1);
if(!x5616.valid){
continue;
}
IkReal x5613=x5616.value;
if((((1.0)+(((-1.0)*x5610)))) < -0.00001)
continue;
IkReal x5614=IKsqrt(((1.0)+(((-1.0)*x5610))));
IkReal x5615=(r22*x5613*x5614);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5612))+(((-1.0)*x5611)))))+(IKabs((((x5611*x5615))+((x5612*x5615))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5617=((1.0)*sj0);
IkReal x5618=((1.0)*gconst118);
CheckValue<IkReal> x5619=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5618)))),-1);
if(!x5619.valid){
continue;
}
CheckValue<IkReal> x5620 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5617))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5617))+((cj0*gconst119*r00))+(((-1.0)*cj0*r01*x5618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5619.value)))+(x5620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5621=IKsin(j4);
IkReal x5622=IKcos(j4);
IkReal x5623=(gconst118*r01);
IkReal x5624=(sj1*sj2);
IkReal x5625=(gconst119*r20);
IkReal x5626=(gconst119*r10);
IkReal x5627=(gconst119*r00);
IkReal x5628=(gconst118*r21);
IkReal x5629=(gconst118*r11);
IkReal x5630=((1.0)*x5622);
IkReal x5631=((1.0)*cj1*cj2);
IkReal x5632=((1.0)*x5621);
evalcond[0]=(((x5621*x5628))+(((-1.0)*x5625*x5632))+(((-1.0)*r22*x5630)));
evalcond[1]=((((-1.0)*r12*x5630))+cj0+((x5621*x5629))+(((-1.0)*x5626*x5632)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5630))+((x5621*x5623))+(((-1.0)*x5627*x5632)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5622*x5628))+(((-1.0)*x5625*x5630))+((r22*x5621)));
evalcond[4]=(((cj0*x5624))+((r02*x5621))+((x5622*x5623))+(((-1.0)*cj0*x5631))+(((-1.0)*x5627*x5630)));
evalcond[5]=((((-1.0)*sj0*x5631))+((sj0*x5624))+((x5622*x5629))+((r12*x5621))+(((-1.0)*x5626*x5630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5633=((1.0)*gconst119);
CheckValue<IkReal> x5634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5633))+(((-1.0)*gconst118*r10)))),-1);
if(!x5634.valid){
continue;
}
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5633))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5634.value)))+(x5635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5636=IKsin(j4);
IkReal x5637=IKcos(j4);
IkReal x5638=(gconst118*r01);
IkReal x5639=(sj1*sj2);
IkReal x5640=(gconst119*r20);
IkReal x5641=(gconst119*r10);
IkReal x5642=(gconst119*r00);
IkReal x5643=(gconst118*r21);
IkReal x5644=(gconst118*r11);
IkReal x5645=((1.0)*x5637);
IkReal x5646=((1.0)*cj1*cj2);
IkReal x5647=((1.0)*x5636);
evalcond[0]=((((-1.0)*r22*x5645))+((x5636*x5643))+(((-1.0)*x5640*x5647)));
evalcond[1]=(cj0+(((-1.0)*r12*x5645))+((x5636*x5644))+(((-1.0)*x5641*x5647)));
evalcond[2]=((((-1.0)*x5642*x5647))+(((-1.0)*sj0))+(((-1.0)*r02*x5645))+((x5636*x5638)));
evalcond[3]=(((cj2*sj1))+((x5637*x5643))+((cj1*sj2))+((r22*x5636))+(((-1.0)*x5640*x5645)));
evalcond[4]=((((-1.0)*x5642*x5645))+((cj0*x5639))+(((-1.0)*cj0*x5646))+((r02*x5636))+((x5637*x5638)));
evalcond[5]=(((r12*x5636))+((x5637*x5644))+(((-1.0)*sj0*x5646))+((sj0*x5639))+(((-1.0)*x5641*x5645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5648=((1.0)*gconst119);
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
CheckValue<IkReal> x5650=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5648)))),-1);
if(!x5650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5649.value)+(((1.5707963267949)*(x5650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5651=IKsin(j4);
IkReal x5652=IKcos(j4);
IkReal x5653=(gconst118*r01);
IkReal x5654=(sj1*sj2);
IkReal x5655=(gconst119*r20);
IkReal x5656=(gconst119*r10);
IkReal x5657=(gconst119*r00);
IkReal x5658=(gconst118*r21);
IkReal x5659=(gconst118*r11);
IkReal x5660=((1.0)*x5652);
IkReal x5661=((1.0)*cj1*cj2);
IkReal x5662=((1.0)*x5651);
evalcond[0]=((((-1.0)*r22*x5660))+((x5651*x5658))+(((-1.0)*x5655*x5662)));
evalcond[1]=(cj0+(((-1.0)*x5656*x5662))+((x5651*x5659))+(((-1.0)*r12*x5660)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5660))+(((-1.0)*x5657*x5662))+((x5651*x5653)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5652*x5658))+((r22*x5651))+(((-1.0)*x5655*x5660)));
evalcond[4]=(((cj0*x5654))+(((-1.0)*x5657*x5660))+((x5652*x5653))+(((-1.0)*cj0*x5661))+((r02*x5651)));
evalcond[5]=((((-1.0)*x5656*x5660))+((x5652*x5659))+((sj0*x5654))+((r12*x5651))+(((-1.0)*sj0*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5663=((-1.0)*r10);
IkReal x5665 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5665)==0){
continue;
}
IkReal x5664=pow(x5665,-0.5);
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5663),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5666.value));
IkReal gconst121=(r11*x5664);
IkReal gconst122=(x5663*x5664);
CheckValue<IkReal> x5667 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5667.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5667.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5668=((-1.0)*r10);
IkReal x5669=x5664;
CheckValue<IkReal> x5671 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5668),IKFAST_ATAN2_MAGTHRESH);
if(!x5671.valid){
continue;
}
IkReal x5670=((-1.0)*(x5671.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5670;
IkReal gconst120=x5670;
IkReal gconst121=(r11*x5669);
IkReal gconst122=(x5668*x5669);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5672=((1.0)*sj0);
IkReal x5673=((1.0)*gconst121);
CheckValue<IkReal> x5674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5673)))),-1);
if(!x5674.valid){
continue;
}
CheckValue<IkReal> x5675 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5672))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst121*r11*x5672))+((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x5673))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5674.value)))+(x5675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5676=IKsin(j4);
IkReal x5677=IKcos(j4);
IkReal x5678=(gconst121*r11);
IkReal x5679=(sj1*sj2);
IkReal x5680=(gconst122*r00);
IkReal x5681=(gconst122*r10);
IkReal x5682=(gconst122*r20);
IkReal x5683=((1.0)*x5677);
IkReal x5684=((1.0)*cj1*cj2);
IkReal x5685=((1.0)*x5676);
IkReal x5686=(gconst121*x5676);
IkReal x5687=(gconst121*x5677);
evalcond[0]=((((-1.0)*r22*x5683))+((r21*x5686))+(((-1.0)*x5682*x5685)));
evalcond[1]=((((-1.0)*x5681*x5685))+cj0+((x5676*x5678))+(((-1.0)*r12*x5683)));
evalcond[2]=((((-1.0)*r02*x5683))+(((-1.0)*sj0))+(((-1.0)*x5680*x5685))+((r01*x5686)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5676))+((r21*x5687))+(((-1.0)*x5682*x5683)));
evalcond[4]=(((r02*x5676))+((cj0*x5679))+(((-1.0)*cj0*x5684))+(((-1.0)*x5680*x5683))+((r01*x5687)));
evalcond[5]=((((-1.0)*x5681*x5683))+((x5677*x5678))+((sj0*x5679))+(((-1.0)*sj0*x5684))+((r12*x5676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5688=((1.0)*gconst122);
CheckValue<IkReal> x5689 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5688))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5689.valid){
continue;
}
CheckValue<IkReal> x5690=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5688)))),-1);
if(!x5690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5689.value)+(((1.5707963267949)*(x5690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5691=IKsin(j4);
IkReal x5692=IKcos(j4);
IkReal x5693=(gconst121*r11);
IkReal x5694=(sj1*sj2);
IkReal x5695=(gconst122*r00);
IkReal x5696=(gconst122*r10);
IkReal x5697=(gconst122*r20);
IkReal x5698=((1.0)*x5692);
IkReal x5699=((1.0)*cj1*cj2);
IkReal x5700=((1.0)*x5691);
IkReal x5701=(gconst121*x5691);
IkReal x5702=(gconst121*x5692);
evalcond[0]=((((-1.0)*x5697*x5700))+(((-1.0)*r22*x5698))+((r21*x5701)));
evalcond[1]=(cj0+((x5691*x5693))+(((-1.0)*r12*x5698))+(((-1.0)*x5696*x5700)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5698))+(((-1.0)*x5695*x5700))+((r01*x5701)));
evalcond[3]=(((cj2*sj1))+((r22*x5691))+((cj1*sj2))+((r21*x5702))+(((-1.0)*x5697*x5698)));
evalcond[4]=((((-1.0)*cj0*x5699))+((r02*x5691))+((r01*x5702))+((cj0*x5694))+(((-1.0)*x5695*x5698)));
evalcond[5]=((((-1.0)*x5696*x5698))+((x5692*x5693))+(((-1.0)*sj0*x5699))+((sj0*x5694))+((r12*x5691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5703=((-1.0)*r11);
IkReal x5705 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5705)==0){
continue;
}
IkReal x5704=pow(x5705,-0.5);
CheckValue<IkReal> x5706 = IKatan2WithCheck(IkReal(x5703),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5706.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5706.value))));
IkReal gconst124=(x5703*x5704);
IkReal gconst125=((1.0)*r10*x5704);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5707.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5708=((-1.0)*r11);
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(x5708),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
IkReal x5709=((1.0)*(x5711.value));
IkReal x5710=x5704;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5709)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5709)));
IkReal gconst124=(x5708*x5710);
IkReal gconst125=((1.0)*r10*x5710);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5712=((-1.0)*r11);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(x5712),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
IkReal x5713=((1.0)*(x5715.value));
IkReal x5714=x5704;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5713)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5713)));
IkReal gconst124=(x5712*x5714);
IkReal gconst125=((1.0)*r10*x5714);
IkReal x5716=r12*r12;
IkReal x5717=((1.0)*sj0);
IkReal x5718=(cj0*r02);
IkReal x5719=x5704;
j4eval[0]=((IKabs(((((-1.0)*x5718))+(((-1.0)*r12*x5717)))))+(IKabs((((r12*x5718*x5719))+((sj0*x5716*x5719))+(((-1.0)*x5717*x5719))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5720=((-1.0)*r11);
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(x5720),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
IkReal x5721=((1.0)*(x5723.value));
IkReal x5722=x5704;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5721)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5721)));
IkReal gconst124=(x5720*x5722);
IkReal gconst125=((1.0)*r10*x5722);
IkReal x5724=r12*r12;
IkReal x5725=((1.0)+(((-1.0)*x5724)));
IkReal x5726=(cj2*r22*sj1);
IkReal x5727=(cj1*r22*sj2);
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(x5725,-1);
if(!x5734.valid){
continue;
}
IkReal x5728=x5734.value;
CheckValue<IkReal> x5735=IKPowWithIntegerCheck(((-1.0)+x5724),-1);
if(!x5735.valid){
continue;
}
IkReal x5729=x5735.value;
IkReal x5730=((1.0)*x5728);
if((x5725) < -0.00001)
continue;
IkReal x5731=IKsqrt(x5725);
IkReal x5732=((1.0)*r12*x5729*x5731);
IkReal x5733=((((-2.0)*r10*r11*r20*r21*x5728))+(((-1.0)*x5730*(r10*r10)*(r20*r20)))+(((-1.0)*x5730*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x5733;
j4eval[1]=IKsign(x5733);
j4eval[2]=((IKabs(((((-1.0)*x5727*x5732))+(((-1.0)*x5726*x5732)))))+(IKabs((x5726+x5727))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5736=(gconst124*r21);
IkReal x5737=(cj1*sj2);
IkReal x5738=(cj2*sj1);
IkReal x5739=(gconst125*r20);
CheckValue<IkReal> x5740=IKPowWithIntegerCheck(IKsign(((((2.0)*x5736*x5739))+(((-1.0)*(x5739*x5739)))+(((-1.0)*(x5736*x5736)))+(((-1.0)*(r22*r22))))),-1);
if(!x5740.valid){
continue;
}
CheckValue<IkReal> x5741 = IKatan2WithCheck(IkReal((((r22*x5737))+((r22*x5738)))),IkReal(((((-1.0)*x5738*x5739))+(((-1.0)*x5737*x5739))+((x5736*x5738))+((x5736*x5737)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5740.value)))+(x5741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5742=IKsin(j4);
IkReal x5743=IKcos(j4);
IkReal x5744=(sj1*sj2);
IkReal x5745=(gconst125*r20);
IkReal x5746=(gconst124*r01);
IkReal x5747=(gconst125*r00);
IkReal x5748=(gconst125*r10);
IkReal x5749=((1.0)*x5743);
IkReal x5750=((1.0)*cj1*cj2);
IkReal x5751=((1.0)*x5742);
IkReal x5752=(gconst124*x5742);
IkReal x5753=(gconst124*x5743);
evalcond[0]=(((r21*x5752))+(((-1.0)*x5745*x5751))+(((-1.0)*r22*x5749)));
evalcond[1]=(cj0+(((-1.0)*r12*x5749))+(((-1.0)*x5748*x5751))+((r11*x5752)));
evalcond[2]=((((-1.0)*sj0))+((x5742*x5746))+(((-1.0)*x5747*x5751))+(((-1.0)*r02*x5749)));
evalcond[3]=(((cj2*sj1))+((r21*x5753))+((r22*x5742))+((cj1*sj2))+(((-1.0)*x5745*x5749)));
evalcond[4]=((((-1.0)*x5747*x5749))+((x5743*x5746))+(((-1.0)*cj0*x5750))+((cj0*x5744))+((r02*x5742)));
evalcond[5]=((((-1.0)*sj0*x5750))+((sj0*x5744))+(((-1.0)*x5748*x5749))+((r11*x5753))+((r12*x5742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5754=((1.0)*sj0);
IkReal x5755=((1.0)*cj0);
CheckValue<IkReal> x5756 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5754))+(((-1.0)*r02*x5755)))),IkReal(((((-1.0)*gconst124*r11*x5754))+((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x5755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5756.valid){
continue;
}
CheckValue<IkReal> x5757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5756.value)+(((1.5707963267949)*(x5757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5758=IKsin(j4);
IkReal x5759=IKcos(j4);
IkReal x5760=(sj1*sj2);
IkReal x5761=(gconst125*r20);
IkReal x5762=(gconst124*r01);
IkReal x5763=(gconst125*r00);
IkReal x5764=(gconst125*r10);
IkReal x5765=((1.0)*x5759);
IkReal x5766=((1.0)*cj1*cj2);
IkReal x5767=((1.0)*x5758);
IkReal x5768=(gconst124*x5758);
IkReal x5769=(gconst124*x5759);
evalcond[0]=((((-1.0)*x5761*x5767))+((r21*x5768))+(((-1.0)*r22*x5765)));
evalcond[1]=(cj0+(((-1.0)*r12*x5765))+((r11*x5768))+(((-1.0)*x5764*x5767)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5763*x5767))+(((-1.0)*r02*x5765))+((x5758*x5762)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5761*x5765))+((cj1*sj2))+((r21*x5769))+((r22*x5758)));
evalcond[4]=((((-1.0)*cj0*x5766))+((cj0*x5760))+(((-1.0)*x5763*x5765))+((r02*x5758))+((x5759*x5762)));
evalcond[5]=((((-1.0)*sj0*x5766))+((r11*x5769))+(((-1.0)*x5764*x5765))+((r12*x5758))+((sj0*x5760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5770=((1.0)*gconst125);
CheckValue<IkReal> x5771=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5770)))),-1);
if(!x5771.valid){
continue;
}
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5770))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5771.value)))+(x5772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5773=IKsin(j4);
IkReal x5774=IKcos(j4);
IkReal x5775=(sj1*sj2);
IkReal x5776=(gconst125*r20);
IkReal x5777=(gconst124*r01);
IkReal x5778=(gconst125*r00);
IkReal x5779=(gconst125*r10);
IkReal x5780=((1.0)*x5774);
IkReal x5781=((1.0)*cj1*cj2);
IkReal x5782=((1.0)*x5773);
IkReal x5783=(gconst124*x5773);
IkReal x5784=(gconst124*x5774);
evalcond[0]=(((r21*x5783))+(((-1.0)*x5776*x5782))+(((-1.0)*r22*x5780)));
evalcond[1]=(cj0+((r11*x5783))+(((-1.0)*x5779*x5782))+(((-1.0)*r12*x5780)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5778*x5782))+(((-1.0)*r02*x5780))+((x5773*x5777)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5784))+((r22*x5773))+(((-1.0)*x5776*x5780)));
evalcond[4]=(((x5774*x5777))+((cj0*x5775))+(((-1.0)*x5778*x5780))+((r02*x5773))+(((-1.0)*cj0*x5781)));
evalcond[5]=(((r11*x5784))+(((-1.0)*x5779*x5780))+((r12*x5773))+(((-1.0)*sj0*x5781))+((sj0*x5775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5785=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5785;
j4eval[1]=IKsign(x5785);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5786=((1.0)*cj5);
IkReal x5787=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5786)));
j4eval[0]=x5787;
j4eval[1]=((IKabs(((((-1.0)*r20*x5786))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5788=cj5*cj5;
IkReal x5789=r11*r11;
IkReal x5790=(cj5*r10);
IkReal x5791=(r11*sj5);
IkReal x5792=((((-1.0)*x5788*(r10*r10)))+(((2.0)*x5790*x5791))+(((-1.0)*(r12*r12)))+(((-1.0)*x5789))+((x5788*x5789)));
j4eval[0]=x5792;
j4eval[1]=IKsign(x5792);
j4eval[2]=((IKabs(((((-1.0)*x5790))+x5791)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5793=cj5*cj5;
IkReal x5794=r11*r11;
IkReal x5795=(cj5*r10);
IkReal x5796=(r11*sj5);
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign((((x5793*x5794))+(((-1.0)*x5793*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5795*x5796))+(((-1.0)*x5794)))),-1);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798 = IKatan2WithCheck(IkReal(((((-1.0)*x5795))+x5796)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5797.value)))+(x5798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKcos(j4);
IkReal x5800=IKsin(j4);
IkReal x5801=(cj5*r00);
IkReal x5802=(cj5*r10);
IkReal x5803=(r21*sj5);
IkReal x5804=(cj5*r20);
IkReal x5805=((1.0)*x5799);
IkReal x5806=((1.0)*x5800);
IkReal x5807=(sj5*x5800);
IkReal x5808=(sj5*x5799);
evalcond[0]=((((-1.0)*x5802*x5805))+((r11*x5808))+((r12*x5800)));
evalcond[1]=(((x5800*x5803))+(((-1.0)*x5804*x5806))+(((-1.0)*r22*x5805)));
evalcond[2]=(((r01*x5807))+(((-1.0)*r02*x5805))+(((-1.0)*x5801*x5806)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5805))+(((-1.0)*x5802*x5806))+((r11*x5807)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5804*x5805))+((cj1*sj2))+((x5799*x5803))+((r22*x5800)));
evalcond[5]=(((r01*x5808))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5800))+(((-1.0)*x5801*x5805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5809=((1.0)*cj5);
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5809))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
CheckValue<IkReal> x5811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5809)))),-1);
if(!x5811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5810.value)+(((1.5707963267949)*(x5811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5812=IKcos(j4);
IkReal x5813=IKsin(j4);
IkReal x5814=(cj5*r00);
IkReal x5815=(cj5*r10);
IkReal x5816=(r21*sj5);
IkReal x5817=(cj5*r20);
IkReal x5818=((1.0)*x5812);
IkReal x5819=((1.0)*x5813);
IkReal x5820=(sj5*x5813);
IkReal x5821=(sj5*x5812);
evalcond[0]=((((-1.0)*x5815*x5818))+((r11*x5821))+((r12*x5813)));
evalcond[1]=(((x5813*x5816))+(((-1.0)*x5817*x5819))+(((-1.0)*r22*x5818)));
evalcond[2]=((((-1.0)*x5814*x5819))+(((-1.0)*r02*x5818))+((r01*x5820)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5818))+(((-1.0)*x5815*x5819))+((r11*x5820)));
evalcond[4]=(((cj2*sj1))+((r22*x5813))+((cj1*sj2))+(((-1.0)*x5817*x5818))+((x5812*x5816)));
evalcond[5]=((((-1.0)*x5814*x5818))+((r02*x5813))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5822=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5822.valid){
continue;
}
CheckValue<IkReal> x5823 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5822.value)))+(x5823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5824=IKcos(j4);
IkReal x5825=IKsin(j4);
IkReal x5826=(cj5*r00);
IkReal x5827=(cj5*r10);
IkReal x5828=(r21*sj5);
IkReal x5829=(cj5*r20);
IkReal x5830=((1.0)*x5824);
IkReal x5831=((1.0)*x5825);
IkReal x5832=(sj5*x5825);
IkReal x5833=(sj5*x5824);
evalcond[0]=(((r12*x5825))+((r11*x5833))+(((-1.0)*x5827*x5830)));
evalcond[1]=((((-1.0)*r22*x5830))+((x5825*x5828))+(((-1.0)*x5829*x5831)));
evalcond[2]=((((-1.0)*r02*x5830))+((r01*x5832))+(((-1.0)*x5826*x5831)));
evalcond[3]=((1.0)+((r11*x5832))+(((-1.0)*x5827*x5831))+(((-1.0)*r12*x5830)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x5824*x5828))+((r22*x5825))+(((-1.0)*x5829*x5830)));
evalcond[5]=(((r02*x5825))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5833))+(((-1.0)*x5826*x5830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5834=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5834;
j4eval[1]=IKsign(x5834);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5835=((1.0)*cj5);
IkReal x5836=((((-1.0)*r21*x5835))+(((-1.0)*r20*sj5)));
j4eval[0]=x5836;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5835))))));
j4eval[2]=IKsign(x5836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5837=cj5*cj5;
IkReal x5838=r11*r11;
IkReal x5839=(r11*sj5);
IkReal x5840=(cj5*r10);
IkReal x5841=((r12*r12)+(((-2.0)*x5839*x5840))+(((-1.0)*x5837*x5838))+((x5837*(r10*r10)))+x5838);
j4eval[0]=x5841;
j4eval[1]=IKsign(x5841);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5840))+x5839))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5842=cj5*cj5;
IkReal x5843=r11*r11;
IkReal x5844=(cj5*r10);
IkReal x5845=(r11*sj5);
CheckValue<IkReal> x5846=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5842*(r10*r10)))+(((-2.0)*x5844*x5845))+(((-1.0)*x5842*x5843))+x5843)),-1);
if(!x5846.valid){
continue;
}
CheckValue<IkReal> x5847 = IKatan2WithCheck(IkReal(((((-1.0)*x5844))+x5845)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5846.value)))+(x5847.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5848=IKcos(j4);
IkReal x5849=IKsin(j4);
IkReal x5850=(cj5*r00);
IkReal x5851=(cj5*r10);
IkReal x5852=(r21*sj5);
IkReal x5853=(cj5*r20);
IkReal x5854=((1.0)*x5848);
IkReal x5855=((1.0)*x5849);
IkReal x5856=(sj5*x5849);
IkReal x5857=(sj5*x5848);
evalcond[0]=(((r11*x5857))+((r12*x5849))+(((-1.0)*x5851*x5854)));
evalcond[1]=((((-1.0)*x5853*x5855))+(((-1.0)*r22*x5854))+((x5849*x5852)));
evalcond[2]=(((r01*x5856))+(((-1.0)*r02*x5854))+(((-1.0)*x5850*x5855)));
evalcond[3]=((-1.0)+((r11*x5856))+(((-1.0)*r12*x5854))+(((-1.0)*x5851*x5855)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5853*x5854))+((cj1*sj2))+((x5848*x5852))+((r22*x5849)));
evalcond[5]=(((r01*x5857))+(((-1.0)*sj1*sj2))+(((-1.0)*x5850*x5854))+((cj1*cj2))+((r02*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5858=((1.0)*cj5);
CheckValue<IkReal> x5859=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5858))+(((-1.0)*r20*sj5)))),-1);
if(!x5859.valid){
continue;
}
CheckValue<IkReal> x5860 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5858)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5859.value)))+(x5860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5861=IKcos(j4);
IkReal x5862=IKsin(j4);
IkReal x5863=(cj5*r00);
IkReal x5864=(cj5*r10);
IkReal x5865=(r21*sj5);
IkReal x5866=(cj5*r20);
IkReal x5867=((1.0)*x5861);
IkReal x5868=((1.0)*x5862);
IkReal x5869=(sj5*x5862);
IkReal x5870=(sj5*x5861);
evalcond[0]=(((r11*x5870))+((r12*x5862))+(((-1.0)*x5864*x5867)));
evalcond[1]=((((-1.0)*r22*x5867))+(((-1.0)*x5866*x5868))+((x5862*x5865)));
evalcond[2]=((((-1.0)*x5863*x5868))+(((-1.0)*r02*x5867))+((r01*x5869)));
evalcond[3]=((-1.0)+((r11*x5869))+(((-1.0)*x5864*x5868))+(((-1.0)*r12*x5867)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5866*x5867))+((r22*x5862))+((x5861*x5865))+((cj1*sj2)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5863*x5867))+((r02*x5862))+((cj1*cj2))+((r01*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5871 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5871.valid){
continue;
}
CheckValue<IkReal> x5872=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5871.value)+(((1.5707963267949)*(x5872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5873=IKcos(j4);
IkReal x5874=IKsin(j4);
IkReal x5875=(cj5*r00);
IkReal x5876=(cj5*r10);
IkReal x5877=(r21*sj5);
IkReal x5878=(cj5*r20);
IkReal x5879=((1.0)*x5873);
IkReal x5880=((1.0)*x5874);
IkReal x5881=(sj5*x5874);
IkReal x5882=(sj5*x5873);
evalcond[0]=(((r11*x5882))+((r12*x5874))+(((-1.0)*x5876*x5879)));
evalcond[1]=((((-1.0)*r22*x5879))+((x5874*x5877))+(((-1.0)*x5878*x5880)));
evalcond[2]=(((r01*x5881))+(((-1.0)*x5875*x5880))+(((-1.0)*r02*x5879)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5879))+(((-1.0)*x5876*x5880))+((r11*x5881)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5874))+(((-1.0)*x5878*x5879))+((x5873*x5877)));
evalcond[5]=((((-1.0)*x5875*x5879))+((r01*x5882))+(((-1.0)*sj1*sj2))+((r02*x5874))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5883=((-1.0)*r00);
IkReal x5885 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5885)==0){
continue;
}
IkReal x5884=pow(x5885,-0.5);
CheckValue<IkReal> x5886 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5883),IKFAST_ATAN2_MAGTHRESH);
if(!x5886.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5886.value));
IkReal gconst127=(r01*x5884);
IkReal gconst128=(x5883*x5884);
CheckValue<IkReal> x5887 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5887.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5887.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5888=((-1.0)*r00);
IkReal x5889=x5884;
CheckValue<IkReal> x5891 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5888),IKFAST_ATAN2_MAGTHRESH);
if(!x5891.valid){
continue;
}
IkReal x5890=((-1.0)*(x5891.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5890;
IkReal gconst126=x5890;
IkReal gconst127=(r01*x5889);
IkReal gconst128=(x5888*x5889);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5892=((1.0)*sj0);
IkReal x5893=((1.0)*gconst127);
CheckValue<IkReal> x5894 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5892))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst127*r11*x5892))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x5893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5894.valid){
continue;
}
CheckValue<IkReal> x5895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5893))+(((-1.0)*gconst128*r21)))),-1);
if(!x5895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5894.value)+(((1.5707963267949)*(x5895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5896=IKsin(j4);
IkReal x5897=IKcos(j4);
IkReal x5898=(gconst127*r01);
IkReal x5899=(sj1*sj2);
IkReal x5900=(gconst128*r10);
IkReal x5901=(gconst128*r00);
IkReal x5902=(gconst128*r20);
IkReal x5903=((1.0)*x5897);
IkReal x5904=((1.0)*cj1*cj2);
IkReal x5905=((1.0)*x5896);
IkReal x5906=(gconst127*x5897);
IkReal x5907=(gconst127*x5896);
evalcond[0]=((((-1.0)*x5902*x5905))+(((-1.0)*r22*x5903))+((r21*x5907)));
evalcond[1]=((((-1.0)*r12*x5903))+cj0+(((-1.0)*x5900*x5905))+((r11*x5907)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5901*x5905))+(((-1.0)*r02*x5903))+((x5896*x5898)));
evalcond[3]=(((r22*x5896))+((cj2*sj1))+(((-1.0)*x5902*x5903))+((cj1*sj2))+((r21*x5906)));
evalcond[4]=(((x5897*x5898))+((cj0*x5899))+(((-1.0)*cj0*x5904))+((r02*x5896))+(((-1.0)*x5901*x5903)));
evalcond[5]=(((sj0*x5899))+(((-1.0)*sj0*x5904))+(((-1.0)*x5900*x5903))+((r12*x5896))+((r11*x5906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5908=((1.0)*gconst128);
CheckValue<IkReal> x5909 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5909.valid){
continue;
}
CheckValue<IkReal> x5910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5908))+(((-1.0)*gconst127*r10)))),-1);
if(!x5910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5909.value)+(((1.5707963267949)*(x5910.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5911=IKsin(j4);
IkReal x5912=IKcos(j4);
IkReal x5913=(gconst127*r01);
IkReal x5914=(sj1*sj2);
IkReal x5915=(gconst128*r10);
IkReal x5916=(gconst128*r00);
IkReal x5917=(gconst128*r20);
IkReal x5918=((1.0)*x5912);
IkReal x5919=((1.0)*cj1*cj2);
IkReal x5920=((1.0)*x5911);
IkReal x5921=(gconst127*x5912);
IkReal x5922=(gconst127*x5911);
evalcond[0]=((((-1.0)*r22*x5918))+(((-1.0)*x5917*x5920))+((r21*x5922)));
evalcond[1]=((((-1.0)*r12*x5918))+cj0+((r11*x5922))+(((-1.0)*x5915*x5920)));
evalcond[2]=(((x5911*x5913))+(((-1.0)*sj0))+(((-1.0)*x5916*x5920))+(((-1.0)*r02*x5918)));
evalcond[3]=(((cj2*sj1))+((r22*x5911))+((cj1*sj2))+((r21*x5921))+(((-1.0)*x5917*x5918)));
evalcond[4]=((((-1.0)*cj0*x5919))+((x5912*x5913))+((r02*x5911))+(((-1.0)*x5916*x5918))+((cj0*x5914)));
evalcond[5]=(((r12*x5911))+((sj0*x5914))+((r11*x5921))+(((-1.0)*sj0*x5919))+(((-1.0)*x5915*x5918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5923=((-1.0)*r01);
IkReal x5925 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5925)==0){
continue;
}
IkReal x5924=pow(x5925,-0.5);
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal(x5923),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5926.value))));
IkReal gconst130=(x5923*x5924);
IkReal gconst131=((1.0)*r00*x5924);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5927.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5928=((-1.0)*r01);
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal(x5928),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
IkReal x5929=((1.0)*(x5931.value));
IkReal x5930=x5924;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5929)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5929)));
IkReal gconst130=(x5928*x5930);
IkReal gconst131=((1.0)*r00*x5930);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5932=((-1.0)*r01);
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(x5932),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
IkReal x5933=((1.0)*(x5935.value));
IkReal x5934=x5924;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5933)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5933)));
IkReal gconst130=(x5932*x5934);
IkReal gconst131=((1.0)*r00*x5934);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5936=((-1.0)*r01);
CheckValue<IkReal> x5939 = IKatan2WithCheck(IkReal(x5936),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5939.valid){
continue;
}
IkReal x5937=((1.0)*(x5939.value));
IkReal x5938=x5924;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5937)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5937)));
IkReal gconst130=(x5936*x5938);
IkReal gconst131=((1.0)*r00*x5938);
IkReal x5940=r02*r02;
IkReal x5941=(r12*sj0);
IkReal x5942=((1.0)*cj0);
IkReal x5943=x5924;
j4eval[0]=((IKabs(((((-1.0)*x5942*x5943))+((r02*x5941*x5943))+((cj0*x5940*x5943)))))+(IKabs(((((-1.0)*x5941))+(((-1.0)*r02*x5942))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5944=((1.0)*sj0);
IkReal x5945=((1.0)*gconst130);
CheckValue<IkReal> x5946 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5944))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5945))+(((-1.0)*gconst130*r11*x5944))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5946.valid){
continue;
}
CheckValue<IkReal> x5947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5945))+(((-1.0)*gconst131*r21)))),-1);
if(!x5947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5946.value)+(((1.5707963267949)*(x5947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5948=IKsin(j4);
IkReal x5949=IKcos(j4);
IkReal x5950=(gconst131*r10);
IkReal x5951=(sj1*sj2);
IkReal x5952=(gconst131*r20);
IkReal x5953=(gconst131*r00);
IkReal x5954=((1.0)*x5949);
IkReal x5955=((1.0)*cj1*cj2);
IkReal x5956=(gconst130*x5948);
IkReal x5957=((1.0)*x5948);
IkReal x5958=(gconst130*x5949);
evalcond[0]=(((r21*x5956))+(((-1.0)*r22*x5954))+(((-1.0)*x5952*x5957)));
evalcond[1]=(cj0+((r11*x5956))+(((-1.0)*x5950*x5957))+(((-1.0)*r12*x5954)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5954))+(((-1.0)*x5953*x5957))+((r01*x5956)));
evalcond[3]=(((cj2*sj1))+((r21*x5958))+((cj1*sj2))+((r22*x5948))+(((-1.0)*x5952*x5954)));
evalcond[4]=(((cj0*x5951))+(((-1.0)*cj0*x5955))+(((-1.0)*x5953*x5954))+((r02*x5948))+((r01*x5958)));
evalcond[5]=(((sj0*x5951))+((r11*x5958))+(((-1.0)*x5950*x5954))+((r12*x5948))+(((-1.0)*sj0*x5955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5959=((1.0)*gconst131);
CheckValue<IkReal> x5960 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x5959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5960.valid){
continue;
}
CheckValue<IkReal> x5961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x5959)))),-1);
if(!x5961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5960.value)+(((1.5707963267949)*(x5961.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5962=IKsin(j4);
IkReal x5963=IKcos(j4);
IkReal x5964=(gconst131*r10);
IkReal x5965=(sj1*sj2);
IkReal x5966=(gconst131*r20);
IkReal x5967=(gconst131*r00);
IkReal x5968=((1.0)*x5963);
IkReal x5969=((1.0)*cj1*cj2);
IkReal x5970=(gconst130*x5962);
IkReal x5971=((1.0)*x5962);
IkReal x5972=(gconst130*x5963);
evalcond[0]=((((-1.0)*r22*x5968))+((r21*x5970))+(((-1.0)*x5966*x5971)));
evalcond[1]=(cj0+(((-1.0)*r12*x5968))+((r11*x5970))+(((-1.0)*x5964*x5971)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5970))+(((-1.0)*x5967*x5971))+(((-1.0)*r02*x5968)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5962))+((r21*x5972))+(((-1.0)*x5966*x5968)));
evalcond[4]=(((r02*x5962))+((cj0*x5965))+(((-1.0)*cj0*x5969))+((r01*x5972))+(((-1.0)*x5967*x5968)));
evalcond[5]=((((-1.0)*sj0*x5969))+((r11*x5972))+((r12*x5962))+((sj0*x5965))+(((-1.0)*x5964*x5968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5973=((1.0)*gconst131);
CheckValue<IkReal> x5974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5973)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5974.valid){
continue;
}
CheckValue<IkReal> x5975=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5973)))),-1);
if(!x5975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5974.value)+(((1.5707963267949)*(x5975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5976=IKsin(j4);
IkReal x5977=IKcos(j4);
IkReal x5978=(gconst131*r10);
IkReal x5979=(sj1*sj2);
IkReal x5980=(gconst131*r20);
IkReal x5981=(gconst131*r00);
IkReal x5982=((1.0)*x5977);
IkReal x5983=((1.0)*cj1*cj2);
IkReal x5984=(gconst130*x5976);
IkReal x5985=((1.0)*x5976);
IkReal x5986=(gconst130*x5977);
evalcond[0]=((((-1.0)*x5980*x5985))+((r21*x5984))+(((-1.0)*r22*x5982)));
evalcond[1]=((((-1.0)*r12*x5982))+(((-1.0)*x5978*x5985))+cj0+((r11*x5984)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5982))+(((-1.0)*x5981*x5985))+((r01*x5984)));
evalcond[3]=((((-1.0)*x5980*x5982))+((cj2*sj1))+((r21*x5986))+((cj1*sj2))+((r22*x5976)));
evalcond[4]=(((cj0*x5979))+(((-1.0)*x5981*x5982))+(((-1.0)*cj0*x5983))+((r02*x5976))+((r01*x5986)));
evalcond[5]=((((-1.0)*x5978*x5982))+((r11*x5986))+(((-1.0)*sj0*x5983))+((r12*x5976))+((sj0*x5979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5987=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5987;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5988=((1.0)*cj5);
IkReal x5989=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5988)));
j4eval[0]=x5989;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5988))))));
j4eval[2]=IKsign(x5989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5990=cj5*cj5;
IkReal x5991=r01*r01;
IkReal x5992=(cj5*r00);
IkReal x5993=(r01*sj5);
IkReal x5994=((((-2.0)*x5992*x5993))+(((-1.0)*x5990*x5991))+((x5990*(r00*r00)))+(r02*r02)+x5991);
j4eval[0]=x5994;
j4eval[1]=IKsign(x5994);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5992))+x5993))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5995=cj5*cj5;
IkReal x5996=r01*r01;
IkReal x5997=(r01*sj5);
IkReal x5998=(cj5*r00);
CheckValue<IkReal> x5999 = IKatan2WithCheck(IkReal(((((-1.0)*x5998))+x5997)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5999.valid){
continue;
}
CheckValue<IkReal> x6000=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5995*x5996))+(((-2.0)*x5997*x5998))+(r02*r02)+x5996+((x5995*(r00*r00))))),-1);
if(!x6000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5999.value)+(((1.5707963267949)*(x6000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6001=IKcos(j4);
IkReal x6002=IKsin(j4);
IkReal x6003=(cj5*r00);
IkReal x6004=(cj5*r10);
IkReal x6005=(r21*sj5);
IkReal x6006=(cj5*r20);
IkReal x6007=((1.0)*x6001);
IkReal x6008=((1.0)*x6002);
IkReal x6009=(sj5*x6002);
IkReal x6010=(sj5*x6001);
evalcond[0]=(((r01*x6010))+((r02*x6002))+(((-1.0)*x6003*x6007)));
evalcond[1]=((((-1.0)*x6006*x6008))+((x6002*x6005))+(((-1.0)*r22*x6007)));
evalcond[2]=(((r11*x6009))+(((-1.0)*r12*x6007))+(((-1.0)*x6004*x6008)));
evalcond[3]=((-1.0)+((r01*x6009))+(((-1.0)*x6003*x6008))+(((-1.0)*r02*x6007)));
evalcond[4]=(((cj2*sj1))+((r22*x6002))+(((-1.0)*x6006*x6007))+((cj1*sj2))+((x6001*x6005)));
evalcond[5]=(((r12*x6002))+((r11*x6010))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6004*x6007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6011=((1.0)*cj5);
CheckValue<IkReal> x6012 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6012.valid){
continue;
}
CheckValue<IkReal> x6013=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6011)))),-1);
if(!x6013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6012.value)+(((1.5707963267949)*(x6013.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6014=IKcos(j4);
IkReal x6015=IKsin(j4);
IkReal x6016=(cj5*r00);
IkReal x6017=(cj5*r10);
IkReal x6018=(r21*sj5);
IkReal x6019=(cj5*r20);
IkReal x6020=((1.0)*x6014);
IkReal x6021=((1.0)*x6015);
IkReal x6022=(sj5*x6015);
IkReal x6023=(sj5*x6014);
evalcond[0]=(((r01*x6023))+((r02*x6015))+(((-1.0)*x6016*x6020)));
evalcond[1]=((((-1.0)*r22*x6020))+(((-1.0)*x6019*x6021))+((x6015*x6018)));
evalcond[2]=((((-1.0)*x6017*x6021))+((r11*x6022))+(((-1.0)*r12*x6020)));
evalcond[3]=((-1.0)+((r01*x6022))+(((-1.0)*r02*x6020))+(((-1.0)*x6016*x6021)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6019*x6020))+((r22*x6015))+((x6014*x6018)));
evalcond[5]=(((r12*x6015))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6017*x6020))+((r11*x6023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6024=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6024.valid){
continue;
}
CheckValue<IkReal> x6025 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6024.value)))+(x6025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6026=IKcos(j4);
IkReal x6027=IKsin(j4);
IkReal x6028=(cj5*r00);
IkReal x6029=(cj5*r10);
IkReal x6030=(r21*sj5);
IkReal x6031=(cj5*r20);
IkReal x6032=((1.0)*x6026);
IkReal x6033=((1.0)*x6027);
IkReal x6034=(sj5*x6027);
IkReal x6035=(sj5*x6026);
evalcond[0]=(((r02*x6027))+((r01*x6035))+(((-1.0)*x6028*x6032)));
evalcond[1]=(((x6027*x6030))+(((-1.0)*x6031*x6033))+(((-1.0)*r22*x6032)));
evalcond[2]=((((-1.0)*x6029*x6033))+((r11*x6034))+(((-1.0)*r12*x6032)));
evalcond[3]=((-1.0)+((r01*x6034))+(((-1.0)*x6028*x6033))+(((-1.0)*r02*x6032)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6031*x6032))+((cj1*sj2))+((r22*x6027))+((x6026*x6030)));
evalcond[5]=((((-1.0)*x6029*x6032))+((r11*x6035))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6036;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6037=((1.0)*cj5);
IkReal x6038=((((-1.0)*r21*x6037))+(((-1.0)*r20*sj5)));
j4eval[0]=x6038;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6037))))));
j4eval[2]=IKsign(x6038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6039=(r01*sj5);
IkReal x6040=(cj1*sj2);
IkReal x6041=(cj2*sj1);
IkReal x6042=((1.0)*r02);
IkReal x6043=((1.0)*cj5*r00);
IkReal x6044=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6044;
j4eval[1]=((IKabs(((((-1.0)*x6040*x6042))+(((-1.0)*x6041*x6042)))))+(IKabs(((((-1.0)*x6040*x6043))+(((-1.0)*x6041*x6043))+((x6039*x6041))+((x6039*x6040))))));
j4eval[2]=IKsign(x6044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6045=(r01*sj5);
IkReal x6046=(cj1*sj2);
IkReal x6047=(cj2*sj1);
IkReal x6048=((1.0)*r02);
IkReal x6049=((1.0)*cj5*r00);
CheckValue<IkReal> x6050 = IKatan2WithCheck(IkReal(((((-1.0)*x6046*x6049))+((x6045*x6046))+((x6045*x6047))+(((-1.0)*x6047*x6049)))),IkReal(((((-1.0)*x6046*x6048))+(((-1.0)*x6047*x6048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6050.valid){
continue;
}
CheckValue<IkReal> x6051=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6050.value)+(((1.5707963267949)*(x6051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6052=IKcos(j4);
IkReal x6053=IKsin(j4);
IkReal x6054=(cj5*r00);
IkReal x6055=(cj5*r10);
IkReal x6056=(r21*sj5);
IkReal x6057=(cj5*r20);
IkReal x6058=((1.0)*x6052);
IkReal x6059=((1.0)*x6053);
IkReal x6060=(sj5*x6053);
IkReal x6061=(sj5*x6052);
evalcond[0]=(((r01*x6061))+(((-1.0)*x6054*x6058))+((r02*x6053)));
evalcond[1]=((((-1.0)*x6057*x6059))+(((-1.0)*r22*x6058))+((x6053*x6056)));
evalcond[2]=((((-1.0)*x6055*x6059))+(((-1.0)*r12*x6058))+((r11*x6060)));
evalcond[3]=((1.0)+((r01*x6060))+(((-1.0)*x6054*x6059))+(((-1.0)*r02*x6058)));
evalcond[4]=(((cj2*sj1))+((x6052*x6056))+((r22*x6053))+((cj1*sj2))+(((-1.0)*x6057*x6058)));
evalcond[5]=(((r12*x6053))+(((-1.0)*sj1*sj2))+(((-1.0)*x6055*x6058))+((r11*x6061))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6062=((1.0)*cj5);
CheckValue<IkReal> x6063=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6062))+(((-1.0)*r20*sj5)))),-1);
if(!x6063.valid){
continue;
}
CheckValue<IkReal> x6064 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6062))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6063.value)))+(x6064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6065=IKcos(j4);
IkReal x6066=IKsin(j4);
IkReal x6067=(cj5*r00);
IkReal x6068=(cj5*r10);
IkReal x6069=(r21*sj5);
IkReal x6070=(cj5*r20);
IkReal x6071=((1.0)*x6065);
IkReal x6072=((1.0)*x6066);
IkReal x6073=(sj5*x6066);
IkReal x6074=(sj5*x6065);
evalcond[0]=(((r01*x6074))+(((-1.0)*x6067*x6071))+((r02*x6066)));
evalcond[1]=(((x6066*x6069))+(((-1.0)*r22*x6071))+(((-1.0)*x6070*x6072)));
evalcond[2]=(((r11*x6073))+(((-1.0)*r12*x6071))+(((-1.0)*x6068*x6072)));
evalcond[3]=((1.0)+((r01*x6073))+(((-1.0)*x6067*x6072))+(((-1.0)*r02*x6071)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6066))+((x6065*x6069))+(((-1.0)*x6070*x6071)));
evalcond[5]=(((r11*x6074))+(((-1.0)*sj1*sj2))+(((-1.0)*x6068*x6071))+((r12*x6066))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6075 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6075.valid){
continue;
}
CheckValue<IkReal> x6076=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6075.value)+(((1.5707963267949)*(x6076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6077=IKcos(j4);
IkReal x6078=IKsin(j4);
IkReal x6079=(cj5*r00);
IkReal x6080=(cj5*r10);
IkReal x6081=(r21*sj5);
IkReal x6082=(cj5*r20);
IkReal x6083=((1.0)*x6077);
IkReal x6084=((1.0)*x6078);
IkReal x6085=(sj5*x6078);
IkReal x6086=(sj5*x6077);
evalcond[0]=(((r01*x6086))+(((-1.0)*x6079*x6083))+((r02*x6078)));
evalcond[1]=(((x6078*x6081))+(((-1.0)*r22*x6083))+(((-1.0)*x6082*x6084)));
evalcond[2]=((((-1.0)*r12*x6083))+(((-1.0)*x6080*x6084))+((r11*x6085)));
evalcond[3]=((1.0)+((r01*x6085))+(((-1.0)*r02*x6083))+(((-1.0)*x6079*x6084)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6078))+(((-1.0)*x6082*x6083))+((x6077*x6081)));
evalcond[5]=((((-1.0)*x6080*x6083))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x6086))+((r12*x6078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6087=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6087);
rxp1_1=(px*r21);
rxp1_2=(r11*x6087);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6088=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6088);
rxp1_1=(px*r21);
rxp1_2=(r11*x6088);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6089=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6089);
rxp1_1=(px*r21);
rxp1_2=(r11*x6089);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6092=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6092.valid){
continue;
}
IkReal x6090=x6092.value;
IkReal x6091=(sj0*x6090);
cj4array[0]=((((-1.0)*sj1*sj2*x6091))+((cj1*cj2*x6091)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6093=IKsin(j4);
IkReal x6094=IKcos(j4);
IkReal x6095=(r21*sj5);
IkReal x6096=((1.0)*cj5*r20);
evalcond[0]=(r02*x6093);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6094)));
evalcond[2]=(((x6093*x6095))+(((-1.0)*x6093*x6096)));
evalcond[3]=((((-1.0)*cj5*r10*x6093))+((r11*sj5*x6093)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6094*x6095))+(((-1.0)*x6094*x6096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6099=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6099.valid){
continue;
}
IkReal x6097=x6099.value;
IkReal x6098=((1.0)*x6097);
cj4array[0]=((((-1.0)*cj2*sj1*x6098))+(((-1.0)*cj1*sj2*x6098)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6100=IKsin(j4);
IkReal x6101=IKcos(j4);
IkReal x6102=((1.0)*sj0);
IkReal x6103=((1.0)*cj5);
IkReal x6104=(sj5*x6100);
evalcond[0]=(r02*x6100);
evalcond[1]=((((-1.0)*x6102))+(((-1.0)*r02*x6101)));
evalcond[2]=(((r21*x6104))+(((-1.0)*r20*x6100*x6103)));
evalcond[3]=(((r11*x6104))+(((-1.0)*r10*x6100*x6103)));
evalcond[4]=((((-1.0)*cj1*cj2*x6102))+((r11*sj5*x6101))+((sj0*sj1*sj2))+(((-1.0)*r10*x6101*x6103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6105=IKPowWithIntegerCheck(r02,-1);
if(!x6105.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6105.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6106=IKsin(j4);
IkReal x6107=IKcos(j4);
IkReal x6108=(r21*sj5);
IkReal x6109=((1.0)*cj5);
IkReal x6110=(r11*sj5);
evalcond[0]=(r02*x6106);
evalcond[1]=(((x6106*x6108))+(((-1.0)*r20*x6106*x6109)));
evalcond[2]=((((-1.0)*r10*x6106*x6109))+((x6106*x6110)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6107*x6108))+(((-1.0)*r20*x6107*x6109)));
evalcond[4]=((((-1.0)*r10*x6107*x6109))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x6107*x6110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6111=((1.0)*sj0);
IkReal x6112=((1.0)*cj0);
CheckValue<IkReal> x6113 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6111))+(((-1.0)*r02*x6112)))),IkReal(((((-1.0)*r01*sj5*x6112))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6113.valid){
continue;
}
CheckValue<IkReal> x6114=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6113.value)+(((1.5707963267949)*(x6114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6115=IKsin(j4);
IkReal x6116=IKcos(j4);
IkReal x6117=(cj5*r00);
IkReal x6118=(cj5*r10);
IkReal x6119=(r21*sj5);
IkReal x6120=(sj1*sj2);
IkReal x6121=(cj5*r20);
IkReal x6122=((1.0)*x6116);
IkReal x6123=((1.0)*cj1*cj2);
IkReal x6124=((1.0)*x6115);
IkReal x6125=(sj5*x6115);
IkReal x6126=(sj5*x6116);
evalcond[0]=(((x6115*x6119))+(((-1.0)*x6121*x6124))+(((-1.0)*r22*x6122)));
evalcond[1]=(cj0+(((-1.0)*x6118*x6124))+(((-1.0)*r12*x6122))+((r11*x6125)));
evalcond[2]=(((r01*x6125))+(((-1.0)*x6117*x6124))+(((-1.0)*sj0))+(((-1.0)*r02*x6122)));
evalcond[3]=(((cj2*sj1))+((x6116*x6119))+(((-1.0)*x6121*x6122))+((cj1*sj2))+((r22*x6115)));
evalcond[4]=(((r01*x6126))+((r02*x6115))+(((-1.0)*x6117*x6122))+((cj0*x6120))+(((-1.0)*cj0*x6123)));
evalcond[5]=((((-1.0)*sj0*x6123))+((sj0*x6120))+(((-1.0)*x6118*x6122))+((r12*x6115))+((r11*x6126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6127=((1.0)*cj5);
CheckValue<IkReal> x6128 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6128.valid){
continue;
}
CheckValue<IkReal> x6129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6127)))),-1);
if(!x6129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6128.value)+(((1.5707963267949)*(x6129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6130=IKsin(j4);
IkReal x6131=IKcos(j4);
IkReal x6132=(cj5*r00);
IkReal x6133=(cj5*r10);
IkReal x6134=(r21*sj5);
IkReal x6135=(sj1*sj2);
IkReal x6136=(cj5*r20);
IkReal x6137=((1.0)*x6131);
IkReal x6138=((1.0)*cj1*cj2);
IkReal x6139=((1.0)*x6130);
IkReal x6140=(sj5*x6130);
IkReal x6141=(sj5*x6131);
evalcond[0]=((((-1.0)*x6136*x6139))+(((-1.0)*r22*x6137))+((x6130*x6134)));
evalcond[1]=(cj0+((r11*x6140))+(((-1.0)*r12*x6137))+(((-1.0)*x6133*x6139)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6140))+(((-1.0)*x6132*x6139))+(((-1.0)*r02*x6137)));
evalcond[3]=(((cj2*sj1))+((x6131*x6134))+((r22*x6130))+(((-1.0)*x6136*x6137))+((cj1*sj2)));
evalcond[4]=(((cj0*x6135))+(((-1.0)*cj0*x6138))+((r01*x6141))+((r02*x6130))+(((-1.0)*x6132*x6137)));
evalcond[5]=(((r11*x6141))+(((-1.0)*x6133*x6137))+(((-1.0)*sj0*x6138))+((r12*x6130))+((sj0*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6142=((1.0)*cj5);
CheckValue<IkReal> x6143 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6143.valid){
continue;
}
CheckValue<IkReal> x6144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6142))+(((-1.0)*r00*sj5)))),-1);
if(!x6144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6143.value)+(((1.5707963267949)*(x6144.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6145=IKsin(j4);
IkReal x6146=IKcos(j4);
IkReal x6147=(cj5*r00);
IkReal x6148=(cj5*r10);
IkReal x6149=(r21*sj5);
IkReal x6150=(sj1*sj2);
IkReal x6151=(cj5*r20);
IkReal x6152=((1.0)*x6146);
IkReal x6153=((1.0)*cj1*cj2);
IkReal x6154=((1.0)*x6145);
IkReal x6155=(sj5*x6145);
IkReal x6156=(sj5*x6146);
evalcond[0]=((((-1.0)*x6151*x6154))+(((-1.0)*r22*x6152))+((x6145*x6149)));
evalcond[1]=(cj0+(((-1.0)*r12*x6152))+(((-1.0)*x6148*x6154))+((r11*x6155)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6152))+(((-1.0)*x6147*x6154))+((r01*x6155)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6151*x6152))+((cj1*sj2))+((r22*x6145))+((x6146*x6149)));
evalcond[4]=(((cj0*x6150))+(((-1.0)*x6147*x6152))+(((-1.0)*cj0*x6153))+((r02*x6145))+((r01*x6156)));
evalcond[5]=(((sj0*x6150))+((r12*x6145))+(((-1.0)*x6148*x6152))+((r11*x6156))+(((-1.0)*sj0*x6153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6157=r21*r21;
IkReal x6158=cj5*cj5;
IkReal x6159=(cj2*sj1);
IkReal x6160=(cj1*sj2);
IkReal x6161=(r21*sj5);
IkReal x6162=((1.0)*cj5*r20);
CheckValue<IkReal> x6163 = IKatan2WithCheck(IkReal((((r22*x6159))+((r22*x6160)))),IkReal(((((-1.0)*x6160*x6162))+((x6159*x6161))+(((-1.0)*x6159*x6162))+((x6160*x6161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6163.valid){
continue;
}
CheckValue<IkReal> x6164=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*r20*x6161))+((x6157*x6158))+(((-1.0)*(r22*r22)))+(((-1.0)*x6158*(r20*r20)))+(((-1.0)*x6157)))),-1);
if(!x6164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6163.value)+(((1.5707963267949)*(x6164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6165=IKsin(j4);
IkReal x6166=IKcos(j4);
IkReal x6167=(r21*sj5);
IkReal x6168=(cj5*r20);
IkReal x6169=((1.0)*x6166);
evalcond[0]=(((x6165*x6167))+(((-1.0)*x6165*x6168))+(((-1.0)*r22*x6169)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x6168*x6169))+((x6166*x6167))+((cj1*sj2))+((r22*x6165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6170=(cj5*sj4);
IkReal x6171=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6171))+(((-1.0)*r00*x6170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6170))+(((-1.0)*r11*x6171))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6171))+(((-1.0)*r00*x6170))))+IKsqr((((r10*x6170))+(((-1.0)*r11*x6171))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6171))+(((-1.0)*r00*x6170))), (((r10*x6170))+(((-1.0)*r11*x6171))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6172=IKcos(j0);
IkReal x6173=IKsin(j0);
IkReal x6174=(cj5*r01);
IkReal x6175=(r11*sj5);
IkReal x6176=((0.1157)*sj5);
IkReal x6177=((1.0)*cj2);
IkReal x6178=((0.5723)*sj2);
IkReal x6179=(cj5*r11);
IkReal x6180=((1.0)*cj4);
IkReal x6181=(r01*sj5);
IkReal x6182=((0.5723)*cj2);
IkReal x6183=((1.0)*cj1*sj2);
IkReal x6184=(cj5*x6180);
IkReal x6185=(sj1*x6172);
IkReal x6186=(cj1*x6173);
IkReal x6187=((1.0)*cj5*sj4);
IkReal x6188=(cj1*x6172);
IkReal x6189=(sj1*x6173);
evalcond[0]=(x6172+((sj4*x6175))+(((-1.0)*r12*x6180))+(((-1.0)*r10*x6187)));
evalcond[1]=((((-1.0)*r00*x6187))+(((-1.0)*r02*x6180))+(((-1.0)*x6173))+((sj4*x6181)));
evalcond[2]=(((r00*sj5))+x6174+(((-1.0)*x6172*x6183))+(((-1.0)*x6177*x6185)));
evalcond[3]=(((r10*sj5))+(((-1.0)*x6173*x6183))+x6179+(((-1.0)*x6177*x6189)));
evalcond[4]=(((cj4*x6181))+(((-1.0)*r00*x6184))+((r02*sj4))+((sj2*x6185))+(((-1.0)*x6177*x6188)));
evalcond[5]=(((sj2*x6189))+(((-1.0)*x6177*x6186))+((r12*sj4))+(((-1.0)*r10*x6184))+((cj4*x6175)));
evalcond[6]=((((0.612)*x6188))+(((-1.0)*x6178*x6185))+(((-0.163941)*x6173))+(((-1.0)*px))+(((-1.0)*r00*x6176))+((x6182*x6188))+(((-0.1157)*x6174)));
evalcond[7]=((((0.612)*x6186))+(((-1.0)*x6178*x6189))+(((0.163941)*x6172))+(((-1.0)*py))+((x6182*x6186))+(((-1.0)*r10*x6176))+(((-0.1157)*x6179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6190=((1.0)*cj5);
IkReal x6191=((1.0)*sj5);
CheckValue<IkReal> x6192 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6191))+(((-1.0)*r11*x6190)))),IkReal(((((-1.0)*r00*x6191))+(((-1.0)*r01*x6190)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6192.valid){
continue;
}
CheckValue<IkReal> x6193=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6193.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6192.value)+(((1.5707963267949)*(x6193.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6194=IKcos(j0);
IkReal x6195=IKsin(j0);
IkReal x6196=(cj5*r01);
IkReal x6197=((0.1157)*sj5);
IkReal x6198=((1.0)*sj1);
IkReal x6199=(cj5*r11);
IkReal x6200=((1.0)*cj1*sj2);
IkReal x6201=((0.5723)*sj1*sj2);
IkReal x6202=(cj2*x6194);
IkReal x6203=(cj1*x6195);
evalcond[0]=(((r00*sj5))+(((-1.0)*x6198*x6202))+x6196+(((-1.0)*x6194*x6200)));
evalcond[1]=(((r10*sj5))+x6199+(((-1.0)*x6195*x6200))+(((-1.0)*cj2*x6195*x6198)));
evalcond[2]=((((-0.163941)*x6195))+(((-1.0)*px))+(((0.612)*cj1*x6194))+(((-0.1157)*x6196))+(((0.5723)*cj1*x6202))+(((-1.0)*x6194*x6201))+(((-1.0)*r00*x6197)));
evalcond[3]=((((-1.0)*r10*x6197))+(((0.163941)*x6194))+(((0.612)*x6203))+(((-1.0)*x6195*x6201))+(((-1.0)*py))+(((0.5723)*cj2*x6203))+(((-0.1157)*x6199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6204=((1.0)*cj5);
IkReal x6205=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6204)));
j4eval[0]=x6205;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6204)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6206=((1.0)*cj5);
IkReal x6207=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6206)));
j4eval[0]=x6207;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6206)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6208=((1.0)*sj0);
IkReal x6209=((1.0)*cj0);
IkReal x6210=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6210;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6208))+(((-1.0)*r01*sj5*x6209)))))+(IKabs(((((-1.0)*r02*x6209))+(((-1.0)*r12*x6208))))));
j4eval[2]=IKsign(x6210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6211=((-1.0)*r20);
IkReal x6213 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6213)==0){
continue;
}
IkReal x6212=pow(x6213,-0.5);
CheckValue<IkReal> x6214 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6211),IKFAST_ATAN2_MAGTHRESH);
if(!x6214.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6214.value));
IkReal gconst115=(r21*x6212);
IkReal gconst116=(x6211*x6212);
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6215.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6216=((-1.0)*r20);
IkReal x6217=x6212;
CheckValue<IkReal> x6219 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6216),IKFAST_ATAN2_MAGTHRESH);
if(!x6219.valid){
continue;
}
IkReal x6218=((-1.0)*(x6219.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6218;
IkReal gconst114=x6218;
IkReal gconst115=(r21*x6217);
IkReal gconst116=(x6216*x6217);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6220=((-1.0)*r20);
IkReal x6221=x6212;
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6220),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
IkReal x6222=((-1.0)*(x6223.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6222;
IkReal gconst114=x6222;
IkReal gconst115=(r21*x6221);
IkReal gconst116=(x6220*x6221);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6224=((-1.0)*r20);
IkReal x6225=x6212;
CheckValue<IkReal> x6227 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6224),IKFAST_ATAN2_MAGTHRESH);
if(!x6227.valid){
continue;
}
IkReal x6226=((-1.0)*(x6227.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6226;
IkReal gconst114=x6226;
IkReal gconst115=(r21*x6225);
IkReal gconst116=(x6224*x6225);
IkReal x6228=((1.0)*(r22*r22));
CheckValue<IkReal> x6232=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6228))),-1);
if(!x6232.valid){
continue;
}
IkReal x6229=x6232.value;
IkReal x6230=((1.0)*x6229);
IkReal x6231=((((-1.0)*x6228))+(((-1.0)*x6230*(r21*r21*r21*r21)))+(((-1.0)*x6230*(r20*r20*r20*r20)))+(((-2.0)*x6229*(r20*r20)*(r21*r21))));
j4eval[0]=x6231;
j4eval[1]=IKsign(x6231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6233=(cj2*sj1);
IkReal x6234=(gconst115*r21);
IkReal x6235=(cj1*sj2);
IkReal x6236=((1.0)*gconst116*r20);
CheckValue<IkReal> x6237=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x6234))+(((-1.0)*(r22*r22)))+(((-1.0)*gconst116*r20*x6236))+(((-1.0)*(x6234*x6234))))),-1);
if(!x6237.valid){
continue;
}
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal((((r22*x6235))+((r22*x6233)))),IkReal((((x6233*x6234))+((x6234*x6235))+(((-1.0)*x6235*x6236))+(((-1.0)*x6233*x6236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6237.value)))+(x6238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6239=IKsin(j4);
IkReal x6240=IKcos(j4);
IkReal x6241=(sj1*sj2);
IkReal x6242=((1.0)*x6240);
IkReal x6243=((1.0)*cj1*cj2);
IkReal x6244=(gconst115*x6239);
IkReal x6245=(gconst115*x6240);
IkReal x6246=((1.0)*gconst116*x6239);
evalcond[0]=(((r21*x6244))+(((-1.0)*r20*x6246))+(((-1.0)*r22*x6242)));
evalcond[1]=(cj0+((r11*x6244))+(((-1.0)*r10*x6246))+(((-1.0)*r12*x6242)));
evalcond[2]=((((-1.0)*r02*x6242))+(((-1.0)*sj0))+(((-1.0)*r00*x6246))+((r01*x6244)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6242))+((cj1*sj2))+((r22*x6239))+((r21*x6245)));
evalcond[4]=(((r02*x6239))+(((-1.0)*cj0*x6243))+((cj0*x6241))+(((-1.0)*gconst116*r00*x6242))+((r01*x6245)));
evalcond[5]=(((r12*x6239))+((r11*x6245))+(((-1.0)*sj0*x6243))+(((-1.0)*gconst116*r10*x6242))+((sj0*x6241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6247=((1.0)*gconst116);
CheckValue<IkReal> x6248 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6247))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6248.valid){
continue;
}
CheckValue<IkReal> x6249=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6247)))),-1);
if(!x6249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6248.value)+(((1.5707963267949)*(x6249.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6250=IKsin(j4);
IkReal x6251=IKcos(j4);
IkReal x6252=(sj1*sj2);
IkReal x6253=((1.0)*x6251);
IkReal x6254=((1.0)*cj1*cj2);
IkReal x6255=(gconst115*x6250);
IkReal x6256=(gconst115*x6251);
IkReal x6257=((1.0)*gconst116*x6250);
evalcond[0]=(((r21*x6255))+(((-1.0)*r22*x6253))+(((-1.0)*r20*x6257)));
evalcond[1]=(cj0+(((-1.0)*r12*x6253))+(((-1.0)*r10*x6257))+((r11*x6255)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6255))+(((-1.0)*r02*x6253))+(((-1.0)*r00*x6257)));
evalcond[3]=(((cj2*sj1))+((r22*x6250))+((cj1*sj2))+((r21*x6256))+(((-1.0)*gconst116*r20*x6253)));
evalcond[4]=(((r01*x6256))+(((-1.0)*gconst116*r00*x6253))+(((-1.0)*cj0*x6254))+((r02*x6250))+((cj0*x6252)));
evalcond[5]=(((sj0*x6252))+((r12*x6250))+(((-1.0)*sj0*x6254))+((r11*x6256))+(((-1.0)*gconst116*r10*x6253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6258=((1.0)*gconst116);
CheckValue<IkReal> x6259 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6258))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6259.valid){
continue;
}
CheckValue<IkReal> x6260=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6258)))),-1);
if(!x6260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6259.value)+(((1.5707963267949)*(x6260.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6261=IKsin(j4);
IkReal x6262=IKcos(j4);
IkReal x6263=(sj1*sj2);
IkReal x6264=((1.0)*x6262);
IkReal x6265=((1.0)*cj1*cj2);
IkReal x6266=(gconst115*x6261);
IkReal x6267=(gconst115*x6262);
IkReal x6268=((1.0)*gconst116*x6261);
evalcond[0]=(((r21*x6266))+(((-1.0)*r22*x6264))+(((-1.0)*r20*x6268)));
evalcond[1]=(cj0+(((-1.0)*r10*x6268))+(((-1.0)*r12*x6264))+((r11*x6266)));
evalcond[2]=(((r01*x6266))+(((-1.0)*sj0))+(((-1.0)*r02*x6264))+(((-1.0)*r00*x6268)));
evalcond[3]=(((cj2*sj1))+((r22*x6261))+((cj1*sj2))+((r21*x6267))+(((-1.0)*gconst116*r20*x6264)));
evalcond[4]=(((r01*x6267))+(((-1.0)*gconst116*r00*x6264))+(((-1.0)*cj0*x6265))+((r02*x6261))+((cj0*x6263)));
evalcond[5]=((((-1.0)*gconst116*r10*x6264))+((sj0*x6263))+((r12*x6261))+(((-1.0)*sj0*x6265))+((r11*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6269=((-1.0)*r21);
IkReal x6271 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6271)==0){
continue;
}
IkReal x6270=pow(x6271,-0.5);
CheckValue<IkReal> x6272 = IKatan2WithCheck(IkReal(x6269),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6272.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6272.value))));
IkReal gconst118=(x6269*x6270);
IkReal gconst119=((1.0)*r20*x6270);
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6274=((-1.0)*r21);
CheckValue<IkReal> x6277 = IKatan2WithCheck(IkReal(x6274),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6277.valid){
continue;
}
IkReal x6275=((1.0)*(x6277.value));
IkReal x6276=x6270;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6275)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6275)));
IkReal gconst118=(x6274*x6276);
IkReal gconst119=((1.0)*r20*x6276);
IkReal x6278=r22*r22;
IkReal x6279=((1.0)*x6278);
CheckValue<IkReal> x6283=IKPowWithIntegerCheck(((-1.0)+x6278),-1);
if(!x6283.valid){
continue;
}
IkReal x6280=x6283.value;
if((((1.0)+(((-1.0)*x6279)))) < -0.00001)
continue;
IkReal x6281=IKsqrt(((1.0)+(((-1.0)*x6279))));
IkReal x6282=(cj0*x6280*x6281);
j4eval[0]=((IKabs((x6282+(((-1.0)*x6279*x6282)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6284=((-1.0)*r21);
CheckValue<IkReal> x6287 = IKatan2WithCheck(IkReal(x6284),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6287.valid){
continue;
}
IkReal x6285=((1.0)*(x6287.value));
IkReal x6286=x6270;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6285)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6285)));
IkReal gconst118=(x6284*x6286);
IkReal gconst119=((1.0)*r20*x6286);
IkReal x6288=r22*r22;
IkReal x6289=((1.0)*x6288);
CheckValue<IkReal> x6293=IKPowWithIntegerCheck(((-1.0)+x6288),-1);
if(!x6293.valid){
continue;
}
IkReal x6290=x6293.value;
if((((1.0)+(((-1.0)*x6289)))) < -0.00001)
continue;
IkReal x6291=IKsqrt(((1.0)+(((-1.0)*x6289))));
IkReal x6292=(sj0*x6290*x6291);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6292+(((-1.0)*x6289*x6292))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6294=((-1.0)*r21);
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(x6294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
IkReal x6295=((1.0)*(x6297.value));
IkReal x6296=x6270;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6295)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6295)));
IkReal gconst118=(x6294*x6296);
IkReal gconst119=((1.0)*r20*x6296);
IkReal x6298=r22*r22;
IkReal x6299=(r12*sj0);
IkReal x6300=(cj0*r02);
CheckValue<IkReal> x6304=IKPowWithIntegerCheck(((-1.0)+x6298),-1);
if(!x6304.valid){
continue;
}
IkReal x6301=x6304.value;
if((((1.0)+(((-1.0)*x6298)))) < -0.00001)
continue;
IkReal x6302=IKsqrt(((1.0)+(((-1.0)*x6298))));
IkReal x6303=(r22*x6301*x6302);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6300*x6303))+((x6299*x6303)))))+(IKabs(((((-1.0)*x6299))+(((-1.0)*x6300))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6305=((1.0)*sj0);
IkReal x6306=((1.0)*gconst118);
CheckValue<IkReal> x6307 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6305))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6306))+((cj0*gconst119*r00))+(((-1.0)*gconst118*r11*x6305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6307.valid){
continue;
}
CheckValue<IkReal> x6308=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6306)))),-1);
if(!x6308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6307.value)+(((1.5707963267949)*(x6308.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6309=IKsin(j4);
IkReal x6310=IKcos(j4);
IkReal x6311=(gconst118*r01);
IkReal x6312=(sj1*sj2);
IkReal x6313=(gconst119*r20);
IkReal x6314=(gconst119*r10);
IkReal x6315=(gconst119*r00);
IkReal x6316=(gconst118*r21);
IkReal x6317=(gconst118*r11);
IkReal x6318=((1.0)*x6310);
IkReal x6319=((1.0)*cj1*cj2);
IkReal x6320=((1.0)*x6309);
evalcond[0]=((((-1.0)*r22*x6318))+((x6309*x6316))+(((-1.0)*x6313*x6320)));
evalcond[1]=(cj0+((x6309*x6317))+(((-1.0)*r12*x6318))+(((-1.0)*x6314*x6320)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6318))+((x6309*x6311))+(((-1.0)*x6315*x6320)));
evalcond[3]=(((cj2*sj1))+((x6310*x6316))+((cj1*sj2))+((r22*x6309))+(((-1.0)*x6313*x6318)));
evalcond[4]=(((x6310*x6311))+((r02*x6309))+((cj0*x6312))+(((-1.0)*x6315*x6318))+(((-1.0)*cj0*x6319)));
evalcond[5]=(((x6310*x6317))+(((-1.0)*sj0*x6319))+((r12*x6309))+((sj0*x6312))+(((-1.0)*x6314*x6318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6321=((1.0)*gconst119);
CheckValue<IkReal> x6322=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6321)))),-1);
if(!x6322.valid){
continue;
}
CheckValue<IkReal> x6323 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6321))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6322.value)))+(x6323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6324=IKsin(j4);
IkReal x6325=IKcos(j4);
IkReal x6326=(gconst118*r01);
IkReal x6327=(sj1*sj2);
IkReal x6328=(gconst119*r20);
IkReal x6329=(gconst119*r10);
IkReal x6330=(gconst119*r00);
IkReal x6331=(gconst118*r21);
IkReal x6332=(gconst118*r11);
IkReal x6333=((1.0)*x6325);
IkReal x6334=((1.0)*cj1*cj2);
IkReal x6335=((1.0)*x6324);
evalcond[0]=(((x6324*x6331))+(((-1.0)*r22*x6333))+(((-1.0)*x6328*x6335)));
evalcond[1]=((((-1.0)*r12*x6333))+((x6324*x6332))+cj0+(((-1.0)*x6329*x6335)));
evalcond[2]=((((-1.0)*sj0))+((x6324*x6326))+(((-1.0)*x6330*x6335))+(((-1.0)*r02*x6333)));
evalcond[3]=(((cj2*sj1))+((x6325*x6331))+((cj1*sj2))+((r22*x6324))+(((-1.0)*x6328*x6333)));
evalcond[4]=(((r02*x6324))+((cj0*x6327))+(((-1.0)*x6330*x6333))+((x6325*x6326))+(((-1.0)*cj0*x6334)));
evalcond[5]=(((r12*x6324))+((x6325*x6332))+((sj0*x6327))+(((-1.0)*sj0*x6334))+(((-1.0)*x6329*x6333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6336=((1.0)*gconst119);
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
CheckValue<IkReal> x6338=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6336)))),-1);
if(!x6338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6337.value)+(((1.5707963267949)*(x6338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6339=IKsin(j4);
IkReal x6340=IKcos(j4);
IkReal x6341=(gconst118*r01);
IkReal x6342=(sj1*sj2);
IkReal x6343=(gconst119*r20);
IkReal x6344=(gconst119*r10);
IkReal x6345=(gconst119*r00);
IkReal x6346=(gconst118*r21);
IkReal x6347=(gconst118*r11);
IkReal x6348=((1.0)*x6340);
IkReal x6349=((1.0)*cj1*cj2);
IkReal x6350=((1.0)*x6339);
evalcond[0]=((((-1.0)*x6343*x6350))+(((-1.0)*r22*x6348))+((x6339*x6346)));
evalcond[1]=(cj0+(((-1.0)*x6344*x6350))+((x6339*x6347))+(((-1.0)*r12*x6348)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6345*x6350))+((x6339*x6341))+(((-1.0)*r02*x6348)));
evalcond[3]=(((cj2*sj1))+((r22*x6339))+(((-1.0)*x6343*x6348))+((cj1*sj2))+((x6340*x6346)));
evalcond[4]=(((r02*x6339))+(((-1.0)*x6345*x6348))+((cj0*x6342))+(((-1.0)*cj0*x6349))+((x6340*x6341)));
evalcond[5]=(((r12*x6339))+((sj0*x6342))+(((-1.0)*x6344*x6348))+((x6340*x6347))+(((-1.0)*sj0*x6349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6351=((-1.0)*r10);
IkReal x6353 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6353)==0){
continue;
}
IkReal x6352=pow(x6353,-0.5);
CheckValue<IkReal> x6354 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6351),IKFAST_ATAN2_MAGTHRESH);
if(!x6354.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6354.value));
IkReal gconst121=(r11*x6352);
IkReal gconst122=(x6351*x6352);
CheckValue<IkReal> x6355 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6355.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6355.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6356=((-1.0)*r10);
IkReal x6357=x6352;
CheckValue<IkReal> x6359 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6356),IKFAST_ATAN2_MAGTHRESH);
if(!x6359.valid){
continue;
}
IkReal x6358=((-1.0)*(x6359.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6358;
IkReal gconst120=x6358;
IkReal gconst121=(r11*x6357);
IkReal gconst122=(x6356*x6357);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6360=((1.0)*sj0);
IkReal x6361=((1.0)*gconst121);
CheckValue<IkReal> x6362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6361)))),-1);
if(!x6362.valid){
continue;
}
CheckValue<IkReal> x6363 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6360)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*cj0*r01*x6361))+(((-1.0)*gconst121*r11*x6360))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6362.value)))+(x6363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6364=IKsin(j4);
IkReal x6365=IKcos(j4);
IkReal x6366=(gconst121*r11);
IkReal x6367=(sj1*sj2);
IkReal x6368=(gconst122*r00);
IkReal x6369=(gconst122*r10);
IkReal x6370=(gconst122*r20);
IkReal x6371=((1.0)*x6365);
IkReal x6372=((1.0)*cj1*cj2);
IkReal x6373=((1.0)*x6364);
IkReal x6374=(gconst121*x6364);
IkReal x6375=(gconst121*x6365);
evalcond[0]=(((r21*x6374))+(((-1.0)*x6370*x6373))+(((-1.0)*r22*x6371)));
evalcond[1]=(cj0+(((-1.0)*r12*x6371))+(((-1.0)*x6369*x6373))+((x6364*x6366)));
evalcond[2]=((((-1.0)*x6368*x6373))+(((-1.0)*sj0))+(((-1.0)*r02*x6371))+((r01*x6374)));
evalcond[3]=(((r21*x6375))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6370*x6371))+((r22*x6364)));
evalcond[4]=((((-1.0)*x6368*x6371))+((r01*x6375))+((cj0*x6367))+((r02*x6364))+(((-1.0)*cj0*x6372)));
evalcond[5]=((((-1.0)*sj0*x6372))+((r12*x6364))+((sj0*x6367))+((x6365*x6366))+(((-1.0)*x6369*x6371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6376=((1.0)*gconst122);
CheckValue<IkReal> x6377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6376))+(((-1.0)*gconst121*r00)))),-1);
if(!x6377.valid){
continue;
}
CheckValue<IkReal> x6378 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6376))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6377.value)))+(x6378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6379=IKsin(j4);
IkReal x6380=IKcos(j4);
IkReal x6381=(gconst121*r11);
IkReal x6382=(sj1*sj2);
IkReal x6383=(gconst122*r00);
IkReal x6384=(gconst122*r10);
IkReal x6385=(gconst122*r20);
IkReal x6386=((1.0)*x6380);
IkReal x6387=((1.0)*cj1*cj2);
IkReal x6388=((1.0)*x6379);
IkReal x6389=(gconst121*x6379);
IkReal x6390=(gconst121*x6380);
evalcond[0]=((((-1.0)*r22*x6386))+((r21*x6389))+(((-1.0)*x6385*x6388)));
evalcond[1]=((((-1.0)*x6384*x6388))+cj0+(((-1.0)*r12*x6386))+((x6379*x6381)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6383*x6388))+((r01*x6389))+(((-1.0)*r02*x6386)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6379))+((r21*x6390))+(((-1.0)*x6385*x6386)));
evalcond[4]=((((-1.0)*x6383*x6386))+((cj0*x6382))+(((-1.0)*cj0*x6387))+((r01*x6390))+((r02*x6379)));
evalcond[5]=((((-1.0)*x6384*x6386))+((sj0*x6382))+((x6380*x6381))+((r12*x6379))+(((-1.0)*sj0*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6391=((-1.0)*r11);
IkReal x6393 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6393)==0){
continue;
}
IkReal x6392=pow(x6393,-0.5);
CheckValue<IkReal> x6394 = IKatan2WithCheck(IkReal(x6391),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6394.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6394.value))));
IkReal gconst124=(x6391*x6392);
IkReal gconst125=((1.0)*r10*x6392);
CheckValue<IkReal> x6395 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6395.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6395.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6396=((-1.0)*r11);
CheckValue<IkReal> x6399 = IKatan2WithCheck(IkReal(x6396),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6399.valid){
continue;
}
IkReal x6397=((1.0)*(x6399.value));
IkReal x6398=x6392;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6397)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6397)));
IkReal gconst124=(x6396*x6398);
IkReal gconst125=((1.0)*r10*x6398);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6400=((-1.0)*r11);
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal(x6400),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
IkReal x6401=((1.0)*(x6403.value));
IkReal x6402=x6392;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6401)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6401)));
IkReal gconst124=(x6400*x6402);
IkReal gconst125=((1.0)*r10*x6402);
IkReal x6404=r12*r12;
IkReal x6405=((1.0)*sj0);
IkReal x6406=(cj0*r02);
IkReal x6407=x6392;
j4eval[0]=((IKabs(((((-1.0)*x6406))+(((-1.0)*r12*x6405)))))+(IKabs((((r12*x6406*x6407))+((sj0*x6404*x6407))+(((-1.0)*x6405*x6407))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6408=((-1.0)*r11);
CheckValue<IkReal> x6411 = IKatan2WithCheck(IkReal(x6408),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6411.valid){
continue;
}
IkReal x6409=((1.0)*(x6411.value));
IkReal x6410=x6392;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6409)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6409)));
IkReal gconst124=(x6408*x6410);
IkReal gconst125=((1.0)*r10*x6410);
IkReal x6412=r12*r12;
IkReal x6413=((1.0)+(((-1.0)*x6412)));
IkReal x6414=(cj2*r22*sj1);
IkReal x6415=(cj1*r22*sj2);
CheckValue<IkReal> x6422=IKPowWithIntegerCheck(x6413,-1);
if(!x6422.valid){
continue;
}
IkReal x6416=x6422.value;
CheckValue<IkReal> x6423=IKPowWithIntegerCheck(((-1.0)+x6412),-1);
if(!x6423.valid){
continue;
}
IkReal x6417=x6423.value;
IkReal x6418=((1.0)*x6416);
if((x6413) < -0.00001)
continue;
IkReal x6419=IKsqrt(x6413);
IkReal x6420=((1.0)*r12*x6417*x6419);
IkReal x6421=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6416))+(((-1.0)*x6418*(r11*r11)*(r21*r21)))+(((-1.0)*x6418*(r10*r10)*(r20*r20))));
j4eval[0]=x6421;
j4eval[1]=IKsign(x6421);
j4eval[2]=((IKabs(((((-1.0)*x6414*x6420))+(((-1.0)*x6415*x6420)))))+(IKabs((x6415+x6414))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6424=(gconst124*r21);
IkReal x6425=(cj1*sj2);
IkReal x6426=(cj2*sj1);
IkReal x6427=(gconst125*r20);
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal((((r22*x6425))+((r22*x6426)))),IkReal((((x6424*x6425))+((x6424*x6426))+(((-1.0)*x6425*x6427))+(((-1.0)*x6426*x6427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
CheckValue<IkReal> x6429=IKPowWithIntegerCheck(IKsign(((((2.0)*x6424*x6427))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6427*x6427)))+(((-1.0)*(x6424*x6424))))),-1);
if(!x6429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6428.value)+(((1.5707963267949)*(x6429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6430=IKsin(j4);
IkReal x6431=IKcos(j4);
IkReal x6432=(sj1*sj2);
IkReal x6433=(gconst125*r20);
IkReal x6434=(gconst124*r01);
IkReal x6435=(gconst125*r00);
IkReal x6436=(gconst125*r10);
IkReal x6437=((1.0)*x6431);
IkReal x6438=((1.0)*cj1*cj2);
IkReal x6439=((1.0)*x6430);
IkReal x6440=(gconst124*x6430);
IkReal x6441=(gconst124*x6431);
evalcond[0]=((((-1.0)*r22*x6437))+(((-1.0)*x6433*x6439))+((r21*x6440)));
evalcond[1]=(((r11*x6440))+cj0+(((-1.0)*r12*x6437))+(((-1.0)*x6436*x6439)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6437))+(((-1.0)*x6435*x6439))+((x6430*x6434)));
evalcond[3]=(((r22*x6430))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6433*x6437))+((r21*x6441)));
evalcond[4]=((((-1.0)*x6435*x6437))+((cj0*x6432))+(((-1.0)*cj0*x6438))+((r02*x6430))+((x6431*x6434)));
evalcond[5]=(((r11*x6441))+((r12*x6430))+(((-1.0)*sj0*x6438))+(((-1.0)*x6436*x6437))+((sj0*x6432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6442=((1.0)*sj0);
IkReal x6443=((1.0)*cj0);
CheckValue<IkReal> x6444=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6444.valid){
continue;
}
CheckValue<IkReal> x6445 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6443))+(((-1.0)*r12*x6442)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6442))+(((-1.0)*gconst124*r01*x6443))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6444.value)))+(x6445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6446=IKsin(j4);
IkReal x6447=IKcos(j4);
IkReal x6448=(sj1*sj2);
IkReal x6449=(gconst125*r20);
IkReal x6450=(gconst124*r01);
IkReal x6451=(gconst125*r00);
IkReal x6452=(gconst125*r10);
IkReal x6453=((1.0)*x6447);
IkReal x6454=((1.0)*cj1*cj2);
IkReal x6455=((1.0)*x6446);
IkReal x6456=(gconst124*x6446);
IkReal x6457=(gconst124*x6447);
evalcond[0]=((((-1.0)*x6449*x6455))+((r21*x6456))+(((-1.0)*r22*x6453)));
evalcond[1]=(cj0+((r11*x6456))+(((-1.0)*x6452*x6455))+(((-1.0)*r12*x6453)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6451*x6455))+(((-1.0)*r02*x6453))+((x6446*x6450)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6449*x6453))+((cj1*sj2))+((r21*x6457))+((r22*x6446)));
evalcond[4]=((((-1.0)*x6451*x6453))+((cj0*x6448))+((x6447*x6450))+(((-1.0)*cj0*x6454))+((r02*x6446)));
evalcond[5]=(((r12*x6446))+(((-1.0)*sj0*x6454))+((r11*x6457))+(((-1.0)*x6452*x6453))+((sj0*x6448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6458=((1.0)*gconst125);
CheckValue<IkReal> x6459=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6458)))),-1);
if(!x6459.valid){
continue;
}
CheckValue<IkReal> x6460 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6458))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6459.value)))+(x6460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6461=IKsin(j4);
IkReal x6462=IKcos(j4);
IkReal x6463=(sj1*sj2);
IkReal x6464=(gconst125*r20);
IkReal x6465=(gconst124*r01);
IkReal x6466=(gconst125*r00);
IkReal x6467=(gconst125*r10);
IkReal x6468=((1.0)*x6462);
IkReal x6469=((1.0)*cj1*cj2);
IkReal x6470=((1.0)*x6461);
IkReal x6471=(gconst124*x6461);
IkReal x6472=(gconst124*x6462);
evalcond[0]=((((-1.0)*r22*x6468))+(((-1.0)*x6464*x6470))+((r21*x6471)));
evalcond[1]=((((-1.0)*x6467*x6470))+cj0+((r11*x6471))+(((-1.0)*r12*x6468)));
evalcond[2]=((((-1.0)*sj0))+((x6461*x6465))+(((-1.0)*r02*x6468))+(((-1.0)*x6466*x6470)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6464*x6468))+((r22*x6461))+((r21*x6472)));
evalcond[4]=((((-1.0)*x6466*x6468))+((cj0*x6463))+((x6462*x6465))+(((-1.0)*cj0*x6469))+((r02*x6461)));
evalcond[5]=((((-1.0)*x6467*x6468))+((sj0*x6463))+((r11*x6472))+((r12*x6461))+(((-1.0)*sj0*x6469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6473=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6473;
j4eval[1]=IKsign(x6473);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6474=((1.0)*cj5);
IkReal x6475=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6474)));
j4eval[0]=x6475;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6474)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6476=cj5*cj5;
IkReal x6477=r11*r11;
IkReal x6478=(cj5*r10);
IkReal x6479=(r11*sj5);
IkReal x6480=(((x6476*x6477))+(((-1.0)*x6476*(r10*r10)))+(((2.0)*x6478*x6479))+(((-1.0)*(r12*r12)))+(((-1.0)*x6477)));
j4eval[0]=x6480;
j4eval[1]=IKsign(x6480);
j4eval[2]=((IKabs((x6479+(((-1.0)*x6478)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6481=cj5*cj5;
IkReal x6482=r11*r11;
IkReal x6483=(cj5*r10);
IkReal x6484=(r11*sj5);
CheckValue<IkReal> x6485 = IKatan2WithCheck(IkReal(((((-1.0)*x6483))+x6484)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6485.valid){
continue;
}
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6482))+(((-1.0)*x6481*(r10*r10)))+(((2.0)*x6483*x6484))+(((-1.0)*(r12*r12)))+((x6481*x6482)))),-1);
if(!x6486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6485.value)+(((1.5707963267949)*(x6486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6487=IKcos(j4);
IkReal x6488=IKsin(j4);
IkReal x6489=(cj5*r00);
IkReal x6490=(cj5*r10);
IkReal x6491=(r21*sj5);
IkReal x6492=(cj5*r20);
IkReal x6493=((1.0)*x6487);
IkReal x6494=((1.0)*x6488);
IkReal x6495=(sj5*x6488);
IkReal x6496=(sj5*x6487);
evalcond[0]=(((r11*x6496))+((r12*x6488))+(((-1.0)*x6490*x6493)));
evalcond[1]=((((-1.0)*r22*x6493))+(((-1.0)*x6492*x6494))+((x6488*x6491)));
evalcond[2]=(((r01*x6495))+(((-1.0)*r02*x6493))+(((-1.0)*x6489*x6494)));
evalcond[3]=((1.0)+((r11*x6495))+(((-1.0)*r12*x6493))+(((-1.0)*x6490*x6494)));
evalcond[4]=(((cj2*sj1))+((x6487*x6491))+((cj1*sj2))+(((-1.0)*x6492*x6493))+((r22*x6488)));
evalcond[5]=(((r01*x6496))+(((-1.0)*x6489*x6493))+((r02*x6488))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6497=((1.0)*cj5);
CheckValue<IkReal> x6498=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6497))+(((-1.0)*r00*sj5)))),-1);
if(!x6498.valid){
continue;
}
CheckValue<IkReal> x6499 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6497))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6499.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6498.value)))+(x6499.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6500=IKcos(j4);
IkReal x6501=IKsin(j4);
IkReal x6502=(cj5*r00);
IkReal x6503=(cj5*r10);
IkReal x6504=(r21*sj5);
IkReal x6505=(cj5*r20);
IkReal x6506=((1.0)*x6500);
IkReal x6507=((1.0)*x6501);
IkReal x6508=(sj5*x6501);
IkReal x6509=(sj5*x6500);
evalcond[0]=(((r12*x6501))+(((-1.0)*x6503*x6506))+((r11*x6509)));
evalcond[1]=((((-1.0)*r22*x6506))+((x6501*x6504))+(((-1.0)*x6505*x6507)));
evalcond[2]=((((-1.0)*r02*x6506))+(((-1.0)*x6502*x6507))+((r01*x6508)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6506))+(((-1.0)*x6503*x6507))+((r11*x6508)));
evalcond[4]=(((x6500*x6504))+((cj2*sj1))+((cj1*sj2))+((r22*x6501))+(((-1.0)*x6505*x6506)));
evalcond[5]=(((r02*x6501))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6502*x6506))+((r01*x6509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6510=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6510.valid){
continue;
}
CheckValue<IkReal> x6511 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6510.value)))+(x6511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6512=IKcos(j4);
IkReal x6513=IKsin(j4);
IkReal x6514=(cj5*r00);
IkReal x6515=(cj5*r10);
IkReal x6516=(r21*sj5);
IkReal x6517=(cj5*r20);
IkReal x6518=((1.0)*x6512);
IkReal x6519=((1.0)*x6513);
IkReal x6520=(sj5*x6513);
IkReal x6521=(sj5*x6512);
evalcond[0]=((((-1.0)*x6515*x6518))+((r12*x6513))+((r11*x6521)));
evalcond[1]=((((-1.0)*r22*x6518))+((x6513*x6516))+(((-1.0)*x6517*x6519)));
evalcond[2]=((((-1.0)*r02*x6518))+(((-1.0)*x6514*x6519))+((r01*x6520)));
evalcond[3]=((1.0)+(((-1.0)*x6515*x6519))+(((-1.0)*r12*x6518))+((r11*x6520)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6517*x6518))+((cj1*sj2))+((x6512*x6516))+((r22*x6513)));
evalcond[5]=((((-1.0)*x6514*x6518))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6513))+((r01*x6521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6522=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6522;
j4eval[1]=IKsign(x6522);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6523=((1.0)*cj5);
IkReal x6524=((((-1.0)*r21*x6523))+(((-1.0)*r20*sj5)));
j4eval[0]=x6524;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6523))))));
j4eval[2]=IKsign(x6524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6525=cj5*cj5;
IkReal x6526=r11*r11;
IkReal x6527=(r11*sj5);
IkReal x6528=(cj5*r10);
IkReal x6529=((r12*r12)+(((-1.0)*x6525*x6526))+x6526+(((-2.0)*x6527*x6528))+((x6525*(r10*r10))));
j4eval[0]=x6529;
j4eval[1]=IKsign(x6529);
j4eval[2]=((IKabs(r12))+(IKabs((x6527+(((-1.0)*x6528))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6530=cj5*cj5;
IkReal x6531=r11*r11;
IkReal x6532=(cj5*r10);
IkReal x6533=(r11*sj5);
CheckValue<IkReal> x6534=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x6530*(r10*r10)))+x6531+(((-1.0)*x6530*x6531))+(((-2.0)*x6532*x6533)))),-1);
if(!x6534.valid){
continue;
}
CheckValue<IkReal> x6535 = IKatan2WithCheck(IkReal((x6533+(((-1.0)*x6532)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6534.value)))+(x6535.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6536=IKcos(j4);
IkReal x6537=IKsin(j4);
IkReal x6538=(cj5*r00);
IkReal x6539=(cj5*r10);
IkReal x6540=(r21*sj5);
IkReal x6541=(cj5*r20);
IkReal x6542=((1.0)*x6536);
IkReal x6543=((1.0)*x6537);
IkReal x6544=(sj5*x6537);
IkReal x6545=(sj5*x6536);
evalcond[0]=((((-1.0)*x6539*x6542))+((r11*x6545))+((r12*x6537)));
evalcond[1]=((((-1.0)*r22*x6542))+(((-1.0)*x6541*x6543))+((x6537*x6540)));
evalcond[2]=((((-1.0)*x6538*x6543))+(((-1.0)*r02*x6542))+((r01*x6544)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6542))+(((-1.0)*x6539*x6543))+((r11*x6544)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6541*x6542))+((x6536*x6540))+((cj1*sj2))+((r22*x6537)));
evalcond[5]=(((r02*x6537))+(((-1.0)*sj1*sj2))+(((-1.0)*x6538*x6542))+((cj1*cj2))+((r01*x6545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6546=((1.0)*cj5);
CheckValue<IkReal> x6547 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6546))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6547.valid){
continue;
}
CheckValue<IkReal> x6548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6546))+(((-1.0)*r20*sj5)))),-1);
if(!x6548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6547.value)+(((1.5707963267949)*(x6548.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6549=IKcos(j4);
IkReal x6550=IKsin(j4);
IkReal x6551=(cj5*r00);
IkReal x6552=(cj5*r10);
IkReal x6553=(r21*sj5);
IkReal x6554=(cj5*r20);
IkReal x6555=((1.0)*x6549);
IkReal x6556=((1.0)*x6550);
IkReal x6557=(sj5*x6550);
IkReal x6558=(sj5*x6549);
evalcond[0]=((((-1.0)*x6552*x6555))+((r11*x6558))+((r12*x6550)));
evalcond[1]=((((-1.0)*r22*x6555))+((x6550*x6553))+(((-1.0)*x6554*x6556)));
evalcond[2]=((((-1.0)*x6551*x6556))+(((-1.0)*r02*x6555))+((r01*x6557)));
evalcond[3]=((-1.0)+(((-1.0)*x6552*x6556))+(((-1.0)*r12*x6555))+((r11*x6557)));
evalcond[4]=(((x6549*x6553))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6554*x6555))+((r22*x6550)));
evalcond[5]=((((-1.0)*x6551*x6555))+(((-1.0)*sj1*sj2))+((r02*x6550))+((cj1*cj2))+((r01*x6558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6559 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6559.valid){
continue;
}
CheckValue<IkReal> x6560=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6559.value)+(((1.5707963267949)*(x6560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6561=IKcos(j4);
IkReal x6562=IKsin(j4);
IkReal x6563=(cj5*r00);
IkReal x6564=(cj5*r10);
IkReal x6565=(r21*sj5);
IkReal x6566=(cj5*r20);
IkReal x6567=((1.0)*x6561);
IkReal x6568=((1.0)*x6562);
IkReal x6569=(sj5*x6562);
IkReal x6570=(sj5*x6561);
evalcond[0]=(((r12*x6562))+((r11*x6570))+(((-1.0)*x6564*x6567)));
evalcond[1]=((((-1.0)*x6566*x6568))+(((-1.0)*r22*x6567))+((x6562*x6565)));
evalcond[2]=((((-1.0)*x6563*x6568))+(((-1.0)*r02*x6567))+((r01*x6569)));
evalcond[3]=((-1.0)+((r11*x6569))+(((-1.0)*r12*x6567))+(((-1.0)*x6564*x6568)));
evalcond[4]=(((cj2*sj1))+((x6561*x6565))+((r22*x6562))+(((-1.0)*x6566*x6567))+((cj1*sj2)));
evalcond[5]=(((r01*x6570))+(((-1.0)*sj1*sj2))+((r02*x6562))+((cj1*cj2))+(((-1.0)*x6563*x6567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6571=((-1.0)*r00);
IkReal x6573 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6573)==0){
continue;
}
IkReal x6572=pow(x6573,-0.5);
CheckValue<IkReal> x6574 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6571),IKFAST_ATAN2_MAGTHRESH);
if(!x6574.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6574.value));
IkReal gconst127=(r01*x6572);
IkReal gconst128=(x6571*x6572);
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6575.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6576=((-1.0)*r00);
IkReal x6577=x6572;
CheckValue<IkReal> x6579 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6576),IKFAST_ATAN2_MAGTHRESH);
if(!x6579.valid){
continue;
}
IkReal x6578=((-1.0)*(x6579.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6578;
IkReal gconst126=x6578;
IkReal gconst127=(r01*x6577);
IkReal gconst128=(x6576*x6577);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6580=((1.0)*sj0);
IkReal x6581=((1.0)*gconst127);
CheckValue<IkReal> x6582 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6580))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6580))+(((-1.0)*cj0*r01*x6581))+((cj0*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6582.valid){
continue;
}
CheckValue<IkReal> x6583=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6581)))),-1);
if(!x6583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6582.value)+(((1.5707963267949)*(x6583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6584=IKsin(j4);
IkReal x6585=IKcos(j4);
IkReal x6586=(gconst127*r01);
IkReal x6587=(sj1*sj2);
IkReal x6588=(gconst128*r10);
IkReal x6589=(gconst128*r00);
IkReal x6590=(gconst128*r20);
IkReal x6591=((1.0)*x6585);
IkReal x6592=((1.0)*cj1*cj2);
IkReal x6593=((1.0)*x6584);
IkReal x6594=(gconst127*x6585);
IkReal x6595=(gconst127*x6584);
evalcond[0]=(((r21*x6595))+(((-1.0)*x6590*x6593))+(((-1.0)*r22*x6591)));
evalcond[1]=(((r11*x6595))+cj0+(((-1.0)*r12*x6591))+(((-1.0)*x6588*x6593)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6589*x6593))+(((-1.0)*r02*x6591))+((x6584*x6586)));
evalcond[3]=(((cj2*sj1))+((r22*x6584))+((r21*x6594))+((cj1*sj2))+(((-1.0)*x6590*x6591)));
evalcond[4]=(((r02*x6584))+(((-1.0)*x6589*x6591))+((cj0*x6587))+(((-1.0)*cj0*x6592))+((x6585*x6586)));
evalcond[5]=(((sj0*x6587))+((r11*x6594))+(((-1.0)*x6588*x6591))+(((-1.0)*sj0*x6592))+((r12*x6584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6596=((1.0)*gconst128);
CheckValue<IkReal> x6597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6596))+(((-1.0)*gconst127*r10)))),-1);
if(!x6597.valid){
continue;
}
CheckValue<IkReal> x6598 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6596))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6597.value)))+(x6598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6599=IKsin(j4);
IkReal x6600=IKcos(j4);
IkReal x6601=(gconst127*r01);
IkReal x6602=(sj1*sj2);
IkReal x6603=(gconst128*r10);
IkReal x6604=(gconst128*r00);
IkReal x6605=(gconst128*r20);
IkReal x6606=((1.0)*x6600);
IkReal x6607=((1.0)*cj1*cj2);
IkReal x6608=((1.0)*x6599);
IkReal x6609=(gconst127*x6600);
IkReal x6610=(gconst127*x6599);
evalcond[0]=(((r21*x6610))+(((-1.0)*r22*x6606))+(((-1.0)*x6605*x6608)));
evalcond[1]=(cj0+(((-1.0)*x6603*x6608))+((r11*x6610))+(((-1.0)*r12*x6606)));
evalcond[2]=((((-1.0)*sj0))+((x6599*x6601))+(((-1.0)*r02*x6606))+(((-1.0)*x6604*x6608)));
evalcond[3]=(((cj2*sj1))+((r22*x6599))+((cj1*sj2))+((r21*x6609))+(((-1.0)*x6605*x6606)));
evalcond[4]=(((r02*x6599))+(((-1.0)*cj0*x6607))+(((-1.0)*x6604*x6606))+((x6600*x6601))+((cj0*x6602)));
evalcond[5]=(((r12*x6599))+((sj0*x6602))+(((-1.0)*sj0*x6607))+(((-1.0)*x6603*x6606))+((r11*x6609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6611=((-1.0)*r01);
IkReal x6613 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6613)==0){
continue;
}
IkReal x6612=pow(x6613,-0.5);
CheckValue<IkReal> x6614 = IKatan2WithCheck(IkReal(x6611),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6614.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6614.value))));
IkReal gconst130=(x6611*x6612);
IkReal gconst131=((1.0)*r00*x6612);
CheckValue<IkReal> x6615 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6615.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6615.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6616=((-1.0)*r01);
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal(x6616),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
IkReal x6617=((1.0)*(x6619.value));
IkReal x6618=x6612;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6617)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6617)));
IkReal gconst130=(x6616*x6618);
IkReal gconst131=((1.0)*r00*x6618);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6620=((-1.0)*r01);
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(x6620),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
IkReal x6621=((1.0)*(x6623.value));
IkReal x6622=x6612;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6621)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6621)));
IkReal gconst130=(x6620*x6622);
IkReal gconst131=((1.0)*r00*x6622);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6624=((-1.0)*r01);
CheckValue<IkReal> x6627 = IKatan2WithCheck(IkReal(x6624),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6627.valid){
continue;
}
IkReal x6625=((1.0)*(x6627.value));
IkReal x6626=x6612;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6625)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6625)));
IkReal gconst130=(x6624*x6626);
IkReal gconst131=((1.0)*r00*x6626);
IkReal x6628=r02*r02;
IkReal x6629=(r12*sj0);
IkReal x6630=((1.0)*cj0);
IkReal x6631=x6612;
j4eval[0]=((IKabs(((((-1.0)*x6629))+(((-1.0)*r02*x6630)))))+(IKabs((((cj0*x6628*x6631))+((r02*x6629*x6631))+(((-1.0)*x6630*x6631))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6632=((1.0)*sj0);
IkReal x6633=((1.0)*gconst130);
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6632)))),IkReal(((((-1.0)*gconst130*r11*x6632))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6633))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
CheckValue<IkReal> x6635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6633)))),-1);
if(!x6635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6634.value)+(((1.5707963267949)*(x6635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6636=IKsin(j4);
IkReal x6637=IKcos(j4);
IkReal x6638=(gconst131*r10);
IkReal x6639=(sj1*sj2);
IkReal x6640=(gconst131*r20);
IkReal x6641=(gconst131*r00);
IkReal x6642=((1.0)*x6637);
IkReal x6643=((1.0)*cj1*cj2);
IkReal x6644=(gconst130*x6636);
IkReal x6645=((1.0)*x6636);
IkReal x6646=(gconst130*x6637);
evalcond[0]=((((-1.0)*r22*x6642))+(((-1.0)*x6640*x6645))+((r21*x6644)));
evalcond[1]=((((-1.0)*x6638*x6645))+cj0+((r11*x6644))+(((-1.0)*r12*x6642)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6644))+(((-1.0)*x6641*x6645))+(((-1.0)*r02*x6642)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6640*x6642))+((r21*x6646))+((cj1*sj2))+((r22*x6636)));
evalcond[4]=(((r01*x6646))+(((-1.0)*x6641*x6642))+(((-1.0)*cj0*x6643))+((cj0*x6639))+((r02*x6636)));
evalcond[5]=((((-1.0)*x6638*x6642))+((r11*x6646))+((r12*x6636))+(((-1.0)*sj0*x6643))+((sj0*x6639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6647=((1.0)*gconst131);
CheckValue<IkReal> x6648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6648.valid){
continue;
}
CheckValue<IkReal> x6649=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6647))+(((-1.0)*gconst130*r10)))),-1);
if(!x6649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6648.value)+(((1.5707963267949)*(x6649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6650=IKsin(j4);
IkReal x6651=IKcos(j4);
IkReal x6652=(gconst131*r10);
IkReal x6653=(sj1*sj2);
IkReal x6654=(gconst131*r20);
IkReal x6655=(gconst131*r00);
IkReal x6656=((1.0)*x6651);
IkReal x6657=((1.0)*cj1*cj2);
IkReal x6658=(gconst130*x6650);
IkReal x6659=((1.0)*x6650);
IkReal x6660=(gconst130*x6651);
evalcond[0]=((((-1.0)*r22*x6656))+(((-1.0)*x6654*x6659))+((r21*x6658)));
evalcond[1]=((((-1.0)*x6652*x6659))+cj0+((r11*x6658))+(((-1.0)*r12*x6656)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6655*x6659))+((r01*x6658))+(((-1.0)*r02*x6656)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6654*x6656))+((r21*x6660))+((r22*x6650)));
evalcond[4]=(((r02*x6650))+(((-1.0)*x6655*x6656))+((r01*x6660))+(((-1.0)*cj0*x6657))+((cj0*x6653)));
evalcond[5]=((((-1.0)*x6652*x6656))+((r12*x6650))+(((-1.0)*sj0*x6657))+((r11*x6660))+((sj0*x6653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6661=((1.0)*gconst131);
CheckValue<IkReal> x6662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6661))+(((-1.0)*gconst130*r00)))),-1);
if(!x6662.valid){
continue;
}
CheckValue<IkReal> x6663 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6661)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6662.value)))+(x6663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6664=IKsin(j4);
IkReal x6665=IKcos(j4);
IkReal x6666=(gconst131*r10);
IkReal x6667=(sj1*sj2);
IkReal x6668=(gconst131*r20);
IkReal x6669=(gconst131*r00);
IkReal x6670=((1.0)*x6665);
IkReal x6671=((1.0)*cj1*cj2);
IkReal x6672=(gconst130*x6664);
IkReal x6673=((1.0)*x6664);
IkReal x6674=(gconst130*x6665);
evalcond[0]=((((-1.0)*x6668*x6673))+(((-1.0)*r22*x6670))+((r21*x6672)));
evalcond[1]=(((r11*x6672))+cj0+(((-1.0)*r12*x6670))+(((-1.0)*x6666*x6673)));
evalcond[2]=((((-1.0)*r02*x6670))+(((-1.0)*x6669*x6673))+(((-1.0)*sj0))+((r01*x6672)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6668*x6670))+((cj1*sj2))+((r22*x6664))+((r21*x6674)));
evalcond[4]=((((-1.0)*x6669*x6670))+((r02*x6664))+((r01*x6674))+((cj0*x6667))+(((-1.0)*cj0*x6671)));
evalcond[5]=(((r11*x6674))+((r12*x6664))+((sj0*x6667))+(((-1.0)*sj0*x6671))+(((-1.0)*x6666*x6670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6675=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6675;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6675);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6676=((1.0)*cj5);
IkReal x6677=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6676)));
j4eval[0]=x6677;
j4eval[1]=((IKabs(((((-1.0)*r20*x6676))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6677);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6678=cj5*cj5;
IkReal x6679=r01*r01;
IkReal x6680=(cj5*r00);
IkReal x6681=(r01*sj5);
IkReal x6682=(((x6678*(r00*r00)))+(((-1.0)*x6678*x6679))+x6679+(r02*r02)+(((-2.0)*x6680*x6681)));
j4eval[0]=x6682;
j4eval[1]=IKsign(x6682);
j4eval[2]=((IKabs(r02))+(IKabs((x6681+(((-1.0)*x6680))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6683=cj5*cj5;
IkReal x6684=r01*r01;
IkReal x6685=(r01*sj5);
IkReal x6686=(cj5*r00);
CheckValue<IkReal> x6687=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6683*x6684))+x6684+(((-2.0)*x6685*x6686))+(r02*r02)+((x6683*(r00*r00))))),-1);
if(!x6687.valid){
continue;
}
CheckValue<IkReal> x6688 = IKatan2WithCheck(IkReal((x6685+(((-1.0)*x6686)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6687.value)))+(x6688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6689=IKcos(j4);
IkReal x6690=IKsin(j4);
IkReal x6691=(cj5*r00);
IkReal x6692=(cj5*r10);
IkReal x6693=(r21*sj5);
IkReal x6694=(cj5*r20);
IkReal x6695=((1.0)*x6689);
IkReal x6696=((1.0)*x6690);
IkReal x6697=(sj5*x6690);
IkReal x6698=(sj5*x6689);
evalcond[0]=(((r01*x6698))+(((-1.0)*x6691*x6695))+((r02*x6690)));
evalcond[1]=((((-1.0)*x6694*x6696))+((x6690*x6693))+(((-1.0)*r22*x6695)));
evalcond[2]=(((r11*x6697))+(((-1.0)*r12*x6695))+(((-1.0)*x6692*x6696)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6695))+((r01*x6697))+(((-1.0)*x6691*x6696)));
evalcond[4]=((((-1.0)*x6694*x6695))+((cj2*sj1))+((r22*x6690))+((cj1*sj2))+((x6689*x6693)));
evalcond[5]=(((r11*x6698))+((r12*x6690))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6692*x6695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6699=((1.0)*cj5);
CheckValue<IkReal> x6700 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6699))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6700.valid){
continue;
}
CheckValue<IkReal> x6701=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6699)))),-1);
if(!x6701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6700.value)+(((1.5707963267949)*(x6701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6702=IKcos(j4);
IkReal x6703=IKsin(j4);
IkReal x6704=(cj5*r00);
IkReal x6705=(cj5*r10);
IkReal x6706=(r21*sj5);
IkReal x6707=(cj5*r20);
IkReal x6708=((1.0)*x6702);
IkReal x6709=((1.0)*x6703);
IkReal x6710=(sj5*x6703);
IkReal x6711=(sj5*x6702);
evalcond[0]=(((r01*x6711))+(((-1.0)*x6704*x6708))+((r02*x6703)));
evalcond[1]=((((-1.0)*r22*x6708))+((x6703*x6706))+(((-1.0)*x6707*x6709)));
evalcond[2]=((((-1.0)*x6705*x6709))+((r11*x6710))+(((-1.0)*r12*x6708)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6708))+((r01*x6710))+(((-1.0)*x6704*x6709)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6702*x6706))+((r22*x6703))+(((-1.0)*x6707*x6708)));
evalcond[5]=((((-1.0)*x6705*x6708))+((r11*x6711))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6712=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6712.valid){
continue;
}
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6712.value)))+(x6713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6714=IKcos(j4);
IkReal x6715=IKsin(j4);
IkReal x6716=(cj5*r00);
IkReal x6717=(cj5*r10);
IkReal x6718=(r21*sj5);
IkReal x6719=(cj5*r20);
IkReal x6720=((1.0)*x6714);
IkReal x6721=((1.0)*x6715);
IkReal x6722=(sj5*x6715);
IkReal x6723=(sj5*x6714);
evalcond[0]=(((r02*x6715))+(((-1.0)*x6716*x6720))+((r01*x6723)));
evalcond[1]=((((-1.0)*r22*x6720))+((x6715*x6718))+(((-1.0)*x6719*x6721)));
evalcond[2]=(((r11*x6722))+(((-1.0)*x6717*x6721))+(((-1.0)*r12*x6720)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6720))+(((-1.0)*x6716*x6721))+((r01*x6722)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6719*x6720))+((x6714*x6718))+((r22*x6715)));
evalcond[5]=(((r11*x6723))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6717*x6720))+((r12*x6715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6724=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6724;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6725=((1.0)*cj5);
IkReal x6726=((((-1.0)*r21*x6725))+(((-1.0)*r20*sj5)));
j4eval[0]=x6726;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6725)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6727=(r01*sj5);
IkReal x6728=(cj1*sj2);
IkReal x6729=(cj2*sj1);
IkReal x6730=((1.0)*r02);
IkReal x6731=((1.0)*cj5*r00);
IkReal x6732=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6732;
j4eval[1]=((IKabs(((((-1.0)*x6728*x6731))+((x6727*x6729))+((x6727*x6728))+(((-1.0)*x6729*x6731)))))+(IKabs(((((-1.0)*x6728*x6730))+(((-1.0)*x6729*x6730))))));
j4eval[2]=IKsign(x6732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6733=(r01*sj5);
IkReal x6734=(cj1*sj2);
IkReal x6735=(cj2*sj1);
IkReal x6736=((1.0)*r02);
IkReal x6737=((1.0)*cj5*r00);
CheckValue<IkReal> x6738 = IKatan2WithCheck(IkReal((((x6733*x6735))+((x6733*x6734))+(((-1.0)*x6735*x6737))+(((-1.0)*x6734*x6737)))),IkReal(((((-1.0)*x6735*x6736))+(((-1.0)*x6734*x6736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6738.valid){
continue;
}
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6738.value)+(((1.5707963267949)*(x6739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6740=IKcos(j4);
IkReal x6741=IKsin(j4);
IkReal x6742=(cj5*r00);
IkReal x6743=(cj5*r10);
IkReal x6744=(r21*sj5);
IkReal x6745=(cj5*r20);
IkReal x6746=((1.0)*x6740);
IkReal x6747=((1.0)*x6741);
IkReal x6748=(sj5*x6741);
IkReal x6749=(sj5*x6740);
evalcond[0]=(((r02*x6741))+(((-1.0)*x6742*x6746))+((r01*x6749)));
evalcond[1]=((((-1.0)*r22*x6746))+((x6741*x6744))+(((-1.0)*x6745*x6747)));
evalcond[2]=((((-1.0)*r12*x6746))+((r11*x6748))+(((-1.0)*x6743*x6747)));
evalcond[3]=((1.0)+(((-1.0)*x6742*x6747))+(((-1.0)*r02*x6746))+((r01*x6748)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6745*x6746))+((r22*x6741))+((x6740*x6744)));
evalcond[5]=(((r11*x6749))+(((-1.0)*sj1*sj2))+((r12*x6741))+(((-1.0)*x6743*x6746))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6750=((1.0)*cj5);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6750))+(((-1.0)*r20*sj5)))),-1);
if(!x6752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6751.value)+(((1.5707963267949)*(x6752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6753=IKcos(j4);
IkReal x6754=IKsin(j4);
IkReal x6755=(cj5*r00);
IkReal x6756=(cj5*r10);
IkReal x6757=(r21*sj5);
IkReal x6758=(cj5*r20);
IkReal x6759=((1.0)*x6753);
IkReal x6760=((1.0)*x6754);
IkReal x6761=(sj5*x6754);
IkReal x6762=(sj5*x6753);
evalcond[0]=((((-1.0)*x6755*x6759))+((r01*x6762))+((r02*x6754)));
evalcond[1]=((((-1.0)*x6758*x6760))+((x6754*x6757))+(((-1.0)*r22*x6759)));
evalcond[2]=(((r11*x6761))+(((-1.0)*x6756*x6760))+(((-1.0)*r12*x6759)));
evalcond[3]=((1.0)+(((-1.0)*x6755*x6760))+((r01*x6761))+(((-1.0)*r02*x6759)));
evalcond[4]=(((cj2*sj1))+((r22*x6754))+(((-1.0)*x6758*x6759))+((cj1*sj2))+((x6753*x6757)));
evalcond[5]=(((r12*x6754))+(((-1.0)*sj1*sj2))+((r11*x6762))+(((-1.0)*x6756*x6759))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6763 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6763.valid){
continue;
}
CheckValue<IkReal> x6764=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6763.value)+(((1.5707963267949)*(x6764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6765=IKcos(j4);
IkReal x6766=IKsin(j4);
IkReal x6767=(cj5*r00);
IkReal x6768=(cj5*r10);
IkReal x6769=(r21*sj5);
IkReal x6770=(cj5*r20);
IkReal x6771=((1.0)*x6765);
IkReal x6772=((1.0)*x6766);
IkReal x6773=(sj5*x6766);
IkReal x6774=(sj5*x6765);
evalcond[0]=(((r02*x6766))+((r01*x6774))+(((-1.0)*x6767*x6771)));
evalcond[1]=(((x6766*x6769))+(((-1.0)*r22*x6771))+(((-1.0)*x6770*x6772)));
evalcond[2]=(((r11*x6773))+(((-1.0)*x6768*x6772))+(((-1.0)*r12*x6771)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6771))+((r01*x6773))+(((-1.0)*x6767*x6772)));
evalcond[4]=(((cj2*sj1))+((r22*x6766))+((x6765*x6769))+(((-1.0)*x6770*x6771))+((cj1*sj2)));
evalcond[5]=(((r11*x6774))+(((-1.0)*x6768*x6771))+((r12*x6766))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6775=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6775);
rxp1_1=(px*r21);
rxp1_2=(r11*x6775);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6776=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6776);
rxp1_1=(px*r21);
rxp1_2=(r11*x6776);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6777=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6777);
rxp1_1=(px*r21);
rxp1_2=(r11*x6777);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6780=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6780.valid){
continue;
}
IkReal x6778=x6780.value;
IkReal x6779=(sj0*x6778);
cj4array[0]=((((-1.0)*sj1*sj2*x6779))+((cj1*cj2*x6779)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6781=IKsin(j4);
IkReal x6782=IKcos(j4);
IkReal x6783=(r21*sj5);
IkReal x6784=((1.0)*cj5*r20);
evalcond[0]=(r02*x6781);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6782)));
evalcond[2]=(((x6781*x6783))+(((-1.0)*x6781*x6784)));
evalcond[3]=(((r11*sj5*x6781))+(((-1.0)*cj5*r10*x6781)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6782*x6784))+((cj1*sj2))+((x6782*x6783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6787=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6787.valid){
continue;
}
IkReal x6785=x6787.value;
IkReal x6786=((1.0)*x6785);
cj4array[0]=((((-1.0)*cj2*sj1*x6786))+(((-1.0)*cj1*sj2*x6786)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6788=IKsin(j4);
IkReal x6789=IKcos(j4);
IkReal x6790=((1.0)*sj0);
IkReal x6791=((1.0)*cj5);
IkReal x6792=(sj5*x6788);
evalcond[0]=(r02*x6788);
evalcond[1]=((((-1.0)*x6790))+(((-1.0)*r02*x6789)));
evalcond[2]=(((r21*x6792))+(((-1.0)*r20*x6788*x6791)));
evalcond[3]=((((-1.0)*r10*x6788*x6791))+((r11*x6792)));
evalcond[4]=((((-1.0)*r10*x6789*x6791))+((r11*sj5*x6789))+(((-1.0)*cj1*cj2*x6790))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(r02,-1);
if(!x6793.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6793.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6794=IKsin(j4);
IkReal x6795=IKcos(j4);
IkReal x6796=(r21*sj5);
IkReal x6797=((1.0)*cj5);
IkReal x6798=(r11*sj5);
evalcond[0]=(r02*x6794);
evalcond[1]=((((-1.0)*r20*x6794*x6797))+((x6794*x6796)));
evalcond[2]=((((-1.0)*r10*x6794*x6797))+((x6794*x6798)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6795*x6797))+((x6795*x6796)));
evalcond[4]=((((-1.0)*r10*x6795*x6797))+(((-1.0)*cj1*cj2*sj0))+((x6795*x6798))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6799=((1.0)*sj0);
IkReal x6800=((1.0)*cj0);
CheckValue<IkReal> x6801 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6800))+(((-1.0)*r12*x6799)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x6799))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6801.valid){
continue;
}
CheckValue<IkReal> x6802=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6801.value)+(((1.5707963267949)*(x6802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6803=IKsin(j4);
IkReal x6804=IKcos(j4);
IkReal x6805=(cj5*r00);
IkReal x6806=(cj5*r10);
IkReal x6807=(r21*sj5);
IkReal x6808=(sj1*sj2);
IkReal x6809=(cj5*r20);
IkReal x6810=((1.0)*x6804);
IkReal x6811=((1.0)*cj1*cj2);
IkReal x6812=((1.0)*x6803);
IkReal x6813=(sj5*x6803);
IkReal x6814=(sj5*x6804);
evalcond[0]=((((-1.0)*x6809*x6812))+((x6803*x6807))+(((-1.0)*r22*x6810)));
evalcond[1]=(((r11*x6813))+cj0+(((-1.0)*x6806*x6812))+(((-1.0)*r12*x6810)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6805*x6812))+(((-1.0)*r02*x6810))+((r01*x6813)));
evalcond[3]=(((cj2*sj1))+((r22*x6803))+((cj1*sj2))+(((-1.0)*x6809*x6810))+((x6804*x6807)));
evalcond[4]=((((-1.0)*x6805*x6810))+((cj0*x6808))+((r01*x6814))+((r02*x6803))+(((-1.0)*cj0*x6811)));
evalcond[5]=(((r11*x6814))+((sj0*x6808))+(((-1.0)*x6806*x6810))+((r12*x6803))+(((-1.0)*sj0*x6811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6815=((1.0)*cj5);
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
CheckValue<IkReal> x6817=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6815)))),-1);
if(!x6817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6816.value)+(((1.5707963267949)*(x6817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6818=IKsin(j4);
IkReal x6819=IKcos(j4);
IkReal x6820=(cj5*r00);
IkReal x6821=(cj5*r10);
IkReal x6822=(r21*sj5);
IkReal x6823=(sj1*sj2);
IkReal x6824=(cj5*r20);
IkReal x6825=((1.0)*x6819);
IkReal x6826=((1.0)*cj1*cj2);
IkReal x6827=((1.0)*x6818);
IkReal x6828=(sj5*x6818);
IkReal x6829=(sj5*x6819);
evalcond[0]=((((-1.0)*x6824*x6827))+((x6818*x6822))+(((-1.0)*r22*x6825)));
evalcond[1]=(cj0+(((-1.0)*r12*x6825))+((r11*x6828))+(((-1.0)*x6821*x6827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6825))+((r01*x6828))+(((-1.0)*x6820*x6827)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6824*x6825))+((r22*x6818))+((x6819*x6822)));
evalcond[4]=(((r01*x6829))+((r02*x6818))+(((-1.0)*cj0*x6826))+(((-1.0)*x6820*x6825))+((cj0*x6823)));
evalcond[5]=((((-1.0)*sj0*x6826))+((r12*x6818))+((sj0*x6823))+((r11*x6829))+(((-1.0)*x6821*x6825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6830=((1.0)*cj5);
CheckValue<IkReal> x6831=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6830)))),-1);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6832.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6831.value)))+(x6832.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6833=IKsin(j4);
IkReal x6834=IKcos(j4);
IkReal x6835=(cj5*r00);
IkReal x6836=(cj5*r10);
IkReal x6837=(r21*sj5);
IkReal x6838=(sj1*sj2);
IkReal x6839=(cj5*r20);
IkReal x6840=((1.0)*x6834);
IkReal x6841=((1.0)*cj1*cj2);
IkReal x6842=((1.0)*x6833);
IkReal x6843=(sj5*x6833);
IkReal x6844=(sj5*x6834);
evalcond[0]=(((x6833*x6837))+(((-1.0)*x6839*x6842))+(((-1.0)*r22*x6840)));
evalcond[1]=(cj0+((r11*x6843))+(((-1.0)*x6836*x6842))+(((-1.0)*r12*x6840)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6835*x6842))+(((-1.0)*r02*x6840))+((r01*x6843)));
evalcond[3]=(((cj2*sj1))+((r22*x6833))+(((-1.0)*x6839*x6840))+((cj1*sj2))+((x6834*x6837)));
evalcond[4]=(((r02*x6833))+(((-1.0)*x6835*x6840))+((r01*x6844))+(((-1.0)*cj0*x6841))+((cj0*x6838)));
evalcond[5]=(((r11*x6844))+((sj0*x6838))+(((-1.0)*x6836*x6840))+((r12*x6833))+(((-1.0)*sj0*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6845=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6845;
j0eval[1]=IKsign(x6845);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6846=cj5*cj5;
IkReal x6847=r21*r21;
IkReal x6848=(cj2*sj1);
IkReal x6849=(cj1*sj2);
IkReal x6850=(r21*sj5);
IkReal x6851=((1.0)*cj5*r20);
IkReal x6852=((((-1.0)*x6846*x6847))+(r22*r22)+x6847+(((-2.0)*cj5*r20*x6850))+((x6846*(r20*r20))));
j4eval[0]=x6852;
j4eval[1]=IKsign(x6852);
j4eval[2]=((IKabs((((r22*x6848))+((r22*x6849)))))+(IKabs((((x6848*x6850))+((x6849*x6850))+(((-1.0)*x6848*x6851))+(((-1.0)*x6849*x6851))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6853=cj1*cj1;
IkReal x6854=(cj2*sj2);
IkReal x6855=(cj2*sj1);
IkReal x6856=(cj1*sj1);
j0eval[0]=((((-1.06936921195177)*cj1*x6855))+(((-2.0)*x6853*x6854))+x6854+x6856+(((-1.06936921195177)*sj2*x6853))+(((-2.0)*cj1*cj2*x6855)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6855)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.114688717055332)*px))+(((0.828504447384304)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.114688717055332)*py))+(((0.828504447384304)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.114688717055332)*px))+(((0.828504447384304)*py))))+IKsqr(((((0.114688717055332)*py))+(((0.828504447384304)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.114688717055332)*px))+(((0.828504447384304)*py))), ((((0.114688717055332)*py))+(((0.828504447384304)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6857=IKsin(j0);
IkReal x6858=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((1.1843)*x6858))+(((-0.163941)*x6857)));
evalcond[1]=((((0.163941)*x6858))+(((-1.0)*py))+(((1.1843)*x6857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6859=((1.0)*cj5);
IkReal x6860=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6859)));
j4eval[0]=x6860;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6859))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6861=((1.0)*cj5);
IkReal x6862=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6861)));
j4eval[0]=x6862;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x6861))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x6862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6863=cj5*cj5;
IkReal x6864=((1.0)*sj5);
IkReal x6865=(cj5*r20);
IkReal x6866=(r11*r21);
IkReal x6867=((((-1.0)*cj5*r10*r21*x6864))+(((-1.0)*x6863*x6866))+(((-1.0)*r11*x6864*x6865))+((r12*r22))+x6866+((r10*r20*x6863)));
j4eval[0]=x6867;
j4eval[1]=IKsign(x6867);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6865))+(((-1.0)*cj0*r21*x6864))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6868=cj5*cj5;
IkReal x6869=((1.0)*sj5);
IkReal x6870=(cj5*r20);
IkReal x6871=(r11*r21);
CheckValue<IkReal> x6872 = IKatan2WithCheck(IkReal((((cj0*x6870))+(((-1.0)*cj0*r21*x6869)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6872.valid){
continue;
}
CheckValue<IkReal> x6873=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6869))+(((-1.0)*r11*x6869*x6870))+((r12*r22))+x6871+(((-1.0)*x6868*x6871))+((r10*r20*x6868)))),-1);
if(!x6873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6872.value)+(((1.5707963267949)*(x6873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6874=IKsin(j4);
IkReal x6875=IKcos(j4);
IkReal x6876=((1.0)*sj0);
IkReal x6877=(cj5*r00);
IkReal x6878=(r11*sj5);
IkReal x6879=(cj5*r10);
IkReal x6880=(r21*sj5);
IkReal x6881=(cj5*r20);
IkReal x6882=(r01*sj5);
IkReal x6883=((1.0)*x6875);
IkReal x6884=((1.0)*x6874);
evalcond[0]=((((-1.0)*x6881*x6884))+((x6874*x6880))+(((-1.0)*r22*x6883)));
evalcond[1]=(((x6875*x6881))+(((-1.0)*x6880*x6883))+(((-1.0)*r22*x6884)));
evalcond[2]=(cj0+(((-1.0)*x6879*x6884))+((x6874*x6878))+(((-1.0)*r12*x6883)));
evalcond[3]=(((x6874*x6882))+(((-1.0)*x6876))+(((-1.0)*r02*x6883))+(((-1.0)*x6877*x6884)));
evalcond[4]=(((x6875*x6877))+(((-1.0)*r02*x6884))+(((-1.0)*x6882*x6883))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6876))+((x6875*x6879))+(((-1.0)*x6878*x6883))+(((-1.0)*r12*x6884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6885=((1.0)*cj5);
CheckValue<IkReal> x6886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6885)))),-1);
if(!x6886.valid){
continue;
}
CheckValue<IkReal> x6887 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6886.value)))+(x6887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6888=IKsin(j4);
IkReal x6889=IKcos(j4);
IkReal x6890=((1.0)*sj0);
IkReal x6891=(cj5*r00);
IkReal x6892=(r11*sj5);
IkReal x6893=(cj5*r10);
IkReal x6894=(r21*sj5);
IkReal x6895=(cj5*r20);
IkReal x6896=(r01*sj5);
IkReal x6897=((1.0)*x6889);
IkReal x6898=((1.0)*x6888);
evalcond[0]=((((-1.0)*x6895*x6898))+((x6888*x6894))+(((-1.0)*r22*x6897)));
evalcond[1]=((((-1.0)*x6894*x6897))+((x6889*x6895))+(((-1.0)*r22*x6898)));
evalcond[2]=(cj0+(((-1.0)*x6893*x6898))+((x6888*x6892))+(((-1.0)*r12*x6897)));
evalcond[3]=((((-1.0)*x6891*x6898))+((x6888*x6896))+(((-1.0)*x6890))+(((-1.0)*r02*x6897)));
evalcond[4]=((((-1.0)*x6896*x6897))+((x6889*x6891))+(((-1.0)*r02*x6898))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6892*x6897))+((x6889*x6893))+(((-1.0)*x6890))+(((-1.0)*r12*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6899=((1.0)*cj5);
CheckValue<IkReal> x6900 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6900.valid){
continue;
}
CheckValue<IkReal> x6901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6899))+(((-1.0)*r00*sj5)))),-1);
if(!x6901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6900.value)+(((1.5707963267949)*(x6901.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6902=IKsin(j4);
IkReal x6903=IKcos(j4);
IkReal x6904=((1.0)*sj0);
IkReal x6905=(cj5*r00);
IkReal x6906=(r11*sj5);
IkReal x6907=(cj5*r10);
IkReal x6908=(r21*sj5);
IkReal x6909=(cj5*r20);
IkReal x6910=(r01*sj5);
IkReal x6911=((1.0)*x6903);
IkReal x6912=((1.0)*x6902);
evalcond[0]=((((-1.0)*r22*x6911))+(((-1.0)*x6909*x6912))+((x6902*x6908)));
evalcond[1]=((((-1.0)*x6908*x6911))+(((-1.0)*r22*x6912))+((x6903*x6909)));
evalcond[2]=(cj0+(((-1.0)*x6907*x6912))+(((-1.0)*r12*x6911))+((x6902*x6906)));
evalcond[3]=((((-1.0)*x6904))+(((-1.0)*x6905*x6912))+(((-1.0)*r02*x6911))+((x6902*x6910)));
evalcond[4]=((((-1.0)*x6910*x6911))+((x6903*x6905))+(((-1.0)*r02*x6912))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6904))+(((-1.0)*r12*x6912))+(((-1.0)*x6906*x6911))+((x6903*x6907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6913=IKsin(j0);
IkReal x6914=IKcos(j0);
evalcond[0]=((((0.0397)*x6914))+(((-1.0)*px))+(((-0.163941)*x6913)));
evalcond[1]=((((0.163941)*x6914))+(((0.0397)*x6913))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6915=((1.0)*cj5);
IkReal x6916=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6915)));
j4eval[0]=x6916;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6915)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6917=cj5*cj5;
IkReal x6918=((1.0)*r21);
IkReal x6919=(cj5*sj5);
IkReal x6920=((1.0)*r20);
IkReal x6921=((((-1.0)*r01*x6917*x6918))+(((-1.0)*r01*x6919*x6920))+((r01*r21))+(((-1.0)*r00*x6918*x6919))+((r00*r20*x6917))+((r02*r22)));
j4eval[0]=x6921;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6920)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6921);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6922=cj5*cj5;
IkReal x6923=(r21*sj5);
IkReal x6924=(r11*r21);
IkReal x6925=((1.0)*cj5*r20);
IkReal x6926=((((-1.0)*x6922*x6924))+(((-1.0)*r11*sj5*x6925))+((r12*r22))+x6924+((r10*r20*x6922))+(((-1.0)*cj5*r10*x6923)));
j4eval[0]=x6926;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x6923))+(((-1.0)*sj0*x6925))))));
j4eval[2]=IKsign(x6926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6927=cj5*cj5;
IkReal x6928=(r21*sj5);
IkReal x6929=(r11*r21);
IkReal x6930=((1.0)*cj5*r20);
CheckValue<IkReal> x6931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x6930))+(((-1.0)*x6927*x6929))+((r12*r22))+x6929+((r10*r20*x6927))+(((-1.0)*cj5*r10*x6928)))),-1);
if(!x6931.valid){
continue;
}
CheckValue<IkReal> x6932 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6928))+(((-1.0)*sj0*x6930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6931.value)))+(x6932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6933=IKsin(j4);
IkReal x6934=IKcos(j4);
IkReal x6935=(r11*sj5);
IkReal x6936=(cj5*r00);
IkReal x6937=(cj5*r10);
IkReal x6938=(r21*sj5);
IkReal x6939=(cj5*r20);
IkReal x6940=(r01*sj5);
IkReal x6941=((1.0)*x6934);
IkReal x6942=((1.0)*x6933);
evalcond[0]=(((x6933*x6938))+(((-1.0)*r22*x6941))+(((-1.0)*x6939*x6942)));
evalcond[1]=((((-1.0)*r22*x6942))+(((-1.0)*x6938*x6941))+((x6934*x6939)));
evalcond[2]=(cj0+(((-1.0)*r12*x6941))+((x6933*x6935))+(((-1.0)*x6937*x6942)));
evalcond[3]=(cj0+(((-1.0)*r02*x6942))+(((-1.0)*x6940*x6941))+((x6934*x6936)));
evalcond[4]=(sj0+(((-1.0)*r12*x6942))+(((-1.0)*x6935*x6941))+((x6934*x6937)));
evalcond[5]=((((-1.0)*sj0))+((x6933*x6940))+(((-1.0)*r02*x6941))+(((-1.0)*x6936*x6942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6943=cj5*cj5;
IkReal x6944=((1.0)*r21);
IkReal x6945=(cj5*sj5);
IkReal x6946=((1.0)*r20);
CheckValue<IkReal> x6947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6943*x6944))+((r00*r20*x6943))+((r01*r21))+(((-1.0)*r01*x6945*x6946))+((r02*r22))+(((-1.0)*r00*x6944*x6945)))),-1);
if(!x6947.valid){
continue;
}
CheckValue<IkReal> x6948 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6947.value)))+(x6948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6949=IKsin(j4);
IkReal x6950=IKcos(j4);
IkReal x6951=(r11*sj5);
IkReal x6952=(cj5*r00);
IkReal x6953=(cj5*r10);
IkReal x6954=(r21*sj5);
IkReal x6955=(cj5*r20);
IkReal x6956=(r01*sj5);
IkReal x6957=((1.0)*x6950);
IkReal x6958=((1.0)*x6949);
evalcond[0]=(((x6949*x6954))+(((-1.0)*x6955*x6958))+(((-1.0)*r22*x6957)));
evalcond[1]=(((x6950*x6955))+(((-1.0)*r22*x6958))+(((-1.0)*x6954*x6957)));
evalcond[2]=(((x6949*x6951))+cj0+(((-1.0)*r12*x6957))+(((-1.0)*x6953*x6958)));
evalcond[3]=((((-1.0)*x6956*x6957))+cj0+((x6950*x6952))+(((-1.0)*r02*x6958)));
evalcond[4]=((((-1.0)*x6951*x6957))+sj0+(((-1.0)*r12*x6958))+((x6950*x6953)));
evalcond[5]=((((-1.0)*sj0))+((x6949*x6956))+(((-1.0)*x6952*x6958))+(((-1.0)*r02*x6957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6959=((1.0)*cj5);
CheckValue<IkReal> x6960=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6959)))),-1);
if(!x6960.valid){
continue;
}
CheckValue<IkReal> x6961 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6960.value)))+(x6961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6962=IKsin(j4);
IkReal x6963=IKcos(j4);
IkReal x6964=(r11*sj5);
IkReal x6965=(cj5*r00);
IkReal x6966=(cj5*r10);
IkReal x6967=(r21*sj5);
IkReal x6968=(cj5*r20);
IkReal x6969=(r01*sj5);
IkReal x6970=((1.0)*x6963);
IkReal x6971=((1.0)*x6962);
evalcond[0]=(((x6962*x6967))+(((-1.0)*x6968*x6971))+(((-1.0)*r22*x6970)));
evalcond[1]=(((x6963*x6968))+(((-1.0)*x6967*x6970))+(((-1.0)*r22*x6971)));
evalcond[2]=(((x6962*x6964))+cj0+(((-1.0)*r12*x6970))+(((-1.0)*x6966*x6971)));
evalcond[3]=((((-1.0)*r02*x6971))+((x6963*x6965))+cj0+(((-1.0)*x6969*x6970)));
evalcond[4]=(sj0+(((-1.0)*x6964*x6970))+((x6963*x6966))+(((-1.0)*r12*x6971)));
evalcond[5]=(((x6962*x6969))+(((-1.0)*sj0))+(((-1.0)*x6965*x6971))+(((-1.0)*r02*x6970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6972=((1.0)*sj5);
IkReal x6973=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x6972))+(((-1.0)*r11*x6973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6972))+(((-1.0)*r01*x6973)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6972))+(((-1.0)*r11*x6973))))+IKsqr(((((-1.0)*r00*x6972))+(((-1.0)*r01*x6973))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6972))+(((-1.0)*r11*x6973))), ((((-1.0)*r00*x6972))+(((-1.0)*r01*x6973))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6974=IKsin(j0);
IkReal x6975=IKcos(j0);
IkReal x6976=(cj5*r01);
IkReal x6977=(cj5*r11);
IkReal x6978=((0.1157)*sj5);
IkReal x6979=((1.0)*sj5);
evalcond[0]=((((-1.0)*x6976))+(((-1.0)*x6975))+(((-1.0)*r00*x6979)));
evalcond[1]=((((-1.0)*x6977))+(((-1.0)*x6974))+(((-1.0)*r10*x6979)));
evalcond[2]=((((-0.1157)*x6976))+(((-1.0)*px))+(((-0.163941)*x6974))+(((-1.0)*r00*x6978)));
evalcond[3]=((((-0.1157)*x6977))+(((-1.0)*r10*x6978))+(((-1.0)*py))+(((0.163941)*x6975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6980=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6980;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6981=((1.0)*cj5);
IkReal x6982=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6981)));
j4eval[0]=x6982;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6981))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6983=cj5*cj5;
IkReal x6984=r21*r21;
IkReal x6985=(r21*sj5);
IkReal x6986=(cj5*r20);
IkReal x6987=((r22*r22)+((x6983*(r20*r20)))+x6984+(((-2.0)*x6985*x6986))+(((-1.0)*x6983*x6984)));
j4eval[0]=x6987;
j4eval[1]=IKsign(x6987);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x6986))+x6985))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6988=cj5*cj5;
IkReal x6989=r21*r21;
IkReal x6990=(r21*sj5);
IkReal x6991=(cj5*r20);
CheckValue<IkReal> x6992=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x6988*(r20*r20)))+(((-2.0)*x6990*x6991))+x6989+(((-1.0)*x6988*x6989)))),-1);
if(!x6992.valid){
continue;
}
CheckValue<IkReal> x6993 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6991))+x6990)),IKFAST_ATAN2_MAGTHRESH);
if(!x6993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6992.value)))+(x6993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6994=IKsin(j4);
IkReal x6995=IKcos(j4);
IkReal x6996=(r11*sj5);
IkReal x6997=(r21*sj5);
IkReal x6998=(cj5*r00);
IkReal x6999=(cj5*r20);
IkReal x7000=(r01*sj5);
IkReal x7001=(cj5*r10);
IkReal x7002=((1.0)*x6995);
IkReal x7003=((1.0)*x6994);
evalcond[0]=((((-1.0)*r22*x7002))+((x6994*x6997))+(((-1.0)*x6999*x7003)));
evalcond[1]=((((-1.0)*r02*x7003))+(((-1.0)*x7000*x7002))+((x6995*x6998)));
evalcond[2]=((((-1.0)*r12*x7003))+((x6995*x7001))+(((-1.0)*x6996*x7002)));
evalcond[3]=((((-1.0)*r12*x7002))+((x6994*x6996))+cj0+(((-1.0)*x7001*x7003)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7003))+(((-1.0)*x6997*x7002))+((x6995*x6999)));
evalcond[5]=((((-1.0)*r02*x7002))+(((-1.0)*sj0))+((x6994*x7000))+(((-1.0)*x6998*x7003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7004=((1.0)*cj5);
CheckValue<IkReal> x7005 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7005.valid){
continue;
}
CheckValue<IkReal> x7006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7004)))),-1);
if(!x7006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7005.value)+(((1.5707963267949)*(x7006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7007=IKsin(j4);
IkReal x7008=IKcos(j4);
IkReal x7009=(r11*sj5);
IkReal x7010=(r21*sj5);
IkReal x7011=(cj5*r00);
IkReal x7012=(cj5*r20);
IkReal x7013=(r01*sj5);
IkReal x7014=(cj5*r10);
IkReal x7015=((1.0)*x7008);
IkReal x7016=((1.0)*x7007);
evalcond[0]=((((-1.0)*r22*x7015))+(((-1.0)*x7012*x7016))+((x7007*x7010)));
evalcond[1]=(((x7008*x7011))+(((-1.0)*x7013*x7015))+(((-1.0)*r02*x7016)));
evalcond[2]=((((-1.0)*x7009*x7015))+((x7008*x7014))+(((-1.0)*r12*x7016)));
evalcond[3]=(cj0+((x7007*x7009))+(((-1.0)*r12*x7015))+(((-1.0)*x7014*x7016)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7016))+(((-1.0)*x7010*x7015))+((x7008*x7012)));
evalcond[5]=((((-1.0)*x7011*x7016))+(((-1.0)*sj0))+((x7007*x7013))+(((-1.0)*r02*x7015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7017 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7017.valid){
continue;
}
CheckValue<IkReal> x7018=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7017.value)+(((1.5707963267949)*(x7018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7019=IKsin(j4);
IkReal x7020=IKcos(j4);
IkReal x7021=(r11*sj5);
IkReal x7022=(r21*sj5);
IkReal x7023=(cj5*r00);
IkReal x7024=(cj5*r20);
IkReal x7025=(r01*sj5);
IkReal x7026=(cj5*r10);
IkReal x7027=((1.0)*x7020);
IkReal x7028=((1.0)*x7019);
evalcond[0]=((((-1.0)*r22*x7027))+(((-1.0)*x7024*x7028))+((x7019*x7022)));
evalcond[1]=((((-1.0)*x7025*x7027))+((x7020*x7023))+(((-1.0)*r02*x7028)));
evalcond[2]=((((-1.0)*r12*x7028))+(((-1.0)*x7021*x7027))+((x7020*x7026)));
evalcond[3]=((((-1.0)*r12*x7027))+cj0+((x7019*x7021))+(((-1.0)*x7026*x7028)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7028))+((x7020*x7024))+(((-1.0)*x7022*x7027)));
evalcond[5]=((((-1.0)*sj0))+((x7019*x7025))+(((-1.0)*r02*x7027))+(((-1.0)*x7023*x7028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7029=IKcos(j0);
IkReal x7030=IKsin(j0);
evalcond[0]=((((-0.5723)*x7029))+(((-0.163941)*x7030))+(((-1.0)*px)));
evalcond[1]=((((-0.5723)*x7030))+(((0.163941)*x7029))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7031=((1.0)*cj5);
IkReal x7032=((((-1.0)*r01*x7031))+(((-1.0)*r00*sj5)));
j4eval[0]=x7032;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7031)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7033=cj5*cj5;
IkReal x7034=((1.0)*r21);
IkReal x7035=(cj5*sj5);
IkReal x7036=((1.0)*r20);
IkReal x7037=((((-1.0)*r00*x7034*x7035))+((r01*r21))+(((-1.0)*r01*x7035*x7036))+((r00*r20*x7033))+((r02*r22))+(((-1.0)*r01*x7033*x7034)));
j4eval[0]=x7037;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7036)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7038=cj5*cj5;
IkReal x7039=(r21*sj5);
IkReal x7040=(r11*r21);
IkReal x7041=((1.0)*cj5*r20);
IkReal x7042=((((-1.0)*r11*sj5*x7041))+x7040+(((-1.0)*x7038*x7040))+((r12*r22))+((r10*r20*x7038))+(((-1.0)*cj5*r10*x7039)));
j4eval[0]=x7042;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7039))+(((-1.0)*sj0*x7041))))));
j4eval[2]=IKsign(x7042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7043=cj5*cj5;
IkReal x7044=(r21*sj5);
IkReal x7045=(r11*r21);
IkReal x7046=((1.0)*cj5*r20);
CheckValue<IkReal> x7047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7046))+x7045+(((-1.0)*x7043*x7045))+((r12*r22))+((r10*r20*x7043))+(((-1.0)*cj5*r10*x7044)))),-1);
if(!x7047.valid){
continue;
}
CheckValue<IkReal> x7048 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7044))+(((-1.0)*sj0*x7046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7047.value)))+(x7048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7049=IKsin(j4);
IkReal x7050=IKcos(j4);
IkReal x7051=(r11*sj5);
IkReal x7052=(cj5*r00);
IkReal x7053=(cj5*r10);
IkReal x7054=(r21*sj5);
IkReal x7055=(cj5*r20);
IkReal x7056=(r01*sj5);
IkReal x7057=((1.0)*x7050);
IkReal x7058=((1.0)*x7049);
evalcond[0]=((((-1.0)*r22*x7057))+(((-1.0)*x7055*x7058))+((x7049*x7054)));
evalcond[1]=((((-1.0)*x7054*x7057))+(((-1.0)*r22*x7058))+((x7050*x7055)));
evalcond[2]=(cj0+(((-1.0)*x7053*x7058))+(((-1.0)*r12*x7057))+((x7049*x7051)));
evalcond[3]=(cj0+((x7050*x7052))+(((-1.0)*x7056*x7057))+(((-1.0)*r02*x7058)));
evalcond[4]=(sj0+((x7050*x7053))+(((-1.0)*r12*x7058))+(((-1.0)*x7051*x7057)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7052*x7058))+((x7049*x7056))+(((-1.0)*r02*x7057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7059=cj5*cj5;
IkReal x7060=((1.0)*r21);
IkReal x7061=(cj5*sj5);
IkReal x7062=((1.0)*r20);
CheckValue<IkReal> x7063=IKPowWithIntegerCheck(IKsign((((r00*r20*x7059))+(((-1.0)*r01*x7059*x7060))+(((-1.0)*r01*x7061*x7062))+((r01*r21))+(((-1.0)*r00*x7060*x7061))+((r02*r22)))),-1);
if(!x7063.valid){
continue;
}
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7063.value)))+(x7064.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7065=IKsin(j4);
IkReal x7066=IKcos(j4);
IkReal x7067=(r11*sj5);
IkReal x7068=(cj5*r00);
IkReal x7069=(cj5*r10);
IkReal x7070=(r21*sj5);
IkReal x7071=(cj5*r20);
IkReal x7072=(r01*sj5);
IkReal x7073=((1.0)*x7066);
IkReal x7074=((1.0)*x7065);
evalcond[0]=((((-1.0)*x7071*x7074))+((x7065*x7070))+(((-1.0)*r22*x7073)));
evalcond[1]=((((-1.0)*x7070*x7073))+((x7066*x7071))+(((-1.0)*r22*x7074)));
evalcond[2]=((((-1.0)*x7069*x7074))+cj0+(((-1.0)*r12*x7073))+((x7065*x7067)));
evalcond[3]=(cj0+(((-1.0)*x7072*x7073))+(((-1.0)*r02*x7074))+((x7066*x7068)));
evalcond[4]=(sj0+(((-1.0)*x7067*x7073))+(((-1.0)*r12*x7074))+((x7066*x7069)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7068*x7074))+(((-1.0)*r02*x7073))+((x7065*x7072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7075=((1.0)*cj5);
CheckValue<IkReal> x7076 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7076.valid){
continue;
}
CheckValue<IkReal> x7077=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7075))+(((-1.0)*r00*sj5)))),-1);
if(!x7077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7076.value)+(((1.5707963267949)*(x7077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7078=IKsin(j4);
IkReal x7079=IKcos(j4);
IkReal x7080=(r11*sj5);
IkReal x7081=(cj5*r00);
IkReal x7082=(cj5*r10);
IkReal x7083=(r21*sj5);
IkReal x7084=(cj5*r20);
IkReal x7085=(r01*sj5);
IkReal x7086=((1.0)*x7079);
IkReal x7087=((1.0)*x7078);
evalcond[0]=((((-1.0)*x7084*x7087))+(((-1.0)*r22*x7086))+((x7078*x7083)));
evalcond[1]=((((-1.0)*x7083*x7086))+(((-1.0)*r22*x7087))+((x7079*x7084)));
evalcond[2]=(cj0+(((-1.0)*r12*x7086))+(((-1.0)*x7082*x7087))+((x7078*x7080)));
evalcond[3]=(cj0+((x7079*x7081))+(((-1.0)*r02*x7087))+(((-1.0)*x7085*x7086)));
evalcond[4]=(sj0+(((-1.0)*r12*x7087))+((x7079*x7082))+(((-1.0)*x7080*x7086)));
evalcond[5]=((((-1.0)*sj0))+((x7078*x7085))+(((-1.0)*r02*x7086))+(((-1.0)*x7081*x7087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7088=IKsin(j0);
IkReal x7089=IKcos(j0);
IkReal x7090=(cj5*r01);
IkReal x7091=(cj5*r11);
IkReal x7092=((0.1157)*sj5);
IkReal x7093=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7090))+x7089+(((-1.0)*r00*x7093)));
evalcond[1]=((((-1.0)*x7091))+x7088+(((-1.0)*r10*x7093)));
evalcond[2]=((((-0.1157)*x7090))+(((-1.0)*r00*x7092))+(((-0.163941)*x7088))+(((-1.0)*px)));
evalcond[3]=((((-0.1157)*x7091))+(((0.163941)*x7089))+(((-1.0)*r10*x7092))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7094=((1.0)*sj5);
IkReal x7095=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7094)));
j4eval[0]=x7095;
j4eval[1]=IKsign(x7095);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7094))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7096=((1.0)*cj5);
IkReal x7097=((((-1.0)*r01*x7096))+(((-1.0)*r00*sj5)));
j4eval[0]=x7097;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7096)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7097);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7098=r21*r21;
IkReal x7099=cj5*cj5;
IkReal x7100=(r21*sj5);
IkReal x7101=(cj5*r20);
IkReal x7102=((((-1.0)*x7099*(r20*r20)))+(((-1.0)*x7098))+((x7098*x7099))+(((-1.0)*(r22*r22)))+(((2.0)*x7100*x7101)));
j4eval[0]=x7102;
j4eval[1]=((IKabs((x7100+(((-1.0)*x7101)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7103=r21*r21;
IkReal x7104=cj5*cj5;
IkReal x7105=(r21*sj5);
IkReal x7106=(cj5*r20);
CheckValue<IkReal> x7107=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7103))+(((2.0)*x7105*x7106))+(((-1.0)*(r22*r22)))+((x7103*x7104))+(((-1.0)*x7104*(r20*r20))))),-1);
if(!x7107.valid){
continue;
}
CheckValue<IkReal> x7108 = IKatan2WithCheck(IkReal(r22),IkReal((x7105+(((-1.0)*x7106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7107.value)))+(x7108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7109=IKsin(j4);
IkReal x7110=IKcos(j4);
IkReal x7111=(r11*sj5);
IkReal x7112=(r21*sj5);
IkReal x7113=(cj5*r00);
IkReal x7114=(cj5*r20);
IkReal x7115=(r01*sj5);
IkReal x7116=(cj5*r10);
IkReal x7117=((1.0)*x7110);
IkReal x7118=((1.0)*x7109);
evalcond[0]=(((x7109*x7112))+(((-1.0)*r22*x7117))+(((-1.0)*x7114*x7118)));
evalcond[1]=((((-1.0)*x7115*x7117))+((x7110*x7113))+(((-1.0)*r02*x7118)));
evalcond[2]=(((x7110*x7116))+(((-1.0)*x7111*x7117))+(((-1.0)*r12*x7118)));
evalcond[3]=((((-1.0)*x7116*x7118))+cj0+(((-1.0)*r12*x7117))+((x7109*x7111)));
evalcond[4]=((-1.0)+((x7110*x7114))+(((-1.0)*x7112*x7117))+(((-1.0)*r22*x7118)));
evalcond[5]=((((-1.0)*sj0))+((x7109*x7115))+(((-1.0)*r02*x7117))+(((-1.0)*x7113*x7118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7119=((1.0)*cj5);
CheckValue<IkReal> x7120=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7119)))),-1);
if(!x7120.valid){
continue;
}
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7120.value)))+(x7121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7122=IKsin(j4);
IkReal x7123=IKcos(j4);
IkReal x7124=(r11*sj5);
IkReal x7125=(r21*sj5);
IkReal x7126=(cj5*r00);
IkReal x7127=(cj5*r20);
IkReal x7128=(r01*sj5);
IkReal x7129=(cj5*r10);
IkReal x7130=((1.0)*x7123);
IkReal x7131=((1.0)*x7122);
evalcond[0]=((((-1.0)*x7127*x7131))+(((-1.0)*r22*x7130))+((x7122*x7125)));
evalcond[1]=(((x7123*x7126))+(((-1.0)*x7128*x7130))+(((-1.0)*r02*x7131)));
evalcond[2]=((((-1.0)*r12*x7131))+((x7123*x7129))+(((-1.0)*x7124*x7130)));
evalcond[3]=((((-1.0)*r12*x7130))+cj0+(((-1.0)*x7129*x7131))+((x7122*x7124)));
evalcond[4]=((-1.0)+(((-1.0)*x7125*x7130))+((x7123*x7127))+(((-1.0)*r22*x7131)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7126*x7131))+(((-1.0)*r02*x7130))+((x7122*x7128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7132=((1.0)*sj5);
CheckValue<IkReal> x7133 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7132))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7133.valid){
continue;
}
CheckValue<IkReal> x7134=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7132)))),-1);
if(!x7134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7133.value)+(((1.5707963267949)*(x7134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7135=IKsin(j4);
IkReal x7136=IKcos(j4);
IkReal x7137=(r11*sj5);
IkReal x7138=(r21*sj5);
IkReal x7139=(cj5*r00);
IkReal x7140=(cj5*r20);
IkReal x7141=(r01*sj5);
IkReal x7142=(cj5*r10);
IkReal x7143=((1.0)*x7136);
IkReal x7144=((1.0)*x7135);
evalcond[0]=((((-1.0)*r22*x7143))+((x7135*x7138))+(((-1.0)*x7140*x7144)));
evalcond[1]=((((-1.0)*x7141*x7143))+(((-1.0)*r02*x7144))+((x7136*x7139)));
evalcond[2]=(((x7136*x7142))+(((-1.0)*x7137*x7143))+(((-1.0)*r12*x7144)));
evalcond[3]=((((-1.0)*x7142*x7144))+cj0+((x7135*x7137))+(((-1.0)*r12*x7143)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7144))+(((-1.0)*x7138*x7143))+((x7136*x7140)));
evalcond[5]=((((-1.0)*sj0))+((x7135*x7141))+(((-1.0)*x7139*x7144))+(((-1.0)*r02*x7143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7145=IKsin(j0);
IkReal x7146=IKcos(j0);
evalcond[0]=((((-0.163941)*x7145))+(((-1.0)*px))+(((0.5723)*x7146)));
evalcond[1]=((((0.163941)*x7146))+(((-1.0)*py))+(((0.5723)*x7145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7147=((1.0)*cj5);
IkReal x7148=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7147)));
j4eval[0]=x7148;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7147)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7149=((1.0)*cj5);
IkReal x7150=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7149)));
j4eval[0]=x7150;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7149))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7151=cj5*cj5;
IkReal x7152=((1.0)*sj5);
IkReal x7153=(cj5*r20);
IkReal x7154=(r11*r21);
IkReal x7155=(x7154+((r10*r20*x7151))+(((-1.0)*r11*x7152*x7153))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7152))+(((-1.0)*x7151*x7154)));
j4eval[0]=x7155;
j4eval[1]=IKsign(x7155);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7152))+((cj0*x7153)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7156=cj5*cj5;
IkReal x7157=((1.0)*sj5);
IkReal x7158=(cj5*r20);
IkReal x7159=(r11*r21);
CheckValue<IkReal> x7160 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7157))+((cj0*x7158)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7160.valid){
continue;
}
CheckValue<IkReal> x7161=IKPowWithIntegerCheck(IKsign((x7159+((r10*r20*x7156))+(((-1.0)*r11*x7157*x7158))+((r12*r22))+(((-1.0)*x7156*x7159))+(((-1.0)*cj5*r10*r21*x7157)))),-1);
if(!x7161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7160.value)+(((1.5707963267949)*(x7161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7162=IKsin(j4);
IkReal x7163=IKcos(j4);
IkReal x7164=((1.0)*sj0);
IkReal x7165=(cj5*r00);
IkReal x7166=(r11*sj5);
IkReal x7167=(cj5*r10);
IkReal x7168=(r21*sj5);
IkReal x7169=(cj5*r20);
IkReal x7170=(r01*sj5);
IkReal x7171=((1.0)*x7163);
IkReal x7172=((1.0)*x7162);
evalcond[0]=(((x7162*x7168))+(((-1.0)*x7169*x7172))+(((-1.0)*r22*x7171)));
evalcond[1]=((((-1.0)*x7168*x7171))+(((-1.0)*r22*x7172))+((x7163*x7169)));
evalcond[2]=(((x7162*x7166))+cj0+(((-1.0)*r12*x7171))+(((-1.0)*x7167*x7172)));
evalcond[3]=((((-1.0)*r02*x7171))+(((-1.0)*x7164))+((x7162*x7170))+(((-1.0)*x7165*x7172)));
evalcond[4]=((((-1.0)*x7170*x7171))+(((-1.0)*r02*x7172))+((x7163*x7165))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7164))+(((-1.0)*r12*x7172))+((x7163*x7167))+(((-1.0)*x7166*x7171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7173=((1.0)*cj5);
CheckValue<IkReal> x7174 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7173))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7173)))),-1);
if(!x7175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7174.value)+(((1.5707963267949)*(x7175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7176=IKsin(j4);
IkReal x7177=IKcos(j4);
IkReal x7178=((1.0)*sj0);
IkReal x7179=(cj5*r00);
IkReal x7180=(r11*sj5);
IkReal x7181=(cj5*r10);
IkReal x7182=(r21*sj5);
IkReal x7183=(cj5*r20);
IkReal x7184=(r01*sj5);
IkReal x7185=((1.0)*x7177);
IkReal x7186=((1.0)*x7176);
evalcond[0]=(((x7176*x7182))+(((-1.0)*x7183*x7186))+(((-1.0)*r22*x7185)));
evalcond[1]=((((-1.0)*x7182*x7185))+(((-1.0)*r22*x7186))+((x7177*x7183)));
evalcond[2]=(((x7176*x7180))+cj0+(((-1.0)*x7181*x7186))+(((-1.0)*r12*x7185)));
evalcond[3]=((((-1.0)*x7178))+((x7176*x7184))+(((-1.0)*x7179*x7186))+(((-1.0)*r02*x7185)));
evalcond[4]=(((x7177*x7179))+(((-1.0)*x7184*x7185))+(((-1.0)*r02*x7186))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7178))+(((-1.0)*x7180*x7185))+((x7177*x7181))+(((-1.0)*r12*x7186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7187=((1.0)*cj5);
CheckValue<IkReal> x7188 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7188.valid){
continue;
}
CheckValue<IkReal> x7189=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7187)))),-1);
if(!x7189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7188.value)+(((1.5707963267949)*(x7189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7190=IKsin(j4);
IkReal x7191=IKcos(j4);
IkReal x7192=((1.0)*sj0);
IkReal x7193=(cj5*r00);
IkReal x7194=(r11*sj5);
IkReal x7195=(cj5*r10);
IkReal x7196=(r21*sj5);
IkReal x7197=(cj5*r20);
IkReal x7198=(r01*sj5);
IkReal x7199=((1.0)*x7191);
IkReal x7200=((1.0)*x7190);
evalcond[0]=(((x7190*x7196))+(((-1.0)*r22*x7199))+(((-1.0)*x7197*x7200)));
evalcond[1]=(((x7191*x7197))+(((-1.0)*x7196*x7199))+(((-1.0)*r22*x7200)));
evalcond[2]=(((x7190*x7194))+cj0+(((-1.0)*x7195*x7200))+(((-1.0)*r12*x7199)));
evalcond[3]=(((x7190*x7198))+(((-1.0)*x7192))+(((-1.0)*x7193*x7200))+(((-1.0)*r02*x7199)));
evalcond[4]=(((x7191*x7193))+(((-1.0)*x7198*x7199))+(((-1.0)*cj0))+(((-1.0)*r02*x7200)));
evalcond[5]=(((x7191*x7195))+(((-1.0)*x7192))+(((-1.0)*x7194*x7199))+(((-1.0)*r12*x7200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.828504447384304)*py))+(((-0.114688717055332)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.828504447384304)*px))+(((0.114688717055332)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))))+IKsqr(((((-0.828504447384304)*px))+(((0.114688717055332)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.828504447384304)*py))+(((-0.114688717055332)*px))), ((((-0.828504447384304)*px))+(((0.114688717055332)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7201=IKcos(j0);
IkReal x7202=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x7202))+(((-1.1843)*x7201)));
evalcond[1]=((((-1.0)*py))+(((-1.1843)*x7202))+(((0.163941)*x7201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7203=((1.0)*cj5);
IkReal x7204=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7203)));
j4eval[0]=x7204;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7203))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7205=cj5*cj5;
IkReal x7206=((1.0)*r21);
IkReal x7207=(cj5*sj5);
IkReal x7208=((1.0)*r20);
IkReal x7209=(((r00*r20*x7205))+(((-1.0)*r00*x7206*x7207))+((r01*r21))+(((-1.0)*r01*x7207*x7208))+(((-1.0)*r01*x7205*x7206))+((r02*r22)));
j4eval[0]=x7209;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7208)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7209);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7210=cj5*cj5;
IkReal x7211=(r21*sj5);
IkReal x7212=(r11*r21);
IkReal x7213=((1.0)*cj5*r20);
IkReal x7214=(x7212+(((-1.0)*r11*sj5*x7213))+((r10*r20*x7210))+((r12*r22))+(((-1.0)*cj5*r10*x7211))+(((-1.0)*x7210*x7212)));
j4eval[0]=x7214;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7213))+((sj0*x7211))))));
j4eval[2]=IKsign(x7214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7215=cj5*cj5;
IkReal x7216=(r21*sj5);
IkReal x7217=(r11*r21);
IkReal x7218=((1.0)*cj5*r20);
CheckValue<IkReal> x7219=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7215*x7217))+x7217+(((-1.0)*r11*sj5*x7218))+((r10*r20*x7215))+((r12*r22))+(((-1.0)*cj5*r10*x7216)))),-1);
if(!x7219.valid){
continue;
}
CheckValue<IkReal> x7220 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7218))+((sj0*x7216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7219.value)))+(x7220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7221=IKsin(j4);
IkReal x7222=IKcos(j4);
IkReal x7223=(r11*sj5);
IkReal x7224=(cj5*r00);
IkReal x7225=(cj5*r10);
IkReal x7226=(r21*sj5);
IkReal x7227=(cj5*r20);
IkReal x7228=(r01*sj5);
IkReal x7229=((1.0)*x7222);
IkReal x7230=((1.0)*x7221);
evalcond[0]=(((x7221*x7226))+(((-1.0)*x7227*x7230))+(((-1.0)*r22*x7229)));
evalcond[1]=(((x7222*x7227))+(((-1.0)*r22*x7230))+(((-1.0)*x7226*x7229)));
evalcond[2]=(cj0+(((-1.0)*x7225*x7230))+((x7221*x7223))+(((-1.0)*r12*x7229)));
evalcond[3]=(cj0+(((-1.0)*x7228*x7229))+((x7222*x7224))+(((-1.0)*r02*x7230)));
evalcond[4]=(sj0+((x7222*x7225))+(((-1.0)*x7223*x7229))+(((-1.0)*r12*x7230)));
evalcond[5]=((((-1.0)*r02*x7229))+(((-1.0)*sj0))+(((-1.0)*x7224*x7230))+((x7221*x7228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7231=cj5*cj5;
IkReal x7232=((1.0)*r21);
IkReal x7233=(cj5*sj5);
IkReal x7234=((1.0)*r20);
CheckValue<IkReal> x7235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7232*x7233))+(((-1.0)*r01*x7231*x7232))+((r01*r21))+((r02*r22))+((r00*r20*x7231))+(((-1.0)*r01*x7233*x7234)))),-1);
if(!x7235.valid){
continue;
}
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7235.value)))+(x7236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7237=IKsin(j4);
IkReal x7238=IKcos(j4);
IkReal x7239=(r11*sj5);
IkReal x7240=(cj5*r00);
IkReal x7241=(cj5*r10);
IkReal x7242=(r21*sj5);
IkReal x7243=(cj5*r20);
IkReal x7244=(r01*sj5);
IkReal x7245=((1.0)*x7238);
IkReal x7246=((1.0)*x7237);
evalcond[0]=((((-1.0)*r22*x7245))+((x7237*x7242))+(((-1.0)*x7243*x7246)));
evalcond[1]=(((x7238*x7243))+(((-1.0)*r22*x7246))+(((-1.0)*x7242*x7245)));
evalcond[2]=((((-1.0)*r12*x7245))+cj0+(((-1.0)*x7241*x7246))+((x7237*x7239)));
evalcond[3]=(cj0+(((-1.0)*x7244*x7245))+((x7238*x7240))+(((-1.0)*r02*x7246)));
evalcond[4]=(sj0+(((-1.0)*r12*x7246))+((x7238*x7241))+(((-1.0)*x7239*x7245)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7245))+(((-1.0)*x7240*x7246))+((x7237*x7244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7247=((1.0)*cj5);
CheckValue<IkReal> x7248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7247)))),-1);
if(!x7248.valid){
continue;
}
CheckValue<IkReal> x7249 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7249.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7248.value)))+(x7249.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7250=IKsin(j4);
IkReal x7251=IKcos(j4);
IkReal x7252=(r11*sj5);
IkReal x7253=(cj5*r00);
IkReal x7254=(cj5*r10);
IkReal x7255=(r21*sj5);
IkReal x7256=(cj5*r20);
IkReal x7257=(r01*sj5);
IkReal x7258=((1.0)*x7251);
IkReal x7259=((1.0)*x7250);
evalcond[0]=(((x7250*x7255))+(((-1.0)*r22*x7258))+(((-1.0)*x7256*x7259)));
evalcond[1]=(((x7251*x7256))+(((-1.0)*r22*x7259))+(((-1.0)*x7255*x7258)));
evalcond[2]=(((x7250*x7252))+cj0+(((-1.0)*r12*x7258))+(((-1.0)*x7254*x7259)));
evalcond[3]=(cj0+((x7251*x7253))+(((-1.0)*r02*x7259))+(((-1.0)*x7257*x7258)));
evalcond[4]=((((-1.0)*x7252*x7258))+sj0+((x7251*x7254))+(((-1.0)*r12*x7259)));
evalcond[5]=((((-1.0)*sj0))+((x7250*x7257))+(((-1.0)*r02*x7258))+(((-1.0)*x7253*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.39529612731731)*py))+(((-5.76187008585712)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.39529612731731)*px))+(((5.76187008585712)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))))+IKsqr(((((-1.39529612731731)*px))+(((5.76187008585712)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.39529612731731)*py))+(((-5.76187008585712)*px))), ((((-1.39529612731731)*px))+(((5.76187008585712)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7260=IKcos(j0);
IkReal x7261=IKsin(j0);
evalcond[0]=((((-0.163941)*x7261))+(((-1.0)*px))+(((-0.0397)*x7260)));
evalcond[1]=((((0.163941)*x7260))+(((-1.0)*py))+(((-0.0397)*x7261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7262=((1.0)*cj5);
IkReal x7263=((((-1.0)*r01*x7262))+(((-1.0)*r00*sj5)));
j4eval[0]=x7263;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7262))))));
j4eval[2]=IKsign(x7263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7264=((1.0)*cj5);
IkReal x7265=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7264)));
j4eval[0]=x7265;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7264))))));
j4eval[2]=IKsign(x7265);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7266=cj5*cj5;
IkReal x7267=((1.0)*sj5);
IkReal x7268=(cj5*r20);
IkReal x7269=(r11*r21);
IkReal x7270=((((-1.0)*cj5*r10*r21*x7267))+(((-1.0)*r11*x7267*x7268))+x7269+((r12*r22))+(((-1.0)*x7266*x7269))+((r10*r20*x7266)));
j4eval[0]=x7270;
j4eval[1]=IKsign(x7270);
j4eval[2]=((IKabs((((cj0*x7268))+(((-1.0)*cj0*r21*x7267)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7271=cj5*cj5;
IkReal x7272=((1.0)*sj5);
IkReal x7273=(cj5*r20);
IkReal x7274=(r11*r21);
CheckValue<IkReal> x7275 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7272))+((cj0*x7273)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7275.valid){
continue;
}
CheckValue<IkReal> x7276=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7271*x7274))+x7274+(((-1.0)*r11*x7272*x7273))+((r12*r22))+((r10*r20*x7271))+(((-1.0)*cj5*r10*r21*x7272)))),-1);
if(!x7276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7275.value)+(((1.5707963267949)*(x7276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7277=IKsin(j4);
IkReal x7278=IKcos(j4);
IkReal x7279=((1.0)*sj0);
IkReal x7280=(cj5*r00);
IkReal x7281=(r11*sj5);
IkReal x7282=(cj5*r10);
IkReal x7283=(r21*sj5);
IkReal x7284=(cj5*r20);
IkReal x7285=(r01*sj5);
IkReal x7286=((1.0)*x7278);
IkReal x7287=((1.0)*x7277);
evalcond[0]=((((-1.0)*x7284*x7287))+((x7277*x7283))+(((-1.0)*r22*x7286)));
evalcond[1]=(((x7278*x7284))+(((-1.0)*x7283*x7286))+(((-1.0)*r22*x7287)));
evalcond[2]=((((-1.0)*x7282*x7287))+((x7277*x7281))+cj0+(((-1.0)*r12*x7286)));
evalcond[3]=(((x7277*x7285))+(((-1.0)*x7280*x7287))+(((-1.0)*r02*x7286))+(((-1.0)*x7279)));
evalcond[4]=(((x7278*x7280))+(((-1.0)*x7285*x7286))+(((-1.0)*r02*x7287))+(((-1.0)*cj0)));
evalcond[5]=(((x7278*x7282))+(((-1.0)*r12*x7287))+(((-1.0)*x7281*x7286))+(((-1.0)*x7279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7288=((1.0)*cj5);
CheckValue<IkReal> x7289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7288)))),-1);
if(!x7289.valid){
continue;
}
CheckValue<IkReal> x7290 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7289.value)))+(x7290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7291=IKsin(j4);
IkReal x7292=IKcos(j4);
IkReal x7293=((1.0)*sj0);
IkReal x7294=(cj5*r00);
IkReal x7295=(r11*sj5);
IkReal x7296=(cj5*r10);
IkReal x7297=(r21*sj5);
IkReal x7298=(cj5*r20);
IkReal x7299=(r01*sj5);
IkReal x7300=((1.0)*x7292);
IkReal x7301=((1.0)*x7291);
evalcond[0]=(((x7291*x7297))+(((-1.0)*r22*x7300))+(((-1.0)*x7298*x7301)));
evalcond[1]=((((-1.0)*x7297*x7300))+((x7292*x7298))+(((-1.0)*r22*x7301)));
evalcond[2]=(cj0+(((-1.0)*x7296*x7301))+(((-1.0)*r12*x7300))+((x7291*x7295)));
evalcond[3]=((((-1.0)*r02*x7300))+(((-1.0)*x7293))+((x7291*x7299))+(((-1.0)*x7294*x7301)));
evalcond[4]=((((-1.0)*r02*x7301))+((x7292*x7294))+(((-1.0)*x7299*x7300))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7293))+(((-1.0)*x7295*x7300))+(((-1.0)*r12*x7301))+((x7292*x7296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7302=((1.0)*cj5);
CheckValue<IkReal> x7303 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7303.valid){
continue;
}
CheckValue<IkReal> x7304=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7302)))),-1);
if(!x7304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7303.value)+(((1.5707963267949)*(x7304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7305=IKsin(j4);
IkReal x7306=IKcos(j4);
IkReal x7307=((1.0)*sj0);
IkReal x7308=(cj5*r00);
IkReal x7309=(r11*sj5);
IkReal x7310=(cj5*r10);
IkReal x7311=(r21*sj5);
IkReal x7312=(cj5*r20);
IkReal x7313=(r01*sj5);
IkReal x7314=((1.0)*x7306);
IkReal x7315=((1.0)*x7305);
evalcond[0]=((((-1.0)*x7312*x7315))+((x7305*x7311))+(((-1.0)*r22*x7314)));
evalcond[1]=((((-1.0)*x7311*x7314))+((x7306*x7312))+(((-1.0)*r22*x7315)));
evalcond[2]=(cj0+(((-1.0)*r12*x7314))+((x7305*x7309))+(((-1.0)*x7310*x7315)));
evalcond[3]=((((-1.0)*x7308*x7315))+((x7305*x7313))+(((-1.0)*x7307))+(((-1.0)*r02*x7314)));
evalcond[4]=(((x7306*x7308))+(((-1.0)*x7313*x7314))+(((-1.0)*cj0))+(((-1.0)*r02*x7315)));
evalcond[5]=((((-1.0)*x7309*x7314))+(((-1.0)*r12*x7315))+((x7306*x7310))+(((-1.0)*x7307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7316=IKsin(j0);
IkReal x7317=IKcos(j0);
IkReal x7318=(cj5*r01);
IkReal x7319=(cj5*r11);
IkReal x7320=((0.1157)*sj5);
IkReal x7321=((1.0)*sj5);
evalcond[0]=(x7317+(((-1.0)*x7318))+(((-1.0)*r00*x7321)));
evalcond[1]=(x7316+(((-1.0)*x7319))+(((-1.0)*r10*x7321)));
evalcond[2]=((((-1.0)*r00*x7320))+(((-1.0)*px))+(((-0.1157)*x7318))+(((-0.163941)*x7316)));
evalcond[3]=((((-1.0)*py))+(((-0.1157)*x7319))+(((-1.0)*r10*x7320))+(((0.163941)*x7317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7322=((1.0)*sj5);
IkReal x7323=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7322)));
j4eval[0]=x7323;
j4eval[1]=IKsign(x7323);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7322))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7324=((1.0)*cj5);
IkReal x7325=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7324)));
j4eval[0]=x7325;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7324)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7326=r21*r21;
IkReal x7327=cj5*cj5;
IkReal x7328=(r21*sj5);
IkReal x7329=(cj5*r20);
IkReal x7330=((((-1.0)*x7326))+((x7326*x7327))+(((-1.0)*(r22*r22)))+(((-1.0)*x7327*(r20*r20)))+(((2.0)*x7328*x7329)));
j4eval[0]=x7330;
j4eval[1]=((IKabs((x7328+(((-1.0)*x7329)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7331=r21*r21;
IkReal x7332=cj5*cj5;
IkReal x7333=(r21*sj5);
IkReal x7334=(cj5*r20);
CheckValue<IkReal> x7335=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7331))+(((-1.0)*(r22*r22)))+((x7331*x7332))+(((2.0)*x7333*x7334))+(((-1.0)*x7332*(r20*r20))))),-1);
if(!x7335.valid){
continue;
}
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7334))+x7333)),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7335.value)))+(x7336.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7337=IKsin(j4);
IkReal x7338=IKcos(j4);
IkReal x7339=(r11*sj5);
IkReal x7340=(r21*sj5);
IkReal x7341=(cj5*r00);
IkReal x7342=(cj5*r20);
IkReal x7343=(r01*sj5);
IkReal x7344=(cj5*r10);
IkReal x7345=((1.0)*x7338);
IkReal x7346=((1.0)*x7337);
evalcond[0]=((((-1.0)*r22*x7345))+((x7337*x7340))+(((-1.0)*x7342*x7346)));
evalcond[1]=((((-1.0)*x7343*x7345))+(((-1.0)*r02*x7346))+((x7338*x7341)));
evalcond[2]=((((-1.0)*r12*x7346))+((x7338*x7344))+(((-1.0)*x7339*x7345)));
evalcond[3]=(((x7337*x7339))+cj0+(((-1.0)*r12*x7345))+(((-1.0)*x7344*x7346)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7346))+(((-1.0)*x7340*x7345))+((x7338*x7342)));
evalcond[5]=((((-1.0)*sj0))+((x7337*x7343))+(((-1.0)*x7341*x7346))+(((-1.0)*r02*x7345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7347=((1.0)*cj5);
CheckValue<IkReal> x7348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7347))+(((-1.0)*r00*sj5)))),-1);
if(!x7348.valid){
continue;
}
CheckValue<IkReal> x7349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7348.value)))+(x7349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7350=IKsin(j4);
IkReal x7351=IKcos(j4);
IkReal x7352=(r11*sj5);
IkReal x7353=(r21*sj5);
IkReal x7354=(cj5*r00);
IkReal x7355=(cj5*r20);
IkReal x7356=(r01*sj5);
IkReal x7357=(cj5*r10);
IkReal x7358=((1.0)*x7351);
IkReal x7359=((1.0)*x7350);
evalcond[0]=((((-1.0)*r22*x7358))+((x7350*x7353))+(((-1.0)*x7355*x7359)));
evalcond[1]=((((-1.0)*x7356*x7358))+(((-1.0)*r02*x7359))+((x7351*x7354)));
evalcond[2]=((((-1.0)*r12*x7359))+(((-1.0)*x7352*x7358))+((x7351*x7357)));
evalcond[3]=(cj0+((x7350*x7352))+(((-1.0)*r12*x7358))+(((-1.0)*x7357*x7359)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7359))+(((-1.0)*x7353*x7358))+((x7351*x7355)));
evalcond[5]=((((-1.0)*sj0))+((x7350*x7356))+(((-1.0)*r02*x7358))+(((-1.0)*x7354*x7359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7360=((1.0)*sj5);
CheckValue<IkReal> x7361 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7360))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7361.valid){
continue;
}
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7360)))),-1);
if(!x7362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7361.value)+(((1.5707963267949)*(x7362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7363=IKsin(j4);
IkReal x7364=IKcos(j4);
IkReal x7365=(r11*sj5);
IkReal x7366=(r21*sj5);
IkReal x7367=(cj5*r00);
IkReal x7368=(cj5*r20);
IkReal x7369=(r01*sj5);
IkReal x7370=(cj5*r10);
IkReal x7371=((1.0)*x7364);
IkReal x7372=((1.0)*x7363);
evalcond[0]=(((x7363*x7366))+(((-1.0)*r22*x7371))+(((-1.0)*x7368*x7372)));
evalcond[1]=(((x7364*x7367))+(((-1.0)*r02*x7372))+(((-1.0)*x7369*x7371)));
evalcond[2]=(((x7364*x7370))+(((-1.0)*r12*x7372))+(((-1.0)*x7365*x7371)));
evalcond[3]=(cj0+((x7363*x7365))+(((-1.0)*r12*x7371))+(((-1.0)*x7370*x7372)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7372))+((x7364*x7368))+(((-1.0)*x7366*x7371)));
evalcond[5]=((((-1.0)*sj0))+((x7363*x7369))+(((-1.0)*r02*x7371))+(((-1.0)*x7367*x7372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7373=IKsin(j0);
IkReal x7374=IKcos(j0);
evalcond[0]=((((-0.163941)*x7373))+(((-1.0)*px))+(((0.5723)*x7374)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x7374))+(((0.5723)*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7375=((1.0)*cj5);
IkReal x7376=((((-1.0)*r01*x7375))+(((-1.0)*r00*sj5)));
j4eval[0]=x7376;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7375))))));
j4eval[2]=IKsign(x7376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7377=((1.0)*cj5);
IkReal x7378=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7377)));
j4eval[0]=x7378;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7377)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7379=cj5*cj5;
IkReal x7380=((1.0)*sj5);
IkReal x7381=(cj5*r20);
IkReal x7382=(r11*r21);
IkReal x7383=(x7382+((r10*r20*x7379))+(((-1.0)*r11*x7380*x7381))+(((-1.0)*x7379*x7382))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7380)));
j4eval[0]=x7383;
j4eval[1]=IKsign(x7383);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7380))+((cj0*x7381)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7384=cj5*cj5;
IkReal x7385=((1.0)*sj5);
IkReal x7386=(cj5*r20);
IkReal x7387=(r11*r21);
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(IKsign((x7387+(((-1.0)*x7384*x7387))+((r10*r20*x7384))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7385))+(((-1.0)*r11*x7385*x7386)))),-1);
if(!x7388.valid){
continue;
}
CheckValue<IkReal> x7389 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7385))+((cj0*x7386)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7388.value)))+(x7389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7390=IKsin(j4);
IkReal x7391=IKcos(j4);
IkReal x7392=((1.0)*sj0);
IkReal x7393=(cj5*r00);
IkReal x7394=(r11*sj5);
IkReal x7395=(cj5*r10);
IkReal x7396=(r21*sj5);
IkReal x7397=(cj5*r20);
IkReal x7398=(r01*sj5);
IkReal x7399=((1.0)*x7391);
IkReal x7400=((1.0)*x7390);
evalcond[0]=((((-1.0)*r22*x7399))+(((-1.0)*x7397*x7400))+((x7390*x7396)));
evalcond[1]=((((-1.0)*x7396*x7399))+((x7391*x7397))+(((-1.0)*r22*x7400)));
evalcond[2]=((((-1.0)*r12*x7399))+cj0+(((-1.0)*x7395*x7400))+((x7390*x7394)));
evalcond[3]=((((-1.0)*x7393*x7400))+(((-1.0)*r02*x7399))+((x7390*x7398))+(((-1.0)*x7392)));
evalcond[4]=((((-1.0)*x7398*x7399))+((x7391*x7393))+(((-1.0)*r02*x7400))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7400))+(((-1.0)*x7394*x7399))+((x7391*x7395))+(((-1.0)*x7392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7401=((1.0)*cj5);
CheckValue<IkReal> x7402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7401))+(((-1.0)*r10*sj5)))),-1);
if(!x7402.valid){
continue;
}
CheckValue<IkReal> x7403 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7402.value)))+(x7403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7404=IKsin(j4);
IkReal x7405=IKcos(j4);
IkReal x7406=((1.0)*sj0);
IkReal x7407=(cj5*r00);
IkReal x7408=(r11*sj5);
IkReal x7409=(cj5*r10);
IkReal x7410=(r21*sj5);
IkReal x7411=(cj5*r20);
IkReal x7412=(r01*sj5);
IkReal x7413=((1.0)*x7405);
IkReal x7414=((1.0)*x7404);
evalcond[0]=(((x7404*x7410))+(((-1.0)*x7411*x7414))+(((-1.0)*r22*x7413)));
evalcond[1]=(((x7405*x7411))+(((-1.0)*r22*x7414))+(((-1.0)*x7410*x7413)));
evalcond[2]=((((-1.0)*r12*x7413))+cj0+(((-1.0)*x7409*x7414))+((x7404*x7408)));
evalcond[3]=((((-1.0)*x7406))+((x7404*x7412))+(((-1.0)*x7407*x7414))+(((-1.0)*r02*x7413)));
evalcond[4]=(((x7405*x7407))+(((-1.0)*x7412*x7413))+(((-1.0)*cj0))+(((-1.0)*r02*x7414)));
evalcond[5]=((((-1.0)*r12*x7414))+(((-1.0)*x7406))+(((-1.0)*x7408*x7413))+((x7405*x7409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7415=((1.0)*cj5);
CheckValue<IkReal> x7416 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7416.valid){
continue;
}
CheckValue<IkReal> x7417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7415))+(((-1.0)*r00*sj5)))),-1);
if(!x7417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7416.value)+(((1.5707963267949)*(x7417.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7418=IKsin(j4);
IkReal x7419=IKcos(j4);
IkReal x7420=((1.0)*sj0);
IkReal x7421=(cj5*r00);
IkReal x7422=(r11*sj5);
IkReal x7423=(cj5*r10);
IkReal x7424=(r21*sj5);
IkReal x7425=(cj5*r20);
IkReal x7426=(r01*sj5);
IkReal x7427=((1.0)*x7419);
IkReal x7428=((1.0)*x7418);
evalcond[0]=((((-1.0)*r22*x7427))+((x7418*x7424))+(((-1.0)*x7425*x7428)));
evalcond[1]=((((-1.0)*r22*x7428))+((x7419*x7425))+(((-1.0)*x7424*x7427)));
evalcond[2]=(cj0+((x7418*x7422))+(((-1.0)*r12*x7427))+(((-1.0)*x7423*x7428)));
evalcond[3]=((((-1.0)*x7421*x7428))+((x7418*x7426))+(((-1.0)*r02*x7427))+(((-1.0)*x7420)));
evalcond[4]=(((x7419*x7421))+(((-1.0)*r02*x7428))+(((-1.0)*x7426*x7427))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7422*x7427))+((x7419*x7423))+(((-1.0)*r12*x7428))+(((-1.0)*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7429=((1.0)*sj5);
IkReal x7430=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7430))+(((-1.0)*r10*x7429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7430))+(((-1.0)*r00*x7429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7430))+(((-1.0)*r10*x7429))))+IKsqr(((((-1.0)*r01*x7430))+(((-1.0)*r00*x7429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7430))+(((-1.0)*r10*x7429))), ((((-1.0)*r01*x7430))+(((-1.0)*r00*x7429))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7431=IKsin(j0);
IkReal x7432=IKcos(j0);
IkReal x7433=(cj5*r01);
IkReal x7434=(cj5*r11);
IkReal x7435=((0.1157)*sj5);
IkReal x7436=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7432))+(((-1.0)*x7433))+(((-1.0)*r00*x7436)));
evalcond[1]=((((-1.0)*x7434))+(((-1.0)*x7431))+(((-1.0)*r10*x7436)));
evalcond[2]=((((-1.0)*r00*x7435))+(((-0.163941)*x7431))+(((-1.0)*px))+(((-0.1157)*x7433)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x7435))+(((-0.1157)*x7434))+(((0.163941)*x7432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7437=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7437;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7438=((1.0)*cj5);
IkReal x7439=((((-1.0)*r01*x7438))+(((-1.0)*r00*sj5)));
j4eval[0]=x7439;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7438)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7440=cj5*cj5;
IkReal x7441=r21*r21;
IkReal x7442=(r21*sj5);
IkReal x7443=(cj5*r20);
IkReal x7444=((r22*r22)+(((-1.0)*x7440*x7441))+(((-2.0)*x7442*x7443))+((x7440*(r20*r20)))+x7441);
j4eval[0]=x7444;
j4eval[1]=IKsign(x7444);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7443))+x7442))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7445=cj5*cj5;
IkReal x7446=r21*r21;
IkReal x7447=(r21*sj5);
IkReal x7448=(cj5*r20);
CheckValue<IkReal> x7449 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7448))+x7447)),IKFAST_ATAN2_MAGTHRESH);
if(!x7449.valid){
continue;
}
CheckValue<IkReal> x7450=IKPowWithIntegerCheck(IKsign((((x7445*(r20*r20)))+(r22*r22)+(((-1.0)*x7445*x7446))+(((-2.0)*x7447*x7448))+x7446)),-1);
if(!x7450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7449.value)+(((1.5707963267949)*(x7450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7451=IKsin(j4);
IkReal x7452=IKcos(j4);
IkReal x7453=(r11*sj5);
IkReal x7454=(r21*sj5);
IkReal x7455=(cj5*r00);
IkReal x7456=(cj5*r20);
IkReal x7457=(r01*sj5);
IkReal x7458=(cj5*r10);
IkReal x7459=((1.0)*x7452);
IkReal x7460=((1.0)*x7451);
evalcond[0]=((((-1.0)*x7456*x7460))+(((-1.0)*r22*x7459))+((x7451*x7454)));
evalcond[1]=((((-1.0)*r02*x7460))+(((-1.0)*x7457*x7459))+((x7452*x7455)));
evalcond[2]=((((-1.0)*x7453*x7459))+(((-1.0)*r12*x7460))+((x7452*x7458)));
evalcond[3]=(cj0+(((-1.0)*x7458*x7460))+(((-1.0)*r12*x7459))+((x7451*x7453)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7460))+(((-1.0)*x7454*x7459))+((x7452*x7456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7455*x7460))+(((-1.0)*r02*x7459))+((x7451*x7457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7461=((1.0)*cj5);
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7461)))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7464=IKsin(j4);
IkReal x7465=IKcos(j4);
IkReal x7466=(r11*sj5);
IkReal x7467=(r21*sj5);
IkReal x7468=(cj5*r00);
IkReal x7469=(cj5*r20);
IkReal x7470=(r01*sj5);
IkReal x7471=(cj5*r10);
IkReal x7472=((1.0)*x7465);
IkReal x7473=((1.0)*x7464);
evalcond[0]=(((x7464*x7467))+(((-1.0)*r22*x7472))+(((-1.0)*x7469*x7473)));
evalcond[1]=((((-1.0)*r02*x7473))+((x7465*x7468))+(((-1.0)*x7470*x7472)));
evalcond[2]=((((-1.0)*x7466*x7472))+((x7465*x7471))+(((-1.0)*r12*x7473)));
evalcond[3]=(cj0+((x7464*x7466))+(((-1.0)*x7471*x7473))+(((-1.0)*r12*x7472)));
evalcond[4]=((1.0)+(((-1.0)*x7467*x7472))+(((-1.0)*r22*x7473))+((x7465*x7469)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7472))+((x7464*x7470))+(((-1.0)*x7468*x7473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7474 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7474.valid){
continue;
}
CheckValue<IkReal> x7475=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7474.value)+(((1.5707963267949)*(x7475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7476=IKsin(j4);
IkReal x7477=IKcos(j4);
IkReal x7478=(r11*sj5);
IkReal x7479=(r21*sj5);
IkReal x7480=(cj5*r00);
IkReal x7481=(cj5*r20);
IkReal x7482=(r01*sj5);
IkReal x7483=(cj5*r10);
IkReal x7484=((1.0)*x7477);
IkReal x7485=((1.0)*x7476);
evalcond[0]=((((-1.0)*x7481*x7485))+(((-1.0)*r22*x7484))+((x7476*x7479)));
evalcond[1]=((((-1.0)*x7482*x7484))+((x7477*x7480))+(((-1.0)*r02*x7485)));
evalcond[2]=((((-1.0)*x7478*x7484))+((x7477*x7483))+(((-1.0)*r12*x7485)));
evalcond[3]=(cj0+((x7476*x7478))+(((-1.0)*r12*x7484))+(((-1.0)*x7483*x7485)));
evalcond[4]=((1.0)+(((-1.0)*x7479*x7484))+((x7477*x7481))+(((-1.0)*r22*x7485)));
evalcond[5]=((((-1.0)*x7480*x7485))+(((-1.0)*sj0))+((x7476*x7482))+(((-1.0)*r02*x7484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.61482402709306)*py))+(((-0.462582327146012)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.61482402709306)*px))+(((0.462582327146012)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))))+IKsqr(((((-1.61482402709306)*px))+(((0.462582327146012)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.61482402709306)*py))+(((-0.462582327146012)*px))), ((((-1.61482402709306)*px))+(((0.462582327146012)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7486=IKcos(j0);
IkReal x7487=IKsin(j0);
evalcond[0]=((((-0.163941)*x7487))+(((-1.0)*px))+(((-0.5723)*x7486)));
evalcond[1]=((((-1.0)*py))+(((0.163941)*x7486))+(((-0.5723)*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7488=((1.0)*cj5);
IkReal x7489=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7488)));
j4eval[0]=x7489;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7488))))));
j4eval[2]=IKsign(x7489);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7490=cj5*cj5;
IkReal x7491=((1.0)*r21);
IkReal x7492=(cj5*sj5);
IkReal x7493=((1.0)*r20);
IkReal x7494=(((r01*r21))+(((-1.0)*r00*x7491*x7492))+(((-1.0)*r01*x7490*x7491))+(((-1.0)*r01*x7492*x7493))+((r00*r20*x7490))+((r02*r22)));
j4eval[0]=x7494;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7493)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7495=cj5*cj5;
IkReal x7496=(r21*sj5);
IkReal x7497=(r11*r21);
IkReal x7498=((1.0)*cj5*r20);
IkReal x7499=(((r10*r20*x7495))+(((-1.0)*cj5*r10*x7496))+(((-1.0)*x7495*x7497))+((r12*r22))+x7497+(((-1.0)*r11*sj5*x7498)));
j4eval[0]=x7499;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7498))+((sj0*x7496)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7499);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7500=cj5*cj5;
IkReal x7501=(r21*sj5);
IkReal x7502=(r11*r21);
IkReal x7503=((1.0)*cj5*r20);
CheckValue<IkReal> x7504=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7500*x7502))+((r12*r22))+(((-1.0)*cj5*r10*x7501))+x7502+(((-1.0)*r11*sj5*x7503))+((r10*r20*x7500)))),-1);
if(!x7504.valid){
continue;
}
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7501))+(((-1.0)*sj0*x7503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7504.value)))+(x7505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7506=IKsin(j4);
IkReal x7507=IKcos(j4);
IkReal x7508=(r11*sj5);
IkReal x7509=(cj5*r00);
IkReal x7510=(cj5*r10);
IkReal x7511=(r21*sj5);
IkReal x7512=(cj5*r20);
IkReal x7513=(r01*sj5);
IkReal x7514=((1.0)*x7507);
IkReal x7515=((1.0)*x7506);
evalcond[0]=(((x7506*x7511))+(((-1.0)*x7512*x7515))+(((-1.0)*r22*x7514)));
evalcond[1]=((((-1.0)*x7511*x7514))+((x7507*x7512))+(((-1.0)*r22*x7515)));
evalcond[2]=(cj0+(((-1.0)*x7510*x7515))+((x7506*x7508))+(((-1.0)*r12*x7514)));
evalcond[3]=(cj0+(((-1.0)*r02*x7515))+(((-1.0)*x7513*x7514))+((x7507*x7509)));
evalcond[4]=(sj0+(((-1.0)*x7508*x7514))+((x7507*x7510))+(((-1.0)*r12*x7515)));
evalcond[5]=((((-1.0)*sj0))+((x7506*x7513))+(((-1.0)*x7509*x7515))+(((-1.0)*r02*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7516=cj5*cj5;
IkReal x7517=((1.0)*r21);
IkReal x7518=(cj5*sj5);
IkReal x7519=((1.0)*r20);
CheckValue<IkReal> x7520 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7520.valid){
continue;
}
CheckValue<IkReal> x7521=IKPowWithIntegerCheck(IKsign((((r00*r20*x7516))+((r01*r21))+(((-1.0)*r00*x7517*x7518))+((r02*r22))+(((-1.0)*r01*x7516*x7517))+(((-1.0)*r01*x7518*x7519)))),-1);
if(!x7521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7520.value)+(((1.5707963267949)*(x7521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7522=IKsin(j4);
IkReal x7523=IKcos(j4);
IkReal x7524=(r11*sj5);
IkReal x7525=(cj5*r00);
IkReal x7526=(cj5*r10);
IkReal x7527=(r21*sj5);
IkReal x7528=(cj5*r20);
IkReal x7529=(r01*sj5);
IkReal x7530=((1.0)*x7523);
IkReal x7531=((1.0)*x7522);
evalcond[0]=((((-1.0)*r22*x7530))+(((-1.0)*x7528*x7531))+((x7522*x7527)));
evalcond[1]=((((-1.0)*x7527*x7530))+(((-1.0)*r22*x7531))+((x7523*x7528)));
evalcond[2]=((((-1.0)*x7526*x7531))+cj0+(((-1.0)*r12*x7530))+((x7522*x7524)));
evalcond[3]=(cj0+(((-1.0)*x7529*x7530))+(((-1.0)*r02*x7531))+((x7523*x7525)));
evalcond[4]=((((-1.0)*x7524*x7530))+sj0+(((-1.0)*r12*x7531))+((x7523*x7526)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7530))+((x7522*x7529))+(((-1.0)*x7525*x7531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7532=((1.0)*cj5);
CheckValue<IkReal> x7533=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7532)))),-1);
if(!x7533.valid){
continue;
}
CheckValue<IkReal> x7534 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7533.value)))+(x7534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7535=IKsin(j4);
IkReal x7536=IKcos(j4);
IkReal x7537=(r11*sj5);
IkReal x7538=(cj5*r00);
IkReal x7539=(cj5*r10);
IkReal x7540=(r21*sj5);
IkReal x7541=(cj5*r20);
IkReal x7542=(r01*sj5);
IkReal x7543=((1.0)*x7536);
IkReal x7544=((1.0)*x7535);
evalcond[0]=(((x7535*x7540))+(((-1.0)*r22*x7543))+(((-1.0)*x7541*x7544)));
evalcond[1]=((((-1.0)*r22*x7544))+(((-1.0)*x7540*x7543))+((x7536*x7541)));
evalcond[2]=(cj0+(((-1.0)*x7539*x7544))+((x7535*x7537))+(((-1.0)*r12*x7543)));
evalcond[3]=((((-1.0)*x7542*x7543))+cj0+((x7536*x7538))+(((-1.0)*r02*x7544)));
evalcond[4]=(sj0+(((-1.0)*x7537*x7543))+((x7536*x7539))+(((-1.0)*r12*x7544)));
evalcond[5]=((((-1.0)*sj0))+((x7535*x7542))+(((-1.0)*x7538*x7544))+(((-1.0)*r02*x7543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7545=cj1*cj1;
IkReal x7546=(cj2*sj1);
IkReal x7547=(r00*sj5);
IkReal x7548=(cj5*r01);
IkReal x7549=((1000000.0)*py);
IkReal x7550=(cj1*sj2);
IkReal x7551=(cj1*sj1);
IkReal x7552=(sj2*x7545);
IkReal x7553=((115700.0)*r10*sj5);
IkReal x7554=((115700.0)*cj5*r11);
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(((((572300.0)*x7551))+(((572300.0)*cj2*sj2))+(((-1144600.0)*cj2*x7552))+(((-612000.0)*cj1*x7546))+(((-612000.0)*x7552))+(((-1144600.0)*cj1*cj2*x7546))),-1);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556=IKPowWithIntegerCheck(((((-1.0)*x7550))+(((-1.0)*x7546))),-1);
if(!x7556.valid){
continue;
}
if( IKabs(((x7555.value)*(((((-1.0)*x7550*x7553))+(((-1.0)*x7550*x7554))+(((-1.0)*x7546*x7553))+(((-1.0)*x7546*x7554))+(((-1.0)*x7546*x7549))+(((-1.0)*x7549*x7550))+(((-163941.0)*x7548))+(((-163941.0)*x7547)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7556.value)*((x7548+x7547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7555.value)*(((((-1.0)*x7550*x7553))+(((-1.0)*x7550*x7554))+(((-1.0)*x7546*x7553))+(((-1.0)*x7546*x7554))+(((-1.0)*x7546*x7549))+(((-1.0)*x7549*x7550))+(((-163941.0)*x7548))+(((-163941.0)*x7547))))))+IKsqr(((x7556.value)*((x7548+x7547))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7555.value)*(((((-1.0)*x7550*x7553))+(((-1.0)*x7550*x7554))+(((-1.0)*x7546*x7553))+(((-1.0)*x7546*x7554))+(((-1.0)*x7546*x7549))+(((-1.0)*x7549*x7550))+(((-163941.0)*x7548))+(((-163941.0)*x7547))))), ((x7556.value)*((x7548+x7547))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7557=IKcos(j0);
IkReal x7558=IKsin(j0);
IkReal x7559=(cj5*r01);
IkReal x7560=((1.0)*sj5);
IkReal x7561=(cj5*r11);
IkReal x7562=((0.1157)*sj5);
IkReal x7563=((1.0)*sj1);
IkReal x7564=((1.0)*cj1*sj2);
IkReal x7565=((0.5723)*sj1*sj2);
IkReal x7566=(cj2*x7557);
IkReal x7567=(cj1*x7558);
evalcond[0]=((((-1.0)*x7563*x7566))+(((-1.0)*x7557*x7564))+(((-1.0)*x7559))+(((-1.0)*r00*x7560)));
evalcond[1]=((((-1.0)*r10*x7560))+(((-1.0)*x7561))+(((-1.0)*cj2*x7558*x7563))+(((-1.0)*x7558*x7564)));
evalcond[2]=((((-0.1157)*x7559))+(((-1.0)*x7557*x7565))+(((0.612)*cj1*x7557))+(((-1.0)*px))+(((-1.0)*r00*x7562))+(((0.5723)*cj1*x7566))+(((-0.163941)*x7558)));
evalcond[3]=((((-0.1157)*x7561))+(((0.163941)*x7557))+(((0.5723)*cj2*x7567))+(((0.612)*x7567))+(((-1.0)*r10*x7562))+(((-1.0)*py))+(((-1.0)*x7558*x7565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7568=((1.0)*cj5);
IkReal x7569=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7568)));
j4eval[0]=x7569;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x7568))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x7569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7570=((1.0)*cj5);
IkReal x7571=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7570)));
j4eval[0]=x7571;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7570))))));
j4eval[2]=IKsign(x7571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7572=((1.0)*sj0);
IkReal x7573=((1.0)*cj0);
IkReal x7574=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7574;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7573))+(((-1.0)*r11*sj5*x7572)))))+(IKabs(((((-1.0)*r02*x7573))+(((-1.0)*r12*x7572))))));
j4eval[2]=IKsign(x7574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7575=((-1.0)*r20);
IkReal x7577 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7577)==0){
continue;
}
IkReal x7576=pow(x7577,-0.5);
CheckValue<IkReal> x7578 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7575),IKFAST_ATAN2_MAGTHRESH);
if(!x7578.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7578.value));
IkReal gconst133=(r21*x7576);
IkReal gconst134=(x7575*x7576);
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7579.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7580=((-1.0)*r20);
IkReal x7581=x7576;
CheckValue<IkReal> x7583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7580),IKFAST_ATAN2_MAGTHRESH);
if(!x7583.valid){
continue;
}
IkReal x7582=((-1.0)*(x7583.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7582;
IkReal gconst132=x7582;
IkReal gconst133=(r21*x7581);
IkReal gconst134=(x7580*x7581);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7584=((-1.0)*r20);
IkReal x7585=x7576;
CheckValue<IkReal> x7587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7584),IKFAST_ATAN2_MAGTHRESH);
if(!x7587.valid){
continue;
}
IkReal x7586=((-1.0)*(x7587.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7586;
IkReal gconst132=x7586;
IkReal gconst133=(r21*x7585);
IkReal gconst134=(x7584*x7585);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7588=((-1.0)*r20);
IkReal x7589=x7576;
CheckValue<IkReal> x7591 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7588),IKFAST_ATAN2_MAGTHRESH);
if(!x7591.valid){
continue;
}
IkReal x7590=((-1.0)*(x7591.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7590;
IkReal gconst132=x7590;
IkReal gconst133=(r21*x7589);
IkReal gconst134=(x7588*x7589);
IkReal x7592=r22*r22;
CheckValue<IkReal> x7595=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7592))),-1);
if(!x7595.valid){
continue;
}
IkReal x7593=x7595.value;
IkReal x7594=(((x7593*(r21*r21*r21*r21)))+((x7593*(r20*r20*r20*r20)))+x7592+(((2.0)*x7593*(r20*r20)*(r21*r21))));
j4eval[0]=x7594;
j4eval[1]=IKsign(x7594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7596=(gconst133*r21);
IkReal x7597=(cj1*sj2);
IkReal x7598=(gconst134*r20);
IkReal x7599=(cj2*sj1);
CheckValue<IkReal> x7600=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7598*x7598)+(((-2.0)*x7596*x7598))+(x7596*x7596))),-1);
if(!x7600.valid){
continue;
}
CheckValue<IkReal> x7601 = IKatan2WithCheck(IkReal((((r22*x7599))+((r22*x7597)))),IkReal(((((-1.0)*x7598*x7599))+(((-1.0)*x7597*x7598))+((x7596*x7599))+((x7596*x7597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7600.value)))+(x7601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7602=IKsin(j4);
IkReal x7603=IKcos(j4);
IkReal x7604=(sj1*sj2);
IkReal x7605=(gconst133*r11);
IkReal x7606=(gconst133*r21);
IkReal x7607=(gconst133*r01);
IkReal x7608=((1.0)*x7603);
IkReal x7609=(gconst134*x7603);
IkReal x7610=((1.0)*x7602);
IkReal x7611=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7608))+((x7602*x7606))+(((-1.0)*gconst134*r20*x7610)));
evalcond[1]=(cj0+((x7602*x7605))+(((-1.0)*r12*x7608))+(((-1.0)*gconst134*r10*x7610)));
evalcond[2]=((((-1.0)*sj0))+((x7602*x7607))+(((-1.0)*gconst134*r00*x7610))+(((-1.0)*r02*x7608)));
evalcond[3]=(((r20*x7609))+((cj2*sj1))+(((-1.0)*x7606*x7608))+(((-1.0)*r22*x7610))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x7607*x7608))+((r00*x7609))+(((-1.0)*r02*x7610))+((cj0*x7604))+(((-1.0)*cj0*x7611)));
evalcond[5]=((((-1.0)*r12*x7610))+(((-1.0)*x7605*x7608))+((r10*x7609))+(((-1.0)*sj0*x7611))+((sj0*x7604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7612=((1.0)*gconst134);
CheckValue<IkReal> x7613=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7612))+(((-1.0)*gconst133*r10)))),-1);
if(!x7613.valid){
continue;
}
CheckValue<IkReal> x7614 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7612))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7613.value)))+(x7614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7615=IKsin(j4);
IkReal x7616=IKcos(j4);
IkReal x7617=(sj1*sj2);
IkReal x7618=(gconst133*r11);
IkReal x7619=(gconst133*r21);
IkReal x7620=(gconst133*r01);
IkReal x7621=((1.0)*x7616);
IkReal x7622=(gconst134*x7616);
IkReal x7623=((1.0)*x7615);
IkReal x7624=((1.0)*cj1*cj2);
evalcond[0]=(((x7615*x7619))+(((-1.0)*gconst134*r20*x7623))+(((-1.0)*r22*x7621)));
evalcond[1]=(((x7615*x7618))+cj0+(((-1.0)*gconst134*r10*x7623))+(((-1.0)*r12*x7621)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7623))+((x7615*x7620))+(((-1.0)*r02*x7621)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7622))+(((-1.0)*x7619*x7621))+(((-1.0)*r22*x7623)));
evalcond[4]=((((-1.0)*x7620*x7621))+(((-1.0)*cj0*x7624))+((r00*x7622))+((cj0*x7617))+(((-1.0)*r02*x7623)));
evalcond[5]=((((-1.0)*r12*x7623))+(((-1.0)*sj0*x7624))+((sj0*x7617))+((r10*x7622))+(((-1.0)*x7618*x7621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7625=((1.0)*gconst134);
CheckValue<IkReal> x7626 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7625))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7626.valid){
continue;
}
CheckValue<IkReal> x7627=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7625)))),-1);
if(!x7627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7626.value)+(((1.5707963267949)*(x7627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7628=IKsin(j4);
IkReal x7629=IKcos(j4);
IkReal x7630=(sj1*sj2);
IkReal x7631=(gconst133*r11);
IkReal x7632=(gconst133*r21);
IkReal x7633=(gconst133*r01);
IkReal x7634=((1.0)*x7629);
IkReal x7635=(gconst134*x7629);
IkReal x7636=((1.0)*x7628);
IkReal x7637=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7634))+((x7628*x7632))+(((-1.0)*gconst134*r20*x7636)));
evalcond[1]=((((-1.0)*gconst134*r10*x7636))+cj0+((x7628*x7631))+(((-1.0)*r12*x7634)));
evalcond[2]=((((-1.0)*sj0))+((x7628*x7633))+(((-1.0)*r02*x7634))+(((-1.0)*gconst134*r00*x7636)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7636))+((cj1*sj2))+(((-1.0)*x7632*x7634))+((r20*x7635)));
evalcond[4]=((((-1.0)*cj0*x7637))+((r00*x7635))+(((-1.0)*x7633*x7634))+(((-1.0)*r02*x7636))+((cj0*x7630)));
evalcond[5]=(((r10*x7635))+(((-1.0)*x7631*x7634))+((sj0*x7630))+(((-1.0)*r12*x7636))+(((-1.0)*sj0*x7637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7638=((-1.0)*r21);
IkReal x7640 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7640)==0){
continue;
}
IkReal x7639=pow(x7640,-0.5);
CheckValue<IkReal> x7641 = IKatan2WithCheck(IkReal(x7638),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7641.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7641.value))));
IkReal gconst136=(x7638*x7639);
IkReal gconst137=((1.0)*r20*x7639);
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7642.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7643=((-1.0)*r21);
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(x7643),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
IkReal x7644=((1.0)*(x7646.value));
IkReal x7645=x7639;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7644)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7644)));
IkReal gconst136=(x7643*x7645);
IkReal gconst137=((1.0)*r20*x7645);
IkReal x7647=r22*r22;
IkReal x7648=((1.0)*x7647);
CheckValue<IkReal> x7652=IKPowWithIntegerCheck(((-1.0)+x7647),-1);
if(!x7652.valid){
continue;
}
IkReal x7649=x7652.value;
if((((1.0)+(((-1.0)*x7648)))) < -0.00001)
continue;
IkReal x7650=IKsqrt(((1.0)+(((-1.0)*x7648))));
IkReal x7651=(cj0*x7649*x7650);
j4eval[0]=((IKabs(((((-1.0)*x7648*x7651))+x7651)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7653=((-1.0)*r21);
CheckValue<IkReal> x7656 = IKatan2WithCheck(IkReal(x7653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7656.valid){
continue;
}
IkReal x7654=((1.0)*(x7656.value));
IkReal x7655=x7639;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7654)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7654)));
IkReal gconst136=(x7653*x7655);
IkReal gconst137=((1.0)*r20*x7655);
IkReal x7657=r22*r22;
IkReal x7658=((1.0)*x7657);
CheckValue<IkReal> x7662=IKPowWithIntegerCheck(((-1.0)+x7657),-1);
if(!x7662.valid){
continue;
}
IkReal x7659=x7662.value;
if((((1.0)+(((-1.0)*x7658)))) < -0.00001)
continue;
IkReal x7660=IKsqrt(((1.0)+(((-1.0)*x7658))));
IkReal x7661=(sj0*x7659*x7660);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7658*x7661))+x7661))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7663=((-1.0)*r21);
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal(x7663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
IkReal x7664=((1.0)*(x7666.value));
IkReal x7665=x7639;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7664)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7664)));
IkReal gconst136=(x7663*x7665);
IkReal gconst137=((1.0)*r20*x7665);
IkReal x7667=r22*r22;
IkReal x7668=(r12*sj0);
IkReal x7669=(cj0*r02);
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(((-1.0)+x7667),-1);
if(!x7673.valid){
continue;
}
IkReal x7670=x7673.value;
if((((1.0)+(((-1.0)*x7667)))) < -0.00001)
continue;
IkReal x7671=IKsqrt(((1.0)+(((-1.0)*x7667))));
IkReal x7672=(r22*x7670*x7671);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7669*x7672))+((x7668*x7672)))))+(IKabs(((((-1.0)*x7669))+(((-1.0)*x7668))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7674=((1.0)*sj0);
IkReal x7675=((1.0)*cj0);
CheckValue<IkReal> x7676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7676.valid){
continue;
}
CheckValue<IkReal> x7677 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7675))+(((-1.0)*r12*x7674)))),IkReal(((((-1.0)*gconst136*r11*x7674))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x7675))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7676.value)))+(x7677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7678=IKsin(j4);
IkReal x7679=IKcos(j4);
IkReal x7680=(gconst136*r01);
IkReal x7681=(gconst137*r10);
IkReal x7682=(sj1*sj2);
IkReal x7683=(gconst137*r20);
IkReal x7684=(gconst136*r11);
IkReal x7685=(gconst136*r21);
IkReal x7686=(gconst137*r00);
IkReal x7687=((1.0)*x7679);
IkReal x7688=((1.0)*cj1*cj2);
IkReal x7689=((1.0)*x7678);
evalcond[0]=((((-1.0)*r22*x7687))+(((-1.0)*x7683*x7689))+((x7678*x7685)));
evalcond[1]=(cj0+(((-1.0)*x7681*x7689))+(((-1.0)*r12*x7687))+((x7678*x7684)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7686*x7689))+((x7678*x7680))+(((-1.0)*r02*x7687)));
evalcond[3]=(((cj2*sj1))+((x7679*x7683))+((cj1*sj2))+(((-1.0)*r22*x7689))+(((-1.0)*x7685*x7687)));
evalcond[4]=(((x7679*x7686))+(((-1.0)*cj0*x7688))+((cj0*x7682))+(((-1.0)*x7680*x7687))+(((-1.0)*r02*x7689)));
evalcond[5]=(((x7679*x7681))+((sj0*x7682))+(((-1.0)*r12*x7689))+(((-1.0)*sj0*x7688))+(((-1.0)*x7684*x7687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7690=((1.0)*gconst137);
CheckValue<IkReal> x7691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7690)))),-1);
if(!x7691.valid){
continue;
}
CheckValue<IkReal> x7692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7690))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7691.value)))+(x7692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7693=IKsin(j4);
IkReal x7694=IKcos(j4);
IkReal x7695=(gconst136*r01);
IkReal x7696=(gconst137*r10);
IkReal x7697=(sj1*sj2);
IkReal x7698=(gconst137*r20);
IkReal x7699=(gconst136*r11);
IkReal x7700=(gconst136*r21);
IkReal x7701=(gconst137*r00);
IkReal x7702=((1.0)*x7694);
IkReal x7703=((1.0)*cj1*cj2);
IkReal x7704=((1.0)*x7693);
evalcond[0]=((((-1.0)*x7698*x7704))+(((-1.0)*r22*x7702))+((x7693*x7700)));
evalcond[1]=((((-1.0)*x7696*x7704))+cj0+((x7693*x7699))+(((-1.0)*r12*x7702)));
evalcond[2]=((((-1.0)*sj0))+((x7693*x7695))+(((-1.0)*x7701*x7704))+(((-1.0)*r02*x7702)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7704))+((cj1*sj2))+(((-1.0)*x7700*x7702))+((x7694*x7698)));
evalcond[4]=(((cj0*x7697))+(((-1.0)*x7695*x7702))+(((-1.0)*r02*x7704))+((x7694*x7701))+(((-1.0)*cj0*x7703)));
evalcond[5]=(((sj0*x7697))+(((-1.0)*r12*x7704))+((x7694*x7696))+(((-1.0)*x7699*x7702))+(((-1.0)*sj0*x7703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7705=((1.0)*gconst137);
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7705))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7705))+(((-1.0)*gconst136*r00)))),-1);
if(!x7707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7706.value)+(((1.5707963267949)*(x7707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7708=IKsin(j4);
IkReal x7709=IKcos(j4);
IkReal x7710=(gconst136*r01);
IkReal x7711=(gconst137*r10);
IkReal x7712=(sj1*sj2);
IkReal x7713=(gconst137*r20);
IkReal x7714=(gconst136*r11);
IkReal x7715=(gconst136*r21);
IkReal x7716=(gconst137*r00);
IkReal x7717=((1.0)*x7709);
IkReal x7718=((1.0)*cj1*cj2);
IkReal x7719=((1.0)*x7708);
evalcond[0]=((((-1.0)*r22*x7717))+(((-1.0)*x7713*x7719))+((x7708*x7715)));
evalcond[1]=((((-1.0)*x7711*x7719))+cj0+(((-1.0)*r12*x7717))+((x7708*x7714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7716*x7719))+(((-1.0)*r02*x7717))+((x7708*x7710)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7719))+((cj1*sj2))+(((-1.0)*x7715*x7717))+((x7709*x7713)));
evalcond[4]=((((-1.0)*cj0*x7718))+((cj0*x7712))+(((-1.0)*r02*x7719))+((x7709*x7716))+(((-1.0)*x7710*x7717)));
evalcond[5]=((((-1.0)*r12*x7719))+((sj0*x7712))+(((-1.0)*x7714*x7717))+((x7709*x7711))+(((-1.0)*sj0*x7718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7720=((-1.0)*r10);
IkReal x7722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7722)==0){
continue;
}
IkReal x7721=pow(x7722,-0.5);
CheckValue<IkReal> x7723 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7720),IKFAST_ATAN2_MAGTHRESH);
if(!x7723.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7723.value));
IkReal gconst139=(r11*x7721);
IkReal gconst140=(x7720*x7721);
CheckValue<IkReal> x7724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7725=((-1.0)*r10);
IkReal x7726=x7721;
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7725),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
IkReal x7727=((-1.0)*(x7728.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7727;
IkReal gconst138=x7727;
IkReal gconst139=(r11*x7726);
IkReal gconst140=(x7725*x7726);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7729=((1.0)*sj0);
IkReal x7730=((1.0)*gconst139);
CheckValue<IkReal> x7731 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7729)))),IkReal(((((-1.0)*cj0*r01*x7730))+((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7729))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7731.valid){
continue;
}
CheckValue<IkReal> x7732=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7730)))),-1);
if(!x7732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7731.value)+(((1.5707963267949)*(x7732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7733=IKsin(j4);
IkReal x7734=IKcos(j4);
IkReal x7735=(gconst140*r00);
IkReal x7736=(sj1*sj2);
IkReal x7737=(gconst139*r11);
IkReal x7738=(gconst139*r01);
IkReal x7739=(gconst139*r21);
IkReal x7740=((1.0)*x7734);
IkReal x7741=((1.0)*x7733);
IkReal x7742=((1.0)*cj1*cj2);
IkReal x7743=(gconst140*x7734);
evalcond[0]=((((-1.0)*r22*x7740))+((x7733*x7739))+(((-1.0)*gconst140*r20*x7741)));
evalcond[1]=(((x7733*x7737))+cj0+(((-1.0)*r12*x7740))+(((-1.0)*gconst140*r10*x7741)));
evalcond[2]=((((-1.0)*sj0))+((x7733*x7738))+(((-1.0)*r02*x7740))+(((-1.0)*x7735*x7741)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7741))+((cj1*sj2))+(((-1.0)*x7739*x7740))+((r20*x7743)));
evalcond[4]=((((-1.0)*r02*x7741))+((cj0*x7736))+(((-1.0)*cj0*x7742))+(((-1.0)*x7738*x7740))+((x7734*x7735)));
evalcond[5]=(((r10*x7743))+(((-1.0)*x7737*x7740))+(((-1.0)*r12*x7741))+((sj0*x7736))+(((-1.0)*sj0*x7742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7744=((1.0)*gconst140);
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
CheckValue<IkReal> x7746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7744))+(((-1.0)*gconst139*r00)))),-1);
if(!x7746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7745.value)+(((1.5707963267949)*(x7746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7747=IKsin(j4);
IkReal x7748=IKcos(j4);
IkReal x7749=(gconst140*r00);
IkReal x7750=(sj1*sj2);
IkReal x7751=(gconst139*r11);
IkReal x7752=(gconst139*r01);
IkReal x7753=(gconst139*r21);
IkReal x7754=((1.0)*x7748);
IkReal x7755=((1.0)*x7747);
IkReal x7756=((1.0)*cj1*cj2);
IkReal x7757=(gconst140*x7748);
evalcond[0]=((((-1.0)*r22*x7754))+((x7747*x7753))+(((-1.0)*gconst140*r20*x7755)));
evalcond[1]=(cj0+(((-1.0)*r12*x7754))+((x7747*x7751))+(((-1.0)*gconst140*r10*x7755)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7754))+((x7747*x7752))+(((-1.0)*x7749*x7755)));
evalcond[3]=((((-1.0)*r22*x7755))+((cj2*sj1))+((cj1*sj2))+((r20*x7757))+(((-1.0)*x7753*x7754)));
evalcond[4]=((((-1.0)*r02*x7755))+(((-1.0)*x7752*x7754))+(((-1.0)*cj0*x7756))+((cj0*x7750))+((x7748*x7749)));
evalcond[5]=(((r10*x7757))+((sj0*x7750))+(((-1.0)*r12*x7755))+(((-1.0)*sj0*x7756))+(((-1.0)*x7751*x7754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7758=((-1.0)*r11);
IkReal x7760 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7760)==0){
continue;
}
IkReal x7759=pow(x7760,-0.5);
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal(x7758),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7761.value))));
IkReal gconst142=(x7758*x7759);
IkReal gconst143=((1.0)*r10*x7759);
CheckValue<IkReal> x7762 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7762.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7762.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7763=((-1.0)*r11);
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal(x7763),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
IkReal x7764=((1.0)*(x7766.value));
IkReal x7765=x7759;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7764)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7764)));
IkReal gconst142=(x7763*x7765);
IkReal gconst143=((1.0)*r10*x7765);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7767=((-1.0)*r11);
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal(x7767),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
IkReal x7768=((1.0)*(x7770.value));
IkReal x7769=x7759;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7768)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7768)));
IkReal gconst142=(x7767*x7769);
IkReal gconst143=((1.0)*r10*x7769);
IkReal x7771=r12*r12;
IkReal x7772=((1.0)*sj0);
IkReal x7773=(cj0*r02);
IkReal x7774=x7759;
j4eval[0]=((IKabs(((((-1.0)*x7772*x7774))+((sj0*x7771*x7774))+((r12*x7773*x7774)))))+(IKabs(((((-1.0)*x7773))+(((-1.0)*r12*x7772))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7775=((-1.0)*r11);
CheckValue<IkReal> x7778 = IKatan2WithCheck(IkReal(x7775),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7778.valid){
continue;
}
IkReal x7776=((1.0)*(x7778.value));
IkReal x7777=x7759;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7776)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7776)));
IkReal gconst142=(x7775*x7777);
IkReal gconst143=((1.0)*r10*x7777);
IkReal x7779=r12*r12;
IkReal x7780=(cj1*r22*sj2);
IkReal x7781=(cj2*r22*sj1);
CheckValue<IkReal> x7785=IKPowWithIntegerCheck(((-1.0)+x7779),-1);
if(!x7785.valid){
continue;
}
IkReal x7782=x7785.value;
if((((1.0)+(((-1.0)*x7779)))) < -0.00001)
continue;
IkReal x7783=IKsqrt(((1.0)+(((-1.0)*x7779))));
IkReal x7784=((1.0)*r12*x7782*x7783);
j4eval[0]=((IKabs((x7780+x7781)))+(IKabs(((((-1.0)*x7781*x7784))+(((-1.0)*x7780*x7784))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7786=(gconst142*r21);
IkReal x7787=(cj1*sj2);
IkReal x7788=(cj2*sj1);
IkReal x7789=(gconst143*r20);
CheckValue<IkReal> x7790 = IKatan2WithCheck(IkReal((((r22*x7788))+((r22*x7787)))),IkReal(((((-1.0)*x7788*x7789))+((x7786*x7787))+((x7786*x7788))+(((-1.0)*x7787*x7789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7790.valid){
continue;
}
CheckValue<IkReal> x7791=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7786*x7786)+(((-2.0)*x7786*x7789))+(x7789*x7789))),-1);
if(!x7791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7790.value)+(((1.5707963267949)*(x7791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7792=IKsin(j4);
IkReal x7793=IKcos(j4);
IkReal x7794=(sj1*sj2);
IkReal x7795=(gconst143*r20);
IkReal x7796=((1.0)*x7793);
IkReal x7797=((1.0)*cj1*cj2);
IkReal x7798=((1.0)*x7792);
IkReal x7799=(gconst142*x7792);
IkReal x7800=(gconst143*x7793);
evalcond[0]=((((-1.0)*r22*x7796))+(((-1.0)*x7795*x7798))+((r21*x7799)));
evalcond[1]=((((-1.0)*gconst143*r10*x7798))+cj0+(((-1.0)*r12*x7796))+((r11*x7799)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7798))+((r01*x7799))+(((-1.0)*r02*x7796)));
evalcond[3]=((((-1.0)*r22*x7798))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7796))+((x7793*x7795)));
evalcond[4]=((((-1.0)*cj0*x7797))+(((-1.0)*gconst142*r01*x7796))+((r00*x7800))+((cj0*x7794))+(((-1.0)*r02*x7798)));
evalcond[5]=((((-1.0)*gconst142*r11*x7796))+(((-1.0)*r12*x7798))+(((-1.0)*sj0*x7797))+((sj0*x7794))+((r10*x7800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7801=((1.0)*sj0);
IkReal x7802=((1.0)*gconst142);
CheckValue<IkReal> x7803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7802))+(((-1.0)*gconst143*r21)))),-1);
if(!x7803.valid){
continue;
}
CheckValue<IkReal> x7804 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7801))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7802))+(((-1.0)*gconst142*r11*x7801))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7803.value)))+(x7804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7805=IKsin(j4);
IkReal x7806=IKcos(j4);
IkReal x7807=(sj1*sj2);
IkReal x7808=(gconst143*r20);
IkReal x7809=((1.0)*x7806);
IkReal x7810=((1.0)*cj1*cj2);
IkReal x7811=((1.0)*x7805);
IkReal x7812=(gconst142*x7805);
IkReal x7813=(gconst143*x7806);
evalcond[0]=((((-1.0)*r22*x7809))+((r21*x7812))+(((-1.0)*x7808*x7811)));
evalcond[1]=(cj0+((r11*x7812))+(((-1.0)*r12*x7809))+(((-1.0)*gconst143*r10*x7811)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7809))+((r01*x7812))+(((-1.0)*gconst143*r00*x7811)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7811))+((x7806*x7808))+(((-1.0)*gconst142*r21*x7809)));
evalcond[4]=((((-1.0)*gconst142*r01*x7809))+((cj0*x7807))+(((-1.0)*r02*x7811))+((r00*x7813))+(((-1.0)*cj0*x7810)));
evalcond[5]=(((r10*x7813))+((sj0*x7807))+(((-1.0)*r12*x7811))+(((-1.0)*gconst142*r11*x7809))+(((-1.0)*sj0*x7810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7814=((1.0)*gconst143);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst142*r21))+(((-1.0)*cj0*r20*x7814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
CheckValue<IkReal> x7816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7814)))),-1);
if(!x7816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7815.value)+(((1.5707963267949)*(x7816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7817=IKsin(j4);
IkReal x7818=IKcos(j4);
IkReal x7819=(sj1*sj2);
IkReal x7820=(gconst143*r20);
IkReal x7821=((1.0)*x7818);
IkReal x7822=((1.0)*cj1*cj2);
IkReal x7823=((1.0)*x7817);
IkReal x7824=(gconst142*x7817);
IkReal x7825=(gconst143*x7818);
evalcond[0]=((((-1.0)*x7820*x7823))+((r21*x7824))+(((-1.0)*r22*x7821)));
evalcond[1]=(cj0+((r11*x7824))+(((-1.0)*r12*x7821))+(((-1.0)*gconst143*r10*x7823)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7821))+((r01*x7824))+(((-1.0)*gconst143*r00*x7823)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7821))+(((-1.0)*r22*x7823))+((x7818*x7820)));
evalcond[4]=((((-1.0)*gconst142*r01*x7821))+(((-1.0)*r02*x7823))+((r00*x7825))+(((-1.0)*cj0*x7822))+((cj0*x7819)));
evalcond[5]=(((r10*x7825))+(((-1.0)*gconst142*r11*x7821))+((sj0*x7819))+(((-1.0)*sj0*x7822))+(((-1.0)*r12*x7823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7826=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7826;
j4eval[1]=IKsign(x7826);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7827=((1.0)*cj5);
IkReal x7828=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7827)));
j4eval[0]=x7828;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7827))+((r21*sj5))))));
j4eval[2]=IKsign(x7828);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7829=cj5*cj5;
IkReal x7830=r11*r11;
IkReal x7831=(r11*sj5);
IkReal x7832=(cj5*r10);
IkReal x7833=((((-2.0)*x7831*x7832))+(r12*r12)+x7830+((x7829*(r10*r10)))+(((-1.0)*x7829*x7830)));
j4eval[0]=x7833;
j4eval[1]=IKsign(x7833);
j4eval[2]=((IKabs(r12))+(IKabs((x7832+(((-1.0)*x7831))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7834=cj5*cj5;
IkReal x7835=r11*r11;
IkReal x7836=(cj5*r10);
IkReal x7837=(r11*sj5);
CheckValue<IkReal> x7838=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x7834*(r10*r10)))+(((-2.0)*x7836*x7837))+x7835+(((-1.0)*x7834*x7835)))),-1);
if(!x7838.valid){
continue;
}
CheckValue<IkReal> x7839 = IKatan2WithCheck(IkReal((x7836+(((-1.0)*x7837)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7838.value)))+(x7839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7840=IKsin(j4);
IkReal x7841=IKcos(j4);
IkReal x7842=(cj5*r10);
IkReal x7843=(r01*sj5);
IkReal x7844=(cj5*r00);
IkReal x7845=(cj5*r20);
IkReal x7846=((1.0)*x7841);
IkReal x7847=((1.0)*x7840);
IkReal x7848=(sj5*x7840);
evalcond[0]=(((r21*x7848))+(((-1.0)*r22*x7846))+(((-1.0)*x7845*x7847)));
evalcond[1]=((((-1.0)*x7844*x7847))+(((-1.0)*r02*x7846))+((x7840*x7843)));
evalcond[2]=((((-1.0)*r11*sj5*x7846))+(((-1.0)*r12*x7847))+((x7841*x7842)));
evalcond[3]=((1.0)+(((-1.0)*x7842*x7847))+(((-1.0)*r12*x7846))+((r11*x7848)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7847))+((cj1*sj2))+(((-1.0)*r21*sj5*x7846))+((x7841*x7845)));
evalcond[5]=((((-1.0)*x7843*x7846))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7847))+((x7841*x7844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7849=((1.0)*cj5);
CheckValue<IkReal> x7850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7849)))),-1);
if(!x7850.valid){
continue;
}
CheckValue<IkReal> x7851 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7850.value)))+(x7851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7852=IKsin(j4);
IkReal x7853=IKcos(j4);
IkReal x7854=(cj5*r10);
IkReal x7855=(r01*sj5);
IkReal x7856=(cj5*r00);
IkReal x7857=(cj5*r20);
IkReal x7858=((1.0)*x7853);
IkReal x7859=((1.0)*x7852);
IkReal x7860=(sj5*x7852);
evalcond[0]=((((-1.0)*x7857*x7859))+((r21*x7860))+(((-1.0)*r22*x7858)));
evalcond[1]=(((x7852*x7855))+(((-1.0)*x7856*x7859))+(((-1.0)*r02*x7858)));
evalcond[2]=((((-1.0)*r11*sj5*x7858))+((x7853*x7854))+(((-1.0)*r12*x7859)));
evalcond[3]=((1.0)+((r11*x7860))+(((-1.0)*x7854*x7859))+(((-1.0)*r12*x7858)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7858))+((x7853*x7857))+(((-1.0)*r22*x7859)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7855*x7858))+((x7853*x7856))+(((-1.0)*r02*x7859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7861=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7861.valid){
continue;
}
CheckValue<IkReal> x7862 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7861.value)))+(x7862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7863=IKsin(j4);
IkReal x7864=IKcos(j4);
IkReal x7865=(cj5*r10);
IkReal x7866=(r01*sj5);
IkReal x7867=(cj5*r00);
IkReal x7868=(cj5*r20);
IkReal x7869=((1.0)*x7864);
IkReal x7870=((1.0)*x7863);
IkReal x7871=(sj5*x7863);
evalcond[0]=((((-1.0)*x7868*x7870))+((r21*x7871))+(((-1.0)*r22*x7869)));
evalcond[1]=((((-1.0)*x7867*x7870))+(((-1.0)*r02*x7869))+((x7863*x7866)));
evalcond[2]=(((x7864*x7865))+(((-1.0)*r12*x7870))+(((-1.0)*r11*sj5*x7869)));
evalcond[3]=((1.0)+((r11*x7871))+(((-1.0)*r12*x7869))+(((-1.0)*x7865*x7870)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7870))+((x7864*x7868))+((cj1*sj2))+(((-1.0)*r21*sj5*x7869)));
evalcond[5]=(((x7864*x7867))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7870))+(((-1.0)*x7866*x7869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7872=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7872;
j4eval[1]=IKsign(x7872);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7873=((1.0)*cj5);
IkReal x7874=((((-1.0)*r21*x7873))+(((-1.0)*r20*sj5)));
j4eval[0]=x7874;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7873))))));
j4eval[2]=IKsign(x7874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7875=cj5*cj5;
IkReal x7876=r11*r11;
IkReal x7877=(cj5*r10);
IkReal x7878=(r11*sj5);
IkReal x7879=((((-1.0)*x7875*(r10*r10)))+((x7875*x7876))+(((-1.0)*x7876))+(((-1.0)*(r12*r12)))+(((2.0)*x7877*x7878)));
j4eval[0]=x7879;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7878))+x7877))));
j4eval[2]=IKsign(x7879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7880=cj5*cj5;
IkReal x7881=r11*r11;
IkReal x7882=(cj5*r10);
IkReal x7883=(r11*sj5);
CheckValue<IkReal> x7884=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7881))+(((2.0)*x7882*x7883))+((x7880*x7881))+(((-1.0)*(r12*r12)))+(((-1.0)*x7880*(r10*r10))))),-1);
if(!x7884.valid){
continue;
}
CheckValue<IkReal> x7885 = IKatan2WithCheck(IkReal(((((-1.0)*x7883))+x7882)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7884.value)))+(x7885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7886=IKsin(j4);
IkReal x7887=IKcos(j4);
IkReal x7888=(cj5*r10);
IkReal x7889=(r01*sj5);
IkReal x7890=(cj5*r00);
IkReal x7891=(cj5*r20);
IkReal x7892=((1.0)*x7887);
IkReal x7893=((1.0)*x7886);
IkReal x7894=(sj5*x7886);
evalcond[0]=(((r21*x7894))+(((-1.0)*x7891*x7893))+(((-1.0)*r22*x7892)));
evalcond[1]=(((x7886*x7889))+(((-1.0)*x7890*x7893))+(((-1.0)*r02*x7892)));
evalcond[2]=((((-1.0)*r11*sj5*x7892))+(((-1.0)*r12*x7893))+((x7887*x7888)));
evalcond[3]=((-1.0)+(((-1.0)*x7888*x7893))+(((-1.0)*r12*x7892))+((r11*x7894)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x7892))+(((-1.0)*r22*x7893))+((x7887*x7891)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x7889*x7892))+((cj1*cj2))+((x7887*x7890))+(((-1.0)*r02*x7893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7895=((1.0)*cj5);
CheckValue<IkReal> x7896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7895))+(((-1.0)*r20*sj5)))),-1);
if(!x7896.valid){
continue;
}
CheckValue<IkReal> x7897 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7896.value)))+(x7897.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7898=IKsin(j4);
IkReal x7899=IKcos(j4);
IkReal x7900=(cj5*r10);
IkReal x7901=(r01*sj5);
IkReal x7902=(cj5*r00);
IkReal x7903=(cj5*r20);
IkReal x7904=((1.0)*x7899);
IkReal x7905=((1.0)*x7898);
IkReal x7906=(sj5*x7898);
evalcond[0]=(((r21*x7906))+(((-1.0)*r22*x7904))+(((-1.0)*x7903*x7905)));
evalcond[1]=(((x7898*x7901))+(((-1.0)*x7902*x7905))+(((-1.0)*r02*x7904)));
evalcond[2]=((((-1.0)*r12*x7905))+((x7899*x7900))+(((-1.0)*r11*sj5*x7904)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7904))+((r11*x7906))+(((-1.0)*x7900*x7905)));
evalcond[4]=(((cj2*sj1))+((x7899*x7903))+((cj1*sj2))+(((-1.0)*r22*x7905))+(((-1.0)*r21*sj5*x7904)));
evalcond[5]=(((x7899*x7902))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x7901*x7904))+(((-1.0)*r02*x7905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7907 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7907.valid){
continue;
}
CheckValue<IkReal> x7908=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7907.value)+(((1.5707963267949)*(x7908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7909=IKsin(j4);
IkReal x7910=IKcos(j4);
IkReal x7911=(cj5*r10);
IkReal x7912=(r01*sj5);
IkReal x7913=(cj5*r00);
IkReal x7914=(cj5*r20);
IkReal x7915=((1.0)*x7910);
IkReal x7916=((1.0)*x7909);
IkReal x7917=(sj5*x7909);
evalcond[0]=(((r21*x7917))+(((-1.0)*r22*x7915))+(((-1.0)*x7914*x7916)));
evalcond[1]=((((-1.0)*r02*x7915))+(((-1.0)*x7913*x7916))+((x7909*x7912)));
evalcond[2]=((((-1.0)*r11*sj5*x7915))+(((-1.0)*r12*x7916))+((x7910*x7911)));
evalcond[3]=((-1.0)+(((-1.0)*x7911*x7916))+((r11*x7917))+(((-1.0)*r12*x7915)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7916))+(((-1.0)*r21*sj5*x7915))+((x7910*x7914)));
evalcond[5]=((((-1.0)*r02*x7916))+(((-1.0)*sj1*sj2))+(((-1.0)*x7912*x7915))+((x7910*x7913))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7918=((-1.0)*r00);
IkReal x7920 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7920)==0){
continue;
}
IkReal x7919=pow(x7920,-0.5);
CheckValue<IkReal> x7921 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7918),IKFAST_ATAN2_MAGTHRESH);
if(!x7921.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7921.value));
IkReal gconst145=(r01*x7919);
IkReal gconst146=(x7918*x7919);
CheckValue<IkReal> x7922 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7922.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7922.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7923=((-1.0)*r00);
IkReal x7924=x7919;
CheckValue<IkReal> x7926 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7923),IKFAST_ATAN2_MAGTHRESH);
if(!x7926.valid){
continue;
}
IkReal x7925=((-1.0)*(x7926.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7925;
IkReal gconst144=x7925;
IkReal gconst145=(r01*x7924);
IkReal gconst146=(x7923*x7924);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7927=((1.0)*sj0);
IkReal x7928=((1.0)*gconst145);
CheckValue<IkReal> x7929=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7928))+(((-1.0)*gconst146*r21)))),-1);
if(!x7929.valid){
continue;
}
CheckValue<IkReal> x7930 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7927)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x7927))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x7928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7929.value)))+(x7930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7931=IKsin(j4);
IkReal x7932=IKcos(j4);
IkReal x7933=(gconst146*r10);
IkReal x7934=(sj1*sj2);
IkReal x7935=(gconst146*r20);
IkReal x7936=(gconst146*r00);
IkReal x7937=((1.0)*x7932);
IkReal x7938=((1.0)*x7931);
IkReal x7939=(gconst145*x7931);
IkReal x7940=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x7935*x7938))+((r21*x7939))+(((-1.0)*r22*x7937)));
evalcond[1]=(cj0+(((-1.0)*r12*x7937))+((r11*x7939))+(((-1.0)*x7933*x7938)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7937))+(((-1.0)*x7936*x7938))+((r01*x7939)));
evalcond[3]=(((cj2*sj1))+((x7932*x7935))+(((-1.0)*r22*x7938))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7937)));
evalcond[4]=(((x7932*x7936))+((cj0*x7934))+(((-1.0)*gconst145*r01*x7937))+(((-1.0)*cj0*x7940))+(((-1.0)*r02*x7938)));
evalcond[5]=(((x7932*x7933))+((sj0*x7934))+(((-1.0)*r12*x7938))+(((-1.0)*sj0*x7940))+(((-1.0)*gconst145*r11*x7937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7941=((1.0)*gconst146);
CheckValue<IkReal> x7942 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7941))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7942.valid){
continue;
}
CheckValue<IkReal> x7943=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7941))+(((-1.0)*gconst145*r10)))),-1);
if(!x7943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7942.value)+(((1.5707963267949)*(x7943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7944=IKsin(j4);
IkReal x7945=IKcos(j4);
IkReal x7946=(gconst146*r10);
IkReal x7947=(sj1*sj2);
IkReal x7948=(gconst146*r20);
IkReal x7949=(gconst146*r00);
IkReal x7950=((1.0)*x7945);
IkReal x7951=((1.0)*x7944);
IkReal x7952=(gconst145*x7944);
IkReal x7953=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7950))+(((-1.0)*x7948*x7951))+((r21*x7952)));
evalcond[1]=(cj0+((r11*x7952))+(((-1.0)*r12*x7950))+(((-1.0)*x7946*x7951)));
evalcond[2]=(((r01*x7952))+(((-1.0)*sj0))+(((-1.0)*r02*x7950))+(((-1.0)*x7949*x7951)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7951))+((cj1*sj2))+((x7945*x7948))+(((-1.0)*gconst145*r21*x7950)));
evalcond[4]=(((cj0*x7947))+(((-1.0)*gconst145*r01*x7950))+(((-1.0)*cj0*x7953))+(((-1.0)*r02*x7951))+((x7945*x7949)));
evalcond[5]=((((-1.0)*gconst145*r11*x7950))+((sj0*x7947))+((x7945*x7946))+(((-1.0)*r12*x7951))+(((-1.0)*sj0*x7953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7954=((-1.0)*r01);
IkReal x7956 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7956)==0){
continue;
}
IkReal x7955=pow(x7956,-0.5);
CheckValue<IkReal> x7957 = IKatan2WithCheck(IkReal(x7954),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7957.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7957.value))));
IkReal gconst148=(x7954*x7955);
IkReal gconst149=((1.0)*r00*x7955);
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7958.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7959=((-1.0)*r01);
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(x7959),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
IkReal x7960=((1.0)*(x7962.value));
IkReal x7961=x7955;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7960)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7960)));
IkReal gconst148=(x7959*x7961);
IkReal gconst149=((1.0)*r00*x7961);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7963=((-1.0)*r01);
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(x7963),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
IkReal x7964=((1.0)*(x7966.value));
IkReal x7965=x7955;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7964)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7964)));
IkReal gconst148=(x7963*x7965);
IkReal gconst149=((1.0)*r00*x7965);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7967=((-1.0)*r01);
CheckValue<IkReal> x7970 = IKatan2WithCheck(IkReal(x7967),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7970.valid){
continue;
}
IkReal x7968=((1.0)*(x7970.value));
IkReal x7969=x7955;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7968)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7968)));
IkReal gconst148=(x7967*x7969);
IkReal gconst149=((1.0)*r00*x7969);
IkReal x7971=r02*r02;
IkReal x7972=(r12*sj0);
IkReal x7973=((1.0)*cj0);
IkReal x7974=x7955;
j4eval[0]=((IKabs(((((-1.0)*x7972))+(((-1.0)*r02*x7973)))))+(IKabs(((((-1.0)*x7973*x7974))+((cj0*x7971*x7974))+((r02*x7972*x7974))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7975=((1.0)*sj0);
IkReal x7976=((1.0)*gconst148);
CheckValue<IkReal> x7977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x7976)))),-1);
if(!x7977.valid){
continue;
}
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7975)))),IkReal(((((-1.0)*cj0*r01*x7976))+((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7977.value)))+(x7978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7979=IKsin(j4);
IkReal x7980=IKcos(j4);
IkReal x7981=(gconst148*r11);
IkReal x7982=(sj1*sj2);
IkReal x7983=((1.0)*x7980);
IkReal x7984=(gconst149*x7980);
IkReal x7985=(gconst148*x7979);
IkReal x7986=((1.0)*cj1*cj2);
IkReal x7987=((1.0)*x7979);
evalcond[0]=((((-1.0)*r22*x7983))+(((-1.0)*gconst149*r20*x7987))+((r21*x7985)));
evalcond[1]=((((-1.0)*r12*x7983))+cj0+(((-1.0)*gconst149*r10*x7987))+((x7979*x7981)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7985))+(((-1.0)*gconst149*r00*x7987))+(((-1.0)*r02*x7983)));
evalcond[3]=((((-1.0)*r22*x7987))+((cj2*sj1))+((r20*x7984))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7983)));
evalcond[4]=((((-1.0)*gconst148*r01*x7983))+((r00*x7984))+((cj0*x7982))+(((-1.0)*cj0*x7986))+(((-1.0)*r02*x7987)));
evalcond[5]=((((-1.0)*r12*x7987))+(((-1.0)*x7981*x7983))+((sj0*x7982))+(((-1.0)*sj0*x7986))+((r10*x7984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7988=((1.0)*gconst149);
CheckValue<IkReal> x7989=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7988))+(((-1.0)*gconst148*r10)))),-1);
if(!x7989.valid){
continue;
}
CheckValue<IkReal> x7990 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7988))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7989.value)))+(x7990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7991=IKsin(j4);
IkReal x7992=IKcos(j4);
IkReal x7993=(gconst148*r11);
IkReal x7994=(sj1*sj2);
IkReal x7995=((1.0)*x7992);
IkReal x7996=(gconst149*x7992);
IkReal x7997=(gconst148*x7991);
IkReal x7998=((1.0)*cj1*cj2);
IkReal x7999=((1.0)*x7991);
evalcond[0]=((((-1.0)*gconst149*r20*x7999))+((r21*x7997))+(((-1.0)*r22*x7995)));
evalcond[1]=((((-1.0)*r12*x7995))+cj0+(((-1.0)*gconst149*r10*x7999))+((x7991*x7993)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7997))+(((-1.0)*r02*x7995))+(((-1.0)*gconst149*r00*x7999)));
evalcond[3]=(((r20*x7996))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x7995))+(((-1.0)*r22*x7999)));
evalcond[4]=((((-1.0)*gconst148*r01*x7995))+((r00*x7996))+((cj0*x7994))+(((-1.0)*cj0*x7998))+(((-1.0)*r02*x7999)));
evalcond[5]=(((r10*x7996))+(((-1.0)*r12*x7999))+((sj0*x7994))+(((-1.0)*sj0*x7998))+(((-1.0)*x7993*x7995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8000=((1.0)*gconst149);
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8000))+(((-1.0)*gconst148*r00)))),-1);
if(!x8001.valid){
continue;
}
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8000)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8001.value)))+(x8002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8003=IKsin(j4);
IkReal x8004=IKcos(j4);
IkReal x8005=(gconst148*r11);
IkReal x8006=(sj1*sj2);
IkReal x8007=((1.0)*x8004);
IkReal x8008=(gconst149*x8004);
IkReal x8009=(gconst148*x8003);
IkReal x8010=((1.0)*cj1*cj2);
IkReal x8011=((1.0)*x8003);
evalcond[0]=(((r21*x8009))+(((-1.0)*gconst149*r20*x8011))+(((-1.0)*r22*x8007)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8011))+(((-1.0)*r12*x8007))+((x8003*x8005)));
evalcond[2]=(((r01*x8009))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8011))+(((-1.0)*r02*x8007)));
evalcond[3]=((((-1.0)*r22*x8011))+((cj2*sj1))+(((-1.0)*gconst148*r21*x8007))+((cj1*sj2))+((r20*x8008)));
evalcond[4]=((((-1.0)*r02*x8011))+((r00*x8008))+((cj0*x8006))+(((-1.0)*cj0*x8010))+(((-1.0)*gconst148*r01*x8007)));
evalcond[5]=(((sj0*x8006))+(((-1.0)*sj0*x8010))+(((-1.0)*x8005*x8007))+(((-1.0)*r12*x8011))+((r10*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8012=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8012;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8012);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8013=((1.0)*cj5);
IkReal x8014=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8013)));
j4eval[0]=x8014;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8013))))));
j4eval[2]=IKsign(x8014);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8015=cj5*cj5;
IkReal x8016=r01*r01;
IkReal x8017=(r01*sj5);
IkReal x8018=(cj5*r00);
IkReal x8019=((((-1.0)*(r02*r02)))+(((-1.0)*x8016))+(((2.0)*x8017*x8018))+((x8015*x8016))+(((-1.0)*x8015*(r00*r00))));
j4eval[0]=x8019;
j4eval[1]=IKsign(x8019);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8017))+x8018))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8020=cj5*cj5;
IkReal x8021=r01*r01;
IkReal x8022=(r01*sj5);
IkReal x8023=(cj5*r00);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(((((-1.0)*x8022))+x8023)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
CheckValue<IkReal> x8025=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8021))+(((2.0)*x8022*x8023))+(((-1.0)*(r02*r02)))+(((-1.0)*x8020*(r00*r00)))+((x8020*x8021)))),-1);
if(!x8025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8024.value)+(((1.5707963267949)*(x8025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8026=IKsin(j4);
IkReal x8027=IKcos(j4);
IkReal x8028=(cj5*r10);
IkReal x8029=(r01*sj5);
IkReal x8030=(cj5*r00);
IkReal x8031=(cj5*r20);
IkReal x8032=((1.0)*x8027);
IkReal x8033=((1.0)*x8026);
IkReal x8034=(sj5*x8026);
evalcond[0]=(((r21*x8034))+(((-1.0)*r22*x8032))+(((-1.0)*x8031*x8033)));
evalcond[1]=((((-1.0)*x8028*x8033))+(((-1.0)*r12*x8032))+((r11*x8034)));
evalcond[2]=(((x8027*x8030))+(((-1.0)*r02*x8033))+(((-1.0)*x8029*x8032)));
evalcond[3]=((-1.0)+((x8026*x8029))+(((-1.0)*r02*x8032))+(((-1.0)*x8030*x8033)));
evalcond[4]=(((cj2*sj1))+((x8027*x8031))+((cj1*sj2))+(((-1.0)*r21*sj5*x8032))+(((-1.0)*r22*x8033)));
evalcond[5]=(((x8027*x8028))+(((-1.0)*r12*x8033))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8035=((1.0)*cj5);
CheckValue<IkReal> x8036 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8036.valid){
continue;
}
CheckValue<IkReal> x8037=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8035))+(((-1.0)*r10*sj5)))),-1);
if(!x8037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8036.value)+(((1.5707963267949)*(x8037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8038=IKsin(j4);
IkReal x8039=IKcos(j4);
IkReal x8040=(cj5*r10);
IkReal x8041=(r01*sj5);
IkReal x8042=(cj5*r00);
IkReal x8043=(cj5*r20);
IkReal x8044=((1.0)*x8039);
IkReal x8045=((1.0)*x8038);
IkReal x8046=(sj5*x8038);
evalcond[0]=((((-1.0)*x8043*x8045))+((r21*x8046))+(((-1.0)*r22*x8044)));
evalcond[1]=((((-1.0)*x8040*x8045))+((r11*x8046))+(((-1.0)*r12*x8044)));
evalcond[2]=(((x8039*x8042))+(((-1.0)*x8041*x8044))+(((-1.0)*r02*x8045)));
evalcond[3]=((-1.0)+(((-1.0)*x8042*x8045))+(((-1.0)*r02*x8044))+((x8038*x8041)));
evalcond[4]=(((cj2*sj1))+((x8039*x8043))+((cj1*sj2))+(((-1.0)*r21*sj5*x8044))+(((-1.0)*r22*x8045)));
evalcond[5]=(((x8039*x8040))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8044))+(((-1.0)*r12*x8045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8047=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8047.valid){
continue;
}
CheckValue<IkReal> x8048 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8047.value)))+(x8048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8049=IKsin(j4);
IkReal x8050=IKcos(j4);
IkReal x8051=(cj5*r10);
IkReal x8052=(r01*sj5);
IkReal x8053=(cj5*r00);
IkReal x8054=(cj5*r20);
IkReal x8055=((1.0)*x8050);
IkReal x8056=((1.0)*x8049);
IkReal x8057=(sj5*x8049);
evalcond[0]=((((-1.0)*r22*x8055))+((r21*x8057))+(((-1.0)*x8054*x8056)));
evalcond[1]=((((-1.0)*r12*x8055))+(((-1.0)*x8051*x8056))+((r11*x8057)));
evalcond[2]=(((x8050*x8053))+(((-1.0)*x8052*x8055))+(((-1.0)*r02*x8056)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8055))+(((-1.0)*x8053*x8056))+((x8049*x8052)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8055))+((x8050*x8054))+(((-1.0)*r22*x8056)));
evalcond[5]=((((-1.0)*r12*x8056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8050*x8051))+(((-1.0)*r11*sj5*x8055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8058=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8058;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8059=((1.0)*cj5);
IkReal x8060=((((-1.0)*r21*x8059))+(((-1.0)*r20*sj5)));
j4eval[0]=x8060;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8059)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8061=cj5*cj5;
IkReal x8062=r01*r01;
IkReal x8063=(cj5*r00);
IkReal x8064=(r01*sj5);
IkReal x8065=((((-1.0)*x8061*x8062))+(((-2.0)*x8063*x8064))+((x8061*(r00*r00)))+x8062+(r02*r02));
j4eval[0]=x8065;
j4eval[1]=((IKabs(((((-1.0)*x8064))+x8063)))+(IKabs(r02)));
j4eval[2]=IKsign(x8065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8066=cj5*cj5;
IkReal x8067=r01*r01;
IkReal x8068=(r01*sj5);
IkReal x8069=(cj5*r00);
CheckValue<IkReal> x8070 = IKatan2WithCheck(IkReal(((((-1.0)*x8068))+x8069)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8070.valid){
continue;
}
CheckValue<IkReal> x8071=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8066*x8067))+(((-2.0)*x8068*x8069))+x8067+(r02*r02)+((x8066*(r00*r00))))),-1);
if(!x8071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8070.value)+(((1.5707963267949)*(x8071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8072=IKsin(j4);
IkReal x8073=IKcos(j4);
IkReal x8074=(cj5*r10);
IkReal x8075=(r01*sj5);
IkReal x8076=(cj5*r00);
IkReal x8077=(cj5*r20);
IkReal x8078=((1.0)*x8073);
IkReal x8079=((1.0)*x8072);
IkReal x8080=(sj5*x8072);
evalcond[0]=(((r21*x8080))+(((-1.0)*x8077*x8079))+(((-1.0)*r22*x8078)));
evalcond[1]=((((-1.0)*x8074*x8079))+((r11*x8080))+(((-1.0)*r12*x8078)));
evalcond[2]=((((-1.0)*r02*x8079))+(((-1.0)*x8075*x8078))+((x8073*x8076)));
evalcond[3]=((1.0)+((x8072*x8075))+(((-1.0)*r02*x8078))+(((-1.0)*x8076*x8079)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8078))+(((-1.0)*r22*x8079))+((x8073*x8077)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8078))+((cj1*cj2))+(((-1.0)*r12*x8079))+((x8073*x8074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8081=((1.0)*cj5);
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8081))+(((-1.0)*r20*sj5)))),-1);
if(!x8082.valid){
continue;
}
CheckValue<IkReal> x8083 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8082.value)))+(x8083.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8084=IKsin(j4);
IkReal x8085=IKcos(j4);
IkReal x8086=(cj5*r10);
IkReal x8087=(r01*sj5);
IkReal x8088=(cj5*r00);
IkReal x8089=(cj5*r20);
IkReal x8090=((1.0)*x8085);
IkReal x8091=((1.0)*x8084);
IkReal x8092=(sj5*x8084);
evalcond[0]=((((-1.0)*x8089*x8091))+(((-1.0)*r22*x8090))+((r21*x8092)));
evalcond[1]=(((r11*x8092))+(((-1.0)*r12*x8090))+(((-1.0)*x8086*x8091)));
evalcond[2]=((((-1.0)*r02*x8091))+((x8085*x8088))+(((-1.0)*x8087*x8090)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8090))+((x8084*x8087))+(((-1.0)*x8088*x8091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8090))+((cj1*sj2))+((x8085*x8089))+(((-1.0)*r22*x8091)));
evalcond[5]=((((-1.0)*r11*sj5*x8090))+(((-1.0)*sj1*sj2))+((x8085*x8086))+(((-1.0)*r12*x8091))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
CheckValue<IkReal> x8094=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8093.value)+(((1.5707963267949)*(x8094.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8095=IKsin(j4);
IkReal x8096=IKcos(j4);
IkReal x8097=(cj5*r10);
IkReal x8098=(r01*sj5);
IkReal x8099=(cj5*r00);
IkReal x8100=(cj5*r20);
IkReal x8101=((1.0)*x8096);
IkReal x8102=((1.0)*x8095);
IkReal x8103=(sj5*x8095);
evalcond[0]=((((-1.0)*r22*x8101))+((r21*x8103))+(((-1.0)*x8100*x8102)));
evalcond[1]=(((r11*x8103))+(((-1.0)*x8097*x8102))+(((-1.0)*r12*x8101)));
evalcond[2]=((((-1.0)*x8098*x8101))+(((-1.0)*r02*x8102))+((x8096*x8099)));
evalcond[3]=((1.0)+(((-1.0)*x8099*x8102))+((x8095*x8098))+(((-1.0)*r02*x8101)));
evalcond[4]=((((-1.0)*r21*sj5*x8101))+((x8096*x8100))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8102)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+((x8096*x8097))+(((-1.0)*r11*sj5*x8101))+(((-1.0)*r12*x8102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8104=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8104);
rxp1_1=(px*r21);
rxp1_2=(r11*x8104);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8105=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8105);
rxp1_1=(px*r21);
rxp1_2=(r11*x8105);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8106=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8106);
rxp1_1=(px*r21);
rxp1_2=(r11*x8106);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8109=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8109.valid){
continue;
}
IkReal x8107=x8109.value;
IkReal x8108=(sj0*x8107);
cj4array[0]=(((cj1*cj2*x8108))+(((-1.0)*sj1*sj2*x8108)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8110=IKsin(j4);
IkReal x8111=IKcos(j4);
IkReal x8112=(r21*sj5);
IkReal x8113=(cj5*r20);
IkReal x8114=((1.0)*x8110);
IkReal x8115=((1.0)*x8111);
evalcond[0]=((-1.0)*r02*x8110);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8115)));
evalcond[2]=((((-1.0)*x8113*x8114))+((x8110*x8112)));
evalcond[3]=(((r11*sj5*x8110))+(((-1.0)*cj5*r10*x8114)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8112*x8115))+((cj1*sj2))+((x8111*x8113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8118=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8118.valid){
continue;
}
IkReal x8116=x8118.value;
IkReal x8117=((1.0)*x8116);
cj4array[0]=((((-1.0)*cj2*sj1*x8117))+(((-1.0)*cj1*sj2*x8117)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(r11*sj5);
IkReal x8122=((1.0)*sj0);
IkReal x8123=((1.0)*x8120);
IkReal x8124=((1.0)*cj5*x8119);
evalcond[0]=((-1.0)*r02*x8119);
evalcond[1]=((((-1.0)*x8122))+(((-1.0)*r02*x8123)));
evalcond[2]=((((-1.0)*r20*x8124))+((r21*sj5*x8119)));
evalcond[3]=((((-1.0)*r10*x8124))+((x8119*x8121)));
evalcond[4]=((((-1.0)*x8121*x8123))+((cj5*r10*x8120))+(((-1.0)*cj1*cj2*x8122))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8125=IKPowWithIntegerCheck(r02,-1);
if(!x8125.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8125.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8126=IKsin(j4);
IkReal x8127=IKcos(j4);
IkReal x8128=(cj5*x8127);
IkReal x8129=(sj5*x8126);
IkReal x8130=((1.0)*sj5*x8127);
IkReal x8131=((1.0)*cj5*x8126);
evalcond[0]=((-1.0)*r02*x8126);
evalcond[1]=(((r21*x8129))+(((-1.0)*r20*x8131)));
evalcond[2]=(((r11*x8129))+(((-1.0)*r10*x8131)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8128))+(((-1.0)*r21*x8130)));
evalcond[4]=((((-1.0)*r11*x8130))+(((-1.0)*cj1*cj2*sj0))+((r10*x8128))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8132=((1.0)*sj0);
IkReal x8133=((1.0)*cj0);
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8133))+(((-1.0)*r12*x8132)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8133))+(((-1.0)*r11*sj5*x8132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
CheckValue<IkReal> x8135=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8134.value)+(((1.5707963267949)*(x8135.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8136=IKsin(j4);
IkReal x8137=IKcos(j4);
IkReal x8138=(cj5*r10);
IkReal x8139=(sj1*sj2);
IkReal x8140=(r01*sj5);
IkReal x8141=(cj5*r00);
IkReal x8142=(cj5*r20);
IkReal x8143=((1.0)*x8137);
IkReal x8144=((1.0)*cj1*cj2);
IkReal x8145=((1.0)*x8136);
IkReal x8146=(sj5*x8136);
evalcond[0]=((((-1.0)*r22*x8143))+(((-1.0)*x8142*x8145))+((r21*x8146)));
evalcond[1]=(cj0+(((-1.0)*x8138*x8145))+((r11*x8146))+(((-1.0)*r12*x8143)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8141*x8145))+(((-1.0)*r02*x8143))+((x8136*x8140)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8145))+(((-1.0)*r21*sj5*x8143))+((x8137*x8142)));
evalcond[4]=((((-1.0)*cj0*x8144))+(((-1.0)*x8140*x8143))+(((-1.0)*r02*x8145))+((cj0*x8139))+((x8137*x8141)));
evalcond[5]=((((-1.0)*r11*sj5*x8143))+((x8137*x8138))+(((-1.0)*sj0*x8144))+(((-1.0)*r12*x8145))+((sj0*x8139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8147=((1.0)*cj5);
CheckValue<IkReal> x8148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8147)))),-1);
if(!x8148.valid){
continue;
}
CheckValue<IkReal> x8149 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8147))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8148.value)))+(x8149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8150=IKsin(j4);
IkReal x8151=IKcos(j4);
IkReal x8152=(cj5*r10);
IkReal x8153=(sj1*sj2);
IkReal x8154=(r01*sj5);
IkReal x8155=(cj5*r00);
IkReal x8156=(cj5*r20);
IkReal x8157=((1.0)*x8151);
IkReal x8158=((1.0)*cj1*cj2);
IkReal x8159=((1.0)*x8150);
IkReal x8160=(sj5*x8150);
evalcond[0]=((((-1.0)*x8156*x8159))+((r21*x8160))+(((-1.0)*r22*x8157)));
evalcond[1]=(((r11*x8160))+cj0+(((-1.0)*r12*x8157))+(((-1.0)*x8152*x8159)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8157))+((x8150*x8154))+(((-1.0)*x8155*x8159)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8151*x8156))+(((-1.0)*r21*sj5*x8157))+(((-1.0)*r22*x8159)));
evalcond[4]=((((-1.0)*cj0*x8158))+((cj0*x8153))+(((-1.0)*r02*x8159))+((x8151*x8155))+(((-1.0)*x8154*x8157)));
evalcond[5]=(((sj0*x8153))+(((-1.0)*sj0*x8158))+(((-1.0)*r11*sj5*x8157))+((x8151*x8152))+(((-1.0)*r12*x8159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8161=((1.0)*cj5);
CheckValue<IkReal> x8162=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8161))+(((-1.0)*r00*sj5)))),-1);
if(!x8162.valid){
continue;
}
CheckValue<IkReal> x8163 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8162.value)))+(x8163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8164=IKsin(j4);
IkReal x8165=IKcos(j4);
IkReal x8166=(cj5*r10);
IkReal x8167=(sj1*sj2);
IkReal x8168=(r01*sj5);
IkReal x8169=(cj5*r00);
IkReal x8170=(cj5*r20);
IkReal x8171=((1.0)*x8165);
IkReal x8172=((1.0)*cj1*cj2);
IkReal x8173=((1.0)*x8164);
IkReal x8174=(sj5*x8164);
evalcond[0]=((((-1.0)*x8170*x8173))+(((-1.0)*r22*x8171))+((r21*x8174)));
evalcond[1]=((((-1.0)*r12*x8171))+cj0+((r11*x8174))+(((-1.0)*x8166*x8173)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8169*x8173))+((x8164*x8168))+(((-1.0)*r02*x8171)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8165*x8170))+(((-1.0)*r22*x8173))+(((-1.0)*r21*sj5*x8171)));
evalcond[4]=(((cj0*x8167))+(((-1.0)*x8168*x8171))+(((-1.0)*cj0*x8172))+(((-1.0)*r02*x8173))+((x8165*x8169)));
evalcond[5]=((((-1.0)*sj0*x8172))+(((-1.0)*r12*x8173))+((sj0*x8167))+((x8165*x8166))+(((-1.0)*r11*sj5*x8171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8175=cj5*cj5;
IkReal x8176=r21*r21;
IkReal x8177=(cj2*sj1);
IkReal x8178=(cj1*sj2);
IkReal x8179=(r21*sj5);
IkReal x8180=((1.0)*cj5*r20);
CheckValue<IkReal> x8181=IKPowWithIntegerCheck(IKsign((((x8175*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x8179))+x8176+(((-1.0)*x8175*x8176)))),-1);
if(!x8181.valid){
continue;
}
CheckValue<IkReal> x8182 = IKatan2WithCheck(IkReal((((r22*x8177))+((r22*x8178)))),IkReal((((x8177*x8179))+((x8178*x8179))+(((-1.0)*x8177*x8180))+(((-1.0)*x8178*x8180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8181.value)))+(x8182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8183=IKsin(j4);
IkReal x8184=IKcos(j4);
IkReal x8185=(r21*sj5);
IkReal x8186=(cj5*r20);
IkReal x8187=((1.0)*x8184);
IkReal x8188=((1.0)*x8183);
evalcond[0]=(((x8183*x8185))+(((-1.0)*r22*x8187))+(((-1.0)*x8186*x8188)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x8188))+((cj1*sj2))+((x8184*x8186))+(((-1.0)*x8185*x8187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8189=(cj5*sj4);
IkReal x8190=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8190))+(((-1.0)*r00*x8189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8189))+(((-1.0)*r11*x8190))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8190))+(((-1.0)*r00*x8189))))+IKsqr((((r10*x8189))+(((-1.0)*r11*x8190))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8190))+(((-1.0)*r00*x8189))), (((r10*x8189))+(((-1.0)*r11*x8190))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8191=IKcos(j0);
IkReal x8192=IKsin(j0);
IkReal x8193=(cj4*cj5);
IkReal x8194=(cj5*r01);
IkReal x8195=(r11*sj5);
IkReal x8196=((1.0)*sj5);
IkReal x8197=((1.0)*cj5);
IkReal x8198=((0.1157)*sj5);
IkReal x8199=((1.0)*sj4);
IkReal x8200=((1.0)*cj2);
IkReal x8201=((0.5723)*sj2);
IkReal x8202=((1.0)*cj4);
IkReal x8203=((0.5723)*cj2);
IkReal x8204=((1.0)*cj1*sj2);
IkReal x8205=(sj1*x8191);
IkReal x8206=(cj1*x8191);
IkReal x8207=(cj1*x8192);
IkReal x8208=(sj1*x8192);
evalcond[0]=((((-1.0)*r12*x8202))+((sj4*x8195))+x8191+(((-1.0)*r10*sj4*x8197)));
evalcond[1]=((((-1.0)*x8192))+(((-1.0)*r00*sj4*x8197))+(((-1.0)*r02*x8202))+((r01*sj4*sj5)));
evalcond[2]=((((-1.0)*x8191*x8204))+(((-1.0)*r00*x8196))+(((-1.0)*x8200*x8205))+(((-1.0)*x8194)));
evalcond[3]=((((-1.0)*x8200*x8208))+(((-1.0)*x8192*x8204))+(((-1.0)*r10*x8196))+(((-1.0)*r11*x8197)));
evalcond[4]=((((-1.0)*r02*x8199))+((r00*x8193))+((sj2*x8205))+(((-1.0)*x8200*x8206))+(((-1.0)*cj4*r01*x8196)));
evalcond[5]=(((r10*x8193))+((sj2*x8208))+(((-1.0)*x8200*x8207))+(((-1.0)*x8195*x8202))+(((-1.0)*r12*x8199)));
evalcond[6]=((((-1.0)*r00*x8198))+(((-0.163941)*x8192))+(((-0.1157)*x8194))+(((-1.0)*x8201*x8205))+((x8203*x8206))+(((-1.0)*px))+(((0.612)*x8206)));
evalcond[7]=((((0.163941)*x8191))+(((-1.0)*r10*x8198))+(((-1.0)*x8201*x8208))+((x8203*x8207))+(((-1.0)*py))+(((-0.1157)*cj5*r11))+(((0.612)*x8207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8209 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8209.valid){
continue;
}
CheckValue<IkReal> x8210=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8210.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8209.value)+(((1.5707963267949)*(x8210.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8211=IKcos(j0);
IkReal x8212=IKsin(j0);
IkReal x8213=(cj5*r01);
IkReal x8214=((1.0)*sj5);
IkReal x8215=(cj5*r11);
IkReal x8216=((0.1157)*sj5);
IkReal x8217=((1.0)*sj1);
IkReal x8218=((1.0)*cj1*sj2);
IkReal x8219=((0.5723)*sj1*sj2);
IkReal x8220=(cj2*x8211);
IkReal x8221=(cj1*x8212);
evalcond[0]=((((-1.0)*r00*x8214))+(((-1.0)*x8211*x8218))+(((-1.0)*x8213))+(((-1.0)*x8217*x8220)));
evalcond[1]=((((-1.0)*cj2*x8212*x8217))+(((-1.0)*x8212*x8218))+(((-1.0)*x8215))+(((-1.0)*r10*x8214)));
evalcond[2]=((((-1.0)*r00*x8216))+(((-0.163941)*x8212))+(((-1.0)*px))+(((-1.0)*x8211*x8219))+(((0.5723)*cj1*x8220))+(((0.612)*cj1*x8211))+(((-0.1157)*x8213)));
evalcond[3]=((((0.5723)*cj2*x8221))+(((-1.0)*py))+(((-1.0)*x8212*x8219))+(((0.612)*x8221))+(((-0.1157)*x8215))+(((-1.0)*r10*x8216))+(((0.163941)*x8211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8222=((1.0)*cj5);
IkReal x8223=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8222)));
j4eval[0]=x8223;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8222))))));
j4eval[2]=IKsign(x8223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8224=((1.0)*cj5);
IkReal x8225=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8224)));
j4eval[0]=x8225;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8224))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8225);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8226=((1.0)*sj0);
IkReal x8227=((1.0)*cj0);
IkReal x8228=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8228;
j4eval[1]=((IKabs(((((-1.0)*r02*x8227))+(((-1.0)*r12*x8226)))))+(IKabs(((((-1.0)*r11*sj5*x8226))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8227))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x8228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8229=((-1.0)*r20);
IkReal x8231 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8231)==0){
continue;
}
IkReal x8230=pow(x8231,-0.5);
CheckValue<IkReal> x8232 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8229),IKFAST_ATAN2_MAGTHRESH);
if(!x8232.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8232.value));
IkReal gconst133=(r21*x8230);
IkReal gconst134=(x8229*x8230);
CheckValue<IkReal> x8233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8233.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8233.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8234=((-1.0)*r20);
IkReal x8235=x8230;
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8234),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
IkReal x8236=((-1.0)*(x8237.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8236;
IkReal gconst132=x8236;
IkReal gconst133=(r21*x8235);
IkReal gconst134=(x8234*x8235);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8238=((-1.0)*r20);
IkReal x8239=x8230;
CheckValue<IkReal> x8241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8238),IKFAST_ATAN2_MAGTHRESH);
if(!x8241.valid){
continue;
}
IkReal x8240=((-1.0)*(x8241.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8240;
IkReal gconst132=x8240;
IkReal gconst133=(r21*x8239);
IkReal gconst134=(x8238*x8239);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8242=((-1.0)*r20);
IkReal x8243=x8230;
CheckValue<IkReal> x8245 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8242),IKFAST_ATAN2_MAGTHRESH);
if(!x8245.valid){
continue;
}
IkReal x8244=((-1.0)*(x8245.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8244;
IkReal gconst132=x8244;
IkReal gconst133=(r21*x8243);
IkReal gconst134=(x8242*x8243);
IkReal x8246=r22*r22;
CheckValue<IkReal> x8249=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8246))),-1);
if(!x8249.valid){
continue;
}
IkReal x8247=x8249.value;
IkReal x8248=((((2.0)*x8247*(r20*r20)*(r21*r21)))+((x8247*(r21*r21*r21*r21)))+((x8247*(r20*r20*r20*r20)))+x8246);
j4eval[0]=x8248;
j4eval[1]=IKsign(x8248);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8250=(gconst133*r21);
IkReal x8251=(cj1*sj2);
IkReal x8252=(gconst134*r20);
IkReal x8253=(cj2*sj1);
CheckValue<IkReal> x8254 = IKatan2WithCheck(IkReal((((r22*x8253))+((r22*x8251)))),IkReal(((((-1.0)*x8252*x8253))+(((-1.0)*x8251*x8252))+((x8250*x8253))+((x8250*x8251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8254.valid){
continue;
}
CheckValue<IkReal> x8255=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8252*x8252)+(((-2.0)*x8250*x8252))+(x8250*x8250))),-1);
if(!x8255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8254.value)+(((1.5707963267949)*(x8255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8256=IKsin(j4);
IkReal x8257=IKcos(j4);
IkReal x8258=(sj1*sj2);
IkReal x8259=(gconst133*r11);
IkReal x8260=(gconst133*r21);
IkReal x8261=(gconst133*r01);
IkReal x8262=((1.0)*x8257);
IkReal x8263=(gconst134*x8257);
IkReal x8264=((1.0)*x8256);
IkReal x8265=((1.0)*cj1*cj2);
evalcond[0]=(((x8256*x8260))+(((-1.0)*r22*x8262))+(((-1.0)*gconst134*r20*x8264)));
evalcond[1]=((((-1.0)*r12*x8262))+((x8256*x8259))+cj0+(((-1.0)*gconst134*r10*x8264)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8264))+((x8256*x8261))+(((-1.0)*r02*x8262)));
evalcond[3]=(((cj2*sj1))+((r20*x8263))+((cj1*sj2))+(((-1.0)*x8260*x8262))+(((-1.0)*r22*x8264)));
evalcond[4]=((((-1.0)*cj0*x8265))+(((-1.0)*x8261*x8262))+(((-1.0)*r02*x8264))+((cj0*x8258))+((r00*x8263)));
evalcond[5]=((((-1.0)*r12*x8264))+(((-1.0)*sj0*x8265))+((sj0*x8258))+(((-1.0)*x8259*x8262))+((r10*x8263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8266=((1.0)*gconst134);
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8266))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8266)))),-1);
if(!x8268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8267.value)+(((1.5707963267949)*(x8268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8269=IKsin(j4);
IkReal x8270=IKcos(j4);
IkReal x8271=(sj1*sj2);
IkReal x8272=(gconst133*r11);
IkReal x8273=(gconst133*r21);
IkReal x8274=(gconst133*r01);
IkReal x8275=((1.0)*x8270);
IkReal x8276=(gconst134*x8270);
IkReal x8277=((1.0)*x8269);
IkReal x8278=((1.0)*cj1*cj2);
evalcond[0]=(((x8269*x8273))+(((-1.0)*r22*x8275))+(((-1.0)*gconst134*r20*x8277)));
evalcond[1]=((((-1.0)*gconst134*r10*x8277))+cj0+((x8269*x8272))+(((-1.0)*r12*x8275)));
evalcond[2]=((((-1.0)*sj0))+((x8269*x8274))+(((-1.0)*gconst134*r00*x8277))+(((-1.0)*r02*x8275)));
evalcond[3]=(((cj2*sj1))+((r20*x8276))+(((-1.0)*x8273*x8275))+((cj1*sj2))+(((-1.0)*r22*x8277)));
evalcond[4]=((((-1.0)*x8274*x8275))+(((-1.0)*cj0*x8278))+((cj0*x8271))+(((-1.0)*r02*x8277))+((r00*x8276)));
evalcond[5]=((((-1.0)*x8272*x8275))+(((-1.0)*sj0*x8278))+(((-1.0)*r12*x8277))+((sj0*x8271))+((r10*x8276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8279=((1.0)*gconst134);
CheckValue<IkReal> x8280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8279)))),-1);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8279))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8280.value)))+(x8281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8282=IKsin(j4);
IkReal x8283=IKcos(j4);
IkReal x8284=(sj1*sj2);
IkReal x8285=(gconst133*r11);
IkReal x8286=(gconst133*r21);
IkReal x8287=(gconst133*r01);
IkReal x8288=((1.0)*x8283);
IkReal x8289=(gconst134*x8283);
IkReal x8290=((1.0)*x8282);
IkReal x8291=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8290))+((x8282*x8286))+(((-1.0)*r22*x8288)));
evalcond[1]=((((-1.0)*r12*x8288))+cj0+((x8282*x8285))+(((-1.0)*gconst134*r10*x8290)));
evalcond[2]=((((-1.0)*r02*x8288))+(((-1.0)*sj0))+((x8282*x8287))+(((-1.0)*gconst134*r00*x8290)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8289))+(((-1.0)*x8286*x8288))+(((-1.0)*r22*x8290)));
evalcond[4]=(((r00*x8289))+(((-1.0)*x8287*x8288))+(((-1.0)*cj0*x8291))+((cj0*x8284))+(((-1.0)*r02*x8290)));
evalcond[5]=((((-1.0)*x8285*x8288))+(((-1.0)*r12*x8290))+((r10*x8289))+((sj0*x8284))+(((-1.0)*sj0*x8291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8292=((-1.0)*r21);
IkReal x8294 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8294)==0){
continue;
}
IkReal x8293=pow(x8294,-0.5);
CheckValue<IkReal> x8295 = IKatan2WithCheck(IkReal(x8292),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8295.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8295.value))));
IkReal gconst136=(x8292*x8293);
IkReal gconst137=((1.0)*r20*x8293);
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8296.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8297=((-1.0)*r21);
CheckValue<IkReal> x8300 = IKatan2WithCheck(IkReal(x8297),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8300.valid){
continue;
}
IkReal x8298=((1.0)*(x8300.value));
IkReal x8299=x8293;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8298)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8298)));
IkReal gconst136=(x8297*x8299);
IkReal gconst137=((1.0)*r20*x8299);
IkReal x8301=r22*r22;
IkReal x8302=((1.0)*x8301);
CheckValue<IkReal> x8306=IKPowWithIntegerCheck(((-1.0)+x8301),-1);
if(!x8306.valid){
continue;
}
IkReal x8303=x8306.value;
if((((1.0)+(((-1.0)*x8302)))) < -0.00001)
continue;
IkReal x8304=IKsqrt(((1.0)+(((-1.0)*x8302))));
IkReal x8305=(cj0*x8303*x8304);
j4eval[0]=((IKabs((x8305+(((-1.0)*x8302*x8305)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8307=((-1.0)*r21);
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal(x8307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
IkReal x8308=((1.0)*(x8310.value));
IkReal x8309=x8293;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8308)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8308)));
IkReal gconst136=(x8307*x8309);
IkReal gconst137=((1.0)*r20*x8309);
IkReal x8311=r22*r22;
IkReal x8312=((1.0)*x8311);
CheckValue<IkReal> x8316=IKPowWithIntegerCheck(((-1.0)+x8311),-1);
if(!x8316.valid){
continue;
}
IkReal x8313=x8316.value;
if((((1.0)+(((-1.0)*x8312)))) < -0.00001)
continue;
IkReal x8314=IKsqrt(((1.0)+(((-1.0)*x8312))));
IkReal x8315=(sj0*x8313*x8314);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x8312*x8315))+x8315))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8317=((-1.0)*r21);
CheckValue<IkReal> x8320 = IKatan2WithCheck(IkReal(x8317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8320.valid){
continue;
}
IkReal x8318=((1.0)*(x8320.value));
IkReal x8319=x8293;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8318)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8318)));
IkReal gconst136=(x8317*x8319);
IkReal gconst137=((1.0)*r20*x8319);
IkReal x8321=r22*r22;
IkReal x8322=(r12*sj0);
IkReal x8323=(cj0*r02);
CheckValue<IkReal> x8327=IKPowWithIntegerCheck(((-1.0)+x8321),-1);
if(!x8327.valid){
continue;
}
IkReal x8324=x8327.value;
if((((1.0)+(((-1.0)*x8321)))) < -0.00001)
continue;
IkReal x8325=IKsqrt(((1.0)+(((-1.0)*x8321))));
IkReal x8326=(r22*x8324*x8325);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8323*x8326))+((x8322*x8326)))))+(IKabs(((((-1.0)*x8323))+(((-1.0)*x8322))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8328=((1.0)*sj0);
IkReal x8329=((1.0)*cj0);
CheckValue<IkReal> x8330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8328))+(((-1.0)*r02*x8329)))),IkReal(((((-1.0)*gconst136*r01*x8329))+(((-1.0)*gconst136*r11*x8328))+((gconst137*r10*sj0))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8330.value)))+(x8331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j4);
IkReal x8333=IKcos(j4);
IkReal x8334=(gconst136*r01);
IkReal x8335=(gconst137*r10);
IkReal x8336=(sj1*sj2);
IkReal x8337=(gconst137*r20);
IkReal x8338=(gconst136*r11);
IkReal x8339=(gconst136*r21);
IkReal x8340=(gconst137*r00);
IkReal x8341=((1.0)*x8333);
IkReal x8342=((1.0)*cj1*cj2);
IkReal x8343=((1.0)*x8332);
evalcond[0]=(((x8332*x8339))+(((-1.0)*r22*x8341))+(((-1.0)*x8337*x8343)));
evalcond[1]=((((-1.0)*x8335*x8343))+cj0+((x8332*x8338))+(((-1.0)*r12*x8341)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8341))+((x8332*x8334))+(((-1.0)*x8340*x8343)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8339*x8341))+((x8333*x8337))+((cj1*sj2))+(((-1.0)*r22*x8343)));
evalcond[4]=((((-1.0)*x8334*x8341))+(((-1.0)*r02*x8343))+(((-1.0)*cj0*x8342))+((cj0*x8336))+((x8333*x8340)));
evalcond[5]=((((-1.0)*x8338*x8341))+((x8333*x8335))+(((-1.0)*r12*x8343))+((sj0*x8336))+(((-1.0)*sj0*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8344=((1.0)*gconst137);
CheckValue<IkReal> x8345 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst136*r21*sj0))+(((-1.0)*r20*sj0*x8344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8345.valid){
continue;
}
CheckValue<IkReal> x8346=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8344))+(((-1.0)*gconst136*r10)))),-1);
if(!x8346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8345.value)+(((1.5707963267949)*(x8346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8347=IKsin(j4);
IkReal x8348=IKcos(j4);
IkReal x8349=(gconst136*r01);
IkReal x8350=(gconst137*r10);
IkReal x8351=(sj1*sj2);
IkReal x8352=(gconst137*r20);
IkReal x8353=(gconst136*r11);
IkReal x8354=(gconst136*r21);
IkReal x8355=(gconst137*r00);
IkReal x8356=((1.0)*x8348);
IkReal x8357=((1.0)*cj1*cj2);
IkReal x8358=((1.0)*x8347);
evalcond[0]=((((-1.0)*r22*x8356))+(((-1.0)*x8352*x8358))+((x8347*x8354)));
evalcond[1]=(cj0+(((-1.0)*r12*x8356))+(((-1.0)*x8350*x8358))+((x8347*x8353)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8356))+(((-1.0)*x8355*x8358))+((x8347*x8349)));
evalcond[3]=((((-1.0)*x8354*x8356))+((x8348*x8352))+((cj2*sj1))+(((-1.0)*r22*x8358))+((cj1*sj2)));
evalcond[4]=(((x8348*x8355))+(((-1.0)*r02*x8358))+(((-1.0)*cj0*x8357))+((cj0*x8351))+(((-1.0)*x8349*x8356)));
evalcond[5]=(((x8348*x8350))+(((-1.0)*r12*x8358))+((sj0*x8351))+(((-1.0)*x8353*x8356))+(((-1.0)*sj0*x8357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8359=((1.0)*gconst137);
CheckValue<IkReal> x8360 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8359))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8360.valid){
continue;
}
CheckValue<IkReal> x8361=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8359))+(((-1.0)*gconst136*r00)))),-1);
if(!x8361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8360.value)+(((1.5707963267949)*(x8361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8362=IKsin(j4);
IkReal x8363=IKcos(j4);
IkReal x8364=(gconst136*r01);
IkReal x8365=(gconst137*r10);
IkReal x8366=(sj1*sj2);
IkReal x8367=(gconst137*r20);
IkReal x8368=(gconst136*r11);
IkReal x8369=(gconst136*r21);
IkReal x8370=(gconst137*r00);
IkReal x8371=((1.0)*x8363);
IkReal x8372=((1.0)*cj1*cj2);
IkReal x8373=((1.0)*x8362);
evalcond[0]=((((-1.0)*r22*x8371))+(((-1.0)*x8367*x8373))+((x8362*x8369)));
evalcond[1]=((((-1.0)*r12*x8371))+(((-1.0)*x8365*x8373))+cj0+((x8362*x8368)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8371))+(((-1.0)*x8370*x8373))+((x8362*x8364)));
evalcond[3]=(((x8363*x8367))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8373))+(((-1.0)*x8369*x8371)));
evalcond[4]=(((x8363*x8370))+(((-1.0)*x8364*x8371))+(((-1.0)*r02*x8373))+(((-1.0)*cj0*x8372))+((cj0*x8366)));
evalcond[5]=((((-1.0)*r12*x8373))+((x8363*x8365))+(((-1.0)*x8368*x8371))+((sj0*x8366))+(((-1.0)*sj0*x8372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8374=((-1.0)*r10);
IkReal x8376 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8376)==0){
continue;
}
IkReal x8375=pow(x8376,-0.5);
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8374),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8377.value));
IkReal gconst139=(r11*x8375);
IkReal gconst140=(x8374*x8375);
CheckValue<IkReal> x8378 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8378.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8378.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8379=((-1.0)*r10);
IkReal x8380=x8375;
CheckValue<IkReal> x8382 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8379),IKFAST_ATAN2_MAGTHRESH);
if(!x8382.valid){
continue;
}
IkReal x8381=((-1.0)*(x8382.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8381;
IkReal gconst138=x8381;
IkReal gconst139=(r11*x8380);
IkReal gconst140=(x8379*x8380);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8383=((1.0)*sj0);
IkReal x8384=((1.0)*gconst139);
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8384)))),-1);
if(!x8385.valid){
continue;
}
CheckValue<IkReal> x8386 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8383)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8383))+(((-1.0)*cj0*r01*x8384))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8385.value)))+(x8386.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8387=IKsin(j4);
IkReal x8388=IKcos(j4);
IkReal x8389=(gconst140*r00);
IkReal x8390=(sj1*sj2);
IkReal x8391=(gconst139*r11);
IkReal x8392=(gconst139*r01);
IkReal x8393=(gconst139*r21);
IkReal x8394=((1.0)*x8388);
IkReal x8395=((1.0)*x8387);
IkReal x8396=((1.0)*cj1*cj2);
IkReal x8397=(gconst140*x8388);
evalcond[0]=((((-1.0)*gconst140*r20*x8395))+((x8387*x8393))+(((-1.0)*r22*x8394)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8395))+((x8387*x8391))+(((-1.0)*r12*x8394)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8394))+((x8387*x8392))+(((-1.0)*x8389*x8395)));
evalcond[3]=(((r20*x8397))+((cj2*sj1))+(((-1.0)*x8393*x8394))+((cj1*sj2))+(((-1.0)*r22*x8395)));
evalcond[4]=((((-1.0)*r02*x8395))+(((-1.0)*cj0*x8396))+(((-1.0)*x8392*x8394))+((x8388*x8389))+((cj0*x8390)));
evalcond[5]=((((-1.0)*sj0*x8396))+((sj0*x8390))+(((-1.0)*x8391*x8394))+((r10*x8397))+(((-1.0)*r12*x8395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8398=((1.0)*gconst140);
CheckValue<IkReal> x8399 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8399.valid){
continue;
}
CheckValue<IkReal> x8400=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8398)))),-1);
if(!x8400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8399.value)+(((1.5707963267949)*(x8400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8401=IKsin(j4);
IkReal x8402=IKcos(j4);
IkReal x8403=(gconst140*r00);
IkReal x8404=(sj1*sj2);
IkReal x8405=(gconst139*r11);
IkReal x8406=(gconst139*r01);
IkReal x8407=(gconst139*r21);
IkReal x8408=((1.0)*x8402);
IkReal x8409=((1.0)*x8401);
IkReal x8410=((1.0)*cj1*cj2);
IkReal x8411=(gconst140*x8402);
evalcond[0]=(((x8401*x8407))+(((-1.0)*r22*x8408))+(((-1.0)*gconst140*r20*x8409)));
evalcond[1]=(((x8401*x8405))+cj0+(((-1.0)*gconst140*r10*x8409))+(((-1.0)*r12*x8408)));
evalcond[2]=(((x8401*x8406))+(((-1.0)*sj0))+(((-1.0)*r02*x8408))+(((-1.0)*x8403*x8409)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8407*x8408))+((cj1*sj2))+((r20*x8411))+(((-1.0)*r22*x8409)));
evalcond[4]=((((-1.0)*x8406*x8408))+(((-1.0)*r02*x8409))+(((-1.0)*cj0*x8410))+((cj0*x8404))+((x8402*x8403)));
evalcond[5]=(((sj0*x8404))+(((-1.0)*x8405*x8408))+((r10*x8411))+(((-1.0)*r12*x8409))+(((-1.0)*sj0*x8410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8412=((-1.0)*r11);
IkReal x8414 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8414)==0){
continue;
}
IkReal x8413=pow(x8414,-0.5);
CheckValue<IkReal> x8415 = IKatan2WithCheck(IkReal(x8412),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8415.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8415.value))));
IkReal gconst142=(x8412*x8413);
IkReal gconst143=((1.0)*r10*x8413);
CheckValue<IkReal> x8416 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8416.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8416.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8417=((-1.0)*r11);
CheckValue<IkReal> x8420 = IKatan2WithCheck(IkReal(x8417),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8420.valid){
continue;
}
IkReal x8418=((1.0)*(x8420.value));
IkReal x8419=x8413;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8418)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8418)));
IkReal gconst142=(x8417*x8419);
IkReal gconst143=((1.0)*r10*x8419);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8421=((-1.0)*r11);
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal(x8421),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
IkReal x8422=((1.0)*(x8424.value));
IkReal x8423=x8413;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8422)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8422)));
IkReal gconst142=(x8421*x8423);
IkReal gconst143=((1.0)*r10*x8423);
IkReal x8425=r12*r12;
IkReal x8426=((1.0)*sj0);
IkReal x8427=(cj0*r02);
IkReal x8428=x8413;
j4eval[0]=((IKabs(((((-1.0)*x8426*x8428))+((r12*x8427*x8428))+((sj0*x8425*x8428)))))+(IKabs(((((-1.0)*x8427))+(((-1.0)*r12*x8426))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8429=((-1.0)*r11);
CheckValue<IkReal> x8432 = IKatan2WithCheck(IkReal(x8429),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8432.valid){
continue;
}
IkReal x8430=((1.0)*(x8432.value));
IkReal x8431=x8413;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8430)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8430)));
IkReal gconst142=(x8429*x8431);
IkReal gconst143=((1.0)*r10*x8431);
IkReal x8433=r12*r12;
IkReal x8434=(cj1*r22*sj2);
IkReal x8435=(cj2*r22*sj1);
CheckValue<IkReal> x8439=IKPowWithIntegerCheck(((-1.0)+x8433),-1);
if(!x8439.valid){
continue;
}
IkReal x8436=x8439.value;
if((((1.0)+(((-1.0)*x8433)))) < -0.00001)
continue;
IkReal x8437=IKsqrt(((1.0)+(((-1.0)*x8433))));
IkReal x8438=((1.0)*r12*x8436*x8437);
j4eval[0]=((IKabs(((((-1.0)*x8435*x8438))+(((-1.0)*x8434*x8438)))))+(IKabs((x8435+x8434))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8440=(gconst142*r21);
IkReal x8441=(cj1*sj2);
IkReal x8442=(cj2*sj1);
IkReal x8443=(gconst143*r20);
CheckValue<IkReal> x8444=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8443*x8443)+(x8440*x8440)+(((-2.0)*x8440*x8443)))),-1);
if(!x8444.valid){
continue;
}
CheckValue<IkReal> x8445 = IKatan2WithCheck(IkReal((((r22*x8441))+((r22*x8442)))),IkReal(((((-1.0)*x8442*x8443))+(((-1.0)*x8441*x8443))+((x8440*x8441))+((x8440*x8442)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8444.value)))+(x8445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8446=IKsin(j4);
IkReal x8447=IKcos(j4);
IkReal x8448=(sj1*sj2);
IkReal x8449=(gconst143*r20);
IkReal x8450=((1.0)*x8447);
IkReal x8451=((1.0)*cj1*cj2);
IkReal x8452=((1.0)*x8446);
IkReal x8453=(gconst142*x8446);
IkReal x8454=(gconst143*x8447);
evalcond[0]=(((r21*x8453))+(((-1.0)*r22*x8450))+(((-1.0)*x8449*x8452)));
evalcond[1]=(((r11*x8453))+cj0+(((-1.0)*gconst143*r10*x8452))+(((-1.0)*r12*x8450)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8452))+(((-1.0)*r02*x8450))+((r01*x8453)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8447*x8449))+(((-1.0)*r22*x8452))+(((-1.0)*gconst142*r21*x8450)));
evalcond[4]=((((-1.0)*gconst142*r01*x8450))+(((-1.0)*cj0*x8451))+(((-1.0)*r02*x8452))+((r00*x8454))+((cj0*x8448)));
evalcond[5]=((((-1.0)*gconst142*r11*x8450))+(((-1.0)*sj0*x8451))+(((-1.0)*r12*x8452))+((sj0*x8448))+((r10*x8454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8455=((1.0)*sj0);
IkReal x8456=((1.0)*gconst142);
CheckValue<IkReal> x8457=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8456))+(((-1.0)*gconst143*r21)))),-1);
if(!x8457.valid){
continue;
}
CheckValue<IkReal> x8458 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8455))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst142*r11*x8455))+(((-1.0)*cj0*r01*x8456))+((cj0*gconst143*r00))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8457.value)))+(x8458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8459=IKsin(j4);
IkReal x8460=IKcos(j4);
IkReal x8461=(sj1*sj2);
IkReal x8462=(gconst143*r20);
IkReal x8463=((1.0)*x8460);
IkReal x8464=((1.0)*cj1*cj2);
IkReal x8465=((1.0)*x8459);
IkReal x8466=(gconst142*x8459);
IkReal x8467=(gconst143*x8460);
evalcond[0]=(((r21*x8466))+(((-1.0)*r22*x8463))+(((-1.0)*x8462*x8465)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8465))+((r11*x8466))+(((-1.0)*r12*x8463)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8466))+(((-1.0)*r02*x8463))+(((-1.0)*gconst143*r00*x8465)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8460*x8462))+(((-1.0)*r22*x8465))+(((-1.0)*gconst142*r21*x8463)));
evalcond[4]=((((-1.0)*r02*x8465))+((r00*x8467))+(((-1.0)*gconst142*r01*x8463))+((cj0*x8461))+(((-1.0)*cj0*x8464)));
evalcond[5]=((((-1.0)*sj0*x8464))+((r10*x8467))+(((-1.0)*r12*x8465))+(((-1.0)*gconst142*r11*x8463))+((sj0*x8461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8468=((1.0)*gconst143);
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8468))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
CheckValue<IkReal> x8470=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8468)))),-1);
if(!x8470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8469.value)+(((1.5707963267949)*(x8470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8471=IKsin(j4);
IkReal x8472=IKcos(j4);
IkReal x8473=(sj1*sj2);
IkReal x8474=(gconst143*r20);
IkReal x8475=((1.0)*x8472);
IkReal x8476=((1.0)*cj1*cj2);
IkReal x8477=((1.0)*x8471);
IkReal x8478=(gconst142*x8471);
IkReal x8479=(gconst143*x8472);
evalcond[0]=(((r21*x8478))+(((-1.0)*r22*x8475))+(((-1.0)*x8474*x8477)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8477))+((r11*x8478))+(((-1.0)*r12*x8475)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8478))+(((-1.0)*r02*x8475))+(((-1.0)*gconst143*r00*x8477)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8472*x8474))+(((-1.0)*r22*x8477))+(((-1.0)*gconst142*r21*x8475)));
evalcond[4]=(((r00*x8479))+(((-1.0)*r02*x8477))+(((-1.0)*gconst142*r01*x8475))+((cj0*x8473))+(((-1.0)*cj0*x8476)));
evalcond[5]=((((-1.0)*sj0*x8476))+((r10*x8479))+(((-1.0)*r12*x8477))+(((-1.0)*gconst142*r11*x8475))+((sj0*x8473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8480=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8480;
j4eval[1]=IKsign(x8480);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8481=((1.0)*cj5);
IkReal x8482=((((-1.0)*r01*x8481))+(((-1.0)*r00*sj5)));
j4eval[0]=x8482;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x8481))+((r21*sj5))))));
j4eval[2]=IKsign(x8482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8483=cj5*cj5;
IkReal x8484=r11*r11;
IkReal x8485=(r11*sj5);
IkReal x8486=(cj5*r10);
IkReal x8487=((r12*r12)+(((-2.0)*x8485*x8486))+x8484+((x8483*(r10*r10)))+(((-1.0)*x8483*x8484)));
j4eval[0]=x8487;
j4eval[1]=IKsign(x8487);
j4eval[2]=((IKabs((x8486+(((-1.0)*x8485)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8488=cj5*cj5;
IkReal x8489=r11*r11;
IkReal x8490=(cj5*r10);
IkReal x8491=(r11*sj5);
CheckValue<IkReal> x8492=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8489+(((-1.0)*x8488*x8489))+((x8488*(r10*r10)))+(((-2.0)*x8490*x8491)))),-1);
if(!x8492.valid){
continue;
}
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal((x8490+(((-1.0)*x8491)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8492.value)))+(x8493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8494=IKsin(j4);
IkReal x8495=IKcos(j4);
IkReal x8496=(cj5*r10);
IkReal x8497=(r01*sj5);
IkReal x8498=(cj5*r00);
IkReal x8499=(cj5*r20);
IkReal x8500=((1.0)*x8495);
IkReal x8501=((1.0)*x8494);
IkReal x8502=(sj5*x8494);
evalcond[0]=(((r21*x8502))+(((-1.0)*x8499*x8501))+(((-1.0)*r22*x8500)));
evalcond[1]=((((-1.0)*x8498*x8501))+((x8494*x8497))+(((-1.0)*r02*x8500)));
evalcond[2]=(((x8495*x8496))+(((-1.0)*r12*x8501))+(((-1.0)*r11*sj5*x8500)));
evalcond[3]=((1.0)+((r11*x8502))+(((-1.0)*r12*x8500))+(((-1.0)*x8496*x8501)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8501))+((x8495*x8499))+(((-1.0)*r21*sj5*x8500)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8497*x8500))+((x8495*x8498))+(((-1.0)*r02*x8501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8503=((1.0)*cj5);
CheckValue<IkReal> x8504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8503)))),-1);
if(!x8504.valid){
continue;
}
CheckValue<IkReal> x8505 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8504.value)))+(x8505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8506=IKsin(j4);
IkReal x8507=IKcos(j4);
IkReal x8508=(cj5*r10);
IkReal x8509=(r01*sj5);
IkReal x8510=(cj5*r00);
IkReal x8511=(cj5*r20);
IkReal x8512=((1.0)*x8507);
IkReal x8513=((1.0)*x8506);
IkReal x8514=(sj5*x8506);
evalcond[0]=(((r21*x8514))+(((-1.0)*r22*x8512))+(((-1.0)*x8511*x8513)));
evalcond[1]=(((x8506*x8509))+(((-1.0)*r02*x8512))+(((-1.0)*x8510*x8513)));
evalcond[2]=((((-1.0)*r12*x8513))+((x8507*x8508))+(((-1.0)*r11*sj5*x8512)));
evalcond[3]=((1.0)+((r11*x8514))+(((-1.0)*x8508*x8513))+(((-1.0)*r12*x8512)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8513))+((x8507*x8511))+(((-1.0)*r21*sj5*x8512)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8509*x8512))+(((-1.0)*r02*x8513))+((x8507*x8510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8515=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8515.valid){
continue;
}
CheckValue<IkReal> x8516 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8515.value)))+(x8516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8517=IKsin(j4);
IkReal x8518=IKcos(j4);
IkReal x8519=(cj5*r10);
IkReal x8520=(r01*sj5);
IkReal x8521=(cj5*r00);
IkReal x8522=(cj5*r20);
IkReal x8523=((1.0)*x8518);
IkReal x8524=((1.0)*x8517);
IkReal x8525=(sj5*x8517);
evalcond[0]=(((r21*x8525))+(((-1.0)*r22*x8523))+(((-1.0)*x8522*x8524)));
evalcond[1]=((((-1.0)*r02*x8523))+((x8517*x8520))+(((-1.0)*x8521*x8524)));
evalcond[2]=((((-1.0)*r11*sj5*x8523))+((x8518*x8519))+(((-1.0)*r12*x8524)));
evalcond[3]=((1.0)+(((-1.0)*x8519*x8524))+((r11*x8525))+(((-1.0)*r12*x8523)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8523))+((x8518*x8522))+((cj1*sj2))+(((-1.0)*r22*x8524)));
evalcond[5]=(((x8518*x8521))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8524))+(((-1.0)*x8520*x8523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8526=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8526;
j4eval[1]=IKsign(x8526);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8527=((1.0)*cj5);
IkReal x8528=((((-1.0)*r21*x8527))+(((-1.0)*r20*sj5)));
j4eval[0]=x8528;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8527))))));
j4eval[2]=IKsign(x8528);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8529=cj5*cj5;
IkReal x8530=r11*r11;
IkReal x8531=(cj5*r10);
IkReal x8532=(r11*sj5);
IkReal x8533=((((-1.0)*x8530))+(((-1.0)*x8529*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8529*x8530))+(((2.0)*x8531*x8532)));
j4eval[0]=x8533;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8532))+x8531))));
j4eval[2]=IKsign(x8533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8534=cj5*cj5;
IkReal x8535=r11*r11;
IkReal x8536=(cj5*r10);
IkReal x8537=(r11*sj5);
CheckValue<IkReal> x8538 = IKatan2WithCheck(IkReal(((((-1.0)*x8537))+x8536)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8538.valid){
continue;
}
CheckValue<IkReal> x8539=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8535))+(((-1.0)*x8534*(r10*r10)))+((x8534*x8535))+(((-1.0)*(r12*r12)))+(((2.0)*x8536*x8537)))),-1);
if(!x8539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8538.value)+(((1.5707963267949)*(x8539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8540=IKsin(j4);
IkReal x8541=IKcos(j4);
IkReal x8542=(cj5*r10);
IkReal x8543=(r01*sj5);
IkReal x8544=(cj5*r00);
IkReal x8545=(cj5*r20);
IkReal x8546=((1.0)*x8541);
IkReal x8547=((1.0)*x8540);
IkReal x8548=(sj5*x8540);
evalcond[0]=((((-1.0)*r22*x8546))+((r21*x8548))+(((-1.0)*x8545*x8547)));
evalcond[1]=((((-1.0)*r02*x8546))+((x8540*x8543))+(((-1.0)*x8544*x8547)));
evalcond[2]=((((-1.0)*r11*sj5*x8546))+(((-1.0)*r12*x8547))+((x8541*x8542)));
evalcond[3]=((-1.0)+(((-1.0)*x8542*x8547))+(((-1.0)*r12*x8546))+((r11*x8548)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8547))+((x8541*x8545))+(((-1.0)*r21*sj5*x8546)));
evalcond[5]=((((-1.0)*r02*x8547))+(((-1.0)*x8543*x8546))+(((-1.0)*sj1*sj2))+((x8541*x8544))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8549=((1.0)*cj5);
CheckValue<IkReal> x8550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8549))+(((-1.0)*r20*sj5)))),-1);
if(!x8550.valid){
continue;
}
CheckValue<IkReal> x8551 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8549))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8550.value)))+(x8551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8552=IKsin(j4);
IkReal x8553=IKcos(j4);
IkReal x8554=(cj5*r10);
IkReal x8555=(r01*sj5);
IkReal x8556=(cj5*r00);
IkReal x8557=(cj5*r20);
IkReal x8558=((1.0)*x8553);
IkReal x8559=((1.0)*x8552);
IkReal x8560=(sj5*x8552);
evalcond[0]=((((-1.0)*r22*x8558))+(((-1.0)*x8557*x8559))+((r21*x8560)));
evalcond[1]=((((-1.0)*x8556*x8559))+(((-1.0)*r02*x8558))+((x8552*x8555)));
evalcond[2]=((((-1.0)*r12*x8559))+(((-1.0)*r11*sj5*x8558))+((x8553*x8554)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8558))+((r11*x8560))+(((-1.0)*x8554*x8559)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8559))+(((-1.0)*r21*sj5*x8558))+((cj1*sj2))+((x8553*x8557)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x8555*x8558))+((cj1*cj2))+((x8553*x8556))+(((-1.0)*r02*x8559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8561.value)+(((1.5707963267949)*(x8562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8563=IKsin(j4);
IkReal x8564=IKcos(j4);
IkReal x8565=(cj5*r10);
IkReal x8566=(r01*sj5);
IkReal x8567=(cj5*r00);
IkReal x8568=(cj5*r20);
IkReal x8569=((1.0)*x8564);
IkReal x8570=((1.0)*x8563);
IkReal x8571=(sj5*x8563);
evalcond[0]=(((r21*x8571))+(((-1.0)*r22*x8569))+(((-1.0)*x8568*x8570)));
evalcond[1]=(((x8563*x8566))+(((-1.0)*x8567*x8570))+(((-1.0)*r02*x8569)));
evalcond[2]=(((x8564*x8565))+(((-1.0)*r12*x8570))+(((-1.0)*r11*sj5*x8569)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8569))+((r11*x8571))+(((-1.0)*x8565*x8570)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8569))+((x8564*x8568))+(((-1.0)*r22*x8570)));
evalcond[5]=((((-1.0)*x8566*x8569))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8570))+((x8564*x8567))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8572=((-1.0)*r00);
IkReal x8574 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8574)==0){
continue;
}
IkReal x8573=pow(x8574,-0.5);
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8572),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8575.value));
IkReal gconst145=(r01*x8573);
IkReal gconst146=(x8572*x8573);
CheckValue<IkReal> x8576 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8576.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8576.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8577=((-1.0)*r00);
IkReal x8578=x8573;
CheckValue<IkReal> x8580 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8577),IKFAST_ATAN2_MAGTHRESH);
if(!x8580.valid){
continue;
}
IkReal x8579=((-1.0)*(x8580.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8579;
IkReal gconst144=x8579;
IkReal gconst145=(r01*x8578);
IkReal gconst146=(x8577*x8578);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8581=((1.0)*sj0);
IkReal x8582=((1.0)*gconst145);
CheckValue<IkReal> x8583 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8581)))),IkReal(((((-1.0)*cj0*r01*x8582))+((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8581))+((gconst146*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8583.valid){
continue;
}
CheckValue<IkReal> x8584=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8582))+(((-1.0)*gconst146*r21)))),-1);
if(!x8584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8583.value)+(((1.5707963267949)*(x8584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8585=IKsin(j4);
IkReal x8586=IKcos(j4);
IkReal x8587=(gconst146*r10);
IkReal x8588=(sj1*sj2);
IkReal x8589=(gconst146*r20);
IkReal x8590=(gconst146*r00);
IkReal x8591=((1.0)*x8586);
IkReal x8592=((1.0)*x8585);
IkReal x8593=(gconst145*x8585);
IkReal x8594=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8589*x8592))+(((-1.0)*r22*x8591))+((r21*x8593)));
evalcond[1]=(cj0+(((-1.0)*r12*x8591))+((r11*x8593))+(((-1.0)*x8587*x8592)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8591))+((r01*x8593))+(((-1.0)*x8590*x8592)));
evalcond[3]=(((cj2*sj1))+((x8586*x8589))+(((-1.0)*r22*x8592))+(((-1.0)*gconst145*r21*x8591))+((cj1*sj2)));
evalcond[4]=((((-1.0)*gconst145*r01*x8591))+((x8586*x8590))+(((-1.0)*r02*x8592))+(((-1.0)*cj0*x8594))+((cj0*x8588)));
evalcond[5]=(((x8586*x8587))+(((-1.0)*sj0*x8594))+(((-1.0)*r12*x8592))+(((-1.0)*gconst145*r11*x8591))+((sj0*x8588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8595=((1.0)*gconst146);
CheckValue<IkReal> x8596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8595))+(((-1.0)*gconst145*r10)))),-1);
if(!x8596.valid){
continue;
}
CheckValue<IkReal> x8597 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8596.value)))+(x8597.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8598=IKsin(j4);
IkReal x8599=IKcos(j4);
IkReal x8600=(gconst146*r10);
IkReal x8601=(sj1*sj2);
IkReal x8602=(gconst146*r20);
IkReal x8603=(gconst146*r00);
IkReal x8604=((1.0)*x8599);
IkReal x8605=((1.0)*x8598);
IkReal x8606=(gconst145*x8598);
IkReal x8607=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8602*x8605))+(((-1.0)*r22*x8604))+((r21*x8606)));
evalcond[1]=(cj0+((r11*x8606))+(((-1.0)*r12*x8604))+(((-1.0)*x8600*x8605)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8604))+((r01*x8606))+(((-1.0)*x8603*x8605)));
evalcond[3]=(((cj2*sj1))+((x8599*x8602))+((cj1*sj2))+(((-1.0)*r22*x8605))+(((-1.0)*gconst145*r21*x8604)));
evalcond[4]=((((-1.0)*gconst145*r01*x8604))+(((-1.0)*cj0*x8607))+((x8599*x8603))+(((-1.0)*r02*x8605))+((cj0*x8601)));
evalcond[5]=(((x8599*x8600))+(((-1.0)*gconst145*r11*x8604))+(((-1.0)*r12*x8605))+(((-1.0)*sj0*x8607))+((sj0*x8601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8608=((-1.0)*r01);
IkReal x8610 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8610)==0){
continue;
}
IkReal x8609=pow(x8610,-0.5);
CheckValue<IkReal> x8611 = IKatan2WithCheck(IkReal(x8608),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8611.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8611.value))));
IkReal gconst148=(x8608*x8609);
IkReal gconst149=((1.0)*r00*x8609);
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8612.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8613=((-1.0)*r01);
CheckValue<IkReal> x8616 = IKatan2WithCheck(IkReal(x8613),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8616.valid){
continue;
}
IkReal x8614=((1.0)*(x8616.value));
IkReal x8615=x8609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8614)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8614)));
IkReal gconst148=(x8613*x8615);
IkReal gconst149=((1.0)*r00*x8615);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8617=((-1.0)*r01);
CheckValue<IkReal> x8620 = IKatan2WithCheck(IkReal(x8617),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8620.valid){
continue;
}
IkReal x8618=((1.0)*(x8620.value));
IkReal x8619=x8609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8618)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8618)));
IkReal gconst148=(x8617*x8619);
IkReal gconst149=((1.0)*r00*x8619);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8621=((-1.0)*r01);
CheckValue<IkReal> x8624 = IKatan2WithCheck(IkReal(x8621),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8624.valid){
continue;
}
IkReal x8622=((1.0)*(x8624.value));
IkReal x8623=x8609;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8622)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8622)));
IkReal gconst148=(x8621*x8623);
IkReal gconst149=((1.0)*r00*x8623);
IkReal x8625=r02*r02;
IkReal x8626=(r12*sj0);
IkReal x8627=((1.0)*cj0);
IkReal x8628=x8609;
j4eval[0]=((IKabs(((((-1.0)*x8627*x8628))+((r02*x8626*x8628))+((cj0*x8625*x8628)))))+(IKabs(((((-1.0)*x8626))+(((-1.0)*r02*x8627))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8629=((1.0)*sj0);
IkReal x8630=((1.0)*gconst148);
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8630)))),-1);
if(!x8631.valid){
continue;
}
CheckValue<IkReal> x8632 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8629))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8629))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8630))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8631.value)))+(x8632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8633=IKsin(j4);
IkReal x8634=IKcos(j4);
IkReal x8635=(gconst148*r11);
IkReal x8636=(sj1*sj2);
IkReal x8637=((1.0)*x8634);
IkReal x8638=(gconst149*x8634);
IkReal x8639=(gconst148*x8633);
IkReal x8640=((1.0)*cj1*cj2);
IkReal x8641=((1.0)*x8633);
evalcond[0]=((((-1.0)*gconst149*r20*x8641))+((r21*x8639))+(((-1.0)*r22*x8637)));
evalcond[1]=(cj0+(((-1.0)*r12*x8637))+((x8633*x8635))+(((-1.0)*gconst149*r10*x8641)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8641))+((r01*x8639))+(((-1.0)*r02*x8637)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8641))+(((-1.0)*gconst148*r21*x8637))+((r20*x8638)));
evalcond[4]=((((-1.0)*gconst148*r01*x8637))+((cj0*x8636))+(((-1.0)*cj0*x8640))+(((-1.0)*r02*x8641))+((r00*x8638)));
evalcond[5]=(((sj0*x8636))+(((-1.0)*sj0*x8640))+(((-1.0)*r12*x8641))+(((-1.0)*x8635*x8637))+((r10*x8638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8642=((1.0)*gconst149);
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8642))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
CheckValue<IkReal> x8644=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8642)))),-1);
if(!x8644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8643.value)+(((1.5707963267949)*(x8644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8645=IKsin(j4);
IkReal x8646=IKcos(j4);
IkReal x8647=(gconst148*r11);
IkReal x8648=(sj1*sj2);
IkReal x8649=((1.0)*x8646);
IkReal x8650=(gconst149*x8646);
IkReal x8651=(gconst148*x8645);
IkReal x8652=((1.0)*cj1*cj2);
IkReal x8653=((1.0)*x8645);
evalcond[0]=(((r21*x8651))+(((-1.0)*r22*x8649))+(((-1.0)*gconst149*r20*x8653)));
evalcond[1]=((((-1.0)*gconst149*r10*x8653))+cj0+(((-1.0)*r12*x8649))+((x8645*x8647)));
evalcond[2]=(((r01*x8651))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8653))+(((-1.0)*r02*x8649)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8653))+((r20*x8650))+(((-1.0)*gconst148*r21*x8649)));
evalcond[4]=(((r00*x8650))+((cj0*x8648))+(((-1.0)*cj0*x8652))+(((-1.0)*gconst148*r01*x8649))+(((-1.0)*r02*x8653)));
evalcond[5]=((((-1.0)*r12*x8653))+((r10*x8650))+(((-1.0)*sj0*x8652))+(((-1.0)*x8647*x8649))+((sj0*x8648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8654=((1.0)*gconst149);
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
CheckValue<IkReal> x8656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8654))+(((-1.0)*gconst148*r00)))),-1);
if(!x8656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8655.value)+(((1.5707963267949)*(x8656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8657=IKsin(j4);
IkReal x8658=IKcos(j4);
IkReal x8659=(gconst148*r11);
IkReal x8660=(sj1*sj2);
IkReal x8661=((1.0)*x8658);
IkReal x8662=(gconst149*x8658);
IkReal x8663=(gconst148*x8657);
IkReal x8664=((1.0)*cj1*cj2);
IkReal x8665=((1.0)*x8657);
evalcond[0]=((((-1.0)*r22*x8661))+(((-1.0)*gconst149*r20*x8665))+((r21*x8663)));
evalcond[1]=(cj0+(((-1.0)*r12*x8661))+((x8657*x8659))+(((-1.0)*gconst149*r10*x8665)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8661))+((r01*x8663))+(((-1.0)*gconst149*r00*x8665)));
evalcond[3]=(((cj2*sj1))+((r20*x8662))+((cj1*sj2))+(((-1.0)*r22*x8665))+(((-1.0)*gconst148*r21*x8661)));
evalcond[4]=(((cj0*x8660))+(((-1.0)*cj0*x8664))+(((-1.0)*r02*x8665))+((r00*x8662))+(((-1.0)*gconst148*r01*x8661)));
evalcond[5]=((((-1.0)*sj0*x8664))+((sj0*x8660))+(((-1.0)*r12*x8665))+(((-1.0)*x8659*x8661))+((r10*x8662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8666=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8666;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8666);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8667=((1.0)*cj5);
IkReal x8668=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8667)));
j4eval[0]=x8668;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8667))))));
j4eval[2]=IKsign(x8668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8669=cj5*cj5;
IkReal x8670=r01*r01;
IkReal x8671=(r01*sj5);
IkReal x8672=(cj5*r00);
IkReal x8673=(((x8669*x8670))+(((-1.0)*x8669*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x8671*x8672))+(((-1.0)*x8670)));
j4eval[0]=x8673;
j4eval[1]=IKsign(x8673);
j4eval[2]=((IKabs(r02))+(IKabs((x8672+(((-1.0)*x8671))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8674=cj5*cj5;
IkReal x8675=r01*r01;
IkReal x8676=(r01*sj5);
IkReal x8677=(cj5*r00);
CheckValue<IkReal> x8678 = IKatan2WithCheck(IkReal((x8677+(((-1.0)*x8676)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8678.valid){
continue;
}
CheckValue<IkReal> x8679=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8674*(r00*r00)))+((x8674*x8675))+(((-1.0)*x8675))+(((2.0)*x8676*x8677)))),-1);
if(!x8679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8678.value)+(((1.5707963267949)*(x8679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8680=IKsin(j4);
IkReal x8681=IKcos(j4);
IkReal x8682=(cj5*r10);
IkReal x8683=(r01*sj5);
IkReal x8684=(cj5*r00);
IkReal x8685=(cj5*r20);
IkReal x8686=((1.0)*x8681);
IkReal x8687=((1.0)*x8680);
IkReal x8688=(sj5*x8680);
evalcond[0]=((((-1.0)*r22*x8686))+(((-1.0)*x8685*x8687))+((r21*x8688)));
evalcond[1]=((((-1.0)*x8682*x8687))+(((-1.0)*r12*x8686))+((r11*x8688)));
evalcond[2]=((((-1.0)*x8683*x8686))+((x8681*x8684))+(((-1.0)*r02*x8687)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8686))+((x8680*x8683))+(((-1.0)*x8684*x8687)));
evalcond[4]=(((cj2*sj1))+((x8681*x8685))+((cj1*sj2))+(((-1.0)*r22*x8687))+(((-1.0)*r21*sj5*x8686)));
evalcond[5]=(((x8681*x8682))+(((-1.0)*r12*x8687))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8689=((1.0)*cj5);
CheckValue<IkReal> x8690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8689)))),-1);
if(!x8690.valid){
continue;
}
CheckValue<IkReal> x8691 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8690.value)))+(x8691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8692=IKsin(j4);
IkReal x8693=IKcos(j4);
IkReal x8694=(cj5*r10);
IkReal x8695=(r01*sj5);
IkReal x8696=(cj5*r00);
IkReal x8697=(cj5*r20);
IkReal x8698=((1.0)*x8693);
IkReal x8699=((1.0)*x8692);
IkReal x8700=(sj5*x8692);
evalcond[0]=(((r21*x8700))+(((-1.0)*x8697*x8699))+(((-1.0)*r22*x8698)));
evalcond[1]=(((r11*x8700))+(((-1.0)*r12*x8698))+(((-1.0)*x8694*x8699)));
evalcond[2]=((((-1.0)*r02*x8699))+(((-1.0)*x8695*x8698))+((x8693*x8696)));
evalcond[3]=((-1.0)+(((-1.0)*x8696*x8699))+(((-1.0)*r02*x8698))+((x8692*x8695)));
evalcond[4]=((((-1.0)*r21*sj5*x8698))+((cj2*sj1))+((cj1*sj2))+((x8693*x8697))+(((-1.0)*r22*x8699)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8699))+(((-1.0)*r11*sj5*x8698))+((x8693*x8694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8701=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8701.valid){
continue;
}
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8701.value)))+(x8702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8703=IKsin(j4);
IkReal x8704=IKcos(j4);
IkReal x8705=(cj5*r10);
IkReal x8706=(r01*sj5);
IkReal x8707=(cj5*r00);
IkReal x8708=(cj5*r20);
IkReal x8709=((1.0)*x8704);
IkReal x8710=((1.0)*x8703);
IkReal x8711=(sj5*x8703);
evalcond[0]=((((-1.0)*x8708*x8710))+(((-1.0)*r22*x8709))+((r21*x8711)));
evalcond[1]=((((-1.0)*x8705*x8710))+((r11*x8711))+(((-1.0)*r12*x8709)));
evalcond[2]=(((x8704*x8707))+(((-1.0)*r02*x8710))+(((-1.0)*x8706*x8709)));
evalcond[3]=((-1.0)+(((-1.0)*x8707*x8710))+(((-1.0)*r02*x8709))+((x8703*x8706)));
evalcond[4]=(((x8704*x8708))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8710))+(((-1.0)*r21*sj5*x8709)));
evalcond[5]=((((-1.0)*r11*sj5*x8709))+((x8704*x8705))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8712=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8712;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8712);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8713=((1.0)*cj5);
IkReal x8714=((((-1.0)*r21*x8713))+(((-1.0)*r20*sj5)));
j4eval[0]=x8714;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8713))))));
j4eval[2]=IKsign(x8714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8715=cj5*cj5;
IkReal x8716=r01*r01;
IkReal x8717=(cj5*r00);
IkReal x8718=(r01*sj5);
IkReal x8719=(((x8715*(r00*r00)))+x8716+(((-1.0)*x8715*x8716))+(r02*r02)+(((-2.0)*x8717*x8718)));
j4eval[0]=x8719;
j4eval[1]=((IKabs(r02))+(IKabs((x8717+(((-1.0)*x8718))))));
j4eval[2]=IKsign(x8719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8720=cj5*cj5;
IkReal x8721=r01*r01;
IkReal x8722=(r01*sj5);
IkReal x8723=(cj5*r00);
CheckValue<IkReal> x8724=IKPowWithIntegerCheck(IKsign((x8721+(((-2.0)*x8722*x8723))+((x8720*(r00*r00)))+(r02*r02)+(((-1.0)*x8720*x8721)))),-1);
if(!x8724.valid){
continue;
}
CheckValue<IkReal> x8725 = IKatan2WithCheck(IkReal((x8723+(((-1.0)*x8722)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8724.value)))+(x8725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8726=IKsin(j4);
IkReal x8727=IKcos(j4);
IkReal x8728=(cj5*r10);
IkReal x8729=(r01*sj5);
IkReal x8730=(cj5*r00);
IkReal x8731=(cj5*r20);
IkReal x8732=((1.0)*x8727);
IkReal x8733=((1.0)*x8726);
IkReal x8734=(sj5*x8726);
evalcond[0]=(((r21*x8734))+(((-1.0)*x8731*x8733))+(((-1.0)*r22*x8732)));
evalcond[1]=(((r11*x8734))+(((-1.0)*x8728*x8733))+(((-1.0)*r12*x8732)));
evalcond[2]=((((-1.0)*x8729*x8732))+((x8727*x8730))+(((-1.0)*r02*x8733)));
evalcond[3]=((1.0)+((x8726*x8729))+(((-1.0)*r02*x8732))+(((-1.0)*x8730*x8733)));
evalcond[4]=(((cj2*sj1))+((x8727*x8731))+((cj1*sj2))+(((-1.0)*r21*sj5*x8732))+(((-1.0)*r22*x8733)));
evalcond[5]=((((-1.0)*r11*sj5*x8732))+((x8727*x8728))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x8733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8735=((1.0)*cj5);
CheckValue<IkReal> x8736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8735))+(((-1.0)*r20*sj5)))),-1);
if(!x8736.valid){
continue;
}
CheckValue<IkReal> x8737 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8736.value)))+(x8737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8738=IKsin(j4);
IkReal x8739=IKcos(j4);
IkReal x8740=(cj5*r10);
IkReal x8741=(r01*sj5);
IkReal x8742=(cj5*r00);
IkReal x8743=(cj5*r20);
IkReal x8744=((1.0)*x8739);
IkReal x8745=((1.0)*x8738);
IkReal x8746=(sj5*x8738);
evalcond[0]=((((-1.0)*x8743*x8745))+(((-1.0)*r22*x8744))+((r21*x8746)));
evalcond[1]=((((-1.0)*x8740*x8745))+(((-1.0)*r12*x8744))+((r11*x8746)));
evalcond[2]=((((-1.0)*x8741*x8744))+((x8739*x8742))+(((-1.0)*r02*x8745)));
evalcond[3]=((1.0)+(((-1.0)*x8742*x8745))+((x8738*x8741))+(((-1.0)*r02*x8744)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8744))+((cj1*sj2))+(((-1.0)*r22*x8745))+((x8739*x8743)));
evalcond[5]=((((-1.0)*r12*x8745))+(((-1.0)*sj1*sj2))+((x8739*x8740))+(((-1.0)*r11*sj5*x8744))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8747 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8747.valid){
continue;
}
CheckValue<IkReal> x8748=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8747.value)+(((1.5707963267949)*(x8748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8749=IKsin(j4);
IkReal x8750=IKcos(j4);
IkReal x8751=(cj5*r10);
IkReal x8752=(r01*sj5);
IkReal x8753=(cj5*r00);
IkReal x8754=(cj5*r20);
IkReal x8755=((1.0)*x8750);
IkReal x8756=((1.0)*x8749);
IkReal x8757=(sj5*x8749);
evalcond[0]=((((-1.0)*x8754*x8756))+(((-1.0)*r22*x8755))+((r21*x8757)));
evalcond[1]=((((-1.0)*x8751*x8756))+((r11*x8757))+(((-1.0)*r12*x8755)));
evalcond[2]=(((x8750*x8753))+(((-1.0)*r02*x8756))+(((-1.0)*x8752*x8755)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8755))+(((-1.0)*x8753*x8756))+((x8749*x8752)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8756))+((x8750*x8754))+((cj1*sj2))+(((-1.0)*r21*sj5*x8755)));
evalcond[5]=(((x8750*x8751))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8755))+(((-1.0)*r12*x8756))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8758=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8758);
rxp1_1=(px*r21);
rxp1_2=(r11*x8758);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8759=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8759);
rxp1_1=(px*r21);
rxp1_2=(r11*x8759);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8760=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8760);
rxp1_1=(px*r21);
rxp1_2=(r11*x8760);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8763=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8763.valid){
continue;
}
IkReal x8761=x8763.value;
IkReal x8762=(sj0*x8761);
cj4array[0]=(((cj1*cj2*x8762))+(((-1.0)*sj1*sj2*x8762)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8764=IKsin(j4);
IkReal x8765=IKcos(j4);
IkReal x8766=(r21*sj5);
IkReal x8767=(cj5*r20);
IkReal x8768=((1.0)*x8764);
IkReal x8769=((1.0)*x8765);
evalcond[0]=((-1.0)*r02*x8764);
evalcond[1]=((((-1.0)*r02*x8769))+(((-1.0)*sj0)));
evalcond[2]=(((x8764*x8766))+(((-1.0)*x8767*x8768)));
evalcond[3]=(((r11*sj5*x8764))+(((-1.0)*cj5*r10*x8768)));
evalcond[4]=(((cj2*sj1))+((x8765*x8767))+(((-1.0)*x8766*x8769))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8772=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8772.valid){
continue;
}
IkReal x8770=x8772.value;
IkReal x8771=((1.0)*x8770);
cj4array[0]=((((-1.0)*cj2*sj1*x8771))+(((-1.0)*cj1*sj2*x8771)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8773=IKsin(j4);
IkReal x8774=IKcos(j4);
IkReal x8775=(r11*sj5);
IkReal x8776=((1.0)*sj0);
IkReal x8777=((1.0)*x8774);
IkReal x8778=((1.0)*cj5*x8773);
evalcond[0]=((-1.0)*r02*x8773);
evalcond[1]=((((-1.0)*r02*x8777))+(((-1.0)*x8776)));
evalcond[2]=((((-1.0)*r20*x8778))+((r21*sj5*x8773)));
evalcond[3]=(((x8773*x8775))+(((-1.0)*r10*x8778)));
evalcond[4]=((((-1.0)*x8775*x8777))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x8776))+((cj5*r10*x8774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8779=IKPowWithIntegerCheck(r02,-1);
if(!x8779.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8779.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8780=IKsin(j4);
IkReal x8781=IKcos(j4);
IkReal x8782=(cj5*x8781);
IkReal x8783=(sj5*x8780);
IkReal x8784=((1.0)*sj5*x8781);
IkReal x8785=((1.0)*cj5*x8780);
evalcond[0]=((-1.0)*r02*x8780);
evalcond[1]=(((r21*x8783))+(((-1.0)*r20*x8785)));
evalcond[2]=(((r11*x8783))+(((-1.0)*r10*x8785)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8784))+((r20*x8782)));
evalcond[4]=(((r10*x8782))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8786=((1.0)*sj0);
IkReal x8787=((1.0)*cj0);
CheckValue<IkReal> x8788 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8787))+(((-1.0)*r12*x8786)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8787))+(((-1.0)*r11*sj5*x8786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8788.valid){
continue;
}
CheckValue<IkReal> x8789=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8788.value)+(((1.5707963267949)*(x8789.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8790=IKsin(j4);
IkReal x8791=IKcos(j4);
IkReal x8792=(cj5*r10);
IkReal x8793=(sj1*sj2);
IkReal x8794=(r01*sj5);
IkReal x8795=(cj5*r00);
IkReal x8796=(cj5*r20);
IkReal x8797=((1.0)*x8791);
IkReal x8798=((1.0)*cj1*cj2);
IkReal x8799=((1.0)*x8790);
IkReal x8800=(sj5*x8790);
evalcond[0]=(((r21*x8800))+(((-1.0)*x8796*x8799))+(((-1.0)*r22*x8797)));
evalcond[1]=((((-1.0)*r12*x8797))+(((-1.0)*x8792*x8799))+cj0+((r11*x8800)));
evalcond[2]=((((-1.0)*x8795*x8799))+(((-1.0)*sj0))+(((-1.0)*r02*x8797))+((x8790*x8794)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8791*x8796))+(((-1.0)*r22*x8799))+(((-1.0)*r21*sj5*x8797)));
evalcond[4]=(((cj0*x8793))+(((-1.0)*x8794*x8797))+(((-1.0)*r02*x8799))+((x8791*x8795))+(((-1.0)*cj0*x8798)));
evalcond[5]=((((-1.0)*r12*x8799))+(((-1.0)*r11*sj5*x8797))+(((-1.0)*sj0*x8798))+((x8791*x8792))+((sj0*x8793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8801=((1.0)*cj5);
CheckValue<IkReal> x8802 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8801))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8802.valid){
continue;
}
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8801))+(((-1.0)*r10*sj5)))),-1);
if(!x8803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8802.value)+(((1.5707963267949)*(x8803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8804=IKsin(j4);
IkReal x8805=IKcos(j4);
IkReal x8806=(cj5*r10);
IkReal x8807=(sj1*sj2);
IkReal x8808=(r01*sj5);
IkReal x8809=(cj5*r00);
IkReal x8810=(cj5*r20);
IkReal x8811=((1.0)*x8805);
IkReal x8812=((1.0)*cj1*cj2);
IkReal x8813=((1.0)*x8804);
IkReal x8814=(sj5*x8804);
evalcond[0]=(((r21*x8814))+(((-1.0)*r22*x8811))+(((-1.0)*x8810*x8813)));
evalcond[1]=((((-1.0)*r12*x8811))+(((-1.0)*x8806*x8813))+cj0+((r11*x8814)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8811))+(((-1.0)*x8809*x8813))+((x8804*x8808)));
evalcond[3]=((((-1.0)*r22*x8813))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8811))+((x8805*x8810)));
evalcond[4]=(((cj0*x8807))+(((-1.0)*r02*x8813))+(((-1.0)*x8808*x8811))+((x8805*x8809))+(((-1.0)*cj0*x8812)));
evalcond[5]=((((-1.0)*r12*x8813))+(((-1.0)*sj0*x8812))+((sj0*x8807))+((x8805*x8806))+(((-1.0)*r11*sj5*x8811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8815=((1.0)*cj5);
CheckValue<IkReal> x8816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8815)))),-1);
if(!x8816.valid){
continue;
}
CheckValue<IkReal> x8817 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8815))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8816.value)))+(x8817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8818=IKsin(j4);
IkReal x8819=IKcos(j4);
IkReal x8820=(cj5*r10);
IkReal x8821=(sj1*sj2);
IkReal x8822=(r01*sj5);
IkReal x8823=(cj5*r00);
IkReal x8824=(cj5*r20);
IkReal x8825=((1.0)*x8819);
IkReal x8826=((1.0)*cj1*cj2);
IkReal x8827=((1.0)*x8818);
IkReal x8828=(sj5*x8818);
evalcond[0]=(((r21*x8828))+(((-1.0)*x8824*x8827))+(((-1.0)*r22*x8825)));
evalcond[1]=((((-1.0)*r12*x8825))+cj0+((r11*x8828))+(((-1.0)*x8820*x8827)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8825))+((x8818*x8822))+(((-1.0)*x8823*x8827)));
evalcond[3]=(((cj2*sj1))+((x8819*x8824))+((cj1*sj2))+(((-1.0)*r21*sj5*x8825))+(((-1.0)*r22*x8827)));
evalcond[4]=(((x8819*x8823))+(((-1.0)*r02*x8827))+(((-1.0)*x8822*x8825))+(((-1.0)*cj0*x8826))+((cj0*x8821)));
evalcond[5]=((((-1.0)*r11*sj5*x8825))+((x8819*x8820))+(((-1.0)*r12*x8827))+(((-1.0)*sj0*x8826))+((sj0*x8821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8829=cj1*cj1;
IkReal x8830=cj2*cj2;
IkReal x8831=(sj1*sj2);
IkReal x8832=(cj5*r01);
IkReal x8833=(cj5*r11);
IkReal x8834=((70808400000.0)*cj1);
IkReal x8835=(r10*sj5);
IkReal x8836=(cj1*cj2);
IkReal x8837=((572300000000.0)*py);
IkReal x8838=((572300000000.0)*px);
IkReal x8839=((612000000000.0)*cj1);
IkReal x8840=(r00*sj5);
IkReal x8841=((66215110000.0)*sj5*x8836);
CheckValue<IkReal> x8842=IKPowWithIntegerCheck(IKsign(((354403941481.0)+(((-327527290000.0)*x8830))+(((-700495200000.0)*cj1*x8831))+(((700495200000.0)*cj2*x8829))+(((-655054580000.0)*x8831*x8836))+(((655054580000.0)*x8829*x8830))+(((47016710000.0)*x8829)))),-1);
if(!x8842.valid){
continue;
}
CheckValue<IkReal> x8843 = IKatan2WithCheck(IkReal((((x8836*x8837))+(((66215110000.0)*x8835*x8836))+(((66215110000.0)*x8833*x8836))+(((-66215110000.0)*x8831*x8835))+(((-66215110000.0)*x8831*x8833))+((x8833*x8834))+(((-18967973700.0)*x8840))+(((-18967973700.0)*x8832))+(((-1.0)*x8831*x8837))+((py*x8839))+((x8834*x8835))+(((-163941000000.0)*px)))),IkReal((((px*x8839))+((x8836*x8838))+(((66215110000.0)*x8832*x8836))+(((163941000000.0)*py))+(((-66215110000.0)*x8831*x8840))+(((-66215110000.0)*x8831*x8832))+((x8832*x8834))+(((18967973700.0)*x8835))+(((18967973700.0)*x8833))+(((66215110000.0)*x8836*x8840))+(((-1.0)*x8831*x8838))+((x8834*x8840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8843.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8842.value)))+(x8843.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8844=IKcos(j0);
IkReal x8845=IKsin(j0);
IkReal x8846=((0.1157)*cj5);
IkReal x8847=((0.1157)*sj5);
IkReal x8848=((0.612)*cj1);
IkReal x8849=((0.5723)*cj1*cj2);
IkReal x8850=((0.5723)*sj1*sj2);
evalcond[0]=((((-1.0)*px))+(((-0.163941)*x8845))+((x8844*x8848))+((x8844*x8849))+(((-1.0)*r01*x8846))+(((-1.0)*r00*x8847))+(((-1.0)*x8844*x8850)));
evalcond[1]=((((0.163941)*x8844))+(((-1.0)*r10*x8847))+((x8845*x8849))+((x8845*x8848))+(((-1.0)*py))+(((-1.0)*r11*x8846))+(((-1.0)*x8845*x8850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8851=((1.0)*cj5);
IkReal x8852=((((-1.0)*r01*x8851))+(((-1.0)*r00*sj5)));
j4eval[0]=x8852;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8851)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8853=((1.0)*cj5);
IkReal x8854=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8853)));
j4eval[0]=x8854;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8853)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8855=((1.0)*sj0);
IkReal x8856=((1.0)*cj0);
IkReal x8857=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8857;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8855))+(((-1.0)*r01*sj5*x8856)))))+(IKabs(((((-1.0)*r12*x8855))+(((-1.0)*r02*x8856))))));
j4eval[2]=IKsign(x8857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8858=((-1.0)*r20);
IkReal x8860 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8860)==0){
continue;
}
IkReal x8859=pow(x8860,-0.5);
CheckValue<IkReal> x8861 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8858),IKFAST_ATAN2_MAGTHRESH);
if(!x8861.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8861.value));
IkReal gconst1=(r21*x8859);
IkReal gconst2=(x8858*x8859);
CheckValue<IkReal> x8862 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8862.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8862.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8863=((-1.0)*r20);
IkReal x8864=x8859;
CheckValue<IkReal> x8866 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8863),IKFAST_ATAN2_MAGTHRESH);
if(!x8866.valid){
continue;
}
IkReal x8865=((-1.0)*(x8866.value));
sj5=gconst1;
cj5=gconst2;
j5=x8865;
IkReal gconst0=x8865;
IkReal gconst1=(r21*x8864);
IkReal gconst2=(x8863*x8864);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8867=((-1.0)*r20);
IkReal x8868=x8859;
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8867),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
IkReal x8869=((-1.0)*(x8870.value));
sj5=gconst1;
cj5=gconst2;
j5=x8869;
IkReal gconst0=x8869;
IkReal gconst1=(r21*x8868);
IkReal gconst2=(x8867*x8868);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8871=((-1.0)*r20);
IkReal x8872=x8859;
CheckValue<IkReal> x8874 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8871),IKFAST_ATAN2_MAGTHRESH);
if(!x8874.valid){
continue;
}
IkReal x8873=((-1.0)*(x8874.value));
sj5=gconst1;
cj5=gconst2;
j5=x8873;
IkReal gconst0=x8873;
IkReal gconst1=(r21*x8872);
IkReal gconst2=(x8871*x8872);
IkReal x8875=r22*r22;
CheckValue<IkReal> x8879=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8875))),-1);
if(!x8879.valid){
continue;
}
IkReal x8876=x8879.value;
IkReal x8877=(sj3*x8876);
IkReal x8878=(((x8877*(r20*r20*r20*r20)))+((x8877*(r21*r21*r21*r21)))+((sj3*x8875))+(((2.0)*x8877*(r20*r20)*(r21*r21))));
j4eval[0]=x8878;
j4eval[1]=IKsign(x8878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8880=((-1.0)*r20);
IkReal x8881=x8859;
CheckValue<IkReal> x8883 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8880),IKFAST_ATAN2_MAGTHRESH);
if(!x8883.valid){
continue;
}
IkReal x8882=((-1.0)*(x8883.value));
sj5=gconst1;
cj5=gconst2;
j5=x8882;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8882;
IkReal gconst1=(r21*x8881);
IkReal gconst2=(x8880*x8881);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8884=((-1.0)*r20);
IkReal x8885=x8859;
CheckValue<IkReal> x8887 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8884),IKFAST_ATAN2_MAGTHRESH);
if(!x8887.valid){
continue;
}
IkReal x8886=((-1.0)*(x8887.value));
sj5=gconst1;
cj5=gconst2;
j5=x8886;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8886;
IkReal gconst1=(r21*x8885);
IkReal gconst2=(x8884*x8885);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8888=((-1.0)*r20);
IkReal x8889=x8859;
CheckValue<IkReal> x8891 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8888),IKFAST_ATAN2_MAGTHRESH);
if(!x8891.valid){
continue;
}
IkReal x8890=((-1.0)*(x8891.value));
sj5=gconst1;
cj5=gconst2;
j5=x8890;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8890;
IkReal gconst1=(r21*x8889);
IkReal gconst2=(x8888*x8889);
IkReal x8892=((1.0)*(r22*r22));
CheckValue<IkReal> x8896=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8892))),-1);
if(!x8896.valid){
continue;
}
IkReal x8893=x8896.value;
IkReal x8894=((1.0)*x8893);
IkReal x8895=((((-2.0)*x8893*(r20*r20)*(r21*r21)))+(((-1.0)*x8894*(r20*r20*r20*r20)))+(((-1.0)*x8894*(r21*r21*r21*r21)))+(((-1.0)*x8892)));
j4eval[0]=x8895;
j4eval[1]=IKsign(x8895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8897=((-1.0)*r20);
IkReal x8898=x8859;
CheckValue<IkReal> x8900 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8897),IKFAST_ATAN2_MAGTHRESH);
if(!x8900.valid){
continue;
}
IkReal x8899=((-1.0)*(x8900.value));
sj5=gconst1;
cj5=gconst2;
j5=x8899;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8899;
IkReal gconst1=(r21*x8898);
IkReal gconst2=(x8897*x8898);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8901=((-1.0)*r20);
IkReal x8902=x8859;
CheckValue<IkReal> x8904 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8901),IKFAST_ATAN2_MAGTHRESH);
if(!x8904.valid){
continue;
}
IkReal x8903=((-1.0)*(x8904.value));
sj5=gconst1;
cj5=gconst2;
j5=x8903;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8903;
IkReal gconst1=(r21*x8902);
IkReal gconst2=(x8901*x8902);
IkReal x8905=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8909=IKPowWithIntegerCheck(x8905,-1);
if(!x8909.valid){
continue;
}
IkReal x8906=x8909.value;
IkReal x8907=((1.0)*x8906);
IkReal x8908=((((-1.0)*x8907*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8906))+(((-1.0)*x8907*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x8908;
j4eval[1]=r12;
j4eval[2]=x8905;
j4eval[3]=IKsign(x8908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8910=((-1.0)*r20);
IkReal x8911=x8859;
CheckValue<IkReal> x8913 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8910),IKFAST_ATAN2_MAGTHRESH);
if(!x8913.valid){
continue;
}
IkReal x8912=((-1.0)*(x8913.value));
sj5=gconst1;
cj5=gconst2;
j5=x8912;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8912;
IkReal gconst1=(r21*x8911);
IkReal gconst2=(x8910*x8911);
IkReal x8914=r22*r22;
IkReal x8915=(cj1*r12*sj2);
IkReal x8916=(cj2*r12*sj1);
CheckValue<IkReal> x8920=IKPowWithIntegerCheck(((-1.0)+x8914),-1);
if(!x8920.valid){
continue;
}
IkReal x8917=x8920.value;
if((((1.0)+(((-1.0)*x8914)))) < -0.00001)
continue;
IkReal x8918=IKsqrt(((1.0)+(((-1.0)*x8914))));
IkReal x8919=(r22*x8917*x8918);
j4eval[0]=((IKabs((((x8915*x8919))+((x8916*x8919)))))+(IKabs(((((-1.0)*x8916))+(((-1.0)*x8915))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8921=(cj1*sj2);
IkReal x8922=(cj2*sj1);
IkReal x8923=((1.0)*r12);
IkReal x8924=(gconst1*r11);
IkReal x8925=((1.0)*gconst2*r10);
CheckValue<IkReal> x8926 = IKatan2WithCheck(IkReal(((((-1.0)*x8922*x8925))+((x8921*x8924))+((x8922*x8924))+(((-1.0)*x8921*x8925)))),IkReal(((((-1.0)*x8922*x8923))+(((-1.0)*x8921*x8923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8926.valid){
continue;
}
CheckValue<IkReal> x8927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8926.value)+(((1.5707963267949)*(x8927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8928=IKcos(j4);
IkReal x8929=IKsin(j4);
IkReal x8930=((1.0)*x8928);
IkReal x8931=(gconst1*x8928);
IkReal x8932=(gconst1*x8929);
IkReal x8933=((1.0)*gconst2*x8929);
evalcond[0]=((((-1.0)*gconst2*r10*x8930))+((r12*x8929))+((r11*x8931)));
evalcond[1]=((((-1.0)*r20*x8933))+(((-1.0)*r22*x8930))+((r21*x8932)));
evalcond[2]=((((-1.0)*r00*x8933))+((r01*x8932))+(((-1.0)*r02*x8930)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8930))+(((-1.0)*r10*x8933))+((r11*x8932)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x8929))+(((-1.0)*gconst2*r20*x8930))+((r21*x8931)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x8929))+(((-1.0)*gconst2*r00*x8930))+((r01*x8931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8934=(gconst2*r10);
IkReal x8935=(gconst1*r11);
CheckValue<IkReal> x8936 = IKatan2WithCheck(IkReal((x8935+(((-1.0)*x8934)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8936.valid){
continue;
}
CheckValue<IkReal> x8937=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8935*x8935)))+(((-1.0)*(x8934*x8934)))+(((-1.0)*(r12*r12)))+(((2.0)*x8934*x8935)))),-1);
if(!x8937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8936.value)+(((1.5707963267949)*(x8937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8938=IKcos(j4);
IkReal x8939=IKsin(j4);
IkReal x8940=((1.0)*x8938);
IkReal x8941=(gconst1*x8938);
IkReal x8942=(gconst1*x8939);
IkReal x8943=((1.0)*gconst2*x8939);
evalcond[0]=(((r12*x8939))+((r11*x8941))+(((-1.0)*gconst2*r10*x8940)));
evalcond[1]=((((-1.0)*r22*x8940))+((r21*x8942))+(((-1.0)*r20*x8943)));
evalcond[2]=((((-1.0)*r00*x8943))+((r01*x8942))+(((-1.0)*r02*x8940)));
evalcond[3]=((1.0)+((r11*x8942))+(((-1.0)*r12*x8940))+(((-1.0)*r10*x8943)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8940))+((r21*x8941))+((r22*x8939)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8941))+(((-1.0)*gconst2*r00*x8940))+((r02*x8939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8944=((1.0)*gconst2);
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
CheckValue<IkReal> x8946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8944))+(((-1.0)*gconst1*r00)))),-1);
if(!x8946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8945.value)+(((1.5707963267949)*(x8946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8947=IKcos(j4);
IkReal x8948=IKsin(j4);
IkReal x8949=((1.0)*x8947);
IkReal x8950=(gconst1*x8947);
IkReal x8951=(gconst1*x8948);
IkReal x8952=((1.0)*gconst2*x8948);
evalcond[0]=((((-1.0)*gconst2*r10*x8949))+((r12*x8948))+((r11*x8950)));
evalcond[1]=((((-1.0)*r22*x8949))+(((-1.0)*r20*x8952))+((r21*x8951)));
evalcond[2]=((((-1.0)*r00*x8952))+((r01*x8951))+(((-1.0)*r02*x8949)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8952))+(((-1.0)*r12*x8949))+((r11*x8951)));
evalcond[4]=(((cj2*sj1))+((r22*x8948))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8949))+((r21*x8950)));
evalcond[5]=(((r02*x8948))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8950))+(((-1.0)*gconst2*r00*x8949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8953=((-1.0)*r20);
IkReal x8954=x8859;
CheckValue<IkReal> x8956 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8953),IKFAST_ATAN2_MAGTHRESH);
if(!x8956.valid){
continue;
}
IkReal x8955=((-1.0)*(x8956.value));
sj5=gconst1;
cj5=gconst2;
j5=x8955;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8955;
IkReal gconst1=(r21*x8954);
IkReal gconst2=(x8953*x8954);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8957=((-1.0)*r20);
IkReal x8958=x8859;
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8957),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
IkReal x8959=((-1.0)*(x8960.value));
sj5=gconst1;
cj5=gconst2;
j5=x8959;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8959;
IkReal gconst1=(r21*x8958);
IkReal gconst2=(x8957*x8958);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8961=((-1.0)*r20);
IkReal x8962=x8859;
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8961),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
IkReal x8963=((-1.0)*(x8964.value));
sj5=gconst1;
cj5=gconst2;
j5=x8963;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8963;
IkReal gconst1=(r21*x8962);
IkReal gconst2=(x8961*x8962);
IkReal x8965=r22*r22;
IkReal x8966=(cj1*r12*sj2);
IkReal x8967=(cj2*r12*sj1);
CheckValue<IkReal> x8971=IKPowWithIntegerCheck(((-1.0)+x8965),-1);
if(!x8971.valid){
continue;
}
IkReal x8968=x8971.value;
if((((1.0)+(((-1.0)*x8965)))) < -0.00001)
continue;
IkReal x8969=IKsqrt(((1.0)+(((-1.0)*x8965))));
IkReal x8970=(r22*x8968*x8969);
j4eval[0]=((IKabs((((x8967*x8970))+((x8966*x8970)))))+(IKabs(((((-1.0)*x8967))+(((-1.0)*x8966))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8972=(cj1*sj2);
IkReal x8973=(cj2*sj1);
IkReal x8974=((1.0)*r12);
IkReal x8975=(gconst1*r11);
IkReal x8976=((1.0)*gconst2*r10);
CheckValue<IkReal> x8977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8977.valid){
continue;
}
CheckValue<IkReal> x8978 = IKatan2WithCheck(IkReal((((x8972*x8975))+((x8973*x8975))+(((-1.0)*x8973*x8976))+(((-1.0)*x8972*x8976)))),IkReal(((((-1.0)*x8973*x8974))+(((-1.0)*x8972*x8974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8977.value)))+(x8978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8979=IKcos(j4);
IkReal x8980=IKsin(j4);
IkReal x8981=((1.0)*x8979);
IkReal x8982=(gconst1*x8979);
IkReal x8983=(gconst1*x8980);
IkReal x8984=((1.0)*gconst2*x8980);
evalcond[0]=((((-1.0)*gconst2*r10*x8981))+((r11*x8982))+((r12*x8980)));
evalcond[1]=((((-1.0)*r20*x8984))+((r21*x8983))+(((-1.0)*r22*x8981)));
evalcond[2]=(((r01*x8983))+(((-1.0)*r02*x8981))+(((-1.0)*r00*x8984)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8981))+((r11*x8983))+(((-1.0)*r10*x8984)));
evalcond[4]=((((-1.0)*gconst2*r20*x8981))+((cj2*sj1))+((r22*x8980))+((cj1*sj2))+((r21*x8982)));
evalcond[5]=(((r01*x8982))+((r02*x8980))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8981))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8985=(gconst1*r11);
IkReal x8986=(gconst2*r10);
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(((((-1.0)*x8986))+x8985)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
CheckValue<IkReal> x8988=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8986*x8986)+(x8985*x8985)+(((-2.0)*x8985*x8986)))),-1);
if(!x8988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8987.value)+(((1.5707963267949)*(x8988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8989=IKcos(j4);
IkReal x8990=IKsin(j4);
IkReal x8991=((1.0)*x8989);
IkReal x8992=(gconst1*x8989);
IkReal x8993=(gconst1*x8990);
IkReal x8994=((1.0)*gconst2*x8990);
evalcond[0]=(((r11*x8992))+((r12*x8990))+(((-1.0)*gconst2*r10*x8991)));
evalcond[1]=(((r21*x8993))+(((-1.0)*r22*x8991))+(((-1.0)*r20*x8994)));
evalcond[2]=(((r01*x8993))+(((-1.0)*r02*x8991))+(((-1.0)*r00*x8994)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8991))+((r11*x8993))+(((-1.0)*r10*x8994)));
evalcond[4]=(((cj2*sj1))+((r21*x8992))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8991))+((r22*x8990)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x8992))+(((-1.0)*gconst2*r00*x8991))+((cj1*cj2))+((r02*x8990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8995 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8995.valid){
continue;
}
CheckValue<IkReal> x8996=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8995.value)+(((1.5707963267949)*(x8996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8997=IKcos(j4);
IkReal x8998=IKsin(j4);
IkReal x8999=((1.0)*x8997);
IkReal x9000=(gconst1*x8997);
IkReal x9001=(gconst1*x8998);
IkReal x9002=((1.0)*gconst2*x8998);
evalcond[0]=(((r12*x8998))+((r11*x9000))+(((-1.0)*gconst2*r10*x8999)));
evalcond[1]=(((r21*x9001))+(((-1.0)*r22*x8999))+(((-1.0)*r20*x9002)));
evalcond[2]=((((-1.0)*r00*x9002))+(((-1.0)*r02*x8999))+((r01*x9001)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8999))+(((-1.0)*r10*x9002))+((r11*x9001)));
evalcond[4]=(((cj2*sj1))+((r21*x9000))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8999))+((r22*x8998)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x8999))+((cj1*cj2))+((r02*x8998))+((r01*x9000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9003=((-1.0)*r20);
IkReal x9004=x8859;
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9003),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
IkReal x9005=((-1.0)*(x9006.value));
sj5=gconst1;
cj5=gconst2;
j5=x9005;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9005;
IkReal gconst1=(r21*x9004);
IkReal gconst2=(x9003*x9004);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9007=((-1.0)*r20);
IkReal x9008=x8859;
CheckValue<IkReal> x9010 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9007),IKFAST_ATAN2_MAGTHRESH);
if(!x9010.valid){
continue;
}
IkReal x9009=((-1.0)*(x9010.value));
sj5=gconst1;
cj5=gconst2;
j5=x9009;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9009;
IkReal gconst1=(r21*x9008);
IkReal gconst2=(x9007*x9008);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9011=((-1.0)*r20);
IkReal x9012=x8859;
CheckValue<IkReal> x9014 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9011),IKFAST_ATAN2_MAGTHRESH);
if(!x9014.valid){
continue;
}
IkReal x9013=((-1.0)*(x9014.value));
sj5=gconst1;
cj5=gconst2;
j5=x9013;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9013;
IkReal gconst1=(r21*x9012);
IkReal gconst2=(x9011*x9012);
IkReal x9015=r22*r22;
IkReal x9016=((1.0)*r02);
IkReal x9017=(cj1*sj2);
IkReal x9018=(cj2*sj1);
CheckValue<IkReal> x9022=IKPowWithIntegerCheck(((-1.0)+x9015),-1);
if(!x9022.valid){
continue;
}
IkReal x9019=x9022.value;
if((((1.0)+(((-1.0)*x9015)))) < -0.00001)
continue;
IkReal x9020=IKsqrt(((1.0)+(((-1.0)*x9015))));
IkReal x9021=(r02*r22*x9019*x9020);
j4eval[0]=((IKabs((((x9018*x9021))+((x9017*x9021)))))+(IKabs(((((-1.0)*x9016*x9018))+(((-1.0)*x9016*x9017))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9023=(cj1*sj2);
IkReal x9024=(gconst1*r01);
IkReal x9025=((1.0)*r02);
IkReal x9026=(cj2*sj1);
IkReal x9027=((1.0)*gconst2*r00);
CheckValue<IkReal> x9028=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9028.valid){
continue;
}
CheckValue<IkReal> x9029 = IKatan2WithCheck(IkReal((((x9024*x9026))+(((-1.0)*x9023*x9027))+(((-1.0)*x9026*x9027))+((x9023*x9024)))),IkReal(((((-1.0)*x9023*x9025))+(((-1.0)*x9025*x9026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9028.value)))+(x9029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9030=IKcos(j4);
IkReal x9031=IKsin(j4);
IkReal x9032=((1.0)*x9030);
IkReal x9033=(gconst1*x9030);
IkReal x9034=(gconst1*x9031);
IkReal x9035=((1.0)*gconst2*x9031);
evalcond[0]=(((r01*x9033))+((r02*x9031))+(((-1.0)*gconst2*r00*x9032)));
evalcond[1]=(((r21*x9034))+(((-1.0)*r20*x9035))+(((-1.0)*r22*x9032)));
evalcond[2]=((((-1.0)*r10*x9035))+(((-1.0)*r12*x9032))+((r11*x9034)));
evalcond[3]=((-1.0)+((r01*x9034))+(((-1.0)*r00*x9035))+(((-1.0)*r02*x9032)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9032))+((cj1*sj2))+((r22*x9031))+((r21*x9033)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9032))+((r11*x9033))+((r12*x9031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9036=(gconst1*r01);
IkReal x9037=(gconst2*r00);
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal((x9036+(((-1.0)*x9037)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
CheckValue<IkReal> x9039=IKPowWithIntegerCheck(IKsign(((x9037*x9037)+(((-2.0)*x9036*x9037))+(r02*r02)+(x9036*x9036))),-1);
if(!x9039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9038.value)+(((1.5707963267949)*(x9039.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9040=IKcos(j4);
IkReal x9041=IKsin(j4);
IkReal x9042=((1.0)*x9040);
IkReal x9043=(gconst1*x9040);
IkReal x9044=(gconst1*x9041);
IkReal x9045=((1.0)*gconst2*x9041);
evalcond[0]=(((r01*x9043))+(((-1.0)*gconst2*r00*x9042))+((r02*x9041)));
evalcond[1]=((((-1.0)*r22*x9042))+(((-1.0)*r20*x9045))+((r21*x9044)));
evalcond[2]=((((-1.0)*r10*x9045))+(((-1.0)*r12*x9042))+((r11*x9044)));
evalcond[3]=((-1.0)+((r01*x9044))+(((-1.0)*r00*x9045))+(((-1.0)*r02*x9042)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9041))+((r21*x9043))+(((-1.0)*gconst2*r20*x9042)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9041))+((r11*x9043))+(((-1.0)*gconst2*r10*x9042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9046=((1.0)*gconst2);
CheckValue<IkReal> x9047=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9046)))),-1);
if(!x9047.valid){
continue;
}
CheckValue<IkReal> x9048 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9046)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9047.value)))+(x9048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9049=IKcos(j4);
IkReal x9050=IKsin(j4);
IkReal x9051=((1.0)*x9049);
IkReal x9052=(gconst1*x9049);
IkReal x9053=(gconst1*x9050);
IkReal x9054=((1.0)*gconst2*x9050);
evalcond[0]=(((r01*x9052))+(((-1.0)*gconst2*r00*x9051))+((r02*x9050)));
evalcond[1]=((((-1.0)*r22*x9051))+(((-1.0)*r20*x9054))+((r21*x9053)));
evalcond[2]=((((-1.0)*r10*x9054))+(((-1.0)*r12*x9051))+((r11*x9053)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9051))+(((-1.0)*r00*x9054))+((r01*x9053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9050))+(((-1.0)*gconst2*r20*x9051))+((r21*x9052)));
evalcond[5]=((((-1.0)*gconst2*r10*x9051))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9050))+((r11*x9052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9055=((-1.0)*r20);
IkReal x9056=x8859;
CheckValue<IkReal> x9058 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9055),IKFAST_ATAN2_MAGTHRESH);
if(!x9058.valid){
continue;
}
IkReal x9057=((-1.0)*(x9058.value));
sj5=gconst1;
cj5=gconst2;
j5=x9057;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9057;
IkReal gconst1=(r21*x9056);
IkReal gconst2=(x9055*x9056);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9059=((-1.0)*r20);
IkReal x9060=x8859;
CheckValue<IkReal> x9062 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9059),IKFAST_ATAN2_MAGTHRESH);
if(!x9062.valid){
continue;
}
IkReal x9061=((-1.0)*(x9062.value));
sj5=gconst1;
cj5=gconst2;
j5=x9061;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9061;
IkReal gconst1=(r21*x9060);
IkReal gconst2=(x9059*x9060);
IkReal x9063=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9067=IKPowWithIntegerCheck(x9063,-1);
if(!x9067.valid){
continue;
}
IkReal x9064=x9067.value;
IkReal x9065=((1.0)*x9064);
IkReal x9066=((((-1.0)*x9065*(r01*r01)*(r21*r21)))+(((-1.0)*x9065*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9064)));
j4eval[0]=x9066;
j4eval[1]=IKsign(x9066);
j4eval[2]=r02;
j4eval[3]=x9063;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9068=((-1.0)*r20);
IkReal x9069=x8859;
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9068),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
IkReal x9070=((-1.0)*(x9071.value));
sj5=gconst1;
cj5=gconst2;
j5=x9070;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9070;
IkReal gconst1=(r21*x9069);
IkReal gconst2=(x9068*x9069);
IkReal x9072=r22*r22;
IkReal x9073=((1.0)*r02);
IkReal x9074=(cj1*sj2);
IkReal x9075=(cj2*sj1);
CheckValue<IkReal> x9079=IKPowWithIntegerCheck(((-1.0)+x9072),-1);
if(!x9079.valid){
continue;
}
IkReal x9076=x9079.value;
if((((1.0)+(((-1.0)*x9072)))) < -0.00001)
continue;
IkReal x9077=IKsqrt(((1.0)+(((-1.0)*x9072))));
IkReal x9078=(r02*r22*x9076*x9077);
j4eval[0]=((IKabs((((x9075*x9078))+((x9074*x9078)))))+(IKabs(((((-1.0)*x9073*x9075))+(((-1.0)*x9073*x9074))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9080=(cj1*sj2);
IkReal x9081=(gconst1*r01);
IkReal x9082=((1.0)*r02);
IkReal x9083=(cj2*sj1);
IkReal x9084=((1.0)*gconst2*r00);
CheckValue<IkReal> x9085=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9085.valid){
continue;
}
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal((((x9081*x9083))+((x9080*x9081))+(((-1.0)*x9083*x9084))+(((-1.0)*x9080*x9084)))),IkReal(((((-1.0)*x9082*x9083))+(((-1.0)*x9080*x9082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9085.value)))+(x9086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9087=IKcos(j4);
IkReal x9088=IKsin(j4);
IkReal x9089=((1.0)*x9087);
IkReal x9090=(gconst1*x9087);
IkReal x9091=(gconst1*x9088);
IkReal x9092=((1.0)*gconst2*x9088);
evalcond[0]=((((-1.0)*gconst2*r00*x9089))+((r01*x9090))+((r02*x9088)));
evalcond[1]=((((-1.0)*r20*x9092))+((r21*x9091))+(((-1.0)*r22*x9089)));
evalcond[2]=(((r11*x9091))+(((-1.0)*r10*x9092))+(((-1.0)*r12*x9089)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9092))+((r01*x9091))+(((-1.0)*r02*x9089)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9089))+((cj1*sj2))+((r21*x9090))+((r22*x9088)));
evalcond[5]=(((r11*x9090))+((r12*x9088))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9089))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9093=(gconst1*r01);
IkReal x9094=(gconst2*r00);
CheckValue<IkReal> x9095 = IKatan2WithCheck(IkReal((x9093+(((-1.0)*x9094)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9095.valid){
continue;
}
CheckValue<IkReal> x9096=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9093*x9093)))+(((-1.0)*(x9094*x9094)))+(((-1.0)*(r02*r02)))+(((2.0)*x9093*x9094)))),-1);
if(!x9096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9095.value)+(((1.5707963267949)*(x9096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9097=IKcos(j4);
IkReal x9098=IKsin(j4);
IkReal x9099=((1.0)*x9097);
IkReal x9100=(gconst1*x9097);
IkReal x9101=(gconst1*x9098);
IkReal x9102=((1.0)*gconst2*x9098);
evalcond[0]=((((-1.0)*gconst2*r00*x9099))+((r02*x9098))+((r01*x9100)));
evalcond[1]=(((r21*x9101))+(((-1.0)*r20*x9102))+(((-1.0)*r22*x9099)));
evalcond[2]=((((-1.0)*r10*x9102))+((r11*x9101))+(((-1.0)*r12*x9099)));
evalcond[3]=((1.0)+(((-1.0)*r00*x9102))+(((-1.0)*r02*x9099))+((r01*x9101)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9099))+((cj1*sj2))+((r21*x9100))+((r22*x9098)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x9098))+(((-1.0)*gconst2*r10*x9099))+((r11*x9100))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9103 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9103.valid){
continue;
}
CheckValue<IkReal> x9104=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9103.value)+(((1.5707963267949)*(x9104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9105=IKcos(j4);
IkReal x9106=IKsin(j4);
IkReal x9107=((1.0)*x9105);
IkReal x9108=(gconst1*x9105);
IkReal x9109=(gconst1*x9106);
IkReal x9110=((1.0)*gconst2*x9106);
evalcond[0]=(((r02*x9106))+(((-1.0)*gconst2*r00*x9107))+((r01*x9108)));
evalcond[1]=((((-1.0)*r22*x9107))+((r21*x9109))+(((-1.0)*r20*x9110)));
evalcond[2]=((((-1.0)*r10*x9110))+(((-1.0)*r12*x9107))+((r11*x9109)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9107))+((r01*x9109))+(((-1.0)*r00*x9110)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9106))+((r21*x9108))+(((-1.0)*gconst2*r20*x9107)));
evalcond[5]=((((-1.0)*gconst2*r10*x9107))+(((-1.0)*sj1*sj2))+((r12*x9106))+((r11*x9108))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9111=((-1.0)*r20);
IkReal x9112=((-1.0)*px);
CheckValue<IkReal> x9114 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9111),IKFAST_ATAN2_MAGTHRESH);
if(!x9114.valid){
continue;
}
IkReal x9113=((-1.0)*(x9114.value));
sj5=gconst1;
cj5=gconst2;
j5=x9113;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9112);
rxp1_1=(px*r21);
rxp1_2=(r11*x9112);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9113;
IkReal gconst1=r21;
IkReal gconst2=x9111;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9115=((-1.0)*r20);
IkReal x9116=((-1.0)*px);
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9115),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
IkReal x9117=((-1.0)*(x9118.value));
sj5=gconst1;
cj5=gconst2;
j5=x9117;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9116);
rxp1_1=(px*r21);
rxp1_2=(r11*x9116);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9117;
IkReal gconst1=r21;
IkReal gconst2=x9115;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9119=((-1.0)*r20);
IkReal x9120=((-1.0)*px);
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9119),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
IkReal x9121=((-1.0)*(x9122.value));
sj5=gconst1;
cj5=gconst2;
j5=x9121;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9120);
rxp1_1=(px*r21);
rxp1_2=(r11*x9120);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9121;
IkReal gconst1=r21;
IkReal gconst2=x9119;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9125=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9125.valid){
continue;
}
IkReal x9123=x9125.value;
IkReal x9124=(sj0*x9123);
cj4array[0]=(((cj1*cj2*x9124))+(((-1.0)*sj1*sj2*x9124)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9126=IKsin(j4);
IkReal x9127=IKcos(j4);
IkReal x9128=((1.0)*gconst2);
IkReal x9129=(gconst1*r21);
evalcond[0]=(r02*x9126);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9127)));
evalcond[2]=(((x9126*x9129))+(((-1.0)*r20*x9126*x9128)));
evalcond[3]=((((-1.0)*r10*x9126*x9128))+((gconst1*r11*x9126)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9127*x9128))+((x9127*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9132=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9132.valid){
continue;
}
IkReal x9130=x9132.value;
IkReal x9131=((1.0)*x9130);
cj4array[0]=((((-1.0)*cj2*sj1*x9131))+(((-1.0)*cj1*sj2*x9131)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9133=IKsin(j4);
IkReal x9134=IKcos(j4);
IkReal x9135=((1.0)*sj0);
IkReal x9136=(gconst1*x9133);
IkReal x9137=((1.0)*x9134);
IkReal x9138=((1.0)*gconst2*x9133);
evalcond[0]=(r02*x9133);
evalcond[1]=((((-1.0)*r02*x9137))+(((-1.0)*x9135)));
evalcond[2]=((((-1.0)*r20*x9138))+((r21*x9136)));
evalcond[3]=((((-1.0)*r10*x9138))+((r11*x9136)));
evalcond[4]=((((-1.0)*gconst2*r10*x9137))+((sj0*sj1*sj2))+((gconst1*r11*x9134))+(((-1.0)*cj1*cj2*x9135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9139=IKPowWithIntegerCheck(r02,-1);
if(!x9139.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9139.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9140=IKsin(j4);
IkReal x9141=IKcos(j4);
IkReal x9142=(gconst1*r21);
IkReal x9143=(gconst1*r11);
IkReal x9144=((1.0)*gconst2*r10);
IkReal x9145=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9140);
evalcond[1]=((((-1.0)*x9140*x9145))+((x9140*x9142)));
evalcond[2]=((((-1.0)*x9140*x9144))+((x9140*x9143)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9141*x9145))+((cj1*sj2))+((x9141*x9142)));
evalcond[4]=((((-1.0)*x9141*x9144))+(((-1.0)*cj1*cj2*sj0))+((x9141*x9143))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9146=(cj2*sj1);
IkReal x9147=(cj1*sj2);
IkReal x9148=(gconst1*r21);
IkReal x9149=((1.0)*gconst2*r20);
CheckValue<IkReal> x9150=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9149))+(((2.0)*gconst2*r20*x9148))+(((-1.0)*(r22*r22)))+(((-1.0)*(x9148*x9148))))),-1);
if(!x9150.valid){
continue;
}
CheckValue<IkReal> x9151 = IKatan2WithCheck(IkReal((((r22*x9146))+((r22*x9147)))),IkReal((((x9147*x9148))+(((-1.0)*x9146*x9149))+((x9146*x9148))+(((-1.0)*x9147*x9149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9150.value)))+(x9151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9152=IKsin(j4);
IkReal x9153=IKcos(j4);
IkReal x9154=(sj1*sj2);
IkReal x9155=(gconst2*r10);
IkReal x9156=(gconst2*r00);
IkReal x9157=(gconst2*r20);
IkReal x9158=((1.0)*x9153);
IkReal x9159=(gconst1*x9153);
IkReal x9160=((1.0)*cj1*cj2);
IkReal x9161=(gconst1*x9152);
IkReal x9162=((1.0)*x9152);
evalcond[0]=((((-1.0)*x9157*x9162))+(((-1.0)*r22*x9158))+((r21*x9161)));
evalcond[1]=(cj0+(((-1.0)*x9155*x9162))+(((-1.0)*r12*x9158))+((r11*x9161)));
evalcond[2]=((((-1.0)*r02*x9158))+((r01*x9161))+(((-1.0)*sj0))+(((-1.0)*x9156*x9162)));
evalcond[3]=(((cj2*sj1))+((r22*x9152))+((cj1*sj2))+((r21*x9159))+(((-1.0)*x9157*x9158)));
evalcond[4]=(((cj0*x9154))+((r02*x9152))+(((-1.0)*x9156*x9158))+((r01*x9159))+(((-1.0)*cj0*x9160)));
evalcond[5]=(((r11*x9159))+((sj0*x9154))+(((-1.0)*sj0*x9160))+((r12*x9152))+(((-1.0)*x9155*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9163=((1.0)*gconst2);
CheckValue<IkReal> x9164 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9163))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9164.valid){
continue;
}
CheckValue<IkReal> x9165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9163))+(((-1.0)*gconst1*r10)))),-1);
if(!x9165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9164.value)+(((1.5707963267949)*(x9165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9166=IKsin(j4);
IkReal x9167=IKcos(j4);
IkReal x9168=(sj1*sj2);
IkReal x9169=(gconst2*r10);
IkReal x9170=(gconst2*r00);
IkReal x9171=(gconst2*r20);
IkReal x9172=((1.0)*x9167);
IkReal x9173=(gconst1*x9167);
IkReal x9174=((1.0)*cj1*cj2);
IkReal x9175=(gconst1*x9166);
IkReal x9176=((1.0)*x9166);
evalcond[0]=(((r21*x9175))+(((-1.0)*r22*x9172))+(((-1.0)*x9171*x9176)));
evalcond[1]=((((-1.0)*x9169*x9176))+cj0+(((-1.0)*r12*x9172))+((r11*x9175)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9175))+(((-1.0)*x9170*x9176))+(((-1.0)*r02*x9172)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x9166))+((r21*x9173))+(((-1.0)*x9171*x9172)));
evalcond[4]=((((-1.0)*cj0*x9174))+((r02*x9166))+((r01*x9173))+(((-1.0)*x9170*x9172))+((cj0*x9168)));
evalcond[5]=((((-1.0)*x9169*x9172))+((sj0*x9168))+((r12*x9166))+((r11*x9173))+(((-1.0)*sj0*x9174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9177=((1.0)*gconst2);
CheckValue<IkReal> x9178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9177))+(((-1.0)*gconst1*r00)))),-1);
if(!x9178.valid){
continue;
}
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9178.value)))+(x9179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9180=IKsin(j4);
IkReal x9181=IKcos(j4);
IkReal x9182=(sj1*sj2);
IkReal x9183=(gconst2*r10);
IkReal x9184=(gconst2*r00);
IkReal x9185=(gconst2*r20);
IkReal x9186=((1.0)*x9181);
IkReal x9187=(gconst1*x9181);
IkReal x9188=((1.0)*cj1*cj2);
IkReal x9189=(gconst1*x9180);
IkReal x9190=((1.0)*x9180);
evalcond[0]=((((-1.0)*x9185*x9190))+(((-1.0)*r22*x9186))+((r21*x9189)));
evalcond[1]=((((-1.0)*r12*x9186))+((r11*x9189))+cj0+(((-1.0)*x9183*x9190)));
evalcond[2]=((((-1.0)*x9184*x9190))+(((-1.0)*sj0))+(((-1.0)*r02*x9186))+((r01*x9189)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9185*x9186))+((cj1*sj2))+((r22*x9180))+((r21*x9187)));
evalcond[4]=(((r02*x9180))+(((-1.0)*x9184*x9186))+(((-1.0)*cj0*x9188))+((cj0*x9182))+((r01*x9187)));
evalcond[5]=((((-1.0)*x9183*x9186))+((r11*x9187))+((r12*x9180))+((sj0*x9182))+(((-1.0)*sj0*x9188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9191=((-1.0)*r20);
IkReal x9192=x8859;
CheckValue<IkReal> x9194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9191),IKFAST_ATAN2_MAGTHRESH);
if(!x9194.valid){
continue;
}
IkReal x9193=((-1.0)*(x9194.value));
sj5=gconst1;
cj5=gconst2;
j5=x9193;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9193;
IkReal gconst1=(r21*x9192);
IkReal gconst2=(x9191*x9192);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9195=((-1.0)*r20);
IkReal x9196=x8859;
CheckValue<IkReal> x9198 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9195),IKFAST_ATAN2_MAGTHRESH);
if(!x9198.valid){
continue;
}
IkReal x9197=((-1.0)*(x9198.value));
sj5=gconst1;
cj5=gconst2;
j5=x9197;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9197;
IkReal gconst1=(r21*x9196);
IkReal gconst2=(x9195*x9196);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9199=((-1.0)*r20);
IkReal x9200=x8859;
CheckValue<IkReal> x9202 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9199),IKFAST_ATAN2_MAGTHRESH);
if(!x9202.valid){
continue;
}
IkReal x9201=((-1.0)*(x9202.value));
sj5=gconst1;
cj5=gconst2;
j5=x9201;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9201;
IkReal gconst1=(r21*x9200);
IkReal gconst2=(x9199*x9200);
IkReal x9203=r22*r22;
CheckValue<IkReal> x9206=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9203))),-1);
if(!x9206.valid){
continue;
}
IkReal x9204=x9206.value;
IkReal x9205=(((x9204*(r20*r20*r20*r20)))+(((2.0)*x9204*(r20*r20)*(r21*r21)))+x9203+((x9204*(r21*r21*r21*r21))));
j4eval[0]=x9205;
j4eval[1]=IKsign(x9205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9207=((-1.0)*r20);
IkReal x9208=x8859;
CheckValue<IkReal> x9210 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9207),IKFAST_ATAN2_MAGTHRESH);
if(!x9210.valid){
continue;
}
IkReal x9209=((-1.0)*(x9210.value));
sj5=gconst1;
cj5=gconst2;
j5=x9209;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9209;
IkReal gconst1=(r21*x9208);
IkReal gconst2=(x9207*x9208);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9211=((-1.0)*r20);
IkReal x9212=x8859;
CheckValue<IkReal> x9214 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9211),IKFAST_ATAN2_MAGTHRESH);
if(!x9214.valid){
continue;
}
IkReal x9213=((-1.0)*(x9214.value));
sj5=gconst1;
cj5=gconst2;
j5=x9213;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9213;
IkReal gconst1=(r21*x9212);
IkReal gconst2=(x9211*x9212);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9215=((-1.0)*r20);
IkReal x9216=x8859;
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9215),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
IkReal x9217=((-1.0)*(x9218.value));
sj5=gconst1;
cj5=gconst2;
j5=x9217;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9217;
IkReal gconst1=(r21*x9216);
IkReal gconst2=(x9215*x9216);
IkReal x9219=r22*r22;
IkReal x9220=(cj1*r12*sj2);
IkReal x9221=(cj2*r12*sj1);
CheckValue<IkReal> x9225=IKPowWithIntegerCheck(((-1.0)+x9219),-1);
if(!x9225.valid){
continue;
}
IkReal x9222=x9225.value;
if((((1.0)+(((-1.0)*x9219)))) < -0.00001)
continue;
IkReal x9223=IKsqrt(((1.0)+(((-1.0)*x9219))));
IkReal x9224=((1.0)*r22*x9222*x9223);
j4eval[0]=((IKabs((x9221+x9220)))+(IKabs(((((-1.0)*x9221*x9224))+(((-1.0)*x9220*x9224))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9226=((1.0)*gconst1);
IkReal x9227=(cj2*sj1);
IkReal x9228=(gconst2*r10);
IkReal x9229=(cj1*sj2);
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9226)))),-1);
if(!x9230.valid){
continue;
}
CheckValue<IkReal> x9231 = IKatan2WithCheck(IkReal((((x9228*x9229))+(((-1.0)*r11*x9226*x9227))+(((-1.0)*r11*x9226*x9229))+((x9227*x9228)))),IkReal((((r12*x9229))+((r12*x9227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9230.value)))+(x9231.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9232=IKsin(j4);
IkReal x9233=IKcos(j4);
IkReal x9234=((1.0)*x9233);
IkReal x9235=(gconst2*x9233);
IkReal x9236=(gconst1*x9232);
IkReal x9237=((1.0)*x9232);
evalcond[0]=(((r21*x9236))+(((-1.0)*gconst2*r20*x9237))+(((-1.0)*r22*x9234)));
evalcond[1]=((((-1.0)*gconst2*r00*x9237))+((r01*x9236))+(((-1.0)*r02*x9234)));
evalcond[2]=((((-1.0)*r12*x9237))+((r10*x9235))+(((-1.0)*gconst1*r11*x9234)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9234))+(((-1.0)*gconst2*r10*x9237))+((r11*x9236)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9234))+((r20*x9235))+(((-1.0)*r22*x9237)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9234))+((r00*x9235))+(((-1.0)*r02*x9237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9238=(gconst1*r11);
IkReal x9239=(gconst2*r10);
CheckValue<IkReal> x9240=IKPowWithIntegerCheck(IKsign(((x9239*x9239)+(r12*r12)+(((-2.0)*x9238*x9239))+(x9238*x9238))),-1);
if(!x9240.valid){
continue;
}
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal((x9239+(((-1.0)*x9238)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9240.value)))+(x9241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9242=IKsin(j4);
IkReal x9243=IKcos(j4);
IkReal x9244=((1.0)*x9243);
IkReal x9245=(gconst2*x9243);
IkReal x9246=(gconst1*x9242);
IkReal x9247=((1.0)*x9242);
evalcond[0]=((((-1.0)*r22*x9244))+((r21*x9246))+(((-1.0)*gconst2*r20*x9247)));
evalcond[1]=(((r01*x9246))+(((-1.0)*r02*x9244))+(((-1.0)*gconst2*r00*x9247)));
evalcond[2]=((((-1.0)*gconst1*r11*x9244))+(((-1.0)*r12*x9247))+((r10*x9245)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9247))+(((-1.0)*r12*x9244))+((r11*x9246)));
evalcond[4]=((((-1.0)*r22*x9247))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9244))+((r20*x9245)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9244))+((r00*x9245))+(((-1.0)*r02*x9247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9248=((1.0)*gconst2);
CheckValue<IkReal> x9249=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9248)))),-1);
if(!x9249.valid){
continue;
}
CheckValue<IkReal> x9250 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9248))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9249.value)))+(x9250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9251=IKsin(j4);
IkReal x9252=IKcos(j4);
IkReal x9253=((1.0)*x9252);
IkReal x9254=(gconst2*x9252);
IkReal x9255=(gconst1*x9251);
IkReal x9256=((1.0)*x9251);
evalcond[0]=((((-1.0)*r22*x9253))+((r21*x9255))+(((-1.0)*gconst2*r20*x9256)));
evalcond[1]=(((r01*x9255))+(((-1.0)*r02*x9253))+(((-1.0)*gconst2*r00*x9256)));
evalcond[2]=((((-1.0)*r12*x9256))+((r10*x9254))+(((-1.0)*gconst1*r11*x9253)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9253))+(((-1.0)*gconst2*r10*x9256))+((r11*x9255)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9256))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9253))+((r20*x9254)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x9254))+(((-1.0)*gconst1*r01*x9253))+(((-1.0)*r02*x9256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9257=((-1.0)*r20);
IkReal x9258=x8859;
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9257),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
IkReal x9259=((-1.0)*(x9260.value));
sj5=gconst1;
cj5=gconst2;
j5=x9259;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9259;
IkReal gconst1=(r21*x9258);
IkReal gconst2=(x9257*x9258);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9261=((-1.0)*r20);
IkReal x9262=x8859;
CheckValue<IkReal> x9264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9261),IKFAST_ATAN2_MAGTHRESH);
if(!x9264.valid){
continue;
}
IkReal x9263=((-1.0)*(x9264.value));
sj5=gconst1;
cj5=gconst2;
j5=x9263;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9263;
IkReal gconst1=(r21*x9262);
IkReal gconst2=(x9261*x9262);
IkReal x9265=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9269=IKPowWithIntegerCheck(x9265,-1);
if(!x9269.valid){
continue;
}
IkReal x9266=x9269.value;
IkReal x9267=((1.0)*x9266);
IkReal x9268=((((-2.0)*r10*r11*r20*r21*x9266))+(((-1.0)*x9267*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x9267*(r10*r10)*(r20*r20))));
j4eval[0]=x9268;
j4eval[1]=r12;
j4eval[2]=x9265;
j4eval[3]=IKsign(x9268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9270=((-1.0)*r20);
IkReal x9271=x8859;
CheckValue<IkReal> x9273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9270),IKFAST_ATAN2_MAGTHRESH);
if(!x9273.valid){
continue;
}
IkReal x9272=((-1.0)*(x9273.value));
sj5=gconst1;
cj5=gconst2;
j5=x9272;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9272;
IkReal gconst1=(r21*x9271);
IkReal gconst2=(x9270*x9271);
IkReal x9274=r22*r22;
IkReal x9275=(cj1*r12*sj2);
IkReal x9276=(cj2*r12*sj1);
CheckValue<IkReal> x9280=IKPowWithIntegerCheck(((-1.0)+x9274),-1);
if(!x9280.valid){
continue;
}
IkReal x9277=x9280.value;
if((((1.0)+(((-1.0)*x9274)))) < -0.00001)
continue;
IkReal x9278=IKsqrt(((1.0)+(((-1.0)*x9274))));
IkReal x9279=((1.0)*r22*x9277*x9278);
j4eval[0]=((IKabs((x9275+x9276)))+(IKabs(((((-1.0)*x9276*x9279))+(((-1.0)*x9275*x9279))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9281=((1.0)*gconst1);
IkReal x9282=(cj2*sj1);
IkReal x9283=(gconst2*r10);
IkReal x9284=(cj1*sj2);
CheckValue<IkReal> x9285 = IKatan2WithCheck(IkReal((((x9282*x9283))+((x9283*x9284))+(((-1.0)*r11*x9281*x9282))+(((-1.0)*r11*x9281*x9284)))),IkReal((((r12*x9282))+((r12*x9284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9285.valid){
continue;
}
CheckValue<IkReal> x9286=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9281)))),-1);
if(!x9286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9285.value)+(((1.5707963267949)*(x9286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9287=IKsin(j4);
IkReal x9288=IKcos(j4);
IkReal x9289=((1.0)*x9288);
IkReal x9290=(gconst2*x9288);
IkReal x9291=(gconst1*x9287);
IkReal x9292=((1.0)*x9287);
evalcond[0]=((((-1.0)*gconst2*r20*x9292))+(((-1.0)*r22*x9289))+((r21*x9291)));
evalcond[1]=((((-1.0)*gconst2*r00*x9292))+((r01*x9291))+(((-1.0)*r02*x9289)));
evalcond[2]=(((r10*x9290))+(((-1.0)*gconst1*r11*x9289))+(((-1.0)*r12*x9292)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9289))+((r11*x9291))+(((-1.0)*gconst2*r10*x9292)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9289))+((cj1*sj2))+(((-1.0)*r22*x9292))+((r20*x9290)));
evalcond[5]=((((-1.0)*gconst1*r01*x9289))+((r00*x9290))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x9292))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9293=(gconst1*r11);
IkReal x9294=(gconst2*r10);
CheckValue<IkReal> x9295=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9293*x9293)))+(((2.0)*x9293*x9294))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9294*x9294))))),-1);
if(!x9295.valid){
continue;
}
CheckValue<IkReal> x9296 = IKatan2WithCheck(IkReal((x9294+(((-1.0)*x9293)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9295.value)))+(x9296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9297=IKsin(j4);
IkReal x9298=IKcos(j4);
IkReal x9299=((1.0)*x9298);
IkReal x9300=(gconst2*x9298);
IkReal x9301=(gconst1*x9297);
IkReal x9302=((1.0)*x9297);
evalcond[0]=(((r21*x9301))+(((-1.0)*r22*x9299))+(((-1.0)*gconst2*r20*x9302)));
evalcond[1]=((((-1.0)*gconst2*r00*x9302))+((r01*x9301))+(((-1.0)*r02*x9299)));
evalcond[2]=((((-1.0)*gconst1*r11*x9299))+((r10*x9300))+(((-1.0)*r12*x9302)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9302))+((r11*x9301))+(((-1.0)*r12*x9299)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9299))+((cj1*sj2))+((r20*x9300))+(((-1.0)*r22*x9302)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9299))+(((-1.0)*r02*x9302))+((r00*x9300))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9303.value)+(((1.5707963267949)*(x9304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9305=IKsin(j4);
IkReal x9306=IKcos(j4);
IkReal x9307=((1.0)*x9306);
IkReal x9308=(gconst2*x9306);
IkReal x9309=(gconst1*x9305);
IkReal x9310=((1.0)*x9305);
evalcond[0]=(((r21*x9309))+(((-1.0)*r22*x9307))+(((-1.0)*gconst2*r20*x9310)));
evalcond[1]=((((-1.0)*gconst2*r00*x9310))+((r01*x9309))+(((-1.0)*r02*x9307)));
evalcond[2]=((((-1.0)*gconst1*r11*x9307))+((r10*x9308))+(((-1.0)*r12*x9310)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9310))+((r11*x9309))+(((-1.0)*r12*x9307)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9307))+((cj1*sj2))+((r20*x9308))+(((-1.0)*r22*x9310)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9307))+(((-1.0)*r02*x9310))+((r00*x9308))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9311=((-1.0)*r20);
IkReal x9312=x8859;
CheckValue<IkReal> x9314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9311),IKFAST_ATAN2_MAGTHRESH);
if(!x9314.valid){
continue;
}
IkReal x9313=((-1.0)*(x9314.value));
sj5=gconst1;
cj5=gconst2;
j5=x9313;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9313;
IkReal gconst1=(r21*x9312);
IkReal gconst2=(x9311*x9312);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9315=((-1.0)*r20);
IkReal x9316=x8859;
CheckValue<IkReal> x9318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9315),IKFAST_ATAN2_MAGTHRESH);
if(!x9318.valid){
continue;
}
IkReal x9317=((-1.0)*(x9318.value));
sj5=gconst1;
cj5=gconst2;
j5=x9317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9317;
IkReal gconst1=(r21*x9316);
IkReal gconst2=(x9315*x9316);
IkReal x9319=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9323=IKPowWithIntegerCheck(x9319,-1);
if(!x9323.valid){
continue;
}
IkReal x9320=x9323.value;
IkReal x9321=((1.0)*x9320);
IkReal x9322=((((-1.0)*x9321*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9320))+(((-1.0)*x9321*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02))));
j4eval[0]=x9322;
j4eval[1]=IKsign(x9322);
j4eval[2]=r02;
j4eval[3]=x9319;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9324=((-1.0)*r20);
IkReal x9325=x8859;
CheckValue<IkReal> x9327 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9324),IKFAST_ATAN2_MAGTHRESH);
if(!x9327.valid){
continue;
}
IkReal x9326=((-1.0)*(x9327.value));
sj5=gconst1;
cj5=gconst2;
j5=x9326;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9326;
IkReal gconst1=(r21*x9325);
IkReal gconst2=(x9324*x9325);
IkReal x9328=r22*r22;
IkReal x9329=(cj1*r02*sj2);
IkReal x9330=(cj2*r02*sj1);
CheckValue<IkReal> x9334=IKPowWithIntegerCheck(((-1.0)+x9328),-1);
if(!x9334.valid){
continue;
}
IkReal x9331=x9334.value;
if((((1.0)+(((-1.0)*x9328)))) < -0.00001)
continue;
IkReal x9332=IKsqrt(((1.0)+(((-1.0)*x9328))));
IkReal x9333=((1.0)*r22*x9331*x9332);
j4eval[0]=((IKabs((x9329+x9330)))+(IKabs(((((-1.0)*x9329*x9333))+(((-1.0)*x9330*x9333))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9335=(cj2*sj1);
IkReal x9336=(cj1*sj2);
IkReal x9337=(gconst2*r00);
IkReal x9338=((1.0)*gconst1*r01);
CheckValue<IkReal> x9339=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9339.valid){
continue;
}
CheckValue<IkReal> x9340 = IKatan2WithCheck(IkReal((((x9336*x9337))+(((-1.0)*x9335*x9338))+((x9335*x9337))+(((-1.0)*x9336*x9338)))),IkReal((((r02*x9335))+((r02*x9336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9339.value)))+(x9340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9341=IKsin(j4);
IkReal x9342=IKcos(j4);
IkReal x9343=(gconst1*r11);
IkReal x9344=(gconst1*r21);
IkReal x9345=(gconst1*r01);
IkReal x9346=((1.0)*x9342);
IkReal x9347=(gconst2*x9342);
IkReal x9348=((1.0)*x9341);
evalcond[0]=((((-1.0)*r22*x9346))+(((-1.0)*gconst2*r20*x9348))+((x9341*x9344)));
evalcond[1]=(((x9341*x9343))+(((-1.0)*r12*x9346))+(((-1.0)*gconst2*r10*x9348)));
evalcond[2]=(((r00*x9347))+(((-1.0)*r02*x9348))+(((-1.0)*x9345*x9346)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9346))+((x9341*x9345))+(((-1.0)*gconst2*r00*x9348)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9344*x9346))+(((-1.0)*r22*x9348))+((cj1*sj2))+((r20*x9347)));
evalcond[5]=((((-1.0)*x9343*x9346))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9347))+(((-1.0)*r12*x9348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9349=(gconst2*r00);
IkReal x9350=(gconst1*r01);
CheckValue<IkReal> x9351=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9349*x9349)))+(((2.0)*x9349*x9350))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9350*x9350))))),-1);
if(!x9351.valid){
continue;
}
CheckValue<IkReal> x9352 = IKatan2WithCheck(IkReal((x9349+(((-1.0)*x9350)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9351.value)))+(x9352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9353=IKsin(j4);
IkReal x9354=IKcos(j4);
IkReal x9355=(gconst1*r11);
IkReal x9356=(gconst1*r21);
IkReal x9357=(gconst1*r01);
IkReal x9358=((1.0)*x9354);
IkReal x9359=(gconst2*x9354);
IkReal x9360=((1.0)*x9353);
evalcond[0]=(((x9353*x9356))+(((-1.0)*r22*x9358))+(((-1.0)*gconst2*r20*x9360)));
evalcond[1]=(((x9353*x9355))+(((-1.0)*r12*x9358))+(((-1.0)*gconst2*r10*x9360)));
evalcond[2]=(((r00*x9359))+(((-1.0)*r02*x9360))+(((-1.0)*x9357*x9358)));
evalcond[3]=((-1.0)+((x9353*x9357))+(((-1.0)*r02*x9358))+(((-1.0)*gconst2*r00*x9360)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9359))+(((-1.0)*x9356*x9358))+(((-1.0)*r22*x9360)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r10*x9359))+(((-1.0)*x9355*x9358))+(((-1.0)*r12*x9360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9361=((1.0)*gconst2);
CheckValue<IkReal> x9362=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9361)))),-1);
if(!x9362.valid){
continue;
}
CheckValue<IkReal> x9363 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9361))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9362.value)))+(x9363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9364=IKsin(j4);
IkReal x9365=IKcos(j4);
IkReal x9366=(gconst1*r11);
IkReal x9367=(gconst1*r21);
IkReal x9368=(gconst1*r01);
IkReal x9369=((1.0)*x9365);
IkReal x9370=(gconst2*x9365);
IkReal x9371=((1.0)*x9364);
evalcond[0]=(((x9364*x9367))+(((-1.0)*gconst2*r20*x9371))+(((-1.0)*r22*x9369)));
evalcond[1]=(((x9364*x9366))+(((-1.0)*gconst2*r10*x9371))+(((-1.0)*r12*x9369)));
evalcond[2]=((((-1.0)*r02*x9371))+(((-1.0)*x9368*x9369))+((r00*x9370)));
evalcond[3]=((-1.0)+((x9364*x9368))+(((-1.0)*r02*x9369))+(((-1.0)*gconst2*r00*x9371)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9367*x9369))+(((-1.0)*r22*x9371))+((r20*x9370)));
evalcond[5]=((((-1.0)*x9366*x9369))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9371))+((r10*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9372=((-1.0)*r20);
IkReal x9373=x8859;
CheckValue<IkReal> x9375 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9372),IKFAST_ATAN2_MAGTHRESH);
if(!x9375.valid){
continue;
}
IkReal x9374=((-1.0)*(x9375.value));
sj5=gconst1;
cj5=gconst2;
j5=x9374;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9374;
IkReal gconst1=(r21*x9373);
IkReal gconst2=(x9372*x9373);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9376=((-1.0)*r20);
IkReal x9377=x8859;
CheckValue<IkReal> x9379 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9376),IKFAST_ATAN2_MAGTHRESH);
if(!x9379.valid){
continue;
}
IkReal x9378=((-1.0)*(x9379.value));
sj5=gconst1;
cj5=gconst2;
j5=x9378;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9378;
IkReal gconst1=(r21*x9377);
IkReal gconst2=(x9376*x9377);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9380=((-1.0)*r20);
IkReal x9381=x8859;
CheckValue<IkReal> x9383 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9380),IKFAST_ATAN2_MAGTHRESH);
if(!x9383.valid){
continue;
}
IkReal x9382=((-1.0)*(x9383.value));
sj5=gconst1;
cj5=gconst2;
j5=x9382;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9382;
IkReal gconst1=(r21*x9381);
IkReal gconst2=(x9380*x9381);
IkReal x9384=r22*r22;
IkReal x9385=(cj1*r02*sj2);
IkReal x9386=(cj2*r02*sj1);
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(((-1.0)+x9384),-1);
if(!x9390.valid){
continue;
}
IkReal x9387=x9390.value;
if((((1.0)+(((-1.0)*x9384)))) < -0.00001)
continue;
IkReal x9388=IKsqrt(((1.0)+(((-1.0)*x9384))));
IkReal x9389=((1.0)*r22*x9387*x9388);
j4eval[0]=((IKabs(((((-1.0)*x9386*x9389))+(((-1.0)*x9385*x9389)))))+(IKabs((x9385+x9386))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9391=(cj2*sj1);
IkReal x9392=(cj1*sj2);
IkReal x9393=(gconst2*r00);
IkReal x9394=((1.0)*gconst1*r01);
CheckValue<IkReal> x9395 = IKatan2WithCheck(IkReal(((((-1.0)*x9391*x9394))+((x9392*x9393))+((x9391*x9393))+(((-1.0)*x9392*x9394)))),IkReal((((r02*x9391))+((r02*x9392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9395.valid){
continue;
}
CheckValue<IkReal> x9396=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9395.value)+(((1.5707963267949)*(x9396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9397=IKsin(j4);
IkReal x9398=IKcos(j4);
IkReal x9399=(gconst1*r11);
IkReal x9400=(gconst1*r21);
IkReal x9401=(gconst1*r01);
IkReal x9402=((1.0)*x9398);
IkReal x9403=(gconst2*x9398);
IkReal x9404=((1.0)*x9397);
evalcond[0]=((((-1.0)*r22*x9402))+((x9397*x9400))+(((-1.0)*gconst2*r20*x9404)));
evalcond[1]=((((-1.0)*gconst2*r10*x9404))+(((-1.0)*r12*x9402))+((x9397*x9399)));
evalcond[2]=((((-1.0)*r02*x9404))+(((-1.0)*x9401*x9402))+((r00*x9403)));
evalcond[3]=((1.0)+((x9397*x9401))+(((-1.0)*r02*x9402))+(((-1.0)*gconst2*r00*x9404)));
evalcond[4]=((((-1.0)*r22*x9404))+((cj2*sj1))+((cj1*sj2))+((r20*x9403))+(((-1.0)*x9400*x9402)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x9404))+((r10*x9403))+((cj1*cj2))+(((-1.0)*x9399*x9402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9405=(gconst1*r01);
IkReal x9406=(gconst2*r00);
CheckValue<IkReal> x9407=IKPowWithIntegerCheck(IKsign(((x9406*x9406)+(((-2.0)*x9405*x9406))+(x9405*x9405)+(r02*r02))),-1);
if(!x9407.valid){
continue;
}
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal(((((-1.0)*x9405))+x9406)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9407.value)))+(x9408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9409=IKsin(j4);
IkReal x9410=IKcos(j4);
IkReal x9411=(gconst1*r11);
IkReal x9412=(gconst1*r21);
IkReal x9413=(gconst1*r01);
IkReal x9414=((1.0)*x9410);
IkReal x9415=(gconst2*x9410);
IkReal x9416=((1.0)*x9409);
evalcond[0]=(((x9409*x9412))+(((-1.0)*gconst2*r20*x9416))+(((-1.0)*r22*x9414)));
evalcond[1]=((((-1.0)*r12*x9414))+((x9409*x9411))+(((-1.0)*gconst2*r10*x9416)));
evalcond[2]=((((-1.0)*r02*x9416))+((r00*x9415))+(((-1.0)*x9413*x9414)));
evalcond[3]=((1.0)+((x9409*x9413))+(((-1.0)*r02*x9414))+(((-1.0)*gconst2*r00*x9416)));
evalcond[4]=(((r20*x9415))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9416))+(((-1.0)*x9412*x9414)));
evalcond[5]=((((-1.0)*r12*x9416))+((r10*x9415))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x9411*x9414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9417 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9417.valid){
continue;
}
CheckValue<IkReal> x9418=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9417.value)+(((1.5707963267949)*(x9418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9419=IKsin(j4);
IkReal x9420=IKcos(j4);
IkReal x9421=(gconst1*r11);
IkReal x9422=(gconst1*r21);
IkReal x9423=(gconst1*r01);
IkReal x9424=((1.0)*x9420);
IkReal x9425=(gconst2*x9420);
IkReal x9426=((1.0)*x9419);
evalcond[0]=(((x9419*x9422))+(((-1.0)*gconst2*r20*x9426))+(((-1.0)*r22*x9424)));
evalcond[1]=(((x9419*x9421))+(((-1.0)*gconst2*r10*x9426))+(((-1.0)*r12*x9424)));
evalcond[2]=((((-1.0)*x9423*x9424))+((r00*x9425))+(((-1.0)*r02*x9426)));
evalcond[3]=((1.0)+((x9419*x9423))+(((-1.0)*r02*x9424))+(((-1.0)*gconst2*r00*x9426)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9425))+(((-1.0)*x9422*x9424))+(((-1.0)*r22*x9426)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9421*x9424))+(((-1.0)*r12*x9426))+((cj1*cj2))+((r10*x9425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9427=((-1.0)*r20);
IkReal x9428=((-1.0)*px);
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9427),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
IkReal x9429=((-1.0)*(x9430.value));
sj5=gconst1;
cj5=gconst2;
j5=x9429;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9428);
rxp1_1=(px*r21);
rxp1_2=(r11*x9428);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9429;
IkReal gconst1=r21;
IkReal gconst2=x9427;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9431=((-1.0)*r20);
IkReal x9432=((-1.0)*px);
CheckValue<IkReal> x9434 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9431),IKFAST_ATAN2_MAGTHRESH);
if(!x9434.valid){
continue;
}
IkReal x9433=((-1.0)*(x9434.value));
sj5=gconst1;
cj5=gconst2;
j5=x9433;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9432);
rxp1_1=(px*r21);
rxp1_2=(r11*x9432);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9433;
IkReal gconst1=r21;
IkReal gconst2=x9431;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9435=((-1.0)*r20);
IkReal x9436=((-1.0)*px);
CheckValue<IkReal> x9438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9435),IKFAST_ATAN2_MAGTHRESH);
if(!x9438.valid){
continue;
}
IkReal x9437=((-1.0)*(x9438.value));
sj5=gconst1;
cj5=gconst2;
j5=x9437;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9436);
rxp1_1=(px*r21);
rxp1_2=(r11*x9436);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9437;
IkReal gconst1=r21;
IkReal gconst2=x9435;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9441=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9441.valid){
continue;
}
IkReal x9439=x9441.value;
IkReal x9440=(sj0*x9439);
cj4array[0]=(((cj1*cj2*x9440))+(((-1.0)*sj1*sj2*x9440)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9442=IKsin(j4);
IkReal x9443=IKcos(j4);
IkReal x9444=(gconst1*x9442);
IkReal x9445=((1.0)*x9443);
IkReal x9446=((1.0)*gconst2*x9442);
evalcond[0]=((-1.0)*r02*x9442);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9445)));
evalcond[2]=(((r21*x9444))+(((-1.0)*r20*x9446)));
evalcond[3]=((((-1.0)*r10*x9446))+((r11*x9444)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9445))+((gconst2*r20*x9443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9449=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9449.valid){
continue;
}
IkReal x9447=x9449.value;
IkReal x9448=((1.0)*x9447);
cj4array[0]=((((-1.0)*cj2*sj1*x9448))+(((-1.0)*cj1*sj2*x9448)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9450=IKsin(j4);
IkReal x9451=IKcos(j4);
IkReal x9452=(gconst2*r10);
IkReal x9453=((1.0)*sj0);
IkReal x9454=(gconst1*r11);
IkReal x9455=((1.0)*x9450);
IkReal x9456=((1.0)*x9451);
evalcond[0]=((-1.0)*r02*x9450);
evalcond[1]=((((-1.0)*x9453))+(((-1.0)*r02*x9456)));
evalcond[2]=(((gconst1*r21*x9450))+(((-1.0)*gconst2*r20*x9455)));
evalcond[3]=((((-1.0)*x9452*x9455))+((x9450*x9454)));
evalcond[4]=(((x9451*x9452))+(((-1.0)*cj1*cj2*x9453))+(((-1.0)*x9454*x9456))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9457=IKPowWithIntegerCheck(r02,-1);
if(!x9457.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9457.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9458=IKsin(j4);
IkReal x9459=IKcos(j4);
IkReal x9460=(gconst2*r10);
IkReal x9461=(gconst1*r11);
IkReal x9462=(gconst1*r21);
IkReal x9463=(gconst2*r20);
IkReal x9464=((1.0)*x9458);
IkReal x9465=((1.0)*x9459);
evalcond[0]=((-1.0)*r02*x9458);
evalcond[1]=(((x9458*x9462))+(((-1.0)*x9463*x9464)));
evalcond[2]=(((x9458*x9461))+(((-1.0)*x9460*x9464)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9462*x9465))+((x9459*x9463)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x9459*x9460))+((sj0*sj1*sj2))+(((-1.0)*x9461*x9465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9466=(cj2*sj1);
IkReal x9467=(cj1*sj2);
IkReal x9468=(gconst1*r21);
IkReal x9469=((1.0)*gconst2*r20);
CheckValue<IkReal> x9470=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*gconst2*r20*x9468))+(x9468*x9468)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9470.valid){
continue;
}
CheckValue<IkReal> x9471 = IKatan2WithCheck(IkReal((((r22*x9467))+((r22*x9466)))),IkReal((((x9466*x9468))+(((-1.0)*x9467*x9469))+((x9467*x9468))+(((-1.0)*x9466*x9469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9470.value)))+(x9471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9472=IKsin(j4);
IkReal x9473=IKcos(j4);
IkReal x9474=(gconst1*r11);
IkReal x9475=(sj1*sj2);
IkReal x9476=(gconst1*r21);
IkReal x9477=(gconst1*r01);
IkReal x9478=((1.0)*x9473);
IkReal x9479=(gconst2*x9473);
IkReal x9480=((1.0)*cj1*cj2);
IkReal x9481=((1.0)*x9472);
evalcond[0]=((((-1.0)*r22*x9478))+(((-1.0)*gconst2*r20*x9481))+((x9472*x9476)));
evalcond[1]=(cj0+(((-1.0)*r12*x9478))+(((-1.0)*gconst2*r10*x9481))+((x9472*x9474)));
evalcond[2]=((((-1.0)*r02*x9478))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9481))+((x9472*x9477)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9476*x9478))+((cj1*sj2))+(((-1.0)*r22*x9481))+((r20*x9479)));
evalcond[4]=((((-1.0)*cj0*x9480))+(((-1.0)*x9477*x9478))+(((-1.0)*r02*x9481))+((r00*x9479))+((cj0*x9475)));
evalcond[5]=(((r10*x9479))+(((-1.0)*sj0*x9480))+((sj0*x9475))+(((-1.0)*x9474*x9478))+(((-1.0)*r12*x9481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9482=((1.0)*gconst2);
CheckValue<IkReal> x9483=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9482)))),-1);
if(!x9483.valid){
continue;
}
CheckValue<IkReal> x9484 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9482))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9483.value)))+(x9484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9485=IKsin(j4);
IkReal x9486=IKcos(j4);
IkReal x9487=(gconst1*r11);
IkReal x9488=(sj1*sj2);
IkReal x9489=(gconst1*r21);
IkReal x9490=(gconst1*r01);
IkReal x9491=((1.0)*x9486);
IkReal x9492=(gconst2*x9486);
IkReal x9493=((1.0)*cj1*cj2);
IkReal x9494=((1.0)*x9485);
evalcond[0]=((((-1.0)*gconst2*r20*x9494))+((x9485*x9489))+(((-1.0)*r22*x9491)));
evalcond[1]=(((x9485*x9487))+cj0+(((-1.0)*gconst2*r10*x9494))+(((-1.0)*r12*x9491)));
evalcond[2]=((((-1.0)*r02*x9491))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9494))+((x9485*x9490)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9494))+((cj1*sj2))+(((-1.0)*x9489*x9491))+((r20*x9492)));
evalcond[4]=((((-1.0)*r02*x9494))+(((-1.0)*x9490*x9491))+((cj0*x9488))+((r00*x9492))+(((-1.0)*cj0*x9493)));
evalcond[5]=(((sj0*x9488))+((r10*x9492))+(((-1.0)*r12*x9494))+(((-1.0)*sj0*x9493))+(((-1.0)*x9487*x9491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9495=((1.0)*gconst2);
CheckValue<IkReal> x9496=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9495)))),-1);
if(!x9496.valid){
continue;
}
CheckValue<IkReal> x9497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9496.value)))+(x9497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9498=IKsin(j4);
IkReal x9499=IKcos(j4);
IkReal x9500=(gconst1*r11);
IkReal x9501=(sj1*sj2);
IkReal x9502=(gconst1*r21);
IkReal x9503=(gconst1*r01);
IkReal x9504=((1.0)*x9499);
IkReal x9505=(gconst2*x9499);
IkReal x9506=((1.0)*cj1*cj2);
IkReal x9507=((1.0)*x9498);
evalcond[0]=(((x9498*x9502))+(((-1.0)*r22*x9504))+(((-1.0)*gconst2*r20*x9507)));
evalcond[1]=(((x9498*x9500))+cj0+(((-1.0)*r12*x9504))+(((-1.0)*gconst2*r10*x9507)));
evalcond[2]=(((x9498*x9503))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9507))+(((-1.0)*r02*x9504)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9507))+((r20*x9505))+(((-1.0)*x9502*x9504)));
evalcond[4]=(((cj0*x9501))+(((-1.0)*cj0*x9506))+(((-1.0)*x9503*x9504))+(((-1.0)*r02*x9507))+((r00*x9505)));
evalcond[5]=(((r10*x9505))+(((-1.0)*r12*x9507))+(((-1.0)*sj0*x9506))+(((-1.0)*x9500*x9504))+((sj0*x9501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9508=((-1.0)*r20);
IkReal x9509=x8859;
CheckValue<IkReal> x9511 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9508),IKFAST_ATAN2_MAGTHRESH);
if(!x9511.valid){
continue;
}
IkReal x9510=((-1.0)*(x9511.value));
sj5=gconst1;
cj5=gconst2;
j5=x9510;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9510;
IkReal gconst1=(r21*x9509);
IkReal gconst2=(x9508*x9509);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9512=((-1.0)*r20);
IkReal x9513=x8859;
CheckValue<IkReal> x9515 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9512),IKFAST_ATAN2_MAGTHRESH);
if(!x9515.valid){
continue;
}
IkReal x9514=((-1.0)*(x9515.value));
sj5=gconst1;
cj5=gconst2;
j5=x9514;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9514;
IkReal gconst1=(r21*x9513);
IkReal gconst2=(x9512*x9513);
CheckValue<IkReal> x9523=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9523.valid){
continue;
}
IkReal x9516=x9523.value;
IkReal x9517=(sj3*x9516);
IkReal x9518=(r11*x9517);
IkReal x9519=(r00*x9517);
IkReal x9520=(r01*x9517);
IkReal x9521=(r10*x9517);
IkReal x9522=(r20*r21*x9517);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9518*(r21*r21)))+((r00*r20*r21*x9518))+((r10*r20*r21*x9520))+((r10*x9519*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9524=gconst2*gconst2;
IkReal x9525=gconst1*gconst1;
IkReal x9526=((1.0)*cj3);
IkReal x9527=((1.0)*sj3);
IkReal x9528=(r11*sj3);
IkReal x9529=(r10*sj3);
IkReal x9530=(gconst1*gconst2*r00);
IkReal x9531=(gconst1*gconst2*r01);
IkReal x9532=(r00*x9524);
IkReal x9533=(r01*x9525);
CheckValue<IkReal> x9534 = IKatan2WithCheck(IkReal((((gconst1*r02*x9529))+((gconst2*r02*x9528)))),IkReal((((x9529*x9533))+(((-1.0)*r11*x9527*x9532))+(((-1.0)*r10*x9527*x9530))+((x9528*x9531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9534.valid){
continue;
}
CheckValue<IkReal> x9535=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9526))+(((-1.0)*r11*x9526*x9533))+(((-1.0)*r10*x9526*x9532))+((cj3*r10*x9531))+((cj3*r11*x9530)))),-1);
if(!x9535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9534.value)+(((1.5707963267949)*(x9535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9536=IKsin(j4);
IkReal x9537=IKcos(j4);
IkReal x9538=(sj1*sj2);
IkReal x9539=(gconst1*sj3);
IkReal x9540=(cj3*gconst1);
IkReal x9541=(cj3*gconst2);
IkReal x9542=((1.0)*cj2);
IkReal x9543=(cj1*sj2);
IkReal x9544=(gconst2*sj3);
IkReal x9545=(cj1*x9542);
IkReal x9546=((1.0)*x9537);
IkReal x9547=((1.0)*x9536);
IkReal x9548=(gconst1*x9536);
IkReal x9549=(cj3*x9536);
IkReal x9550=(x9537*x9544);
evalcond[0]=((((-1.0)*r22*x9546))+((r21*x9548))+(((-1.0)*gconst2*r20*x9547)));
evalcond[1]=((((-1.0)*r02*x9546))+((r01*x9548))+(((-1.0)*gconst2*r00*x9547)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9546))+((r11*x9548))+(((-1.0)*gconst2*r10*x9547)));
evalcond[3]=(((r12*x9549))+((r11*x9537*x9540))+((r11*x9544))+((r10*x9539))+(((-1.0)*r10*x9541*x9546)));
evalcond[4]=(((r11*x9541))+((r10*x9540))+((r10*x9550))+(((-1.0)*r11*x9539*x9546))+(((-1.0)*r12*sj3*x9547)));
evalcond[5]=(((r22*x9549))+((cj2*sj1))+((r20*x9539))+((r21*x9544))+(((-1.0)*r20*x9541*x9546))+x9543+((r21*x9537*x9540)));
evalcond[6]=((((-1.0)*r00*x9541*x9546))+((r02*x9549))+((r01*x9537*x9540))+((r01*x9544))+((r00*x9539))+x9538+(((-1.0)*x9545)));
evalcond[7]=((((-1.0)*r22*sj3*x9547))+((r20*x9550))+((r20*x9540))+((r21*x9541))+(((-1.0)*r21*x9539*x9546))+x9538+(((-1.0)*x9545)));
evalcond[8]=((((-1.0)*r02*sj3*x9547))+(((-1.0)*r01*x9539*x9546))+((r01*x9541))+((r00*x9540))+((r00*x9550))+(((-1.0)*x9543))+(((-1.0)*sj1*x9542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9551=gconst2*gconst2;
IkReal x9552=gconst1*gconst1;
IkReal x9553=(gconst2*r11);
IkReal x9554=(cj3*r02);
IkReal x9555=(gconst1*r01);
IkReal x9556=(cj3*r10);
IkReal x9557=(r10*sj3);
IkReal x9558=((1.0)*gconst1*r00);
IkReal x9559=(r01*x9552);
IkReal x9560=(r00*x9551);
CheckValue<IkReal> x9561 = IKatan2WithCheck(IkReal((((x9553*x9554))+((gconst1*r10*x9554)))),IkReal(((((-1.0)*cj3*r11*x9560))+((x9556*x9559))+((cj3*x9553*x9555))+(((-1.0)*gconst2*x9556*x9558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9561.valid){
continue;
}
CheckValue<IkReal> x9562=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9559))+(((-1.0)*sj3*x9553*x9558))+(((-1.0)*gconst2*x9555*x9557))+((x9557*x9560)))),-1);
if(!x9562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9561.value)+(((1.5707963267949)*(x9562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9563=IKsin(j4);
IkReal x9564=IKcos(j4);
IkReal x9565=(sj1*sj2);
IkReal x9566=(gconst1*sj3);
IkReal x9567=(cj3*gconst1);
IkReal x9568=(cj3*gconst2);
IkReal x9569=((1.0)*cj2);
IkReal x9570=(cj1*sj2);
IkReal x9571=(gconst2*sj3);
IkReal x9572=(cj1*x9569);
IkReal x9573=((1.0)*x9564);
IkReal x9574=((1.0)*x9563);
IkReal x9575=(gconst1*x9563);
IkReal x9576=(cj3*x9563);
IkReal x9577=(x9564*x9571);
evalcond[0]=((((-1.0)*gconst2*r20*x9574))+((r21*x9575))+(((-1.0)*r22*x9573)));
evalcond[1]=((((-1.0)*r02*x9573))+((r01*x9575))+(((-1.0)*gconst2*r00*x9574)));
evalcond[2]=((1.0)+((r11*x9575))+(((-1.0)*r12*x9573))+(((-1.0)*gconst2*r10*x9574)));
evalcond[3]=((((-1.0)*r10*x9568*x9573))+((r11*x9564*x9567))+((r11*x9571))+((r12*x9576))+((r10*x9566)));
evalcond[4]=((((-1.0)*r11*x9566*x9573))+((r11*x9568))+((r10*x9567))+(((-1.0)*r12*sj3*x9574))+((r10*x9577)));
evalcond[5]=(((cj2*sj1))+((r21*x9571))+((r22*x9576))+x9570+(((-1.0)*r20*x9568*x9573))+((r21*x9564*x9567))+((r20*x9566)));
evalcond[6]=(((r01*x9564*x9567))+((r00*x9566))+(((-1.0)*x9572))+(((-1.0)*r00*x9568*x9573))+((r01*x9571))+x9565+((r02*x9576)));
evalcond[7]=(((r21*x9568))+(((-1.0)*x9572))+(((-1.0)*r22*sj3*x9574))+x9565+(((-1.0)*r21*x9566*x9573))+((r20*x9577))+((r20*x9567)));
evalcond[8]=((((-1.0)*r02*sj3*x9574))+((r01*x9568))+((r00*x9567))+(((-1.0)*x9570))+((r00*x9577))+(((-1.0)*r01*x9566*x9573))+(((-1.0)*sj1*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9578=((1.0)*gconst2);
CheckValue<IkReal> x9579 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9578))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9579.valid){
continue;
}
CheckValue<IkReal> x9580=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9578)))),-1);
if(!x9580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9579.value)+(((1.5707963267949)*(x9580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9581=IKsin(j4);
IkReal x9582=IKcos(j4);
IkReal x9583=(sj1*sj2);
IkReal x9584=(gconst1*sj3);
IkReal x9585=(cj3*gconst1);
IkReal x9586=(cj3*gconst2);
IkReal x9587=((1.0)*cj2);
IkReal x9588=(cj1*sj2);
IkReal x9589=(gconst2*sj3);
IkReal x9590=(cj1*x9587);
IkReal x9591=((1.0)*x9582);
IkReal x9592=((1.0)*x9581);
IkReal x9593=(gconst1*x9581);
IkReal x9594=(cj3*x9581);
IkReal x9595=(x9582*x9589);
evalcond[0]=((((-1.0)*r22*x9591))+((r21*x9593))+(((-1.0)*gconst2*r20*x9592)));
evalcond[1]=(((r01*x9593))+(((-1.0)*gconst2*r00*x9592))+(((-1.0)*r02*x9591)));
evalcond[2]=((1.0)+((r11*x9593))+(((-1.0)*gconst2*r10*x9592))+(((-1.0)*r12*x9591)));
evalcond[3]=(((r11*x9589))+((r10*x9584))+((r11*x9582*x9585))+(((-1.0)*r10*x9586*x9591))+((r12*x9594)));
evalcond[4]=(((r11*x9586))+((r10*x9585))+(((-1.0)*r12*sj3*x9592))+((r10*x9595))+(((-1.0)*r11*x9584*x9591)));
evalcond[5]=(((cj2*sj1))+((r20*x9584))+(((-1.0)*r20*x9586*x9591))+((r21*x9582*x9585))+((r22*x9594))+x9588+((r21*x9589)));
evalcond[6]=((((-1.0)*r00*x9586*x9591))+((r00*x9584))+((r01*x9589))+(((-1.0)*x9590))+x9583+((r02*x9594))+((r01*x9582*x9585)));
evalcond[7]=(((r20*x9595))+((r20*x9585))+(((-1.0)*r22*sj3*x9592))+(((-1.0)*x9590))+(((-1.0)*r21*x9584*x9591))+x9583+((r21*x9586)));
evalcond[8]=((((-1.0)*sj1*x9587))+((r00*x9585))+((r00*x9595))+(((-1.0)*r01*x9584*x9591))+((r01*x9586))+(((-1.0)*r02*sj3*x9592))+(((-1.0)*x9588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9596=((-1.0)*r20);
IkReal x9597=x8859;
CheckValue<IkReal> x9599 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9596),IKFAST_ATAN2_MAGTHRESH);
if(!x9599.valid){
continue;
}
IkReal x9598=((-1.0)*(x9599.value));
sj5=gconst1;
cj5=gconst2;
j5=x9598;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9598;
IkReal gconst1=(r21*x9597);
IkReal gconst2=(x9596*x9597);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9600=((-1.0)*r20);
IkReal x9601=x8859;
CheckValue<IkReal> x9603 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9600),IKFAST_ATAN2_MAGTHRESH);
if(!x9603.valid){
continue;
}
IkReal x9602=((-1.0)*(x9603.value));
sj5=gconst1;
cj5=gconst2;
j5=x9602;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9602;
IkReal gconst1=(r21*x9601);
IkReal gconst2=(x9600*x9601);
CheckValue<IkReal> x9611=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9611.valid){
continue;
}
IkReal x9604=x9611.value;
IkReal x9605=(sj3*x9604);
IkReal x9606=(r11*x9605);
IkReal x9607=(r00*x9605);
IkReal x9608=(r01*x9605);
IkReal x9609=(r10*x9605);
IkReal x9610=(r20*r21*x9605);
j4eval[0]=IKsign((((r00*r20*r21*x9606))+((r02*r12*sj3))+((r10*x9607*(r20*r20)))+((r01*x9606*(r21*r21)))+((r10*r20*r21*x9608))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9612=gconst2*gconst2;
IkReal x9613=gconst1*gconst1;
IkReal x9614=((1.0)*cj3);
IkReal x9615=((1.0)*sj3);
IkReal x9616=(r11*sj3);
IkReal x9617=(r10*sj3);
IkReal x9618=(gconst1*gconst2*r00);
IkReal x9619=(gconst1*gconst2*r01);
IkReal x9620=(r00*x9612);
IkReal x9621=(r01*x9613);
CheckValue<IkReal> x9622=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9614*x9621))+((cj3*r11*x9618))+(((-1.0)*r10*x9614*x9620))+(((-1.0)*r02*r12*x9614))+((cj3*r10*x9619)))),-1);
if(!x9622.valid){
continue;
}
CheckValue<IkReal> x9623 = IKatan2WithCheck(IkReal((((gconst2*r02*x9616))+((gconst1*r02*x9617)))),IkReal((((x9616*x9619))+((x9617*x9621))+(((-1.0)*r10*x9615*x9618))+(((-1.0)*r11*x9615*x9620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9622.value)))+(x9623.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9624=IKsin(j4);
IkReal x9625=IKcos(j4);
IkReal x9626=(cj2*sj1);
IkReal x9627=(cj1*sj2);
IkReal x9628=(gconst1*sj3);
IkReal x9629=(cj3*gconst1);
IkReal x9630=(sj1*sj2);
IkReal x9631=(cj3*gconst2);
IkReal x9632=(cj1*cj2);
IkReal x9633=(gconst2*sj3);
IkReal x9634=((1.0)*x9625);
IkReal x9635=((1.0)*x9624);
IkReal x9636=(gconst1*x9624);
IkReal x9637=(cj3*x9624);
IkReal x9638=(x9627+x9626);
IkReal x9639=(x9625*x9633);
evalcond[0]=((((-1.0)*r22*x9634))+((r21*x9636))+(((-1.0)*gconst2*r20*x9635)));
evalcond[1]=(((r01*x9636))+(((-1.0)*gconst2*r00*x9635))+(((-1.0)*r02*x9634)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9635))+(((-1.0)*r12*x9634))+((r11*x9636)));
evalcond[3]=(((r10*x9628))+(((-1.0)*r10*x9631*x9634))+((r12*x9637))+((r11*x9625*x9629))+((r11*x9633)));
evalcond[4]=(((r10*x9639))+((r10*x9629))+(((-1.0)*r12*sj3*x9635))+((r11*x9631))+(((-1.0)*r11*x9628*x9634)));
evalcond[5]=(((r20*x9628))+(((-1.0)*r20*x9631*x9634))+((r21*x9633))+((r22*x9637))+x9638+((r21*x9625*x9629)));
evalcond[6]=(((r01*x9633))+((r00*x9628))+((r01*x9625*x9629))+(((-1.0)*r00*x9631*x9634))+(((-1.0)*x9630))+x9632+((r02*x9637)));
evalcond[7]=(((r00*x9639))+((r01*x9631))+((r00*x9629))+(((-1.0)*r02*sj3*x9635))+x9638+(((-1.0)*r01*x9628*x9634)));
evalcond[8]=(((r20*x9629))+((r20*x9639))+(((-1.0)*x9632))+(((-1.0)*r21*x9628*x9634))+((r21*x9631))+(((-1.0)*r22*sj3*x9635))+x9630);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9640=gconst2*gconst2;
IkReal x9641=gconst1*gconst1;
IkReal x9642=(gconst2*r11);
IkReal x9643=(cj3*r02);
IkReal x9644=(gconst1*r01);
IkReal x9645=(cj3*r10);
IkReal x9646=(r10*sj3);
IkReal x9647=((1.0)*gconst1*r00);
IkReal x9648=(r01*x9641);
IkReal x9649=(r00*x9640);
CheckValue<IkReal> x9650=IKPowWithIntegerCheck(IKsign((((r11*sj3*x9648))+((r02*r12*sj3))+((x9646*x9649))+(((-1.0)*gconst2*x9644*x9646))+(((-1.0)*sj3*x9642*x9647)))),-1);
if(!x9650.valid){
continue;
}
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal((((x9642*x9643))+((gconst1*r10*x9643)))),IkReal(((((-1.0)*cj3*r11*x9649))+((x9645*x9648))+((cj3*x9642*x9644))+(((-1.0)*gconst2*x9645*x9647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9650.value)))+(x9651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9652=IKsin(j4);
IkReal x9653=IKcos(j4);
IkReal x9654=(cj2*sj1);
IkReal x9655=(cj1*sj2);
IkReal x9656=(gconst1*sj3);
IkReal x9657=(cj3*gconst1);
IkReal x9658=(sj1*sj2);
IkReal x9659=(cj3*gconst2);
IkReal x9660=(cj1*cj2);
IkReal x9661=(gconst2*sj3);
IkReal x9662=((1.0)*x9653);
IkReal x9663=((1.0)*x9652);
IkReal x9664=(gconst1*x9652);
IkReal x9665=(cj3*x9652);
IkReal x9666=(x9654+x9655);
IkReal x9667=(x9653*x9661);
evalcond[0]=((((-1.0)*gconst2*r20*x9663))+((r21*x9664))+(((-1.0)*r22*x9662)));
evalcond[1]=(((r01*x9664))+(((-1.0)*gconst2*r00*x9663))+(((-1.0)*r02*x9662)));
evalcond[2]=((-1.0)+((r11*x9664))+(((-1.0)*r12*x9662))+(((-1.0)*gconst2*r10*x9663)));
evalcond[3]=(((r11*x9661))+((r12*x9665))+(((-1.0)*r10*x9659*x9662))+((r10*x9656))+((r11*x9653*x9657)));
evalcond[4]=(((r11*x9659))+(((-1.0)*r11*x9656*x9662))+((r10*x9667))+((r10*x9657))+(((-1.0)*r12*sj3*x9663)));
evalcond[5]=((((-1.0)*r20*x9659*x9662))+((r21*x9661))+((r20*x9656))+x9666+((r22*x9665))+((r21*x9653*x9657)));
evalcond[6]=((((-1.0)*r00*x9659*x9662))+((r00*x9656))+x9660+((r01*x9661))+(((-1.0)*x9658))+((r01*x9653*x9657))+((r02*x9665)));
evalcond[7]=((((-1.0)*r02*sj3*x9663))+((r00*x9667))+((r01*x9659))+((r00*x9657))+(((-1.0)*r01*x9656*x9662))+x9666);
evalcond[8]=(((r21*x9659))+((r20*x9657))+(((-1.0)*r21*x9656*x9662))+((r20*x9667))+x9658+(((-1.0)*x9660))+(((-1.0)*r22*sj3*x9663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9668 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9668.valid){
continue;
}
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9668.value)+(((1.5707963267949)*(x9669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9670=IKsin(j4);
IkReal x9671=IKcos(j4);
IkReal x9672=(cj2*sj1);
IkReal x9673=(cj1*sj2);
IkReal x9674=(gconst1*sj3);
IkReal x9675=(cj3*gconst1);
IkReal x9676=(sj1*sj2);
IkReal x9677=(cj3*gconst2);
IkReal x9678=(cj1*cj2);
IkReal x9679=(gconst2*sj3);
IkReal x9680=((1.0)*x9671);
IkReal x9681=((1.0)*x9670);
IkReal x9682=(gconst1*x9670);
IkReal x9683=(cj3*x9670);
IkReal x9684=(x9672+x9673);
IkReal x9685=(x9671*x9679);
evalcond[0]=(((r21*x9682))+(((-1.0)*r22*x9680))+(((-1.0)*gconst2*r20*x9681)));
evalcond[1]=((((-1.0)*r02*x9680))+(((-1.0)*gconst2*r00*x9681))+((r01*x9682)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9681))+(((-1.0)*r12*x9680))+((r11*x9682)));
evalcond[3]=((((-1.0)*r10*x9677*x9680))+((r11*x9679))+((r10*x9674))+((r12*x9683))+((r11*x9671*x9675)));
evalcond[4]=(((r11*x9677))+((r10*x9675))+(((-1.0)*r11*x9674*x9680))+((r10*x9685))+(((-1.0)*r12*sj3*x9681)));
evalcond[5]=(((r21*x9679))+((r22*x9683))+((r20*x9674))+(((-1.0)*r20*x9677*x9680))+x9684+((r21*x9671*x9675)));
evalcond[6]=(((r01*x9671*x9675))+((r01*x9679))+((r02*x9683))+((r00*x9674))+x9678+(((-1.0)*x9676))+(((-1.0)*r00*x9677*x9680)));
evalcond[7]=(((r01*x9677))+((r00*x9675))+(((-1.0)*r02*sj3*x9681))+x9684+((r00*x9685))+(((-1.0)*r01*x9674*x9680)));
evalcond[8]=(((r21*x9677))+(((-1.0)*r22*sj3*x9681))+(((-1.0)*r21*x9674*x9680))+((r20*x9675))+x9676+(((-1.0)*x9678))+((r20*x9685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9686=((-1.0)*r20);
IkReal x9687=x8859;
CheckValue<IkReal> x9689 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9686),IKFAST_ATAN2_MAGTHRESH);
if(!x9689.valid){
continue;
}
IkReal x9688=((-1.0)*(x9689.value));
sj5=gconst1;
cj5=gconst2;
j5=x9688;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9688;
IkReal gconst1=(r21*x9687);
IkReal gconst2=(x9686*x9687);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9690=((-1.0)*r20);
IkReal x9691=x8859;
CheckValue<IkReal> x9693 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9690),IKFAST_ATAN2_MAGTHRESH);
if(!x9693.valid){
continue;
}
IkReal x9692=((-1.0)*(x9693.value));
sj5=gconst1;
cj5=gconst2;
j5=x9692;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9692;
IkReal gconst1=(r21*x9691);
IkReal gconst2=(x9690*x9691);
CheckValue<IkReal> x9701=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9701.valid){
continue;
}
IkReal x9694=x9701.value;
IkReal x9695=(sj3*x9694);
IkReal x9696=(r11*x9695);
IkReal x9697=(r00*x9695);
IkReal x9698=(r01*x9695);
IkReal x9699=(r10*x9695);
IkReal x9700=(r20*r21*x9695);
j4eval[0]=IKsign((((r10*x9697*(r20*r20)))+((r02*r12*sj3))+((r00*r20*r21*x9696))+((r10*r20*r21*x9698))+((r01*x9696*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9702=gconst1*gconst1;
IkReal x9703=gconst2*gconst2;
IkReal x9704=((1.0)*cj3);
IkReal x9705=(gconst2*r10);
IkReal x9706=(r01*sj3);
IkReal x9707=(gconst1*r00*sj3);
IkReal x9708=(gconst1*gconst2*r11);
IkReal x9709=(r10*x9703);
IkReal x9710=(r11*x9702);
CheckValue<IkReal> x9711 = IKatan2WithCheck(IkReal((((r12*x9707))+((gconst2*r12*x9706)))),IkReal((((x9706*x9708))+((r00*sj3*x9710))+(((-1.0)*x9706*x9709))+(((-1.0)*x9705*x9707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9711.valid){
continue;
}
CheckValue<IkReal> x9712=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9705))+(((-1.0)*r02*r12*x9704))+((cj3*r00*x9708))+(((-1.0)*r00*x9704*x9709))+(((-1.0)*r01*x9704*x9710)))),-1);
if(!x9712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9711.value)+(((1.5707963267949)*(x9712.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9713=IKsin(j4);
IkReal x9714=IKcos(j4);
IkReal x9715=(sj1*sj2);
IkReal x9716=(gconst1*sj3);
IkReal x9717=(cj3*gconst1);
IkReal x9718=(cj3*gconst2);
IkReal x9719=((1.0)*cj2);
IkReal x9720=(cj1*sj2);
IkReal x9721=(gconst2*sj3);
IkReal x9722=(cj1*x9719);
IkReal x9723=((1.0)*x9714);
IkReal x9724=((1.0)*x9713);
IkReal x9725=(gconst1*x9713);
IkReal x9726=(cj3*x9713);
IkReal x9727=(x9714*x9721);
evalcond[0]=((((-1.0)*gconst2*r20*x9724))+(((-1.0)*r22*x9723))+((r21*x9725)));
evalcond[1]=(((r11*x9725))+(((-1.0)*r12*x9723))+(((-1.0)*gconst2*r10*x9724)));
evalcond[2]=((-1.0)+((r01*x9725))+(((-1.0)*r02*x9723))+(((-1.0)*gconst2*r00*x9724)));
evalcond[3]=(((r01*x9721))+((r01*x9714*x9717))+(((-1.0)*r00*x9718*x9723))+((r02*x9726))+((r00*x9716)));
evalcond[4]=((((-1.0)*r02*sj3*x9724))+((r01*x9718))+((r00*x9717))+(((-1.0)*r01*x9716*x9723))+((r00*x9727)));
evalcond[5]=(((cj2*sj1))+((r21*x9714*x9717))+(((-1.0)*r20*x9718*x9723))+x9720+((r20*x9716))+((r21*x9721))+((r22*x9726)));
evalcond[6]=(((r11*x9721))+((r12*x9726))+x9715+((r11*x9714*x9717))+(((-1.0)*x9722))+((r10*x9716))+(((-1.0)*r10*x9718*x9723)));
evalcond[7]=((((-1.0)*r21*x9716*x9723))+x9715+((r20*x9727))+((r20*x9717))+(((-1.0)*x9722))+(((-1.0)*r22*sj3*x9724))+((r21*x9718)));
evalcond[8]=((((-1.0)*r12*sj3*x9724))+(((-1.0)*r11*x9716*x9723))+((r11*x9718))+(((-1.0)*sj1*x9719))+((r10*x9717))+((r10*x9727))+(((-1.0)*x9720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9728=gconst2*gconst2;
IkReal x9729=gconst1*gconst1;
IkReal x9730=(gconst1*r00);
IkReal x9731=(r11*sj3);
IkReal x9732=((1.0)*gconst2);
IkReal x9733=(cj3*r12);
IkReal x9734=(cj3*r11);
IkReal x9735=(gconst2*r01);
IkReal x9736=(cj3*r10);
IkReal x9737=(r10*sj3);
CheckValue<IkReal> x9738 = IKatan2WithCheck(IkReal((((x9730*x9733))+((x9733*x9735)))),IkReal((((gconst1*x9734*x9735))+(((-1.0)*x9730*x9732*x9736))+((r00*x9729*x9734))+(((-1.0)*r01*x9728*x9736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9738.valid){
continue;
}
CheckValue<IkReal> x9739=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9730*x9731*x9732))+((r01*x9729*x9731))+(((-1.0)*gconst1*r01*x9732*x9737))+((r00*x9728*x9737)))),-1);
if(!x9739.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9738.value)+(((1.5707963267949)*(x9739.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9740=IKsin(j4);
IkReal x9741=IKcos(j4);
IkReal x9742=(sj1*sj2);
IkReal x9743=(gconst1*sj3);
IkReal x9744=(cj3*gconst1);
IkReal x9745=(cj3*gconst2);
IkReal x9746=((1.0)*cj2);
IkReal x9747=(cj1*sj2);
IkReal x9748=(gconst2*sj3);
IkReal x9749=(cj1*x9746);
IkReal x9750=((1.0)*x9741);
IkReal x9751=((1.0)*x9740);
IkReal x9752=(gconst1*x9740);
IkReal x9753=(cj3*x9740);
IkReal x9754=(x9741*x9748);
evalcond[0]=(((r21*x9752))+(((-1.0)*r22*x9750))+(((-1.0)*gconst2*r20*x9751)));
evalcond[1]=(((r11*x9752))+(((-1.0)*gconst2*r10*x9751))+(((-1.0)*r12*x9750)));
evalcond[2]=((-1.0)+((r01*x9752))+(((-1.0)*r02*x9750))+(((-1.0)*gconst2*r00*x9751)));
evalcond[3]=((((-1.0)*r00*x9745*x9750))+((r01*x9741*x9744))+((r02*x9753))+((r01*x9748))+((r00*x9743)));
evalcond[4]=(((r00*x9754))+(((-1.0)*r01*x9743*x9750))+((r01*x9745))+((r00*x9744))+(((-1.0)*r02*sj3*x9751)));
evalcond[5]=(((cj2*sj1))+((r21*x9741*x9744))+((r21*x9748))+(((-1.0)*r20*x9745*x9750))+((r22*x9753))+x9747+((r20*x9743)));
evalcond[6]=(((r11*x9748))+(((-1.0)*r10*x9745*x9750))+((r10*x9743))+x9742+((r11*x9741*x9744))+(((-1.0)*x9749))+((r12*x9753)));
evalcond[7]=(((r21*x9745))+x9742+(((-1.0)*r21*x9743*x9750))+((r20*x9744))+(((-1.0)*r22*sj3*x9751))+(((-1.0)*x9749))+((r20*x9754)));
evalcond[8]=(((r10*x9754))+((r11*x9745))+((r10*x9744))+(((-1.0)*r12*sj3*x9751))+(((-1.0)*x9747))+(((-1.0)*sj1*x9746))+(((-1.0)*r11*x9743*x9750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9755=((1.0)*gconst2);
CheckValue<IkReal> x9756=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9755)))),-1);
if(!x9756.valid){
continue;
}
CheckValue<IkReal> x9757 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9755))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9756.value)))+(x9757.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9758=IKsin(j4);
IkReal x9759=IKcos(j4);
IkReal x9760=(sj1*sj2);
IkReal x9761=(gconst1*sj3);
IkReal x9762=(cj3*gconst1);
IkReal x9763=(cj3*gconst2);
IkReal x9764=((1.0)*cj2);
IkReal x9765=(cj1*sj2);
IkReal x9766=(gconst2*sj3);
IkReal x9767=(cj1*x9764);
IkReal x9768=((1.0)*x9759);
IkReal x9769=((1.0)*x9758);
IkReal x9770=(gconst1*x9758);
IkReal x9771=(cj3*x9758);
IkReal x9772=(x9759*x9766);
evalcond[0]=((((-1.0)*r22*x9768))+((r21*x9770))+(((-1.0)*gconst2*r20*x9769)));
evalcond[1]=((((-1.0)*gconst2*r10*x9769))+(((-1.0)*r12*x9768))+((r11*x9770)));
evalcond[2]=((-1.0)+((r01*x9770))+(((-1.0)*gconst2*r00*x9769))+(((-1.0)*r02*x9768)));
evalcond[3]=(((r01*x9759*x9762))+((r00*x9761))+((r01*x9766))+(((-1.0)*r00*x9763*x9768))+((r02*x9771)));
evalcond[4]=((((-1.0)*r01*x9761*x9768))+((r00*x9762))+((r00*x9772))+((r01*x9763))+(((-1.0)*r02*sj3*x9769)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9763*x9768))+((r22*x9771))+x9765+((r21*x9759*x9762))+((r21*x9766))+((r20*x9761)));
evalcond[6]=(((r12*x9771))+((r11*x9759*x9762))+((r10*x9761))+x9760+(((-1.0)*r10*x9763*x9768))+((r11*x9766))+(((-1.0)*x9767)));
evalcond[7]=((((-1.0)*r21*x9761*x9768))+x9760+((r21*x9763))+((r20*x9772))+((r20*x9762))+(((-1.0)*x9767))+(((-1.0)*r22*sj3*x9769)));
evalcond[8]=((((-1.0)*r11*x9761*x9768))+((r10*x9762))+(((-1.0)*x9765))+((r10*x9772))+(((-1.0)*r12*sj3*x9769))+(((-1.0)*sj1*x9764))+((r11*x9763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9773=((-1.0)*r20);
IkReal x9774=x8859;
CheckValue<IkReal> x9776 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9773),IKFAST_ATAN2_MAGTHRESH);
if(!x9776.valid){
continue;
}
IkReal x9775=((-1.0)*(x9776.value));
sj5=gconst1;
cj5=gconst2;
j5=x9775;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9775;
IkReal gconst1=(r21*x9774);
IkReal gconst2=(x9773*x9774);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9777=((-1.0)*r20);
IkReal x9778=x8859;
CheckValue<IkReal> x9780 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9777),IKFAST_ATAN2_MAGTHRESH);
if(!x9780.valid){
continue;
}
IkReal x9779=((-1.0)*(x9780.value));
sj5=gconst1;
cj5=gconst2;
j5=x9779;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9779;
IkReal gconst1=(r21*x9778);
IkReal gconst2=(x9777*x9778);
CheckValue<IkReal> x9788=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9788.valid){
continue;
}
IkReal x9781=x9788.value;
IkReal x9782=(sj3*x9781);
IkReal x9783=(r11*x9782);
IkReal x9784=(r00*x9782);
IkReal x9785=(r01*x9782);
IkReal x9786=(r10*x9782);
IkReal x9787=(r20*r21*x9782);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9783*(r21*r21)))+((r10*r20*r21*x9785))+((r10*x9784*(r20*r20)))+((r00*r20*r21*x9783))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9789=gconst1*gconst1;
IkReal x9790=gconst2*gconst2;
IkReal x9791=((1.0)*cj3);
IkReal x9792=(gconst2*r10);
IkReal x9793=(r01*sj3);
IkReal x9794=(gconst1*r00*sj3);
IkReal x9795=(gconst1*gconst2*r11);
IkReal x9796=(r10*x9790);
IkReal x9797=(r11*x9789);
CheckValue<IkReal> x9798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9791*x9796))+(((-1.0)*r01*x9791*x9797))+(((-1.0)*r02*r12*x9791))+((cj3*gconst1*r01*x9792))+((cj3*r00*x9795)))),-1);
if(!x9798.valid){
continue;
}
CheckValue<IkReal> x9799 = IKatan2WithCheck(IkReal((((r12*x9794))+((gconst2*r12*x9793)))),IkReal((((x9793*x9795))+(((-1.0)*x9793*x9796))+((r00*sj3*x9797))+(((-1.0)*x9792*x9794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9798.value)))+(x9799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9800=IKsin(j4);
IkReal x9801=IKcos(j4);
IkReal x9802=(cj2*sj1);
IkReal x9803=(cj1*sj2);
IkReal x9804=(gconst1*sj3);
IkReal x9805=(cj3*gconst1);
IkReal x9806=(sj1*sj2);
IkReal x9807=(cj3*gconst2);
IkReal x9808=(cj1*cj2);
IkReal x9809=(gconst2*sj3);
IkReal x9810=((1.0)*x9801);
IkReal x9811=((1.0)*x9800);
IkReal x9812=(gconst1*x9800);
IkReal x9813=(cj3*x9800);
IkReal x9814=(x9803+x9802);
IkReal x9815=(x9801*x9809);
evalcond[0]=(((r21*x9812))+(((-1.0)*r22*x9810))+(((-1.0)*gconst2*r20*x9811)));
evalcond[1]=((((-1.0)*gconst2*r10*x9811))+((r11*x9812))+(((-1.0)*r12*x9810)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9811))+(((-1.0)*r02*x9810))+((r01*x9812)));
evalcond[3]=(((r00*x9804))+((r02*x9813))+(((-1.0)*r00*x9807*x9810))+((r01*x9801*x9805))+((r01*x9809)));
evalcond[4]=(((r00*x9805))+(((-1.0)*r01*x9804*x9810))+(((-1.0)*r02*sj3*x9811))+((r01*x9807))+((r00*x9815)));
evalcond[5]=(((r21*x9809))+((r21*x9801*x9805))+((r22*x9813))+(((-1.0)*r20*x9807*x9810))+((r20*x9804))+x9814);
evalcond[6]=(((r10*x9804))+(((-1.0)*x9806))+((r12*x9813))+((r11*x9809))+(((-1.0)*r10*x9807*x9810))+((r11*x9801*x9805))+x9808);
evalcond[7]=(((r10*x9805))+((r11*x9807))+(((-1.0)*r12*sj3*x9811))+x9814+(((-1.0)*r11*x9804*x9810))+((r10*x9815)));
evalcond[8]=(((r21*x9807))+(((-1.0)*x9808))+(((-1.0)*r22*sj3*x9811))+((r20*x9805))+x9806+(((-1.0)*r21*x9804*x9810))+((r20*x9815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9816=gconst2*gconst2;
IkReal x9817=gconst1*gconst1;
IkReal x9818=(gconst1*r00);
IkReal x9819=(r11*sj3);
IkReal x9820=((1.0)*gconst2);
IkReal x9821=(cj3*r12);
IkReal x9822=(cj3*r11);
IkReal x9823=(gconst2*r01);
IkReal x9824=(cj3*r10);
IkReal x9825=(r10*sj3);
CheckValue<IkReal> x9826 = IKatan2WithCheck(IkReal((((x9821*x9823))+((x9818*x9821)))),IkReal((((gconst1*x9822*x9823))+(((-1.0)*r01*x9816*x9824))+((r00*x9817*x9822))+(((-1.0)*x9818*x9820*x9824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9826.valid){
continue;
}
CheckValue<IkReal> x9827=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r01*x9820*x9825))+((r02*r12*sj3))+((r01*x9817*x9819))+(((-1.0)*x9818*x9819*x9820))+((r00*x9816*x9825)))),-1);
if(!x9827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9826.value)+(((1.5707963267949)*(x9827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9828=IKsin(j4);
IkReal x9829=IKcos(j4);
IkReal x9830=(cj2*sj1);
IkReal x9831=(cj1*sj2);
IkReal x9832=(gconst1*sj3);
IkReal x9833=(cj3*gconst1);
IkReal x9834=(sj1*sj2);
IkReal x9835=(cj3*gconst2);
IkReal x9836=(cj1*cj2);
IkReal x9837=(gconst2*sj3);
IkReal x9838=((1.0)*x9829);
IkReal x9839=((1.0)*x9828);
IkReal x9840=(gconst1*x9828);
IkReal x9841=(cj3*x9828);
IkReal x9842=(x9830+x9831);
IkReal x9843=(x9829*x9837);
evalcond[0]=((((-1.0)*r22*x9838))+(((-1.0)*gconst2*r20*x9839))+((r21*x9840)));
evalcond[1]=(((r11*x9840))+(((-1.0)*gconst2*r10*x9839))+(((-1.0)*r12*x9838)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9838))+((r01*x9840))+(((-1.0)*gconst2*r00*x9839)));
evalcond[3]=(((r00*x9832))+((r02*x9841))+((r01*x9837))+(((-1.0)*r00*x9835*x9838))+((r01*x9829*x9833)));
evalcond[4]=((((-1.0)*r02*sj3*x9839))+((r00*x9833))+(((-1.0)*r01*x9832*x9838))+((r01*x9835))+((r00*x9843)));
evalcond[5]=(((r21*x9837))+((r21*x9829*x9833))+(((-1.0)*r20*x9835*x9838))+((r20*x9832))+x9842+((r22*x9841)));
evalcond[6]=(((r11*x9837))+((r10*x9832))+(((-1.0)*r10*x9835*x9838))+(((-1.0)*x9834))+((r11*x9829*x9833))+((r12*x9841))+x9836);
evalcond[7]=(((r11*x9835))+((r10*x9843))+((r10*x9833))+(((-1.0)*r11*x9832*x9838))+(((-1.0)*r12*sj3*x9839))+x9842);
evalcond[8]=((((-1.0)*r21*x9832*x9838))+(((-1.0)*x9836))+((r21*x9835))+((r20*x9843))+(((-1.0)*r22*sj3*x9839))+((r20*x9833))+x9834);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9844 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9844.valid){
continue;
}
CheckValue<IkReal> x9845=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9844.value)+(((1.5707963267949)*(x9845.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9846=IKsin(j4);
IkReal x9847=IKcos(j4);
IkReal x9848=(cj2*sj1);
IkReal x9849=(cj1*sj2);
IkReal x9850=(gconst1*sj3);
IkReal x9851=(cj3*gconst1);
IkReal x9852=(sj1*sj2);
IkReal x9853=(cj3*gconst2);
IkReal x9854=(cj1*cj2);
IkReal x9855=(gconst2*sj3);
IkReal x9856=((1.0)*x9847);
IkReal x9857=((1.0)*x9846);
IkReal x9858=(gconst1*x9846);
IkReal x9859=(cj3*x9846);
IkReal x9860=(x9849+x9848);
IkReal x9861=(x9847*x9855);
evalcond[0]=(((r21*x9858))+(((-1.0)*gconst2*r20*x9857))+(((-1.0)*r22*x9856)));
evalcond[1]=(((r11*x9858))+(((-1.0)*gconst2*r10*x9857))+(((-1.0)*r12*x9856)));
evalcond[2]=((1.0)+(((-1.0)*r02*x9856))+((r01*x9858))+(((-1.0)*gconst2*r00*x9857)));
evalcond[3]=(((r02*x9859))+((r01*x9847*x9851))+((r00*x9850))+((r01*x9855))+(((-1.0)*r00*x9853*x9856)));
evalcond[4]=((((-1.0)*r02*sj3*x9857))+((r00*x9861))+((r00*x9851))+(((-1.0)*r01*x9850*x9856))+((r01*x9853)));
evalcond[5]=(((r21*x9855))+(((-1.0)*r20*x9853*x9856))+((r21*x9847*x9851))+((r20*x9850))+((r22*x9859))+x9860);
evalcond[6]=(((r10*x9850))+((r11*x9855))+(((-1.0)*x9852))+((r11*x9847*x9851))+(((-1.0)*r10*x9853*x9856))+x9854+((r12*x9859)));
evalcond[7]=(((r10*x9851))+((r11*x9853))+((r10*x9861))+(((-1.0)*r11*x9850*x9856))+x9860+(((-1.0)*r12*sj3*x9857)));
evalcond[8]=(((r21*x9853))+(((-1.0)*x9854))+(((-1.0)*r22*sj3*x9857))+((r20*x9851))+(((-1.0)*r21*x9850*x9856))+((r20*x9861))+x9852);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9862=((-1.0)*r20);
IkReal x9863=((-1.0)*px);
CheckValue<IkReal> x9865 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9862),IKFAST_ATAN2_MAGTHRESH);
if(!x9865.valid){
continue;
}
IkReal x9864=((-1.0)*(x9865.value));
sj5=gconst1;
cj5=gconst2;
j5=x9864;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9863);
rxp1_1=(px*r21);
rxp1_2=(r11*x9863);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9864;
IkReal gconst1=r21;
IkReal gconst2=x9862;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9866=((-1.0)*r20);
IkReal x9867=((-1.0)*px);
CheckValue<IkReal> x9869 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9866),IKFAST_ATAN2_MAGTHRESH);
if(!x9869.valid){
continue;
}
IkReal x9868=((-1.0)*(x9869.value));
sj5=gconst1;
cj5=gconst2;
j5=x9868;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9867);
rxp1_1=(px*r21);
rxp1_2=(r11*x9867);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9868;
IkReal gconst1=r21;
IkReal gconst2=x9866;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9870=((-1.0)*r20);
IkReal x9871=((-1.0)*px);
CheckValue<IkReal> x9873 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9870),IKFAST_ATAN2_MAGTHRESH);
if(!x9873.valid){
continue;
}
IkReal x9872=((-1.0)*(x9873.value));
sj5=gconst1;
cj5=gconst2;
j5=x9872;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9871);
rxp1_1=(px*r21);
rxp1_2=(r11*x9871);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9872;
IkReal gconst1=r21;
IkReal gconst2=x9870;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9874=((-1.0)*r20);
IkReal x9875=((-1.0)*px);
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9874),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
IkReal x9876=((-1.0)*(x9877.value));
sj5=gconst1;
cj5=gconst2;
j5=x9876;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9875);
rxp1_1=(px*r21);
rxp1_2=(r11*x9875);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9876;
IkReal gconst1=r21;
IkReal gconst2=x9874;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9878=((-1.0)*r20);
IkReal x9879=((-1.0)*px);
CheckValue<IkReal> x9881 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9878),IKFAST_ATAN2_MAGTHRESH);
if(!x9881.valid){
continue;
}
IkReal x9880=((-1.0)*(x9881.value));
sj5=gconst1;
cj5=gconst2;
j5=x9880;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9879);
rxp1_1=(px*r21);
rxp1_2=(r11*x9879);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9880;
IkReal gconst1=r21;
IkReal gconst2=x9878;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9882=((-1.0)*r20);
IkReal x9883=((-1.0)*px);
CheckValue<IkReal> x9885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9882),IKFAST_ATAN2_MAGTHRESH);
if(!x9885.valid){
continue;
}
IkReal x9884=((-1.0)*(x9885.value));
sj5=gconst1;
cj5=gconst2;
j5=x9884;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9883);
rxp1_1=(px*r21);
rxp1_2=(r11*x9883);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9884;
IkReal gconst1=r21;
IkReal gconst2=x9882;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9888=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9888.valid){
continue;
}
IkReal x9886=x9888.value;
IkReal x9887=(sj0*x9886);
cj4array[0]=(((cj1*sj2*x9887))+((cj2*sj1*x9887)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9889=IKsin(j4);
IkReal x9890=IKcos(j4);
IkReal x9891=(gconst1*x9889);
IkReal x9892=((1.0)*x9890);
IkReal x9893=((1.0)*gconst2*x9889);
evalcond[0]=((-1.0)*r02*x9889);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9892)));
evalcond[2]=((((-1.0)*r20*x9893))+((r21*x9891)));
evalcond[3]=(((r11*x9891))+(((-1.0)*r10*x9893)));
evalcond[4]=((((-1.0)*gconst1*r21*x9892))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9895=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9895.valid){
continue;
}
IkReal x9894=x9895.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9894))+((cj1*cj2*x9894)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9896=IKsin(j4);
IkReal x9897=IKcos(j4);
IkReal x9898=(gconst2*r10);
IkReal x9899=((1.0)*sj0);
IkReal x9900=((1.0)*x9896);
IkReal x9901=(gconst1*x9896);
IkReal x9902=((1.0)*x9897);
evalcond[0]=((-1.0)*r02*x9896);
evalcond[1]=((((-1.0)*r02*x9902))+(((-1.0)*x9899)));
evalcond[2]=((((-1.0)*gconst2*r20*x9900))+((r21*x9901)));
evalcond[3]=(((r11*x9901))+(((-1.0)*x9898*x9900)));
evalcond[4]=((((-1.0)*cj2*sj1*x9899))+(((-1.0)*cj1*sj2*x9899))+((x9897*x9898))+(((-1.0)*gconst1*r11*x9902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9903=IKPowWithIntegerCheck(r02,-1);
if(!x9903.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9903.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9904=IKsin(j4);
IkReal x9905=IKcos(j4);
IkReal x9906=(gconst2*r10);
IkReal x9907=((1.0)*sj0);
IkReal x9908=(gconst1*r11);
IkReal x9909=(gconst1*r21);
IkReal x9910=(gconst2*r20);
IkReal x9911=((1.0)*x9904);
IkReal x9912=((1.0)*x9905);
evalcond[0]=((-1.0)*r02*x9904);
evalcond[1]=(((x9904*x9909))+(((-1.0)*x9910*x9911)));
evalcond[2]=(((x9904*x9908))+(((-1.0)*x9906*x9911)));
evalcond[3]=((((-1.0)*x9909*x9912))+((x9905*x9910))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((x9905*x9906))+(((-1.0)*x9908*x9912))+(((-1.0)*cj2*sj1*x9907))+(((-1.0)*cj1*sj2*x9907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9913=((-1.0)*r20);
IkReal x9914=((-1.0)*px);
CheckValue<IkReal> x9916 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9913),IKFAST_ATAN2_MAGTHRESH);
if(!x9916.valid){
continue;
}
IkReal x9915=((-1.0)*(x9916.value));
sj5=gconst1;
cj5=gconst2;
j5=x9915;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9914);
rxp1_1=(px*r21);
rxp1_2=(r11*x9914);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9915;
IkReal gconst1=r21;
IkReal gconst2=x9913;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9917=((-1.0)*r20);
IkReal x9918=((-1.0)*px);
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9917),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
IkReal x9919=((-1.0)*(x9920.value));
sj5=gconst1;
cj5=gconst2;
j5=x9919;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9918);
rxp1_1=(px*r21);
rxp1_2=(r11*x9918);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9919;
IkReal gconst1=r21;
IkReal gconst2=x9917;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9921=((-1.0)*r20);
IkReal x9922=((-1.0)*px);
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9921),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
IkReal x9923=((-1.0)*(x9924.value));
sj5=gconst1;
cj5=gconst2;
j5=x9923;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9922);
rxp1_1=(px*r21);
rxp1_2=(r11*x9922);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9923;
IkReal gconst1=r21;
IkReal gconst2=x9921;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9927=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9927.valid){
continue;
}
IkReal x9925=x9927.value;
IkReal x9926=(sj0*x9925);
cj4array[0]=(((cj2*sj1*x9926))+((cj1*sj2*x9926)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9928=IKsin(j4);
IkReal x9929=IKcos(j4);
IkReal x9930=((1.0)*gconst2);
IkReal x9931=(gconst1*r21);
evalcond[0]=(r02*x9928);
evalcond[1]=((((-1.0)*r02*x9929))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r20*x9928*x9930))+((x9928*x9931)));
evalcond[3]=((((-1.0)*r10*x9928*x9930))+((gconst1*r11*x9928)));
evalcond[4]=(((x9929*x9931))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9929*x9930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9933=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9933.valid){
continue;
}
IkReal x9932=x9933.value;
cj4array[0]=(((cj1*cj2*x9932))+(((-1.0)*sj1*sj2*x9932)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9934=IKsin(j4);
IkReal x9935=IKcos(j4);
IkReal x9936=((1.0)*sj0);
IkReal x9937=(gconst1*x9934);
IkReal x9938=((1.0)*x9935);
IkReal x9939=((1.0)*gconst2*x9934);
evalcond[0]=(r02*x9934);
evalcond[1]=((((-1.0)*x9936))+(((-1.0)*r02*x9938)));
evalcond[2]=(((r21*x9937))+(((-1.0)*r20*x9939)));
evalcond[3]=((((-1.0)*r10*x9939))+((r11*x9937)));
evalcond[4]=((((-1.0)*cj2*sj1*x9936))+(((-1.0)*cj1*sj2*x9936))+((gconst1*r11*x9935))+(((-1.0)*gconst2*r10*x9938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9940=IKPowWithIntegerCheck(r02,-1);
if(!x9940.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9940.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9941=IKsin(j4);
IkReal x9942=IKcos(j4);
IkReal x9943=(gconst1*r21);
IkReal x9944=((1.0)*sj0);
IkReal x9945=(gconst1*r11);
IkReal x9946=((1.0)*gconst2*r10);
IkReal x9947=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9941);
evalcond[1]=((((-1.0)*x9941*x9947))+((x9941*x9943)));
evalcond[2]=((((-1.0)*x9941*x9946))+((x9941*x9945)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9942*x9943))+(((-1.0)*x9942*x9947)));
evalcond[4]=((((-1.0)*cj2*sj1*x9944))+(((-1.0)*cj1*sj2*x9944))+((x9942*x9945))+(((-1.0)*x9942*x9946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9949=IKPowWithIntegerCheck(r02,-1);
if(!x9949.valid){
continue;
}
IkReal x9948=x9949.value;
CheckValue<IkReal> x9950=IKPowWithIntegerCheck(cj3,-1);
if(!x9950.valid){
continue;
}
if( IKabs((x9948*(x9950.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9948)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9948*(x9950.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9948))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9948*(x9950.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9948));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9951=IKsin(j4);
IkReal x9952=IKcos(j4);
IkReal x9953=(gconst2*r10);
IkReal x9954=(gconst1*r11);
IkReal x9955=(sj1*sj2);
IkReal x9956=(gconst2*r20);
IkReal x9957=(cj2*sj1);
IkReal x9958=((1.0)*sj0);
IkReal x9959=(gconst1*r20);
IkReal x9960=(gconst2*r11);
IkReal x9961=(gconst1*r21);
IkReal x9962=((1.0)*cj0);
IkReal x9963=(gconst1*r10);
IkReal x9964=(cj1*sj2);
IkReal x9965=(gconst2*r21);
IkReal x9966=(sj3*x9952);
IkReal x9967=((1.0)*cj1*cj2);
IkReal x9968=(cj3*x9952);
IkReal x9969=(r02*x9951);
IkReal x9970=((1.0)*x9951);
evalcond[0]=((((-1.0)*r02*x9952))+(((-1.0)*x9958)));
evalcond[1]=(((x9951*x9961))+(((-1.0)*x9956*x9970)));
evalcond[2]=(cj0+((x9951*x9954))+(((-1.0)*x9953*x9970)));
evalcond[3]=(((cj0*x9955))+(((-1.0)*cj1*cj2*x9962))+((cj3*x9969)));
evalcond[4]=((((-1.0)*x9957*x9962))+(((-1.0)*sj3*x9969))+(((-1.0)*x9962*x9964)));
evalcond[5]=((((-1.0)*x9956*x9968))+((sj3*x9959))+x9957+x9964+((sj3*x9965))+((x9961*x9968)));
evalcond[6]=(((cj3*x9959))+(((-1.0)*x9967))+(((-1.0)*x9961*x9966))+x9955+((cj3*x9965))+((x9956*x9966)));
evalcond[7]=((((-1.0)*cj1*cj2*x9958))+((sj0*x9955))+(((-1.0)*x9953*x9968))+((sj3*x9963))+((sj3*x9960))+((x9954*x9968)));
evalcond[8]=((((-1.0)*x9954*x9966))+(((-1.0)*x9957*x9958))+(((-1.0)*x9958*x9964))+((x9953*x9966))+((cj3*x9960))+((cj3*x9963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9971=((1.0)*sj3);
IkReal x9972=((1.0)*gconst2);
CheckValue<IkReal> x9973=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9972))),-1);
if(!x9973.valid){
continue;
}
CheckValue<IkReal> x9974=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9972))),-1);
if(!x9974.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9973.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9971))+(((-1.0)*gconst2*r21*x9971)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9973.value)))+IKsqr(((x9974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9971))+(((-1.0)*gconst2*r21*x9971))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9973.value)), ((x9974.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x9971))+(((-1.0)*gconst2*r21*x9971))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9975=IKsin(j4);
IkReal x9976=IKcos(j4);
IkReal x9977=(gconst2*r10);
IkReal x9978=(gconst1*r11);
IkReal x9979=(sj1*sj2);
IkReal x9980=(gconst2*r20);
IkReal x9981=(cj2*sj1);
IkReal x9982=((1.0)*sj0);
IkReal x9983=(gconst1*r20);
IkReal x9984=(gconst2*r11);
IkReal x9985=(gconst1*r21);
IkReal x9986=((1.0)*cj0);
IkReal x9987=(gconst1*r10);
IkReal x9988=(cj1*sj2);
IkReal x9989=(gconst2*r21);
IkReal x9990=(sj3*x9976);
IkReal x9991=((1.0)*cj1*cj2);
IkReal x9992=(cj3*x9976);
IkReal x9993=(r02*x9975);
IkReal x9994=((1.0)*x9975);
evalcond[0]=((((-1.0)*r02*x9976))+(((-1.0)*x9982)));
evalcond[1]=(((x9975*x9985))+(((-1.0)*x9980*x9994)));
evalcond[2]=(cj0+(((-1.0)*x9977*x9994))+((x9975*x9978)));
evalcond[3]=(((cj3*x9993))+((cj0*x9979))+(((-1.0)*cj1*cj2*x9986)));
evalcond[4]=((((-1.0)*x9981*x9986))+(((-1.0)*sj3*x9993))+(((-1.0)*x9986*x9988)));
evalcond[5]=(((x9985*x9992))+((sj3*x9989))+((sj3*x9983))+x9988+x9981+(((-1.0)*x9980*x9992)));
evalcond[6]=(((cj3*x9989))+((cj3*x9983))+(((-1.0)*x9985*x9990))+x9979+((x9980*x9990))+(((-1.0)*x9991)));
evalcond[7]=(((x9978*x9992))+(((-1.0)*x9977*x9992))+((sj3*x9987))+((sj3*x9984))+((sj0*x9979))+(((-1.0)*cj1*cj2*x9982)));
evalcond[8]=(((cj3*x9987))+((cj3*x9984))+((x9977*x9990))+(((-1.0)*x9981*x9982))+(((-1.0)*x9978*x9990))+(((-1.0)*x9982*x9988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9995=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9995.valid){
continue;
}
CheckValue<IkReal> x9996=IKPowWithIntegerCheck(r02,-1);
if(!x9996.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9995.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x9996.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9995.value)))+IKsqr(((-1.0)*sj0*(x9996.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9995.value)), ((-1.0)*sj0*(x9996.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9997=IKsin(j4);
IkReal x9998=IKcos(j4);
IkReal x9999=(gconst2*r10);
IkReal x10000=(gconst1*r11);
IkReal x10001=(sj1*sj2);
IkReal x10002=(gconst2*r20);
IkReal x10003=(cj2*sj1);
IkReal x10004=((1.0)*sj0);
IkReal x10005=(gconst1*r20);
IkReal x10006=(gconst2*r11);
IkReal x10007=(gconst1*r21);
IkReal x10008=((1.0)*cj0);
IkReal x10009=(gconst1*r10);
IkReal x10010=(cj1*sj2);
IkReal x10011=(gconst2*r21);
IkReal x10012=(sj3*x9998);
IkReal x10013=((1.0)*cj1*cj2);
IkReal x10014=(cj3*x9998);
IkReal x10015=(r02*x9997);
IkReal x10016=((1.0)*x9997);
evalcond[0]=((((-1.0)*r02*x9998))+(((-1.0)*x10004)));
evalcond[1]=((((-1.0)*x10002*x10016))+((x10007*x9997)));
evalcond[2]=(cj0+((x10000*x9997))+(((-1.0)*x10016*x9999)));
evalcond[3]=(((cj0*x10001))+((cj3*x10015))+(((-1.0)*cj1*cj2*x10008)));
evalcond[4]=((((-1.0)*x10003*x10008))+(((-1.0)*x10008*x10010))+(((-1.0)*sj3*x10015)));
evalcond[5]=(((x10007*x10014))+(((-1.0)*x10002*x10014))+x10010+x10003+((sj3*x10011))+((sj3*x10005)));
evalcond[6]=((((-1.0)*x10007*x10012))+((cj3*x10011))+((cj3*x10005))+x10001+((x10002*x10012))+(((-1.0)*x10013)));
evalcond[7]=(((x10000*x10014))+(((-1.0)*x10014*x9999))+(((-1.0)*cj1*cj2*x10004))+((sj3*x10006))+((sj3*x10009))+((sj0*x10001)));
evalcond[8]=((((-1.0)*x10003*x10004))+((cj3*x10006))+((cj3*x10009))+(((-1.0)*x10004*x10010))+((x10012*x9999))+(((-1.0)*x10000*x10012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10017=gconst1*gconst1;
IkReal x10018=r21*r21;
IkReal x10019=gconst2*gconst2;
IkReal x10020=r20*r20;
IkReal x10021=(gconst2*r20);
IkReal x10022=(cj1*cj2);
IkReal x10023=(sj1*sj2);
IkReal x10024=(gconst1*r21);
IkReal x10025=(cj3*gconst2);
IkReal x10026=(cj3*r20);
CheckValue<IkReal> x10027=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x10021*x10024))+((sj3*x10017*x10018))+((sj3*x10019*x10020)))),-1);
if(!x10027.valid){
continue;
}
CheckValue<IkReal> x10028 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x10022))+((gconst1*r22*x10026))+((r22*x10023))+((r21*r22*x10025)))),IkReal(((((-1.0)*x10021*x10023))+((x10021*x10022))+(((-1.0)*gconst1*x10020*x10025))+(((-1.0)*r21*x10019*x10026))+((x10023*x10024))+((r21*x10017*x10026))+(((-1.0)*x10022*x10024))+((gconst1*x10018*x10025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10027.value)))+(x10028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10029=IKsin(j4);
IkReal x10030=IKcos(j4);
IkReal x10031=(cj3*gconst1);
IkReal x10032=(gconst1*r01);
IkReal x10033=(gconst1*r11);
IkReal x10034=(sj1*sj2);
IkReal x10035=(cj3*gconst2);
IkReal x10036=(gconst1*sj3);
IkReal x10037=(gconst2*sj3);
IkReal x10038=((1.0)*sj0);
IkReal x10039=(cj1*sj2);
IkReal x10040=((1.0)*x10030);
IkReal x10041=((1.0)*x10029);
IkReal x10042=((1.0)*cj1*cj2);
IkReal x10043=(cj3*x10029);
IkReal x10044=((1.0)*cj2*sj1);
IkReal x10045=(x10030*x10037);
evalcond[0]=(((gconst1*r21*x10029))+(((-1.0)*r22*x10040))+(((-1.0)*gconst2*r20*x10041)));
evalcond[1]=((((-1.0)*gconst2*r10*x10041))+(((-1.0)*r12*x10040))+cj0+((x10029*x10033)));
evalcond[2]=((((-1.0)*r02*x10040))+((x10029*x10032))+(((-1.0)*gconst2*r00*x10041))+(((-1.0)*x10038)));
evalcond[3]=(((cj2*sj1))+((r21*x10030*x10031))+((r21*x10037))+((r20*x10036))+x10039+(((-1.0)*r20*x10035*x10040))+((r22*x10043)));
evalcond[4]=((((-1.0)*r21*x10036*x10040))+(((-1.0)*r22*sj3*x10041))+((r21*x10035))+((r20*x10031))+x10034+((r20*x10045))+(((-1.0)*x10042)));
evalcond[5]=(((r01*x10030*x10031))+((cj0*x10034))+(((-1.0)*cj0*x10042))+((r00*x10036))+((r01*x10037))+(((-1.0)*r00*x10035*x10040))+((r02*x10043)));
evalcond[6]=((((-1.0)*r10*x10035*x10040))+((sj0*x10034))+((r10*x10036))+((r11*x10037))+((r12*x10043))+((r11*x10030*x10031))+(((-1.0)*cj1*cj2*x10038)));
evalcond[7]=((((-1.0)*r02*sj3*x10041))+(((-1.0)*cj0*x10044))+((r00*x10045))+((r00*x10031))+((r01*x10035))+(((-1.0)*cj0*x10039))+(((-1.0)*sj3*x10032*x10040)));
evalcond[8]=(((r10*x10045))+((r10*x10031))+(((-1.0)*r12*sj3*x10041))+(((-1.0)*cj2*sj1*x10038))+(((-1.0)*x10038*x10039))+((r11*x10035))+(((-1.0)*sj3*x10033*x10040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10046=((1.0)*gconst2);
CheckValue<IkReal> x10047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10046))+(((-1.0)*gconst1*r10)))),-1);
if(!x10047.valid){
continue;
}
CheckValue<IkReal> x10048 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10046))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10047.value)))+(x10048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10049=IKsin(j4);
IkReal x10050=IKcos(j4);
IkReal x10051=(cj3*gconst1);
IkReal x10052=(gconst1*r01);
IkReal x10053=(gconst1*r11);
IkReal x10054=(sj1*sj2);
IkReal x10055=(cj3*gconst2);
IkReal x10056=(gconst1*sj3);
IkReal x10057=(gconst2*sj3);
IkReal x10058=((1.0)*sj0);
IkReal x10059=(cj1*sj2);
IkReal x10060=((1.0)*x10050);
IkReal x10061=((1.0)*x10049);
IkReal x10062=((1.0)*cj1*cj2);
IkReal x10063=(cj3*x10049);
IkReal x10064=((1.0)*cj2*sj1);
IkReal x10065=(x10050*x10057);
evalcond[0]=(((gconst1*r21*x10049))+(((-1.0)*r22*x10060))+(((-1.0)*gconst2*r20*x10061)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10061))+(((-1.0)*r12*x10060))+((x10049*x10053)));
evalcond[2]=((((-1.0)*x10058))+(((-1.0)*gconst2*r00*x10061))+((x10049*x10052))+(((-1.0)*r02*x10060)));
evalcond[3]=(((cj2*sj1))+((r20*x10056))+(((-1.0)*r20*x10055*x10060))+((r22*x10063))+x10059+((r21*x10057))+((r21*x10050*x10051)));
evalcond[4]=((((-1.0)*r22*sj3*x10061))+((r20*x10051))+(((-1.0)*r21*x10056*x10060))+((r20*x10065))+(((-1.0)*x10062))+x10054+((r21*x10055)));
evalcond[5]=((((-1.0)*cj0*x10062))+(((-1.0)*r00*x10055*x10060))+((r01*x10057))+((r01*x10050*x10051))+((r00*x10056))+((r02*x10063))+((cj0*x10054)));
evalcond[6]=(((r12*x10063))+((r10*x10056))+(((-1.0)*cj1*cj2*x10058))+((sj0*x10054))+(((-1.0)*r10*x10055*x10060))+((r11*x10050*x10051))+((r11*x10057)));
evalcond[7]=((((-1.0)*cj0*x10064))+((r00*x10065))+((r01*x10055))+((r00*x10051))+(((-1.0)*sj3*x10052*x10060))+(((-1.0)*cj0*x10059))+(((-1.0)*r02*sj3*x10061)));
evalcond[8]=(((r10*x10065))+(((-1.0)*x10058*x10059))+((r10*x10051))+(((-1.0)*r12*sj3*x10061))+(((-1.0)*sj3*x10053*x10060))+((r11*x10055))+(((-1.0)*cj2*sj1*x10058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10066=((1.0)*gconst2);
CheckValue<IkReal> x10067=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10066)))),-1);
if(!x10067.valid){
continue;
}
CheckValue<IkReal> x10068 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10067.value)))+(x10068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10069=IKsin(j4);
IkReal x10070=IKcos(j4);
IkReal x10071=(cj3*gconst1);
IkReal x10072=(gconst1*r01);
IkReal x10073=(gconst1*r11);
IkReal x10074=(sj1*sj2);
IkReal x10075=(cj3*gconst2);
IkReal x10076=(gconst1*sj3);
IkReal x10077=(gconst2*sj3);
IkReal x10078=((1.0)*sj0);
IkReal x10079=(cj1*sj2);
IkReal x10080=((1.0)*x10070);
IkReal x10081=((1.0)*x10069);
IkReal x10082=((1.0)*cj1*cj2);
IkReal x10083=(cj3*x10069);
IkReal x10084=((1.0)*cj2*sj1);
IkReal x10085=(x10070*x10077);
evalcond[0]=((((-1.0)*gconst2*r20*x10081))+((gconst1*r21*x10069))+(((-1.0)*r22*x10080)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10081))+(((-1.0)*r12*x10080))+((x10069*x10073)));
evalcond[2]=((((-1.0)*x10078))+(((-1.0)*r02*x10080))+(((-1.0)*gconst2*r00*x10081))+((x10069*x10072)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x10075*x10080))+((r20*x10076))+((r21*x10070*x10071))+x10079+((r21*x10077))+((r22*x10083)));
evalcond[4]=(((r20*x10071))+((r20*x10085))+(((-1.0)*x10082))+x10074+(((-1.0)*r21*x10076*x10080))+((r21*x10075))+(((-1.0)*r22*sj3*x10081)));
evalcond[5]=(((r00*x10076))+((r01*x10077))+((r02*x10083))+(((-1.0)*r00*x10075*x10080))+((cj0*x10074))+((r01*x10070*x10071))+(((-1.0)*cj0*x10082)));
evalcond[6]=(((r10*x10076))+((r11*x10070*x10071))+(((-1.0)*cj1*cj2*x10078))+((sj0*x10074))+((r11*x10077))+((r12*x10083))+(((-1.0)*r10*x10075*x10080)));
evalcond[7]=(((r00*x10085))+((r00*x10071))+((r01*x10075))+(((-1.0)*cj0*x10079))+(((-1.0)*r02*sj3*x10081))+(((-1.0)*sj3*x10072*x10080))+(((-1.0)*cj0*x10084)));
evalcond[8]=(((r10*x10071))+(((-1.0)*r12*sj3*x10081))+(((-1.0)*sj3*x10073*x10080))+(((-1.0)*x10078*x10079))+(((-1.0)*cj2*sj1*x10078))+((r11*x10075))+((r10*x10085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10086=((-1.0)*r21);
IkReal x10088 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10088)==0){
continue;
}
IkReal x10087=pow(x10088,-0.5);
CheckValue<IkReal> x10089 = IKatan2WithCheck(IkReal(x10086),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10089.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10089.value))));
IkReal gconst4=(x10086*x10087);
IkReal gconst5=((1.0)*r20*x10087);
CheckValue<IkReal> x10090 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10090.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10090.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10091=((-1.0)*r21);
CheckValue<IkReal> x10094 = IKatan2WithCheck(IkReal(x10091),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10094.valid){
continue;
}
IkReal x10092=((1.0)*(x10094.value));
IkReal x10093=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10092)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10092)));
IkReal gconst4=(x10091*x10093);
IkReal gconst5=((1.0)*r20*x10093);
IkReal x10095=r22*r22;
IkReal x10096=((1.0)*x10095);
CheckValue<IkReal> x10100=IKPowWithIntegerCheck(((-1.0)+x10095),-1);
if(!x10100.valid){
continue;
}
IkReal x10097=x10100.value;
if((((1.0)+(((-1.0)*x10096)))) < -0.00001)
continue;
IkReal x10098=IKsqrt(((1.0)+(((-1.0)*x10096))));
IkReal x10099=(cj0*x10097*x10098);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x10096*x10099))+x10099))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10101=((-1.0)*r21);
CheckValue<IkReal> x10104 = IKatan2WithCheck(IkReal(x10101),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10104.valid){
continue;
}
IkReal x10102=((1.0)*(x10104.value));
IkReal x10103=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10102)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10102)));
IkReal gconst4=(x10101*x10103);
IkReal gconst5=((1.0)*r20*x10103);
IkReal x10105=r22*r22;
IkReal x10106=((1.0)*x10105);
CheckValue<IkReal> x10110=IKPowWithIntegerCheck(((-1.0)+x10105),-1);
if(!x10110.valid){
continue;
}
IkReal x10107=x10110.value;
if((((1.0)+(((-1.0)*x10106)))) < -0.00001)
continue;
IkReal x10108=IKsqrt(((1.0)+(((-1.0)*x10106))));
IkReal x10109=(sj0*x10107*x10108);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10106*x10109))+x10109))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10111=((-1.0)*r21);
CheckValue<IkReal> x10114 = IKatan2WithCheck(IkReal(x10111),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10114.valid){
continue;
}
IkReal x10112=((1.0)*(x10114.value));
IkReal x10113=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10112)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10112)));
IkReal gconst4=(x10111*x10113);
IkReal gconst5=((1.0)*r20*x10113);
IkReal x10115=r22*r22;
IkReal x10116=(r12*sj0);
IkReal x10117=(cj0*r02);
CheckValue<IkReal> x10121=IKPowWithIntegerCheck(((-1.0)+x10115),-1);
if(!x10121.valid){
continue;
}
IkReal x10118=x10121.value;
if((((1.0)+(((-1.0)*x10115)))) < -0.00001)
continue;
IkReal x10119=IKsqrt(((1.0)+(((-1.0)*x10115))));
IkReal x10120=(r22*x10118*x10119);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10117*x10120))+((x10116*x10120)))))+(IKabs(((((-1.0)*x10116))+(((-1.0)*x10117))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10122=((-1.0)*r21);
CheckValue<IkReal> x10125 = IKatan2WithCheck(IkReal(x10122),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10125.valid){
continue;
}
IkReal x10123=((1.0)*(x10125.value));
IkReal x10124=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10123)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10123)));
IkReal gconst4=(x10122*x10124);
IkReal gconst5=((1.0)*r20*x10124);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10126=((-1.0)*r21);
CheckValue<IkReal> x10129 = IKatan2WithCheck(IkReal(x10126),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10129.valid){
continue;
}
IkReal x10127=((1.0)*(x10129.value));
IkReal x10128=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10127)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10127)));
IkReal gconst4=(x10126*x10128);
IkReal gconst5=((1.0)*r20*x10128);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10130=((-1.0)*r21);
CheckValue<IkReal> x10133 = IKatan2WithCheck(IkReal(x10130),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10133.valid){
continue;
}
IkReal x10131=((1.0)*(x10133.value));
IkReal x10132=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10131)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10131)));
IkReal gconst4=(x10130*x10132);
IkReal gconst5=((1.0)*r20*x10132);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10134=((-1.0)*r21);
CheckValue<IkReal> x10137 = IKatan2WithCheck(IkReal(x10134),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10137.valid){
continue;
}
IkReal x10135=((1.0)*(x10137.value));
IkReal x10136=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10135)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10135)));
IkReal gconst4=(x10134*x10136);
IkReal gconst5=((1.0)*r20*x10136);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10138=((-1.0)*r21);
CheckValue<IkReal> x10141 = IKatan2WithCheck(IkReal(x10138),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10141.valid){
continue;
}
IkReal x10139=((1.0)*(x10141.value));
IkReal x10140=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10139)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10139)));
IkReal gconst4=(x10138*x10140);
IkReal gconst5=((1.0)*r20*x10140);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10142=((-1.0)*r21);
CheckValue<IkReal> x10145 = IKatan2WithCheck(IkReal(x10142),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10145.valid){
continue;
}
IkReal x10143=((1.0)*(x10145.value));
IkReal x10144=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10143)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10143)));
IkReal gconst4=(x10142*x10144);
IkReal gconst5=((1.0)*r20*x10144);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10146=(gconst5*r10);
IkReal x10147=(gconst4*r11);
CheckValue<IkReal> x10148=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10146*x10146)+(((-2.0)*x10146*x10147))+(x10147*x10147))),-1);
if(!x10148.valid){
continue;
}
CheckValue<IkReal> x10149 = IKatan2WithCheck(IkReal((x10146+(((-1.0)*x10147)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10148.value)))+(x10149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10150=IKsin(j4);
IkReal x10151=IKcos(j4);
IkReal x10152=(gconst4*r11);
IkReal x10153=((1.0)*cj1);
IkReal x10154=(gconst5*r10);
IkReal x10155=(gconst4*r01);
IkReal x10156=(gconst5*r00);
IkReal x10157=(gconst4*r21);
IkReal x10158=(gconst5*r20);
IkReal x10159=((1.0)*x10151);
IkReal x10160=((1.0)*x10150);
evalcond[0]=(((x10150*x10157))+(((-1.0)*x10158*x10160))+(((-1.0)*r22*x10159)));
evalcond[1]=((((-1.0)*x10156*x10160))+((x10150*x10155))+(((-1.0)*r02*x10159)));
evalcond[2]=(((x10151*x10154))+(((-1.0)*r12*x10160))+(((-1.0)*x10152*x10159)));
evalcond[3]=((1.0)+((x10150*x10152))+(((-1.0)*x10154*x10160))+(((-1.0)*r12*x10159)));
evalcond[4]=((((-1.0)*cj2*x10153))+((x10151*x10158))+(((-1.0)*r22*x10160))+((sj1*sj2))+(((-1.0)*x10157*x10159)));
evalcond[5]=(((x10151*x10156))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10153))+(((-1.0)*r02*x10160))+(((-1.0)*x10155*x10159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10161=((1.0)*gconst5);
CheckValue<IkReal> x10162=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10161)))),-1);
if(!x10162.valid){
continue;
}
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10161))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10162.value)))+(x10163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10164=IKsin(j4);
IkReal x10165=IKcos(j4);
IkReal x10166=(gconst4*r11);
IkReal x10167=((1.0)*cj1);
IkReal x10168=(gconst5*r10);
IkReal x10169=(gconst4*r01);
IkReal x10170=(gconst5*r00);
IkReal x10171=(gconst4*r21);
IkReal x10172=(gconst5*r20);
IkReal x10173=((1.0)*x10165);
IkReal x10174=((1.0)*x10164);
evalcond[0]=((((-1.0)*r22*x10173))+(((-1.0)*x10172*x10174))+((x10164*x10171)));
evalcond[1]=(((x10164*x10169))+(((-1.0)*x10170*x10174))+(((-1.0)*r02*x10173)));
evalcond[2]=(((x10165*x10168))+(((-1.0)*r12*x10174))+(((-1.0)*x10166*x10173)));
evalcond[3]=((1.0)+((x10164*x10166))+(((-1.0)*r12*x10173))+(((-1.0)*x10168*x10174)));
evalcond[4]=((((-1.0)*r22*x10174))+((x10165*x10172))+((sj1*sj2))+(((-1.0)*cj2*x10167))+(((-1.0)*x10171*x10173)));
evalcond[5]=((((-1.0)*x10169*x10173))+(((-1.0)*sj2*x10167))+((x10165*x10170))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10175.value)+(((1.5707963267949)*(x10176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10177=IKsin(j4);
IkReal x10178=IKcos(j4);
IkReal x10179=(gconst4*r11);
IkReal x10180=((1.0)*cj1);
IkReal x10181=(gconst5*r10);
IkReal x10182=(gconst4*r01);
IkReal x10183=(gconst5*r00);
IkReal x10184=(gconst4*r21);
IkReal x10185=(gconst5*r20);
IkReal x10186=((1.0)*x10178);
IkReal x10187=((1.0)*x10177);
evalcond[0]=(((x10177*x10184))+(((-1.0)*x10185*x10187))+(((-1.0)*r22*x10186)));
evalcond[1]=((((-1.0)*r02*x10186))+(((-1.0)*x10183*x10187))+((x10177*x10182)));
evalcond[2]=((((-1.0)*x10179*x10186))+((x10178*x10181))+(((-1.0)*r12*x10187)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10186))+((x10177*x10179))+(((-1.0)*x10181*x10187)));
evalcond[4]=(((x10178*x10185))+(((-1.0)*cj2*x10180))+((sj1*sj2))+(((-1.0)*x10184*x10186))+(((-1.0)*r22*x10187)));
evalcond[5]=(((x10178*x10183))+(((-1.0)*r02*x10187))+(((-1.0)*cj2*sj1))+(((-1.0)*x10182*x10186))+(((-1.0)*sj2*x10180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10188=((-1.0)*r21);
CheckValue<IkReal> x10191 = IKatan2WithCheck(IkReal(x10188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10191.valid){
continue;
}
IkReal x10189=((1.0)*(x10191.value));
IkReal x10190=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10189)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10189)));
IkReal gconst4=(x10188*x10190);
IkReal gconst5=((1.0)*r20*x10190);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10192=((-1.0)*r21);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal(x10192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
IkReal x10193=((1.0)*(x10195.value));
IkReal x10194=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10193)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10193)));
IkReal gconst4=(x10192*x10194);
IkReal gconst5=((1.0)*r20*x10194);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10196=((-1.0)*r21);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10197=((1.0)*(x10199.value));
IkReal x10198=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10197)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10197)));
IkReal gconst4=(x10196*x10198);
IkReal gconst5=((1.0)*r20*x10198);
IkReal x10200=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10204=IKPowWithIntegerCheck(x10200,-1);
if(!x10204.valid){
continue;
}
IkReal x10201=x10204.value;
IkReal x10202=((1.0)*x10201);
IkReal x10203=((((-1.0)*x10202*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10201))+(((-1.0)*(r12*r12)))+(((-1.0)*x10202*(r11*r11)*(r21*r21))));
j4eval[0]=x10203;
j4eval[1]=r12;
j4eval[2]=x10200;
j4eval[3]=IKsign(x10203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10205=(gconst5*r10);
IkReal x10206=(gconst4*r11);
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(((((-1.0)*x10205))+x10206)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
CheckValue<IkReal> x10208=IKPowWithIntegerCheck(IKsign(((((2.0)*x10205*x10206))+(((-1.0)*(x10205*x10205)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10206*x10206))))),-1);
if(!x10208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10207.value)+(((1.5707963267949)*(x10208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10209=IKcos(j4);
IkReal x10210=IKsin(j4);
IkReal x10211=(gconst4*r11);
IkReal x10212=(gconst5*r10);
IkReal x10213=((1.0)*cj1);
IkReal x10214=(gconst5*r00);
IkReal x10215=(gconst5*r20);
IkReal x10216=((1.0)*x10209);
IkReal x10217=(gconst4*x10209);
IkReal x10218=((1.0)*x10210);
IkReal x10219=(gconst4*x10210);
evalcond[0]=((((-1.0)*x10212*x10216))+((r12*x10210))+((x10209*x10211)));
evalcond[1]=((((-1.0)*r22*x10216))+(((-1.0)*x10215*x10218))+((r21*x10219)));
evalcond[2]=(((r01*x10219))+(((-1.0)*x10214*x10218))+(((-1.0)*r02*x10216)));
evalcond[3]=((1.0)+(((-1.0)*x10212*x10218))+(((-1.0)*r12*x10216))+((x10210*x10211)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10215*x10216))+(((-1.0)*cj2*x10213))+((r21*x10217))+((r22*x10210)));
evalcond[5]=((((-1.0)*sj2*x10213))+((r01*x10217))+(((-1.0)*x10214*x10216))+(((-1.0)*cj2*sj1))+((r02*x10210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10220=((1.0)*gconst5);
CheckValue<IkReal> x10221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10220)))),-1);
if(!x10221.valid){
continue;
}
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10220))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10221.value)))+(x10222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10223=IKcos(j4);
IkReal x10224=IKsin(j4);
IkReal x10225=(gconst4*r11);
IkReal x10226=(gconst5*r10);
IkReal x10227=((1.0)*cj1);
IkReal x10228=(gconst5*r00);
IkReal x10229=(gconst5*r20);
IkReal x10230=((1.0)*x10223);
IkReal x10231=(gconst4*x10223);
IkReal x10232=((1.0)*x10224);
IkReal x10233=(gconst4*x10224);
evalcond[0]=(((r12*x10224))+((x10223*x10225))+(((-1.0)*x10226*x10230)));
evalcond[1]=(((r21*x10233))+(((-1.0)*r22*x10230))+(((-1.0)*x10229*x10232)));
evalcond[2]=(((r01*x10233))+(((-1.0)*x10228*x10232))+(((-1.0)*r02*x10230)));
evalcond[3]=((1.0)+(((-1.0)*x10226*x10232))+((x10224*x10225))+(((-1.0)*r12*x10230)));
evalcond[4]=(((r22*x10224))+(((-1.0)*cj2*x10227))+((sj1*sj2))+((r21*x10231))+(((-1.0)*x10229*x10230)));
evalcond[5]=(((r02*x10224))+(((-1.0)*cj2*sj1))+((r01*x10231))+(((-1.0)*sj2*x10227))+(((-1.0)*x10228*x10230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10234 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10234.valid){
continue;
}
CheckValue<IkReal> x10235=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10234.value)+(((1.5707963267949)*(x10235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10236=IKcos(j4);
IkReal x10237=IKsin(j4);
IkReal x10238=(gconst4*r11);
IkReal x10239=(gconst5*r10);
IkReal x10240=((1.0)*cj1);
IkReal x10241=(gconst5*r00);
IkReal x10242=(gconst5*r20);
IkReal x10243=((1.0)*x10236);
IkReal x10244=(gconst4*x10236);
IkReal x10245=((1.0)*x10237);
IkReal x10246=(gconst4*x10237);
evalcond[0]=((((-1.0)*x10239*x10243))+((r12*x10237))+((x10236*x10238)));
evalcond[1]=(((r21*x10246))+(((-1.0)*r22*x10243))+(((-1.0)*x10242*x10245)));
evalcond[2]=((((-1.0)*x10241*x10245))+((r01*x10246))+(((-1.0)*r02*x10243)));
evalcond[3]=((1.0)+((x10237*x10238))+(((-1.0)*r12*x10243))+(((-1.0)*x10239*x10245)));
evalcond[4]=((((-1.0)*cj2*x10240))+((r22*x10237))+((sj1*sj2))+((r21*x10244))+(((-1.0)*x10242*x10243)));
evalcond[5]=((((-1.0)*x10241*x10243))+(((-1.0)*cj2*sj1))+((r02*x10237))+(((-1.0)*sj2*x10240))+((r01*x10244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10247=((-1.0)*r21);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(x10247),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
IkReal x10248=((1.0)*(x10250.value));
IkReal x10249=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10248)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10248)));
IkReal gconst4=(x10247*x10249);
IkReal gconst5=((1.0)*r20*x10249);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10251=((-1.0)*r21);
CheckValue<IkReal> x10254 = IKatan2WithCheck(IkReal(x10251),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10254.valid){
continue;
}
IkReal x10252=((1.0)*(x10254.value));
IkReal x10253=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10252)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10252)));
IkReal gconst4=(x10251*x10253);
IkReal gconst5=((1.0)*r20*x10253);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10255=((-1.0)*r21);
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal(x10255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
IkReal x10256=((1.0)*(x10258.value));
IkReal x10257=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10256)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10256)));
IkReal gconst4=(x10255*x10257);
IkReal gconst5=((1.0)*r20*x10257);
IkReal x10259=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10263=IKPowWithIntegerCheck(x10259,-1);
if(!x10263.valid){
continue;
}
IkReal x10260=x10263.value;
IkReal x10261=((1.0)*x10260);
IkReal x10262=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10260))+(((-1.0)*x10261*(r11*r11)*(r21*r21)))+(((-1.0)*x10261*(r10*r10)*(r20*r20))));
j4eval[0]=x10262;
j4eval[1]=r12;
j4eval[2]=x10259;
j4eval[3]=IKsign(x10262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10264=(gconst5*r10);
IkReal x10265=(gconst4*r11);
CheckValue<IkReal> x10266=IKPowWithIntegerCheck(IKsign(((((2.0)*x10264*x10265))+(((-1.0)*(x10264*x10264)))+(((-1.0)*(x10265*x10265)))+(((-1.0)*(r12*r12))))),-1);
if(!x10266.valid){
continue;
}
CheckValue<IkReal> x10267 = IKatan2WithCheck(IkReal(((((-1.0)*x10264))+x10265)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10266.value)))+(x10267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10268=IKcos(j4);
IkReal x10269=IKsin(j4);
IkReal x10270=(gconst4*r11);
IkReal x10271=(gconst5*r10);
IkReal x10272=(gconst5*r00);
IkReal x10273=(gconst5*r20);
IkReal x10274=((1.0)*x10268);
IkReal x10275=(gconst4*x10268);
IkReal x10276=((1.0)*x10269);
IkReal x10277=(gconst4*x10269);
evalcond[0]=(((r12*x10269))+((x10268*x10270))+(((-1.0)*x10271*x10274)));
evalcond[1]=((((-1.0)*r22*x10274))+(((-1.0)*x10273*x10276))+((r21*x10277)));
evalcond[2]=(((r01*x10277))+(((-1.0)*x10272*x10276))+(((-1.0)*r02*x10274)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10274))+(((-1.0)*x10271*x10276))+((x10269*x10270)));
evalcond[4]=(((r22*x10269))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10273*x10274))+((r21*x10275)));
evalcond[5]=(((r02*x10269))+((r01*x10275))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10272*x10274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10278=((1.0)*gconst5);
CheckValue<IkReal> x10279 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10279.valid){
continue;
}
CheckValue<IkReal> x10280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10278)))),-1);
if(!x10280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10279.value)+(((1.5707963267949)*(x10280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10281=IKcos(j4);
IkReal x10282=IKsin(j4);
IkReal x10283=(gconst4*r11);
IkReal x10284=(gconst5*r10);
IkReal x10285=(gconst5*r00);
IkReal x10286=(gconst5*r20);
IkReal x10287=((1.0)*x10281);
IkReal x10288=(gconst4*x10281);
IkReal x10289=((1.0)*x10282);
IkReal x10290=(gconst4*x10282);
evalcond[0]=(((r12*x10282))+(((-1.0)*x10284*x10287))+((x10281*x10283)));
evalcond[1]=((((-1.0)*r22*x10287))+((r21*x10290))+(((-1.0)*x10286*x10289)));
evalcond[2]=((((-1.0)*r02*x10287))+(((-1.0)*x10285*x10289))+((r01*x10290)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10287))+(((-1.0)*x10284*x10289))+((x10282*x10283)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10282))+((r21*x10288))+(((-1.0)*x10286*x10287)));
evalcond[5]=(((r01*x10288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10282))+(((-1.0)*x10285*x10287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10291 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10291.valid){
continue;
}
CheckValue<IkReal> x10292=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10291.value)+(((1.5707963267949)*(x10292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10293=IKcos(j4);
IkReal x10294=IKsin(j4);
IkReal x10295=(gconst4*r11);
IkReal x10296=(gconst5*r10);
IkReal x10297=(gconst5*r00);
IkReal x10298=(gconst5*r20);
IkReal x10299=((1.0)*x10293);
IkReal x10300=(gconst4*x10293);
IkReal x10301=((1.0)*x10294);
IkReal x10302=(gconst4*x10294);
evalcond[0]=(((r12*x10294))+((x10293*x10295))+(((-1.0)*x10296*x10299)));
evalcond[1]=((((-1.0)*x10298*x10301))+((r21*x10302))+(((-1.0)*r22*x10299)));
evalcond[2]=((((-1.0)*r02*x10299))+((r01*x10302))+(((-1.0)*x10297*x10301)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10299))+(((-1.0)*x10296*x10301))+((x10294*x10295)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10298*x10299))+((cj1*sj2))+((r21*x10300))+((r22*x10294)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x10300))+(((-1.0)*x10297*x10299))+((r02*x10294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10303=((-1.0)*r21);
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal(x10303),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
IkReal x10304=((1.0)*(x10306.value));
IkReal x10305=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10304)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10304)));
IkReal gconst4=(x10303*x10305);
IkReal gconst5=((1.0)*r20*x10305);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10307=((-1.0)*r21);
CheckValue<IkReal> x10310 = IKatan2WithCheck(IkReal(x10307),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10310.valid){
continue;
}
IkReal x10308=((1.0)*(x10310.value));
IkReal x10309=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10308)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10308)));
IkReal gconst4=(x10307*x10309);
IkReal gconst5=((1.0)*r20*x10309);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10311=((-1.0)*r21);
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(x10311),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
IkReal x10312=((1.0)*(x10314.value));
IkReal x10313=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10312)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10312)));
IkReal gconst4=(x10311*x10313);
IkReal gconst5=((1.0)*r20*x10313);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10315=(gconst5*r10);
IkReal x10316=(gconst4*r11);
CheckValue<IkReal> x10317=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10316*x10316)+(((-2.0)*x10315*x10316))+(x10315*x10315))),-1);
if(!x10317.valid){
continue;
}
CheckValue<IkReal> x10318 = IKatan2WithCheck(IkReal((x10315+(((-1.0)*x10316)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10317.value)))+(x10318.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10319=IKsin(j4);
IkReal x10320=IKcos(j4);
IkReal x10321=(gconst4*r11);
IkReal x10322=(gconst5*r10);
IkReal x10323=(gconst4*r01);
IkReal x10324=(gconst5*r00);
IkReal x10325=(gconst4*r21);
IkReal x10326=(gconst5*r20);
IkReal x10327=((1.0)*x10320);
IkReal x10328=((1.0)*x10319);
evalcond[0]=(((x10319*x10325))+(((-1.0)*r22*x10327))+(((-1.0)*x10326*x10328)));
evalcond[1]=((((-1.0)*r02*x10327))+(((-1.0)*x10324*x10328))+((x10319*x10323)));
evalcond[2]=((((-1.0)*x10321*x10327))+((x10320*x10322))+(((-1.0)*r12*x10328)));
evalcond[3]=((1.0)+((x10319*x10321))+(((-1.0)*r12*x10327))+(((-1.0)*x10322*x10328)));
evalcond[4]=(((cj2*sj1))+((x10320*x10326))+((cj1*sj2))+(((-1.0)*r22*x10328))+(((-1.0)*x10325*x10327)));
evalcond[5]=((((-1.0)*r02*x10328))+((x10320*x10324))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10323*x10327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10329=((1.0)*gconst5);
CheckValue<IkReal> x10330=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10329)))),-1);
if(!x10330.valid){
continue;
}
CheckValue<IkReal> x10331 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10330.value)))+(x10331.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10332=IKsin(j4);
IkReal x10333=IKcos(j4);
IkReal x10334=(gconst4*r11);
IkReal x10335=(gconst5*r10);
IkReal x10336=(gconst4*r01);
IkReal x10337=(gconst5*r00);
IkReal x10338=(gconst4*r21);
IkReal x10339=(gconst5*r20);
IkReal x10340=((1.0)*x10333);
IkReal x10341=((1.0)*x10332);
evalcond[0]=((((-1.0)*x10339*x10341))+(((-1.0)*r22*x10340))+((x10332*x10338)));
evalcond[1]=((((-1.0)*x10337*x10341))+(((-1.0)*r02*x10340))+((x10332*x10336)));
evalcond[2]=((((-1.0)*r12*x10341))+(((-1.0)*x10334*x10340))+((x10333*x10335)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10340))+(((-1.0)*x10335*x10341))+((x10332*x10334)));
evalcond[4]=((((-1.0)*x10338*x10340))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10341))+((x10333*x10339)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10341))+(((-1.0)*x10336*x10340))+((x10333*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
CheckValue<IkReal> x10343=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10342.value)+(((1.5707963267949)*(x10343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10344=IKsin(j4);
IkReal x10345=IKcos(j4);
IkReal x10346=(gconst4*r11);
IkReal x10347=(gconst5*r10);
IkReal x10348=(gconst4*r01);
IkReal x10349=(gconst5*r00);
IkReal x10350=(gconst4*r21);
IkReal x10351=(gconst5*r20);
IkReal x10352=((1.0)*x10345);
IkReal x10353=((1.0)*x10344);
evalcond[0]=((((-1.0)*r22*x10352))+(((-1.0)*x10351*x10353))+((x10344*x10350)));
evalcond[1]=(((x10344*x10348))+(((-1.0)*x10349*x10353))+(((-1.0)*r02*x10352)));
evalcond[2]=(((x10345*x10347))+(((-1.0)*x10346*x10352))+(((-1.0)*r12*x10353)));
evalcond[3]=((1.0)+((x10344*x10346))+(((-1.0)*r12*x10352))+(((-1.0)*x10347*x10353)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10353))+((x10345*x10351))+(((-1.0)*x10350*x10352)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10345*x10349))+(((-1.0)*x10348*x10352))+(((-1.0)*r02*x10353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10354=gconst4*gconst4;
IkReal x10355=gconst5*gconst5;
IkReal x10356=(r10*r21);
IkReal x10357=((1.0)*cj3);
IkReal x10358=(r11*r21);
IkReal x10359=(r11*r20);
IkReal x10360=(r22*sj3);
IkReal x10361=(gconst4*r10);
IkReal x10362=((1.0)*sj3);
IkReal x10363=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10355*x10357))+((x10356*x10363))+((x10359*x10363))+(((-1.0)*x10354*x10357*x10358))+(((-1.0)*r12*r22*x10357)))),-1);
if(!x10364.valid){
continue;
}
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal((((gconst5*r11*x10360))+((x10360*x10361)))),IkReal(((((-1.0)*gconst5*r20*x10361*x10362))+((gconst4*gconst5*sj3*x10358))+((sj3*x10354*x10356))+(((-1.0)*x10355*x10359*x10362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10364.value)))+(x10365.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10366=IKsin(j4);
IkReal x10367=IKcos(j4);
IkReal x10368=(sj1*sj2);
IkReal x10369=(gconst5*sj3);
IkReal x10370=(cj3*gconst5);
IkReal x10371=(gconst4*r11);
IkReal x10372=((1.0)*cj1);
IkReal x10373=(gconst4*r01);
IkReal x10374=(cj2*sj1);
IkReal x10375=(gconst4*r21);
IkReal x10376=(gconst4*sj3);
IkReal x10377=(cj3*gconst4);
IkReal x10378=(cj2*x10372);
IkReal x10379=((1.0)*x10367);
IkReal x10380=((1.0)*x10366);
IkReal x10381=(cj3*x10366);
IkReal x10382=(cj3*x10367);
evalcond[0]=(((x10366*x10375))+(((-1.0)*gconst5*r20*x10380))+(((-1.0)*r22*x10379)));
evalcond[1]=((((-1.0)*r02*x10379))+((x10366*x10373))+(((-1.0)*gconst5*r00*x10380)));
evalcond[2]=((1.0)+((x10366*x10371))+(((-1.0)*gconst5*r10*x10380))+(((-1.0)*r12*x10379)));
evalcond[3]=(((x10371*x10382))+((r12*x10381))+((r10*x10376))+((r11*x10369))+(((-1.0)*r10*x10370*x10379)));
evalcond[4]=(((r10*x10377))+(((-1.0)*r12*sj3*x10380))+((r10*x10367*x10369))+((r11*x10370))+(((-1.0)*sj3*x10371*x10379)));
evalcond[5]=(((x10375*x10382))+((r21*x10369))+((cj1*sj2))+((r22*x10381))+((r20*x10376))+x10374+(((-1.0)*r20*x10370*x10379)));
evalcond[6]=((((-1.0)*r00*x10370*x10379))+((r00*x10376))+((r01*x10369))+((r02*x10381))+x10368+((x10373*x10382))+(((-1.0)*x10378)));
evalcond[7]=((((-1.0)*r22*sj3*x10380))+((r20*x10377))+x10368+(((-1.0)*x10378))+((r20*x10367*x10369))+(((-1.0)*sj3*x10375*x10379))+((r21*x10370)));
evalcond[8]=(((r01*x10370))+((r00*x10377))+((r00*x10367*x10369))+(((-1.0)*sj3*x10373*x10379))+(((-1.0)*x10374))+(((-1.0)*r02*sj3*x10380))+(((-1.0)*sj2*x10372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10383=((1.0)*gconst5);
CheckValue<IkReal> x10384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10383)))),-1);
if(!x10384.valid){
continue;
}
CheckValue<IkReal> x10385 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10383))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10384.value)))+(x10385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10386=IKsin(j4);
IkReal x10387=IKcos(j4);
IkReal x10388=(sj1*sj2);
IkReal x10389=(gconst5*sj3);
IkReal x10390=(cj3*gconst5);
IkReal x10391=(gconst4*r11);
IkReal x10392=((1.0)*cj1);
IkReal x10393=(gconst4*r01);
IkReal x10394=(cj2*sj1);
IkReal x10395=(gconst4*r21);
IkReal x10396=(gconst4*sj3);
IkReal x10397=(cj3*gconst4);
IkReal x10398=(cj2*x10392);
IkReal x10399=((1.0)*x10387);
IkReal x10400=((1.0)*x10386);
IkReal x10401=(cj3*x10386);
IkReal x10402=(cj3*x10387);
evalcond[0]=((((-1.0)*gconst5*r20*x10400))+(((-1.0)*r22*x10399))+((x10386*x10395)));
evalcond[1]=((((-1.0)*r02*x10399))+((x10386*x10393))+(((-1.0)*gconst5*r00*x10400)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10400))+(((-1.0)*r12*x10399))+((x10386*x10391)));
evalcond[3]=(((x10391*x10402))+((r11*x10389))+((r10*x10396))+((r12*x10401))+(((-1.0)*r10*x10390*x10399)));
evalcond[4]=(((r11*x10390))+((r10*x10397))+(((-1.0)*r12*sj3*x10400))+(((-1.0)*sj3*x10391*x10399))+((r10*x10387*x10389)));
evalcond[5]=(((r22*x10401))+((r21*x10389))+((cj1*sj2))+x10394+((x10395*x10402))+(((-1.0)*r20*x10390*x10399))+((r20*x10396)));
evalcond[6]=((((-1.0)*x10398))+(((-1.0)*r00*x10390*x10399))+((r02*x10401))+x10388+((x10393*x10402))+((r01*x10389))+((r00*x10396)));
evalcond[7]=((((-1.0)*sj3*x10395*x10399))+(((-1.0)*x10398))+(((-1.0)*r22*sj3*x10400))+((r20*x10387*x10389))+((r21*x10390))+x10388+((r20*x10397)));
evalcond[8]=(((r01*x10390))+((r00*x10387*x10389))+(((-1.0)*sj3*x10393*x10399))+(((-1.0)*x10394))+(((-1.0)*sj2*x10392))+(((-1.0)*r02*sj3*x10400))+((r00*x10397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10403 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10403.valid){
continue;
}
CheckValue<IkReal> x10404=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10403.value)+(((1.5707963267949)*(x10404.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10405=IKsin(j4);
IkReal x10406=IKcos(j4);
IkReal x10407=(sj1*sj2);
IkReal x10408=(gconst5*sj3);
IkReal x10409=(cj3*gconst5);
IkReal x10410=(gconst4*r11);
IkReal x10411=((1.0)*cj1);
IkReal x10412=(gconst4*r01);
IkReal x10413=(cj2*sj1);
IkReal x10414=(gconst4*r21);
IkReal x10415=(gconst4*sj3);
IkReal x10416=(cj3*gconst4);
IkReal x10417=(cj2*x10411);
IkReal x10418=((1.0)*x10406);
IkReal x10419=((1.0)*x10405);
IkReal x10420=(cj3*x10405);
IkReal x10421=(cj3*x10406);
evalcond[0]=(((x10405*x10414))+(((-1.0)*gconst5*r20*x10419))+(((-1.0)*r22*x10418)));
evalcond[1]=((((-1.0)*r02*x10418))+((x10405*x10412))+(((-1.0)*gconst5*r00*x10419)));
evalcond[2]=((1.0)+((x10405*x10410))+(((-1.0)*gconst5*r10*x10419))+(((-1.0)*r12*x10418)));
evalcond[3]=(((x10410*x10421))+(((-1.0)*r10*x10409*x10418))+((r12*x10420))+((r11*x10408))+((r10*x10415)));
evalcond[4]=((((-1.0)*sj3*x10410*x10418))+((r10*x10406*x10408))+(((-1.0)*r12*sj3*x10419))+((r11*x10409))+((r10*x10416)));
evalcond[5]=(((r21*x10408))+((cj1*sj2))+((r22*x10420))+((x10414*x10421))+x10413+((r20*x10415))+(((-1.0)*r20*x10409*x10418)));
evalcond[6]=(((r00*x10415))+((r01*x10408))+((x10412*x10421))+((r02*x10420))+(((-1.0)*x10417))+(((-1.0)*r00*x10409*x10418))+x10407);
evalcond[7]=(((r21*x10409))+(((-1.0)*r22*sj3*x10419))+((r20*x10406*x10408))+(((-1.0)*sj3*x10414*x10418))+(((-1.0)*x10417))+x10407+((r20*x10416)));
evalcond[8]=(((r00*x10416))+((r00*x10406*x10408))+((r01*x10409))+(((-1.0)*sj3*x10412*x10418))+(((-1.0)*sj2*x10411))+(((-1.0)*x10413))+(((-1.0)*r02*sj3*x10419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10422=((-1.0)*r21);
CheckValue<IkReal> x10425 = IKatan2WithCheck(IkReal(x10422),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10425.valid){
continue;
}
IkReal x10423=((1.0)*(x10425.value));
IkReal x10424=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10423)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10423)));
IkReal gconst4=(x10422*x10424);
IkReal gconst5=((1.0)*r20*x10424);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10426=((-1.0)*r21);
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(x10426),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
IkReal x10427=((1.0)*(x10429.value));
IkReal x10428=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10427)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10427)));
IkReal gconst4=(x10426*x10428);
IkReal gconst5=((1.0)*r20*x10428);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10430=((-1.0)*r21);
CheckValue<IkReal> x10433 = IKatan2WithCheck(IkReal(x10430),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10433.valid){
continue;
}
IkReal x10431=((1.0)*(x10433.value));
IkReal x10432=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10431)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10431)));
IkReal gconst4=(x10430*x10432);
IkReal gconst5=((1.0)*r20*x10432);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10434=((-1.0)*r21);
CheckValue<IkReal> x10437 = IKatan2WithCheck(IkReal(x10434),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10437.valid){
continue;
}
IkReal x10435=((1.0)*(x10437.value));
IkReal x10436=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10435)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10435)));
IkReal gconst4=(x10434*x10436);
IkReal gconst5=((1.0)*r20*x10436);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10438=((-1.0)*r21);
CheckValue<IkReal> x10441 = IKatan2WithCheck(IkReal(x10438),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10441.valid){
continue;
}
IkReal x10439=((1.0)*(x10441.value));
IkReal x10440=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10439)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10439)));
IkReal gconst4=(x10438*x10440);
IkReal gconst5=((1.0)*r20*x10440);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10442=((-1.0)*r21);
CheckValue<IkReal> x10445 = IKatan2WithCheck(IkReal(x10442),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10445.valid){
continue;
}
IkReal x10443=((1.0)*(x10445.value));
IkReal x10444=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10443)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10443)));
IkReal gconst4=(x10442*x10444);
IkReal gconst5=((1.0)*r20*x10444);
IkReal x10446=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10450=IKPowWithIntegerCheck(x10446,-1);
if(!x10450.valid){
continue;
}
IkReal x10447=x10450.value;
IkReal x10448=((1.0)*x10447);
IkReal x10449=((((-2.0)*r10*r11*r20*r21*x10447))+(((-1.0)*x10448*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10448*(r10*r10)*(r20*r20))));
j4eval[0]=x10449;
j4eval[1]=r12;
j4eval[2]=x10446;
j4eval[3]=IKsign(x10449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10451=(gconst5*r10);
IkReal x10452=(gconst4*r11);
CheckValue<IkReal> x10453 = IKatan2WithCheck(IkReal(((((-1.0)*x10452))+x10451)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10453.valid){
continue;
}
CheckValue<IkReal> x10454=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10451*x10451)))+(((2.0)*x10451*x10452))+(((-1.0)*(x10452*x10452)))+(((-1.0)*(r12*r12))))),-1);
if(!x10454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10453.value)+(((1.5707963267949)*(x10454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10455=IKsin(j4);
IkReal x10456=IKcos(j4);
IkReal x10457=(gconst4*r11);
IkReal x10458=(gconst5*r10);
IkReal x10459=(gconst4*r01);
IkReal x10460=(gconst5*r00);
IkReal x10461=(gconst4*r21);
IkReal x10462=(gconst5*r20);
IkReal x10463=((1.0)*x10456);
IkReal x10464=((1.0)*x10455);
evalcond[0]=((((-1.0)*r22*x10463))+((x10455*x10461))+(((-1.0)*x10462*x10464)));
evalcond[1]=((((-1.0)*r02*x10463))+(((-1.0)*x10460*x10464))+((x10455*x10459)));
evalcond[2]=((((-1.0)*x10457*x10463))+((x10456*x10458))+(((-1.0)*r12*x10464)));
evalcond[3]=((-1.0)+((x10455*x10457))+(((-1.0)*x10458*x10464))+(((-1.0)*r12*x10463)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10464))+(((-1.0)*x10459*x10463))+((cj1*sj2))+((x10456*x10460)));
evalcond[5]=((((-1.0)*x10461*x10463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10464))+((x10456*x10462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10465=((1.0)*gconst5);
CheckValue<IkReal> x10466 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10465))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10466.valid){
continue;
}
CheckValue<IkReal> x10467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10465))+(((-1.0)*gconst4*r20)))),-1);
if(!x10467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10466.value)+(((1.5707963267949)*(x10467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10468=IKsin(j4);
IkReal x10469=IKcos(j4);
IkReal x10470=(gconst4*r11);
IkReal x10471=(gconst5*r10);
IkReal x10472=(gconst4*r01);
IkReal x10473=(gconst5*r00);
IkReal x10474=(gconst4*r21);
IkReal x10475=(gconst5*r20);
IkReal x10476=((1.0)*x10469);
IkReal x10477=((1.0)*x10468);
evalcond[0]=((((-1.0)*r22*x10476))+(((-1.0)*x10475*x10477))+((x10468*x10474)));
evalcond[1]=((((-1.0)*r02*x10476))+(((-1.0)*x10473*x10477))+((x10468*x10472)));
evalcond[2]=((((-1.0)*x10470*x10476))+(((-1.0)*r12*x10477))+((x10469*x10471)));
evalcond[3]=((-1.0)+((x10468*x10470))+(((-1.0)*x10471*x10477))+(((-1.0)*r12*x10476)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10477))+((cj1*sj2))+(((-1.0)*x10472*x10476))+((x10469*x10473)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10477))+(((-1.0)*x10474*x10476))+((x10469*x10475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10478=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10478.valid){
continue;
}
CheckValue<IkReal> x10479 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10478.value)))+(x10479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10480=IKsin(j4);
IkReal x10481=IKcos(j4);
IkReal x10482=(gconst4*r11);
IkReal x10483=(gconst5*r10);
IkReal x10484=(gconst4*r01);
IkReal x10485=(gconst5*r00);
IkReal x10486=(gconst4*r21);
IkReal x10487=(gconst5*r20);
IkReal x10488=((1.0)*x10481);
IkReal x10489=((1.0)*x10480);
evalcond[0]=((((-1.0)*r22*x10488))+((x10480*x10486))+(((-1.0)*x10487*x10489)));
evalcond[1]=((((-1.0)*x10485*x10489))+((x10480*x10484))+(((-1.0)*r02*x10488)));
evalcond[2]=((((-1.0)*r12*x10489))+(((-1.0)*x10482*x10488))+((x10481*x10483)));
evalcond[3]=((-1.0)+((x10480*x10482))+(((-1.0)*r12*x10488))+(((-1.0)*x10483*x10489)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10484*x10488))+(((-1.0)*r02*x10489))+((x10481*x10485)));
evalcond[5]=((((-1.0)*r22*x10489))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10486*x10488))+((x10481*x10487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10490=((-1.0)*r21);
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(x10490),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
IkReal x10491=((1.0)*(x10493.value));
IkReal x10492=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10491)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10491)));
IkReal gconst4=(x10490*x10492);
IkReal gconst5=((1.0)*r20*x10492);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10494=((-1.0)*r21);
CheckValue<IkReal> x10497 = IKatan2WithCheck(IkReal(x10494),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10497.valid){
continue;
}
IkReal x10495=((1.0)*(x10497.value));
IkReal x10496=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10495)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10495)));
IkReal gconst4=(x10494*x10496);
IkReal gconst5=((1.0)*r20*x10496);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10498=((-1.0)*r21);
CheckValue<IkReal> x10501 = IKatan2WithCheck(IkReal(x10498),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10501.valid){
continue;
}
IkReal x10499=((1.0)*(x10501.value));
IkReal x10500=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10499)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10499)));
IkReal gconst4=(x10498*x10500);
IkReal gconst5=((1.0)*r20*x10500);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10502=(gconst5*r10);
IkReal x10503=(gconst4*r11);
CheckValue<IkReal> x10504=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10503*x10503)+(x10502*x10502)+(((-2.0)*x10502*x10503)))),-1);
if(!x10504.valid){
continue;
}
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal((x10503+(((-1.0)*x10502)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10504.value)))+(x10505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10506=IKcos(j4);
IkReal x10507=IKsin(j4);
IkReal x10508=(gconst4*r11);
IkReal x10509=(gconst5*r10);
IkReal x10510=(gconst5*r00);
IkReal x10511=(gconst5*r20);
IkReal x10512=((1.0)*x10506);
IkReal x10513=(gconst4*x10506);
IkReal x10514=((1.0)*x10507);
IkReal x10515=(gconst4*x10507);
evalcond[0]=(((x10506*x10508))+(((-1.0)*x10509*x10512))+((r12*x10507)));
evalcond[1]=((((-1.0)*x10511*x10514))+(((-1.0)*r22*x10512))+((r21*x10515)));
evalcond[2]=((((-1.0)*x10510*x10514))+(((-1.0)*r02*x10512))+((r01*x10515)));
evalcond[3]=((-1.0)+((x10507*x10508))+(((-1.0)*x10509*x10514))+(((-1.0)*r12*x10512)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10510*x10512))+((cj1*sj2))+((r01*x10513))+((r02*x10507)));
evalcond[5]=((((-1.0)*x10511*x10512))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10507))+((r21*x10513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10516=((1.0)*gconst5);
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10516))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10516))+(((-1.0)*gconst4*r20)))),-1);
if(!x10518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10517.value)+(((1.5707963267949)*(x10518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10519=IKcos(j4);
IkReal x10520=IKsin(j4);
IkReal x10521=(gconst4*r11);
IkReal x10522=(gconst5*r10);
IkReal x10523=(gconst5*r00);
IkReal x10524=(gconst5*r20);
IkReal x10525=((1.0)*x10519);
IkReal x10526=(gconst4*x10519);
IkReal x10527=((1.0)*x10520);
IkReal x10528=(gconst4*x10520);
evalcond[0]=(((x10519*x10521))+((r12*x10520))+(((-1.0)*x10522*x10525)));
evalcond[1]=((((-1.0)*r22*x10525))+((r21*x10528))+(((-1.0)*x10524*x10527)));
evalcond[2]=((((-1.0)*x10523*x10527))+(((-1.0)*r02*x10525))+((r01*x10528)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10525))+((x10520*x10521))+(((-1.0)*x10522*x10527)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10523*x10525))+((r02*x10520))+((cj1*sj2))+((r01*x10526)));
evalcond[5]=(((r22*x10520))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10526))+(((-1.0)*x10524*x10525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10529.valid){
continue;
}
CheckValue<IkReal> x10530 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10529.value)))+(x10530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10531=IKcos(j4);
IkReal x10532=IKsin(j4);
IkReal x10533=(gconst4*r11);
IkReal x10534=(gconst5*r10);
IkReal x10535=(gconst5*r00);
IkReal x10536=(gconst5*r20);
IkReal x10537=((1.0)*x10531);
IkReal x10538=(gconst4*x10531);
IkReal x10539=((1.0)*x10532);
IkReal x10540=(gconst4*x10532);
evalcond[0]=(((x10531*x10533))+((r12*x10532))+(((-1.0)*x10534*x10537)));
evalcond[1]=((((-1.0)*r22*x10537))+(((-1.0)*x10536*x10539))+((r21*x10540)));
evalcond[2]=((((-1.0)*r02*x10537))+((r01*x10540))+(((-1.0)*x10535*x10539)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10537))+(((-1.0)*x10534*x10539))+((x10532*x10533)));
evalcond[4]=(((cj2*sj1))+((r02*x10532))+((cj1*sj2))+((r01*x10538))+(((-1.0)*x10535*x10537)));
evalcond[5]=((((-1.0)*x10536*x10537))+((r22*x10532))+((r21*x10538))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10541=((-1.0)*r21);
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(x10541),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
IkReal x10542=((1.0)*(x10544.value));
IkReal x10543=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10542)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10542)));
IkReal gconst4=(x10541*x10543);
IkReal gconst5=((1.0)*r20*x10543);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10545=((-1.0)*r21);
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(x10545),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
IkReal x10546=((1.0)*(x10548.value));
IkReal x10547=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10546)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10546)));
IkReal gconst4=(x10545*x10547);
IkReal gconst5=((1.0)*r20*x10547);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10549=((-1.0)*r21);
CheckValue<IkReal> x10552 = IKatan2WithCheck(IkReal(x10549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10552.valid){
continue;
}
IkReal x10550=((1.0)*(x10552.value));
IkReal x10551=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10550)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10550)));
IkReal gconst4=(x10549*x10551);
IkReal gconst5=((1.0)*r20*x10551);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10553=(gconst5*r10);
IkReal x10554=(gconst4*r11);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(((((-1.0)*x10553))+x10554)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
CheckValue<IkReal> x10556=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10553*x10554))+(x10553*x10553)+(x10554*x10554))),-1);
if(!x10556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10555.value)+(((1.5707963267949)*(x10556.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10557=IKcos(j4);
IkReal x10558=IKsin(j4);
IkReal x10559=(gconst5*r10);
IkReal x10560=(gconst5*r00);
IkReal x10561=(gconst5*r20);
IkReal x10562=((1.0)*x10557);
IkReal x10563=(gconst4*x10558);
IkReal x10564=(gconst4*x10557);
IkReal x10565=((1.0)*x10558);
evalcond[0]=((((-1.0)*x10559*x10562))+((r12*x10558))+((r11*x10564)));
evalcond[1]=((((-1.0)*x10561*x10565))+(((-1.0)*r22*x10562))+((r21*x10563)));
evalcond[2]=(((r01*x10563))+(((-1.0)*x10560*x10565))+(((-1.0)*r02*x10562)));
evalcond[3]=((-1.0)+(((-1.0)*x10559*x10565))+(((-1.0)*r12*x10562))+((r11*x10563)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10561*x10562))+((r22*x10558))+((cj1*sj2))+((r21*x10564)));
evalcond[5]=(((r01*x10564))+((r02*x10558))+(((-1.0)*x10560*x10562))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10566=((1.0)*gconst5);
CheckValue<IkReal> x10567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10566))+(((-1.0)*gconst4*r20)))),-1);
if(!x10567.valid){
continue;
}
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10566))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10567.value)))+(x10568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10569=IKcos(j4);
IkReal x10570=IKsin(j4);
IkReal x10571=(gconst5*r10);
IkReal x10572=(gconst5*r00);
IkReal x10573=(gconst5*r20);
IkReal x10574=((1.0)*x10569);
IkReal x10575=(gconst4*x10570);
IkReal x10576=(gconst4*x10569);
IkReal x10577=((1.0)*x10570);
evalcond[0]=((((-1.0)*x10571*x10574))+((r11*x10576))+((r12*x10570)));
evalcond[1]=((((-1.0)*r22*x10574))+((r21*x10575))+(((-1.0)*x10573*x10577)));
evalcond[2]=(((r01*x10575))+(((-1.0)*x10572*x10577))+(((-1.0)*r02*x10574)));
evalcond[3]=((-1.0)+(((-1.0)*x10571*x10577))+(((-1.0)*r12*x10574))+((r11*x10575)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10576))+(((-1.0)*x10573*x10574))+((r22*x10570)));
evalcond[5]=(((r01*x10576))+(((-1.0)*sj1*sj2))+((r02*x10570))+((cj1*cj2))+(((-1.0)*x10572*x10574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10578=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10578.valid){
continue;
}
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10578.value)))+(x10579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10580=IKcos(j4);
IkReal x10581=IKsin(j4);
IkReal x10582=(gconst5*r10);
IkReal x10583=(gconst5*r00);
IkReal x10584=(gconst5*r20);
IkReal x10585=((1.0)*x10580);
IkReal x10586=(gconst4*x10581);
IkReal x10587=(gconst4*x10580);
IkReal x10588=((1.0)*x10581);
evalcond[0]=(((r12*x10581))+(((-1.0)*x10582*x10585))+((r11*x10587)));
evalcond[1]=((((-1.0)*r22*x10585))+((r21*x10586))+(((-1.0)*x10584*x10588)));
evalcond[2]=((((-1.0)*r02*x10585))+(((-1.0)*x10583*x10588))+((r01*x10586)));
evalcond[3]=((-1.0)+(((-1.0)*x10582*x10588))+((r11*x10586))+(((-1.0)*r12*x10585)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10587))+((r22*x10581))+(((-1.0)*x10584*x10585)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10581))+((cj1*cj2))+(((-1.0)*x10583*x10585))+((r01*x10587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10589=((-1.0)*r21);
CheckValue<IkReal> x10592 = IKatan2WithCheck(IkReal(x10589),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10592.valid){
continue;
}
IkReal x10590=((1.0)*(x10592.value));
IkReal x10591=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10590)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10590)));
IkReal gconst4=(x10589*x10591);
IkReal gconst5=((1.0)*r20*x10591);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10593=((-1.0)*r21);
CheckValue<IkReal> x10596 = IKatan2WithCheck(IkReal(x10593),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10596.valid){
continue;
}
IkReal x10594=((1.0)*(x10596.value));
IkReal x10595=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10594)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10594)));
IkReal gconst4=(x10593*x10595);
IkReal gconst5=((1.0)*r20*x10595);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10597=((-1.0)*r21);
CheckValue<IkReal> x10600 = IKatan2WithCheck(IkReal(x10597),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10600.valid){
continue;
}
IkReal x10598=((1.0)*(x10600.value));
IkReal x10599=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10598)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10598)));
IkReal gconst4=(x10597*x10599);
IkReal gconst5=((1.0)*r20*x10599);
IkReal x10601=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(x10601,-1);
if(!x10605.valid){
continue;
}
IkReal x10602=x10605.value;
IkReal x10603=((1.0)*x10602);
IkReal x10604=((((-2.0)*r10*r11*r20*r21*x10602))+(((-1.0)*(r12*r12)))+(((-1.0)*x10603*(r10*r10)*(r20*r20)))+(((-1.0)*x10603*(r11*r11)*(r21*r21))));
j4eval[0]=x10604;
j4eval[1]=r12;
j4eval[2]=x10601;
j4eval[3]=IKsign(x10604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10606=(gconst5*r10);
IkReal x10607=(gconst4*r11);
CheckValue<IkReal> x10608=IKPowWithIntegerCheck(IKsign(((((2.0)*x10606*x10607))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10606*x10606)))+(((-1.0)*(x10607*x10607))))),-1);
if(!x10608.valid){
continue;
}
CheckValue<IkReal> x10609 = IKatan2WithCheck(IkReal(((((-1.0)*x10607))+x10606)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10608.value)))+(x10609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10610=IKsin(j4);
IkReal x10611=IKcos(j4);
IkReal x10612=(gconst4*r11);
IkReal x10613=(gconst5*r10);
IkReal x10614=(gconst5*r00);
IkReal x10615=(gconst5*r20);
IkReal x10616=((1.0)*x10611);
IkReal x10617=(gconst4*x10610);
IkReal x10618=((1.0)*x10610);
evalcond[0]=((((-1.0)*x10615*x10618))+(((-1.0)*r22*x10616))+((r21*x10617)));
evalcond[1]=((((-1.0)*x10614*x10618))+(((-1.0)*r02*x10616))+((r01*x10617)));
evalcond[2]=(((x10611*x10613))+(((-1.0)*r12*x10618))+(((-1.0)*x10612*x10616)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10616))+((x10610*x10612))+(((-1.0)*x10613*x10618)));
evalcond[4]=(((cj2*sj1))+((x10611*x10615))+((cj1*sj2))+(((-1.0)*r22*x10618))+(((-1.0)*gconst4*r21*x10616)));
evalcond[5]=(((x10611*x10614))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10618))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10619=((1.0)*gconst5);
CheckValue<IkReal> x10620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10619))+(((-1.0)*gconst4*r20)))),-1);
if(!x10620.valid){
continue;
}
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10620.value)))+(x10621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10622=IKsin(j4);
IkReal x10623=IKcos(j4);
IkReal x10624=(gconst4*r11);
IkReal x10625=(gconst5*r10);
IkReal x10626=(gconst5*r00);
IkReal x10627=(gconst5*r20);
IkReal x10628=((1.0)*x10623);
IkReal x10629=(gconst4*x10622);
IkReal x10630=((1.0)*x10622);
evalcond[0]=(((r21*x10629))+(((-1.0)*x10627*x10630))+(((-1.0)*r22*x10628)));
evalcond[1]=((((-1.0)*r02*x10628))+((r01*x10629))+(((-1.0)*x10626*x10630)));
evalcond[2]=((((-1.0)*x10624*x10628))+(((-1.0)*r12*x10630))+((x10623*x10625)));
evalcond[3]=((-1.0)+((x10622*x10624))+(((-1.0)*x10625*x10630))+(((-1.0)*r12*x10628)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10628))+(((-1.0)*r22*x10630))+((x10623*x10627)));
evalcond[5]=((((-1.0)*r02*x10630))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10628))+((x10623*x10626))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10631=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10631.value)))+(x10632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10633=IKsin(j4);
IkReal x10634=IKcos(j4);
IkReal x10635=(gconst4*r11);
IkReal x10636=(gconst5*r10);
IkReal x10637=(gconst5*r00);
IkReal x10638=(gconst5*r20);
IkReal x10639=((1.0)*x10634);
IkReal x10640=(gconst4*x10633);
IkReal x10641=((1.0)*x10633);
evalcond[0]=(((r21*x10640))+(((-1.0)*x10638*x10641))+(((-1.0)*r22*x10639)));
evalcond[1]=((((-1.0)*r02*x10639))+((r01*x10640))+(((-1.0)*x10637*x10641)));
evalcond[2]=((((-1.0)*x10635*x10639))+(((-1.0)*r12*x10641))+((x10634*x10636)));
evalcond[3]=((-1.0)+(((-1.0)*x10636*x10641))+(((-1.0)*r12*x10639))+((x10633*x10635)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10641))+(((-1.0)*gconst4*r21*x10639))+((x10634*x10638)));
evalcond[5]=((((-1.0)*r02*x10641))+(((-1.0)*gconst4*r01*x10639))+(((-1.0)*sj1*sj2))+((x10634*x10637))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10642=((-1.0)*r21);
IkReal x10643=((-1.0)*px);
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(x10642),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
IkReal x10644=((1.0)*(x10645.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10644)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10643);
rxp1_1=(px*r21);
rxp1_2=(r11*x10643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10644)));
IkReal gconst4=x10642;
IkReal gconst5=((1.0)*r20);
IkReal x10646=((1.0)*cj3);
IkReal x10647=(r10*r20);
IkReal x10648=(r11*r21);
j4eval[0]=((((-1.0)*x10648))+(((-1.0)*x10647)));
j4eval[1]=((((-1.0)*x10646*x10647))+(((-1.0)*x10646*x10648)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10649=((-1.0)*r21);
IkReal x10650=((-1.0)*px);
CheckValue<IkReal> x10652 = IKatan2WithCheck(IkReal(x10649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10652.valid){
continue;
}
IkReal x10651=((1.0)*(x10652.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10651)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10650);
rxp1_1=(px*r21);
rxp1_2=(r11*x10650);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10651)));
IkReal gconst4=x10649;
IkReal gconst5=((1.0)*r20);
IkReal x10653=((1.0)*r11*r21);
IkReal x10654=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10653))+(((-1.0)*x10654)));
j4eval[1]=(((sj3*x10653))+((sj3*x10654)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10655=((-1.0)*r21);
IkReal x10656=((-1.0)*px);
CheckValue<IkReal> x10658 = IKatan2WithCheck(IkReal(x10655),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10658.valid){
continue;
}
IkReal x10657=((1.0)*(x10658.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10657)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10656);
rxp1_1=(px*r21);
rxp1_2=(r11*x10656);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10657)));
IkReal gconst4=x10655;
IkReal gconst5=((1.0)*r20);
IkReal x10659=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10659))+(((-1.0)*r11*r21*x10659)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10660=((1.0)*r10);
CheckValue<IkReal> x10661=IKPowWithIntegerCheck(cj3,-1);
if(!x10661.valid){
continue;
}
CheckValue<IkReal> x10662=IKPowWithIntegerCheck(r02,-1);
if(!x10662.valid){
continue;
}
CheckValue<IkReal> x10663=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10660))),-1);
if(!x10663.valid){
continue;
}
if( IKabs(((x10661.value)*(x10662.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10663.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10660)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10661.value)*(x10662.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10663.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10660))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10661.value)*(x10662.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10663.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10660))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10664=IKsin(j4);
IkReal x10665=IKcos(j4);
IkReal x10666=(cj2*sj1);
IkReal x10667=(cj1*sj2);
IkReal x10668=(gconst5*sj3);
IkReal x10669=(gconst4*r11);
IkReal x10670=(sj1*sj2);
IkReal x10671=((1.0)*gconst5);
IkReal x10672=(cj1*cj2);
IkReal x10673=(gconst4*r21);
IkReal x10674=(cj3*gconst4);
IkReal x10675=(gconst4*sj3);
IkReal x10676=(cj3*gconst5);
IkReal x10677=(r20*x10665);
IkReal x10678=(r10*x10665);
IkReal x10679=(cj3*x10665);
IkReal x10680=(r02*x10664);
IkReal x10681=(x10666+x10667);
IkReal x10682=((1.0)*sj3*x10665);
evalcond[0]=((-1.0)*r02*x10665);
evalcond[1]=(((x10664*x10673))+(((-1.0)*r20*x10664*x10671)));
evalcond[2]=(((cj3*x10680))+(((-1.0)*x10670))+x10672);
evalcond[3]=((((-1.0)*sj3*x10680))+x10681);
evalcond[4]=((-1.0)+((x10664*x10669))+(((-1.0)*r10*x10664*x10671)));
evalcond[5]=(((x10669*x10679))+((r10*x10675))+(((-1.0)*cj3*x10671*x10678))+((r11*x10668)));
evalcond[6]=(((r11*x10676))+((x10668*x10678))+((r10*x10674))+(((-1.0)*x10669*x10682)));
evalcond[7]=((((-1.0)*cj3*x10671*x10677))+((x10673*x10679))+((r20*x10675))+x10681+((r21*x10668)));
evalcond[8]=(((x10668*x10677))+(((-1.0)*x10673*x10682))+(((-1.0)*x10672))+((r20*x10674))+((r21*x10676))+x10670);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10683=((1.0)*gconst5);
IkReal x10684=(gconst4*r11);
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(((((-1.0)*r10*x10683))+x10684),-1);
if(!x10685.valid){
continue;
}
CheckValue<IkReal> x10686=IKPowWithIntegerCheck(((((-1.0)*sj3*x10684))+((gconst5*r10*sj3))),-1);
if(!x10686.valid){
continue;
}
if( IKabs(x10685.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10686.value)*(((((-1.0)*cj3*r11*x10683))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10685.value)+IKsqr(((x10686.value)*(((((-1.0)*cj3*r11*x10683))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10685.value, ((x10686.value)*(((((-1.0)*cj3*r11*x10683))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10687=IKsin(j4);
IkReal x10688=IKcos(j4);
IkReal x10689=(cj2*sj1);
IkReal x10690=(cj1*sj2);
IkReal x10691=(gconst5*sj3);
IkReal x10692=(gconst4*r11);
IkReal x10693=(sj1*sj2);
IkReal x10694=((1.0)*gconst5);
IkReal x10695=(cj1*cj2);
IkReal x10696=(gconst4*r21);
IkReal x10697=(cj3*gconst4);
IkReal x10698=(gconst4*sj3);
IkReal x10699=(cj3*gconst5);
IkReal x10700=(r20*x10688);
IkReal x10701=(r10*x10688);
IkReal x10702=(cj3*x10688);
IkReal x10703=(r02*x10687);
IkReal x10704=(x10689+x10690);
IkReal x10705=((1.0)*sj3*x10688);
evalcond[0]=((-1.0)*r02*x10688);
evalcond[1]=((((-1.0)*r20*x10687*x10694))+((x10687*x10696)));
evalcond[2]=(((cj3*x10703))+(((-1.0)*x10693))+x10695);
evalcond[3]=(x10704+(((-1.0)*sj3*x10703)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10687*x10694))+((x10687*x10692)));
evalcond[5]=((((-1.0)*cj3*x10694*x10701))+((r10*x10698))+((r11*x10691))+((x10692*x10702)));
evalcond[6]=(((r10*x10697))+((x10691*x10701))+((r11*x10699))+(((-1.0)*x10692*x10705)));
evalcond[7]=(((r21*x10691))+(((-1.0)*cj3*x10694*x10700))+((x10696*x10702))+x10704+((r20*x10698)));
evalcond[8]=(((r21*x10699))+((x10691*x10700))+(((-1.0)*x10695))+(((-1.0)*x10696*x10705))+x10693+((r20*x10697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10706=((1.0)*sj3);
IkReal x10707=(gconst4*r11);
IkReal x10708=((1.0)*gconst5*r10);
CheckValue<IkReal> x10709=IKPowWithIntegerCheck((x10707+(((-1.0)*x10708))),-1);
if(!x10709.valid){
continue;
}
CheckValue<IkReal> x10710=IKPowWithIntegerCheck(((((-1.0)*cj3*x10708))+((cj3*x10707))),-1);
if(!x10710.valid){
continue;
}
if( IKabs(x10709.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10710.value)*(((((-1.0)*gconst5*r11*x10706))+(((-1.0)*gconst4*r10*x10706)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10709.value)+IKsqr(((x10710.value)*(((((-1.0)*gconst5*r11*x10706))+(((-1.0)*gconst4*r10*x10706))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10709.value, ((x10710.value)*(((((-1.0)*gconst5*r11*x10706))+(((-1.0)*gconst4*r10*x10706))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10711=IKsin(j4);
IkReal x10712=IKcos(j4);
IkReal x10713=(cj2*sj1);
IkReal x10714=(cj1*sj2);
IkReal x10715=(gconst5*sj3);
IkReal x10716=(gconst4*r11);
IkReal x10717=(sj1*sj2);
IkReal x10718=((1.0)*gconst5);
IkReal x10719=(cj1*cj2);
IkReal x10720=(gconst4*r21);
IkReal x10721=(cj3*gconst4);
IkReal x10722=(gconst4*sj3);
IkReal x10723=(cj3*gconst5);
IkReal x10724=(r20*x10712);
IkReal x10725=(r10*x10712);
IkReal x10726=(cj3*x10712);
IkReal x10727=(r02*x10711);
IkReal x10728=(x10714+x10713);
IkReal x10729=((1.0)*sj3*x10712);
evalcond[0]=((-1.0)*r02*x10712);
evalcond[1]=((((-1.0)*r20*x10711*x10718))+((x10711*x10720)));
evalcond[2]=((((-1.0)*x10717))+x10719+((cj3*x10727)));
evalcond[3]=(x10728+(((-1.0)*sj3*x10727)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10711*x10718))+((x10711*x10716)));
evalcond[5]=(((r10*x10722))+((x10716*x10726))+((r11*x10715))+(((-1.0)*cj3*x10718*x10725)));
evalcond[6]=((((-1.0)*x10716*x10729))+((r10*x10721))+((x10715*x10725))+((r11*x10723)));
evalcond[7]=(((x10720*x10726))+((r21*x10715))+((r20*x10722))+(((-1.0)*cj3*x10718*x10724))+x10728);
evalcond[8]=((((-1.0)*x10719))+((x10715*x10724))+((r21*x10723))+(((-1.0)*x10720*x10729))+((r20*x10721))+x10717);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10730=gconst4*gconst4;
IkReal x10731=gconst5*gconst5;
IkReal x10732=(r10*r21);
IkReal x10733=((1.0)*cj3);
IkReal x10734=(r11*r21);
IkReal x10735=(r11*r20);
IkReal x10736=(r22*sj3);
IkReal x10737=(gconst4*r10);
IkReal x10738=((1.0)*sj3);
IkReal x10739=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10740 = IKatan2WithCheck(IkReal((((gconst5*r11*x10736))+((x10736*x10737)))),IkReal((((sj3*x10730*x10732))+((gconst4*gconst5*sj3*x10734))+(((-1.0)*gconst5*r20*x10737*x10738))+(((-1.0)*x10731*x10735*x10738)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10740.valid){
continue;
}
CheckValue<IkReal> x10741=IKPowWithIntegerCheck(IKsign((((x10732*x10739))+(((-1.0)*r10*r20*x10731*x10733))+(((-1.0)*x10730*x10733*x10734))+((x10735*x10739))+(((-1.0)*r12*r22*x10733)))),-1);
if(!x10741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10740.value)+(((1.5707963267949)*(x10741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10742=IKsin(j4);
IkReal x10743=IKcos(j4);
IkReal x10744=(cj2*sj1);
IkReal x10745=(cj1*sj2);
IkReal x10746=(gconst5*sj3);
IkReal x10747=(gconst4*r11);
IkReal x10748=(sj1*sj2);
IkReal x10749=(gconst5*r10);
IkReal x10750=(cj1*cj2);
IkReal x10751=(gconst4*r01);
IkReal x10752=(gconst4*r21);
IkReal x10753=(gconst5*r00);
IkReal x10754=(gconst4*sj3);
IkReal x10755=(cj3*gconst5);
IkReal x10756=(cj3*gconst4);
IkReal x10757=((1.0)*x10743);
IkReal x10758=((1.0)*x10742);
IkReal x10759=(cj3*x10742);
IkReal x10760=(cj3*x10743);
IkReal x10761=(x10745+x10744);
evalcond[0]=((((-1.0)*gconst5*r20*x10758))+(((-1.0)*r22*x10757))+((x10742*x10752)));
evalcond[1]=((((-1.0)*r02*x10757))+(((-1.0)*x10753*x10758))+((x10742*x10751)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10757))+(((-1.0)*x10749*x10758))+((x10742*x10747)));
evalcond[3]=(((r10*x10754))+(((-1.0)*cj3*x10749*x10757))+((x10747*x10760))+((r11*x10746))+((r12*x10759)));
evalcond[4]=((((-1.0)*sj3*x10747*x10757))+((r10*x10756))+((r11*x10755))+((r10*x10743*x10746))+(((-1.0)*r12*sj3*x10758)));
evalcond[5]=(((r22*x10759))+((r20*x10754))+(((-1.0)*r20*x10755*x10757))+x10761+((r21*x10746))+((x10752*x10760)));
evalcond[6]=((((-1.0)*x10748))+((r02*x10759))+(((-1.0)*cj3*x10753*x10757))+((x10751*x10760))+x10750+((r01*x10746))+((r00*x10754)));
evalcond[7]=((((-1.0)*r02*sj3*x10758))+x10761+((r00*x10743*x10746))+((r01*x10755))+(((-1.0)*sj3*x10751*x10757))+((r00*x10756)));
evalcond[8]=((((-1.0)*sj3*x10752*x10757))+((r20*x10743*x10746))+((r20*x10756))+(((-1.0)*r22*sj3*x10758))+x10748+((r21*x10755))+(((-1.0)*x10750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10762=((1.0)*gconst5);
CheckValue<IkReal> x10763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10762))+(((-1.0)*gconst4*r20)))),-1);
if(!x10763.valid){
continue;
}
CheckValue<IkReal> x10764 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10763.value)))+(x10764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10765=IKsin(j4);
IkReal x10766=IKcos(j4);
IkReal x10767=(cj2*sj1);
IkReal x10768=(cj1*sj2);
IkReal x10769=(gconst5*sj3);
IkReal x10770=(gconst4*r11);
IkReal x10771=(sj1*sj2);
IkReal x10772=(gconst5*r10);
IkReal x10773=(cj1*cj2);
IkReal x10774=(gconst4*r01);
IkReal x10775=(gconst4*r21);
IkReal x10776=(gconst5*r00);
IkReal x10777=(gconst4*sj3);
IkReal x10778=(cj3*gconst5);
IkReal x10779=(cj3*gconst4);
IkReal x10780=((1.0)*x10766);
IkReal x10781=((1.0)*x10765);
IkReal x10782=(cj3*x10765);
IkReal x10783=(cj3*x10766);
IkReal x10784=(x10767+x10768);
evalcond[0]=((((-1.0)*gconst5*r20*x10781))+((x10765*x10775))+(((-1.0)*r22*x10780)));
evalcond[1]=((((-1.0)*x10776*x10781))+((x10765*x10774))+(((-1.0)*r02*x10780)));
evalcond[2]=((-1.0)+(((-1.0)*x10772*x10781))+(((-1.0)*r12*x10780))+((x10765*x10770)));
evalcond[3]=((((-1.0)*cj3*x10772*x10780))+((r11*x10769))+((x10770*x10783))+((r10*x10777))+((r12*x10782)));
evalcond[4]=(((r11*x10778))+((r10*x10766*x10769))+(((-1.0)*r12*sj3*x10781))+((r10*x10779))+(((-1.0)*sj3*x10770*x10780)));
evalcond[5]=(((r22*x10782))+(((-1.0)*r20*x10778*x10780))+((r20*x10777))+((x10775*x10783))+((r21*x10769))+x10784);
evalcond[6]=((((-1.0)*x10771))+((r02*x10782))+(((-1.0)*cj3*x10776*x10780))+((r01*x10769))+((x10774*x10783))+((r00*x10777))+x10773);
evalcond[7]=((((-1.0)*sj3*x10774*x10780))+(((-1.0)*r02*sj3*x10781))+((r00*x10779))+((r01*x10778))+((r00*x10766*x10769))+x10784);
evalcond[8]=(((r20*x10779))+(((-1.0)*x10773))+(((-1.0)*r22*sj3*x10781))+(((-1.0)*sj3*x10775*x10780))+((r20*x10766*x10769))+((r21*x10778))+x10771);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10785=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10785.valid){
continue;
}
CheckValue<IkReal> x10786 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10785.value)))+(x10786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10787=IKsin(j4);
IkReal x10788=IKcos(j4);
IkReal x10789=(cj2*sj1);
IkReal x10790=(cj1*sj2);
IkReal x10791=(gconst5*sj3);
IkReal x10792=(gconst4*r11);
IkReal x10793=(sj1*sj2);
IkReal x10794=(gconst5*r10);
IkReal x10795=(cj1*cj2);
IkReal x10796=(gconst4*r01);
IkReal x10797=(gconst4*r21);
IkReal x10798=(gconst5*r00);
IkReal x10799=(gconst4*sj3);
IkReal x10800=(cj3*gconst5);
IkReal x10801=(cj3*gconst4);
IkReal x10802=((1.0)*x10788);
IkReal x10803=((1.0)*x10787);
IkReal x10804=(cj3*x10787);
IkReal x10805=(cj3*x10788);
IkReal x10806=(x10789+x10790);
evalcond[0]=((((-1.0)*r22*x10802))+((x10787*x10797))+(((-1.0)*gconst5*r20*x10803)));
evalcond[1]=((((-1.0)*x10798*x10803))+((x10787*x10796))+(((-1.0)*r02*x10802)));
evalcond[2]=((-1.0)+(((-1.0)*x10794*x10803))+((x10787*x10792))+(((-1.0)*r12*x10802)));
evalcond[3]=(((r10*x10799))+((x10792*x10805))+((r12*x10804))+(((-1.0)*cj3*x10794*x10802))+((r11*x10791)));
evalcond[4]=(((r10*x10801))+(((-1.0)*r12*sj3*x10803))+((r11*x10800))+(((-1.0)*sj3*x10792*x10802))+((r10*x10788*x10791)));
evalcond[5]=(((r21*x10791))+((r20*x10799))+((r22*x10804))+(((-1.0)*r20*x10800*x10802))+((x10797*x10805))+x10806);
evalcond[6]=(((r02*x10804))+(((-1.0)*x10793))+((x10796*x10805))+((r00*x10799))+x10795+((r01*x10791))+(((-1.0)*cj3*x10798*x10802)));
evalcond[7]=((((-1.0)*r02*sj3*x10803))+((r01*x10800))+((r00*x10801))+((r00*x10788*x10791))+(((-1.0)*sj3*x10796*x10802))+x10806);
evalcond[8]=(((r20*x10801))+((r20*x10788*x10791))+(((-1.0)*sj3*x10797*x10802))+((r21*x10800))+(((-1.0)*x10795))+x10793+(((-1.0)*r22*sj3*x10803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10807=((-1.0)*r21);
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(x10807),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
IkReal x10808=((1.0)*(x10810.value));
IkReal x10809=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10808)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10808)));
IkReal gconst4=(x10807*x10809);
IkReal gconst5=((1.0)*r20*x10809);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10811=((-1.0)*r21);
CheckValue<IkReal> x10814 = IKatan2WithCheck(IkReal(x10811),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10814.valid){
continue;
}
IkReal x10812=((1.0)*(x10814.value));
IkReal x10813=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10812)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10812)));
IkReal gconst4=(x10811*x10813);
IkReal gconst5=((1.0)*r20*x10813);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10815=((-1.0)*r21);
CheckValue<IkReal> x10818 = IKatan2WithCheck(IkReal(x10815),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10818.valid){
continue;
}
IkReal x10816=((1.0)*(x10818.value));
IkReal x10817=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10816)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10816)));
IkReal gconst4=(x10815*x10817);
IkReal gconst5=((1.0)*r20*x10817);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10819=((-1.0)*r21);
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(x10819),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
IkReal x10820=((1.0)*(x10822.value));
IkReal x10821=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10820)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10820)));
IkReal gconst4=(x10819*x10821);
IkReal gconst5=((1.0)*r20*x10821);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10823=((-1.0)*r21);
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(x10823),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
IkReal x10824=((1.0)*(x10826.value));
IkReal x10825=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10824)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10824)));
IkReal gconst4=(x10823*x10825);
IkReal gconst5=((1.0)*r20*x10825);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10827=((-1.0)*r21);
CheckValue<IkReal> x10830 = IKatan2WithCheck(IkReal(x10827),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10830.valid){
continue;
}
IkReal x10828=((1.0)*(x10830.value));
IkReal x10829=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10828)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10828)));
IkReal gconst4=(x10827*x10829);
IkReal gconst5=((1.0)*r20*x10829);
IkReal x10831=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10835=IKPowWithIntegerCheck(x10831,-1);
if(!x10835.valid){
continue;
}
IkReal x10832=x10835.value;
IkReal x10833=((1.0)*x10832);
IkReal x10834=((((-2.0)*r00*r01*r20*r21*x10832))+(((-1.0)*(r02*r02)))+(((-1.0)*x10833*(r00*r00)*(r20*r20)))+(((-1.0)*x10833*(r01*r01)*(r21*r21))));
j4eval[0]=x10834;
j4eval[1]=r02;
j4eval[2]=x10831;
j4eval[3]=IKsign(x10834);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10836=(gconst5*r00);
IkReal x10837=(gconst4*r01);
CheckValue<IkReal> x10838=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10836*x10837))+(((-1.0)*(x10836*x10836)))+(((-1.0)*(x10837*x10837))))),-1);
if(!x10838.valid){
continue;
}
CheckValue<IkReal> x10839 = IKatan2WithCheck(IkReal(((((-1.0)*x10837))+x10836)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10838.value)))+(x10839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10840=IKsin(j4);
IkReal x10841=IKcos(j4);
IkReal x10842=(gconst4*r11);
IkReal x10843=((1.0)*cj1);
IkReal x10844=(gconst5*r10);
IkReal x10845=(gconst4*r01);
IkReal x10846=(gconst5*r00);
IkReal x10847=(gconst4*r21);
IkReal x10848=(gconst5*r20);
IkReal x10849=((1.0)*x10841);
IkReal x10850=((1.0)*x10840);
evalcond[0]=(((x10840*x10847))+(((-1.0)*x10848*x10850))+(((-1.0)*r22*x10849)));
evalcond[1]=(((x10840*x10842))+(((-1.0)*r12*x10849))+(((-1.0)*x10844*x10850)));
evalcond[2]=(((x10841*x10846))+(((-1.0)*x10845*x10849))+(((-1.0)*r02*x10850)));
evalcond[3]=((-1.0)+((x10840*x10845))+(((-1.0)*r02*x10849))+(((-1.0)*x10846*x10850)));
evalcond[4]=(((x10841*x10848))+(((-1.0)*cj2*x10843))+(((-1.0)*x10847*x10849))+((sj1*sj2))+(((-1.0)*r22*x10850)));
evalcond[5]=(((x10841*x10844))+(((-1.0)*r12*x10850))+(((-1.0)*sj2*x10843))+(((-1.0)*x10842*x10849))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10851=((1.0)*gconst5);
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10851))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
CheckValue<IkReal> x10853=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r10))+(((-1.0)*r11*x10851)))),-1);
if(!x10853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10852.value)+(((1.5707963267949)*(x10853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10854=IKsin(j4);
IkReal x10855=IKcos(j4);
IkReal x10856=(gconst4*r11);
IkReal x10857=((1.0)*cj1);
IkReal x10858=(gconst5*r10);
IkReal x10859=(gconst4*r01);
IkReal x10860=(gconst5*r00);
IkReal x10861=(gconst4*r21);
IkReal x10862=(gconst5*r20);
IkReal x10863=((1.0)*x10855);
IkReal x10864=((1.0)*x10854);
evalcond[0]=((((-1.0)*r22*x10863))+((x10854*x10861))+(((-1.0)*x10862*x10864)));
evalcond[1]=((((-1.0)*r12*x10863))+(((-1.0)*x10858*x10864))+((x10854*x10856)));
evalcond[2]=((((-1.0)*x10859*x10863))+((x10855*x10860))+(((-1.0)*r02*x10864)));
evalcond[3]=((-1.0)+((x10854*x10859))+(((-1.0)*x10860*x10864))+(((-1.0)*r02*x10863)));
evalcond[4]=((((-1.0)*r22*x10864))+((x10855*x10862))+((sj1*sj2))+(((-1.0)*x10861*x10863))+(((-1.0)*cj2*x10857)));
evalcond[5]=((((-1.0)*r12*x10864))+((x10855*x10858))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10857))+(((-1.0)*x10856*x10863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10865 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10865.valid){
continue;
}
CheckValue<IkReal> x10866=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10865.value)+(((1.5707963267949)*(x10866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10867=IKsin(j4);
IkReal x10868=IKcos(j4);
IkReal x10869=(gconst4*r11);
IkReal x10870=((1.0)*cj1);
IkReal x10871=(gconst5*r10);
IkReal x10872=(gconst4*r01);
IkReal x10873=(gconst5*r00);
IkReal x10874=(gconst4*r21);
IkReal x10875=(gconst5*r20);
IkReal x10876=((1.0)*x10868);
IkReal x10877=((1.0)*x10867);
evalcond[0]=((((-1.0)*r22*x10876))+(((-1.0)*x10875*x10877))+((x10867*x10874)));
evalcond[1]=((((-1.0)*r12*x10876))+((x10867*x10869))+(((-1.0)*x10871*x10877)));
evalcond[2]=((((-1.0)*r02*x10877))+((x10868*x10873))+(((-1.0)*x10872*x10876)));
evalcond[3]=((-1.0)+(((-1.0)*x10873*x10877))+((x10867*x10872))+(((-1.0)*r02*x10876)));
evalcond[4]=((((-1.0)*r22*x10877))+((sj1*sj2))+(((-1.0)*x10874*x10876))+((x10868*x10875))+(((-1.0)*cj2*x10870)));
evalcond[5]=((((-1.0)*r12*x10877))+(((-1.0)*cj2*sj1))+(((-1.0)*x10869*x10876))+((x10868*x10871))+(((-1.0)*sj2*x10870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10878=((-1.0)*r21);
CheckValue<IkReal> x10881 = IKatan2WithCheck(IkReal(x10878),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10881.valid){
continue;
}
IkReal x10879=((1.0)*(x10881.value));
IkReal x10880=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10879)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10879)));
IkReal gconst4=(x10878*x10880);
IkReal gconst5=((1.0)*r20*x10880);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10882=((-1.0)*r21);
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(x10882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
IkReal x10883=((1.0)*(x10885.value));
IkReal x10884=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10883)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10883)));
IkReal gconst4=(x10882*x10884);
IkReal gconst5=((1.0)*r20*x10884);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10886=((-1.0)*r21);
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(x10886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
IkReal x10887=((1.0)*(x10889.value));
IkReal x10888=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10887)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10887)));
IkReal gconst4=(x10886*x10888);
IkReal gconst5=((1.0)*r20*x10888);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10890=(gconst4*r01);
IkReal x10891=(gconst5*r00);
CheckValue<IkReal> x10892=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10890*x10891))+(r02*r02)+(x10891*x10891)+(x10890*x10890))),-1);
if(!x10892.valid){
continue;
}
CheckValue<IkReal> x10893 = IKatan2WithCheck(IkReal(((((-1.0)*x10891))+x10890)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10892.value)))+(x10893.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10894=IKcos(j4);
IkReal x10895=IKsin(j4);
IkReal x10896=(gconst4*r11);
IkReal x10897=(gconst5*r10);
IkReal x10898=((1.0)*cj1);
IkReal x10899=(gconst5*r00);
IkReal x10900=(gconst5*r20);
IkReal x10901=((1.0)*x10894);
IkReal x10902=(gconst4*x10894);
IkReal x10903=((1.0)*x10895);
IkReal x10904=(gconst4*x10895);
evalcond[0]=(((r01*x10902))+((r02*x10895))+(((-1.0)*x10899*x10901)));
evalcond[1]=((((-1.0)*x10900*x10903))+(((-1.0)*r22*x10901))+((r21*x10904)));
evalcond[2]=(((x10895*x10896))+(((-1.0)*r12*x10901))+(((-1.0)*x10897*x10903)));
evalcond[3]=((-1.0)+((r01*x10904))+(((-1.0)*x10899*x10903))+(((-1.0)*r02*x10901)));
evalcond[4]=((((-1.0)*x10900*x10901))+((sj1*sj2))+((r22*x10895))+(((-1.0)*cj2*x10898))+((r21*x10902)));
evalcond[5]=((((-1.0)*sj2*x10898))+(((-1.0)*cj2*sj1))+((r12*x10895))+((x10894*x10896))+(((-1.0)*x10897*x10901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10905=((1.0)*gconst5);
CheckValue<IkReal> x10906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10905))+(((-1.0)*gconst4*r10)))),-1);
if(!x10906.valid){
continue;
}
CheckValue<IkReal> x10907 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10905))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10906.value)))+(x10907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10908=IKcos(j4);
IkReal x10909=IKsin(j4);
IkReal x10910=(gconst4*r11);
IkReal x10911=(gconst5*r10);
IkReal x10912=((1.0)*cj1);
IkReal x10913=(gconst5*r00);
IkReal x10914=(gconst5*r20);
IkReal x10915=((1.0)*x10908);
IkReal x10916=(gconst4*x10908);
IkReal x10917=((1.0)*x10909);
IkReal x10918=(gconst4*x10909);
evalcond[0]=(((r01*x10916))+((r02*x10909))+(((-1.0)*x10913*x10915)));
evalcond[1]=((((-1.0)*x10914*x10917))+(((-1.0)*r22*x10915))+((r21*x10918)));
evalcond[2]=(((x10909*x10910))+(((-1.0)*r12*x10915))+(((-1.0)*x10911*x10917)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10915))+((r01*x10918))+(((-1.0)*x10913*x10917)));
evalcond[4]=(((r22*x10909))+(((-1.0)*x10914*x10915))+((sj1*sj2))+((r21*x10916))+(((-1.0)*cj2*x10912)));
evalcond[5]=(((r12*x10909))+(((-1.0)*sj2*x10912))+(((-1.0)*cj2*sj1))+(((-1.0)*x10911*x10915))+((x10908*x10910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
CheckValue<IkReal> x10920=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10919.value)+(((1.5707963267949)*(x10920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10921=IKcos(j4);
IkReal x10922=IKsin(j4);
IkReal x10923=(gconst4*r11);
IkReal x10924=(gconst5*r10);
IkReal x10925=((1.0)*cj1);
IkReal x10926=(gconst5*r00);
IkReal x10927=(gconst5*r20);
IkReal x10928=((1.0)*x10921);
IkReal x10929=(gconst4*x10921);
IkReal x10930=((1.0)*x10922);
IkReal x10931=(gconst4*x10922);
evalcond[0]=(((r02*x10922))+((r01*x10929))+(((-1.0)*x10926*x10928)));
evalcond[1]=((((-1.0)*r22*x10928))+(((-1.0)*x10927*x10930))+((r21*x10931)));
evalcond[2]=((((-1.0)*r12*x10928))+(((-1.0)*x10924*x10930))+((x10922*x10923)));
evalcond[3]=((-1.0)+(((-1.0)*x10926*x10930))+(((-1.0)*r02*x10928))+((r01*x10931)));
evalcond[4]=((((-1.0)*x10927*x10928))+((sj1*sj2))+((r21*x10929))+((r22*x10922))+(((-1.0)*cj2*x10925)));
evalcond[5]=((((-1.0)*sj2*x10925))+(((-1.0)*cj2*sj1))+(((-1.0)*x10924*x10928))+((x10921*x10923))+((r12*x10922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10932=((-1.0)*r21);
CheckValue<IkReal> x10935 = IKatan2WithCheck(IkReal(x10932),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10935.valid){
continue;
}
IkReal x10933=((1.0)*(x10935.value));
IkReal x10934=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10933)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10933)));
IkReal gconst4=(x10932*x10934);
IkReal gconst5=((1.0)*r20*x10934);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10936=((-1.0)*r21);
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal(x10936),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
IkReal x10937=((1.0)*(x10939.value));
IkReal x10938=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10937)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10937)));
IkReal gconst4=(x10936*x10938);
IkReal gconst5=((1.0)*r20*x10938);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10940=((-1.0)*r21);
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(x10940),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
IkReal x10941=((1.0)*(x10943.value));
IkReal x10942=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10941)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10941)));
IkReal gconst4=(x10940*x10942);
IkReal gconst5=((1.0)*r20*x10942);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10944=(gconst4*r01);
IkReal x10945=(gconst5*r00);
CheckValue<IkReal> x10946 = IKatan2WithCheck(IkReal(((((-1.0)*x10945))+x10944)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10946.valid){
continue;
}
CheckValue<IkReal> x10947=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10944*x10945))+(x10944*x10944)+(x10945*x10945)+(r02*r02))),-1);
if(!x10947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10946.value)+(((1.5707963267949)*(x10947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10948=IKcos(j4);
IkReal x10949=IKsin(j4);
IkReal x10950=(gconst4*r11);
IkReal x10951=(gconst5*r10);
IkReal x10952=(gconst5*r00);
IkReal x10953=(gconst5*r20);
IkReal x10954=((1.0)*x10948);
IkReal x10955=(gconst4*x10948);
IkReal x10956=((1.0)*x10949);
IkReal x10957=(gconst4*x10949);
evalcond[0]=(((r01*x10955))+((r02*x10949))+(((-1.0)*x10952*x10954)));
evalcond[1]=((((-1.0)*r22*x10954))+((r21*x10957))+(((-1.0)*x10953*x10956)));
evalcond[2]=(((x10949*x10950))+(((-1.0)*x10951*x10956))+(((-1.0)*r12*x10954)));
evalcond[3]=((-1.0)+((r01*x10957))+(((-1.0)*x10952*x10956))+(((-1.0)*r02*x10954)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10955))+(((-1.0)*x10953*x10954))+((r22*x10949)));
evalcond[5]=(((r12*x10949))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10951*x10954))+((x10948*x10950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10958=((1.0)*gconst5);
CheckValue<IkReal> x10959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10958))+(((-1.0)*gconst4*r10)))),-1);
if(!x10959.valid){
continue;
}
CheckValue<IkReal> x10960 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10958))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10959.value)))+(x10960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10961=IKcos(j4);
IkReal x10962=IKsin(j4);
IkReal x10963=(gconst4*r11);
IkReal x10964=(gconst5*r10);
IkReal x10965=(gconst5*r00);
IkReal x10966=(gconst5*r20);
IkReal x10967=((1.0)*x10961);
IkReal x10968=(gconst4*x10961);
IkReal x10969=((1.0)*x10962);
IkReal x10970=(gconst4*x10962);
evalcond[0]=(((r02*x10962))+((r01*x10968))+(((-1.0)*x10965*x10967)));
evalcond[1]=((((-1.0)*r22*x10967))+((r21*x10970))+(((-1.0)*x10966*x10969)));
evalcond[2]=(((x10962*x10963))+(((-1.0)*x10964*x10969))+(((-1.0)*r12*x10967)));
evalcond[3]=((-1.0)+((r01*x10970))+(((-1.0)*r02*x10967))+(((-1.0)*x10965*x10969)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10962))+((r21*x10968))+(((-1.0)*x10966*x10967)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10961*x10963))+((r12*x10962))+(((-1.0)*x10964*x10967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10971 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10971.valid){
continue;
}
CheckValue<IkReal> x10972=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10971.value)+(((1.5707963267949)*(x10972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10973=IKcos(j4);
IkReal x10974=IKsin(j4);
IkReal x10975=(gconst4*r11);
IkReal x10976=(gconst5*r10);
IkReal x10977=(gconst5*r00);
IkReal x10978=(gconst5*r20);
IkReal x10979=((1.0)*x10973);
IkReal x10980=(gconst4*x10973);
IkReal x10981=((1.0)*x10974);
IkReal x10982=(gconst4*x10974);
evalcond[0]=(((r02*x10974))+((r01*x10980))+(((-1.0)*x10977*x10979)));
evalcond[1]=(((r21*x10982))+(((-1.0)*r22*x10979))+(((-1.0)*x10978*x10981)));
evalcond[2]=(((x10974*x10975))+(((-1.0)*r12*x10979))+(((-1.0)*x10976*x10981)));
evalcond[3]=((-1.0)+((r01*x10982))+(((-1.0)*x10977*x10981))+(((-1.0)*r02*x10979)));
evalcond[4]=(((cj2*sj1))+((r21*x10980))+((cj1*sj2))+((r22*x10974))+(((-1.0)*x10978*x10979)));
evalcond[5]=((((-1.0)*x10976*x10979))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10973*x10975))+((r12*x10974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10983=((-1.0)*r21);
CheckValue<IkReal> x10986 = IKatan2WithCheck(IkReal(x10983),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10986.valid){
continue;
}
IkReal x10984=((1.0)*(x10986.value));
IkReal x10985=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10984)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10984)));
IkReal gconst4=(x10983*x10985);
IkReal gconst5=((1.0)*r20*x10985);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10987=((-1.0)*r21);
CheckValue<IkReal> x10990 = IKatan2WithCheck(IkReal(x10987),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10990.valid){
continue;
}
IkReal x10988=((1.0)*(x10990.value));
IkReal x10989=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10988)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10988)));
IkReal gconst4=(x10987*x10989);
IkReal gconst5=((1.0)*r20*x10989);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10991=((-1.0)*r21);
CheckValue<IkReal> x10994 = IKatan2WithCheck(IkReal(x10991),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10994.valid){
continue;
}
IkReal x10992=((1.0)*(x10994.value));
IkReal x10993=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10992)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10992)));
IkReal gconst4=(x10991*x10993);
IkReal gconst5=((1.0)*r20*x10993);
IkReal x10995=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10999=IKPowWithIntegerCheck(x10995,-1);
if(!x10999.valid){
continue;
}
IkReal x10996=x10999.value;
IkReal x10997=((1.0)*x10996);
IkReal x10998=((((-1.0)*x10997*(r00*r00)*(r20*r20)))+(((-1.0)*x10997*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10996)));
j4eval[0]=x10998;
j4eval[1]=r02;
j4eval[2]=x10995;
j4eval[3]=IKsign(x10998);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11000=(gconst5*r00);
IkReal x11001=(gconst4*r01);
CheckValue<IkReal> x11002=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11001*x11001)))+(((2.0)*x11000*x11001))+(((-1.0)*(x11000*x11000))))),-1);
if(!x11002.valid){
continue;
}
CheckValue<IkReal> x11003 = IKatan2WithCheck(IkReal((x11000+(((-1.0)*x11001)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11002.value)))+(x11003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11004=IKsin(j4);
IkReal x11005=IKcos(j4);
IkReal x11006=(gconst4*r11);
IkReal x11007=(gconst5*r10);
IkReal x11008=(gconst4*r01);
IkReal x11009=(gconst5*r00);
IkReal x11010=(gconst4*r21);
IkReal x11011=(gconst5*r20);
IkReal x11012=((1.0)*x11005);
IkReal x11013=((1.0)*x11004);
evalcond[0]=((((-1.0)*r22*x11012))+(((-1.0)*x11011*x11013))+((x11004*x11010)));
evalcond[1]=(((x11004*x11006))+(((-1.0)*x11007*x11013))+(((-1.0)*r12*x11012)));
evalcond[2]=(((x11005*x11009))+(((-1.0)*r02*x11013))+(((-1.0)*x11008*x11012)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11012))+((x11004*x11008))+(((-1.0)*x11009*x11013)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11013))+((x11005*x11011))+((cj1*sj2))+(((-1.0)*x11010*x11012)));
evalcond[5]=((((-1.0)*x11006*x11012))+((x11005*x11007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11014=((1.0)*gconst5);
CheckValue<IkReal> x11015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11014))+(((-1.0)*gconst4*r10)))),-1);
if(!x11015.valid){
continue;
}
CheckValue<IkReal> x11016 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11014)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11015.value)))+(x11016.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11017=IKsin(j4);
IkReal x11018=IKcos(j4);
IkReal x11019=(gconst4*r11);
IkReal x11020=(gconst5*r10);
IkReal x11021=(gconst4*r01);
IkReal x11022=(gconst5*r00);
IkReal x11023=(gconst4*r21);
IkReal x11024=(gconst5*r20);
IkReal x11025=((1.0)*x11018);
IkReal x11026=((1.0)*x11017);
evalcond[0]=(((x11017*x11023))+(((-1.0)*r22*x11025))+(((-1.0)*x11024*x11026)));
evalcond[1]=(((x11017*x11019))+(((-1.0)*r12*x11025))+(((-1.0)*x11020*x11026)));
evalcond[2]=((((-1.0)*r02*x11026))+((x11018*x11022))+(((-1.0)*x11021*x11025)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11025))+((x11017*x11021))+(((-1.0)*x11022*x11026)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11023*x11025))+((x11018*x11024))+(((-1.0)*r22*x11026)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11018*x11020))+(((-1.0)*r12*x11026))+(((-1.0)*x11019*x11025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11027 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11027.valid){
continue;
}
CheckValue<IkReal> x11028=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11027.value)+(((1.5707963267949)*(x11028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11029=IKsin(j4);
IkReal x11030=IKcos(j4);
IkReal x11031=(gconst4*r11);
IkReal x11032=(gconst5*r10);
IkReal x11033=(gconst4*r01);
IkReal x11034=(gconst5*r00);
IkReal x11035=(gconst4*r21);
IkReal x11036=(gconst5*r20);
IkReal x11037=((1.0)*x11030);
IkReal x11038=((1.0)*x11029);
evalcond[0]=(((x11029*x11035))+(((-1.0)*r22*x11037))+(((-1.0)*x11036*x11038)));
evalcond[1]=(((x11029*x11031))+(((-1.0)*x11032*x11038))+(((-1.0)*r12*x11037)));
evalcond[2]=((((-1.0)*r02*x11038))+((x11030*x11034))+(((-1.0)*x11033*x11037)));
evalcond[3]=((-1.0)+(((-1.0)*x11034*x11038))+(((-1.0)*r02*x11037))+((x11029*x11033)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11030*x11036))+(((-1.0)*r22*x11038))+(((-1.0)*x11035*x11037)));
evalcond[5]=(((x11030*x11032))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11031*x11037))+(((-1.0)*r12*x11038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11039=gconst4*gconst4;
IkReal x11040=gconst5*gconst5;
IkReal x11041=(r01*r20);
IkReal x11042=(gconst4*sj3);
IkReal x11043=(r01*r21);
IkReal x11044=((1.0)*cj3);
IkReal x11045=(r00*r21);
IkReal x11046=(r00*r20);
IkReal x11047=(cj3*gconst4*gconst5);
IkReal x11048=((1.0)*x11040);
CheckValue<IkReal> x11049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x11044))+((x11041*x11047))+(((-1.0)*x11039*x11043*x11044))+((x11045*x11047))+(((-1.0)*x11040*x11044*x11046)))),-1);
if(!x11049.valid){
continue;
}
CheckValue<IkReal> x11050 = IKatan2WithCheck(IkReal((((r00*r22*x11042))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11042*x11046))+((sj3*x11039*x11045))+((gconst5*x11042*x11043))+(((-1.0)*sj3*x11041*x11048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11050.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11049.value)))+(x11050.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11051=IKsin(j4);
IkReal x11052=IKcos(j4);
IkReal x11053=(sj1*sj2);
IkReal x11054=(gconst5*sj3);
IkReal x11055=(gconst4*r11);
IkReal x11056=(gconst5*r10);
IkReal x11057=((1.0)*cj1);
IkReal x11058=(gconst4*r01);
IkReal x11059=(cj2*sj1);
IkReal x11060=(gconst5*r00);
IkReal x11061=(gconst4*sj3);
IkReal x11062=(cj3*gconst5);
IkReal x11063=(cj3*gconst4);
IkReal x11064=(gconst4*r21);
IkReal x11065=(cj2*x11057);
IkReal x11066=((1.0)*x11052);
IkReal x11067=((1.0)*x11051);
IkReal x11068=(cj3*x11051);
IkReal x11069=(cj3*x11052);
evalcond[0]=((((-1.0)*r22*x11066))+((x11051*x11064))+(((-1.0)*gconst5*r20*x11067)));
evalcond[1]=((((-1.0)*r12*x11066))+((x11051*x11055))+(((-1.0)*x11056*x11067)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11066))+(((-1.0)*x11060*x11067))+((x11051*x11058)));
evalcond[3]=(((x11058*x11069))+((r01*x11054))+(((-1.0)*cj3*x11060*x11066))+((r00*x11061))+((r02*x11068)));
evalcond[4]=((((-1.0)*sj3*x11058*x11066))+(((-1.0)*r02*sj3*x11067))+((r01*x11062))+((r00*x11052*x11054))+((r00*x11063)));
evalcond[5]=((((-1.0)*r20*x11062*x11066))+((r20*x11061))+((cj1*sj2))+x11059+((r22*x11068))+((r21*x11054))+((r21*x11052*x11063)));
evalcond[6]=((((-1.0)*x11065))+((x11055*x11069))+((r10*x11061))+x11053+(((-1.0)*cj3*x11056*x11066))+((r12*x11068))+((r11*x11054)));
evalcond[7]=((((-1.0)*x11065))+((r20*x11063))+(((-1.0)*r22*sj3*x11067))+x11053+((r21*x11062))+(((-1.0)*r21*x11061*x11066))+((r20*x11052*x11054)));
evalcond[8]=((((-1.0)*sj3*x11055*x11066))+(((-1.0)*r12*sj3*x11067))+(((-1.0)*sj2*x11057))+((r10*x11052*x11054))+((r10*x11063))+(((-1.0)*x11059))+((r11*x11062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11070=((1.0)*gconst5);
CheckValue<IkReal> x11071=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11070))+(((-1.0)*gconst4*r10)))),-1);
if(!x11071.valid){
continue;
}
CheckValue<IkReal> x11072 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11070))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11071.value)))+(x11072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11073=IKsin(j4);
IkReal x11074=IKcos(j4);
IkReal x11075=(sj1*sj2);
IkReal x11076=(gconst5*sj3);
IkReal x11077=(gconst4*r11);
IkReal x11078=(gconst5*r10);
IkReal x11079=((1.0)*cj1);
IkReal x11080=(gconst4*r01);
IkReal x11081=(cj2*sj1);
IkReal x11082=(gconst5*r00);
IkReal x11083=(gconst4*sj3);
IkReal x11084=(cj3*gconst5);
IkReal x11085=(cj3*gconst4);
IkReal x11086=(gconst4*r21);
IkReal x11087=(cj2*x11079);
IkReal x11088=((1.0)*x11074);
IkReal x11089=((1.0)*x11073);
IkReal x11090=(cj3*x11073);
IkReal x11091=(cj3*x11074);
evalcond[0]=(((x11073*x11086))+(((-1.0)*r22*x11088))+(((-1.0)*gconst5*r20*x11089)));
evalcond[1]=(((x11073*x11077))+(((-1.0)*x11078*x11089))+(((-1.0)*r12*x11088)));
evalcond[2]=((-1.0)+((x11073*x11080))+(((-1.0)*r02*x11088))+(((-1.0)*x11082*x11089)));
evalcond[3]=(((r02*x11090))+((r00*x11083))+(((-1.0)*cj3*x11082*x11088))+((r01*x11076))+((x11080*x11091)));
evalcond[4]=((((-1.0)*sj3*x11080*x11088))+((r00*x11074*x11076))+((r01*x11084))+((r00*x11085))+(((-1.0)*r02*sj3*x11089)));
evalcond[5]=(((r21*x11074*x11085))+((r21*x11076))+((cj1*sj2))+x11081+(((-1.0)*r20*x11084*x11088))+((r22*x11090))+((r20*x11083)));
evalcond[6]=((((-1.0)*cj3*x11078*x11088))+((r12*x11090))+((r11*x11076))+x11075+((r10*x11083))+(((-1.0)*x11087))+((x11077*x11091)));
evalcond[7]=(((r20*x11074*x11076))+((r21*x11084))+(((-1.0)*r22*sj3*x11089))+x11075+(((-1.0)*x11087))+((r20*x11085))+(((-1.0)*r21*x11083*x11088)));
evalcond[8]=(((r10*x11074*x11076))+(((-1.0)*r12*sj3*x11089))+(((-1.0)*sj3*x11077*x11088))+(((-1.0)*x11081))+((r10*x11085))+((r11*x11084))+(((-1.0)*sj2*x11079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11092 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11092.valid){
continue;
}
CheckValue<IkReal> x11093=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11092.value)+(((1.5707963267949)*(x11093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11094=IKsin(j4);
IkReal x11095=IKcos(j4);
IkReal x11096=(sj1*sj2);
IkReal x11097=(gconst5*sj3);
IkReal x11098=(gconst4*r11);
IkReal x11099=(gconst5*r10);
IkReal x11100=((1.0)*cj1);
IkReal x11101=(gconst4*r01);
IkReal x11102=(cj2*sj1);
IkReal x11103=(gconst5*r00);
IkReal x11104=(gconst4*sj3);
IkReal x11105=(cj3*gconst5);
IkReal x11106=(cj3*gconst4);
IkReal x11107=(gconst4*r21);
IkReal x11108=(cj2*x11100);
IkReal x11109=((1.0)*x11095);
IkReal x11110=((1.0)*x11094);
IkReal x11111=(cj3*x11094);
IkReal x11112=(cj3*x11095);
evalcond[0]=((((-1.0)*gconst5*r20*x11110))+((x11094*x11107))+(((-1.0)*r22*x11109)));
evalcond[1]=((((-1.0)*r12*x11109))+(((-1.0)*x11099*x11110))+((x11094*x11098)));
evalcond[2]=((-1.0)+(((-1.0)*x11103*x11110))+((x11094*x11101))+(((-1.0)*r02*x11109)));
evalcond[3]=(((r02*x11111))+((x11101*x11112))+((r01*x11097))+(((-1.0)*cj3*x11103*x11109))+((r00*x11104)));
evalcond[4]=((((-1.0)*sj3*x11101*x11109))+(((-1.0)*r02*sj3*x11110))+((r00*x11095*x11097))+((r00*x11106))+((r01*x11105)));
evalcond[5]=(((cj1*sj2))+((r21*x11095*x11106))+x11102+((r20*x11104))+(((-1.0)*r20*x11105*x11109))+((r22*x11111))+((r21*x11097)));
evalcond[6]=(((r11*x11097))+(((-1.0)*cj3*x11099*x11109))+((r10*x11104))+x11096+((x11098*x11112))+(((-1.0)*x11108))+((r12*x11111)));
evalcond[7]=((((-1.0)*r21*x11104*x11109))+x11096+((r21*x11105))+((r20*x11095*x11097))+(((-1.0)*r22*sj3*x11110))+((r20*x11106))+(((-1.0)*x11108)));
evalcond[8]=((((-1.0)*x11102))+(((-1.0)*r12*sj3*x11110))+((r10*x11095*x11097))+((r10*x11106))+(((-1.0)*sj2*x11100))+((r11*x11105))+(((-1.0)*sj3*x11098*x11109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11113=((-1.0)*r21);
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal(x11113),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
IkReal x11114=((1.0)*(x11116.value));
IkReal x11115=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11114)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11114)));
IkReal gconst4=(x11113*x11115);
IkReal gconst5=((1.0)*r20*x11115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11117=((-1.0)*r21);
CheckValue<IkReal> x11120 = IKatan2WithCheck(IkReal(x11117),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11120.valid){
continue;
}
IkReal x11118=((1.0)*(x11120.value));
IkReal x11119=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11118)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11118)));
IkReal gconst4=(x11117*x11119);
IkReal gconst5=((1.0)*r20*x11119);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11121=((-1.0)*r21);
CheckValue<IkReal> x11124 = IKatan2WithCheck(IkReal(x11121),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11124.valid){
continue;
}
IkReal x11122=((1.0)*(x11124.value));
IkReal x11123=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11122)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11122)));
IkReal gconst4=(x11121*x11123);
IkReal gconst5=((1.0)*r20*x11123);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11125=((-1.0)*r21);
CheckValue<IkReal> x11128 = IKatan2WithCheck(IkReal(x11125),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11128.valid){
continue;
}
IkReal x11126=((1.0)*(x11128.value));
IkReal x11127=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11126)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11126)));
IkReal gconst4=(x11125*x11127);
IkReal gconst5=((1.0)*r20*x11127);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11129=((-1.0)*r21);
CheckValue<IkReal> x11132 = IKatan2WithCheck(IkReal(x11129),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11132.valid){
continue;
}
IkReal x11130=((1.0)*(x11132.value));
IkReal x11131=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11130)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11130)));
IkReal gconst4=(x11129*x11131);
IkReal gconst5=((1.0)*r20*x11131);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11133=((-1.0)*r21);
CheckValue<IkReal> x11136 = IKatan2WithCheck(IkReal(x11133),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11136.valid){
continue;
}
IkReal x11134=((1.0)*(x11136.value));
IkReal x11135=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11134)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11134)));
IkReal gconst4=(x11133*x11135);
IkReal gconst5=((1.0)*r20*x11135);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11137=(gconst5*r00);
IkReal x11138=(gconst4*r01);
CheckValue<IkReal> x11139 = IKatan2WithCheck(IkReal(((((-1.0)*x11138))+x11137)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11139.valid){
continue;
}
CheckValue<IkReal> x11140=IKPowWithIntegerCheck(IKsign(((x11138*x11138)+(x11137*x11137)+(((-2.0)*x11137*x11138))+(r02*r02))),-1);
if(!x11140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11139.value)+(((1.5707963267949)*(x11140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11141=IKsin(j4);
IkReal x11142=IKcos(j4);
IkReal x11143=(gconst4*r11);
IkReal x11144=(gconst5*r10);
IkReal x11145=(gconst4*r01);
IkReal x11146=(gconst5*r00);
IkReal x11147=(gconst4*r21);
IkReal x11148=(gconst5*r20);
IkReal x11149=((1.0)*x11142);
IkReal x11150=((1.0)*x11141);
evalcond[0]=((((-1.0)*r22*x11149))+(((-1.0)*x11148*x11150))+((x11141*x11147)));
evalcond[1]=(((x11141*x11143))+(((-1.0)*x11144*x11150))+(((-1.0)*r12*x11149)));
evalcond[2]=(((x11142*x11146))+(((-1.0)*r02*x11150))+(((-1.0)*x11145*x11149)));
evalcond[3]=((1.0)+((x11141*x11145))+(((-1.0)*r02*x11149))+(((-1.0)*x11146*x11150)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11142*x11144))+(((-1.0)*r12*x11150))+(((-1.0)*x11143*x11149)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11150))+((x11142*x11148))+(((-1.0)*x11147*x11149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11151=((1.0)*gconst5);
CheckValue<IkReal> x11152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11151))+(((-1.0)*gconst4*r20)))),-1);
if(!x11152.valid){
continue;
}
CheckValue<IkReal> x11153 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11152.value)))+(x11153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11154=IKsin(j4);
IkReal x11155=IKcos(j4);
IkReal x11156=(gconst4*r11);
IkReal x11157=(gconst5*r10);
IkReal x11158=(gconst4*r01);
IkReal x11159=(gconst5*r00);
IkReal x11160=(gconst4*r21);
IkReal x11161=(gconst5*r20);
IkReal x11162=((1.0)*x11155);
IkReal x11163=((1.0)*x11154);
evalcond[0]=((((-1.0)*x11161*x11163))+(((-1.0)*r22*x11162))+((x11154*x11160)));
evalcond[1]=((((-1.0)*x11157*x11163))+(((-1.0)*r12*x11162))+((x11154*x11156)));
evalcond[2]=((((-1.0)*x11158*x11162))+((x11155*x11159))+(((-1.0)*r02*x11163)));
evalcond[3]=((1.0)+(((-1.0)*x11159*x11163))+((x11154*x11158))+(((-1.0)*r02*x11162)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11156*x11162))+((cj1*sj2))+(((-1.0)*r12*x11163))+((x11155*x11157)));
evalcond[5]=((((-1.0)*r22*x11163))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11160*x11162))+((x11155*x11161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11164=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11164.valid){
continue;
}
CheckValue<IkReal> x11165 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11164.value)))+(x11165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11166=IKsin(j4);
IkReal x11167=IKcos(j4);
IkReal x11168=(gconst4*r11);
IkReal x11169=(gconst5*r10);
IkReal x11170=(gconst4*r01);
IkReal x11171=(gconst5*r00);
IkReal x11172=(gconst4*r21);
IkReal x11173=(gconst5*r20);
IkReal x11174=((1.0)*x11167);
IkReal x11175=((1.0)*x11166);
evalcond[0]=(((x11166*x11172))+(((-1.0)*r22*x11174))+(((-1.0)*x11173*x11175)));
evalcond[1]=(((x11166*x11168))+(((-1.0)*r12*x11174))+(((-1.0)*x11169*x11175)));
evalcond[2]=(((x11167*x11171))+(((-1.0)*x11170*x11174))+(((-1.0)*r02*x11175)));
evalcond[3]=((1.0)+((x11166*x11170))+(((-1.0)*x11171*x11175))+(((-1.0)*r02*x11174)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11175))+((x11167*x11169))+(((-1.0)*x11168*x11174)));
evalcond[5]=((((-1.0)*x11172*x11174))+(((-1.0)*r22*x11175))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11167*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11176=((-1.0)*r21);
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal(x11176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
IkReal x11177=((1.0)*(x11179.value));
IkReal x11178=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11177)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11177)));
IkReal gconst4=(x11176*x11178);
IkReal gconst5=((1.0)*r20*x11178);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11180=((-1.0)*r21);
CheckValue<IkReal> x11183 = IKatan2WithCheck(IkReal(x11180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11183.valid){
continue;
}
IkReal x11181=((1.0)*(x11183.value));
IkReal x11182=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11181)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11181)));
IkReal gconst4=(x11180*x11182);
IkReal gconst5=((1.0)*r20*x11182);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11184=((-1.0)*r21);
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal(x11184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
IkReal x11185=((1.0)*(x11187.value));
IkReal x11186=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11185)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11185)));
IkReal gconst4=(x11184*x11186);
IkReal gconst5=((1.0)*r20*x11186);
IkReal x11188=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11192=IKPowWithIntegerCheck(x11188,-1);
if(!x11192.valid){
continue;
}
IkReal x11189=x11192.value;
IkReal x11190=((1.0)*x11189);
IkReal x11191=((((-1.0)*x11190*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11189))+(((-1.0)*x11190*(r01*r01)*(r21*r21))));
j4eval[0]=x11191;
j4eval[1]=IKsign(x11191);
j4eval[2]=r02;
j4eval[3]=x11188;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11193=(gconst4*r01);
IkReal x11194=(gconst5*r00);
CheckValue<IkReal> x11195 = IKatan2WithCheck(IkReal((x11193+(((-1.0)*x11194)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11195.valid){
continue;
}
CheckValue<IkReal> x11196=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11194*x11194)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11193*x11193)))+(((2.0)*x11193*x11194)))),-1);
if(!x11196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11195.value)+(((1.5707963267949)*(x11196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11197=IKcos(j4);
IkReal x11198=IKsin(j4);
IkReal x11199=(gconst4*r11);
IkReal x11200=(gconst5*r10);
IkReal x11201=(gconst5*r00);
IkReal x11202=(gconst5*r20);
IkReal x11203=((1.0)*x11197);
IkReal x11204=(gconst4*x11197);
IkReal x11205=((1.0)*x11198);
IkReal x11206=(gconst4*x11198);
evalcond[0]=(((r02*x11198))+((r01*x11204))+(((-1.0)*x11201*x11203)));
evalcond[1]=((((-1.0)*r22*x11203))+((r21*x11206))+(((-1.0)*x11202*x11205)));
evalcond[2]=(((x11198*x11199))+(((-1.0)*r12*x11203))+(((-1.0)*x11200*x11205)));
evalcond[3]=((1.0)+((r01*x11206))+(((-1.0)*r02*x11203))+(((-1.0)*x11201*x11205)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11197*x11199))+((r12*x11198))+(((-1.0)*x11200*x11203)));
evalcond[5]=(((r21*x11204))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11198))+(((-1.0)*x11202*x11203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11207=((1.0)*gconst5);
CheckValue<IkReal> x11208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11207))+(((-1.0)*gconst4*r20)))),-1);
if(!x11208.valid){
continue;
}
CheckValue<IkReal> x11209 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11207))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11208.value)))+(x11209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11210=IKcos(j4);
IkReal x11211=IKsin(j4);
IkReal x11212=(gconst4*r11);
IkReal x11213=(gconst5*r10);
IkReal x11214=(gconst5*r00);
IkReal x11215=(gconst5*r20);
IkReal x11216=((1.0)*x11210);
IkReal x11217=(gconst4*x11210);
IkReal x11218=((1.0)*x11211);
IkReal x11219=(gconst4*x11211);
evalcond[0]=(((r02*x11211))+((r01*x11217))+(((-1.0)*x11214*x11216)));
evalcond[1]=(((r21*x11219))+(((-1.0)*x11215*x11218))+(((-1.0)*r22*x11216)));
evalcond[2]=(((x11211*x11212))+(((-1.0)*r12*x11216))+(((-1.0)*x11213*x11218)));
evalcond[3]=((1.0)+((r01*x11219))+(((-1.0)*r02*x11216))+(((-1.0)*x11214*x11218)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11210*x11212))+((r12*x11211))+(((-1.0)*x11213*x11216)));
evalcond[5]=(((r21*x11217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11215*x11216))+((r22*x11211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11220=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11220.valid){
continue;
}
CheckValue<IkReal> x11221 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11220.value)))+(x11221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11222=IKcos(j4);
IkReal x11223=IKsin(j4);
IkReal x11224=(gconst4*r11);
IkReal x11225=(gconst5*r10);
IkReal x11226=(gconst5*r00);
IkReal x11227=(gconst5*r20);
IkReal x11228=((1.0)*x11222);
IkReal x11229=(gconst4*x11222);
IkReal x11230=((1.0)*x11223);
IkReal x11231=(gconst4*x11223);
evalcond[0]=(((r02*x11223))+((r01*x11229))+(((-1.0)*x11226*x11228)));
evalcond[1]=(((r21*x11231))+(((-1.0)*x11227*x11230))+(((-1.0)*r22*x11228)));
evalcond[2]=(((x11223*x11224))+(((-1.0)*x11225*x11230))+(((-1.0)*r12*x11228)));
evalcond[3]=((1.0)+(((-1.0)*x11226*x11230))+((r01*x11231))+(((-1.0)*r02*x11228)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11225*x11228))+((x11222*x11224))+((r12*x11223))+((cj1*sj2)));
evalcond[5]=(((r22*x11223))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11229))+(((-1.0)*x11227*x11228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11232=((-1.0)*r21);
CheckValue<IkReal> x11235 = IKatan2WithCheck(IkReal(x11232),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11235.valid){
continue;
}
IkReal x11233=((1.0)*(x11235.value));
IkReal x11234=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11233)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11233)));
IkReal gconst4=(x11232*x11234);
IkReal gconst5=((1.0)*r20*x11234);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11236=((-1.0)*r21);
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal(x11236),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
IkReal x11237=((1.0)*(x11239.value));
IkReal x11238=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11237)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11237)));
IkReal gconst4=(x11236*x11238);
IkReal gconst5=((1.0)*r20*x11238);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11240=((-1.0)*r21);
CheckValue<IkReal> x11243 = IKatan2WithCheck(IkReal(x11240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11243.valid){
continue;
}
IkReal x11241=((1.0)*(x11243.value));
IkReal x11242=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11241)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11241)));
IkReal gconst4=(x11240*x11242);
IkReal gconst5=((1.0)*r20*x11242);
IkReal x11244=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11248=IKPowWithIntegerCheck(x11244,-1);
if(!x11248.valid){
continue;
}
IkReal x11245=x11248.value;
IkReal x11246=((1.0)*x11245);
IkReal x11247=((((-2.0)*r00*r01*r20*r21*x11245))+(((-1.0)*(r02*r02)))+(((-1.0)*x11246*(r01*r01)*(r21*r21)))+(((-1.0)*x11246*(r00*r00)*(r20*r20))));
j4eval[0]=x11247;
j4eval[1]=IKsign(x11247);
j4eval[2]=r02;
j4eval[3]=x11244;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11249=(gconst4*r01);
IkReal x11250=(gconst5*r00);
CheckValue<IkReal> x11251 = IKatan2WithCheck(IkReal(((((-1.0)*x11250))+x11249)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11251.valid){
continue;
}
CheckValue<IkReal> x11252=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11249*x11249)))+(((-1.0)*(x11250*x11250)))+(((2.0)*x11249*x11250)))),-1);
if(!x11252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11251.value)+(((1.5707963267949)*(x11252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11253=IKcos(j4);
IkReal x11254=IKsin(j4);
IkReal x11255=(gconst5*r10);
IkReal x11256=(gconst5*r00);
IkReal x11257=(gconst5*r20);
IkReal x11258=((1.0)*x11253);
IkReal x11259=(gconst4*x11254);
IkReal x11260=(gconst4*x11253);
IkReal x11261=((1.0)*x11254);
evalcond[0]=(((r02*x11254))+(((-1.0)*x11256*x11258))+((r01*x11260)));
evalcond[1]=((((-1.0)*x11257*x11261))+((r21*x11259))+(((-1.0)*r22*x11258)));
evalcond[2]=((((-1.0)*x11255*x11261))+((r11*x11259))+(((-1.0)*r12*x11258)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11258))+(((-1.0)*x11256*x11261))+((r01*x11259)));
evalcond[4]=(((r22*x11254))+((cj2*sj1))+((cj1*sj2))+((r21*x11260))+(((-1.0)*x11257*x11258)));
evalcond[5]=(((r11*x11260))+(((-1.0)*sj1*sj2))+((r12*x11254))+((cj1*cj2))+(((-1.0)*x11255*x11258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11262=((1.0)*gconst5);
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11262))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
CheckValue<IkReal> x11264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11262))+(((-1.0)*gconst4*r20)))),-1);
if(!x11264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11263.value)+(((1.5707963267949)*(x11264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11265=IKcos(j4);
IkReal x11266=IKsin(j4);
IkReal x11267=(gconst5*r10);
IkReal x11268=(gconst5*r00);
IkReal x11269=(gconst5*r20);
IkReal x11270=((1.0)*x11265);
IkReal x11271=(gconst4*x11266);
IkReal x11272=(gconst4*x11265);
IkReal x11273=((1.0)*x11266);
evalcond[0]=(((r01*x11272))+(((-1.0)*x11268*x11270))+((r02*x11266)));
evalcond[1]=(((r21*x11271))+(((-1.0)*r22*x11270))+(((-1.0)*x11269*x11273)));
evalcond[2]=((((-1.0)*r12*x11270))+(((-1.0)*x11267*x11273))+((r11*x11271)));
evalcond[3]=((1.0)+((r01*x11271))+(((-1.0)*r02*x11270))+(((-1.0)*x11268*x11273)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11266))+((r21*x11272))+(((-1.0)*x11269*x11270)));
evalcond[5]=((((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11267*x11270))+((r11*x11272))+((r12*x11266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11274.valid){
continue;
}
CheckValue<IkReal> x11275 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11274.value)))+(x11275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11276=IKcos(j4);
IkReal x11277=IKsin(j4);
IkReal x11278=(gconst5*r10);
IkReal x11279=(gconst5*r00);
IkReal x11280=(gconst5*r20);
IkReal x11281=((1.0)*x11276);
IkReal x11282=(gconst4*x11277);
IkReal x11283=(gconst4*x11276);
IkReal x11284=((1.0)*x11277);
evalcond[0]=((((-1.0)*x11279*x11281))+((r02*x11277))+((r01*x11283)));
evalcond[1]=((((-1.0)*r22*x11281))+((r21*x11282))+(((-1.0)*x11280*x11284)));
evalcond[2]=((((-1.0)*r12*x11281))+(((-1.0)*x11278*x11284))+((r11*x11282)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11281))+(((-1.0)*x11279*x11284))+((r01*x11282)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11277))+((r21*x11283))+(((-1.0)*x11280*x11281)));
evalcond[5]=((((-1.0)*x11278*x11281))+((r12*x11277))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r11*x11283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11285=((-1.0)*r21);
CheckValue<IkReal> x11288 = IKatan2WithCheck(IkReal(x11285),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11288.valid){
continue;
}
IkReal x11286=((1.0)*(x11288.value));
IkReal x11287=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11286)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11286)));
IkReal gconst4=(x11285*x11287);
IkReal gconst5=((1.0)*r20*x11287);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11289=((-1.0)*r21);
CheckValue<IkReal> x11292 = IKatan2WithCheck(IkReal(x11289),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11292.valid){
continue;
}
IkReal x11290=((1.0)*(x11292.value));
IkReal x11291=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11290)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11290)));
IkReal gconst4=(x11289*x11291);
IkReal gconst5=((1.0)*r20*x11291);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11293=((-1.0)*r21);
CheckValue<IkReal> x11296 = IKatan2WithCheck(IkReal(x11293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11296.valid){
continue;
}
IkReal x11294=((1.0)*(x11296.value));
IkReal x11295=x10087;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11294)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11294)));
IkReal gconst4=(x11293*x11295);
IkReal gconst5=((1.0)*r20*x11295);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11297=(gconst5*r00);
IkReal x11298=(gconst4*r01);
CheckValue<IkReal> x11299=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11297*x11298))+(r02*r02)+(x11297*x11297)+(x11298*x11298))),-1);
if(!x11299.valid){
continue;
}
CheckValue<IkReal> x11300 = IKatan2WithCheck(IkReal((x11297+(((-1.0)*x11298)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11299.value)))+(x11300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11301=IKsin(j4);
IkReal x11302=IKcos(j4);
IkReal x11303=(gconst4*r11);
IkReal x11304=(gconst5*r10);
IkReal x11305=(gconst5*r00);
IkReal x11306=(gconst5*r20);
IkReal x11307=((1.0)*x11302);
IkReal x11308=(gconst4*x11301);
IkReal x11309=((1.0)*x11301);
evalcond[0]=((((-1.0)*x11306*x11309))+(((-1.0)*r22*x11307))+((r21*x11308)));
evalcond[1]=((((-1.0)*x11304*x11309))+((x11301*x11303))+(((-1.0)*r12*x11307)));
evalcond[2]=((((-1.0)*gconst4*r01*x11307))+(((-1.0)*r02*x11309))+((x11302*x11305)));
evalcond[3]=((1.0)+(((-1.0)*x11305*x11309))+((r01*x11308))+(((-1.0)*r02*x11307)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11307))+(((-1.0)*r22*x11309))+((x11302*x11306)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11303*x11307))+((x11302*x11304))+((cj1*cj2))+(((-1.0)*r12*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11310=((1.0)*gconst5);
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11310))+(((-1.0)*gconst4*r20)))),-1);
if(!x11311.valid){
continue;
}
CheckValue<IkReal> x11312 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11311.value)))+(x11312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11313=IKsin(j4);
IkReal x11314=IKcos(j4);
IkReal x11315=(gconst4*r11);
IkReal x11316=(gconst5*r10);
IkReal x11317=(gconst5*r00);
IkReal x11318=(gconst5*r20);
IkReal x11319=((1.0)*x11314);
IkReal x11320=(gconst4*x11313);
IkReal x11321=((1.0)*x11313);
evalcond[0]=((((-1.0)*r22*x11319))+((r21*x11320))+(((-1.0)*x11318*x11321)));
evalcond[1]=((((-1.0)*r12*x11319))+((x11313*x11315))+(((-1.0)*x11316*x11321)));
evalcond[2]=((((-1.0)*r02*x11321))+(((-1.0)*gconst4*r01*x11319))+((x11314*x11317)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11319))+(((-1.0)*x11317*x11321))+((r01*x11320)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11321))+((cj1*sj2))+((x11314*x11318))+(((-1.0)*gconst4*r21*x11319)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r12*x11321))+((x11314*x11316))+((cj1*cj2))+(((-1.0)*x11315*x11319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11322=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11322.valid){
continue;
}
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11322.value)))+(x11323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11324=IKsin(j4);
IkReal x11325=IKcos(j4);
IkReal x11326=(gconst4*r11);
IkReal x11327=(gconst5*r10);
IkReal x11328=(gconst5*r00);
IkReal x11329=(gconst5*r20);
IkReal x11330=((1.0)*x11325);
IkReal x11331=(gconst4*x11324);
IkReal x11332=((1.0)*x11324);
evalcond[0]=((((-1.0)*r22*x11330))+((r21*x11331))+(((-1.0)*x11329*x11332)));
evalcond[1]=((((-1.0)*r12*x11330))+((x11324*x11326))+(((-1.0)*x11327*x11332)));
evalcond[2]=(((x11325*x11328))+(((-1.0)*gconst4*r01*x11330))+(((-1.0)*r02*x11332)));
evalcond[3]=((1.0)+((r01*x11331))+(((-1.0)*x11328*x11332))+(((-1.0)*r02*x11330)));
evalcond[4]=(((cj2*sj1))+((x11325*x11329))+((cj1*sj2))+(((-1.0)*r22*x11332))+(((-1.0)*gconst4*r21*x11330)));
evalcond[5]=((((-1.0)*r12*x11332))+((x11325*x11327))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11326*x11330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11333=((-1.0)*r21);
IkReal x11334=((-1.0)*r20);
CheckValue<IkReal> x11336 = IKatan2WithCheck(IkReal(x11333),IkReal(x11334),IKFAST_ATAN2_MAGTHRESH);
if(!x11336.valid){
continue;
}
IkReal x11335=((1.0)*(x11336.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11335)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11334);
rxp0_2=(py*r00);
rxp1_0=(py*x11333);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11335)));
IkReal gconst4=x11333;
IkReal gconst5=((1.0)*r20);
IkReal x11337=((1.0)*r01*r21);
IkReal x11338=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11337))+(((-1.0)*x11338)));
j4eval[1]=((((-1.0)*cj3*x11338))+(((-1.0)*cj3*x11337)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11339=((-1.0)*r21);
IkReal x11340=((-1.0)*r20);
CheckValue<IkReal> x11342 = IKatan2WithCheck(IkReal(x11339),IkReal(x11340),IKFAST_ATAN2_MAGTHRESH);
if(!x11342.valid){
continue;
}
IkReal x11341=((1.0)*(x11342.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11341)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11340);
rxp0_2=(py*r00);
rxp1_0=(py*x11339);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11341)));
IkReal gconst4=x11339;
IkReal gconst5=((1.0)*r20);
IkReal x11343=((1.0)*r01*r21);
IkReal x11344=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11344))+(((-1.0)*x11343)));
j4eval[1]=(((sj3*x11343))+((sj3*x11344)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11345=((-1.0)*r21);
IkReal x11346=((-1.0)*r20);
CheckValue<IkReal> x11348 = IKatan2WithCheck(IkReal(x11345),IkReal(x11346),IKFAST_ATAN2_MAGTHRESH);
if(!x11348.valid){
continue;
}
IkReal x11347=((1.0)*(x11348.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11347)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11346);
rxp0_2=(py*r00);
rxp1_0=(py*x11345);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11347)));
IkReal gconst4=x11345;
IkReal gconst5=((1.0)*r20);
IkReal x11349=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11349))+(((-1.0)*r00*r20*x11349)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11350=((1.0)*gconst5);
CheckValue<IkReal> x11351=IKPowWithIntegerCheck(cj3,-1);
if(!x11351.valid){
continue;
}
CheckValue<IkReal> x11352=IKPowWithIntegerCheck(r12,-1);
if(!x11352.valid){
continue;
}
CheckValue<IkReal> x11353=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11350))+((cj3*gconst4*r01))),-1);
if(!x11353.valid){
continue;
}
if( IKabs(((x11351.value)*(x11352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11353.value)*(((((-1.0)*r01*sj3*x11350))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11351.value)*(x11352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11353.value)*(((((-1.0)*r01*sj3*x11350))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11351.value)*(x11352.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11353.value)*(((((-1.0)*r01*sj3*x11350))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11354=IKsin(j4);
IkReal x11355=IKcos(j4);
IkReal x11356=(cj2*sj1);
IkReal x11357=(cj1*sj2);
IkReal x11358=(sj1*sj2);
IkReal x11359=(gconst5*sj3);
IkReal x11360=(gconst5*r00);
IkReal x11361=(cj3*gconst5);
IkReal x11362=(gconst4*sj3);
IkReal x11363=(cj3*gconst4);
IkReal x11364=(cj1*cj2);
IkReal x11365=((1.0)*x11354);
IkReal x11366=(gconst4*x11354);
IkReal x11367=((1.0)*x11355);
IkReal x11368=(x11357+x11356);
IkReal x11369=(x11355*x11359);
IkReal x11370=(x11355*x11363);
evalcond[0]=((-1.0)*r12*x11355);
evalcond[1]=(((r21*x11366))+(((-1.0)*gconst5*r20*x11365)));
evalcond[2]=(x11364+(((-1.0)*x11358))+((cj3*r12*x11354)));
evalcond[3]=((((-1.0)*r12*sj3*x11365))+x11368);
evalcond[4]=((1.0)+((r01*x11366))+(((-1.0)*x11360*x11365)));
evalcond[5]=(((r00*x11362))+((r01*x11370))+((r01*x11359))+(((-1.0)*cj3*x11360*x11367)));
evalcond[6]=(((r01*x11361))+((r00*x11363))+((r00*x11369))+(((-1.0)*r01*x11362*x11367)));
evalcond[7]=(((r21*x11370))+x11368+((r21*x11359))+(((-1.0)*r20*x11361*x11367))+((r20*x11362)));
evalcond[8]=(((r21*x11361))+(((-1.0)*x11364))+(((-1.0)*r21*x11362*x11367))+x11358+((r20*x11369))+((r20*x11363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11371=((1.0)*gconst4);
IkReal x11372=(gconst5*r00);
CheckValue<IkReal> x11373=IKPowWithIntegerCheck(((((-1.0)*x11372))+((gconst4*r01))),-1);
if(!x11373.valid){
continue;
}
CheckValue<IkReal> x11374=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11371))+((sj3*x11372))),-1);
if(!x11374.valid){
continue;
}
if( IKabs(((-1.0)*(x11373.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11374.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11371)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11373.value)))+IKsqr(((x11374.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11371))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11373.value)), ((x11374.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11371))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11375=IKsin(j4);
IkReal x11376=IKcos(j4);
IkReal x11377=(cj2*sj1);
IkReal x11378=(cj1*sj2);
IkReal x11379=(sj1*sj2);
IkReal x11380=(gconst5*sj3);
IkReal x11381=(gconst5*r00);
IkReal x11382=(cj3*gconst5);
IkReal x11383=(gconst4*sj3);
IkReal x11384=(cj3*gconst4);
IkReal x11385=(cj1*cj2);
IkReal x11386=((1.0)*x11375);
IkReal x11387=(gconst4*x11375);
IkReal x11388=((1.0)*x11376);
IkReal x11389=(x11378+x11377);
IkReal x11390=(x11376*x11380);
IkReal x11391=(x11376*x11384);
evalcond[0]=((-1.0)*r12*x11376);
evalcond[1]=((((-1.0)*gconst5*r20*x11386))+((r21*x11387)));
evalcond[2]=((((-1.0)*x11379))+x11385+((cj3*r12*x11375)));
evalcond[3]=((((-1.0)*r12*sj3*x11386))+x11389);
evalcond[4]=((1.0)+(((-1.0)*x11381*x11386))+((r01*x11387)));
evalcond[5]=(((r01*x11391))+((r01*x11380))+((r00*x11383))+(((-1.0)*cj3*x11381*x11388)));
evalcond[6]=(((r00*x11390))+((r01*x11382))+(((-1.0)*r01*x11383*x11388))+((r00*x11384)));
evalcond[7]=(((r20*x11383))+x11389+(((-1.0)*r20*x11382*x11388))+((r21*x11380))+((r21*x11391)));
evalcond[8]=(((r20*x11390))+(((-1.0)*r21*x11383*x11388))+((r20*x11384))+x11379+((r21*x11382))+(((-1.0)*x11385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11392=((1.0)*gconst5);
IkReal x11393=(gconst4*r01);
CheckValue<IkReal> x11394=IKPowWithIntegerCheck((x11393+(((-1.0)*r00*x11392))),-1);
if(!x11394.valid){
continue;
}
CheckValue<IkReal> x11395=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11392))+((cj3*x11393))),-1);
if(!x11395.valid){
continue;
}
if( IKabs(((-1.0)*(x11394.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11395.value)*(((((-1.0)*r01*sj3*x11392))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11394.value)))+IKsqr(((x11395.value)*(((((-1.0)*r01*sj3*x11392))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11394.value)), ((x11395.value)*(((((-1.0)*r01*sj3*x11392))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11396=IKsin(j4);
IkReal x11397=IKcos(j4);
IkReal x11398=(cj2*sj1);
IkReal x11399=(cj1*sj2);
IkReal x11400=(sj1*sj2);
IkReal x11401=(gconst5*sj3);
IkReal x11402=(gconst5*r00);
IkReal x11403=(cj3*gconst5);
IkReal x11404=(gconst4*sj3);
IkReal x11405=(cj3*gconst4);
IkReal x11406=(cj1*cj2);
IkReal x11407=((1.0)*x11396);
IkReal x11408=(gconst4*x11396);
IkReal x11409=((1.0)*x11397);
IkReal x11410=(x11399+x11398);
IkReal x11411=(x11397*x11401);
IkReal x11412=(x11397*x11405);
evalcond[0]=((-1.0)*r12*x11397);
evalcond[1]=(((r21*x11408))+(((-1.0)*gconst5*r20*x11407)));
evalcond[2]=(x11406+((cj3*r12*x11396))+(((-1.0)*x11400)));
evalcond[3]=(x11410+(((-1.0)*r12*sj3*x11407)));
evalcond[4]=((1.0)+(((-1.0)*x11402*x11407))+((r01*x11408)));
evalcond[5]=(((r01*x11412))+(((-1.0)*cj3*x11402*x11409))+((r01*x11401))+((r00*x11404)));
evalcond[6]=(((r00*x11411))+(((-1.0)*r01*x11404*x11409))+((r01*x11403))+((r00*x11405)));
evalcond[7]=(((r21*x11401))+x11410+(((-1.0)*r20*x11403*x11409))+((r21*x11412))+((r20*x11404)));
evalcond[8]=(((r21*x11403))+x11400+((r20*x11405))+(((-1.0)*r21*x11404*x11409))+(((-1.0)*x11406))+((r20*x11411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11413=gconst4*gconst4;
IkReal x11414=gconst5*gconst5;
IkReal x11415=(r01*r20);
IkReal x11416=(gconst4*sj3);
IkReal x11417=(r01*r21);
IkReal x11418=((1.0)*cj3);
IkReal x11419=(r00*r21);
IkReal x11420=(r00*r20);
IkReal x11421=(cj3*gconst4*gconst5);
IkReal x11422=((1.0)*x11414);
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal((((r00*r22*x11416))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11416*x11417))+((sj3*x11413*x11419))+(((-1.0)*sj3*x11415*x11422))+(((-1.0)*gconst5*x11416*x11420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
CheckValue<IkReal> x11424=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11413*x11417*x11418))+(((-1.0)*x11414*x11418*x11420))+(((-1.0)*r02*r22*x11418))+((x11419*x11421))+((x11415*x11421)))),-1);
if(!x11424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11423.value)+(((1.5707963267949)*(x11424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11425=IKsin(j4);
IkReal x11426=IKcos(j4);
IkReal x11427=(cj2*sj1);
IkReal x11428=(cj1*sj2);
IkReal x11429=(gconst5*sj3);
IkReal x11430=(gconst4*r11);
IkReal x11431=(sj1*sj2);
IkReal x11432=(gconst5*r10);
IkReal x11433=(cj1*cj2);
IkReal x11434=(gconst4*r01);
IkReal x11435=(gconst5*r00);
IkReal x11436=(gconst4*sj3);
IkReal x11437=(cj3*gconst5);
IkReal x11438=(cj3*gconst4);
IkReal x11439=(gconst4*r21);
IkReal x11440=((1.0)*x11426);
IkReal x11441=((1.0)*x11425);
IkReal x11442=(cj3*x11425);
IkReal x11443=(cj3*x11426);
IkReal x11444=(x11428+x11427);
evalcond[0]=(((x11425*x11439))+(((-1.0)*gconst5*r20*x11441))+(((-1.0)*r22*x11440)));
evalcond[1]=((((-1.0)*r12*x11440))+((x11425*x11430))+(((-1.0)*x11432*x11441)));
evalcond[2]=((1.0)+((x11425*x11434))+(((-1.0)*x11435*x11441))+(((-1.0)*r02*x11440)));
evalcond[3]=(((r01*x11429))+((r00*x11436))+((r02*x11442))+((x11434*x11443))+(((-1.0)*cj3*x11435*x11440)));
evalcond[4]=((((-1.0)*r02*sj3*x11441))+(((-1.0)*sj3*x11434*x11440))+((r01*x11437))+((r00*x11438))+((r00*x11426*x11429)));
evalcond[5]=(((r20*x11436))+x11444+((r22*x11442))+(((-1.0)*r20*x11437*x11440))+((r21*x11429))+((r21*x11426*x11438)));
evalcond[6]=(((r12*x11442))+x11433+((r10*x11436))+((x11430*x11443))+(((-1.0)*x11431))+((r11*x11429))+(((-1.0)*cj3*x11432*x11440)));
evalcond[7]=(x11444+((r10*x11438))+(((-1.0)*r12*sj3*x11441))+((r11*x11437))+((r10*x11426*x11429))+(((-1.0)*sj3*x11430*x11440)));
evalcond[8]=(((r20*x11438))+x11431+(((-1.0)*r22*sj3*x11441))+((r20*x11426*x11429))+((r21*x11437))+(((-1.0)*x11433))+(((-1.0)*r21*x11436*x11440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11445=((1.0)*gconst5);
CheckValue<IkReal> x11446 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11446.valid){
continue;
}
CheckValue<IkReal> x11447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11445))+(((-1.0)*gconst4*r20)))),-1);
if(!x11447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11446.value)+(((1.5707963267949)*(x11447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11448=IKsin(j4);
IkReal x11449=IKcos(j4);
IkReal x11450=(cj2*sj1);
IkReal x11451=(cj1*sj2);
IkReal x11452=(gconst5*sj3);
IkReal x11453=(gconst4*r11);
IkReal x11454=(sj1*sj2);
IkReal x11455=(gconst5*r10);
IkReal x11456=(cj1*cj2);
IkReal x11457=(gconst4*r01);
IkReal x11458=(gconst5*r00);
IkReal x11459=(gconst4*sj3);
IkReal x11460=(cj3*gconst5);
IkReal x11461=(cj3*gconst4);
IkReal x11462=(gconst4*r21);
IkReal x11463=((1.0)*x11449);
IkReal x11464=((1.0)*x11448);
IkReal x11465=(cj3*x11448);
IkReal x11466=(cj3*x11449);
IkReal x11467=(x11450+x11451);
evalcond[0]=(((x11448*x11462))+(((-1.0)*gconst5*r20*x11464))+(((-1.0)*r22*x11463)));
evalcond[1]=((((-1.0)*x11455*x11464))+(((-1.0)*r12*x11463))+((x11448*x11453)));
evalcond[2]=((1.0)+(((-1.0)*x11458*x11464))+((x11448*x11457))+(((-1.0)*r02*x11463)));
evalcond[3]=(((x11457*x11466))+(((-1.0)*cj3*x11458*x11463))+((r01*x11452))+((r00*x11459))+((r02*x11465)));
evalcond[4]=(((r01*x11460))+(((-1.0)*r02*sj3*x11464))+((r00*x11449*x11452))+(((-1.0)*sj3*x11457*x11463))+((r00*x11461)));
evalcond[5]=(x11467+((r20*x11459))+((r21*x11449*x11461))+((r22*x11465))+((r21*x11452))+(((-1.0)*r20*x11460*x11463)));
evalcond[6]=(((r10*x11459))+(((-1.0)*cj3*x11455*x11463))+((r12*x11465))+x11456+(((-1.0)*x11454))+((r11*x11452))+((x11453*x11466)));
evalcond[7]=((((-1.0)*sj3*x11453*x11463))+x11467+((r11*x11460))+((r10*x11461))+(((-1.0)*r12*sj3*x11464))+((r10*x11449*x11452)));
evalcond[8]=((((-1.0)*r21*x11459*x11463))+x11454+(((-1.0)*r22*sj3*x11464))+(((-1.0)*x11456))+((r20*x11461))+((r20*x11449*x11452))+((r21*x11460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11468=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11468.valid){
continue;
}
CheckValue<IkReal> x11469 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11468.value)))+(x11469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11470=IKsin(j4);
IkReal x11471=IKcos(j4);
IkReal x11472=(cj2*sj1);
IkReal x11473=(cj1*sj2);
IkReal x11474=(gconst5*sj3);
IkReal x11475=(gconst4*r11);
IkReal x11476=(sj1*sj2);
IkReal x11477=(gconst5*r10);
IkReal x11478=(cj1*cj2);
IkReal x11479=(gconst4*r01);
IkReal x11480=(gconst5*r00);
IkReal x11481=(gconst4*sj3);
IkReal x11482=(cj3*gconst5);
IkReal x11483=(cj3*gconst4);
IkReal x11484=(gconst4*r21);
IkReal x11485=((1.0)*x11471);
IkReal x11486=((1.0)*x11470);
IkReal x11487=(cj3*x11470);
IkReal x11488=(cj3*x11471);
IkReal x11489=(x11472+x11473);
evalcond[0]=(((x11470*x11484))+(((-1.0)*r22*x11485))+(((-1.0)*gconst5*r20*x11486)));
evalcond[1]=((((-1.0)*r12*x11485))+(((-1.0)*x11477*x11486))+((x11470*x11475)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11485))+(((-1.0)*x11480*x11486))+((x11470*x11479)));
evalcond[3]=((((-1.0)*cj3*x11480*x11485))+((r00*x11481))+((x11479*x11488))+((r02*x11487))+((r01*x11474)));
evalcond[4]=((((-1.0)*r02*sj3*x11486))+((r00*x11483))+((r01*x11482))+((r00*x11471*x11474))+(((-1.0)*sj3*x11479*x11485)));
evalcond[5]=(((r20*x11481))+x11489+((r21*x11471*x11483))+((r22*x11487))+(((-1.0)*r20*x11482*x11485))+((r21*x11474)));
evalcond[6]=((((-1.0)*x11476))+x11478+(((-1.0)*cj3*x11477*x11485))+((r11*x11474))+((r12*x11487))+((r10*x11481))+((x11475*x11488)));
evalcond[7]=(x11489+((r10*x11471*x11474))+((r11*x11482))+(((-1.0)*sj3*x11475*x11485))+((r10*x11483))+(((-1.0)*r12*sj3*x11486)));
evalcond[8]=((((-1.0)*x11478))+((r20*x11483))+x11476+(((-1.0)*r22*sj3*x11486))+(((-1.0)*r21*x11481*x11485))+((r21*x11482))+((r20*x11471*x11474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11490=((-1.0)*r21);
IkReal x11491=((-1.0)*px);
CheckValue<IkReal> x11493 = IKatan2WithCheck(IkReal(x11490),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11493.valid){
continue;
}
IkReal x11492=((1.0)*(x11493.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11492)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11491);
rxp1_1=(px*r21);
rxp1_2=(r11*x11491);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11492)));
IkReal gconst4=x11490;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11494=((-1.0)*r21);
IkReal x11495=((-1.0)*px);
CheckValue<IkReal> x11497 = IKatan2WithCheck(IkReal(x11494),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11497.valid){
continue;
}
IkReal x11496=((1.0)*(x11497.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11496)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11495);
rxp1_1=(px*r21);
rxp1_2=(r11*x11495);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11496)));
IkReal gconst4=x11494;
IkReal gconst5=((1.0)*r20);
IkReal x11498=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11498))+((x11498*(r10*r10)))+(((-1.0)*x11498*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11499=((-1.0)*r21);
IkReal x11500=((-1.0)*px);
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(x11499),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
IkReal x11501=((1.0)*(x11502.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11501)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11500);
rxp1_1=(px*r21);
rxp1_2=(r11*x11500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11501)));
IkReal gconst4=x11499;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11503=((-1.0)*r21);
IkReal x11504=((-1.0)*px);
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal(x11503),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
IkReal x11505=((1.0)*(x11506.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11505)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11504);
rxp1_1=(px*r21);
rxp1_2=(r11*x11504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11505)));
IkReal gconst4=x11503;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11507=((-1.0)*r21);
IkReal x11508=((-1.0)*px);
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal(x11507),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
IkReal x11509=((1.0)*(x11510.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11509)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11508);
rxp1_1=(px*r21);
rxp1_2=(r11*x11508);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11509)));
IkReal gconst4=x11507;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11511=((-1.0)*r21);
IkReal x11512=((-1.0)*px);
CheckValue<IkReal> x11514 = IKatan2WithCheck(IkReal(x11511),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11514.valid){
continue;
}
IkReal x11513=((1.0)*(x11514.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11513)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11512);
rxp1_1=(px*r21);
rxp1_2=(r11*x11512);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11513)));
IkReal gconst4=x11511;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11517=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11517.valid){
continue;
}
IkReal x11515=x11517.value;
IkReal x11516=(sj0*x11515);
cj4array[0]=(((cj2*sj1*x11516))+((cj1*sj2*x11516)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11518=IKsin(j4);
IkReal x11519=IKcos(j4);
IkReal x11520=(gconst5*r20);
IkReal x11521=(gconst4*x11518);
IkReal x11522=((1.0)*x11519);
IkReal x11523=((1.0)*x11518);
evalcond[0]=((-1.0)*r02*x11518);
evalcond[1]=((((-1.0)*r02*x11522))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x11521))+(((-1.0)*x11520*x11523)));
evalcond[3]=(((r11*x11521))+(((-1.0)*gconst5*r10*x11523)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11519*x11520))+(((-1.0)*gconst4*r21*x11522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11525=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11525.valid){
continue;
}
IkReal x11524=x11525.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11524))+((cj1*cj2*x11524)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11526=IKsin(j4);
IkReal x11527=IKcos(j4);
IkReal x11528=(gconst5*r10);
IkReal x11529=((1.0)*sj0);
IkReal x11530=(gconst4*x11526);
IkReal x11531=((1.0)*x11527);
IkReal x11532=((1.0)*x11526);
evalcond[0]=((-1.0)*r02*x11526);
evalcond[1]=((((-1.0)*x11529))+(((-1.0)*r02*x11531)));
evalcond[2]=((((-1.0)*gconst5*r20*x11532))+((r21*x11530)));
evalcond[3]=(((r11*x11530))+(((-1.0)*x11528*x11532)));
evalcond[4]=((((-1.0)*cj2*sj1*x11529))+((x11527*x11528))+(((-1.0)*cj1*sj2*x11529))+(((-1.0)*gconst4*r11*x11531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11533=IKPowWithIntegerCheck(r02,-1);
if(!x11533.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11533.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11534=IKsin(j4);
IkReal x11535=IKcos(j4);
IkReal x11536=((1.0)*sj0);
IkReal x11537=(gconst5*x11535);
IkReal x11538=(gconst4*x11534);
IkReal x11539=((1.0)*gconst4*x11535);
IkReal x11540=((1.0)*gconst5*x11534);
evalcond[0]=((-1.0)*r02*x11534);
evalcond[1]=(((r21*x11538))+(((-1.0)*r20*x11540)));
evalcond[2]=(((r11*x11538))+(((-1.0)*r10*x11540)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11537))+(((-1.0)*r21*x11539)));
evalcond[4]=((((-1.0)*cj2*sj1*x11536))+(((-1.0)*r11*x11539))+(((-1.0)*cj1*sj2*x11536))+((r10*x11537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11541=((-1.0)*r21);
IkReal x11542=((-1.0)*px);
CheckValue<IkReal> x11544 = IKatan2WithCheck(IkReal(x11541),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11544.valid){
continue;
}
IkReal x11543=((1.0)*(x11544.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11543)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11542);
rxp1_1=(px*r21);
rxp1_2=(r11*x11542);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11543)));
IkReal gconst4=x11541;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11545=((-1.0)*r21);
IkReal x11546=((-1.0)*px);
CheckValue<IkReal> x11548 = IKatan2WithCheck(IkReal(x11545),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11548.valid){
continue;
}
IkReal x11547=((1.0)*(x11548.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11547)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11546);
rxp1_1=(px*r21);
rxp1_2=(r11*x11546);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11547)));
IkReal gconst4=x11545;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11549=((-1.0)*r21);
IkReal x11550=((-1.0)*px);
CheckValue<IkReal> x11552 = IKatan2WithCheck(IkReal(x11549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11552.valid){
continue;
}
IkReal x11551=((1.0)*(x11552.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11551)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11550);
rxp1_1=(px*r21);
rxp1_2=(r11*x11550);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11551)));
IkReal gconst4=x11549;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11555=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11555.valid){
continue;
}
IkReal x11553=x11555.value;
IkReal x11554=(sj0*x11553);
cj4array[0]=(((cj2*sj1*x11554))+((cj1*sj2*x11554)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11556=IKsin(j4);
IkReal x11557=IKcos(j4);
IkReal x11558=(gconst5*r20);
IkReal x11559=(gconst4*x11556);
IkReal x11560=((1.0)*x11557);
IkReal x11561=((1.0)*x11556);
evalcond[0]=(r02*x11556);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11560)));
evalcond[2]=(((r21*x11559))+(((-1.0)*x11558*x11561)));
evalcond[3]=(((r11*x11559))+(((-1.0)*gconst5*r10*x11561)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11558*x11560))+((gconst4*r21*x11557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11563=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11563.valid){
continue;
}
IkReal x11562=x11563.value;
cj4array[0]=(((cj1*cj2*x11562))+(((-1.0)*sj1*sj2*x11562)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11564=IKsin(j4);
IkReal x11565=IKcos(j4);
IkReal x11566=(gconst4*r11);
IkReal x11567=((1.0)*sj0);
IkReal x11568=(gconst5*r10);
IkReal x11569=((1.0)*x11565);
IkReal x11570=((1.0)*x11564);
evalcond[0]=(r02*x11564);
evalcond[1]=((((-1.0)*x11567))+(((-1.0)*r02*x11569)));
evalcond[2]=(((gconst4*r21*x11564))+(((-1.0)*gconst5*r20*x11570)));
evalcond[3]=(((x11564*x11566))+(((-1.0)*x11568*x11570)));
evalcond[4]=(((x11565*x11566))+(((-1.0)*cj2*sj1*x11567))+(((-1.0)*cj1*sj2*x11567))+(((-1.0)*x11568*x11569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11571=IKPowWithIntegerCheck(r02,-1);
if(!x11571.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11571.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11572=IKsin(j4);
IkReal x11573=IKcos(j4);
IkReal x11574=(gconst4*r11);
IkReal x11575=((1.0)*cj1);
IkReal x11576=(gconst4*r21);
IkReal x11577=((1.0)*gconst5*x11573);
IkReal x11578=((1.0)*gconst5*x11572);
evalcond[0]=(r02*x11572);
evalcond[1]=((((-1.0)*r20*x11578))+((x11572*x11576)));
evalcond[2]=((((-1.0)*r10*x11578))+((x11572*x11574)));
evalcond[3]=(((x11573*x11576))+((sj1*sj2))+(((-1.0)*cj2*x11575))+(((-1.0)*r20*x11577)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x11573*x11574))+(((-1.0)*sj0*sj2*x11575))+(((-1.0)*r10*x11577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11580=IKPowWithIntegerCheck(r02,-1);
if(!x11580.valid){
continue;
}
IkReal x11579=x11580.value;
CheckValue<IkReal> x11581=IKPowWithIntegerCheck(cj3,-1);
if(!x11581.valid){
continue;
}
if( IKabs((x11579*(x11581.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11579)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11579*(x11581.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11579))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11579*(x11581.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11579));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11582=IKsin(j4);
IkReal x11583=IKcos(j4);
IkReal x11584=(gconst5*sj3);
IkReal x11585=(gconst4*r11);
IkReal x11586=(sj1*sj2);
IkReal x11587=((1.0)*gconst5);
IkReal x11588=(cj2*sj1);
IkReal x11589=((1.0)*sj0);
IkReal x11590=((1.0)*cj0);
IkReal x11591=(gconst4*r21);
IkReal x11592=(cj1*sj2);
IkReal x11593=(cj3*gconst4);
IkReal x11594=(gconst4*sj3);
IkReal x11595=(cj3*gconst5);
IkReal x11596=(r20*x11583);
IkReal x11597=((1.0)*cj1*cj2);
IkReal x11598=(r10*x11583);
IkReal x11599=(cj3*x11583);
IkReal x11600=(r02*x11582);
IkReal x11601=((1.0)*sj3*x11583);
evalcond[0]=((((-1.0)*x11589))+(((-1.0)*r02*x11583)));
evalcond[1]=(((x11582*x11591))+(((-1.0)*r20*x11582*x11587)));
evalcond[2]=(((x11582*x11585))+cj0+(((-1.0)*r10*x11582*x11587)));
evalcond[3]=(((cj3*x11600))+((cj0*x11586))+(((-1.0)*cj1*cj2*x11590)));
evalcond[4]=((((-1.0)*x11590*x11592))+(((-1.0)*x11588*x11590))+(((-1.0)*sj3*x11600)));
evalcond[5]=((((-1.0)*cj3*x11587*x11596))+x11588+x11592+((r20*x11594))+((x11591*x11599))+((r21*x11584)));
evalcond[6]=(x11586+((r20*x11593))+(((-1.0)*x11597))+(((-1.0)*x11591*x11601))+((r21*x11595))+((x11584*x11596)));
evalcond[7]=((((-1.0)*cj3*x11587*x11598))+((sj0*x11586))+(((-1.0)*cj1*cj2*x11589))+((r10*x11594))+((x11585*x11599))+((r11*x11584)));
evalcond[8]=(((r10*x11593))+(((-1.0)*x11588*x11589))+(((-1.0)*x11585*x11601))+((r11*x11595))+((x11584*x11598))+(((-1.0)*x11589*x11592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11602=((1.0)*gconst5);
CheckValue<IkReal> x11603=IKPowWithIntegerCheck(((((-1.0)*r10*x11602))+((gconst4*r11))),-1);
if(!x11603.valid){
continue;
}
CheckValue<IkReal> x11604=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11602))+((cj3*gconst4*r21))),-1);
if(!x11604.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11603.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11604.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11602))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11603.value)))+IKsqr(((x11604.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11602))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11603.value)), ((x11604.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x11602))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11605=IKsin(j4);
IkReal x11606=IKcos(j4);
IkReal x11607=(gconst5*sj3);
IkReal x11608=(gconst4*r11);
IkReal x11609=(sj1*sj2);
IkReal x11610=((1.0)*gconst5);
IkReal x11611=(cj2*sj1);
IkReal x11612=((1.0)*sj0);
IkReal x11613=((1.0)*cj0);
IkReal x11614=(gconst4*r21);
IkReal x11615=(cj1*sj2);
IkReal x11616=(cj3*gconst4);
IkReal x11617=(gconst4*sj3);
IkReal x11618=(cj3*gconst5);
IkReal x11619=(r20*x11606);
IkReal x11620=((1.0)*cj1*cj2);
IkReal x11621=(r10*x11606);
IkReal x11622=(cj3*x11606);
IkReal x11623=(r02*x11605);
IkReal x11624=((1.0)*sj3*x11606);
evalcond[0]=((((-1.0)*x11612))+(((-1.0)*r02*x11606)));
evalcond[1]=(((x11605*x11614))+(((-1.0)*r20*x11605*x11610)));
evalcond[2]=(cj0+(((-1.0)*r10*x11605*x11610))+((x11605*x11608)));
evalcond[3]=((((-1.0)*cj1*cj2*x11613))+((cj3*x11623))+((cj0*x11609)));
evalcond[4]=((((-1.0)*sj3*x11623))+(((-1.0)*x11611*x11613))+(((-1.0)*x11613*x11615)));
evalcond[5]=(x11615+x11611+((r21*x11607))+(((-1.0)*cj3*x11610*x11619))+((r20*x11617))+((x11614*x11622)));
evalcond[6]=(x11609+(((-1.0)*x11620))+((r21*x11618))+(((-1.0)*x11614*x11624))+((x11607*x11619))+((r20*x11616)));
evalcond[7]=((((-1.0)*cj1*cj2*x11612))+((sj0*x11609))+((r11*x11607))+(((-1.0)*cj3*x11610*x11621))+((x11608*x11622))+((r10*x11617)));
evalcond[8]=(((r11*x11618))+(((-1.0)*x11608*x11624))+(((-1.0)*x11611*x11612))+((x11607*x11621))+(((-1.0)*x11612*x11615))+((r10*x11616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11625=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11625.valid){
continue;
}
CheckValue<IkReal> x11626=IKPowWithIntegerCheck(r02,-1);
if(!x11626.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11625.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11626.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11625.value)))+IKsqr(((-1.0)*sj0*(x11626.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11625.value)), ((-1.0)*sj0*(x11626.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11627=IKsin(j4);
IkReal x11628=IKcos(j4);
IkReal x11629=(gconst5*sj3);
IkReal x11630=(gconst4*r11);
IkReal x11631=(sj1*sj2);
IkReal x11632=((1.0)*gconst5);
IkReal x11633=(cj2*sj1);
IkReal x11634=((1.0)*sj0);
IkReal x11635=((1.0)*cj0);
IkReal x11636=(gconst4*r21);
IkReal x11637=(cj1*sj2);
IkReal x11638=(cj3*gconst4);
IkReal x11639=(gconst4*sj3);
IkReal x11640=(cj3*gconst5);
IkReal x11641=(r20*x11628);
IkReal x11642=((1.0)*cj1*cj2);
IkReal x11643=(r10*x11628);
IkReal x11644=(cj3*x11628);
IkReal x11645=(r02*x11627);
IkReal x11646=((1.0)*sj3*x11628);
evalcond[0]=((((-1.0)*x11634))+(((-1.0)*r02*x11628)));
evalcond[1]=((((-1.0)*r20*x11627*x11632))+((x11627*x11636)));
evalcond[2]=(cj0+(((-1.0)*r10*x11627*x11632))+((x11627*x11630)));
evalcond[3]=(((cj3*x11645))+(((-1.0)*cj1*cj2*x11635))+((cj0*x11631)));
evalcond[4]=((((-1.0)*sj3*x11645))+(((-1.0)*x11633*x11635))+(((-1.0)*x11635*x11637)));
evalcond[5]=(x11637+x11633+((x11636*x11644))+((r21*x11629))+((r20*x11639))+(((-1.0)*cj3*x11632*x11641)));
evalcond[6]=(x11631+((x11629*x11641))+(((-1.0)*x11636*x11646))+((r21*x11640))+((r20*x11638))+(((-1.0)*x11642)));
evalcond[7]=(((r10*x11639))+((r11*x11629))+(((-1.0)*cj1*cj2*x11634))+((sj0*x11631))+((x11630*x11644))+(((-1.0)*cj3*x11632*x11643)));
evalcond[8]=(((r10*x11638))+((r11*x11640))+((x11629*x11643))+(((-1.0)*x11633*x11634))+(((-1.0)*x11630*x11646))+(((-1.0)*x11634*x11637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11647=((1.0)*sj0);
IkReal x11648=((1.0)*gconst4);
CheckValue<IkReal> x11649 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11647))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst4*r11*x11647))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*cj0*r01*x11648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11649.valid){
continue;
}
CheckValue<IkReal> x11650=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x11648)))),-1);
if(!x11650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11649.value)+(((1.5707963267949)*(x11650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11651=IKsin(j4);
IkReal x11652=IKcos(j4);
IkReal x11653=(gconst5*sj3);
IkReal x11654=(cj3*gconst5);
IkReal x11655=(gconst4*r11);
IkReal x11656=(sj1*sj2);
IkReal x11657=(cj2*sj1);
IkReal x11658=((1.0)*sj0);
IkReal x11659=(gconst4*r01);
IkReal x11660=(gconst4*r21);
IkReal x11661=((1.0)*cj0);
IkReal x11662=(cj1*sj2);
IkReal x11663=(gconst4*sj3);
IkReal x11664=(cj3*gconst4);
IkReal x11665=((1.0)*x11652);
IkReal x11666=((1.0)*cj1*cj2);
IkReal x11667=(cj3*x11651);
IkReal x11668=(cj3*x11652);
IkReal x11669=((1.0)*gconst5*x11651);
IkReal x11670=((1.0)*sj3*x11651);
evalcond[0]=((((-1.0)*r20*x11669))+(((-1.0)*r22*x11665))+((x11651*x11660)));
evalcond[1]=(cj0+((x11651*x11655))+(((-1.0)*r12*x11665))+(((-1.0)*r10*x11669)));
evalcond[2]=((((-1.0)*x11658))+(((-1.0)*r00*x11669))+((x11651*x11659))+(((-1.0)*r02*x11665)));
evalcond[3]=(x11662+x11657+((r20*x11663))+(((-1.0)*r20*x11654*x11665))+((r21*x11653))+((r22*x11667))+((x11660*x11668)));
evalcond[4]=(x11656+((r20*x11664))+((r21*x11654))+(((-1.0)*sj3*x11660*x11665))+(((-1.0)*x11666))+((r20*x11652*x11653))+(((-1.0)*r22*x11670)));
evalcond[5]=(((x11659*x11668))+((cj0*x11656))+((r00*x11663))+(((-1.0)*cj1*cj2*x11661))+((r02*x11667))+(((-1.0)*r00*x11654*x11665))+((r01*x11653)));
evalcond[6]=((((-1.0)*cj1*cj2*x11658))+((r11*x11653))+(((-1.0)*r10*x11654*x11665))+((sj0*x11656))+((r12*x11667))+((r10*x11663))+((x11655*x11668)));
evalcond[7]=(((r00*x11652*x11653))+((r00*x11664))+(((-1.0)*sj3*x11659*x11665))+(((-1.0)*r02*x11670))+((r01*x11654))+(((-1.0)*x11657*x11661))+(((-1.0)*x11661*x11662)));
evalcond[8]=(((r11*x11654))+(((-1.0)*x11657*x11658))+((r10*x11664))+(((-1.0)*x11658*x11662))+(((-1.0)*r12*x11670))+(((-1.0)*sj3*x11655*x11665))+((r10*x11652*x11653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11671=((1.0)*gconst5);
CheckValue<IkReal> x11672=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11671))+(((-1.0)*gconst4*r10)))),-1);
if(!x11672.valid){
continue;
}
CheckValue<IkReal> x11673 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11671))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11672.value)))+(x11673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11674=IKsin(j4);
IkReal x11675=IKcos(j4);
IkReal x11676=(gconst5*sj3);
IkReal x11677=(cj3*gconst5);
IkReal x11678=(gconst4*r11);
IkReal x11679=(sj1*sj2);
IkReal x11680=(cj2*sj1);
IkReal x11681=((1.0)*sj0);
IkReal x11682=(gconst4*r01);
IkReal x11683=(gconst4*r21);
IkReal x11684=((1.0)*cj0);
IkReal x11685=(cj1*sj2);
IkReal x11686=(gconst4*sj3);
IkReal x11687=(cj3*gconst4);
IkReal x11688=((1.0)*x11675);
IkReal x11689=((1.0)*cj1*cj2);
IkReal x11690=(cj3*x11674);
IkReal x11691=(cj3*x11675);
IkReal x11692=((1.0)*gconst5*x11674);
IkReal x11693=((1.0)*sj3*x11674);
evalcond[0]=((((-1.0)*r20*x11692))+(((-1.0)*r22*x11688))+((x11674*x11683)));
evalcond[1]=(cj0+(((-1.0)*r12*x11688))+((x11674*x11678))+(((-1.0)*r10*x11692)));
evalcond[2]=((((-1.0)*r02*x11688))+(((-1.0)*x11681))+((x11674*x11682))+(((-1.0)*r00*x11692)));
evalcond[3]=(x11685+x11680+((x11683*x11691))+(((-1.0)*r20*x11677*x11688))+((r21*x11676))+((r22*x11690))+((r20*x11686)));
evalcond[4]=((((-1.0)*r22*x11693))+x11679+((r20*x11675*x11676))+(((-1.0)*x11689))+((r21*x11677))+((r20*x11687))+(((-1.0)*sj3*x11683*x11688)));
evalcond[5]=(((r00*x11686))+((cj0*x11679))+(((-1.0)*r00*x11677*x11688))+((r01*x11676))+((x11682*x11691))+(((-1.0)*cj1*cj2*x11684))+((r02*x11690)));
evalcond[6]=((((-1.0)*r10*x11677*x11688))+((r10*x11686))+((r11*x11676))+((r12*x11690))+((sj0*x11679))+(((-1.0)*cj1*cj2*x11681))+((x11678*x11691)));
evalcond[7]=(((r00*x11687))+(((-1.0)*x11680*x11684))+(((-1.0)*x11684*x11685))+(((-1.0)*r02*x11693))+((r00*x11675*x11676))+((r01*x11677))+(((-1.0)*sj3*x11682*x11688)));
evalcond[8]=((((-1.0)*x11680*x11681))+(((-1.0)*x11681*x11685))+(((-1.0)*sj3*x11678*x11688))+((r10*x11687))+((r11*x11677))+(((-1.0)*r12*x11693))+((r10*x11675*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11694=((1.0)*gconst5);
CheckValue<IkReal> x11695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11694))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11695.valid){
continue;
}
CheckValue<IkReal> x11696=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11694)))),-1);
if(!x11696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11695.value)+(((1.5707963267949)*(x11696.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11697=IKsin(j4);
IkReal x11698=IKcos(j4);
IkReal x11699=(gconst5*sj3);
IkReal x11700=(cj3*gconst5);
IkReal x11701=(gconst4*r11);
IkReal x11702=(sj1*sj2);
IkReal x11703=(cj2*sj1);
IkReal x11704=((1.0)*sj0);
IkReal x11705=(gconst4*r01);
IkReal x11706=(gconst4*r21);
IkReal x11707=((1.0)*cj0);
IkReal x11708=(cj1*sj2);
IkReal x11709=(gconst4*sj3);
IkReal x11710=(cj3*gconst4);
IkReal x11711=((1.0)*x11698);
IkReal x11712=((1.0)*cj1*cj2);
IkReal x11713=(cj3*x11697);
IkReal x11714=(cj3*x11698);
IkReal x11715=((1.0)*gconst5*x11697);
IkReal x11716=((1.0)*sj3*x11697);
evalcond[0]=(((x11697*x11706))+(((-1.0)*r20*x11715))+(((-1.0)*r22*x11711)));
evalcond[1]=(((x11697*x11701))+cj0+(((-1.0)*r10*x11715))+(((-1.0)*r12*x11711)));
evalcond[2]=(((x11697*x11705))+(((-1.0)*r00*x11715))+(((-1.0)*x11704))+(((-1.0)*r02*x11711)));
evalcond[3]=(x11708+x11703+((x11706*x11714))+(((-1.0)*r20*x11700*x11711))+((r22*x11713))+((r20*x11709))+((r21*x11699)));
evalcond[4]=(x11702+((r20*x11698*x11699))+(((-1.0)*x11712))+(((-1.0)*sj3*x11706*x11711))+(((-1.0)*r22*x11716))+((r21*x11700))+((r20*x11710)));
evalcond[5]=(((x11705*x11714))+(((-1.0)*r00*x11700*x11711))+((r02*x11713))+((r01*x11699))+((r00*x11709))+((cj0*x11702))+(((-1.0)*cj1*cj2*x11707)));
evalcond[6]=(((r11*x11699))+((x11701*x11714))+((sj0*x11702))+(((-1.0)*cj1*cj2*x11704))+((r10*x11709))+(((-1.0)*r10*x11700*x11711))+((r12*x11713)));
evalcond[7]=((((-1.0)*x11707*x11708))+(((-1.0)*x11703*x11707))+((r00*x11710))+((r01*x11700))+(((-1.0)*sj3*x11705*x11711))+((r00*x11698*x11699))+(((-1.0)*r02*x11716)));
evalcond[8]=((((-1.0)*x11703*x11704))+(((-1.0)*x11704*x11708))+(((-1.0)*r12*x11716))+(((-1.0)*sj3*x11701*x11711))+((r10*x11698*x11699))+((r10*x11710))+((r11*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11717=((-1.0)*r10);
IkReal x11719 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11719)==0){
continue;
}
IkReal x11718=pow(x11719,-0.5);
CheckValue<IkReal> x11720 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11717),IKFAST_ATAN2_MAGTHRESH);
if(!x11720.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11720.value));
IkReal gconst7=(r11*x11718);
IkReal gconst8=(x11717*x11718);
CheckValue<IkReal> x11721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11722=((-1.0)*r10);
IkReal x11723=x11718;
CheckValue<IkReal> x11725 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11722),IKFAST_ATAN2_MAGTHRESH);
if(!x11725.valid){
continue;
}
IkReal x11724=((-1.0)*(x11725.value));
sj5=gconst7;
cj5=gconst8;
j5=x11724;
IkReal gconst6=x11724;
IkReal gconst7=(r11*x11723);
IkReal gconst8=(x11722*x11723);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11726=((1.0)*sj0);
IkReal x11727=((1.0)*gconst7);
CheckValue<IkReal> x11728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11727))+(((-1.0)*gconst8*r21)))),-1);
if(!x11728.valid){
continue;
}
CheckValue<IkReal> x11729 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11726))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11726))+(((-1.0)*cj0*r01*x11727))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11728.value)))+(x11729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11730=IKsin(j4);
IkReal x11731=IKcos(j4);
IkReal x11732=(gconst7*sj3);
IkReal x11733=(cj3*gconst8);
IkReal x11734=(cj3*gconst7);
IkReal x11735=(sj1*sj2);
IkReal x11736=(cj2*sj1);
IkReal x11737=((1.0)*sj0);
IkReal x11738=((1.0)*cj0);
IkReal x11739=(gconst8*sj3);
IkReal x11740=(cj1*sj2);
IkReal x11741=((1.0)*x11731);
IkReal x11742=((1.0)*x11730);
IkReal x11743=((1.0)*cj1*cj2);
IkReal x11744=(cj3*x11730);
IkReal x11745=(gconst7*x11730);
IkReal x11746=(x11731*x11739);
evalcond[0]=((((-1.0)*gconst8*r20*x11742))+(((-1.0)*r22*x11741))+((r21*x11745)));
evalcond[1]=(cj0+(((-1.0)*r12*x11741))+(((-1.0)*gconst8*r10*x11742))+((r11*x11745)));
evalcond[2]=(((r01*x11745))+(((-1.0)*x11737))+(((-1.0)*r02*x11741))+(((-1.0)*gconst8*r00*x11742)));
evalcond[3]=(x11740+x11736+((r21*x11731*x11734))+(((-1.0)*r20*x11733*x11741))+((r20*x11732))+((r21*x11739))+((r22*x11744)));
evalcond[4]=(x11735+(((-1.0)*r21*x11732*x11741))+(((-1.0)*x11743))+((r20*x11734))+((r20*x11746))+(((-1.0)*r22*sj3*x11742))+((r21*x11733)));
evalcond[5]=(((r01*x11739))+((r00*x11732))+(((-1.0)*r00*x11733*x11741))+((cj0*x11735))+(((-1.0)*cj1*cj2*x11738))+((r01*x11731*x11734))+((r02*x11744)));
evalcond[6]=(((r11*x11739))+((sj0*x11735))+(((-1.0)*cj1*cj2*x11737))+((r10*x11732))+((r11*x11731*x11734))+(((-1.0)*r10*x11733*x11741))+((r12*x11744)));
evalcond[7]=(((r01*x11733))+(((-1.0)*x11738*x11740))+((r00*x11746))+(((-1.0)*r02*sj3*x11742))+((r00*x11734))+(((-1.0)*r01*x11732*x11741))+(((-1.0)*x11736*x11738)));
evalcond[8]=(((r11*x11733))+(((-1.0)*x11737*x11740))+(((-1.0)*r11*x11732*x11741))+((r10*x11746))+((r10*x11734))+(((-1.0)*x11736*x11737))+(((-1.0)*r12*sj3*x11742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11747=((1.0)*gconst8);
CheckValue<IkReal> x11748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11747))+(((-1.0)*gconst7*r00)))),-1);
if(!x11748.valid){
continue;
}
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11748.value)))+(x11749.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11750=IKsin(j4);
IkReal x11751=IKcos(j4);
IkReal x11752=(gconst7*sj3);
IkReal x11753=(cj3*gconst8);
IkReal x11754=(cj3*gconst7);
IkReal x11755=(sj1*sj2);
IkReal x11756=(cj2*sj1);
IkReal x11757=((1.0)*sj0);
IkReal x11758=((1.0)*cj0);
IkReal x11759=(gconst8*sj3);
IkReal x11760=(cj1*sj2);
IkReal x11761=((1.0)*x11751);
IkReal x11762=((1.0)*x11750);
IkReal x11763=((1.0)*cj1*cj2);
IkReal x11764=(cj3*x11750);
IkReal x11765=(gconst7*x11750);
IkReal x11766=(x11751*x11759);
evalcond[0]=((((-1.0)*r22*x11761))+(((-1.0)*gconst8*r20*x11762))+((r21*x11765)));
evalcond[1]=((((-1.0)*r12*x11761))+(((-1.0)*gconst8*r10*x11762))+((r11*x11765))+cj0);
evalcond[2]=((((-1.0)*gconst8*r00*x11762))+(((-1.0)*r02*x11761))+(((-1.0)*x11757))+((r01*x11765)));
evalcond[3]=(x11760+x11756+(((-1.0)*r20*x11753*x11761))+((r21*x11751*x11754))+((r22*x11764))+((r21*x11759))+((r20*x11752)));
evalcond[4]=((((-1.0)*r22*sj3*x11762))+(((-1.0)*r21*x11752*x11761))+x11755+((r20*x11766))+(((-1.0)*x11763))+((r21*x11753))+((r20*x11754)));
evalcond[5]=(((cj0*x11755))+(((-1.0)*cj1*cj2*x11758))+((r01*x11751*x11754))+(((-1.0)*r00*x11753*x11761))+((r02*x11764))+((r01*x11759))+((r00*x11752)));
evalcond[6]=((((-1.0)*cj1*cj2*x11757))+((r11*x11759))+((r10*x11752))+((r12*x11764))+((sj0*x11755))+(((-1.0)*r10*x11753*x11761))+((r11*x11751*x11754)));
evalcond[7]=((((-1.0)*r01*x11752*x11761))+(((-1.0)*x11756*x11758))+(((-1.0)*x11758*x11760))+(((-1.0)*r02*sj3*x11762))+((r00*x11766))+((r01*x11753))+((r00*x11754)));
evalcond[8]=(((r11*x11753))+((r10*x11766))+((r10*x11754))+(((-1.0)*r11*x11752*x11761))+(((-1.0)*r12*sj3*x11762))+(((-1.0)*x11757*x11760))+(((-1.0)*x11756*x11757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11767=((-1.0)*r11);
IkReal x11769 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11769)==0){
continue;
}
IkReal x11768=pow(x11769,-0.5);
CheckValue<IkReal> x11770 = IKatan2WithCheck(IkReal(x11767),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11770.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11770.value))));
IkReal gconst10=(x11767*x11768);
IkReal gconst11=((1.0)*r10*x11768);
CheckValue<IkReal> x11771 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11771.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11771.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11772=((-1.0)*r11);
CheckValue<IkReal> x11775 = IKatan2WithCheck(IkReal(x11772),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11775.valid){
continue;
}
IkReal x11773=((1.0)*(x11775.value));
IkReal x11774=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11773)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11773)));
IkReal gconst10=(x11772*x11774);
IkReal gconst11=((1.0)*r10*x11774);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11776=((-1.0)*r11);
CheckValue<IkReal> x11779 = IKatan2WithCheck(IkReal(x11776),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11779.valid){
continue;
}
IkReal x11777=((1.0)*(x11779.value));
IkReal x11778=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11777)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11777)));
IkReal gconst10=(x11776*x11778);
IkReal gconst11=((1.0)*r10*x11778);
IkReal x11780=r12*r12;
IkReal x11781=((1.0)*sj0);
IkReal x11782=(cj0*r02);
IkReal x11783=x11768;
j4eval[0]=((IKabs((((r12*x11782*x11783))+(((-1.0)*x11781*x11783))+((sj0*x11780*x11783)))))+(IKabs(((((-1.0)*r12*x11781))+(((-1.0)*x11782))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11784=((-1.0)*r11);
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(x11784),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
IkReal x11785=((1.0)*(x11787.value));
IkReal x11786=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11785)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11785)));
IkReal gconst10=(x11784*x11786);
IkReal gconst11=((1.0)*r10*x11786);
IkReal x11788=((1.0)*cj3);
CheckValue<IkReal> x11793=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11793.valid){
continue;
}
IkReal x11789=x11793.value;
IkReal x11790=(cj3*x11789);
IkReal x11791=(x11788*x11789);
IkReal x11792=((((-2.0)*r10*r11*r20*r21*x11790))+(((-1.0)*x11788*(r22*r22)))+(((-1.0)*x11791*(r11*r11)*(r21*r21)))+(((-1.0)*x11791*(r10*r10)*(r20*r20))));
j4eval[0]=x11792;
j4eval[1]=IKsign(x11792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11794=((-1.0)*r11);
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(x11794),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
IkReal x11795=((1.0)*(x11797.value));
IkReal x11796=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11795)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11795)));
IkReal gconst10=(x11794*x11796);
IkReal gconst11=((1.0)*r10*x11796);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11798=((-1.0)*r11);
CheckValue<IkReal> x11801 = IKatan2WithCheck(IkReal(x11798),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11801.valid){
continue;
}
IkReal x11799=((1.0)*(x11801.value));
IkReal x11800=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11799)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11799)));
IkReal gconst10=(x11798*x11800);
IkReal gconst11=((1.0)*r10*x11800);
IkReal x11802=r12*r12;
IkReal x11803=((1.0)*sj0);
IkReal x11804=(cj0*r02);
IkReal x11805=x11768;
j4eval[0]=((IKabs((((sj0*x11802*x11805))+(((-1.0)*x11803*x11805))+((r12*x11804*x11805)))))+(IKabs(((((-1.0)*r12*x11803))+(((-1.0)*x11804))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11806=((-1.0)*r11);
CheckValue<IkReal> x11809 = IKatan2WithCheck(IkReal(x11806),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11809.valid){
continue;
}
IkReal x11807=((1.0)*(x11809.value));
IkReal x11808=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11807)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11807)));
IkReal gconst10=(x11806*x11808);
IkReal gconst11=((1.0)*r10*x11808);
IkReal x11810=r12*r12;
IkReal x11811=(cj1*cj2*r22);
IkReal x11812=(r22*sj1*sj2);
CheckValue<IkReal> x11816=IKPowWithIntegerCheck(((-1.0)+x11810),-1);
if(!x11816.valid){
continue;
}
IkReal x11813=x11816.value;
if((((1.0)+(((-1.0)*x11810)))) < -0.00001)
continue;
IkReal x11814=IKsqrt(((1.0)+(((-1.0)*x11810))));
IkReal x11815=(r12*x11813*x11814);
j4eval[0]=((IKabs((((x11811*x11815))+(((-1.0)*x11812*x11815)))))+(IKabs(((((-1.0)*x11811))+x11812))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11817=((-1.0)*r11);
CheckValue<IkReal> x11820 = IKatan2WithCheck(IkReal(x11817),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11820.valid){
continue;
}
IkReal x11818=((1.0)*(x11820.value));
IkReal x11819=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11818)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11818)));
IkReal gconst10=(x11817*x11819);
IkReal gconst11=((1.0)*r10*x11819);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11821=((-1.0)*r11);
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal(x11821),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
IkReal x11822=((1.0)*(x11824.value));
IkReal x11823=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11822)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11822)));
IkReal gconst10=(x11821*x11823);
IkReal gconst11=((1.0)*r10*x11823);
IkReal x11825=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11829=IKPowWithIntegerCheck(x11825,-1);
if(!x11829.valid){
continue;
}
IkReal x11826=x11829.value;
IkReal x11827=((1.0)*x11826);
IkReal x11828=((((-1.0)*(r02*r02)))+(((-1.0)*x11827*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11826))+(((-1.0)*x11827*(r01*r01)*(r11*r11))));
j4eval[0]=x11828;
j4eval[1]=IKsign(x11828);
j4eval[2]=r02;
j4eval[3]=x11825;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11830=((-1.0)*r11);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(x11830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11831=((1.0)*(x11833.value));
IkReal x11832=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11831)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11831)));
IkReal gconst10=(x11830*x11832);
IkReal gconst11=((1.0)*r10*x11832);
IkReal x11834=r12*r12;
IkReal x11835=(cj1*cj2*r22);
IkReal x11836=(r22*sj1*sj2);
CheckValue<IkReal> x11840=IKPowWithIntegerCheck(((-1.0)+x11834),-1);
if(!x11840.valid){
continue;
}
IkReal x11837=x11840.value;
if((((1.0)+(((-1.0)*x11834)))) < -0.00001)
continue;
IkReal x11838=IKsqrt(((1.0)+(((-1.0)*x11834))));
IkReal x11839=(r12*x11837*x11838);
j4eval[0]=((IKabs(((((-1.0)*x11835))+x11836)))+(IKabs(((((-1.0)*x11836*x11839))+((x11835*x11839))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11841=(gconst10*r21);
IkReal x11842=(gconst11*r20);
IkReal x11843=(sj1*sj2);
IkReal x11844=(cj1*cj2);
CheckValue<IkReal> x11845 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11844))+((r22*x11843)))),IkReal((((x11841*x11843))+(((-1.0)*x11841*x11844))+(((-1.0)*x11842*x11843))+((x11842*x11844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11845.valid){
continue;
}
CheckValue<IkReal> x11846=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11842*x11842)+(((-2.0)*x11841*x11842))+(x11841*x11841))),-1);
if(!x11846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11845.value)+(((1.5707963267949)*(x11846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11847=IKsin(j4);
IkReal x11848=IKcos(j4);
IkReal x11849=((1.0)*cj2);
IkReal x11850=((1.0)*x11848);
IkReal x11851=(gconst10*x11847);
IkReal x11852=((1.0)*x11847);
IkReal x11853=(gconst11*x11848);
IkReal x11854=(gconst11*x11852);
evalcond[0]=(((r21*x11851))+(((-1.0)*r20*x11854))+(((-1.0)*r22*x11850)));
evalcond[1]=(((r11*x11851))+(((-1.0)*r12*x11850))+(((-1.0)*r10*x11854)));
evalcond[2]=((((-1.0)*r02*x11852))+(((-1.0)*gconst10*r01*x11850))+((r00*x11853)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11850))+((r01*x11851))+(((-1.0)*r00*x11854)));
evalcond[4]=(((r20*x11853))+(((-1.0)*cj1*x11849))+(((-1.0)*gconst10*r21*x11850))+((sj1*sj2))+(((-1.0)*r22*x11852)));
evalcond[5]=((((-1.0)*sj1*x11849))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11850))+(((-1.0)*r12*x11852))+((r10*x11853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11855=(gconst11*r00);
IkReal x11856=(gconst10*r01);
CheckValue<IkReal> x11857 = IKatan2WithCheck(IkReal(((((-1.0)*x11856))+x11855)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11857.valid){
continue;
}
CheckValue<IkReal> x11858=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11856*x11856)))+(((-1.0)*(x11855*x11855)))+(((2.0)*x11855*x11856)))),-1);
if(!x11858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11857.value)+(((1.5707963267949)*(x11858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11859=IKsin(j4);
IkReal x11860=IKcos(j4);
IkReal x11861=((1.0)*cj2);
IkReal x11862=((1.0)*x11860);
IkReal x11863=(gconst10*x11859);
IkReal x11864=((1.0)*x11859);
IkReal x11865=(gconst11*x11860);
IkReal x11866=(gconst11*x11864);
evalcond[0]=((((-1.0)*r22*x11862))+(((-1.0)*r20*x11866))+((r21*x11863)));
evalcond[1]=(((r11*x11863))+(((-1.0)*r10*x11866))+(((-1.0)*r12*x11862)));
evalcond[2]=(((r00*x11865))+(((-1.0)*gconst10*r01*x11862))+(((-1.0)*r02*x11864)));
evalcond[3]=((-1.0)+((r01*x11863))+(((-1.0)*r00*x11866))+(((-1.0)*r02*x11862)));
evalcond[4]=((((-1.0)*gconst10*r21*x11862))+(((-1.0)*r22*x11864))+(((-1.0)*cj1*x11861))+((r20*x11865))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11861))+(((-1.0)*gconst10*r11*x11862))+(((-1.0)*cj1*sj2))+((r10*x11865))+(((-1.0)*r12*x11864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11867 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11867.valid){
continue;
}
CheckValue<IkReal> x11868=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11867.value)+(((1.5707963267949)*(x11868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11869=IKsin(j4);
IkReal x11870=IKcos(j4);
IkReal x11871=((1.0)*cj2);
IkReal x11872=((1.0)*x11870);
IkReal x11873=(gconst10*x11869);
IkReal x11874=((1.0)*x11869);
IkReal x11875=(gconst11*x11870);
IkReal x11876=(gconst11*x11874);
evalcond[0]=((((-1.0)*r22*x11872))+(((-1.0)*r20*x11876))+((r21*x11873)));
evalcond[1]=((((-1.0)*r10*x11876))+((r11*x11873))+(((-1.0)*r12*x11872)));
evalcond[2]=(((r00*x11875))+(((-1.0)*gconst10*r01*x11872))+(((-1.0)*r02*x11874)));
evalcond[3]=((-1.0)+((r01*x11873))+(((-1.0)*r02*x11872))+(((-1.0)*r00*x11876)));
evalcond[4]=((((-1.0)*r22*x11874))+(((-1.0)*gconst10*r21*x11872))+(((-1.0)*cj1*x11871))+((r20*x11875))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11871))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11872))+((r10*x11875))+(((-1.0)*r12*x11874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11877=((-1.0)*r11);
CheckValue<IkReal> x11880 = IKatan2WithCheck(IkReal(x11877),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11880.valid){
continue;
}
IkReal x11878=((1.0)*(x11880.value));
IkReal x11879=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11878)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11878)));
IkReal gconst10=(x11877*x11879);
IkReal gconst11=((1.0)*r10*x11879);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11881=((-1.0)*r11);
CheckValue<IkReal> x11884 = IKatan2WithCheck(IkReal(x11881),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11884.valid){
continue;
}
IkReal x11882=((1.0)*(x11884.value));
IkReal x11883=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11882)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11882)));
IkReal gconst10=(x11881*x11883);
IkReal gconst11=((1.0)*r10*x11883);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11885=((-1.0)*r11);
CheckValue<IkReal> x11888 = IKatan2WithCheck(IkReal(x11885),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11888.valid){
continue;
}
IkReal x11886=((1.0)*(x11888.value));
IkReal x11887=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11886)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11886)));
IkReal gconst10=(x11885*x11887);
IkReal gconst11=((1.0)*r10*x11887);
IkReal x11889=r12*r12;
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11889))),-1);
if(!x11892.valid){
continue;
}
IkReal x11890=x11892.value;
IkReal x11891=((1.0)*x11890);
j4eval[0]=IKsign((((x11891*(r11*r11*r11*r11)))+((x11891*(r10*r10*r10*r10)))+(((2.0)*x11890*(r10*r10)*(r11*r11)))+x11889));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11893=(cj2*sj1);
IkReal x11894=(gconst10*r11);
IkReal x11895=(gconst11*r10);
IkReal x11896=(cj1*sj2);
CheckValue<IkReal> x11897=IKPowWithIntegerCheck(IKsign(((x11894*x11894)+(r12*r12)+(x11895*x11895)+(((-2.0)*x11894*x11895)))),-1);
if(!x11897.valid){
continue;
}
CheckValue<IkReal> x11898 = IKatan2WithCheck(IkReal((((r12*x11893))+((r12*x11896)))),IkReal((((x11894*x11896))+(((-1.0)*x11893*x11895))+(((-1.0)*x11895*x11896))+((x11893*x11894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11897.value)))+(x11898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11899=IKsin(j4);
IkReal x11900=IKcos(j4);
IkReal x11901=((1.0)*x11900);
IkReal x11902=(gconst10*x11899);
IkReal x11903=((1.0)*x11899);
IkReal x11904=(gconst11*x11900);
IkReal x11905=(gconst11*x11903);
evalcond[0]=((((-1.0)*r22*x11901))+(((-1.0)*r20*x11905))+((r21*x11902)));
evalcond[1]=((((-1.0)*r12*x11901))+(((-1.0)*r10*x11905))+((r11*x11902)));
evalcond[2]=((((-1.0)*r02*x11903))+((r00*x11904))+(((-1.0)*gconst10*r01*x11901)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11901))+(((-1.0)*r00*x11905))+((r01*x11902)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11903))+(((-1.0)*gconst10*r11*x11901))+((r10*x11904)));
evalcond[5]=((((-1.0)*r22*x11903))+(((-1.0)*gconst10*r21*x11901))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11906=(gconst11*r00);
IkReal x11907=(gconst10*r01);
CheckValue<IkReal> x11908=IKPowWithIntegerCheck(IKsign(((x11906*x11906)+(((-2.0)*x11906*x11907))+(x11907*x11907)+(r02*r02))),-1);
if(!x11908.valid){
continue;
}
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal((x11906+(((-1.0)*x11907)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11908.value)))+(x11909.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11910=IKsin(j4);
IkReal x11911=IKcos(j4);
IkReal x11912=((1.0)*x11911);
IkReal x11913=(gconst10*x11910);
IkReal x11914=((1.0)*x11910);
IkReal x11915=(gconst11*x11911);
IkReal x11916=(gconst11*x11914);
evalcond[0]=((((-1.0)*r22*x11912))+(((-1.0)*r20*x11916))+((r21*x11913)));
evalcond[1]=(((r11*x11913))+(((-1.0)*r12*x11912))+(((-1.0)*r10*x11916)));
evalcond[2]=(((r00*x11915))+(((-1.0)*gconst10*r01*x11912))+(((-1.0)*r02*x11914)));
evalcond[3]=((1.0)+((r01*x11913))+(((-1.0)*r02*x11912))+(((-1.0)*r00*x11916)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11912))+((r10*x11915))+(((-1.0)*r12*x11914)));
evalcond[5]=((((-1.0)*gconst10*r21*x11912))+(((-1.0)*r22*x11914))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11917=((1.0)*gconst11);
CheckValue<IkReal> x11918=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11917)))),-1);
if(!x11918.valid){
continue;
}
CheckValue<IkReal> x11919 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11918.value)))+(x11919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11920=IKsin(j4);
IkReal x11921=IKcos(j4);
IkReal x11922=((1.0)*x11921);
IkReal x11923=(gconst10*x11920);
IkReal x11924=((1.0)*x11920);
IkReal x11925=(gconst11*x11921);
IkReal x11926=(gconst11*x11924);
evalcond[0]=((((-1.0)*r20*x11926))+((r21*x11923))+(((-1.0)*r22*x11922)));
evalcond[1]=((((-1.0)*r10*x11926))+((r11*x11923))+(((-1.0)*r12*x11922)));
evalcond[2]=((((-1.0)*r02*x11924))+((r00*x11925))+(((-1.0)*gconst10*r01*x11922)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11922))+(((-1.0)*r00*x11926))+((r01*x11923)));
evalcond[4]=(((cj2*sj1))+((r10*x11925))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11922))+(((-1.0)*r12*x11924)));
evalcond[5]=(((r20*x11925))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11924))+(((-1.0)*gconst10*r21*x11922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11927=((-1.0)*r11);
IkReal x11928=((-1.0)*r10);
CheckValue<IkReal> x11930 = IKatan2WithCheck(IkReal(x11927),IkReal(x11928),IKFAST_ATAN2_MAGTHRESH);
if(!x11930.valid){
continue;
}
IkReal x11929=((1.0)*(x11930.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11929)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11928);
rxp1_1=(px*r21);
rxp1_2=(px*x11927);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11929)));
IkReal gconst10=x11927;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11931=((-1.0)*r11);
IkReal x11932=((-1.0)*r10);
CheckValue<IkReal> x11934 = IKatan2WithCheck(IkReal(x11931),IkReal(x11932),IKFAST_ATAN2_MAGTHRESH);
if(!x11934.valid){
continue;
}
IkReal x11933=((1.0)*(x11934.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11933)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11932);
rxp1_1=(px*r21);
rxp1_2=(px*x11931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11933)));
IkReal gconst10=x11931;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11935=((-1.0)*r11);
IkReal x11936=((-1.0)*r10);
CheckValue<IkReal> x11938 = IKatan2WithCheck(IkReal(x11935),IkReal(x11936),IKFAST_ATAN2_MAGTHRESH);
if(!x11938.valid){
continue;
}
IkReal x11937=((1.0)*(x11938.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11937)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11936);
rxp1_1=(px*r21);
rxp1_2=(px*x11935);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11937)));
IkReal gconst10=x11935;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11941=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11941.valid){
continue;
}
IkReal x11939=x11941.value;
IkReal x11940=(sj0*x11939);
cj4array[0]=(((cj1*sj2*x11940))+((cj2*sj1*x11940)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11942=IKsin(j4);
IkReal x11943=IKcos(j4);
IkReal x11944=(gconst10*r21);
IkReal x11945=(gconst11*r20);
IkReal x11946=((1.0)*x11942);
IkReal x11947=((1.0)*x11943);
evalcond[0]=((-1.0)*r02*x11942);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11947)));
evalcond[2]=((((-1.0)*x11945*x11946))+((x11942*x11944)));
evalcond[3]=((((-1.0)*gconst11*r10*x11946))+((gconst10*r11*x11942)));
evalcond[4]=(((x11943*x11945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11944*x11947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11949=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11949.valid){
continue;
}
IkReal x11948=x11949.value;
cj4array[0]=(((cj1*cj2*x11948))+(((-1.0)*sj1*sj2*x11948)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11950=IKsin(j4);
IkReal x11951=IKcos(j4);
IkReal x11952=((1.0)*sj0);
IkReal x11953=(gconst10*x11950);
IkReal x11954=((1.0)*x11951);
IkReal x11955=((1.0)*gconst11*x11950);
evalcond[0]=((-1.0)*r02*x11950);
evalcond[1]=((((-1.0)*r02*x11954))+(((-1.0)*x11952)));
evalcond[2]=((((-1.0)*r20*x11955))+((r21*x11953)));
evalcond[3]=(((r11*x11953))+(((-1.0)*r10*x11955)));
evalcond[4]=((((-1.0)*gconst10*r11*x11954))+(((-1.0)*cj2*sj1*x11952))+((gconst11*r10*x11951))+(((-1.0)*cj1*sj2*x11952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11956=IKPowWithIntegerCheck(r02,-1);
if(!x11956.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11956.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11957=IKsin(j4);
IkReal x11958=IKcos(j4);
IkReal x11959=(gconst10*r21);
IkReal x11960=((1.0)*sj0);
IkReal x11961=(gconst10*r11);
IkReal x11962=(gconst11*x11958);
IkReal x11963=((1.0)*x11958);
IkReal x11964=((1.0)*gconst11*x11957);
evalcond[0]=((-1.0)*r02*x11957);
evalcond[1]=((((-1.0)*r20*x11964))+((x11957*x11959)));
evalcond[2]=((((-1.0)*r10*x11964))+((x11957*x11961)));
evalcond[3]=((((-1.0)*x11959*x11963))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11962)));
evalcond[4]=(((r10*x11962))+(((-1.0)*x11961*x11963))+(((-1.0)*cj2*sj1*x11960))+(((-1.0)*cj1*sj2*x11960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11965=((1.0)*gconst11);
CheckValue<IkReal> x11966 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x11965))+(((-1.0)*r10*sj0*x11965))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11966.valid){
continue;
}
CheckValue<IkReal> x11967=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11966.value)+(((1.5707963267949)*(x11967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11968=IKsin(j4);
IkReal x11969=IKcos(j4);
IkReal x11970=((1.0)*cj2);
IkReal x11971=((1.0)*sj0);
IkReal x11972=(cj1*sj2);
IkReal x11973=(gconst10*x11968);
IkReal x11974=((1.0)*x11969);
IkReal x11975=(gconst11*x11969);
IkReal x11976=((1.0)*x11968);
IkReal x11977=(gconst11*x11976);
evalcond[0]=((((-1.0)*r20*x11977))+((r21*x11973)));
evalcond[1]=((((-1.0)*r10*x11977))+(((-1.0)*r12*x11974))+cj0+((r11*x11973)));
evalcond[2]=((((-1.0)*cj1*x11970))+((sj1*sj2))+((r20*x11975))+(((-1.0)*gconst10*r21*x11974)));
evalcond[3]=(((r01*x11973))+(((-1.0)*r00*x11977))+(((-1.0)*x11971))+(((-1.0)*r02*x11974)));
evalcond[4]=(((r00*x11975))+(((-1.0)*cj0*sj1*x11970))+(((-1.0)*gconst10*r01*x11974))+(((-1.0)*r02*x11976))+(((-1.0)*cj0*x11972)));
evalcond[5]=((((-1.0)*r12*x11976))+(((-1.0)*gconst10*r11*x11974))+((r10*x11975))+(((-1.0)*x11971*x11972))+(((-1.0)*sj0*sj1*x11970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11978=(gconst10*r21);
IkReal x11979=(gconst11*r20);
IkReal x11980=(sj1*sj2);
IkReal x11981=(cj1*cj2);
CheckValue<IkReal> x11982 = IKatan2WithCheck(IkReal((((r22*x11980))+(((-1.0)*r22*x11981)))),IkReal(((((-1.0)*x11979*x11980))+((x11979*x11981))+((x11978*x11980))+(((-1.0)*x11978*x11981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11982.valid){
continue;
}
CheckValue<IkReal> x11983=IKPowWithIntegerCheck(IKsign(((x11978*x11978)+(r22*r22)+(x11979*x11979)+(((-2.0)*x11978*x11979)))),-1);
if(!x11983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11982.value)+(((1.5707963267949)*(x11983.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11984=IKsin(j4);
IkReal x11985=IKcos(j4);
IkReal x11986=((1.0)*cj2);
IkReal x11987=((1.0)*sj0);
IkReal x11988=(cj1*sj2);
IkReal x11989=((1.0)*x11985);
IkReal x11990=(gconst10*x11984);
IkReal x11991=((1.0)*x11984);
IkReal x11992=(gconst11*x11985);
IkReal x11993=(gconst11*x11991);
evalcond[0]=(((r21*x11990))+(((-1.0)*r20*x11993))+(((-1.0)*r22*x11989)));
evalcond[1]=((((-1.0)*r12*x11989))+cj0+(((-1.0)*r10*x11993))+((r11*x11990)));
evalcond[2]=((((-1.0)*r02*x11989))+(((-1.0)*x11987))+((r01*x11990))+(((-1.0)*r00*x11993)));
evalcond[3]=(((r20*x11992))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11989))+(((-1.0)*cj1*x11986))+(((-1.0)*r22*x11991)));
evalcond[4]=((((-1.0)*r02*x11991))+(((-1.0)*gconst10*r01*x11989))+(((-1.0)*cj0*sj1*x11986))+(((-1.0)*cj0*x11988))+((r00*x11992)));
evalcond[5]=((((-1.0)*gconst10*r11*x11989))+(((-1.0)*x11987*x11988))+(((-1.0)*sj0*sj1*x11986))+(((-1.0)*r12*x11991))+((r10*x11992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11994=((1.0)*sj0);
IkReal x11995=((1.0)*gconst10);
CheckValue<IkReal> x11996=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11995))+(((-1.0)*gconst11*r21)))),-1);
if(!x11996.valid){
continue;
}
CheckValue<IkReal> x11997 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11994)))),IkReal(((((-1.0)*cj0*r01*x11995))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x11994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11997.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11996.value)))+(x11997.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11998=IKsin(j4);
IkReal x11999=IKcos(j4);
IkReal x12000=((1.0)*cj2);
IkReal x12001=((1.0)*sj0);
IkReal x12002=(cj1*sj2);
IkReal x12003=((1.0)*x11999);
IkReal x12004=(gconst10*x11998);
IkReal x12005=((1.0)*x11998);
IkReal x12006=(gconst11*x11999);
IkReal x12007=(gconst11*x12005);
evalcond[0]=(((r21*x12004))+(((-1.0)*r22*x12003))+(((-1.0)*r20*x12007)));
evalcond[1]=((((-1.0)*r10*x12007))+cj0+(((-1.0)*r12*x12003))+((r11*x12004)));
evalcond[2]=((((-1.0)*x12001))+(((-1.0)*r00*x12007))+((r01*x12004))+(((-1.0)*r02*x12003)));
evalcond[3]=(((r20*x12006))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12003))+(((-1.0)*r22*x12005))+(((-1.0)*cj1*x12000)));
evalcond[4]=((((-1.0)*gconst10*r01*x12003))+((r00*x12006))+(((-1.0)*cj0*sj1*x12000))+(((-1.0)*r02*x12005))+(((-1.0)*cj0*x12002)));
evalcond[5]=((((-1.0)*x12001*x12002))+(((-1.0)*sj0*sj1*x12000))+(((-1.0)*gconst10*r11*x12003))+(((-1.0)*r12*x12005))+((r10*x12006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12008=((1.0)*gconst11);
CheckValue<IkReal> x12009 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12008))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12009.valid){
continue;
}
CheckValue<IkReal> x12010=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12008)))),-1);
if(!x12010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12009.value)+(((1.5707963267949)*(x12010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12011=IKsin(j4);
IkReal x12012=IKcos(j4);
IkReal x12013=((1.0)*cj2);
IkReal x12014=((1.0)*sj0);
IkReal x12015=(cj1*sj2);
IkReal x12016=((1.0)*x12012);
IkReal x12017=(gconst10*x12011);
IkReal x12018=((1.0)*x12011);
IkReal x12019=(gconst11*x12012);
IkReal x12020=(gconst11*x12018);
evalcond[0]=((((-1.0)*r20*x12020))+((r21*x12017))+(((-1.0)*r22*x12016)));
evalcond[1]=(cj0+((r11*x12017))+(((-1.0)*r12*x12016))+(((-1.0)*r10*x12020)));
evalcond[2]=((((-1.0)*r02*x12016))+(((-1.0)*r00*x12020))+(((-1.0)*x12014))+((r01*x12017)));
evalcond[3]=((((-1.0)*gconst10*r21*x12016))+(((-1.0)*cj1*x12013))+((sj1*sj2))+(((-1.0)*r22*x12018))+((r20*x12019)));
evalcond[4]=((((-1.0)*r02*x12018))+(((-1.0)*cj0*sj1*x12013))+(((-1.0)*cj0*x12015))+((r00*x12019))+(((-1.0)*gconst10*r01*x12016)));
evalcond[5]=((((-1.0)*x12014*x12015))+((r10*x12019))+(((-1.0)*r12*x12018))+(((-1.0)*sj0*sj1*x12013))+(((-1.0)*gconst10*r11*x12016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12021=((-1.0)*r11);
CheckValue<IkReal> x12024 = IKatan2WithCheck(IkReal(x12021),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12024.valid){
continue;
}
IkReal x12022=((1.0)*(x12024.value));
IkReal x12023=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12022)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12022)));
IkReal gconst10=(x12021*x12023);
IkReal gconst11=((1.0)*r10*x12023);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12025=((-1.0)*r11);
CheckValue<IkReal> x12028 = IKatan2WithCheck(IkReal(x12025),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12028.valid){
continue;
}
IkReal x12026=((1.0)*(x12028.value));
IkReal x12027=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12026)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12026)));
IkReal gconst10=(x12025*x12027);
IkReal gconst11=((1.0)*r10*x12027);
IkReal x12029=r12*r12;
IkReal x12030=((1.0)*sj0);
IkReal x12031=(cj0*r02);
IkReal x12032=x11768;
j4eval[0]=((IKabs(((((-1.0)*x12031))+(((-1.0)*r12*x12030)))))+(IKabs((((r12*x12031*x12032))+(((-1.0)*x12030*x12032))+((sj0*x12029*x12032))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12033=((-1.0)*r11);
CheckValue<IkReal> x12036 = IKatan2WithCheck(IkReal(x12033),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12036.valid){
continue;
}
IkReal x12034=((1.0)*(x12036.value));
IkReal x12035=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12034)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12034)));
IkReal gconst10=(x12033*x12035);
IkReal gconst11=((1.0)*r10*x12035);
IkReal x12037=r12*r12;
IkReal x12038=((1.0)+(((-1.0)*x12037)));
IkReal x12039=(r22*sj1*sj2);
IkReal x12040=(cj1*cj2*r22);
CheckValue<IkReal> x12047=IKPowWithIntegerCheck(x12038,-1);
if(!x12047.valid){
continue;
}
IkReal x12041=x12047.value;
CheckValue<IkReal> x12048=IKPowWithIntegerCheck(((-1.0)+x12037),-1);
if(!x12048.valid){
continue;
}
IkReal x12042=x12048.value;
IkReal x12043=((1.0)*x12041);
if((x12038) < -0.00001)
continue;
IkReal x12044=IKsqrt(x12038);
IkReal x12045=(r12*x12042*x12044);
IkReal x12046=((((-1.0)*x12043*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12041))+(((-1.0)*x12043*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x12046;
j4eval[1]=((IKabs((((x12040*x12045))+(((-1.0)*x12039*x12045)))))+(IKabs(((((-1.0)*x12040))+x12039))));
j4eval[2]=IKsign(x12046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12049=((-1.0)*r11);
CheckValue<IkReal> x12052 = IKatan2WithCheck(IkReal(x12049),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12052.valid){
continue;
}
IkReal x12050=((1.0)*(x12052.value));
IkReal x12051=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12050)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12050)));
IkReal gconst10=(x12049*x12051);
IkReal gconst11=((1.0)*r10*x12051);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12053=((-1.0)*r11);
CheckValue<IkReal> x12056 = IKatan2WithCheck(IkReal(x12053),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12056.valid){
continue;
}
IkReal x12054=((1.0)*(x12056.value));
IkReal x12055=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12054)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12054)));
IkReal gconst10=(x12053*x12055);
IkReal gconst11=((1.0)*r10*x12055);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12057=((-1.0)*r11);
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal(x12057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
IkReal x12058=((1.0)*(x12060.value));
IkReal x12059=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12058)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12058)));
IkReal gconst10=(x12057*x12059);
IkReal gconst11=((1.0)*r10*x12059);
IkReal x12061=(cj1*r02*sj2);
IkReal x12062=(cj2*r02*sj1);
IkReal x12063=x11768;
IkReal x12064=(r12*x12063);
j4eval[0]=((IKabs((((x12061*x12064))+((x12062*x12064)))))+(IKabs((x12062+x12061))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12065=(cj1*sj2);
IkReal x12066=(cj2*sj1);
IkReal x12067=(gconst11*r00);
IkReal x12068=((1.0)*gconst10*r01);
CheckValue<IkReal> x12069 = IKatan2WithCheck(IkReal(((((-1.0)*x12066*x12068))+((x12065*x12067))+(((-1.0)*x12065*x12068))+((x12066*x12067)))),IkReal((((r02*x12066))+((r02*x12065)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12069.valid){
continue;
}
CheckValue<IkReal> x12070=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12069.value)+(((1.5707963267949)*(x12070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12071=IKcos(j4);
IkReal x12072=IKsin(j4);
IkReal x12073=((1.0)*cj2);
IkReal x12074=((1.0)*x12071);
IkReal x12075=(gconst10*x12071);
IkReal x12076=(gconst10*x12072);
IkReal x12077=((1.0)*gconst11*x12072);
evalcond[0]=((((-1.0)*gconst11*r00*x12074))+((r02*x12072))+((r01*x12075)));
evalcond[1]=((((-1.0)*r20*x12077))+(((-1.0)*r22*x12074))+((r21*x12076)));
evalcond[2]=(((r11*x12076))+(((-1.0)*r10*x12077))+(((-1.0)*r12*x12074)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12074))+(((-1.0)*r00*x12077))+((r01*x12076)));
evalcond[4]=((((-1.0)*gconst11*r20*x12074))+((sj1*sj2))+((r22*x12072))+(((-1.0)*cj1*x12073))+((r21*x12075)));
evalcond[5]=(((r11*x12075))+(((-1.0)*gconst11*r10*x12074))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12073))+((r12*x12072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12078=(gconst10*r01);
IkReal x12079=(gconst11*r00);
CheckValue<IkReal> x12080 = IKatan2WithCheck(IkReal(((((-1.0)*x12079))+x12078)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12080.valid){
continue;
}
CheckValue<IkReal> x12081=IKPowWithIntegerCheck(IKsign(((x12079*x12079)+(r02*r02)+(((-2.0)*x12078*x12079))+(x12078*x12078))),-1);
if(!x12081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12080.value)+(((1.5707963267949)*(x12081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12082=IKcos(j4);
IkReal x12083=IKsin(j4);
IkReal x12084=((1.0)*cj2);
IkReal x12085=((1.0)*x12082);
IkReal x12086=(gconst10*x12082);
IkReal x12087=(gconst10*x12083);
IkReal x12088=((1.0)*gconst11*x12083);
evalcond[0]=(((r02*x12083))+((r01*x12086))+(((-1.0)*gconst11*r00*x12085)));
evalcond[1]=((((-1.0)*r22*x12085))+((r21*x12087))+(((-1.0)*r20*x12088)));
evalcond[2]=((((-1.0)*r12*x12085))+((r11*x12087))+(((-1.0)*r10*x12088)));
evalcond[3]=((-1.0)+((r01*x12087))+(((-1.0)*r00*x12088))+(((-1.0)*r02*x12085)));
evalcond[4]=(((sj1*sj2))+((r22*x12083))+((r21*x12086))+(((-1.0)*gconst11*r20*x12085))+(((-1.0)*cj1*x12084)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12085))+((r12*x12083))+((r11*x12086))+(((-1.0)*sj1*x12084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12089 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12089.valid){
continue;
}
CheckValue<IkReal> x12090=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12089.value)+(((1.5707963267949)*(x12090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12091=IKcos(j4);
IkReal x12092=IKsin(j4);
IkReal x12093=((1.0)*cj2);
IkReal x12094=((1.0)*x12091);
IkReal x12095=(gconst10*x12091);
IkReal x12096=(gconst10*x12092);
IkReal x12097=((1.0)*gconst11*x12092);
evalcond[0]=(((r01*x12095))+(((-1.0)*gconst11*r00*x12094))+((r02*x12092)));
evalcond[1]=((((-1.0)*r20*x12097))+(((-1.0)*r22*x12094))+((r21*x12096)));
evalcond[2]=(((r11*x12096))+(((-1.0)*r10*x12097))+(((-1.0)*r12*x12094)));
evalcond[3]=((-1.0)+((r01*x12096))+(((-1.0)*r02*x12094))+(((-1.0)*r00*x12097)));
evalcond[4]=(((r22*x12092))+((sj1*sj2))+(((-1.0)*cj1*x12093))+(((-1.0)*gconst11*r20*x12094))+((r21*x12095)));
evalcond[5]=(((r11*x12095))+((r12*x12092))+(((-1.0)*sj1*x12093))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12098=((-1.0)*r11);
CheckValue<IkReal> x12101 = IKatan2WithCheck(IkReal(x12098),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12101.valid){
continue;
}
IkReal x12099=((1.0)*(x12101.value));
IkReal x12100=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12099)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12099)));
IkReal gconst10=(x12098*x12100);
IkReal gconst11=((1.0)*r10*x12100);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12102=((-1.0)*r11);
CheckValue<IkReal> x12105 = IKatan2WithCheck(IkReal(x12102),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12105.valid){
continue;
}
IkReal x12103=((1.0)*(x12105.value));
IkReal x12104=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12103)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12103)));
IkReal gconst10=(x12102*x12104);
IkReal gconst11=((1.0)*r10*x12104);
IkReal x12106=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12110=IKPowWithIntegerCheck(x12106,-1);
if(!x12110.valid){
continue;
}
IkReal x12107=x12110.value;
IkReal x12108=((1.0)*x12107);
IkReal x12109=((((-1.0)*x12108*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12107))+(((-1.0)*x12108*(r00*r00)*(r10*r10))));
j4eval[0]=x12109;
j4eval[1]=r02;
j4eval[2]=x12106;
j4eval[3]=IKsign(x12109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12111=((-1.0)*r11);
CheckValue<IkReal> x12114 = IKatan2WithCheck(IkReal(x12111),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12114.valid){
continue;
}
IkReal x12112=((1.0)*(x12114.value));
IkReal x12113=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12112)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12112)));
IkReal gconst10=(x12111*x12113);
IkReal gconst11=((1.0)*r10*x12113);
IkReal x12115=r12*r12;
IkReal x12116=((1.0)*r02);
IkReal x12117=(cj1*sj2);
IkReal x12118=(cj2*sj1);
CheckValue<IkReal> x12122=IKPowWithIntegerCheck(((-1.0)+x12115),-1);
if(!x12122.valid){
continue;
}
IkReal x12119=x12122.value;
if((((1.0)+(((-1.0)*x12115)))) < -0.00001)
continue;
IkReal x12120=IKsqrt(((1.0)+(((-1.0)*x12115))));
IkReal x12121=(r12*x12119*x12120);
j4eval[0]=((IKabs(((((-1.0)*x12116*x12117))+(((-1.0)*x12116*x12118)))))+(IKabs(((((-1.0)*x12116*x12118*x12121))+(((-1.0)*x12116*x12117*x12121))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12123=(cj1*sj2);
IkReal x12124=(gconst10*r01);
IkReal x12125=(cj2*sj1);
IkReal x12126=((1.0)*r02);
IkReal x12127=((1.0)*gconst11*r00);
CheckValue<IkReal> x12128=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12128.valid){
continue;
}
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal((((x12124*x12125))+(((-1.0)*x12125*x12127))+((x12123*x12124))+(((-1.0)*x12123*x12127)))),IkReal(((((-1.0)*x12125*x12126))+(((-1.0)*x12123*x12126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12128.value)))+(x12129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12130=IKcos(j4);
IkReal x12131=IKsin(j4);
IkReal x12132=((1.0)*x12130);
IkReal x12133=(gconst10*x12130);
IkReal x12134=(gconst10*x12131);
IkReal x12135=((1.0)*gconst11*x12131);
evalcond[0]=((((-1.0)*gconst11*r00*x12132))+((r01*x12133))+((r02*x12131)));
evalcond[1]=((((-1.0)*r20*x12135))+((r21*x12134))+(((-1.0)*r22*x12132)));
evalcond[2]=((((-1.0)*r12*x12132))+(((-1.0)*r10*x12135))+((r11*x12134)));
evalcond[3]=((1.0)+((r01*x12134))+(((-1.0)*r00*x12135))+(((-1.0)*r02*x12132)));
evalcond[4]=(((cj2*sj1))+((r12*x12131))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12132))+((r11*x12133)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12133))+((r22*x12131))+(((-1.0)*gconst11*r20*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12136=(gconst10*r01);
IkReal x12137=(gconst11*r00);
CheckValue<IkReal> x12138=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12137*x12137)))+(((-1.0)*(x12136*x12136)))+(((2.0)*x12136*x12137)))),-1);
if(!x12138.valid){
continue;
}
CheckValue<IkReal> x12139 = IKatan2WithCheck(IkReal((x12136+(((-1.0)*x12137)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12138.value)))+(x12139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12140=IKcos(j4);
IkReal x12141=IKsin(j4);
IkReal x12142=((1.0)*x12140);
IkReal x12143=(gconst10*x12140);
IkReal x12144=(gconst10*x12141);
IkReal x12145=((1.0)*gconst11*x12141);
evalcond[0]=(((r02*x12141))+((r01*x12143))+(((-1.0)*gconst11*r00*x12142)));
evalcond[1]=((((-1.0)*r22*x12142))+(((-1.0)*r20*x12145))+((r21*x12144)));
evalcond[2]=((((-1.0)*r12*x12142))+((r11*x12144))+(((-1.0)*r10*x12145)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12145))+(((-1.0)*r02*x12142))+((r01*x12144)));
evalcond[4]=((((-1.0)*gconst11*r10*x12142))+((cj2*sj1))+((cj1*sj2))+((r12*x12141))+((r11*x12143)));
evalcond[5]=(((r22*x12141))+(((-1.0)*gconst11*r20*x12142))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12146=((1.0)*gconst11);
CheckValue<IkReal> x12147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12146)))),-1);
if(!x12147.valid){
continue;
}
CheckValue<IkReal> x12148 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12147.value)))+(x12148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12149=IKcos(j4);
IkReal x12150=IKsin(j4);
IkReal x12151=((1.0)*x12149);
IkReal x12152=(gconst10*x12149);
IkReal x12153=(gconst10*x12150);
IkReal x12154=((1.0)*gconst11*x12150);
evalcond[0]=(((r02*x12150))+((r01*x12152))+(((-1.0)*gconst11*r00*x12151)));
evalcond[1]=((((-1.0)*r22*x12151))+((r21*x12153))+(((-1.0)*r20*x12154)));
evalcond[2]=((((-1.0)*r12*x12151))+((r11*x12153))+(((-1.0)*r10*x12154)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12151))+(((-1.0)*r00*x12154))+((r01*x12153)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12151))+((cj1*sj2))+((r12*x12150))+((r11*x12152)));
evalcond[5]=((((-1.0)*gconst11*r20*x12151))+((r22*x12150))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12155=((-1.0)*r11);
IkReal x12156=((-1.0)*r10);
CheckValue<IkReal> x12158 = IKatan2WithCheck(IkReal(x12155),IkReal(x12156),IKFAST_ATAN2_MAGTHRESH);
if(!x12158.valid){
continue;
}
IkReal x12157=((1.0)*(x12158.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12157)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12156);
rxp1_1=(px*r21);
rxp1_2=(px*x12155);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12157)));
IkReal gconst10=x12155;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12159=((-1.0)*r11);
IkReal x12160=((-1.0)*r10);
CheckValue<IkReal> x12162 = IKatan2WithCheck(IkReal(x12159),IkReal(x12160),IKFAST_ATAN2_MAGTHRESH);
if(!x12162.valid){
continue;
}
IkReal x12161=((1.0)*(x12162.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12161)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12160);
rxp1_1=(px*r21);
rxp1_2=(px*x12159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12161)));
IkReal gconst10=x12159;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12163=((-1.0)*r11);
IkReal x12164=((-1.0)*r10);
CheckValue<IkReal> x12166 = IKatan2WithCheck(IkReal(x12163),IkReal(x12164),IKFAST_ATAN2_MAGTHRESH);
if(!x12166.valid){
continue;
}
IkReal x12165=((1.0)*(x12166.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12165)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12164);
rxp1_1=(px*r21);
rxp1_2=(px*x12163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12165)));
IkReal gconst10=x12163;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12169=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12169.valid){
continue;
}
IkReal x12167=x12169.value;
IkReal x12168=(sj0*x12167);
cj4array[0]=(((cj1*sj2*x12168))+((cj2*sj1*x12168)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12170=IKsin(j4);
IkReal x12171=IKcos(j4);
IkReal x12172=(gconst10*r21);
IkReal x12173=((1.0)*x12171);
IkReal x12174=((1.0)*gconst11*x12170);
evalcond[0]=(r02*x12170);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12173)));
evalcond[2]=((((-1.0)*r20*x12174))+((x12170*x12172)));
evalcond[3]=((((-1.0)*r10*x12174))+((gconst10*r11*x12170)));
evalcond[4]=((((-1.0)*gconst11*r20*x12173))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x12171*x12172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12176=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12176.valid){
continue;
}
IkReal x12175=x12176.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12175))+((cj1*cj2*x12175)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12177=IKsin(j4);
IkReal x12178=IKcos(j4);
IkReal x12179=((1.0)*sj0);
IkReal x12180=(gconst10*x12177);
IkReal x12181=((1.0)*x12178);
IkReal x12182=((1.0)*gconst11*x12177);
evalcond[0]=(r02*x12177);
evalcond[1]=((((-1.0)*x12179))+(((-1.0)*r02*x12181)));
evalcond[2]=(((r21*x12180))+(((-1.0)*r20*x12182)));
evalcond[3]=(((r11*x12180))+(((-1.0)*r10*x12182)));
evalcond[4]=((((-1.0)*gconst11*r10*x12181))+((gconst10*r11*x12178))+(((-1.0)*cj1*sj2*x12179))+(((-1.0)*cj2*sj1*x12179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12183=IKPowWithIntegerCheck(r02,-1);
if(!x12183.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12183.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12184=IKsin(j4);
IkReal x12185=IKcos(j4);
IkReal x12186=(gconst10*r21);
IkReal x12187=((1.0)*cj1);
IkReal x12188=(gconst10*r11);
IkReal x12189=((1.0)*gconst11*x12184);
IkReal x12190=((1.0)*gconst11*x12185);
evalcond[0]=(r02*x12184);
evalcond[1]=(((x12184*x12186))+(((-1.0)*r20*x12189)));
evalcond[2]=(((x12184*x12188))+(((-1.0)*r10*x12189)));
evalcond[3]=((((-1.0)*r20*x12190))+((sj1*sj2))+(((-1.0)*cj2*x12187))+((x12185*x12186)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12187))+(((-1.0)*r10*x12190))+((x12185*x12188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12191=((1.0)*gconst11);
CheckValue<IkReal> x12192 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12191))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12192.valid){
continue;
}
CheckValue<IkReal> x12193=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12193.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12192.value)+(((1.5707963267949)*(x12193.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12194=IKsin(j4);
IkReal x12195=IKcos(j4);
IkReal x12196=((1.0)*gconst11);
IkReal x12197=((1.0)*cj2);
IkReal x12198=((1.0)*sj0);
IkReal x12199=(cj1*sj2);
IkReal x12200=(gconst10*x12195);
IkReal x12201=(gconst10*x12194);
IkReal x12202=((1.0)*x12195);
evalcond[0]=((((-1.0)*r20*x12194*x12196))+((r21*x12201)));
evalcond[1]=((((-1.0)*r10*x12194*x12196))+cj0+(((-1.0)*r12*x12202))+((r11*x12201)));
evalcond[2]=(((sj1*sj2))+((r21*x12200))+(((-1.0)*r20*x12195*x12196))+(((-1.0)*cj1*x12197)));
evalcond[3]=((((-1.0)*x12198))+(((-1.0)*r02*x12202))+((r01*x12201))+(((-1.0)*r00*x12194*x12196)));
evalcond[4]=((((-1.0)*cj0*x12199))+(((-1.0)*r00*x12195*x12196))+((r02*x12194))+((r01*x12200))+(((-1.0)*cj0*sj1*x12197)));
evalcond[5]=(((r12*x12194))+(((-1.0)*r10*x12195*x12196))+(((-1.0)*x12198*x12199))+(((-1.0)*sj0*sj1*x12197))+((r11*x12200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12203=(gconst10*r21);
IkReal x12204=(gconst11*r20);
IkReal x12205=(sj1*sj2);
IkReal x12206=(cj1*cj2);
CheckValue<IkReal> x12207=IKPowWithIntegerCheck(IKsign(((((2.0)*x12203*x12204))+(((-1.0)*(x12203*x12203)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12204*x12204))))),-1);
if(!x12207.valid){
continue;
}
CheckValue<IkReal> x12208 = IKatan2WithCheck(IkReal((((r22*x12205))+(((-1.0)*r22*x12206)))),IkReal((((x12203*x12205))+(((-1.0)*x12203*x12206))+(((-1.0)*x12204*x12205))+((x12204*x12206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12207.value)))+(x12208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12209=IKsin(j4);
IkReal x12210=IKcos(j4);
IkReal x12211=((1.0)*cj2);
IkReal x12212=((1.0)*sj0);
IkReal x12213=(cj1*sj2);
IkReal x12214=((1.0)*x12210);
IkReal x12215=(gconst10*x12210);
IkReal x12216=(gconst10*x12209);
IkReal x12217=((1.0)*gconst11*x12209);
evalcond[0]=((((-1.0)*r22*x12214))+((r21*x12216))+(((-1.0)*r20*x12217)));
evalcond[1]=(cj0+(((-1.0)*r12*x12214))+(((-1.0)*r10*x12217))+((r11*x12216)));
evalcond[2]=((((-1.0)*x12212))+(((-1.0)*r02*x12214))+(((-1.0)*r00*x12217))+((r01*x12216)));
evalcond[3]=(((r22*x12209))+(((-1.0)*cj1*x12211))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12214))+((r21*x12215)));
evalcond[4]=(((r02*x12209))+(((-1.0)*gconst11*r00*x12214))+(((-1.0)*cj0*x12213))+(((-1.0)*cj0*sj1*x12211))+((r01*x12215)));
evalcond[5]=((((-1.0)*gconst11*r10*x12214))+((r12*x12209))+(((-1.0)*sj0*sj1*x12211))+(((-1.0)*x12212*x12213))+((r11*x12215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12218=((1.0)*sj0);
IkReal x12219=((1.0)*gconst10);
CheckValue<IkReal> x12220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12219)))),-1);
if(!x12220.valid){
continue;
}
CheckValue<IkReal> x12221 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12218))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12219))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12220.value)))+(x12221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12222=IKsin(j4);
IkReal x12223=IKcos(j4);
IkReal x12224=((1.0)*cj2);
IkReal x12225=((1.0)*sj0);
IkReal x12226=(cj1*sj2);
IkReal x12227=((1.0)*x12223);
IkReal x12228=(gconst10*x12223);
IkReal x12229=(gconst10*x12222);
IkReal x12230=((1.0)*gconst11*x12222);
evalcond[0]=((((-1.0)*r20*x12230))+(((-1.0)*r22*x12227))+((r21*x12229)));
evalcond[1]=(((r11*x12229))+cj0+(((-1.0)*r12*x12227))+(((-1.0)*r10*x12230)));
evalcond[2]=((((-1.0)*x12225))+(((-1.0)*r00*x12230))+((r01*x12229))+(((-1.0)*r02*x12227)));
evalcond[3]=((((-1.0)*cj1*x12224))+((r22*x12222))+((sj1*sj2))+((r21*x12228))+(((-1.0)*gconst11*r20*x12227)));
evalcond[4]=(((r02*x12222))+((r01*x12228))+(((-1.0)*cj0*sj1*x12224))+(((-1.0)*gconst11*r00*x12227))+(((-1.0)*cj0*x12226)));
evalcond[5]=((((-1.0)*x12225*x12226))+((r11*x12228))+(((-1.0)*sj0*sj1*x12224))+((r12*x12222))+(((-1.0)*gconst11*r10*x12227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12231=((1.0)*gconst11);
CheckValue<IkReal> x12232 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12231))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12232.valid){
continue;
}
CheckValue<IkReal> x12233=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12231)))),-1);
if(!x12233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12232.value)+(((1.5707963267949)*(x12233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12234=IKsin(j4);
IkReal x12235=IKcos(j4);
IkReal x12236=((1.0)*cj2);
IkReal x12237=((1.0)*sj0);
IkReal x12238=(cj1*sj2);
IkReal x12239=((1.0)*x12235);
IkReal x12240=(gconst10*x12235);
IkReal x12241=(gconst10*x12234);
IkReal x12242=((1.0)*gconst11*x12234);
evalcond[0]=((((-1.0)*r22*x12239))+(((-1.0)*r20*x12242))+((r21*x12241)));
evalcond[1]=((((-1.0)*r10*x12242))+(((-1.0)*r12*x12239))+cj0+((r11*x12241)));
evalcond[2]=((((-1.0)*r02*x12239))+(((-1.0)*x12237))+((r01*x12241))+(((-1.0)*r00*x12242)));
evalcond[3]=((((-1.0)*gconst11*r20*x12239))+((sj1*sj2))+(((-1.0)*cj1*x12236))+((r22*x12234))+((r21*x12240)));
evalcond[4]=((((-1.0)*cj0*sj1*x12236))+(((-1.0)*cj0*x12238))+(((-1.0)*gconst11*r00*x12239))+((r01*x12240))+((r02*x12234)));
evalcond[5]=(((r11*x12240))+((r12*x12234))+(((-1.0)*gconst11*r10*x12239))+(((-1.0)*sj0*sj1*x12236))+(((-1.0)*x12237*x12238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12243=((-1.0)*r11);
CheckValue<IkReal> x12246 = IKatan2WithCheck(IkReal(x12243),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12246.valid){
continue;
}
IkReal x12244=((1.0)*(x12246.value));
IkReal x12245=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12244)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12244)));
IkReal gconst10=(x12243*x12245);
IkReal gconst11=((1.0)*r10*x12245);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12247=gconst10*gconst10;
IkReal x12248=gconst11*gconst11;
IkReal x12249=(gconst10*r21);
IkReal x12250=(cj3*r00);
IkReal x12251=(r00*sj3);
IkReal x12252=((1.0)*gconst11);
IkReal x12253=(gconst10*r20);
IkReal x12254=(r01*sj3);
IkReal x12255=(cj3*gconst11*r01);
IkReal x12256=(r21*x12247);
IkReal x12257=(r20*x12248);
CheckValue<IkReal> x12258=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12249*x12251*x12252))+((x12251*x12257))+(((-1.0)*x12252*x12253*x12254))+((x12254*x12256))+((r02*r22*sj3)))),-1);
if(!x12258.valid){
continue;
}
CheckValue<IkReal> x12259 = IKatan2WithCheck(IkReal((((r22*x12255))+((gconst10*r22*x12250)))),IkReal(((((-1.0)*x12250*x12252*x12253))+(((-1.0)*cj3*r01*x12257))+((x12250*x12256))+((x12249*x12255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12258.value)))+(x12259.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12260=IKsin(j4);
IkReal x12261=IKcos(j4);
IkReal x12262=(sj1*sj2);
IkReal x12263=(gconst10*sj3);
IkReal x12264=(cj3*gconst10);
IkReal x12265=(gconst11*r20);
IkReal x12266=(gconst11*r21);
IkReal x12267=(gconst11*r00);
IkReal x12268=(cj3*gconst11);
IkReal x12269=(gconst11*r10);
IkReal x12270=((1.0)*cj1);
IkReal x12271=(cj2*sj1);
IkReal x12272=(gconst11*sj3);
IkReal x12273=(cj2*x12270);
IkReal x12274=((1.0)*x12261);
IkReal x12275=((1.0)*x12260);
IkReal x12276=(gconst10*x12260);
IkReal x12277=(cj3*x12260);
IkReal x12278=(sj3*x12261);
evalcond[0]=((((-1.0)*x12265*x12275))+((r21*x12276))+(((-1.0)*r22*x12274)));
evalcond[1]=((((-1.0)*x12269*x12275))+(((-1.0)*r12*x12274))+((r11*x12276)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12274))+(((-1.0)*x12267*x12275))+((r01*x12276)));
evalcond[3]=((((-1.0)*cj3*x12267*x12274))+((r01*x12261*x12264))+((r00*x12263))+((r02*x12277))+((r01*x12272)));
evalcond[4]=((((-1.0)*r02*sj3*x12275))+((r00*x12264))+((r01*x12268))+((x12267*x12278))+(((-1.0)*r01*x12263*x12274)));
evalcond[5]=(((cj1*sj2))+x12271+((r22*x12277))+((r20*x12263))+(((-1.0)*cj3*x12265*x12274))+((r21*x12261*x12264))+((sj3*x12266)));
evalcond[6]=(((r10*x12263))+(((-1.0)*x12273))+x12262+(((-1.0)*r10*x12268*x12274))+((r12*x12277))+((r11*x12272))+((r11*x12261*x12264)));
evalcond[7]=(((cj3*x12266))+(((-1.0)*x12273))+x12262+(((-1.0)*r22*sj3*x12275))+((r20*x12264))+((x12265*x12278))+(((-1.0)*r21*x12263*x12274)));
evalcond[8]=((((-1.0)*x12271))+(((-1.0)*r12*sj3*x12275))+((x12269*x12278))+(((-1.0)*sj2*x12270))+((r10*x12264))+((r11*x12268))+(((-1.0)*r11*x12263*x12274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12279 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12279.valid){
continue;
}
CheckValue<IkReal> x12280=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12279.value)+(((1.5707963267949)*(x12280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12281=IKsin(j4);
IkReal x12282=IKcos(j4);
IkReal x12283=(sj1*sj2);
IkReal x12284=(gconst10*sj3);
IkReal x12285=(cj3*gconst10);
IkReal x12286=(gconst11*r20);
IkReal x12287=(gconst11*r21);
IkReal x12288=(gconst11*r00);
IkReal x12289=(cj3*gconst11);
IkReal x12290=(gconst11*r10);
IkReal x12291=((1.0)*cj1);
IkReal x12292=(cj2*sj1);
IkReal x12293=(gconst11*sj3);
IkReal x12294=(cj2*x12291);
IkReal x12295=((1.0)*x12282);
IkReal x12296=((1.0)*x12281);
IkReal x12297=(gconst10*x12281);
IkReal x12298=(cj3*x12281);
IkReal x12299=(sj3*x12282);
evalcond[0]=(((r21*x12297))+(((-1.0)*x12286*x12296))+(((-1.0)*r22*x12295)));
evalcond[1]=((((-1.0)*x12290*x12296))+((r11*x12297))+(((-1.0)*r12*x12295)));
evalcond[2]=((-1.0)+((r01*x12297))+(((-1.0)*r02*x12295))+(((-1.0)*x12288*x12296)));
evalcond[3]=(((r01*x12293))+(((-1.0)*cj3*x12288*x12295))+((r00*x12284))+((r02*x12298))+((r01*x12282*x12285)));
evalcond[4]=(((x12288*x12299))+(((-1.0)*r02*sj3*x12296))+((r00*x12285))+((r01*x12289))+(((-1.0)*r01*x12284*x12295)));
evalcond[5]=((((-1.0)*cj3*x12286*x12295))+((cj1*sj2))+((r21*x12282*x12285))+x12292+((r22*x12298))+((r20*x12284))+((sj3*x12287)));
evalcond[6]=((((-1.0)*x12294))+x12283+((r11*x12293))+((r12*x12298))+(((-1.0)*r10*x12289*x12295))+((r11*x12282*x12285))+((r10*x12284)));
evalcond[7]=((((-1.0)*r22*sj3*x12296))+((x12286*x12299))+(((-1.0)*x12294))+x12283+(((-1.0)*r21*x12284*x12295))+((r20*x12285))+((cj3*x12287)));
evalcond[8]=((((-1.0)*sj2*x12291))+(((-1.0)*r11*x12284*x12295))+((x12290*x12299))+(((-1.0)*x12292))+((r11*x12289))+(((-1.0)*r12*sj3*x12296))+((r10*x12285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12300=((-1.0)*r11);
CheckValue<IkReal> x12303 = IKatan2WithCheck(IkReal(x12300),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12303.valid){
continue;
}
IkReal x12301=((1.0)*(x12303.value));
IkReal x12302=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12301)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12301)));
IkReal gconst10=(x12300*x12302);
IkReal gconst11=((1.0)*r10*x12302);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12304=gconst10*gconst10;
IkReal x12305=gconst11*gconst11;
IkReal x12306=(gconst10*r21);
IkReal x12307=(cj3*r00);
IkReal x12308=(r00*sj3);
IkReal x12309=((1.0)*gconst11);
IkReal x12310=(gconst10*r20);
IkReal x12311=(r01*sj3);
IkReal x12312=(cj3*gconst11*r01);
IkReal x12313=(r21*x12304);
IkReal x12314=(r20*x12305);
CheckValue<IkReal> x12315=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12306*x12308*x12309))+((x12308*x12314))+((x12311*x12313))+((r02*r22*sj3))+(((-1.0)*x12309*x12310*x12311)))),-1);
if(!x12315.valid){
continue;
}
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal((((r22*x12312))+((gconst10*r22*x12307)))),IkReal(((((-1.0)*x12307*x12309*x12310))+((x12307*x12313))+((x12306*x12312))+(((-1.0)*cj3*r01*x12314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12315.value)))+(x12316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12317=IKsin(j4);
IkReal x12318=IKcos(j4);
IkReal x12319=(cj2*sj1);
IkReal x12320=(cj1*sj2);
IkReal x12321=(gconst10*sj3);
IkReal x12322=(cj3*gconst10);
IkReal x12323=(gconst11*r20);
IkReal x12324=(gconst11*r21);
IkReal x12325=(gconst11*r00);
IkReal x12326=(sj1*sj2);
IkReal x12327=(cj3*gconst11);
IkReal x12328=(gconst11*r10);
IkReal x12329=(cj1*cj2);
IkReal x12330=(gconst11*sj3);
IkReal x12331=((1.0)*x12318);
IkReal x12332=((1.0)*x12317);
IkReal x12333=(gconst10*x12317);
IkReal x12334=(cj3*x12317);
IkReal x12335=(sj3*x12318);
IkReal x12336=(x12320+x12319);
evalcond[0]=((((-1.0)*r22*x12331))+((r21*x12333))+(((-1.0)*x12323*x12332)));
evalcond[1]=((((-1.0)*x12328*x12332))+((r11*x12333))+(((-1.0)*r12*x12331)));
evalcond[2]=((1.0)+((r01*x12333))+(((-1.0)*r02*x12331))+(((-1.0)*x12325*x12332)));
evalcond[3]=(((r01*x12318*x12322))+((r00*x12321))+((r01*x12330))+(((-1.0)*cj3*x12325*x12331))+((r02*x12334)));
evalcond[4]=(((r00*x12322))+((r01*x12327))+((x12325*x12335))+(((-1.0)*r02*sj3*x12332))+(((-1.0)*r01*x12321*x12331)));
evalcond[5]=(((r21*x12318*x12322))+x12336+((r20*x12321))+((sj3*x12324))+((r22*x12334))+(((-1.0)*cj3*x12323*x12331)));
evalcond[6]=(x12329+(((-1.0)*r10*x12327*x12331))+((r12*x12334))+((r11*x12318*x12322))+((r10*x12321))+(((-1.0)*x12326))+((r11*x12330)));
evalcond[7]=((((-1.0)*r11*x12321*x12331))+x12336+(((-1.0)*r12*sj3*x12332))+((r10*x12322))+((r11*x12327))+((x12328*x12335)));
evalcond[8]=(x12326+((r20*x12322))+((x12323*x12335))+(((-1.0)*r21*x12321*x12331))+((cj3*x12324))+(((-1.0)*r22*sj3*x12332))+(((-1.0)*x12329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12337=((1.0)*gconst11);
CheckValue<IkReal> x12338 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12338.valid){
continue;
}
CheckValue<IkReal> x12339=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12337)))),-1);
if(!x12339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12338.value)+(((1.5707963267949)*(x12339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12340=IKsin(j4);
IkReal x12341=IKcos(j4);
IkReal x12342=(cj2*sj1);
IkReal x12343=(cj1*sj2);
IkReal x12344=(gconst10*sj3);
IkReal x12345=(cj3*gconst10);
IkReal x12346=(gconst11*r20);
IkReal x12347=(gconst11*r21);
IkReal x12348=(gconst11*r00);
IkReal x12349=(sj1*sj2);
IkReal x12350=(cj3*gconst11);
IkReal x12351=(gconst11*r10);
IkReal x12352=(cj1*cj2);
IkReal x12353=(gconst11*sj3);
IkReal x12354=((1.0)*x12341);
IkReal x12355=((1.0)*x12340);
IkReal x12356=(gconst10*x12340);
IkReal x12357=(cj3*x12340);
IkReal x12358=(sj3*x12341);
IkReal x12359=(x12343+x12342);
evalcond[0]=((((-1.0)*x12346*x12355))+((r21*x12356))+(((-1.0)*r22*x12354)));
evalcond[1]=((((-1.0)*x12351*x12355))+((r11*x12356))+(((-1.0)*r12*x12354)));
evalcond[2]=((1.0)+(((-1.0)*x12348*x12355))+(((-1.0)*r02*x12354))+((r01*x12356)));
evalcond[3]=(((r00*x12344))+((r01*x12353))+(((-1.0)*cj3*x12348*x12354))+((r02*x12357))+((r01*x12341*x12345)));
evalcond[4]=(((r00*x12345))+((r01*x12350))+(((-1.0)*r01*x12344*x12354))+((x12348*x12358))+(((-1.0)*r02*sj3*x12355)));
evalcond[5]=(((r20*x12344))+x12359+((sj3*x12347))+((r22*x12357))+((r21*x12341*x12345))+(((-1.0)*cj3*x12346*x12354)));
evalcond[6]=(x12352+((r11*x12341*x12345))+(((-1.0)*r10*x12350*x12354))+((r11*x12353))+((r12*x12357))+((r10*x12344))+(((-1.0)*x12349)));
evalcond[7]=(((x12351*x12358))+x12359+((r11*x12350))+((r10*x12345))+(((-1.0)*r11*x12344*x12354))+(((-1.0)*r12*sj3*x12355)));
evalcond[8]=((((-1.0)*x12352))+((r20*x12345))+(((-1.0)*r21*x12344*x12354))+x12349+((cj3*x12347))+((x12346*x12358))+(((-1.0)*r22*sj3*x12355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12360=((-1.0)*r11);
IkReal x12361=((-1.0)*r10);
CheckValue<IkReal> x12363 = IKatan2WithCheck(IkReal(x12360),IkReal(x12361),IKFAST_ATAN2_MAGTHRESH);
if(!x12363.valid){
continue;
}
IkReal x12362=((1.0)*(x12363.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12362)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12361);
rxp1_1=(px*r21);
rxp1_2=(px*x12360);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12362)));
IkReal gconst10=x12360;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12364=((-1.0)*r11);
IkReal x12365=((-1.0)*r10);
CheckValue<IkReal> x12367 = IKatan2WithCheck(IkReal(x12364),IkReal(x12365),IKFAST_ATAN2_MAGTHRESH);
if(!x12367.valid){
continue;
}
IkReal x12366=((1.0)*(x12367.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12366)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12365);
rxp1_1=(px*r21);
rxp1_2=(px*x12364);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12366)));
IkReal gconst10=x12364;
IkReal gconst11=((1.0)*r10);
IkReal x12368=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12368))+(((-1.0)*r10*r20*x12368)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12369=((-1.0)*r11);
IkReal x12370=((-1.0)*r10);
CheckValue<IkReal> x12372 = IKatan2WithCheck(IkReal(x12369),IkReal(x12370),IKFAST_ATAN2_MAGTHRESH);
if(!x12372.valid){
continue;
}
IkReal x12371=((1.0)*(x12372.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12371)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12370);
rxp1_1=(px*r21);
rxp1_2=(px*x12369);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12371)));
IkReal gconst10=x12369;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12374=IKPowWithIntegerCheck(r02,-1);
if(!x12374.valid){
continue;
}
IkReal x12373=x12374.value;
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(cj3,-1);
if(!x12375.valid){
continue;
}
if( IKabs((x12373*(x12375.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12373)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12373*(x12375.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12373))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12373*(x12375.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12373));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12376=IKsin(j4);
IkReal x12377=IKcos(j4);
IkReal x12378=(cj3*r10);
IkReal x12379=((1.0)*gconst11);
IkReal x12380=(sj1*sj2);
IkReal x12381=(gconst11*sj3);
IkReal x12382=(cj3*r11);
IkReal x12383=(cj2*sj1);
IkReal x12384=(gconst10*r20);
IkReal x12385=(gconst10*sj3);
IkReal x12386=((1.0)*cj0);
IkReal x12387=((1.0)*sj0);
IkReal x12388=(cj1*sj2);
IkReal x12389=(cj3*r21);
IkReal x12390=((1.0)*cj1*cj2);
IkReal x12391=(r20*x12377);
IkReal x12392=(gconst10*x12376);
IkReal x12393=(gconst10*x12377);
IkReal x12394=(r02*x12376);
IkReal x12395=((1.0)*x12377);
evalcond[0]=((((-1.0)*r02*x12395))+(((-1.0)*x12387)));
evalcond[1]=(((r21*x12392))+(((-1.0)*r20*x12376*x12379)));
evalcond[2]=(cj0+((r11*x12392))+(((-1.0)*r10*x12376*x12379)));
evalcond[3]=(((cj3*x12394))+((cj0*x12380))+(((-1.0)*cj1*cj2*x12386)));
evalcond[4]=((((-1.0)*x12383*x12386))+(((-1.0)*sj3*x12394))+(((-1.0)*x12386*x12388)));
evalcond[5]=(((x12389*x12393))+(((-1.0)*cj3*x12379*x12391))+x12388+x12383+((r21*x12381))+((sj3*x12384)));
evalcond[6]=(((gconst11*x12389))+((cj3*x12384))+((x12381*x12391))+x12380+(((-1.0)*x12390))+(((-1.0)*r21*x12385*x12395)));
evalcond[7]=(((r11*x12381))+((r10*x12385))+((x12382*x12393))+(((-1.0)*x12377*x12378*x12379))+((sj0*x12380))+(((-1.0)*cj1*cj2*x12387)));
evalcond[8]=((((-1.0)*r11*x12385*x12395))+((gconst11*x12382))+(((-1.0)*x12383*x12387))+((gconst10*x12378))+(((-1.0)*x12387*x12388))+((r10*x12377*x12381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12396=((1.0)*r20);
IkReal x12397=((1.0)*gconst11);
CheckValue<IkReal> x12398=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12397))),-1);
if(!x12398.valid){
continue;
}
CheckValue<IkReal> x12399=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12396))+((cj3*gconst10*r21))),-1);
if(!x12399.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12398.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12399.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12396))+(((-1.0)*r21*sj3*x12397)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12398.value)))+IKsqr(((x12399.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12396))+(((-1.0)*r21*sj3*x12397))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12398.value)), ((x12399.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12396))+(((-1.0)*r21*sj3*x12397))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12400=IKsin(j4);
IkReal x12401=IKcos(j4);
IkReal x12402=(cj3*r10);
IkReal x12403=((1.0)*gconst11);
IkReal x12404=(sj1*sj2);
IkReal x12405=(gconst11*sj3);
IkReal x12406=(cj3*r11);
IkReal x12407=(cj2*sj1);
IkReal x12408=(gconst10*r20);
IkReal x12409=(gconst10*sj3);
IkReal x12410=((1.0)*cj0);
IkReal x12411=((1.0)*sj0);
IkReal x12412=(cj1*sj2);
IkReal x12413=(cj3*r21);
IkReal x12414=((1.0)*cj1*cj2);
IkReal x12415=(r20*x12401);
IkReal x12416=(gconst10*x12400);
IkReal x12417=(gconst10*x12401);
IkReal x12418=(r02*x12400);
IkReal x12419=((1.0)*x12401);
evalcond[0]=((((-1.0)*r02*x12419))+(((-1.0)*x12411)));
evalcond[1]=(((r21*x12416))+(((-1.0)*r20*x12400*x12403)));
evalcond[2]=(cj0+((r11*x12416))+(((-1.0)*r10*x12400*x12403)));
evalcond[3]=(((cj3*x12418))+(((-1.0)*cj1*cj2*x12410))+((cj0*x12404)));
evalcond[4]=((((-1.0)*x12410*x12412))+(((-1.0)*sj3*x12418))+(((-1.0)*x12407*x12410)));
evalcond[5]=((((-1.0)*cj3*x12403*x12415))+((sj3*x12408))+((r21*x12405))+((x12413*x12417))+x12407+x12412);
evalcond[6]=((((-1.0)*r21*x12409*x12419))+((gconst11*x12413))+((x12405*x12415))+(((-1.0)*x12414))+((cj3*x12408))+x12404);
evalcond[7]=((((-1.0)*cj1*cj2*x12411))+((x12406*x12417))+((sj0*x12404))+((r10*x12409))+(((-1.0)*x12401*x12402*x12403))+((r11*x12405)));
evalcond[8]=(((r10*x12401*x12405))+(((-1.0)*x12411*x12412))+((gconst10*x12402))+((gconst11*x12406))+(((-1.0)*r11*x12409*x12419))+(((-1.0)*x12407*x12411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12420=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12420.valid){
continue;
}
CheckValue<IkReal> x12421=IKPowWithIntegerCheck(r02,-1);
if(!x12421.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12420.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12421.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12420.value)))+IKsqr(((-1.0)*sj0*(x12421.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12420.value)), ((-1.0)*sj0*(x12421.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12422=IKsin(j4);
IkReal x12423=IKcos(j4);
IkReal x12424=(cj3*r10);
IkReal x12425=((1.0)*gconst11);
IkReal x12426=(sj1*sj2);
IkReal x12427=(gconst11*sj3);
IkReal x12428=(cj3*r11);
IkReal x12429=(cj2*sj1);
IkReal x12430=(gconst10*r20);
IkReal x12431=(gconst10*sj3);
IkReal x12432=((1.0)*cj0);
IkReal x12433=((1.0)*sj0);
IkReal x12434=(cj1*sj2);
IkReal x12435=(cj3*r21);
IkReal x12436=((1.0)*cj1*cj2);
IkReal x12437=(r20*x12423);
IkReal x12438=(gconst10*x12422);
IkReal x12439=(gconst10*x12423);
IkReal x12440=(r02*x12422);
IkReal x12441=((1.0)*x12423);
evalcond[0]=((((-1.0)*r02*x12441))+(((-1.0)*x12433)));
evalcond[1]=(((r21*x12438))+(((-1.0)*r20*x12422*x12425)));
evalcond[2]=((((-1.0)*r10*x12422*x12425))+cj0+((r11*x12438)));
evalcond[3]=(((cj3*x12440))+(((-1.0)*cj1*cj2*x12432))+((cj0*x12426)));
evalcond[4]=((((-1.0)*x12429*x12432))+(((-1.0)*sj3*x12440))+(((-1.0)*x12432*x12434)));
evalcond[5]=(((r21*x12427))+(((-1.0)*cj3*x12425*x12437))+((x12435*x12439))+x12434+x12429+((sj3*x12430)));
evalcond[6]=(((cj3*x12430))+(((-1.0)*x12436))+((gconst11*x12435))+x12426+(((-1.0)*r21*x12431*x12441))+((x12427*x12437)));
evalcond[7]=(((sj0*x12426))+((x12428*x12439))+((r10*x12431))+(((-1.0)*cj1*cj2*x12433))+((r11*x12427))+(((-1.0)*x12423*x12424*x12425)));
evalcond[8]=(((gconst10*x12424))+(((-1.0)*x12433*x12434))+(((-1.0)*x12429*x12433))+(((-1.0)*r11*x12431*x12441))+((gconst11*x12428))+((r10*x12423*x12427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12442=((-1.0)*r11);
CheckValue<IkReal> x12445 = IKatan2WithCheck(IkReal(x12442),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12445.valid){
continue;
}
IkReal x12443=((1.0)*(x12445.value));
IkReal x12444=x11768;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12443)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12443)));
IkReal gconst10=(x12442*x12444);
IkReal gconst11=((1.0)*r10*x12444);
IkReal x12446=r12*r12;
IkReal x12447=((1.0)*sj0);
IkReal x12448=(cj0*r02);
IkReal x12449=x11768;
j4eval[0]=((IKabs((((r12*x12448*x12449))+((sj0*x12446*x12449))+(((-1.0)*x12447*x12449)))))+(IKabs(((((-1.0)*x12448))+(((-1.0)*r12*x12447))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12450=((1.0)*r12);
IkReal x12451=(sj1*sj2);
IkReal x12452=((1.0)*r21);
IkReal x12453=(cj3*gconst11);
IkReal x12454=(r11*sj3);
IkReal x12455=(gconst11*r20);
IkReal x12456=((1.0)*sj3);
IkReal x12457=(cj1*cj2);
IkReal x12458=(gconst10*r21*sj3);
IkReal x12459=(cj3*gconst10*r20);
CheckValue<IkReal> x12460=IKPowWithIntegerCheck(((((-1.0)*x12452*x12454*(gconst10*gconst10)))+((gconst10*x12454*x12455))+(((-1.0)*gconst11*r10*x12455*x12456))+((gconst11*r10*x12458))),-1);
if(!x12460.valid){
continue;
}
CheckValue<IkReal> x12461=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12452))+((sj3*x12455))),-1);
if(!x12461.valid){
continue;
}
if( IKabs(((x12460.value)*(((((-1.0)*r21*x12450*x12453))+(((-1.0)*cj0*x12455*x12456))+((cj0*x12458))+(((-1.0)*x12450*x12459))+(((-1.0)*x12450*x12451))+((r12*x12457)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12461.value)*(((((-1.0)*x12451))+(((-1.0)*x12459))+(((-1.0)*x12452*x12453))+x12457)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12460.value)*(((((-1.0)*r21*x12450*x12453))+(((-1.0)*cj0*x12455*x12456))+((cj0*x12458))+(((-1.0)*x12450*x12459))+(((-1.0)*x12450*x12451))+((r12*x12457))))))+IKsqr(((x12461.value)*(((((-1.0)*x12451))+(((-1.0)*x12459))+(((-1.0)*x12452*x12453))+x12457))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12460.value)*(((((-1.0)*r21*x12450*x12453))+(((-1.0)*cj0*x12455*x12456))+((cj0*x12458))+(((-1.0)*x12450*x12459))+(((-1.0)*x12450*x12451))+((r12*x12457))))), ((x12461.value)*(((((-1.0)*x12451))+(((-1.0)*x12459))+(((-1.0)*x12452*x12453))+x12457))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12462=IKsin(j4);
IkReal x12463=IKcos(j4);
IkReal x12464=(cj3*r10);
IkReal x12465=(gconst11*r20);
IkReal x12466=(gconst11*sj3);
IkReal x12467=(sj1*sj2);
IkReal x12468=(cj3*r11);
IkReal x12469=(r10*sj3);
IkReal x12470=(gconst10*r01);
IkReal x12471=(gconst10*sj3);
IkReal x12472=(cj2*sj1);
IkReal x12473=((1.0)*sj0);
IkReal x12474=(cj1*sj2);
IkReal x12475=(gconst10*r21);
IkReal x12476=(cj3*gconst10);
IkReal x12477=(cj3*gconst11);
IkReal x12478=((1.0)*cj0);
IkReal x12479=((1.0)*x12462);
IkReal x12480=((1.0)*cj1*cj2);
IkReal x12481=(gconst11*x12463);
IkReal x12482=(sj3*x12463);
IkReal x12483=(gconst10*x12462);
IkReal x12484=((1.0)*x12463);
IkReal x12485=(cj3*x12463);
IkReal x12486=(cj3*x12462);
evalcond[0]=((((-1.0)*x12465*x12479))+((x12462*x12475)));
evalcond[1]=(cj0+(((-1.0)*r12*x12484))+(((-1.0)*gconst11*r10*x12479))+((r11*x12483)));
evalcond[2]=(((x12462*x12470))+(((-1.0)*r02*x12484))+(((-1.0)*x12473))+(((-1.0)*gconst11*r00*x12479)));
evalcond[3]=((((-1.0)*cj3*x12465*x12484))+((r20*x12471))+((x12475*x12485))+x12472+x12474+((r21*x12466)));
evalcond[4]=((((-1.0)*r21*x12471*x12484))+(((-1.0)*x12480))+((r20*x12476))+((x12465*x12482))+x12467+((r21*x12477)));
evalcond[5]=(((r00*x12471))+((r01*x12466))+((r02*x12486))+((cj0*x12467))+(((-1.0)*r00*x12477*x12484))+(((-1.0)*cj1*cj2*x12478))+((x12470*x12485)));
evalcond[6]=((((-1.0)*x12464*x12481))+((r12*x12486))+((r11*x12466))+((gconst10*x12463*x12468))+((sj0*x12467))+((gconst10*x12469))+(((-1.0)*cj1*cj2*x12473)));
evalcond[7]=(((r00*x12463*x12466))+((r00*x12476))+((r01*x12477))+(((-1.0)*x12472*x12478))+(((-1.0)*x12470*x12482))+(((-1.0)*r02*sj3*x12479))+(((-1.0)*x12474*x12478)));
evalcond[8]=(((gconst11*x12468))+(((-1.0)*x12472*x12473))+((r10*x12463*x12466))+(((-1.0)*r12*sj3*x12479))+(((-1.0)*r11*x12471*x12484))+(((-1.0)*x12473*x12474))+((gconst10*x12464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12487=((1.0)*sj0);
IkReal x12488=((1.0)*gconst10);
CheckValue<IkReal> x12489 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12487))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12487))+(((-1.0)*cj0*r01*x12488))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12489.valid){
continue;
}
CheckValue<IkReal> x12490=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12488)))),-1);
if(!x12490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12489.value)+(((1.5707963267949)*(x12490.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12491=IKsin(j4);
IkReal x12492=IKcos(j4);
IkReal x12493=(cj3*r10);
IkReal x12494=(gconst11*r20);
IkReal x12495=(gconst11*sj3);
IkReal x12496=(sj1*sj2);
IkReal x12497=(cj3*r11);
IkReal x12498=(r10*sj3);
IkReal x12499=(gconst10*r01);
IkReal x12500=(gconst10*sj3);
IkReal x12501=(cj2*sj1);
IkReal x12502=((1.0)*sj0);
IkReal x12503=(cj1*sj2);
IkReal x12504=(gconst10*r21);
IkReal x12505=(cj3*gconst10);
IkReal x12506=(cj3*gconst11);
IkReal x12507=((1.0)*cj0);
IkReal x12508=((1.0)*x12491);
IkReal x12509=((1.0)*cj1*cj2);
IkReal x12510=(gconst11*x12492);
IkReal x12511=(sj3*x12492);
IkReal x12512=(gconst10*x12491);
IkReal x12513=((1.0)*x12492);
IkReal x12514=(cj3*x12492);
IkReal x12515=(cj3*x12491);
evalcond[0]=((((-1.0)*x12494*x12508))+((x12491*x12504)));
evalcond[1]=((((-1.0)*r12*x12513))+cj0+(((-1.0)*gconst11*r10*x12508))+((r11*x12512)));
evalcond[2]=((((-1.0)*gconst11*r00*x12508))+(((-1.0)*x12502))+(((-1.0)*r02*x12513))+((x12491*x12499)));
evalcond[3]=(((r20*x12500))+((r21*x12495))+((x12504*x12514))+x12501+x12503+(((-1.0)*cj3*x12494*x12513)));
evalcond[4]=((((-1.0)*x12509))+(((-1.0)*r21*x12500*x12513))+((r20*x12505))+((r21*x12506))+((x12494*x12511))+x12496);
evalcond[5]=(((r01*x12495))+((x12499*x12514))+((r00*x12500))+(((-1.0)*r00*x12506*x12513))+(((-1.0)*cj1*cj2*x12507))+((cj0*x12496))+((r02*x12515)));
evalcond[6]=(((r12*x12515))+((sj0*x12496))+(((-1.0)*cj1*cj2*x12502))+((gconst10*x12498))+(((-1.0)*x12493*x12510))+((gconst10*x12492*x12497))+((r11*x12495)));
evalcond[7]=((((-1.0)*r02*sj3*x12508))+((r00*x12492*x12495))+((r01*x12506))+((r00*x12505))+(((-1.0)*x12501*x12507))+(((-1.0)*x12499*x12511))+(((-1.0)*x12503*x12507)));
evalcond[8]=((((-1.0)*r11*x12500*x12513))+((gconst11*x12497))+((r10*x12492*x12495))+(((-1.0)*x12501*x12502))+(((-1.0)*r12*sj3*x12508))+((gconst10*x12493))+(((-1.0)*x12502*x12503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12516=gconst10*gconst10;
IkReal x12517=r21*r21;
IkReal x12518=gconst11*gconst11;
IkReal x12519=r20*r20;
IkReal x12520=((1.0)*cj3);
IkReal x12521=(r20*sj3);
IkReal x12522=(gconst10*gconst11);
IkReal x12523=(cj2*sj1);
IkReal x12524=(gconst10*r21);
IkReal x12525=(cj1*sj2);
IkReal x12526=((1.0)*gconst11*r20);
CheckValue<IkReal> x12527 = IKatan2WithCheck(IkReal((((r22*x12525))+((r22*x12523))+((gconst11*r21*r22*sj3))+((gconst10*r22*x12521)))),IkReal((((sj3*x12517*x12522))+(((-1.0)*x12523*x12526))+((x12523*x12524))+((r21*x12516*x12521))+((x12524*x12525))+(((-1.0)*r21*x12518*x12521))+(((-1.0)*x12525*x12526))+(((-1.0)*sj3*x12519*x12522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12527.valid){
continue;
}
CheckValue<IkReal> x12528=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12518*x12519*x12520))+(((-1.0)*x12516*x12517*x12520))+(((2.0)*cj3*r20*r21*x12522))+(((-1.0)*x12520*(r22*r22))))),-1);
if(!x12528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12527.value)+(((1.5707963267949)*(x12528.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12529=IKsin(j4);
IkReal x12530=IKcos(j4);
IkReal x12531=(cj3*r10);
IkReal x12532=(gconst11*r20);
IkReal x12533=(gconst11*sj3);
IkReal x12534=(sj1*sj2);
IkReal x12535=(gconst11*r00);
IkReal x12536=(cj3*r11);
IkReal x12537=(gconst10*sj3);
IkReal x12538=(cj2*sj1);
IkReal x12539=(cj3*r01);
IkReal x12540=((1.0)*sj0);
IkReal x12541=(cj1*sj2);
IkReal x12542=(cj3*r21);
IkReal x12543=(cj3*gconst10);
IkReal x12544=((1.0)*cj0);
IkReal x12545=((1.0)*x12530);
IkReal x12546=((1.0)*x12529);
IkReal x12547=((1.0)*cj1*cj2);
IkReal x12548=(cj3*x12529);
IkReal x12549=(gconst10*x12529);
IkReal x12550=(gconst10*x12530);
evalcond[0]=((((-1.0)*r22*x12545))+((r21*x12549))+(((-1.0)*x12532*x12546)));
evalcond[1]=(cj0+((r11*x12549))+(((-1.0)*gconst11*r10*x12546))+(((-1.0)*r12*x12545)));
evalcond[2]=(((r01*x12549))+(((-1.0)*x12535*x12546))+(((-1.0)*r02*x12545))+(((-1.0)*x12540)));
evalcond[3]=(((x12542*x12550))+((r20*x12537))+((r21*x12533))+((r22*x12548))+(((-1.0)*cj3*x12532*x12545))+x12541+x12538);
evalcond[4]=(((r20*x12543))+(((-1.0)*r21*x12537*x12545))+((gconst11*x12542))+x12534+(((-1.0)*r22*sj3*x12546))+((sj3*x12530*x12532))+(((-1.0)*x12547)));
evalcond[5]=(((r00*x12537))+(((-1.0)*cj3*x12535*x12545))+((x12539*x12550))+(((-1.0)*cj1*cj2*x12544))+((r02*x12548))+((r01*x12533))+((cj0*x12534)));
evalcond[6]=(((x12536*x12550))+((r11*x12533))+((r12*x12548))+(((-1.0)*gconst11*x12531*x12545))+(((-1.0)*cj1*cj2*x12540))+((r10*x12537))+((sj0*x12534)));
evalcond[7]=((((-1.0)*x12538*x12544))+((r00*x12543))+(((-1.0)*x12541*x12544))+((r00*x12530*x12533))+(((-1.0)*r02*sj3*x12546))+(((-1.0)*r01*x12537*x12545))+((gconst11*x12539)));
evalcond[8]=((((-1.0)*x12538*x12540))+(((-1.0)*r11*x12537*x12545))+(((-1.0)*r12*sj3*x12546))+(((-1.0)*x12540*x12541))+((gconst10*x12531))+((r10*x12530*x12533))+((gconst11*x12536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12551=((1.0)*sj0);
IkReal x12552=((1.0)*gconst10);
CheckValue<IkReal> x12553 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12551))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12551))+(((-1.0)*cj0*r01*x12552))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12553.valid){
continue;
}
CheckValue<IkReal> x12554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12552))+(((-1.0)*gconst11*r21)))),-1);
if(!x12554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12553.value)+(((1.5707963267949)*(x12554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12555=IKsin(j4);
IkReal x12556=IKcos(j4);
IkReal x12557=(cj3*r10);
IkReal x12558=(gconst11*r20);
IkReal x12559=(gconst11*sj3);
IkReal x12560=(sj1*sj2);
IkReal x12561=(gconst11*r00);
IkReal x12562=(cj3*r11);
IkReal x12563=(gconst10*sj3);
IkReal x12564=(cj2*sj1);
IkReal x12565=(cj3*r01);
IkReal x12566=((1.0)*sj0);
IkReal x12567=(cj1*sj2);
IkReal x12568=(cj3*r21);
IkReal x12569=(cj3*gconst10);
IkReal x12570=((1.0)*cj0);
IkReal x12571=((1.0)*x12556);
IkReal x12572=((1.0)*x12555);
IkReal x12573=((1.0)*cj1*cj2);
IkReal x12574=(cj3*x12555);
IkReal x12575=(gconst10*x12555);
IkReal x12576=(gconst10*x12556);
evalcond[0]=(((r21*x12575))+(((-1.0)*x12558*x12572))+(((-1.0)*r22*x12571)));
evalcond[1]=((((-1.0)*gconst11*r10*x12572))+cj0+(((-1.0)*r12*x12571))+((r11*x12575)));
evalcond[2]=((((-1.0)*x12561*x12572))+(((-1.0)*r02*x12571))+((r01*x12575))+(((-1.0)*x12566)));
evalcond[3]=(((r22*x12574))+((r20*x12563))+((x12568*x12576))+(((-1.0)*cj3*x12558*x12571))+((r21*x12559))+x12567+x12564);
evalcond[4]=(((gconst11*x12568))+(((-1.0)*r21*x12563*x12571))+((r20*x12569))+(((-1.0)*x12573))+(((-1.0)*r22*sj3*x12572))+x12560+((sj3*x12556*x12558)));
evalcond[5]=((((-1.0)*cj3*x12561*x12571))+((r01*x12559))+((r02*x12574))+((x12565*x12576))+((r00*x12563))+(((-1.0)*cj1*cj2*x12570))+((cj0*x12560)));
evalcond[6]=(((sj0*x12560))+((r11*x12559))+(((-1.0)*gconst11*x12557*x12571))+((r12*x12574))+((r10*x12563))+(((-1.0)*cj1*cj2*x12566))+((x12562*x12576)));
evalcond[7]=(((gconst11*x12565))+(((-1.0)*x12564*x12570))+((r00*x12569))+(((-1.0)*x12567*x12570))+(((-1.0)*r01*x12563*x12571))+(((-1.0)*r02*sj3*x12572))+((r00*x12556*x12559)));
evalcond[8]=((((-1.0)*x12564*x12566))+((gconst11*x12562))+((gconst10*x12557))+(((-1.0)*r11*x12563*x12571))+(((-1.0)*x12566*x12567))+((r10*x12556*x12559))+(((-1.0)*r12*sj3*x12572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12577=((1.0)*gconst11);
CheckValue<IkReal> x12578 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12578.valid){
continue;
}
CheckValue<IkReal> x12579=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12577)))),-1);
if(!x12579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12578.value)+(((1.5707963267949)*(x12579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12580=IKsin(j4);
IkReal x12581=IKcos(j4);
IkReal x12582=(cj3*r10);
IkReal x12583=(gconst11*r20);
IkReal x12584=(gconst11*sj3);
IkReal x12585=(sj1*sj2);
IkReal x12586=(gconst11*r00);
IkReal x12587=(cj3*r11);
IkReal x12588=(gconst10*sj3);
IkReal x12589=(cj2*sj1);
IkReal x12590=(cj3*r01);
IkReal x12591=((1.0)*sj0);
IkReal x12592=(cj1*sj2);
IkReal x12593=(cj3*r21);
IkReal x12594=(cj3*gconst10);
IkReal x12595=((1.0)*cj0);
IkReal x12596=((1.0)*x12581);
IkReal x12597=((1.0)*x12580);
IkReal x12598=((1.0)*cj1*cj2);
IkReal x12599=(cj3*x12580);
IkReal x12600=(gconst10*x12580);
IkReal x12601=(gconst10*x12581);
evalcond[0]=((((-1.0)*r22*x12596))+((r21*x12600))+(((-1.0)*x12583*x12597)));
evalcond[1]=(cj0+((r11*x12600))+(((-1.0)*r12*x12596))+(((-1.0)*gconst11*r10*x12597)));
evalcond[2]=(((r01*x12600))+(((-1.0)*r02*x12596))+(((-1.0)*x12586*x12597))+(((-1.0)*x12591)));
evalcond[3]=(((r20*x12588))+(((-1.0)*cj3*x12583*x12596))+((r21*x12584))+((r22*x12599))+x12589+x12592+((x12593*x12601)));
evalcond[4]=(((gconst11*x12593))+(((-1.0)*r21*x12588*x12596))+(((-1.0)*r22*sj3*x12597))+((sj3*x12581*x12583))+(((-1.0)*x12598))+x12585+((r20*x12594)));
evalcond[5]=(((r00*x12588))+((r01*x12584))+((cj0*x12585))+((x12590*x12601))+(((-1.0)*cj3*x12586*x12596))+((r02*x12599))+(((-1.0)*cj1*cj2*x12595)));
evalcond[6]=(((r12*x12599))+((sj0*x12585))+(((-1.0)*gconst11*x12582*x12596))+(((-1.0)*cj1*cj2*x12591))+((x12587*x12601))+((r11*x12584))+((r10*x12588)));
evalcond[7]=(((r00*x12594))+((gconst11*x12590))+((r00*x12581*x12584))+(((-1.0)*r01*x12588*x12596))+(((-1.0)*x12589*x12595))+(((-1.0)*x12592*x12595))+(((-1.0)*r02*sj3*x12597)));
evalcond[8]=(((r10*x12581*x12584))+(((-1.0)*x12591*x12592))+((gconst11*x12587))+(((-1.0)*r11*x12588*x12596))+(((-1.0)*x12589*x12591))+((gconst10*x12582))+(((-1.0)*r12*sj3*x12597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12602=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12602;
j4eval[1]=IKsign(x12602);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12603=((1.0)*cj5);
IkReal x12604=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12603)));
j4eval[0]=x12604;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12603))))));
j4eval[2]=IKsign(x12604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12605=cj5*cj5;
IkReal x12606=(cj3*r21);
IkReal x12607=(cj5*sj5);
IkReal x12608=((1.0)*cj3);
IkReal x12609=((((-1.0)*r10*r20*x12605*x12608))+(((-1.0)*r12*r22*x12608))+((r11*x12605*x12606))+((r10*x12606*x12607))+((cj3*r11*r20*x12607))+(((-1.0)*r11*x12606)));
j4eval[0]=x12609;
j4eval[1]=IKsign(x12609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12610=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12610;
j4eval[1]=IKsign(x12610);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12611=((1.0)*cj5);
IkReal x12612=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12611)));
j4eval[0]=x12612;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12611))))));
j4eval[2]=IKsign(x12612);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12613=cj5*cj5;
IkReal x12614=r11*r11;
IkReal x12615=(r11*sj5);
IkReal x12616=(cj5*r10);
IkReal x12617=((r12*r12)+((x12613*(r10*r10)))+x12614+(((-2.0)*x12615*x12616))+(((-1.0)*x12613*x12614)));
j4eval[0]=x12617;
j4eval[1]=IKsign(x12617);
j4eval[2]=((IKabs(((((-1.0)*x12615))+x12616)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12618=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12618);
rxp1_1=(px*r21);
rxp1_2=(r11*x12618);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12619=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12619);
rxp1_1=(px*r21);
rxp1_2=(r11*x12619);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12620=((1.0)*sj1);
CheckValue<IkReal> x12621=IKPowWithIntegerCheck(r02,-1);
if(!x12621.valid){
continue;
}
CheckValue<IkReal> x12622=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12622.valid){
continue;
}
if( IKabs(((x12621.value)*(((((-1.0)*cj2*x12620))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12622.value)*((((cj1*cj2))+(((-1.0)*sj2*x12620)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12621.value)*(((((-1.0)*cj2*x12620))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12622.value)*((((cj1*cj2))+(((-1.0)*sj2*x12620))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12621.value)*(((((-1.0)*cj2*x12620))+(((-1.0)*cj1*sj2))))), ((x12622.value)*((((cj1*cj2))+(((-1.0)*sj2*x12620))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12623=IKsin(j4);
IkReal x12624=IKcos(j4);
IkReal x12625=(cj5*r20);
IkReal x12626=((1.0)*cj2);
IkReal x12627=(cj5*r10);
IkReal x12628=((1.0)*x12623);
IkReal x12629=(sj5*x12623);
IkReal x12630=((1.0)*sj5*x12624);
evalcond[0]=((-1.0)*r02*x12624);
evalcond[1]=((((-1.0)*x12625*x12628))+((r21*x12629)));
evalcond[2]=(((x12624*x12627))+(((-1.0)*r11*x12630)));
evalcond[3]=((1.0)+(((-1.0)*x12627*x12628))+((r11*x12629)));
evalcond[4]=((((-1.0)*r02*x12628))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12626)));
evalcond[5]=((((-1.0)*r21*x12630))+((sj1*sj2))+((x12624*x12625))+(((-1.0)*cj1*x12626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12631=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12631.valid){
continue;
}
CheckValue<IkReal> x12632=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12632.valid){
continue;
}
if( IKabs(((-1.0)*(x12631.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12632.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12631.value)))+IKsqr(((x12632.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12631.value)), ((x12632.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12633=IKsin(j4);
IkReal x12634=IKcos(j4);
IkReal x12635=(cj5*r20);
IkReal x12636=((1.0)*cj2);
IkReal x12637=(cj5*r10);
IkReal x12638=((1.0)*x12633);
IkReal x12639=(sj5*x12633);
IkReal x12640=((1.0)*sj5*x12634);
evalcond[0]=((-1.0)*r02*x12634);
evalcond[1]=(((r21*x12639))+(((-1.0)*x12635*x12638)));
evalcond[2]=((((-1.0)*r11*x12640))+((x12634*x12637)));
evalcond[3]=((1.0)+((r11*x12639))+(((-1.0)*x12637*x12638)));
evalcond[4]=((((-1.0)*sj1*x12636))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12638)));
evalcond[5]=((((-1.0)*r21*x12640))+((sj1*sj2))+(((-1.0)*cj1*x12636))+((x12634*x12635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12641=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12641);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12641);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12642=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12642);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12642);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12643=IKPowWithIntegerCheck(r22,-1);
if(!x12643.valid){
continue;
}
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12644.valid){
continue;
}
if( IKabs(((x12643.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12644.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12643.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12644.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12643.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12644.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12645=IKsin(j4);
IkReal x12646=IKcos(j4);
IkReal x12647=((1.0)*cj2);
IkReal x12648=(cj5*x12646);
IkReal x12649=(sj5*x12645);
IkReal x12650=((1.0)*sj5*x12646);
IkReal x12651=((1.0)*cj5*x12645);
evalcond[0]=((-1.0)*r22*x12646);
evalcond[1]=((((-1.0)*r00*x12651))+((r01*x12649)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12645))+(((-1.0)*cj1*x12647)));
evalcond[3]=((((-1.0)*r11*x12650))+((r10*x12648)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12651))+((r11*x12649)));
evalcond[5]=((((-1.0)*sj1*x12647))+(((-1.0)*cj1*sj2))+((r00*x12648))+(((-1.0)*r01*x12650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12652=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12652.valid){
continue;
}
CheckValue<IkReal> x12653=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12653.valid){
continue;
}
if( IKabs(((-1.0)*(x12652.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12653.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12652.value)))+IKsqr(((x12653.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12652.value)), ((x12653.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12654=IKsin(j4);
IkReal x12655=IKcos(j4);
IkReal x12656=((1.0)*cj2);
IkReal x12657=(cj5*x12655);
IkReal x12658=(sj5*x12654);
IkReal x12659=((1.0)*sj5*x12655);
IkReal x12660=((1.0)*cj5*x12654);
evalcond[0]=((-1.0)*r22*x12655);
evalcond[1]=((((-1.0)*r00*x12660))+((r01*x12658)));
evalcond[2]=((((-1.0)*r22*x12654))+(((-1.0)*cj1*x12656))+((sj1*sj2)));
evalcond[3]=(((r10*x12657))+(((-1.0)*r11*x12659)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12660))+((r11*x12658)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12659))+(((-1.0)*sj1*x12656))+((r00*x12657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12661=cj5*cj5;
IkReal x12662=r11*r11;
IkReal x12663=(cj5*r10);
IkReal x12664=(r11*sj5);
CheckValue<IkReal> x12665 = IKatan2WithCheck(IkReal(((((-1.0)*x12664))+x12663)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12665.valid){
continue;
}
CheckValue<IkReal> x12666=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12661*(r10*r10)))+(((-2.0)*x12663*x12664))+(((-1.0)*x12661*x12662))+x12662)),-1);
if(!x12666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12665.value)+(((1.5707963267949)*(x12666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12667=IKsin(j4);
IkReal x12668=IKcos(j4);
IkReal x12669=(cj5*r10);
IkReal x12670=(r01*sj5);
IkReal x12671=((1.0)*cj2);
IkReal x12672=(cj5*r00);
IkReal x12673=(cj5*r20);
IkReal x12674=((1.0)*x12668);
IkReal x12675=((1.0)*x12667);
IkReal x12676=(sj5*x12667);
evalcond[0]=(((r21*x12676))+(((-1.0)*r22*x12674))+(((-1.0)*x12673*x12675)));
evalcond[1]=((((-1.0)*r02*x12674))+(((-1.0)*x12672*x12675))+((x12667*x12670)));
evalcond[2]=(((x12668*x12669))+(((-1.0)*r12*x12675))+(((-1.0)*r11*sj5*x12674)));
evalcond[3]=((1.0)+(((-1.0)*x12669*x12675))+(((-1.0)*r12*x12674))+((r11*x12676)));
evalcond[4]=((((-1.0)*cj1*x12671))+(((-1.0)*r22*x12675))+((x12668*x12673))+((sj1*sj2))+(((-1.0)*r21*sj5*x12674)));
evalcond[5]=(((x12668*x12672))+(((-1.0)*cj1*sj2))+(((-1.0)*x12670*x12674))+(((-1.0)*r02*x12675))+(((-1.0)*sj1*x12671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12677=((1.0)*cj5);
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12677)))),-1);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12678.value)))+(x12679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12680=IKsin(j4);
IkReal x12681=IKcos(j4);
IkReal x12682=(cj5*r10);
IkReal x12683=(r01*sj5);
IkReal x12684=((1.0)*cj2);
IkReal x12685=(cj5*r00);
IkReal x12686=(cj5*r20);
IkReal x12687=((1.0)*x12681);
IkReal x12688=((1.0)*x12680);
IkReal x12689=(sj5*x12680);
evalcond[0]=(((r21*x12689))+(((-1.0)*x12686*x12688))+(((-1.0)*r22*x12687)));
evalcond[1]=((((-1.0)*r02*x12687))+(((-1.0)*x12685*x12688))+((x12680*x12683)));
evalcond[2]=((((-1.0)*r12*x12688))+((x12681*x12682))+(((-1.0)*r11*sj5*x12687)));
evalcond[3]=((1.0)+((r11*x12689))+(((-1.0)*r12*x12687))+(((-1.0)*x12682*x12688)));
evalcond[4]=((((-1.0)*r21*sj5*x12687))+(((-1.0)*cj1*x12684))+((sj1*sj2))+((x12681*x12686))+(((-1.0)*r22*x12688)));
evalcond[5]=((((-1.0)*sj1*x12684))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12688))+((x12681*x12685))+(((-1.0)*x12683*x12687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12690.valid){
continue;
}
CheckValue<IkReal> x12691 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12690.value)))+(x12691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12692=IKsin(j4);
IkReal x12693=IKcos(j4);
IkReal x12694=(cj5*r10);
IkReal x12695=(r01*sj5);
IkReal x12696=((1.0)*cj2);
IkReal x12697=(cj5*r00);
IkReal x12698=(cj5*r20);
IkReal x12699=((1.0)*x12693);
IkReal x12700=((1.0)*x12692);
IkReal x12701=(sj5*x12692);
evalcond[0]=((((-1.0)*r22*x12699))+((r21*x12701))+(((-1.0)*x12698*x12700)));
evalcond[1]=((((-1.0)*r02*x12699))+(((-1.0)*x12697*x12700))+((x12692*x12695)));
evalcond[2]=((((-1.0)*r11*sj5*x12699))+((x12693*x12694))+(((-1.0)*r12*x12700)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12699))+((r11*x12701))+(((-1.0)*x12694*x12700)));
evalcond[4]=((((-1.0)*cj1*x12696))+((x12693*x12698))+((sj1*sj2))+(((-1.0)*r22*x12700))+(((-1.0)*r21*sj5*x12699)));
evalcond[5]=(((x12693*x12697))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12696))+(((-1.0)*x12695*x12699))+(((-1.0)*r02*x12700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12702=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12702;
j4eval[1]=IKsign(x12702);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12703=((1.0)*cj5);
IkReal x12704=((((-1.0)*r01*x12703))+(((-1.0)*r00*sj5)));
j4eval[0]=x12704;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12703)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12705=(sj1*sj2);
IkReal x12706=(cj5*r10);
IkReal x12707=(r11*sj5);
IkReal x12708=(cj1*cj2);
IkReal x12709=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12709;
j4eval[1]=((IKabs(((((-1.0)*x12705*x12706))+((x12706*x12708))+((x12705*x12707))+(((-1.0)*x12707*x12708)))))+(IKabs((((r12*x12708))+(((-1.0)*r12*x12705))))));
j4eval[2]=IKsign(x12709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12710=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12710);
rxp1_1=(px*r21);
rxp1_2=(r11*x12710);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12711=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12711);
rxp1_1=(px*r21);
rxp1_2=(r11*x12711);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12712=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12712))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12712)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12713=((1.0)*cj5);
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(((((-1.0)*r10*x12713))+((r11*sj5))),-1);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12713))),-1);
if(!x12715.valid){
continue;
}
if( IKabs(((-1.0)*(x12714.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12715.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12714.value)))+IKsqr(((x12715.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12714.value)), ((x12715.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12716=IKsin(j4);
IkReal x12717=IKcos(j4);
IkReal x12718=((1.0)*cj2);
IkReal x12719=(r21*sj5);
IkReal x12720=(r11*sj5);
IkReal x12721=((1.0)*cj5*x12716);
IkReal x12722=((1.0)*cj5*x12717);
evalcond[0]=((-1.0)*r02*x12717);
evalcond[1]=((((-1.0)*r20*x12721))+((x12716*x12719)));
evalcond[2]=(((r02*x12716))+(((-1.0)*sj1*x12718))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12722))+((x12717*x12720)));
evalcond[4]=((1.0)+((x12716*x12720))+(((-1.0)*r10*x12721)));
evalcond[5]=(((sj1*sj2))+((x12717*x12719))+(((-1.0)*r20*x12722))+(((-1.0)*cj1*x12718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12723=IKPowWithIntegerCheck(r02,-1);
if(!x12723.valid){
continue;
}
CheckValue<IkReal> x12724=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12724.valid){
continue;
}
if( IKabs(((x12723.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12724.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12723.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12724.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12723.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12724.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12725=IKsin(j4);
IkReal x12726=IKcos(j4);
IkReal x12727=((1.0)*cj2);
IkReal x12728=(r21*sj5);
IkReal x12729=(r11*sj5);
IkReal x12730=((1.0)*cj5*x12725);
IkReal x12731=((1.0)*cj5*x12726);
evalcond[0]=((-1.0)*r02*x12726);
evalcond[1]=(((x12725*x12728))+(((-1.0)*r20*x12730)));
evalcond[2]=(((r02*x12725))+(((-1.0)*sj1*x12727))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12731))+((x12726*x12729)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12730))+((x12725*x12729)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12731))+(((-1.0)*cj1*x12727))+((x12726*x12728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12732=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12732;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12732);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12733=((1.0)*cj5);
IkReal x12734=((((-1.0)*r21*x12733))+(((-1.0)*r20*sj5)));
j4eval[0]=x12734;
j4eval[1]=((IKabs(((((-1.0)*r10*x12733))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12734);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12735=cj5*cj5;
IkReal x12736=(r11*r21);
IkReal x12737=((1.0)*r20);
IkReal x12738=(cj5*sj5);
IkReal x12739=((((-1.0)*x12736))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12735*x12737))+((r11*r20*x12738))+((x12735*x12736))+((r10*r21*x12738)));
j4eval[0]=x12739;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12737))))));
j4eval[2]=IKsign(x12739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12740=cj5*cj5;
IkReal x12741=(r21*sj5);
IkReal x12742=(r11*r21);
IkReal x12743=((1.0)*r20);
CheckValue<IkReal> x12744 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12743))+x12741)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12744.valid){
continue;
}
CheckValue<IkReal> x12745=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12742))+(((-1.0)*r12*r22))+((cj5*r10*x12741))+(((-1.0)*r10*x12740*x12743))+((cj5*r11*r20*sj5))+((x12740*x12742)))),-1);
if(!x12745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12744.value)+(((1.5707963267949)*(x12745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12746=IKcos(j4);
IkReal x12747=IKsin(j4);
IkReal x12748=(cj5*r00);
IkReal x12749=(cj5*r20);
IkReal x12750=(cj5*r10);
IkReal x12751=((1.0)*x12746);
IkReal x12752=((1.0)*x12747);
IkReal x12753=(sj5*x12746);
IkReal x12754=(sj5*x12747);
evalcond[0]=(((r22*x12747))+(((-1.0)*x12749*x12751))+((r21*x12753)));
evalcond[1]=(((r11*x12753))+(((-1.0)*x12750*x12751))+((r12*x12747)));
evalcond[2]=((((-1.0)*r22*x12751))+(((-1.0)*x12749*x12752))+((r21*x12754)));
evalcond[3]=((((-1.0)*r02*x12751))+(((-1.0)*x12748*x12752))+((r01*x12754)));
evalcond[4]=((-1.0)+((r02*x12747))+(((-1.0)*x12748*x12751))+((r01*x12753)));
evalcond[5]=((1.0)+((r11*x12754))+(((-1.0)*r12*x12751))+(((-1.0)*x12750*x12752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12755=((1.0)*cj5);
CheckValue<IkReal> x12756 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12755)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12756.valid){
continue;
}
CheckValue<IkReal> x12757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12755))+(((-1.0)*r20*sj5)))),-1);
if(!x12757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12756.value)+(((1.5707963267949)*(x12757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12758=IKcos(j4);
IkReal x12759=IKsin(j4);
IkReal x12760=(cj5*r00);
IkReal x12761=(cj5*r20);
IkReal x12762=(cj5*r10);
IkReal x12763=((1.0)*x12758);
IkReal x12764=((1.0)*x12759);
IkReal x12765=(sj5*x12758);
IkReal x12766=(sj5*x12759);
evalcond[0]=(((r21*x12765))+((r22*x12759))+(((-1.0)*x12761*x12763)));
evalcond[1]=((((-1.0)*x12762*x12763))+((r11*x12765))+((r12*x12759)));
evalcond[2]=(((r21*x12766))+(((-1.0)*r22*x12763))+(((-1.0)*x12761*x12764)));
evalcond[3]=((((-1.0)*r02*x12763))+((r01*x12766))+(((-1.0)*x12760*x12764)));
evalcond[4]=((-1.0)+((r02*x12759))+((r01*x12765))+(((-1.0)*x12760*x12763)));
evalcond[5]=((1.0)+(((-1.0)*x12762*x12764))+(((-1.0)*r12*x12763))+((r11*x12766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12767 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12767.valid){
continue;
}
CheckValue<IkReal> x12768=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12767.value)+(((1.5707963267949)*(x12768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12769=IKcos(j4);
IkReal x12770=IKsin(j4);
IkReal x12771=(cj5*r00);
IkReal x12772=(cj5*r20);
IkReal x12773=(cj5*r10);
IkReal x12774=((1.0)*x12769);
IkReal x12775=((1.0)*x12770);
IkReal x12776=(sj5*x12769);
IkReal x12777=(sj5*x12770);
evalcond[0]=((((-1.0)*x12772*x12774))+((r21*x12776))+((r22*x12770)));
evalcond[1]=((((-1.0)*x12773*x12774))+((r12*x12770))+((r11*x12776)));
evalcond[2]=((((-1.0)*r22*x12774))+(((-1.0)*x12772*x12775))+((r21*x12777)));
evalcond[3]=(((r01*x12777))+(((-1.0)*x12771*x12775))+(((-1.0)*r02*x12774)));
evalcond[4]=((-1.0)+((r01*x12776))+(((-1.0)*x12771*x12774))+((r02*x12770)));
evalcond[5]=((1.0)+(((-1.0)*x12773*x12775))+(((-1.0)*r12*x12774))+((r11*x12777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12778=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12778;
j4eval[1]=IKsign(x12778);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12779=((1.0)*cj5);
IkReal x12780=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12779)));
j4eval[0]=x12780;
j4eval[1]=((IKabs(((((-1.0)*r20*x12779))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12781=cj5*cj5;
IkReal x12782=(r11*r21);
IkReal x12783=((1.0)*r20);
IkReal x12784=(cj5*sj5);
IkReal x12785=((((-1.0)*r10*x12781*x12783))+((r10*r21*x12784))+(((-1.0)*r12*r22))+((x12781*x12782))+(((-1.0)*x12782))+((r11*r20*x12784)));
j4eval[0]=x12785;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12783))))));
j4eval[2]=IKsign(x12785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12786=cj5*cj5;
IkReal x12787=(r21*sj5);
IkReal x12788=(r11*r21);
IkReal x12789=((1.0)*r20);
CheckValue<IkReal> x12790 = IKatan2WithCheck(IkReal((x12787+(((-1.0)*cj5*x12789)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12790.valid){
continue;
}
CheckValue<IkReal> x12791=IKPowWithIntegerCheck(IKsign((((x12786*x12788))+((cj5*r10*x12787))+(((-1.0)*r12*r22))+(((-1.0)*x12788))+(((-1.0)*r10*x12786*x12789))+((cj5*r11*r20*sj5)))),-1);
if(!x12791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12790.value)+(((1.5707963267949)*(x12791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12792=IKcos(j4);
IkReal x12793=IKsin(j4);
IkReal x12794=(cj5*r00);
IkReal x12795=(cj5*r20);
IkReal x12796=(cj5*r10);
IkReal x12797=((1.0)*x12792);
IkReal x12798=((1.0)*x12793);
IkReal x12799=(sj5*x12792);
IkReal x12800=(sj5*x12793);
evalcond[0]=(((r21*x12799))+((r22*x12793))+(((-1.0)*x12795*x12797)));
evalcond[1]=(((r11*x12799))+((r12*x12793))+(((-1.0)*x12796*x12797)));
evalcond[2]=((((-1.0)*r22*x12797))+((r21*x12800))+(((-1.0)*x12795*x12798)));
evalcond[3]=((((-1.0)*x12794*x12798))+((r01*x12800))+(((-1.0)*r02*x12797)));
evalcond[4]=((1.0)+(((-1.0)*x12794*x12797))+((r02*x12793))+((r01*x12799)));
evalcond[5]=((1.0)+((r11*x12800))+(((-1.0)*r12*x12797))+(((-1.0)*x12796*x12798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12801=((1.0)*cj5);
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12801)))),-1);
if(!x12802.valid){
continue;
}
CheckValue<IkReal> x12803 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12801)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12802.value)))+(x12803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12804=IKcos(j4);
IkReal x12805=IKsin(j4);
IkReal x12806=(cj5*r00);
IkReal x12807=(cj5*r20);
IkReal x12808=(cj5*r10);
IkReal x12809=((1.0)*x12804);
IkReal x12810=((1.0)*x12805);
IkReal x12811=(sj5*x12804);
IkReal x12812=(sj5*x12805);
evalcond[0]=(((r21*x12811))+(((-1.0)*x12807*x12809))+((r22*x12805)));
evalcond[1]=(((r12*x12805))+((r11*x12811))+(((-1.0)*x12808*x12809)));
evalcond[2]=(((r21*x12812))+(((-1.0)*r22*x12809))+(((-1.0)*x12807*x12810)));
evalcond[3]=(((r01*x12812))+(((-1.0)*r02*x12809))+(((-1.0)*x12806*x12810)));
evalcond[4]=((1.0)+((r02*x12805))+((r01*x12811))+(((-1.0)*x12806*x12809)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12809))+((r11*x12812))+(((-1.0)*x12808*x12810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12813=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12813.valid){
continue;
}
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12813.value)))+(x12814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12815=IKcos(j4);
IkReal x12816=IKsin(j4);
IkReal x12817=(cj5*r00);
IkReal x12818=(cj5*r20);
IkReal x12819=(cj5*r10);
IkReal x12820=((1.0)*x12815);
IkReal x12821=((1.0)*x12816);
IkReal x12822=(sj5*x12815);
IkReal x12823=(sj5*x12816);
evalcond[0]=(((r21*x12822))+(((-1.0)*x12818*x12820))+((r22*x12816)));
evalcond[1]=(((r12*x12816))+((r11*x12822))+(((-1.0)*x12819*x12820)));
evalcond[2]=((((-1.0)*r22*x12820))+((r21*x12823))+(((-1.0)*x12818*x12821)));
evalcond[3]=((((-1.0)*r02*x12820))+((r01*x12823))+(((-1.0)*x12817*x12821)));
evalcond[4]=((1.0)+((r01*x12822))+((r02*x12816))+(((-1.0)*x12817*x12820)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12820))+((r11*x12823))+(((-1.0)*x12819*x12821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12824=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12824;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12824);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12825=((1.0)*cj5);
IkReal x12826=((((-1.0)*r21*x12825))+(((-1.0)*r20*sj5)));
j4eval[0]=x12826;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12825))+((r11*sj5))))));
j4eval[2]=IKsign(x12826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12827=cj5*cj5;
IkReal x12828=(r11*r21);
IkReal x12829=((1.0)*r20);
IkReal x12830=(cj5*sj5);
IkReal x12831=((((-1.0)*r12*r22))+(((-1.0)*x12828))+((r10*r21*x12830))+((r11*r20*x12830))+((x12827*x12828))+(((-1.0)*r10*x12827*x12829)));
j4eval[0]=x12831;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12829))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12832=cj5*cj5;
IkReal x12833=(r21*sj5);
IkReal x12834=(r11*r21);
IkReal x12835=((1.0)*r20);
CheckValue<IkReal> x12836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12833))+(((-1.0)*r10*x12832*x12835))+((x12832*x12834))+(((-1.0)*x12834))+((cj5*r11*r20*sj5)))),-1);
if(!x12836.valid){
continue;
}
CheckValue<IkReal> x12837 = IKatan2WithCheck(IkReal((x12833+(((-1.0)*cj5*x12835)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12836.value)))+(x12837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12838=IKcos(j4);
IkReal x12839=IKsin(j4);
IkReal x12840=(cj5*r00);
IkReal x12841=(cj5*r20);
IkReal x12842=(cj5*r10);
IkReal x12843=((1.0)*x12838);
IkReal x12844=((1.0)*x12839);
IkReal x12845=(sj5*x12838);
IkReal x12846=(sj5*x12839);
evalcond[0]=(((r22*x12839))+(((-1.0)*x12841*x12843))+((r21*x12845)));
evalcond[1]=(((r12*x12839))+((r11*x12845))+(((-1.0)*x12842*x12843)));
evalcond[2]=((((-1.0)*r22*x12843))+(((-1.0)*x12841*x12844))+((r21*x12846)));
evalcond[3]=((((-1.0)*r02*x12843))+((r01*x12846))+(((-1.0)*x12840*x12844)));
evalcond[4]=((-1.0)+((r01*x12845))+(((-1.0)*x12840*x12843))+((r02*x12839)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12843))+((r11*x12846))+(((-1.0)*x12842*x12844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12847=((1.0)*cj5);
CheckValue<IkReal> x12848 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12847)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12848.valid){
continue;
}
CheckValue<IkReal> x12849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12847))+(((-1.0)*r20*sj5)))),-1);
if(!x12849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12848.value)+(((1.5707963267949)*(x12849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12850=IKcos(j4);
IkReal x12851=IKsin(j4);
IkReal x12852=(cj5*r00);
IkReal x12853=(cj5*r20);
IkReal x12854=(cj5*r10);
IkReal x12855=((1.0)*x12850);
IkReal x12856=((1.0)*x12851);
IkReal x12857=(sj5*x12850);
IkReal x12858=(sj5*x12851);
evalcond[0]=((((-1.0)*x12853*x12855))+((r22*x12851))+((r21*x12857)));
evalcond[1]=((((-1.0)*x12854*x12855))+((r11*x12857))+((r12*x12851)));
evalcond[2]=((((-1.0)*r22*x12855))+(((-1.0)*x12853*x12856))+((r21*x12858)));
evalcond[3]=((((-1.0)*r02*x12855))+(((-1.0)*x12852*x12856))+((r01*x12858)));
evalcond[4]=((-1.0)+(((-1.0)*x12852*x12855))+((r01*x12857))+((r02*x12851)));
evalcond[5]=((1.0)+(((-1.0)*x12854*x12856))+(((-1.0)*r12*x12855))+((r11*x12858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12859 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12859.value)+(((1.5707963267949)*(x12860.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12861=IKcos(j4);
IkReal x12862=IKsin(j4);
IkReal x12863=(cj5*r00);
IkReal x12864=(cj5*r20);
IkReal x12865=(cj5*r10);
IkReal x12866=((1.0)*x12861);
IkReal x12867=((1.0)*x12862);
IkReal x12868=(sj5*x12861);
IkReal x12869=(sj5*x12862);
evalcond[0]=(((r21*x12868))+(((-1.0)*x12864*x12866))+((r22*x12862)));
evalcond[1]=(((r11*x12868))+((r12*x12862))+(((-1.0)*x12865*x12866)));
evalcond[2]=(((r21*x12869))+(((-1.0)*r22*x12866))+(((-1.0)*x12864*x12867)));
evalcond[3]=((((-1.0)*x12863*x12867))+(((-1.0)*r02*x12866))+((r01*x12869)));
evalcond[4]=((-1.0)+(((-1.0)*x12863*x12866))+((r01*x12868))+((r02*x12862)));
evalcond[5]=((1.0)+((r11*x12869))+(((-1.0)*x12865*x12867))+(((-1.0)*r12*x12866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12870=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12870;
j4eval[1]=IKsign(x12870);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12871=((1.0)*cj5);
IkReal x12872=((((-1.0)*r11*x12871))+(((-1.0)*r10*sj5)));
j4eval[0]=x12872;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12871)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12873=cj5*cj5;
IkReal x12874=(r11*r21);
IkReal x12875=((1.0)*r20);
IkReal x12876=(cj5*sj5);
IkReal x12877=(((r11*r20*x12876))+(((-1.0)*r12*r22))+(((-1.0)*x12874))+((r10*r21*x12876))+(((-1.0)*r10*x12873*x12875))+((x12873*x12874)));
j4eval[0]=x12877;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12875)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12877);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12878=cj5*cj5;
IkReal x12879=(r21*sj5);
IkReal x12880=(r11*r21);
IkReal x12881=((1.0)*r20);
CheckValue<IkReal> x12882 = IKatan2WithCheck(IkReal((x12879+(((-1.0)*cj5*x12881)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12882.valid){
continue;
}
CheckValue<IkReal> x12883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12878*x12881))+(((-1.0)*x12880))+(((-1.0)*r12*r22))+((x12878*x12880))+((cj5*r10*x12879))+((cj5*r11*r20*sj5)))),-1);
if(!x12883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12882.value)+(((1.5707963267949)*(x12883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12884=IKcos(j4);
IkReal x12885=IKsin(j4);
IkReal x12886=(cj5*r00);
IkReal x12887=(cj5*r20);
IkReal x12888=(cj5*r10);
IkReal x12889=((1.0)*x12884);
IkReal x12890=((1.0)*x12885);
IkReal x12891=(sj5*x12884);
IkReal x12892=(sj5*x12885);
evalcond[0]=(((r21*x12891))+(((-1.0)*x12887*x12889))+((r22*x12885)));
evalcond[1]=(((r12*x12885))+(((-1.0)*x12888*x12889))+((r11*x12891)));
evalcond[2]=((((-1.0)*r22*x12889))+((r21*x12892))+(((-1.0)*x12887*x12890)));
evalcond[3]=(((r01*x12892))+(((-1.0)*r02*x12889))+(((-1.0)*x12886*x12890)));
evalcond[4]=((1.0)+(((-1.0)*x12886*x12889))+((r01*x12891))+((r02*x12885)));
evalcond[5]=((1.0)+(((-1.0)*x12888*x12890))+(((-1.0)*r12*x12889))+((r11*x12892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12893=((1.0)*cj5);
CheckValue<IkReal> x12894 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12893))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12894.valid){
continue;
}
CheckValue<IkReal> x12895=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12893)))),-1);
if(!x12895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12894.value)+(((1.5707963267949)*(x12895.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12896=IKcos(j4);
IkReal x12897=IKsin(j4);
IkReal x12898=(cj5*r00);
IkReal x12899=(cj5*r20);
IkReal x12900=(cj5*r10);
IkReal x12901=((1.0)*x12896);
IkReal x12902=((1.0)*x12897);
IkReal x12903=(sj5*x12896);
IkReal x12904=(sj5*x12897);
evalcond[0]=(((r22*x12897))+(((-1.0)*x12899*x12901))+((r21*x12903)));
evalcond[1]=(((r12*x12897))+(((-1.0)*x12900*x12901))+((r11*x12903)));
evalcond[2]=((((-1.0)*x12899*x12902))+((r21*x12904))+(((-1.0)*r22*x12901)));
evalcond[3]=(((r01*x12904))+(((-1.0)*x12898*x12902))+(((-1.0)*r02*x12901)));
evalcond[4]=((1.0)+((r01*x12903))+(((-1.0)*x12898*x12901))+((r02*x12897)));
evalcond[5]=((1.0)+(((-1.0)*x12900*x12902))+(((-1.0)*r12*x12901))+((r11*x12904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12905=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12905.valid){
continue;
}
CheckValue<IkReal> x12906 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12905.value)))+(x12906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12907=IKcos(j4);
IkReal x12908=IKsin(j4);
IkReal x12909=(cj5*r00);
IkReal x12910=(cj5*r20);
IkReal x12911=(cj5*r10);
IkReal x12912=((1.0)*x12907);
IkReal x12913=((1.0)*x12908);
IkReal x12914=(sj5*x12907);
IkReal x12915=(sj5*x12908);
evalcond[0]=((((-1.0)*x12910*x12912))+((r21*x12914))+((r22*x12908)));
evalcond[1]=((((-1.0)*x12911*x12912))+((r12*x12908))+((r11*x12914)));
evalcond[2]=((((-1.0)*x12910*x12913))+((r21*x12915))+(((-1.0)*r22*x12912)));
evalcond[3]=((((-1.0)*x12909*x12913))+(((-1.0)*r02*x12912))+((r01*x12915)));
evalcond[4]=((1.0)+(((-1.0)*x12909*x12912))+((r02*x12908))+((r01*x12914)));
evalcond[5]=((1.0)+(((-1.0)*x12911*x12913))+(((-1.0)*r12*x12912))+((r11*x12915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12916=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12916;
j4eval[1]=IKsign(x12916);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12917=((1.0)*cj5);
IkReal x12918=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12917)));
j4eval[0]=x12918;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12917))))));
j4eval[2]=IKsign(x12918);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12919=cj5*cj5;
IkReal x12920=(r11*r21);
IkReal x12921=((1.0)*r20);
IkReal x12922=(cj5*sj5);
IkReal x12923=((((-1.0)*r12*r22))+((x12919*x12920))+(((-1.0)*x12920))+((r11*r20*x12922))+(((-1.0)*r10*x12919*x12921))+((r10*r21*x12922)));
j4eval[0]=x12923;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12921)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12923);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12924=cj5*cj5;
IkReal x12925=(r21*sj5);
IkReal x12926=(r11*r21);
IkReal x12927=((1.0)*r20);
CheckValue<IkReal> x12928=IKPowWithIntegerCheck(IKsign((((cj5*r10*x12925))+(((-1.0)*r12*r22))+(((-1.0)*x12926))+((x12924*x12926))+(((-1.0)*r10*x12924*x12927))+((cj5*r11*r20*sj5)))),-1);
if(!x12928.valid){
continue;
}
CheckValue<IkReal> x12929 = IKatan2WithCheck(IkReal((x12925+(((-1.0)*cj5*x12927)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12928.value)))+(x12929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12930=IKcos(j4);
IkReal x12931=IKsin(j4);
IkReal x12932=(cj5*r00);
IkReal x12933=(cj5*r20);
IkReal x12934=(cj5*r10);
IkReal x12935=((1.0)*x12930);
IkReal x12936=((1.0)*x12931);
IkReal x12937=(sj5*x12930);
IkReal x12938=(sj5*x12931);
evalcond[0]=((((-1.0)*x12933*x12935))+((r22*x12931))+((r21*x12937)));
evalcond[1]=(((r11*x12937))+((r12*x12931))+(((-1.0)*x12934*x12935)));
evalcond[2]=((((-1.0)*x12933*x12936))+(((-1.0)*r22*x12935))+((r21*x12938)));
evalcond[3]=((((-1.0)*r02*x12935))+(((-1.0)*x12932*x12936))+((r01*x12938)));
evalcond[4]=((1.0)+((r02*x12931))+(((-1.0)*x12932*x12935))+((r01*x12937)));
evalcond[5]=((1.0)+((r11*x12938))+(((-1.0)*r12*x12935))+(((-1.0)*x12934*x12936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12939=((1.0)*cj5);
CheckValue<IkReal> x12940=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12939)))),-1);
if(!x12940.valid){
continue;
}
CheckValue<IkReal> x12941 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12939))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12940.value)))+(x12941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12942=IKcos(j4);
IkReal x12943=IKsin(j4);
IkReal x12944=(cj5*r00);
IkReal x12945=(cj5*r20);
IkReal x12946=(cj5*r10);
IkReal x12947=((1.0)*x12942);
IkReal x12948=((1.0)*x12943);
IkReal x12949=(sj5*x12942);
IkReal x12950=(sj5*x12943);
evalcond[0]=(((r22*x12943))+((r21*x12949))+(((-1.0)*x12945*x12947)));
evalcond[1]=((((-1.0)*x12946*x12947))+((r12*x12943))+((r11*x12949)));
evalcond[2]=(((r21*x12950))+(((-1.0)*x12945*x12948))+(((-1.0)*r22*x12947)));
evalcond[3]=(((r01*x12950))+(((-1.0)*x12944*x12948))+(((-1.0)*r02*x12947)));
evalcond[4]=((1.0)+((r01*x12949))+(((-1.0)*x12944*x12947))+((r02*x12943)));
evalcond[5]=((1.0)+(((-1.0)*x12946*x12948))+((r11*x12950))+(((-1.0)*r12*x12947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12951=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12951.valid){
continue;
}
CheckValue<IkReal> x12952 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12951.value)))+(x12952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12953=IKcos(j4);
IkReal x12954=IKsin(j4);
IkReal x12955=(cj5*r00);
IkReal x12956=(cj5*r20);
IkReal x12957=(cj5*r10);
IkReal x12958=((1.0)*x12953);
IkReal x12959=((1.0)*x12954);
IkReal x12960=(sj5*x12953);
IkReal x12961=(sj5*x12954);
evalcond[0]=(((r22*x12954))+(((-1.0)*x12956*x12958))+((r21*x12960)));
evalcond[1]=((((-1.0)*x12957*x12958))+((r12*x12954))+((r11*x12960)));
evalcond[2]=((((-1.0)*x12956*x12959))+(((-1.0)*r22*x12958))+((r21*x12961)));
evalcond[3]=((((-1.0)*x12955*x12959))+((r01*x12961))+(((-1.0)*r02*x12958)));
evalcond[4]=((1.0)+(((-1.0)*x12955*x12958))+((r01*x12960))+((r02*x12954)));
evalcond[5]=((1.0)+(((-1.0)*x12957*x12959))+(((-1.0)*r12*x12958))+((r11*x12961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12962=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12962;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12963=((1.0)*cj5);
IkReal x12964=((((-1.0)*r21*x12963))+(((-1.0)*r20*sj5)));
j4eval[0]=x12964;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12963))))));
j4eval[2]=IKsign(x12964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12965=cj5*cj5;
IkReal x12966=(r11*r21);
IkReal x12967=((1.0)*r20);
IkReal x12968=(cj5*sj5);
IkReal x12969=(((r11*r20*x12968))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12965*x12967))+(((-1.0)*x12966))+((r10*r21*x12968))+((x12965*x12966)));
j4eval[0]=x12969;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12967))+((r21*sj5))))));
j4eval[2]=IKsign(x12969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12970=cj5*cj5;
IkReal x12971=(r21*sj5);
IkReal x12972=(r11*r21);
IkReal x12973=((1.0)*r20);
CheckValue<IkReal> x12974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12972))+((x12970*x12972))+((cj5*r10*x12971))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12970*x12973)))),-1);
if(!x12974.valid){
continue;
}
CheckValue<IkReal> x12975 = IKatan2WithCheck(IkReal((x12971+(((-1.0)*cj5*x12973)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12974.value)))+(x12975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12976=IKcos(j4);
IkReal x12977=IKsin(j4);
IkReal x12978=(cj5*r00);
IkReal x12979=(cj5*r20);
IkReal x12980=(cj5*r10);
IkReal x12981=((1.0)*x12976);
IkReal x12982=((1.0)*x12977);
IkReal x12983=(sj5*x12976);
IkReal x12984=(sj5*x12977);
evalcond[0]=(((r21*x12983))+(((-1.0)*x12979*x12981))+((r22*x12977)));
evalcond[1]=((((-1.0)*x12980*x12981))+((r11*x12983))+((r12*x12977)));
evalcond[2]=((((-1.0)*r22*x12981))+((r21*x12984))+(((-1.0)*x12979*x12982)));
evalcond[3]=(((r01*x12984))+(((-1.0)*r02*x12981))+(((-1.0)*x12978*x12982)));
evalcond[4]=((-1.0)+((r02*x12977))+((r01*x12983))+(((-1.0)*x12978*x12981)));
evalcond[5]=((1.0)+(((-1.0)*x12980*x12982))+((r11*x12984))+(((-1.0)*r12*x12981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12985=((1.0)*cj5);
CheckValue<IkReal> x12986=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12985))+(((-1.0)*r20*sj5)))),-1);
if(!x12986.valid){
continue;
}
CheckValue<IkReal> x12987 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12985))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12986.value)))+(x12987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12988=IKcos(j4);
IkReal x12989=IKsin(j4);
IkReal x12990=(cj5*r00);
IkReal x12991=(cj5*r20);
IkReal x12992=(cj5*r10);
IkReal x12993=((1.0)*x12988);
IkReal x12994=((1.0)*x12989);
IkReal x12995=(sj5*x12988);
IkReal x12996=(sj5*x12989);
evalcond[0]=(((r22*x12989))+((r21*x12995))+(((-1.0)*x12991*x12993)));
evalcond[1]=((((-1.0)*x12992*x12993))+((r11*x12995))+((r12*x12989)));
evalcond[2]=((((-1.0)*r22*x12993))+((r21*x12996))+(((-1.0)*x12991*x12994)));
evalcond[3]=(((r01*x12996))+(((-1.0)*r02*x12993))+(((-1.0)*x12990*x12994)));
evalcond[4]=((-1.0)+((r01*x12995))+(((-1.0)*x12990*x12993))+((r02*x12989)));
evalcond[5]=((1.0)+(((-1.0)*x12992*x12994))+((r11*x12996))+(((-1.0)*r12*x12993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12997 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12997.valid){
continue;
}
CheckValue<IkReal> x12998=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12997.value)+(((1.5707963267949)*(x12998.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12999=IKcos(j4);
IkReal x13000=IKsin(j4);
IkReal x13001=(cj5*r00);
IkReal x13002=(cj5*r20);
IkReal x13003=(cj5*r10);
IkReal x13004=((1.0)*x12999);
IkReal x13005=((1.0)*x13000);
IkReal x13006=(sj5*x12999);
IkReal x13007=(sj5*x13000);
evalcond[0]=((((-1.0)*x13002*x13004))+((r22*x13000))+((r21*x13006)));
evalcond[1]=((((-1.0)*x13003*x13004))+((r12*x13000))+((r11*x13006)));
evalcond[2]=((((-1.0)*x13002*x13005))+(((-1.0)*r22*x13004))+((r21*x13007)));
evalcond[3]=((((-1.0)*x13001*x13005))+(((-1.0)*r02*x13004))+((r01*x13007)));
evalcond[4]=((-1.0)+(((-1.0)*x13001*x13004))+((r02*x13000))+((r01*x13006)));
evalcond[5]=((1.0)+(((-1.0)*x13003*x13005))+(((-1.0)*r12*x13004))+((r11*x13007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13008=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13008;
j4eval[1]=IKsign(x13008);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13009=((1.0)*cj5);
IkReal x13010=((((-1.0)*r11*x13009))+(((-1.0)*r10*sj5)));
j4eval[0]=x13010;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13009)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13010);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13011=cj5*cj5;
IkReal x13012=(r11*r21);
IkReal x13013=((1.0)*r20);
IkReal x13014=(cj5*sj5);
IkReal x13015=((((-1.0)*r12*r22))+(((-1.0)*r10*x13011*x13013))+((r11*r20*x13014))+(((-1.0)*x13012))+((r10*r21*x13014))+((x13011*x13012)));
j4eval[0]=x13015;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13013)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13016=cj5*cj5;
IkReal x13017=(r21*sj5);
IkReal x13018=(r11*r21);
IkReal x13019=((1.0)*r20);
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13019))+x13017)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign((((x13016*x13018))+((cj5*r10*x13017))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13016*x13019))+(((-1.0)*x13018))+((cj5*r11*r20*sj5)))),-1);
if(!x13021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13020.value)+(((1.5707963267949)*(x13021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13022=IKcos(j4);
IkReal x13023=IKsin(j4);
IkReal x13024=(cj5*r00);
IkReal x13025=(cj5*r20);
IkReal x13026=(cj5*r10);
IkReal x13027=((1.0)*x13022);
IkReal x13028=((1.0)*x13023);
IkReal x13029=(sj5*x13022);
IkReal x13030=(sj5*x13023);
evalcond[0]=(((r21*x13029))+(((-1.0)*x13025*x13027))+((r22*x13023)));
evalcond[1]=(((r11*x13029))+((r12*x13023))+(((-1.0)*x13026*x13027)));
evalcond[2]=((((-1.0)*r22*x13027))+(((-1.0)*x13025*x13028))+((r21*x13030)));
evalcond[3]=((((-1.0)*x13024*x13028))+((r01*x13030))+(((-1.0)*r02*x13027)));
evalcond[4]=((1.0)+((r01*x13029))+(((-1.0)*x13024*x13027))+((r02*x13023)));
evalcond[5]=((1.0)+((r11*x13030))+(((-1.0)*x13026*x13028))+(((-1.0)*r12*x13027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13031=((1.0)*cj5);
CheckValue<IkReal> x13032 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13031))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13032.valid){
continue;
}
CheckValue<IkReal> x13033=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13031)))),-1);
if(!x13033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13032.value)+(((1.5707963267949)*(x13033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13034=IKcos(j4);
IkReal x13035=IKsin(j4);
IkReal x13036=(cj5*r00);
IkReal x13037=(cj5*r20);
IkReal x13038=(cj5*r10);
IkReal x13039=((1.0)*x13034);
IkReal x13040=((1.0)*x13035);
IkReal x13041=(sj5*x13034);
IkReal x13042=(sj5*x13035);
evalcond[0]=(((r22*x13035))+((r21*x13041))+(((-1.0)*x13037*x13039)));
evalcond[1]=(((r11*x13041))+(((-1.0)*x13038*x13039))+((r12*x13035)));
evalcond[2]=(((r21*x13042))+(((-1.0)*r22*x13039))+(((-1.0)*x13037*x13040)));
evalcond[3]=((((-1.0)*x13036*x13040))+(((-1.0)*r02*x13039))+((r01*x13042)));
evalcond[4]=((1.0)+(((-1.0)*x13036*x13039))+((r01*x13041))+((r02*x13035)));
evalcond[5]=((1.0)+(((-1.0)*x13038*x13040))+((r11*x13042))+(((-1.0)*r12*x13039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13043=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13043.valid){
continue;
}
CheckValue<IkReal> x13044 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13043.value)))+(x13044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13045=IKcos(j4);
IkReal x13046=IKsin(j4);
IkReal x13047=(cj5*r00);
IkReal x13048=(cj5*r20);
IkReal x13049=(cj5*r10);
IkReal x13050=((1.0)*x13045);
IkReal x13051=((1.0)*x13046);
IkReal x13052=(sj5*x13045);
IkReal x13053=(sj5*x13046);
evalcond[0]=(((r21*x13052))+(((-1.0)*x13048*x13050))+((r22*x13046)));
evalcond[1]=((((-1.0)*x13049*x13050))+((r12*x13046))+((r11*x13052)));
evalcond[2]=(((r21*x13053))+(((-1.0)*x13048*x13051))+(((-1.0)*r22*x13050)));
evalcond[3]=((((-1.0)*x13047*x13051))+(((-1.0)*r02*x13050))+((r01*x13053)));
evalcond[4]=((1.0)+((r02*x13046))+(((-1.0)*x13047*x13050))+((r01*x13052)));
evalcond[5]=((1.0)+(((-1.0)*x13049*x13051))+(((-1.0)*r12*x13050))+((r11*x13053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13054=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13054;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13055=((1.0)*cj5);
IkReal x13056=((((-1.0)*r21*x13055))+(((-1.0)*r20*sj5)));
j4eval[0]=x13056;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x13055)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13057=cj5*cj5;
IkReal x13058=(r11*r21);
IkReal x13059=((1.0)*r20);
IkReal x13060=(cj5*sj5);
IkReal x13061=(((r10*r21*x13060))+(((-1.0)*r10*x13057*x13059))+((r11*r20*x13060))+(((-1.0)*x13058))+(((-1.0)*r12*r22))+((x13057*x13058)));
j4eval[0]=x13061;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13059))))));
j4eval[2]=IKsign(x13061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13062=cj5*cj5;
IkReal x13063=(r21*sj5);
IkReal x13064=(r11*r21);
IkReal x13065=((1.0)*r20);
CheckValue<IkReal> x13066 = IKatan2WithCheck(IkReal((x13063+(((-1.0)*cj5*x13065)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13066.valid){
continue;
}
CheckValue<IkReal> x13067=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13064))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13062*x13065))+((cj5*r10*x13063))+((x13062*x13064))+((cj5*r11*r20*sj5)))),-1);
if(!x13067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13066.value)+(((1.5707963267949)*(x13067.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13068=IKcos(j4);
IkReal x13069=IKsin(j4);
IkReal x13070=(cj5*r00);
IkReal x13071=(cj5*r20);
IkReal x13072=(cj5*r10);
IkReal x13073=((1.0)*x13068);
IkReal x13074=((1.0)*x13069);
IkReal x13075=(sj5*x13068);
IkReal x13076=(sj5*x13069);
evalcond[0]=(((r21*x13075))+((r22*x13069))+(((-1.0)*x13071*x13073)));
evalcond[1]=(((r12*x13069))+(((-1.0)*x13072*x13073))+((r11*x13075)));
evalcond[2]=(((r21*x13076))+(((-1.0)*r22*x13073))+(((-1.0)*x13071*x13074)));
evalcond[3]=((((-1.0)*r02*x13073))+((r01*x13076))+(((-1.0)*x13070*x13074)));
evalcond[4]=((-1.0)+((r02*x13069))+((r01*x13075))+(((-1.0)*x13070*x13073)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13073))+(((-1.0)*x13072*x13074))+((r11*x13076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13077=((1.0)*cj5);
CheckValue<IkReal> x13078 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13077))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13078.valid){
continue;
}
CheckValue<IkReal> x13079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13077))+(((-1.0)*r20*sj5)))),-1);
if(!x13079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13078.value)+(((1.5707963267949)*(x13079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13080=IKcos(j4);
IkReal x13081=IKsin(j4);
IkReal x13082=(cj5*r00);
IkReal x13083=(cj5*r20);
IkReal x13084=(cj5*r10);
IkReal x13085=((1.0)*x13080);
IkReal x13086=((1.0)*x13081);
IkReal x13087=(sj5*x13080);
IkReal x13088=(sj5*x13081);
evalcond[0]=(((r22*x13081))+(((-1.0)*x13083*x13085))+((r21*x13087)));
evalcond[1]=((((-1.0)*x13084*x13085))+((r11*x13087))+((r12*x13081)));
evalcond[2]=((((-1.0)*r22*x13085))+(((-1.0)*x13083*x13086))+((r21*x13088)));
evalcond[3]=((((-1.0)*r02*x13085))+(((-1.0)*x13082*x13086))+((r01*x13088)));
evalcond[4]=((-1.0)+((r02*x13081))+(((-1.0)*x13082*x13085))+((r01*x13087)));
evalcond[5]=((1.0)+(((-1.0)*x13084*x13086))+((r11*x13088))+(((-1.0)*r12*x13085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13089 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13089.valid){
continue;
}
CheckValue<IkReal> x13090=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13089.value)+(((1.5707963267949)*(x13090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13091=IKcos(j4);
IkReal x13092=IKsin(j4);
IkReal x13093=(cj5*r00);
IkReal x13094=(cj5*r20);
IkReal x13095=(cj5*r10);
IkReal x13096=((1.0)*x13091);
IkReal x13097=((1.0)*x13092);
IkReal x13098=(sj5*x13091);
IkReal x13099=(sj5*x13092);
evalcond[0]=((((-1.0)*x13094*x13096))+((r22*x13092))+((r21*x13098)));
evalcond[1]=((((-1.0)*x13095*x13096))+((r11*x13098))+((r12*x13092)));
evalcond[2]=((((-1.0)*x13094*x13097))+(((-1.0)*r22*x13096))+((r21*x13099)));
evalcond[3]=(((r01*x13099))+(((-1.0)*x13093*x13097))+(((-1.0)*r02*x13096)));
evalcond[4]=((-1.0)+((r02*x13092))+((r01*x13098))+(((-1.0)*x13093*x13096)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13096))+(((-1.0)*x13095*x13097))+((r11*x13099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13100=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13100);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13100);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13101=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13101);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13101);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13102=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13102)));
j4eval[1]=((((-1.0)*r00*x13102))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13103=((1.0)*cj5);
CheckValue<IkReal> x13104=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13103))),-1);
if(!x13104.valid){
continue;
}
CheckValue<IkReal> x13105=IKPowWithIntegerCheck(((((-1.0)*r00*x13103))+((r01*sj5))),-1);
if(!x13105.valid){
continue;
}
if( IKabs(((-1.0)*(x13104.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13105.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13104.value)))+IKsqr(((x13105.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13104.value)), ((x13105.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13106=IKsin(j4);
IkReal x13107=IKcos(j4);
IkReal x13108=((1.0)*cj5);
IkReal x13109=((1.0)*cj2);
IkReal x13110=(sj5*x13107);
IkReal x13111=(sj5*x13106);
evalcond[0]=((-1.0)*r22*x13107);
evalcond[1]=(((sj1*sj2))+((r22*x13106))+(((-1.0)*cj1*x13109)));
evalcond[2]=((((-1.0)*r00*x13106*x13108))+((r01*x13111)));
evalcond[3]=((((-1.0)*r10*x13107*x13108))+((r11*x13110)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13106*x13108))+((r11*x13111)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13109))+(((-1.0)*r00*x13107*x13108))+((r01*x13110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13112=IKPowWithIntegerCheck(r22,-1);
if(!x13112.valid){
continue;
}
CheckValue<IkReal> x13113=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13113.valid){
continue;
}
if( IKabs(((x13112.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13113.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13112.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13113.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13112.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13113.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13114=IKsin(j4);
IkReal x13115=IKcos(j4);
IkReal x13116=((1.0)*cj5);
IkReal x13117=((1.0)*cj2);
IkReal x13118=(sj5*x13115);
IkReal x13119=(sj5*x13114);
evalcond[0]=((-1.0)*r22*x13115);
evalcond[1]=(((r22*x13114))+((sj1*sj2))+(((-1.0)*cj1*x13117)));
evalcond[2]=((((-1.0)*r00*x13114*x13116))+((r01*x13119)));
evalcond[3]=((((-1.0)*r10*x13115*x13116))+((r11*x13118)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13114*x13116))+((r11*x13119)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r00*x13115*x13116))+(((-1.0)*sj1*x13117))+((r01*x13118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13120=(sj1*sj2);
IkReal x13121=(cj5*r10);
IkReal x13122=(r11*sj5);
IkReal x13123=(cj1*cj2);
CheckValue<IkReal> x13124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13124.valid){
continue;
}
CheckValue<IkReal> x13125 = IKatan2WithCheck(IkReal((((x13121*x13123))+(((-1.0)*x13122*x13123))+((x13120*x13122))+(((-1.0)*x13120*x13121)))),IkReal(((((-1.0)*r12*x13120))+((r12*x13123)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13124.value)))+(x13125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13126=IKcos(j4);
IkReal x13127=IKsin(j4);
IkReal x13128=(cj5*r00);
IkReal x13129=(cj5*r10);
IkReal x13130=(r21*sj5);
IkReal x13131=((1.0)*cj2);
IkReal x13132=(cj5*r20);
IkReal x13133=((1.0)*x13126);
IkReal x13134=((1.0)*x13127);
IkReal x13135=(sj5*x13127);
IkReal x13136=(sj5*x13126);
evalcond[0]=((((-1.0)*x13129*x13133))+((r12*x13127))+((r11*x13136)));
evalcond[1]=((((-1.0)*x13132*x13134))+(((-1.0)*r22*x13133))+((x13127*x13130)));
evalcond[2]=(((r01*x13135))+(((-1.0)*r02*x13133))+(((-1.0)*x13128*x13134)));
evalcond[3]=((1.0)+(((-1.0)*x13129*x13134))+((r11*x13135))+(((-1.0)*r12*x13133)));
evalcond[4]=((((-1.0)*cj1*x13131))+((sj1*sj2))+(((-1.0)*x13132*x13133))+((r22*x13127))+((x13126*x13130)));
evalcond[5]=(((r01*x13136))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13131))+((r02*x13127))+(((-1.0)*x13128*x13133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13137=((1.0)*cj5);
CheckValue<IkReal> x13138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13137)))),-1);
if(!x13138.valid){
continue;
}
CheckValue<IkReal> x13139 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13137))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13138.value)))+(x13139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13140=IKcos(j4);
IkReal x13141=IKsin(j4);
IkReal x13142=(cj5*r00);
IkReal x13143=(cj5*r10);
IkReal x13144=(r21*sj5);
IkReal x13145=((1.0)*cj2);
IkReal x13146=(cj5*r20);
IkReal x13147=((1.0)*x13140);
IkReal x13148=((1.0)*x13141);
IkReal x13149=(sj5*x13141);
IkReal x13150=(sj5*x13140);
evalcond[0]=((((-1.0)*x13143*x13147))+((r12*x13141))+((r11*x13150)));
evalcond[1]=(((x13141*x13144))+(((-1.0)*x13146*x13148))+(((-1.0)*r22*x13147)));
evalcond[2]=((((-1.0)*x13142*x13148))+(((-1.0)*r02*x13147))+((r01*x13149)));
evalcond[3]=((1.0)+(((-1.0)*x13143*x13148))+((r11*x13149))+(((-1.0)*r12*x13147)));
evalcond[4]=(((r22*x13141))+(((-1.0)*x13146*x13147))+((x13140*x13144))+((sj1*sj2))+(((-1.0)*cj1*x13145)));
evalcond[5]=((((-1.0)*x13142*x13147))+(((-1.0)*sj1*x13145))+(((-1.0)*cj1*sj2))+((r02*x13141))+((r01*x13150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13151=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13151.valid){
continue;
}
CheckValue<IkReal> x13152 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13151.value)))+(x13152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13153=IKcos(j4);
IkReal x13154=IKsin(j4);
IkReal x13155=(cj5*r00);
IkReal x13156=(cj5*r10);
IkReal x13157=(r21*sj5);
IkReal x13158=((1.0)*cj2);
IkReal x13159=(cj5*r20);
IkReal x13160=((1.0)*x13153);
IkReal x13161=((1.0)*x13154);
IkReal x13162=(sj5*x13154);
IkReal x13163=(sj5*x13153);
evalcond[0]=((((-1.0)*x13156*x13160))+((r11*x13163))+((r12*x13154)));
evalcond[1]=(((x13154*x13157))+(((-1.0)*r22*x13160))+(((-1.0)*x13159*x13161)));
evalcond[2]=(((r01*x13162))+(((-1.0)*x13155*x13161))+(((-1.0)*r02*x13160)));
evalcond[3]=((1.0)+(((-1.0)*x13156*x13161))+(((-1.0)*r12*x13160))+((r11*x13162)));
evalcond[4]=(((x13153*x13157))+((sj1*sj2))+(((-1.0)*cj1*x13158))+((r22*x13154))+(((-1.0)*x13159*x13160)));
evalcond[5]=((((-1.0)*sj1*x13158))+((r02*x13154))+((r01*x13163))+(((-1.0)*x13155*x13160))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13164=((-1.0)*r00);
IkReal x13166 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13166)==0){
continue;
}
IkReal x13165=pow(x13166,-0.5);
CheckValue<IkReal> x13167 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13164),IKFAST_ATAN2_MAGTHRESH);
if(!x13167.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13167.value));
IkReal gconst19=(r01*x13165);
IkReal gconst20=(x13164*x13165);
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13168.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13169=((-1.0)*r00);
IkReal x13170=x13165;
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13169),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
IkReal x13171=((-1.0)*(x13172.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13171;
IkReal gconst18=x13171;
IkReal gconst19=(r01*x13170);
IkReal gconst20=(x13169*x13170);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13173=((-1.0)*r00);
IkReal x13174=x13165;
CheckValue<IkReal> x13176 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13173),IKFAST_ATAN2_MAGTHRESH);
if(!x13176.valid){
continue;
}
IkReal x13175=((-1.0)*(x13176.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13175;
IkReal gconst18=x13175;
IkReal gconst19=(r01*x13174);
IkReal gconst20=(x13173*x13174);
CheckValue<IkReal> x13184=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13184.valid){
continue;
}
IkReal x13177=x13184.value;
IkReal x13178=(sj3*x13177);
IkReal x13179=(r11*x13178);
IkReal x13180=(r21*x13178);
IkReal x13181=(r20*x13178);
IkReal x13182=(r10*x13178);
IkReal x13183=(r00*r01*x13178);
j4eval[0]=IKsign((((r10*x13181*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x13179))+((r21*x13179*(r01*r01)))+((r00*r01*r10*x13180))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13185=gconst19*gconst19;
IkReal x13186=gconst20*gconst20;
IkReal x13187=(gconst20*sj3);
IkReal x13188=((1.0)*cj3);
IkReal x13189=(r10*sj3);
IkReal x13190=(gconst19*r21);
IkReal x13191=(r11*r20);
IkReal x13192=(cj3*gconst20);
IkReal x13193=((1.0)*r10*r20);
IkReal x13194=(r21*x13185);
CheckValue<IkReal> x13195 = IKatan2WithCheck(IkReal((((r11*r22*x13187))+((gconst19*r22*x13189)))),IkReal(((((-1.0)*sj3*x13186*x13191))+(((-1.0)*gconst19*x13187*x13193))+((r11*x13187*x13190))+((x13189*x13194)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13195.valid){
continue;
}
CheckValue<IkReal> x13196=IKPowWithIntegerCheck(IKsign((((r10*x13190*x13192))+(((-1.0)*r12*r22*x13188))+(((-1.0)*r10*r20*x13186*x13188))+((gconst19*x13191*x13192))+(((-1.0)*r11*x13188*x13194)))),-1);
if(!x13196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13195.value)+(((1.5707963267949)*(x13196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13197=IKsin(j4);
IkReal x13198=IKcos(j4);
IkReal x13199=(sj1*sj2);
IkReal x13200=(gconst20*sj3);
IkReal x13201=(gconst19*r21);
IkReal x13202=(gconst20*r10);
IkReal x13203=(cj3*gconst19);
IkReal x13204=(gconst19*sj3);
IkReal x13205=((1.0)*cj1);
IkReal x13206=(cj3*gconst20);
IkReal x13207=(cj2*sj1);
IkReal x13208=(cj2*x13205);
IkReal x13209=((1.0)*x13198);
IkReal x13210=((1.0)*x13197);
IkReal x13211=(cj3*x13197);
IkReal x13212=(gconst19*x13197);
evalcond[0]=(((x13197*x13201))+(((-1.0)*r22*x13209))+(((-1.0)*gconst20*r20*x13210)));
evalcond[1]=(((r01*x13212))+(((-1.0)*r02*x13209))+(((-1.0)*gconst20*r00*x13210)));
evalcond[2]=((1.0)+((r11*x13212))+(((-1.0)*x13202*x13210))+(((-1.0)*r12*x13209)));
evalcond[3]=(((r12*x13211))+((r10*x13204))+((r11*x13200))+(((-1.0)*cj3*x13202*x13209))+((r11*x13198*x13203)));
evalcond[4]=((((-1.0)*r11*x13204*x13209))+((r10*x13203))+((r10*x13198*x13200))+((r11*x13206))+(((-1.0)*r12*sj3*x13210)));
evalcond[5]=((((-1.0)*r20*x13206*x13209))+((cj1*sj2))+((cj3*x13198*x13201))+((r21*x13200))+x13207+((r22*x13211))+((r20*x13204)));
evalcond[6]=(((r01*x13200))+((r00*x13204))+x13199+(((-1.0)*r00*x13206*x13209))+((r02*x13211))+(((-1.0)*x13208))+((r01*x13198*x13203)));
evalcond[7]=((((-1.0)*sj3*x13201*x13209))+(((-1.0)*r22*sj3*x13210))+((r21*x13206))+((r20*x13198*x13200))+x13199+(((-1.0)*x13208))+((r20*x13203)));
evalcond[8]=((((-1.0)*sj2*x13205))+((r01*x13206))+((r00*x13203))+(((-1.0)*r02*sj3*x13210))+(((-1.0)*r01*x13204*x13209))+((r00*x13198*x13200))+(((-1.0)*x13207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13213=gconst19*gconst19;
IkReal x13214=gconst20*gconst20;
IkReal x13215=(r21*sj3);
IkReal x13216=(cj3*r11);
IkReal x13217=(gconst19*gconst20);
IkReal x13218=((1.0)*r10);
IkReal x13219=(cj3*r10);
IkReal x13220=(r20*x13214);
CheckValue<IkReal> x13221=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj3*x13217))+(((-1.0)*x13215*x13217*x13218))+((r10*sj3*x13220))+((r12*r22*sj3))+((r11*x13213*x13215)))),-1);
if(!x13221.valid){
continue;
}
CheckValue<IkReal> x13222 = IKatan2WithCheck(IkReal((((gconst19*r22*x13219))+((gconst20*r22*x13216)))),IkReal((((r21*x13213*x13219))+(((-1.0)*x13216*x13220))+((r21*x13216*x13217))+(((-1.0)*cj3*r20*x13217*x13218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13221.value)))+(x13222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13223=IKsin(j4);
IkReal x13224=IKcos(j4);
IkReal x13225=(sj1*sj2);
IkReal x13226=(gconst20*sj3);
IkReal x13227=(gconst19*r21);
IkReal x13228=(gconst20*r10);
IkReal x13229=(cj3*gconst19);
IkReal x13230=(gconst19*sj3);
IkReal x13231=((1.0)*cj1);
IkReal x13232=(cj3*gconst20);
IkReal x13233=(cj2*sj1);
IkReal x13234=(cj2*x13231);
IkReal x13235=((1.0)*x13224);
IkReal x13236=((1.0)*x13223);
IkReal x13237=(cj3*x13223);
IkReal x13238=(gconst19*x13223);
evalcond[0]=((((-1.0)*gconst20*r20*x13236))+((x13223*x13227))+(((-1.0)*r22*x13235)));
evalcond[1]=(((r01*x13238))+(((-1.0)*r02*x13235))+(((-1.0)*gconst20*r00*x13236)));
evalcond[2]=((1.0)+(((-1.0)*x13228*x13236))+(((-1.0)*r12*x13235))+((r11*x13238)));
evalcond[3]=(((r10*x13230))+((r11*x13226))+((r12*x13237))+((r11*x13224*x13229))+(((-1.0)*cj3*x13228*x13235)));
evalcond[4]=((((-1.0)*r11*x13230*x13235))+((r10*x13229))+((r11*x13232))+((r10*x13224*x13226))+(((-1.0)*r12*sj3*x13236)));
evalcond[5]=(((cj3*x13224*x13227))+((r20*x13230))+((r21*x13226))+((cj1*sj2))+(((-1.0)*r20*x13232*x13235))+((r22*x13237))+x13233);
evalcond[6]=((((-1.0)*r00*x13232*x13235))+((r02*x13237))+((r01*x13224*x13229))+((r01*x13226))+x13225+(((-1.0)*x13234))+((r00*x13230)));
evalcond[7]=((((-1.0)*r22*sj3*x13236))+((r21*x13232))+((r20*x13224*x13226))+x13225+(((-1.0)*sj3*x13227*x13235))+((r20*x13229))+(((-1.0)*x13234)));
evalcond[8]=(((r01*x13232))+((r00*x13229))+(((-1.0)*r01*x13230*x13235))+(((-1.0)*x13233))+(((-1.0)*r02*sj3*x13236))+((r00*x13224*x13226))+(((-1.0)*sj2*x13231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13239 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13239.valid){
continue;
}
CheckValue<IkReal> x13240=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13239.value)+(((1.5707963267949)*(x13240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13241=IKsin(j4);
IkReal x13242=IKcos(j4);
IkReal x13243=(sj1*sj2);
IkReal x13244=(gconst20*sj3);
IkReal x13245=(gconst19*r21);
IkReal x13246=(gconst20*r10);
IkReal x13247=(cj3*gconst19);
IkReal x13248=(gconst19*sj3);
IkReal x13249=((1.0)*cj1);
IkReal x13250=(cj3*gconst20);
IkReal x13251=(cj2*sj1);
IkReal x13252=(cj2*x13249);
IkReal x13253=((1.0)*x13242);
IkReal x13254=((1.0)*x13241);
IkReal x13255=(cj3*x13241);
IkReal x13256=(gconst19*x13241);
evalcond[0]=((((-1.0)*r22*x13253))+((x13241*x13245))+(((-1.0)*gconst20*r20*x13254)));
evalcond[1]=((((-1.0)*r02*x13253))+((r01*x13256))+(((-1.0)*gconst20*r00*x13254)));
evalcond[2]=((1.0)+(((-1.0)*x13246*x13254))+((r11*x13256))+(((-1.0)*r12*x13253)));
evalcond[3]=(((r10*x13248))+(((-1.0)*cj3*x13246*x13253))+((r12*x13255))+((r11*x13244))+((r11*x13242*x13247)));
evalcond[4]=(((r10*x13247))+(((-1.0)*r12*sj3*x13254))+((r11*x13250))+(((-1.0)*r11*x13248*x13253))+((r10*x13242*x13244)));
evalcond[5]=(((r21*x13244))+((cj1*sj2))+((r22*x13255))+(((-1.0)*r20*x13250*x13253))+((cj3*x13242*x13245))+x13251+((r20*x13248)));
evalcond[6]=(((r01*x13242*x13247))+((r02*x13255))+((r00*x13248))+((r01*x13244))+(((-1.0)*x13252))+x13243+(((-1.0)*r00*x13250*x13253)));
evalcond[7]=(((r21*x13250))+(((-1.0)*r22*sj3*x13254))+(((-1.0)*sj3*x13245*x13253))+((r20*x13242*x13244))+(((-1.0)*x13252))+x13243+((r20*x13247)));
evalcond[8]=(((r00*x13242*x13244))+(((-1.0)*x13251))+(((-1.0)*r02*sj3*x13254))+((r00*x13247))+((r01*x13250))+(((-1.0)*sj2*x13249))+(((-1.0)*r01*x13248*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13257=((-1.0)*r01);
IkReal x13259 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13259)==0){
continue;
}
IkReal x13258=pow(x13259,-0.5);
CheckValue<IkReal> x13260 = IKatan2WithCheck(IkReal(x13257),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13260.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13260.value))));
IkReal gconst22=(x13257*x13258);
IkReal gconst23=((1.0)*r00*x13258);
CheckValue<IkReal> x13261 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13261.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13261.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13262=((-1.0)*r01);
CheckValue<IkReal> x13265 = IKatan2WithCheck(IkReal(x13262),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13265.valid){
continue;
}
IkReal x13263=((1.0)*(x13265.value));
IkReal x13264=x13258;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13263)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13263)));
IkReal gconst22=(x13262*x13264);
IkReal gconst23=((1.0)*r00*x13264);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13266=((-1.0)*r01);
CheckValue<IkReal> x13269 = IKatan2WithCheck(IkReal(x13266),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13269.valid){
continue;
}
IkReal x13267=((1.0)*(x13269.value));
IkReal x13268=x13258;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13267)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13267)));
IkReal gconst22=(x13266*x13268);
IkReal gconst23=((1.0)*r00*x13268);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13270=gconst22*gconst22;
IkReal x13271=gconst23*gconst23;
IkReal x13272=(r21*sj3);
IkReal x13273=((1.0)*cj3);
IkReal x13274=(gconst23*r11);
IkReal x13275=(r22*sj3);
IkReal x13276=(gconst22*r10);
IkReal x13277=((1.0)*r20*sj3);
CheckValue<IkReal> x13278=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13271*x13273))+(((-1.0)*r12*r22*x13273))+((cj3*gconst22*r20*x13274))+((cj3*gconst23*r21*x13276))+(((-1.0)*r11*r21*x13270*x13273)))),-1);
if(!x13278.valid){
continue;
}
CheckValue<IkReal> x13279 = IKatan2WithCheck(IkReal((((x13275*x13276))+((x13274*x13275)))),IkReal(((((-1.0)*gconst23*x13276*x13277))+((r10*x13270*x13272))+(((-1.0)*r11*x13271*x13277))+((gconst22*x13272*x13274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13278.value)))+(x13279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13280=IKsin(j4);
IkReal x13281=IKcos(j4);
IkReal x13282=(sj1*sj2);
IkReal x13283=(gconst23*sj3);
IkReal x13284=(gconst22*sj3);
IkReal x13285=(cj2*sj1);
IkReal x13286=((1.0)*cj1);
IkReal x13287=(cj3*gconst23);
IkReal x13288=(cj3*gconst22);
IkReal x13289=(cj2*x13286);
IkReal x13290=((1.0)*x13281);
IkReal x13291=(cj3*x13280);
IkReal x13292=(gconst22*x13280);
IkReal x13293=((1.0)*sj3*x13280);
IkReal x13294=(x13281*x13288);
IkReal x13295=((1.0)*gconst23*x13280);
evalcond[0]=((((-1.0)*r20*x13295))+(((-1.0)*r22*x13290))+((r21*x13292)));
evalcond[1]=((((-1.0)*r00*x13295))+(((-1.0)*r02*x13290))+((r01*x13292)));
evalcond[2]=((1.0)+((r11*x13292))+(((-1.0)*r10*x13295))+(((-1.0)*r12*x13290)));
evalcond[3]=(((r11*x13294))+((r12*x13291))+((r11*x13283))+((r10*x13284))+(((-1.0)*r10*x13287*x13290)));
evalcond[4]=(((r11*x13287))+((r10*x13288))+(((-1.0)*r11*x13284*x13290))+(((-1.0)*r12*x13293))+((r10*x13281*x13283)));
evalcond[5]=(((r20*x13284))+((cj1*sj2))+((r22*x13291))+((r21*x13283))+(((-1.0)*r20*x13287*x13290))+x13285+((r21*x13294)));
evalcond[6]=(((r02*x13291))+(((-1.0)*r00*x13287*x13290))+x13282+((r01*x13283))+((r00*x13284))+(((-1.0)*x13289))+((r01*x13294)));
evalcond[7]=(((r20*x13288))+(((-1.0)*r21*x13284*x13290))+((r21*x13287))+x13282+(((-1.0)*r22*x13293))+((r20*x13281*x13283))+(((-1.0)*x13289)));
evalcond[8]=((((-1.0)*sj2*x13286))+(((-1.0)*x13285))+(((-1.0)*r01*x13284*x13290))+((r00*x13281*x13283))+((r01*x13287))+(((-1.0)*r02*x13293))+((r00*x13288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13296=((1.0)*gconst23);
CheckValue<IkReal> x13297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13296)))),-1);
if(!x13297.valid){
continue;
}
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13296))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13297.value)))+(x13298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13299=IKsin(j4);
IkReal x13300=IKcos(j4);
IkReal x13301=(sj1*sj2);
IkReal x13302=(gconst23*sj3);
IkReal x13303=(gconst22*sj3);
IkReal x13304=(cj2*sj1);
IkReal x13305=((1.0)*cj1);
IkReal x13306=(cj3*gconst23);
IkReal x13307=(cj3*gconst22);
IkReal x13308=(cj2*x13305);
IkReal x13309=((1.0)*x13300);
IkReal x13310=(cj3*x13299);
IkReal x13311=(gconst22*x13299);
IkReal x13312=((1.0)*sj3*x13299);
IkReal x13313=(x13300*x13307);
IkReal x13314=((1.0)*gconst23*x13299);
evalcond[0]=((((-1.0)*r20*x13314))+(((-1.0)*r22*x13309))+((r21*x13311)));
evalcond[1]=(((r01*x13311))+(((-1.0)*r02*x13309))+(((-1.0)*r00*x13314)));
evalcond[2]=((1.0)+((r11*x13311))+(((-1.0)*r12*x13309))+(((-1.0)*r10*x13314)));
evalcond[3]=(((r11*x13313))+((r10*x13303))+((r11*x13302))+((r12*x13310))+(((-1.0)*r10*x13306*x13309)));
evalcond[4]=(((r10*x13307))+(((-1.0)*r11*x13303*x13309))+(((-1.0)*r12*x13312))+((r11*x13306))+((r10*x13300*x13302)));
evalcond[5]=(((r21*x13302))+((r20*x13303))+((cj1*sj2))+(((-1.0)*r20*x13306*x13309))+((r22*x13310))+((r21*x13313))+x13304);
evalcond[6]=((((-1.0)*r00*x13306*x13309))+((r01*x13313))+((r00*x13303))+((r01*x13302))+(((-1.0)*x13308))+x13301+((r02*x13310)));
evalcond[7]=(((r21*x13306))+((r20*x13307))+(((-1.0)*r21*x13303*x13309))+((r20*x13300*x13302))+(((-1.0)*x13308))+x13301+(((-1.0)*r22*x13312)));
evalcond[8]=((((-1.0)*r02*x13312))+((r00*x13307))+((r01*x13306))+((r00*x13300*x13302))+(((-1.0)*r01*x13303*x13309))+(((-1.0)*sj2*x13305))+(((-1.0)*x13304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13315=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13315.valid){
continue;
}
CheckValue<IkReal> x13316 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13315.value)))+(x13316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13317=IKsin(j4);
IkReal x13318=IKcos(j4);
IkReal x13319=(sj1*sj2);
IkReal x13320=(gconst23*sj3);
IkReal x13321=(gconst22*sj3);
IkReal x13322=(cj2*sj1);
IkReal x13323=((1.0)*cj1);
IkReal x13324=(cj3*gconst23);
IkReal x13325=(cj3*gconst22);
IkReal x13326=(cj2*x13323);
IkReal x13327=((1.0)*x13318);
IkReal x13328=(cj3*x13317);
IkReal x13329=(gconst22*x13317);
IkReal x13330=((1.0)*sj3*x13317);
IkReal x13331=(x13318*x13325);
IkReal x13332=((1.0)*gconst23*x13317);
evalcond[0]=((((-1.0)*r22*x13327))+(((-1.0)*r20*x13332))+((r21*x13329)));
evalcond[1]=((((-1.0)*r02*x13327))+(((-1.0)*r00*x13332))+((r01*x13329)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13327))+((r11*x13329))+(((-1.0)*r10*x13332)));
evalcond[3]=(((r12*x13328))+((r10*x13321))+(((-1.0)*r10*x13324*x13327))+((r11*x13320))+((r11*x13331)));
evalcond[4]=((((-1.0)*r12*x13330))+((r10*x13325))+((r10*x13318*x13320))+((r11*x13324))+(((-1.0)*r11*x13321*x13327)));
evalcond[5]=((((-1.0)*r20*x13324*x13327))+((cj1*sj2))+((r20*x13321))+((r21*x13331))+((r21*x13320))+x13322+((r22*x13328)));
evalcond[6]=(((r02*x13328))+((r01*x13331))+((r00*x13321))+((r01*x13320))+(((-1.0)*r00*x13324*x13327))+(((-1.0)*x13326))+x13319);
evalcond[7]=((((-1.0)*r22*x13330))+(((-1.0)*r21*x13321*x13327))+((r20*x13325))+((r20*x13318*x13320))+((r21*x13324))+(((-1.0)*x13326))+x13319);
evalcond[8]=((((-1.0)*r01*x13321*x13327))+(((-1.0)*x13322))+((r00*x13325))+((r01*x13324))+((r00*x13318*x13320))+(((-1.0)*sj2*x13323))+(((-1.0)*r02*x13330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13334 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13334)==0){
continue;
}
IkReal x13333=pow(x13334,-0.5);
CheckValue<IkReal> x13335 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13335.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13335.value));
IkReal gconst25=((-1.0)*r21*x13333);
IkReal gconst26=(r20*x13333);
CheckValue<IkReal> x13336 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13336.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13336.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13339 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13339.valid){
continue;
}
IkReal x13337=((-1.0)*(x13339.value));
IkReal x13338=x13333;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13337;
IkReal gconst24=x13337;
IkReal gconst25=((-1.0)*r21*x13338);
IkReal gconst26=(r20*x13338);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13342 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13342.valid){
continue;
}
IkReal x13340=((-1.0)*(x13342.value));
IkReal x13341=x13333;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13340;
IkReal gconst24=x13340;
IkReal gconst25=((-1.0)*r21*x13341);
IkReal gconst26=(r20*x13341);
CheckValue<IkReal> x13350=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13350.valid){
continue;
}
IkReal x13343=x13350.value;
IkReal x13344=(sj3*x13343);
IkReal x13345=(r11*x13344);
IkReal x13346=(r00*x13344);
IkReal x13347=(r01*x13344);
IkReal x13348=(r10*x13344);
IkReal x13349=(r20*r21*x13344);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x13345))+((r10*r20*r21*x13347))+((r10*x13346*(r20*r20)))+((r01*x13345*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13351=gconst25*gconst25;
IkReal x13352=gconst26*gconst26;
IkReal x13353=(r00*r11);
IkReal x13354=(r01*r10);
IkReal x13355=(r02*sj3);
IkReal x13356=(gconst25*r10);
IkReal x13357=(gconst26*r11);
IkReal x13358=((1.0)*sj3);
IkReal x13359=((1.0)*cj3);
IkReal x13360=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13361=IKPowWithIntegerCheck(IKsign((((x13353*x13360))+((x13354*x13360))+(((-1.0)*r01*r11*x13351*x13359))+(((-1.0)*r00*r10*x13352*x13359))+(((-1.0)*r02*r12*x13359)))),-1);
if(!x13361.valid){
continue;
}
CheckValue<IkReal> x13362 = IKatan2WithCheck(IkReal((((x13355*x13357))+((x13355*x13356)))),IkReal(((((-1.0)*x13352*x13353*x13358))+((gconst25*r01*sj3*x13357))+((sj3*x13351*x13354))+(((-1.0)*gconst26*r00*x13356*x13358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13361.value)))+(x13362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13363=IKsin(j4);
IkReal x13364=IKcos(j4);
IkReal x13365=(sj1*sj2);
IkReal x13366=(gconst26*sj3);
IkReal x13367=(gconst25*sj3);
IkReal x13368=(gconst26*r10);
IkReal x13369=(gconst25*r11);
IkReal x13370=(cj3*gconst25);
IkReal x13371=((1.0)*cj2);
IkReal x13372=(cj1*sj2);
IkReal x13373=(gconst26*r00);
IkReal x13374=(gconst26*r20);
IkReal x13375=(cj3*gconst26);
IkReal x13376=(cj1*x13371);
IkReal x13377=((1.0)*x13364);
IkReal x13378=((1.0)*x13363);
IkReal x13379=(cj3*x13363);
IkReal x13380=(gconst25*x13363);
evalcond[0]=((((-1.0)*x13374*x13378))+(((-1.0)*r22*x13377))+((r21*x13380)));
evalcond[1]=((((-1.0)*x13373*x13378))+((r01*x13380))+(((-1.0)*r02*x13377)));
evalcond[2]=((1.0)+(((-1.0)*x13368*x13378))+((x13363*x13369))+(((-1.0)*r12*x13377)));
evalcond[3]=((((-1.0)*cj3*x13368*x13377))+((r10*x13367))+((r12*x13379))+((cj3*x13364*x13369))+((r11*x13366)));
evalcond[4]=(((r10*x13370))+((r11*x13375))+(((-1.0)*r11*x13367*x13377))+(((-1.0)*r12*sj3*x13378))+((r10*x13364*x13366)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13374*x13377))+((r20*x13367))+((r22*x13379))+((r21*x13366))+x13372+((r21*x13364*x13370)));
evalcond[6]=(((r02*x13379))+((r01*x13366))+((r00*x13367))+((r01*x13364*x13370))+(((-1.0)*cj3*x13373*x13377))+(((-1.0)*x13376))+x13365);
evalcond[7]=(((r20*x13370))+(((-1.0)*r22*sj3*x13378))+((r20*x13364*x13366))+(((-1.0)*x13376))+(((-1.0)*r21*x13367*x13377))+((r21*x13375))+x13365);
evalcond[8]=((((-1.0)*sj1*x13371))+(((-1.0)*r01*x13367*x13377))+((r00*x13364*x13366))+((r00*x13370))+((r01*x13375))+(((-1.0)*r02*sj3*x13378))+(((-1.0)*x13372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13381=gconst26*gconst26;
IkReal x13382=gconst25*gconst25;
IkReal x13383=(r01*r10);
IkReal x13384=(cj3*r11);
IkReal x13385=(gconst25*gconst26);
IkReal x13386=(cj3*r10);
IkReal x13387=(r00*x13381);
IkReal x13388=((1.0)*sj3*x13385);
CheckValue<IkReal> x13389=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r10*sj3*x13387))+((r01*r11*sj3*x13382))+(((-1.0)*x13383*x13388))+(((-1.0)*r00*r11*x13388)))),-1);
if(!x13389.valid){
continue;
}
CheckValue<IkReal> x13390 = IKatan2WithCheck(IkReal((((gconst25*r02*x13386))+((gconst26*r02*x13384)))),IkReal(((((-1.0)*r00*x13385*x13386))+((cj3*x13382*x13383))+(((-1.0)*x13384*x13387))+((r01*x13384*x13385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13389.value)))+(x13390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13391=IKsin(j4);
IkReal x13392=IKcos(j4);
IkReal x13393=(sj1*sj2);
IkReal x13394=(gconst26*sj3);
IkReal x13395=(gconst25*sj3);
IkReal x13396=(gconst26*r10);
IkReal x13397=(gconst25*r11);
IkReal x13398=(cj3*gconst25);
IkReal x13399=((1.0)*cj2);
IkReal x13400=(cj1*sj2);
IkReal x13401=(gconst26*r00);
IkReal x13402=(gconst26*r20);
IkReal x13403=(cj3*gconst26);
IkReal x13404=(cj1*x13399);
IkReal x13405=((1.0)*x13392);
IkReal x13406=((1.0)*x13391);
IkReal x13407=(cj3*x13391);
IkReal x13408=(gconst25*x13391);
evalcond[0]=(((r21*x13408))+(((-1.0)*x13402*x13406))+(((-1.0)*r22*x13405)));
evalcond[1]=((((-1.0)*r02*x13405))+((r01*x13408))+(((-1.0)*x13401*x13406)));
evalcond[2]=((1.0)+((x13391*x13397))+(((-1.0)*x13396*x13406))+(((-1.0)*r12*x13405)));
evalcond[3]=(((r11*x13394))+((r10*x13395))+((r12*x13407))+((cj3*x13392*x13397))+(((-1.0)*cj3*x13396*x13405)));
evalcond[4]=(((r10*x13398))+((r11*x13403))+(((-1.0)*r11*x13395*x13405))+((r10*x13392*x13394))+(((-1.0)*r12*sj3*x13406)));
evalcond[5]=(x13400+((cj2*sj1))+(((-1.0)*cj3*x13402*x13405))+((r21*x13394))+((r21*x13392*x13398))+((r20*x13395))+((r22*x13407)));
evalcond[6]=(((r01*x13392*x13398))+(((-1.0)*cj3*x13401*x13405))+((r00*x13395))+(((-1.0)*x13404))+((r01*x13394))+((r02*x13407))+x13393);
evalcond[7]=(((r20*x13392*x13394))+(((-1.0)*r22*sj3*x13406))+((r20*x13398))+((r21*x13403))+(((-1.0)*x13404))+(((-1.0)*r21*x13395*x13405))+x13393);
evalcond[8]=(((r01*x13403))+(((-1.0)*r01*x13395*x13405))+((r00*x13392*x13394))+(((-1.0)*r02*sj3*x13406))+((r00*x13398))+(((-1.0)*x13400))+(((-1.0)*sj1*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13409=((1.0)*gconst26);
CheckValue<IkReal> x13410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13409))+(((-1.0)*gconst25*r00)))),-1);
if(!x13410.valid){
continue;
}
CheckValue<IkReal> x13411 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst25*r21))+(((-1.0)*r20*x13409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13410.value)))+(x13411.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13412=IKsin(j4);
IkReal x13413=IKcos(j4);
IkReal x13414=(sj1*sj2);
IkReal x13415=(gconst26*sj3);
IkReal x13416=(gconst25*sj3);
IkReal x13417=(gconst26*r10);
IkReal x13418=(gconst25*r11);
IkReal x13419=(cj3*gconst25);
IkReal x13420=((1.0)*cj2);
IkReal x13421=(cj1*sj2);
IkReal x13422=(gconst26*r00);
IkReal x13423=(gconst26*r20);
IkReal x13424=(cj3*gconst26);
IkReal x13425=(cj1*x13420);
IkReal x13426=((1.0)*x13413);
IkReal x13427=((1.0)*x13412);
IkReal x13428=(cj3*x13412);
IkReal x13429=(gconst25*x13412);
evalcond[0]=((((-1.0)*x13423*x13427))+(((-1.0)*r22*x13426))+((r21*x13429)));
evalcond[1]=((((-1.0)*x13422*x13427))+(((-1.0)*r02*x13426))+((r01*x13429)));
evalcond[2]=((1.0)+((x13412*x13418))+(((-1.0)*r12*x13426))+(((-1.0)*x13417*x13427)));
evalcond[3]=(((cj3*x13413*x13418))+((r12*x13428))+(((-1.0)*cj3*x13417*x13426))+((r10*x13416))+((r11*x13415)));
evalcond[4]=((((-1.0)*r11*x13416*x13426))+((r10*x13413*x13415))+(((-1.0)*r12*sj3*x13427))+((r11*x13424))+((r10*x13419)));
evalcond[5]=(x13421+((cj2*sj1))+((r22*x13428))+((r20*x13416))+((r21*x13413*x13419))+((r21*x13415))+(((-1.0)*cj3*x13423*x13426)));
evalcond[6]=(x13414+(((-1.0)*x13425))+((r02*x13428))+((r01*x13415))+((r00*x13416))+(((-1.0)*cj3*x13422*x13426))+((r01*x13413*x13419)));
evalcond[7]=(x13414+(((-1.0)*r21*x13416*x13426))+((r20*x13419))+((r20*x13413*x13415))+(((-1.0)*x13425))+((r21*x13424))+(((-1.0)*r22*sj3*x13427)));
evalcond[8]=(((r00*x13413*x13415))+(((-1.0)*x13421))+(((-1.0)*r02*sj3*x13427))+(((-1.0)*sj1*x13420))+((r00*x13419))+((r01*x13424))+(((-1.0)*r01*x13416*x13426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13431 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13431)==0){
continue;
}
IkReal x13430=pow(x13431,-0.5);
CheckValue<IkReal> x13432 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13432.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13432.value))));
IkReal gconst28=((1.0)*r21*x13430);
IkReal gconst29=((-1.0)*r20*x13430);
CheckValue<IkReal> x13433 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13433.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13433.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13436 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13436.valid){
continue;
}
IkReal x13434=((1.0)*(x13436.value));
IkReal x13435=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13434)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13434)));
IkReal gconst28=((1.0)*r21*x13435);
IkReal gconst29=((-1.0)*r20*x13435);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13439 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13439.valid){
continue;
}
IkReal x13437=((1.0)*(x13439.value));
IkReal x13438=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13437)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13437)));
IkReal gconst28=((1.0)*r21*x13438);
IkReal gconst29=((-1.0)*r20*x13438);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13442 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13442.valid){
continue;
}
IkReal x13440=((1.0)*(x13442.value));
IkReal x13441=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13440)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13440)));
IkReal gconst28=((1.0)*r21*x13441);
IkReal gconst29=((-1.0)*r20*x13441);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13445.valid){
continue;
}
IkReal x13443=((1.0)*(x13445.value));
IkReal x13444=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13443)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13443)));
IkReal gconst28=((1.0)*r21*x13444);
IkReal gconst29=((-1.0)*r20*x13444);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13448 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13448.valid){
continue;
}
IkReal x13446=((1.0)*(x13448.value));
IkReal x13447=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13446)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13446)));
IkReal gconst28=((1.0)*r21*x13447);
IkReal gconst29=((-1.0)*r20*x13447);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13451 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13451.valid){
continue;
}
IkReal x13449=((1.0)*(x13451.value));
IkReal x13450=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13449)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13449)));
IkReal gconst28=((1.0)*r21*x13450);
IkReal gconst29=((-1.0)*r20*x13450);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13452=(gconst29*r10);
IkReal x13453=(gconst28*r11);
CheckValue<IkReal> x13454=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13452*x13452)+(((-2.0)*x13452*x13453))+(x13453*x13453))),-1);
if(!x13454.valid){
continue;
}
CheckValue<IkReal> x13455 = IKatan2WithCheck(IkReal((x13452+(((-1.0)*x13453)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13454.value)))+(x13455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13456=IKsin(j4);
IkReal x13457=IKcos(j4);
IkReal x13458=(gconst28*r11);
IkReal x13459=((1.0)*cj2);
IkReal x13460=((1.0)*x13457);
IkReal x13461=(gconst29*x13457);
IkReal x13462=(gconst28*x13456);
IkReal x13463=((1.0)*x13456);
IkReal x13464=(gconst29*x13463);
evalcond[0]=((((-1.0)*r22*x13460))+((r21*x13462))+(((-1.0)*r20*x13464)));
evalcond[1]=((((-1.0)*r00*x13464))+(((-1.0)*r02*x13460))+((r01*x13462)));
evalcond[2]=(((r10*x13461))+(((-1.0)*x13458*x13460))+(((-1.0)*r12*x13463)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13464))+((x13456*x13458))+(((-1.0)*r12*x13460)));
evalcond[4]=(((r20*x13461))+(((-1.0)*r22*x13463))+(((-1.0)*cj1*x13459))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13460)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13459))+(((-1.0)*gconst28*r01*x13460))+(((-1.0)*r02*x13463))+((r00*x13461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13465=((1.0)*gconst29);
CheckValue<IkReal> x13466 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13465))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13466.valid){
continue;
}
CheckValue<IkReal> x13467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13465))+(((-1.0)*gconst28*r00)))),-1);
if(!x13467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13466.value)+(((1.5707963267949)*(x13467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13468=IKsin(j4);
IkReal x13469=IKcos(j4);
IkReal x13470=(gconst28*r11);
IkReal x13471=((1.0)*cj2);
IkReal x13472=((1.0)*x13469);
IkReal x13473=(gconst29*x13469);
IkReal x13474=(gconst28*x13468);
IkReal x13475=((1.0)*x13468);
IkReal x13476=(gconst29*x13475);
evalcond[0]=(((r21*x13474))+(((-1.0)*r20*x13476))+(((-1.0)*r22*x13472)));
evalcond[1]=(((r01*x13474))+(((-1.0)*r02*x13472))+(((-1.0)*r00*x13476)));
evalcond[2]=(((r10*x13473))+(((-1.0)*r12*x13475))+(((-1.0)*x13470*x13472)));
evalcond[3]=((1.0)+((x13468*x13470))+(((-1.0)*r10*x13476))+(((-1.0)*r12*x13472)));
evalcond[4]=((((-1.0)*cj1*x13471))+(((-1.0)*gconst28*r21*x13472))+((sj1*sj2))+((r20*x13473))+(((-1.0)*r22*x13475)));
evalcond[5]=(((r00*x13473))+(((-1.0)*r02*x13475))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13471))+(((-1.0)*gconst28*r01*x13472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13477=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13477.valid){
continue;
}
CheckValue<IkReal> x13478 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13477.value)))+(x13478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13479=IKsin(j4);
IkReal x13480=IKcos(j4);
IkReal x13481=(gconst28*r11);
IkReal x13482=((1.0)*cj2);
IkReal x13483=((1.0)*x13480);
IkReal x13484=(gconst29*x13480);
IkReal x13485=(gconst28*x13479);
IkReal x13486=((1.0)*x13479);
IkReal x13487=(gconst29*x13486);
evalcond[0]=((((-1.0)*r20*x13487))+(((-1.0)*r22*x13483))+((r21*x13485)));
evalcond[1]=((((-1.0)*r00*x13487))+(((-1.0)*r02*x13483))+((r01*x13485)));
evalcond[2]=((((-1.0)*x13481*x13483))+(((-1.0)*r12*x13486))+((r10*x13484)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13483))+(((-1.0)*r10*x13487))+((x13479*x13481)));
evalcond[4]=((((-1.0)*r22*x13486))+((sj1*sj2))+((r20*x13484))+(((-1.0)*cj1*x13482))+(((-1.0)*gconst28*r21*x13483)));
evalcond[5]=((((-1.0)*sj1*x13482))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13486))+((r00*x13484))+(((-1.0)*gconst28*r01*x13483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13490 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13490.valid){
continue;
}
IkReal x13488=((1.0)*(x13490.value));
IkReal x13489=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13488)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13488)));
IkReal gconst28=((1.0)*r21*x13489);
IkReal gconst29=((-1.0)*r20*x13489);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13493 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13493.valid){
continue;
}
IkReal x13491=((1.0)*(x13493.value));
IkReal x13492=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13491)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13491)));
IkReal gconst28=((1.0)*r21*x13492);
IkReal gconst29=((-1.0)*r20*x13492);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
IkReal x13494=((1.0)*(x13496.value));
IkReal x13495=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13494)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13494)));
IkReal gconst28=((1.0)*r21*x13495);
IkReal gconst29=((-1.0)*r20*x13495);
IkReal x13497=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(x13497,-1);
if(!x13501.valid){
continue;
}
IkReal x13498=x13501.value;
IkReal x13499=((1.0)*x13498);
IkReal x13500=((((-2.0)*r10*r11*r20*r21*x13498))+(((-1.0)*x13499*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13499*(r10*r10)*(r20*r20))));
j4eval[0]=x13500;
j4eval[1]=r12;
j4eval[2]=x13497;
j4eval[3]=IKsign(x13500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13502=(gconst28*r11);
IkReal x13503=(gconst29*r10);
CheckValue<IkReal> x13504=IKPowWithIntegerCheck(IKsign(((((2.0)*x13502*x13503))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13503*x13503)))+(((-1.0)*(x13502*x13502))))),-1);
if(!x13504.valid){
continue;
}
CheckValue<IkReal> x13505 = IKatan2WithCheck(IkReal((x13502+(((-1.0)*x13503)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13504.value)))+(x13505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13506=IKcos(j4);
IkReal x13507=IKsin(j4);
IkReal x13508=(gconst29*r10);
IkReal x13509=(gconst29*r20);
IkReal x13510=(gconst28*r21);
IkReal x13511=((1.0)*cj2);
IkReal x13512=(gconst29*r00);
IkReal x13513=((1.0)*x13506);
IkReal x13514=((1.0)*x13507);
IkReal x13515=(gconst28*x13506);
IkReal x13516=(gconst28*x13507);
evalcond[0]=((((-1.0)*x13508*x13513))+((r11*x13515))+((r12*x13507)));
evalcond[1]=((((-1.0)*r22*x13513))+((x13507*x13510))+(((-1.0)*x13509*x13514)));
evalcond[2]=((((-1.0)*x13512*x13514))+((r01*x13516))+(((-1.0)*r02*x13513)));
evalcond[3]=((1.0)+(((-1.0)*x13508*x13514))+(((-1.0)*r12*x13513))+((r11*x13516)));
evalcond[4]=((((-1.0)*cj1*x13511))+((sj1*sj2))+((r22*x13507))+((x13506*x13510))+(((-1.0)*x13509*x13513)));
evalcond[5]=(((r02*x13507))+(((-1.0)*sj1*x13511))+(((-1.0)*cj1*sj2))+(((-1.0)*x13512*x13513))+((r01*x13515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13517=((1.0)*gconst29);
CheckValue<IkReal> x13518 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13517))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13518.valid){
continue;
}
CheckValue<IkReal> x13519=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13517)))),-1);
if(!x13519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13518.value)+(((1.5707963267949)*(x13519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13520=IKcos(j4);
IkReal x13521=IKsin(j4);
IkReal x13522=(gconst29*r10);
IkReal x13523=(gconst29*r20);
IkReal x13524=(gconst28*r21);
IkReal x13525=((1.0)*cj2);
IkReal x13526=(gconst29*r00);
IkReal x13527=((1.0)*x13520);
IkReal x13528=((1.0)*x13521);
IkReal x13529=(gconst28*x13520);
IkReal x13530=(gconst28*x13521);
evalcond[0]=(((r11*x13529))+((r12*x13521))+(((-1.0)*x13522*x13527)));
evalcond[1]=((((-1.0)*r22*x13527))+((x13521*x13524))+(((-1.0)*x13523*x13528)));
evalcond[2]=((((-1.0)*x13526*x13528))+((r01*x13530))+(((-1.0)*r02*x13527)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13527))+((r11*x13530))+(((-1.0)*x13522*x13528)));
evalcond[4]=(((x13520*x13524))+((sj1*sj2))+(((-1.0)*cj1*x13525))+((r22*x13521))+(((-1.0)*x13523*x13527)));
evalcond[5]=(((r01*x13529))+(((-1.0)*sj1*x13525))+((r02*x13521))+(((-1.0)*cj1*sj2))+(((-1.0)*x13526*x13527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13531=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13531.valid){
continue;
}
CheckValue<IkReal> x13532 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13531.value)))+(x13532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13533=IKcos(j4);
IkReal x13534=IKsin(j4);
IkReal x13535=(gconst29*r10);
IkReal x13536=(gconst29*r20);
IkReal x13537=(gconst28*r21);
IkReal x13538=((1.0)*cj2);
IkReal x13539=(gconst29*r00);
IkReal x13540=((1.0)*x13533);
IkReal x13541=((1.0)*x13534);
IkReal x13542=(gconst28*x13533);
IkReal x13543=(gconst28*x13534);
evalcond[0]=(((r11*x13542))+((r12*x13534))+(((-1.0)*x13535*x13540)));
evalcond[1]=((((-1.0)*x13536*x13541))+((x13534*x13537))+(((-1.0)*r22*x13540)));
evalcond[2]=((((-1.0)*x13539*x13541))+((r01*x13543))+(((-1.0)*r02*x13540)));
evalcond[3]=((1.0)+((r11*x13543))+(((-1.0)*r12*x13540))+(((-1.0)*x13535*x13541)));
evalcond[4]=((((-1.0)*x13536*x13540))+((x13533*x13537))+(((-1.0)*cj1*x13538))+((sj1*sj2))+((r22*x13534)));
evalcond[5]=((((-1.0)*x13539*x13540))+(((-1.0)*sj1*x13538))+((r01*x13542))+((r02*x13534))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13546 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13546.valid){
continue;
}
IkReal x13544=((1.0)*(x13546.value));
IkReal x13545=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13544)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13544)));
IkReal gconst28=((1.0)*r21*x13545);
IkReal gconst29=((-1.0)*r20*x13545);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13549 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13549.valid){
continue;
}
IkReal x13547=((1.0)*(x13549.value));
IkReal x13548=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13547)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13547)));
IkReal gconst28=((1.0)*r21*x13548);
IkReal gconst29=((-1.0)*r20*x13548);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13552 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13552.valid){
continue;
}
IkReal x13550=((1.0)*(x13552.value));
IkReal x13551=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13550)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13550)));
IkReal gconst28=((1.0)*r21*x13551);
IkReal gconst29=((-1.0)*r20*x13551);
IkReal x13553=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13557=IKPowWithIntegerCheck(x13553,-1);
if(!x13557.valid){
continue;
}
IkReal x13554=x13557.value;
IkReal x13555=((1.0)*x13554);
IkReal x13556=((((-1.0)*(r12*r12)))+(((-1.0)*x13555*(r11*r11)*(r21*r21)))+(((-1.0)*x13555*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13554)));
j4eval[0]=x13556;
j4eval[1]=r12;
j4eval[2]=x13553;
j4eval[3]=IKsign(x13556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13558=(gconst28*r11);
IkReal x13559=(gconst29*r10);
CheckValue<IkReal> x13560 = IKatan2WithCheck(IkReal((x13558+(((-1.0)*x13559)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13560.valid){
continue;
}
CheckValue<IkReal> x13561=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13559*x13559)))+(((2.0)*x13558*x13559))+(((-1.0)*(x13558*x13558)))+(((-1.0)*(r12*r12))))),-1);
if(!x13561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13560.value)+(((1.5707963267949)*(x13561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13562=IKcos(j4);
IkReal x13563=IKsin(j4);
IkReal x13564=(gconst29*r10);
IkReal x13565=(gconst29*r20);
IkReal x13566=(gconst28*r21);
IkReal x13567=(gconst29*r00);
IkReal x13568=((1.0)*x13562);
IkReal x13569=((1.0)*x13563);
IkReal x13570=(gconst28*x13562);
IkReal x13571=(gconst28*x13563);
evalcond[0]=((((-1.0)*x13564*x13568))+((r11*x13570))+((r12*x13563)));
evalcond[1]=(((x13563*x13566))+(((-1.0)*x13565*x13569))+(((-1.0)*r22*x13568)));
evalcond[2]=((((-1.0)*x13567*x13569))+(((-1.0)*r02*x13568))+((r01*x13571)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13568))+(((-1.0)*x13564*x13569))+((r11*x13571)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13562*x13566))+((r22*x13563))+(((-1.0)*x13565*x13568)));
evalcond[5]=((((-1.0)*x13567*x13568))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13563))+((r01*x13570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13572=((1.0)*gconst29);
CheckValue<IkReal> x13573 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13572))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13573.valid){
continue;
}
CheckValue<IkReal> x13574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13572))+(((-1.0)*gconst28*r00)))),-1);
if(!x13574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13573.value)+(((1.5707963267949)*(x13574.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13575=IKcos(j4);
IkReal x13576=IKsin(j4);
IkReal x13577=(gconst29*r10);
IkReal x13578=(gconst29*r20);
IkReal x13579=(gconst28*r21);
IkReal x13580=(gconst29*r00);
IkReal x13581=((1.0)*x13575);
IkReal x13582=((1.0)*x13576);
IkReal x13583=(gconst28*x13575);
IkReal x13584=(gconst28*x13576);
evalcond[0]=(((r12*x13576))+(((-1.0)*x13577*x13581))+((r11*x13583)));
evalcond[1]=((((-1.0)*x13578*x13582))+(((-1.0)*r22*x13581))+((x13576*x13579)));
evalcond[2]=((((-1.0)*r02*x13581))+((r01*x13584))+(((-1.0)*x13580*x13582)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13581))+(((-1.0)*x13577*x13582))+((r11*x13584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13578*x13581))+((cj1*sj2))+((x13575*x13579))+((r22*x13576)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13583))+((r02*x13576))+(((-1.0)*x13580*x13581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13585=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13585.valid){
continue;
}
CheckValue<IkReal> x13586 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13585.value)))+(x13586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13587=IKcos(j4);
IkReal x13588=IKsin(j4);
IkReal x13589=(gconst29*r10);
IkReal x13590=(gconst29*r20);
IkReal x13591=(gconst28*r21);
IkReal x13592=(gconst29*r00);
IkReal x13593=((1.0)*x13587);
IkReal x13594=((1.0)*x13588);
IkReal x13595=(gconst28*x13587);
IkReal x13596=(gconst28*x13588);
evalcond[0]=(((r11*x13595))+((r12*x13588))+(((-1.0)*x13589*x13593)));
evalcond[1]=(((x13588*x13591))+(((-1.0)*x13590*x13594))+(((-1.0)*r22*x13593)));
evalcond[2]=((((-1.0)*x13592*x13594))+((r01*x13596))+(((-1.0)*r02*x13593)));
evalcond[3]=((1.0)+((r11*x13596))+(((-1.0)*x13589*x13594))+(((-1.0)*r12*x13593)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13587*x13591))+(((-1.0)*x13590*x13593))+((r22*x13588)));
evalcond[5]=((((-1.0)*x13592*x13593))+((r01*x13595))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13599 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13599.valid){
continue;
}
IkReal x13597=((1.0)*(x13599.value));
IkReal x13598=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13597)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13597)));
IkReal gconst28=((1.0)*r21*x13598);
IkReal gconst29=((-1.0)*r20*x13598);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13602 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13602.valid){
continue;
}
IkReal x13600=((1.0)*(x13602.value));
IkReal x13601=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13600)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13600)));
IkReal gconst28=((1.0)*r21*x13601);
IkReal gconst29=((-1.0)*r20*x13601);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13605 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13605.valid){
continue;
}
IkReal x13603=((1.0)*(x13605.value));
IkReal x13604=x13430;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13603)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13603)));
IkReal gconst28=((1.0)*r21*x13604);
IkReal gconst29=((-1.0)*r20*x13604);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13606=(gconst29*r10);
IkReal x13607=(gconst28*r11);
CheckValue<IkReal> x13608=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13607*x13607)+(((-2.0)*x13606*x13607))+(x13606*x13606))),-1);
if(!x13608.valid){
continue;
}
CheckValue<IkReal> x13609 = IKatan2WithCheck(IkReal(((((-1.0)*x13607))+x13606)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13608.value)))+(x13609.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13610=IKsin(j4);
IkReal x13611=IKcos(j4);
IkReal x13612=(gconst28*r11);
IkReal x13613=((1.0)*x13611);
IkReal x13614=(gconst29*x13611);
IkReal x13615=(gconst28*x13610);
IkReal x13616=((1.0)*x13610);
IkReal x13617=(gconst29*x13616);
evalcond[0]=(((r21*x13615))+(((-1.0)*r20*x13617))+(((-1.0)*r22*x13613)));
evalcond[1]=((((-1.0)*r02*x13613))+((r01*x13615))+(((-1.0)*r00*x13617)));
evalcond[2]=((((-1.0)*x13612*x13613))+((r10*x13614))+(((-1.0)*r12*x13616)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13617))+((x13610*x13612))+(((-1.0)*r12*x13613)));
evalcond[4]=((((-1.0)*gconst28*r21*x13613))+((cj2*sj1))+((cj1*sj2))+((r20*x13614))+(((-1.0)*r22*x13616)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13616))+((r00*x13614))+(((-1.0)*gconst28*r01*x13613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13618=((1.0)*gconst29);
CheckValue<IkReal> x13619 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13618))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13619.valid){
continue;
}
CheckValue<IkReal> x13620=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13618)))),-1);
if(!x13620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13619.value)+(((1.5707963267949)*(x13620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13621=IKsin(j4);
IkReal x13622=IKcos(j4);
IkReal x13623=(gconst28*r11);
IkReal x13624=((1.0)*x13622);
IkReal x13625=(gconst29*x13622);
IkReal x13626=(gconst28*x13621);
IkReal x13627=((1.0)*x13621);
IkReal x13628=(gconst29*x13627);
evalcond[0]=(((r21*x13626))+(((-1.0)*r22*x13624))+(((-1.0)*r20*x13628)));
evalcond[1]=((((-1.0)*r00*x13628))+((r01*x13626))+(((-1.0)*r02*x13624)));
evalcond[2]=(((r10*x13625))+(((-1.0)*x13623*x13624))+(((-1.0)*r12*x13627)));
evalcond[3]=((1.0)+((x13621*x13623))+(((-1.0)*r10*x13628))+(((-1.0)*r12*x13624)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13624))+(((-1.0)*r22*x13627))+((r20*x13625)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13624))+((r00*x13625))+(((-1.0)*r02*x13627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13629=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13629.valid){
continue;
}
CheckValue<IkReal> x13630 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13629.value)))+(x13630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13631=IKsin(j4);
IkReal x13632=IKcos(j4);
IkReal x13633=(gconst28*r11);
IkReal x13634=((1.0)*x13632);
IkReal x13635=(gconst29*x13632);
IkReal x13636=(gconst28*x13631);
IkReal x13637=((1.0)*x13631);
IkReal x13638=(gconst29*x13637);
evalcond[0]=((((-1.0)*r22*x13634))+((r21*x13636))+(((-1.0)*r20*x13638)));
evalcond[1]=((((-1.0)*r02*x13634))+(((-1.0)*r00*x13638))+((r01*x13636)));
evalcond[2]=(((r10*x13635))+(((-1.0)*r12*x13637))+(((-1.0)*x13633*x13634)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13634))+((x13631*x13633))+(((-1.0)*r10*x13638)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13634))+(((-1.0)*r22*x13637))+((r20*x13635)));
evalcond[5]=((((-1.0)*r02*x13637))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13634))+((r00*x13635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13639=gconst28*gconst28;
IkReal x13640=gconst29*gconst29;
IkReal x13641=(r11*r21);
IkReal x13642=(gconst29*sj3);
IkReal x13643=((1.0)*cj3);
IkReal x13644=(r10*r20);
IkReal x13645=(r10*r21);
IkReal x13646=(r11*r20);
IkReal x13647=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13648=IKPowWithIntegerCheck(IKsign((((x13646*x13647))+(((-1.0)*r12*r22*x13643))+(((-1.0)*x13640*x13643*x13644))+(((-1.0)*x13639*x13641*x13643))+((x13645*x13647)))),-1);
if(!x13648.valid){
continue;
}
CheckValue<IkReal> x13649 = IKatan2WithCheck(IkReal((((r11*r22*x13642))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*sj3*x13640*x13646))+((sj3*x13639*x13645))+(((-1.0)*gconst28*x13642*x13644))+((gconst28*x13641*x13642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13648.value)))+(x13649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13650=IKsin(j4);
IkReal x13651=IKcos(j4);
IkReal x13652=(sj1*sj2);
IkReal x13653=(gconst29*r20);
IkReal x13654=(gconst28*r20);
IkReal x13655=((1.0)*cj2);
IkReal x13656=(r11*sj3);
IkReal x13657=(cj1*sj2);
IkReal x13658=(gconst29*r01);
IkReal x13659=(gconst29*r10);
IkReal x13660=(cj3*gconst28);
IkReal x13661=(cj3*gconst29);
IkReal x13662=(gconst28*sj3);
IkReal x13663=(gconst29*r00);
IkReal x13664=(cj1*x13655);
IkReal x13665=((1.0)*x13651);
IkReal x13666=((1.0)*x13650);
IkReal x13667=(gconst28*x13650);
IkReal x13668=(cj3*x13650);
IkReal x13669=(sj3*x13651);
evalcond[0]=((((-1.0)*r22*x13665))+(((-1.0)*x13653*x13666))+((r21*x13667)));
evalcond[1]=(((r01*x13667))+(((-1.0)*x13663*x13666))+(((-1.0)*r02*x13665)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13665))+((r11*x13667))+(((-1.0)*x13659*x13666)));
evalcond[3]=(((r12*x13668))+((r11*x13651*x13660))+(((-1.0)*cj3*x13659*x13665))+((r10*x13662))+((gconst29*x13656)));
evalcond[4]=(((x13659*x13669))+((r11*x13661))+(((-1.0)*gconst28*x13656*x13665))+((r10*x13660))+(((-1.0)*r12*sj3*x13666)));
evalcond[5]=(((cj2*sj1))+((r21*x13651*x13660))+x13657+((gconst29*r21*sj3))+(((-1.0)*cj3*x13653*x13665))+((r22*x13668))+((sj3*x13654)));
evalcond[6]=(x13652+((r02*x13668))+((r00*x13662))+(((-1.0)*r00*x13661*x13665))+(((-1.0)*x13664))+((sj3*x13658))+((r01*x13651*x13660)));
evalcond[7]=((((-1.0)*r22*sj3*x13666))+((x13653*x13669))+x13652+(((-1.0)*x13664))+((cj3*x13654))+((r21*x13661))+(((-1.0)*r21*x13662*x13665)));
evalcond[8]=((((-1.0)*x13657))+(((-1.0)*r02*sj3*x13666))+((r00*x13660))+((cj3*x13658))+(((-1.0)*sj1*x13655))+((x13663*x13669))+(((-1.0)*r01*x13662*x13665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13670=((1.0)*gconst29);
CheckValue<IkReal> x13671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13670))+(((-1.0)*gconst28*r00)))),-1);
if(!x13671.valid){
continue;
}
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13670))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13671.value)))+(x13672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13673=IKsin(j4);
IkReal x13674=IKcos(j4);
IkReal x13675=(sj1*sj2);
IkReal x13676=(gconst29*r20);
IkReal x13677=(gconst28*r20);
IkReal x13678=((1.0)*cj2);
IkReal x13679=(r11*sj3);
IkReal x13680=(cj1*sj2);
IkReal x13681=(gconst29*r01);
IkReal x13682=(gconst29*r10);
IkReal x13683=(cj3*gconst28);
IkReal x13684=(cj3*gconst29);
IkReal x13685=(gconst28*sj3);
IkReal x13686=(gconst29*r00);
IkReal x13687=(cj1*x13678);
IkReal x13688=((1.0)*x13674);
IkReal x13689=((1.0)*x13673);
IkReal x13690=(gconst28*x13673);
IkReal x13691=(cj3*x13673);
IkReal x13692=(sj3*x13674);
evalcond[0]=((((-1.0)*r22*x13688))+(((-1.0)*x13676*x13689))+((r21*x13690)));
evalcond[1]=(((r01*x13690))+(((-1.0)*x13686*x13689))+(((-1.0)*r02*x13688)));
evalcond[2]=((1.0)+(((-1.0)*x13682*x13689))+(((-1.0)*r12*x13688))+((r11*x13690)));
evalcond[3]=(((r11*x13674*x13683))+(((-1.0)*cj3*x13682*x13688))+((gconst29*x13679))+((r10*x13685))+((r12*x13691)));
evalcond[4]=((((-1.0)*r12*sj3*x13689))+((r11*x13684))+(((-1.0)*gconst28*x13679*x13688))+((r10*x13683))+((x13682*x13692)));
evalcond[5]=(((cj2*sj1))+x13680+((gconst29*r21*sj3))+((r22*x13691))+((sj3*x13677))+(((-1.0)*cj3*x13676*x13688))+((r21*x13674*x13683)));
evalcond[6]=(x13675+(((-1.0)*r00*x13684*x13688))+((r00*x13685))+(((-1.0)*x13687))+((r02*x13691))+((sj3*x13681))+((r01*x13674*x13683)));
evalcond[7]=(x13675+((cj3*x13677))+((x13676*x13692))+(((-1.0)*r21*x13685*x13688))+(((-1.0)*x13687))+(((-1.0)*r22*sj3*x13689))+((r21*x13684)));
evalcond[8]=((((-1.0)*r02*sj3*x13689))+(((-1.0)*sj1*x13678))+((cj3*x13681))+(((-1.0)*r01*x13685*x13688))+(((-1.0)*x13680))+((r00*x13683))+((x13686*x13692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13693=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13693.valid){
continue;
}
CheckValue<IkReal> x13694 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13694.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13693.value)))+(x13694.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13695=IKsin(j4);
IkReal x13696=IKcos(j4);
IkReal x13697=(sj1*sj2);
IkReal x13698=(gconst29*r20);
IkReal x13699=(gconst28*r20);
IkReal x13700=((1.0)*cj2);
IkReal x13701=(r11*sj3);
IkReal x13702=(cj1*sj2);
IkReal x13703=(gconst29*r01);
IkReal x13704=(gconst29*r10);
IkReal x13705=(cj3*gconst28);
IkReal x13706=(cj3*gconst29);
IkReal x13707=(gconst28*sj3);
IkReal x13708=(gconst29*r00);
IkReal x13709=(cj1*x13700);
IkReal x13710=((1.0)*x13696);
IkReal x13711=((1.0)*x13695);
IkReal x13712=(gconst28*x13695);
IkReal x13713=(cj3*x13695);
IkReal x13714=(sj3*x13696);
evalcond[0]=(((r21*x13712))+(((-1.0)*r22*x13710))+(((-1.0)*x13698*x13711)));
evalcond[1]=(((r01*x13712))+(((-1.0)*r02*x13710))+(((-1.0)*x13708*x13711)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13710))+(((-1.0)*x13704*x13711))+((r11*x13712)));
evalcond[3]=(((r12*x13713))+((gconst29*x13701))+(((-1.0)*cj3*x13704*x13710))+((r11*x13696*x13705))+((r10*x13707)));
evalcond[4]=(((x13704*x13714))+(((-1.0)*gconst28*x13701*x13710))+((r10*x13705))+((r11*x13706))+(((-1.0)*r12*sj3*x13711)));
evalcond[5]=((((-1.0)*cj3*x13698*x13710))+((cj2*sj1))+((sj3*x13699))+((gconst29*r21*sj3))+x13702+((r22*x13713))+((r21*x13696*x13705)));
evalcond[6]=(x13697+((sj3*x13703))+((r01*x13696*x13705))+(((-1.0)*r00*x13706*x13710))+((r00*x13707))+((r02*x13713))+(((-1.0)*x13709)));
evalcond[7]=(((r21*x13706))+x13697+(((-1.0)*r22*sj3*x13711))+(((-1.0)*r21*x13707*x13710))+((cj3*x13699))+((x13698*x13714))+(((-1.0)*x13709)));
evalcond[8]=((((-1.0)*sj1*x13700))+(((-1.0)*x13702))+(((-1.0)*r01*x13707*x13710))+((x13708*x13714))+((cj3*x13703))+((r00*x13705))+(((-1.0)*r02*sj3*x13711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13715=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13715);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13715);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13716=(r11*sj5);
IkReal x13717=((1.0)*cj5*r10);
j4eval[0]=(x13716+(((-1.0)*x13717)));
j4eval[1]=((((-1.0)*cj3*x13717))+((cj3*x13716)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13718=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13718);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13718);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13719=(cj5*r10);
IkReal x13720=(r11*sj5);
j4eval[0]=((((-1.0)*x13719))+x13720);
j4eval[1]=((((-1.0)*sj3*x13720))+((sj3*x13719)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13721=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13721);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13721);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13722=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13722);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13722);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13723=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13723))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13723)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13724=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13724);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13724);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13725=((1.0)*sj1);
CheckValue<IkReal> x13726=IKPowWithIntegerCheck(r22,-1);
if(!x13726.valid){
continue;
}
CheckValue<IkReal> x13727=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13727.valid){
continue;
}
if( IKabs(((x13726.value)*(((((-1.0)*cj2*x13725))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13727.value)*(((((-1.0)*sj2*x13725))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13726.value)*(((((-1.0)*cj2*x13725))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13727.value)*(((((-1.0)*sj2*x13725))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13726.value)*(((((-1.0)*cj2*x13725))+(((-1.0)*cj1*sj2))))), ((x13727.value)*(((((-1.0)*sj2*x13725))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13728=IKsin(j4);
IkReal x13729=IKcos(j4);
IkReal x13730=((1.0)*cj5);
IkReal x13731=(sj5*x13729);
IkReal x13732=(sj5*x13728);
evalcond[0]=((-1.0)*r22*x13729);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13728)));
evalcond[2]=((((-1.0)*r00*x13728*x13730))+((r01*x13732)));
evalcond[3]=(((r11*x13731))+(((-1.0)*r10*x13729*x13730)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13728*x13730))+((r11*x13732)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13731))+(((-1.0)*r00*x13729*x13730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13733=((1.0)*cj5);
CheckValue<IkReal> x13734=IKPowWithIntegerCheck(((((-1.0)*r10*x13733))+((r11*sj5))),-1);
if(!x13734.valid){
continue;
}
CheckValue<IkReal> x13735=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13733))),-1);
if(!x13735.valid){
continue;
}
if( IKabs(((-1.0)*(x13734.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13735.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13734.value)))+IKsqr(((x13735.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13734.value)), ((x13735.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13736=IKsin(j4);
IkReal x13737=IKcos(j4);
IkReal x13738=((1.0)*cj5);
IkReal x13739=(sj5*x13737);
IkReal x13740=(sj5*x13736);
evalcond[0]=((-1.0)*r22*x13737);
evalcond[1]=(((cj2*sj1))+((r22*x13736))+((cj1*sj2)));
evalcond[2]=(((r01*x13740))+(((-1.0)*r00*x13736*x13738)));
evalcond[3]=((((-1.0)*r10*x13737*x13738))+((r11*x13739)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13736*x13738))+((r11*x13740)));
evalcond[5]=((((-1.0)*r00*x13737*x13738))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13741=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13741);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13741);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13742=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13742);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13742);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13743=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13743.valid){
continue;
}
CheckValue<IkReal> x13744=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13744.valid){
continue;
}
if( IKabs(((-1.0)*(x13743.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13744.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13743.value)))+IKsqr(((x13744.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13743.value)), ((x13744.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13745=IKsin(j4);
IkReal x13746=IKcos(j4);
IkReal x13747=(cj5*x13746);
IkReal x13748=(sj5*x13745);
IkReal x13749=((1.0)*cj5*x13745);
IkReal x13750=((1.0)*sj5*x13746);
evalcond[0]=((-1.0)*r22*x13746);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13745)));
evalcond[2]=(((r01*x13748))+(((-1.0)*r00*x13749)));
evalcond[3]=(((r10*x13747))+(((-1.0)*r11*x13750)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13749))+((r11*x13748)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13750))+((r00*x13747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13751=IKPowWithIntegerCheck(r22,-1);
if(!x13751.valid){
continue;
}
CheckValue<IkReal> x13752=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13752.valid){
continue;
}
if( IKabs(((x13751.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13752.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13751.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13752.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13751.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13752.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13753=IKsin(j4);
IkReal x13754=IKcos(j4);
IkReal x13755=(cj5*x13754);
IkReal x13756=(sj5*x13753);
IkReal x13757=((1.0)*cj5*x13753);
IkReal x13758=((1.0)*sj5*x13754);
evalcond[0]=((-1.0)*r22*x13754);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13753)));
evalcond[2]=((((-1.0)*r00*x13757))+((r01*x13756)));
evalcond[3]=(((r10*x13755))+(((-1.0)*r11*x13758)));
evalcond[4]=((1.0)+((r11*x13756))+(((-1.0)*r10*x13757)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13758))+((r00*x13755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13759=((1.0)*r10);
CheckValue<IkReal> x13760=IKPowWithIntegerCheck(cj3,-1);
if(!x13760.valid){
continue;
}
CheckValue<IkReal> x13761=IKPowWithIntegerCheck(r22,-1);
if(!x13761.valid){
continue;
}
CheckValue<IkReal> x13762=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13759))+((cj3*r11*sj5))),-1);
if(!x13762.valid){
continue;
}
if( IKabs(((x13760.value)*(x13761.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13762.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13760.value)*(x13761.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13762.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13759))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13760.value)*(x13761.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13762.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13759))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13763=IKsin(j4);
IkReal x13764=IKcos(j4);
IkReal x13765=(sj1*sj2);
IkReal x13766=(r11*sj5);
IkReal x13767=(r00*sj3);
IkReal x13768=(cj5*r01);
IkReal x13769=((1.0)*cj1);
IkReal x13770=(cj3*sj5);
IkReal x13771=(cj5*r11);
IkReal x13772=(r10*sj3);
IkReal x13773=(cj2*sj1);
IkReal x13774=((1.0)*cj5);
IkReal x13775=((1.0)*sj3);
IkReal x13776=(r01*sj5);
IkReal x13777=(cj2*x13769);
IkReal x13778=(cj3*x13764);
IkReal x13779=(r22*x13763);
IkReal x13780=(cj5*x13764);
IkReal x13781=(x13763*x13774);
evalcond[0]=((-1.0)*r22*x13764);
evalcond[1]=(x13773+((cj1*sj2))+((cj3*x13779)));
evalcond[2]=((((-1.0)*r00*x13781))+((x13763*x13776)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13781))+((x13763*x13766)));
evalcond[4]=((((-1.0)*x13777))+x13765+(((-1.0)*x13775*x13779)));
evalcond[5]=(((sj5*x13772))+((sj3*x13771))+((x13766*x13778))+(((-1.0)*r10*x13774*x13778)));
evalcond[6]=(((r10*x13770))+((cj3*x13771))+(((-1.0)*x13764*x13766*x13775))+((x13772*x13780)));
evalcond[7]=((((-1.0)*x13777))+(((-1.0)*r00*x13774*x13778))+((sj5*x13767))+x13765+((sj3*x13768))+((r01*x13764*x13770)));
evalcond[8]=((((-1.0)*x13773))+((r00*x13770))+(((-1.0)*sj2*x13769))+((cj3*x13768))+(((-1.0)*x13764*x13775*x13776))+((x13767*x13780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13782=(cj5*r10);
IkReal x13783=((1.0)*r11);
CheckValue<IkReal> x13784=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13782))),-1);
if(!x13784.valid){
continue;
}
CheckValue<IkReal> x13785=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13783))+((sj3*x13782))),-1);
if(!x13785.valid){
continue;
}
if( IKabs(((-1.0)*(x13784.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13785.value)*(((((-1.0)*cj3*cj5*x13783))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13784.value)))+IKsqr(((x13785.value)*(((((-1.0)*cj3*cj5*x13783))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13784.value)), ((x13785.value)*(((((-1.0)*cj3*cj5*x13783))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13786=IKsin(j4);
IkReal x13787=IKcos(j4);
IkReal x13788=(sj1*sj2);
IkReal x13789=(r11*sj5);
IkReal x13790=(r00*sj3);
IkReal x13791=(cj5*r01);
IkReal x13792=((1.0)*cj1);
IkReal x13793=(cj3*sj5);
IkReal x13794=(cj5*r11);
IkReal x13795=(r10*sj3);
IkReal x13796=(cj2*sj1);
IkReal x13797=((1.0)*cj5);
IkReal x13798=((1.0)*sj3);
IkReal x13799=(r01*sj5);
IkReal x13800=(cj2*x13792);
IkReal x13801=(cj3*x13787);
IkReal x13802=(r22*x13786);
IkReal x13803=(cj5*x13787);
IkReal x13804=(x13786*x13797);
evalcond[0]=((-1.0)*r22*x13787);
evalcond[1]=(x13796+((cj1*sj2))+((cj3*x13802)));
evalcond[2]=((((-1.0)*r00*x13804))+((x13786*x13799)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13804))+((x13786*x13789)));
evalcond[4]=((((-1.0)*x13800))+x13788+(((-1.0)*x13798*x13802)));
evalcond[5]=((((-1.0)*r10*x13797*x13801))+((x13789*x13801))+((sj3*x13794))+((sj5*x13795)));
evalcond[6]=((((-1.0)*x13787*x13789*x13798))+((x13795*x13803))+((cj3*x13794))+((r10*x13793)));
evalcond[7]=((((-1.0)*x13800))+x13788+(((-1.0)*r00*x13797*x13801))+((sj3*x13791))+((sj5*x13790))+((r01*x13787*x13793)));
evalcond[8]=(((r00*x13793))+(((-1.0)*sj2*x13792))+(((-1.0)*x13796))+((cj3*x13791))+((x13790*x13803))+(((-1.0)*x13787*x13798*x13799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13805=((1.0)*sj3);
IkReal x13806=(r11*sj5);
IkReal x13807=((1.0)*cj5*r10);
CheckValue<IkReal> x13808=IKPowWithIntegerCheck(((((-1.0)*x13807))+x13806),-1);
if(!x13808.valid){
continue;
}
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(((((-1.0)*cj3*x13807))+((cj3*x13806))),-1);
if(!x13809.valid){
continue;
}
if( IKabs(((-1.0)*(x13808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13809.value)*(((((-1.0)*cj5*r11*x13805))+(((-1.0)*r10*sj5*x13805)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13808.value)))+IKsqr(((x13809.value)*(((((-1.0)*cj5*r11*x13805))+(((-1.0)*r10*sj5*x13805))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13808.value)), ((x13809.value)*(((((-1.0)*cj5*r11*x13805))+(((-1.0)*r10*sj5*x13805))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13810=IKsin(j4);
IkReal x13811=IKcos(j4);
IkReal x13812=(sj1*sj2);
IkReal x13813=(r11*sj5);
IkReal x13814=(r00*sj3);
IkReal x13815=(cj5*r01);
IkReal x13816=((1.0)*cj1);
IkReal x13817=(cj3*sj5);
IkReal x13818=(cj5*r11);
IkReal x13819=(r10*sj3);
IkReal x13820=(cj2*sj1);
IkReal x13821=((1.0)*cj5);
IkReal x13822=((1.0)*sj3);
IkReal x13823=(r01*sj5);
IkReal x13824=(cj2*x13816);
IkReal x13825=(cj3*x13811);
IkReal x13826=(r22*x13810);
IkReal x13827=(cj5*x13811);
IkReal x13828=(x13810*x13821);
evalcond[0]=((-1.0)*r22*x13811);
evalcond[1]=(x13820+((cj1*sj2))+((cj3*x13826)));
evalcond[2]=(((x13810*x13823))+(((-1.0)*r00*x13828)));
evalcond[3]=((1.0)+((x13810*x13813))+(((-1.0)*r10*x13828)));
evalcond[4]=((((-1.0)*x13824))+x13812+(((-1.0)*x13822*x13826)));
evalcond[5]=(((sj3*x13818))+(((-1.0)*r10*x13821*x13825))+((sj5*x13819))+((x13813*x13825)));
evalcond[6]=(((r10*x13817))+(((-1.0)*x13811*x13813*x13822))+((x13819*x13827))+((cj3*x13818)));
evalcond[7]=((((-1.0)*x13824))+x13812+(((-1.0)*r00*x13821*x13825))+((r01*x13811*x13817))+((sj3*x13815))+((sj5*x13814)));
evalcond[8]=((((-1.0)*x13811*x13822*x13823))+((r00*x13817))+(((-1.0)*sj2*x13816))+((x13814*x13827))+(((-1.0)*x13820))+((cj3*x13815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13829=cj5*cj5;
IkReal x13830=((1.0)*cj3);
IkReal x13831=(r10*r21);
IkReal x13832=(cj5*sj5);
IkReal x13833=(r11*r21);
IkReal x13834=(r11*r20);
IkReal x13835=(r22*sj3);
IkReal x13836=(r10*r20);
IkReal x13837=((1.0)*sj3*x13829);
CheckValue<IkReal> x13838 = IKatan2WithCheck(IkReal((((cj5*r11*x13835))+((r10*sj5*x13835)))),IkReal(((((-1.0)*x13834*x13837))+(((-1.0)*sj3*x13832*x13836))+((sj3*x13831))+((sj3*x13832*x13833))+(((-1.0)*x13831*x13837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13838.valid){
continue;
}
CheckValue<IkReal> x13839=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13830*x13833))+(((-1.0)*r12*r22*x13830))+(((-1.0)*x13829*x13830*x13836))+((cj3*x13831*x13832))+((cj3*x13829*x13833))+((cj3*x13832*x13834)))),-1);
if(!x13839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13838.value)+(((1.5707963267949)*(x13839.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13840=IKsin(j4);
IkReal x13841=IKcos(j4);
IkReal x13842=(sj1*sj2);
IkReal x13843=(cj5*sj3);
IkReal x13844=(cj5*r10);
IkReal x13845=(r00*sj5);
IkReal x13846=(r11*sj5);
IkReal x13847=(cj3*cj5);
IkReal x13848=((1.0)*cj1);
IkReal x13849=(cj3*sj5);
IkReal x13850=(r21*sj5);
IkReal x13851=(cj2*sj1);
IkReal x13852=(sj3*sj5);
IkReal x13853=(r01*sj5);
IkReal x13854=(cj2*x13848);
IkReal x13855=((1.0)*x13841);
IkReal x13856=((1.0)*x13840);
IkReal x13857=(cj3*x13840);
IkReal x13858=(cj3*x13841);
evalcond[0]=((((-1.0)*cj5*r20*x13856))+((x13840*x13850))+(((-1.0)*r22*x13855)));
evalcond[1]=(((x13840*x13853))+(((-1.0)*cj5*r00*x13856))+(((-1.0)*r02*x13855)));
evalcond[2]=((1.0)+((x13840*x13846))+(((-1.0)*x13844*x13856))+(((-1.0)*r12*x13855)));
evalcond[3]=(((r12*x13857))+((r11*x13843))+(((-1.0)*cj3*x13844*x13855))+((x13846*x13858))+((r10*x13852)));
evalcond[4]=((((-1.0)*r12*sj3*x13856))+((r11*x13847))+((r10*x13849))+(((-1.0)*sj3*x13846*x13855))+((r10*x13841*x13843)));
evalcond[5]=(((r22*x13857))+x13851+((cj1*sj2))+((r21*x13843))+((r21*x13841*x13849))+(((-1.0)*r20*x13847*x13855))+((r20*x13852)));
evalcond[6]=(((r01*x13841*x13849))+(((-1.0)*r00*x13847*x13855))+x13842+((sj3*x13845))+((r02*x13857))+(((-1.0)*x13854))+((r01*x13843)));
evalcond[7]=((((-1.0)*sj3*x13850*x13855))+x13842+((r21*x13847))+(((-1.0)*r22*sj3*x13856))+((r20*x13849))+(((-1.0)*x13854))+((r20*x13841*x13843)));
evalcond[8]=((((-1.0)*x13851))+((r00*x13841*x13843))+(((-1.0)*sj2*x13848))+(((-1.0)*r02*sj3*x13856))+(((-1.0)*r01*x13852*x13855))+((r01*x13847))+((cj3*x13845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13859=((1.0)*cj5);
CheckValue<IkReal> x13860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13859))+(((-1.0)*r00*sj5)))),-1);
if(!x13860.valid){
continue;
}
CheckValue<IkReal> x13861 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13860.value)))+(x13861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13862=IKsin(j4);
IkReal x13863=IKcos(j4);
IkReal x13864=(sj1*sj2);
IkReal x13865=(cj5*sj3);
IkReal x13866=(cj5*r10);
IkReal x13867=(r00*sj5);
IkReal x13868=(r11*sj5);
IkReal x13869=(cj3*cj5);
IkReal x13870=((1.0)*cj1);
IkReal x13871=(cj3*sj5);
IkReal x13872=(r21*sj5);
IkReal x13873=(cj2*sj1);
IkReal x13874=(sj3*sj5);
IkReal x13875=(r01*sj5);
IkReal x13876=(cj2*x13870);
IkReal x13877=((1.0)*x13863);
IkReal x13878=((1.0)*x13862);
IkReal x13879=(cj3*x13862);
IkReal x13880=(cj3*x13863);
evalcond[0]=((((-1.0)*cj5*r20*x13878))+(((-1.0)*r22*x13877))+((x13862*x13872)));
evalcond[1]=((((-1.0)*cj5*r00*x13878))+(((-1.0)*r02*x13877))+((x13862*x13875)));
evalcond[2]=((1.0)+((x13862*x13868))+(((-1.0)*r12*x13877))+(((-1.0)*x13866*x13878)));
evalcond[3]=((((-1.0)*cj3*x13866*x13877))+((r11*x13865))+((r12*x13879))+((x13868*x13880))+((r10*x13874)));
evalcond[4]=(((r11*x13869))+(((-1.0)*r12*sj3*x13878))+((r10*x13863*x13865))+(((-1.0)*sj3*x13868*x13877))+((r10*x13871)));
evalcond[5]=(x13873+((cj1*sj2))+((r21*x13865))+((r20*x13874))+((r21*x13863*x13871))+(((-1.0)*r20*x13869*x13877))+((r22*x13879)));
evalcond[6]=(((r01*x13865))+x13864+(((-1.0)*x13876))+((sj3*x13867))+((r01*x13863*x13871))+((r02*x13879))+(((-1.0)*r00*x13869*x13877)));
evalcond[7]=(x13864+(((-1.0)*x13876))+((r21*x13869))+((r20*x13871))+(((-1.0)*r22*sj3*x13878))+(((-1.0)*sj3*x13872*x13877))+((r20*x13863*x13865)));
evalcond[8]=(((r01*x13869))+(((-1.0)*r01*x13874*x13877))+((r00*x13863*x13865))+(((-1.0)*x13873))+(((-1.0)*sj2*x13870))+(((-1.0)*r02*sj3*x13878))+((cj3*x13867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13881=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13881.valid){
continue;
}
CheckValue<IkReal> x13882 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13881.value)))+(x13882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13883=IKsin(j4);
IkReal x13884=IKcos(j4);
IkReal x13885=(sj1*sj2);
IkReal x13886=(cj5*sj3);
IkReal x13887=(cj5*r10);
IkReal x13888=(r00*sj5);
IkReal x13889=(r11*sj5);
IkReal x13890=(cj3*cj5);
IkReal x13891=((1.0)*cj1);
IkReal x13892=(cj3*sj5);
IkReal x13893=(r21*sj5);
IkReal x13894=(cj2*sj1);
IkReal x13895=(sj3*sj5);
IkReal x13896=(r01*sj5);
IkReal x13897=(cj2*x13891);
IkReal x13898=((1.0)*x13884);
IkReal x13899=((1.0)*x13883);
IkReal x13900=(cj3*x13883);
IkReal x13901=(cj3*x13884);
evalcond[0]=((((-1.0)*cj5*r20*x13899))+((x13883*x13893))+(((-1.0)*r22*x13898)));
evalcond[1]=((((-1.0)*r02*x13898))+((x13883*x13896))+(((-1.0)*cj5*r00*x13899)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13898))+(((-1.0)*x13887*x13899))+((x13883*x13889)));
evalcond[3]=(((x13889*x13901))+((r10*x13895))+((r12*x13900))+(((-1.0)*cj3*x13887*x13898))+((r11*x13886)));
evalcond[4]=((((-1.0)*r12*sj3*x13899))+(((-1.0)*sj3*x13889*x13898))+((r10*x13892))+((r10*x13884*x13886))+((r11*x13890)));
evalcond[5]=(((r22*x13900))+x13894+((cj1*sj2))+((r20*x13895))+((r21*x13886))+(((-1.0)*r20*x13890*x13898))+((r21*x13884*x13892)));
evalcond[6]=(((r01*x13884*x13892))+((sj3*x13888))+((r02*x13900))+x13885+(((-1.0)*x13897))+((r01*x13886))+(((-1.0)*r00*x13890*x13898)));
evalcond[7]=((((-1.0)*r22*sj3*x13899))+x13885+((r20*x13892))+(((-1.0)*sj3*x13893*x13898))+((r21*x13890))+(((-1.0)*x13897))+((r20*x13884*x13886)));
evalcond[8]=((((-1.0)*r02*sj3*x13899))+((r00*x13884*x13886))+(((-1.0)*sj2*x13891))+((cj3*x13888))+(((-1.0)*r01*x13895*x13898))+((r01*x13890))+(((-1.0)*x13894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13902=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13902;
j4eval[1]=IKsign(x13902);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13903=((1.0)*cj5);
IkReal x13904=((((-1.0)*r21*x13903))+(((-1.0)*r20*sj5)));
j4eval[0]=x13904;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13903))))));
j4eval[2]=IKsign(x13904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13905=cj5*cj5;
IkReal x13906=(cj3*r21);
IkReal x13907=(cj5*sj5);
IkReal x13908=((1.0)*cj3);
IkReal x13909=(((r11*x13905*x13906))+(((-1.0)*r12*r22*x13908))+((cj3*r11*r20*x13907))+((r10*x13906*x13907))+(((-1.0)*r11*x13906))+(((-1.0)*r10*r20*x13905*x13908)));
j4eval[0]=x13909;
j4eval[1]=IKsign(x13909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13910=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13910;
j4eval[1]=IKsign(x13910);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13911=((1.0)*cj5);
IkReal x13912=((((-1.0)*r21*x13911))+(((-1.0)*r20*sj5)));
j4eval[0]=x13912;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13911))))));
j4eval[2]=IKsign(x13912);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13913=cj5*cj5;
IkReal x13914=r11*r11;
IkReal x13915=(cj5*r10);
IkReal x13916=(r11*sj5);
IkReal x13917=((((2.0)*x13915*x13916))+(((-1.0)*x13914))+((x13913*x13914))+(((-1.0)*(r12*r12)))+(((-1.0)*x13913*(r10*r10))));
j4eval[0]=x13917;
j4eval[1]=((IKabs(((((-1.0)*x13916))+x13915)))+(IKabs(r12)));
j4eval[2]=IKsign(x13917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13918=cj5*cj5;
IkReal x13919=r11*r11;
IkReal x13920=(cj5*r10);
IkReal x13921=(r11*sj5);
CheckValue<IkReal> x13922 = IKatan2WithCheck(IkReal(((((-1.0)*x13921))+x13920)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13922.valid){
continue;
}
CheckValue<IkReal> x13923=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13918*(r10*r10)))+(((-1.0)*x13919))+(((-1.0)*(r12*r12)))+((x13918*x13919))+(((2.0)*x13920*x13921)))),-1);
if(!x13923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13922.value)+(((1.5707963267949)*(x13923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13924=IKsin(j4);
IkReal x13925=IKcos(j4);
IkReal x13926=(cj5*r10);
IkReal x13927=(r01*sj5);
IkReal x13928=(cj5*r00);
IkReal x13929=(cj5*r20);
IkReal x13930=((1.0)*x13925);
IkReal x13931=((1.0)*x13924);
IkReal x13932=(sj5*x13924);
evalcond[0]=(((r21*x13932))+(((-1.0)*x13929*x13931))+(((-1.0)*r22*x13930)));
evalcond[1]=((((-1.0)*r02*x13930))+(((-1.0)*x13928*x13931))+((x13924*x13927)));
evalcond[2]=(((x13925*x13926))+(((-1.0)*r12*x13931))+(((-1.0)*r11*sj5*x13930)));
evalcond[3]=((-1.0)+((r11*x13932))+(((-1.0)*x13926*x13931))+(((-1.0)*r12*x13930)));
evalcond[4]=(((cj2*sj1))+((x13925*x13928))+(((-1.0)*x13927*x13930))+((cj1*sj2))+(((-1.0)*r02*x13931)));
evalcond[5]=(((x13925*x13929))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13931))+(((-1.0)*r21*sj5*x13930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13933=((1.0)*cj5);
CheckValue<IkReal> x13934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13933))+(((-1.0)*r20*sj5)))),-1);
if(!x13934.valid){
continue;
}
CheckValue<IkReal> x13935 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13933)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13934.value)))+(x13935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13936=IKsin(j4);
IkReal x13937=IKcos(j4);
IkReal x13938=(cj5*r10);
IkReal x13939=(r01*sj5);
IkReal x13940=(cj5*r00);
IkReal x13941=(cj5*r20);
IkReal x13942=((1.0)*x13937);
IkReal x13943=((1.0)*x13936);
IkReal x13944=(sj5*x13936);
evalcond[0]=((((-1.0)*x13941*x13943))+(((-1.0)*r22*x13942))+((r21*x13944)));
evalcond[1]=((((-1.0)*x13940*x13943))+(((-1.0)*r02*x13942))+((x13936*x13939)));
evalcond[2]=((((-1.0)*r11*sj5*x13942))+(((-1.0)*r12*x13943))+((x13937*x13938)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13942))+(((-1.0)*x13938*x13943))+((r11*x13944)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13937*x13940))+(((-1.0)*r02*x13943))+(((-1.0)*x13939*x13942)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13937*x13941))+(((-1.0)*r22*x13943))+(((-1.0)*r21*sj5*x13942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13945 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13945.valid){
continue;
}
CheckValue<IkReal> x13946=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13945.value)+(((1.5707963267949)*(x13946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13947=IKsin(j4);
IkReal x13948=IKcos(j4);
IkReal x13949=(cj5*r10);
IkReal x13950=(r01*sj5);
IkReal x13951=(cj5*r00);
IkReal x13952=(cj5*r20);
IkReal x13953=((1.0)*x13948);
IkReal x13954=((1.0)*x13947);
IkReal x13955=(sj5*x13947);
evalcond[0]=((((-1.0)*x13952*x13954))+((r21*x13955))+(((-1.0)*r22*x13953)));
evalcond[1]=((((-1.0)*r02*x13953))+((x13947*x13950))+(((-1.0)*x13951*x13954)));
evalcond[2]=((((-1.0)*r11*sj5*x13953))+((x13948*x13949))+(((-1.0)*r12*x13954)));
evalcond[3]=((-1.0)+((r11*x13955))+(((-1.0)*x13949*x13954))+(((-1.0)*r12*x13953)));
evalcond[4]=(((x13948*x13951))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13954))+(((-1.0)*x13950*x13953)));
evalcond[5]=(((x13948*x13952))+(((-1.0)*r21*sj5*x13953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13956=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13956;
j4eval[1]=IKsign(x13956);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13957=((1.0)*cj5);
IkReal x13958=((((-1.0)*r21*x13957))+(((-1.0)*r20*sj5)));
j4eval[0]=x13958;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13957))+((r01*sj5))))));
j4eval[2]=IKsign(x13958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13959=cj5*cj5;
IkReal x13960=r11*r11;
IkReal x13961=(r11*sj5);
IkReal x13962=(cj5*r10);
IkReal x13963=((r12*r12)+((x13959*(r10*r10)))+x13960+(((-2.0)*x13961*x13962))+(((-1.0)*x13959*x13960)));
j4eval[0]=x13963;
j4eval[1]=IKsign(x13963);
j4eval[2]=((IKabs((x13961+(((-1.0)*x13962)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13964=cj5*cj5;
IkReal x13965=r11*r11;
IkReal x13966=(cj5*r10);
IkReal x13967=(r11*sj5);
CheckValue<IkReal> x13968 = IKatan2WithCheck(IkReal((x13967+(((-1.0)*x13966)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13968.valid){
continue;
}
CheckValue<IkReal> x13969=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13965+(((-1.0)*x13964*x13965))+(((-2.0)*x13966*x13967))+((x13964*(r10*r10))))),-1);
if(!x13969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13968.value)+(((1.5707963267949)*(x13969.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13970=IKcos(j4);
IkReal x13971=IKsin(j4);
IkReal x13972=(cj5*r00);
IkReal x13973=(cj5*r10);
IkReal x13974=(r21*sj5);
IkReal x13975=(cj5*r20);
IkReal x13976=((1.0)*x13970);
IkReal x13977=((1.0)*x13971);
IkReal x13978=(sj5*x13971);
IkReal x13979=(sj5*x13970);
evalcond[0]=((((-1.0)*x13973*x13976))+((r11*x13979))+((r12*x13971)));
evalcond[1]=((((-1.0)*r22*x13976))+((x13971*x13974))+(((-1.0)*x13975*x13977)));
evalcond[2]=((((-1.0)*x13972*x13977))+(((-1.0)*r02*x13976))+((r01*x13978)));
evalcond[3]=((-1.0)+(((-1.0)*x13973*x13977))+(((-1.0)*r12*x13976))+((r11*x13978)));
evalcond[4]=((((-1.0)*x13972*x13976))+((cj2*sj1))+((r02*x13971))+((cj1*sj2))+((r01*x13979)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13970*x13974))+(((-1.0)*x13975*x13976))+((r22*x13971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13980=((1.0)*cj5);
CheckValue<IkReal> x13981 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13980)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13981.valid){
continue;
}
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13980))+(((-1.0)*r20*sj5)))),-1);
if(!x13982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13981.value)+(((1.5707963267949)*(x13982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13983=IKcos(j4);
IkReal x13984=IKsin(j4);
IkReal x13985=(cj5*r00);
IkReal x13986=(cj5*r10);
IkReal x13987=(r21*sj5);
IkReal x13988=(cj5*r20);
IkReal x13989=((1.0)*x13983);
IkReal x13990=((1.0)*x13984);
IkReal x13991=(sj5*x13984);
IkReal x13992=(sj5*x13983);
evalcond[0]=(((r12*x13984))+((r11*x13992))+(((-1.0)*x13986*x13989)));
evalcond[1]=((((-1.0)*x13988*x13990))+((x13984*x13987))+(((-1.0)*r22*x13989)));
evalcond[2]=((((-1.0)*r02*x13989))+(((-1.0)*x13985*x13990))+((r01*x13991)));
evalcond[3]=((-1.0)+((r11*x13991))+(((-1.0)*x13986*x13990))+(((-1.0)*r12*x13989)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13985*x13989))+((cj1*sj2))+((r02*x13984))+((r01*x13992)));
evalcond[5]=(((x13983*x13987))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x13984))+(((-1.0)*x13988*x13989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13993 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13993.valid){
continue;
}
CheckValue<IkReal> x13994=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13993.value)+(((1.5707963267949)*(x13994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13995=IKcos(j4);
IkReal x13996=IKsin(j4);
IkReal x13997=(cj5*r00);
IkReal x13998=(cj5*r10);
IkReal x13999=(r21*sj5);
IkReal x14000=(cj5*r20);
IkReal x14001=((1.0)*x13995);
IkReal x14002=((1.0)*x13996);
IkReal x14003=(sj5*x13996);
IkReal x14004=(sj5*x13995);
evalcond[0]=((((-1.0)*x13998*x14001))+((r12*x13996))+((r11*x14004)));
evalcond[1]=((((-1.0)*x14000*x14002))+((x13996*x13999))+(((-1.0)*r22*x14001)));
evalcond[2]=((((-1.0)*r02*x14001))+(((-1.0)*x13997*x14002))+((r01*x14003)));
evalcond[3]=((-1.0)+(((-1.0)*x13998*x14002))+((r11*x14003))+(((-1.0)*r12*x14001)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13996))+(((-1.0)*x13997*x14001))+((r01*x14004)));
evalcond[5]=((((-1.0)*x14000*x14001))+((x13995*x13999))+((r22*x13996))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14006 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14006)==0){
continue;
}
IkReal x14005=pow(x14006,-0.5);
CheckValue<IkReal> x14007 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14007.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14007.value));
IkReal gconst37=((-1.0)*r01*x14005);
IkReal gconst38=(r00*x14005);
CheckValue<IkReal> x14008 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14008.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14008.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
IkReal x14009=((-1.0)*(x14011.value));
IkReal x14010=x14005;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14009;
IkReal gconst36=x14009;
IkReal gconst37=((-1.0)*r01*x14010);
IkReal gconst38=(r00*x14010);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14014 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14014.valid){
continue;
}
IkReal x14012=((-1.0)*(x14014.value));
IkReal x14013=x14005;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14012;
IkReal gconst36=x14012;
IkReal gconst37=((-1.0)*r01*x14013);
IkReal gconst38=(r00*x14013);
CheckValue<IkReal> x14022=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14022.valid){
continue;
}
IkReal x14015=x14022.value;
IkReal x14016=(sj3*x14015);
IkReal x14017=(r11*x14016);
IkReal x14018=(r21*x14016);
IkReal x14019=(r20*x14016);
IkReal x14020=(r10*x14016);
IkReal x14021=(r00*r01*x14016);
j4eval[0]=IKsign((((r21*x14017*(r01*r01)))+((r12*r22*sj3))+((r10*x14019*(r00*r00)))+((r00*r01*r20*x14017))+((r00*r01*r10*x14018))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14023=gconst38*gconst38;
IkReal x14024=gconst37*gconst37;
IkReal x14025=((1.0)*cj3);
IkReal x14026=(r11*r20);
IkReal x14027=(r10*sj3);
IkReal x14028=(gconst37*gconst38);
IkReal x14029=(r11*sj3);
IkReal x14030=(r21*x14024);
IkReal x14031=(cj3*x14028);
CheckValue<IkReal> x14032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x14023*x14025))+((x14026*x14031))+(((-1.0)*r12*r22*x14025))+(((-1.0)*r11*x14025*x14030))+((r10*r21*x14031)))),-1);
if(!x14032.valid){
continue;
}
CheckValue<IkReal> x14033 = IKatan2WithCheck(IkReal((((gconst38*r22*x14029))+((gconst37*r22*x14027)))),IkReal((((r21*x14028*x14029))+((x14027*x14030))+(((-1.0)*r20*x14027*x14028))+(((-1.0)*sj3*x14023*x14026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14032.value)))+(x14033.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14034=IKsin(j4);
IkReal x14035=IKcos(j4);
IkReal x14036=(cj2*sj1);
IkReal x14037=(cj1*sj2);
IkReal x14038=(gconst38*r21);
IkReal x14039=(cj3*r20);
IkReal x14040=(gconst38*r10);
IkReal x14041=(cj3*gconst37);
IkReal x14042=(sj1*sj2);
IkReal x14043=(gconst38*r00);
IkReal x14044=(cj1*cj2);
IkReal x14045=(gconst37*sj3);
IkReal x14046=(gconst38*r20);
IkReal x14047=(gconst38*r01);
IkReal x14048=(gconst38*r11);
IkReal x14049=((1.0)*x14035);
IkReal x14050=((1.0)*x14034);
IkReal x14051=(cj3*x14034);
IkReal x14052=(sj3*x14035);
IkReal x14053=(gconst37*x14034);
IkReal x14054=(x14037+x14036);
evalcond[0]=((((-1.0)*x14046*x14050))+(((-1.0)*r22*x14049))+((r21*x14053)));
evalcond[1]=((((-1.0)*x14043*x14050))+(((-1.0)*r02*x14049))+((r01*x14053)));
evalcond[2]=((-1.0)+((r11*x14053))+(((-1.0)*r12*x14049))+(((-1.0)*x14040*x14050)));
evalcond[3]=(((r11*x14035*x14041))+((sj3*x14048))+((r10*x14045))+((r12*x14051))+(((-1.0)*cj3*x14040*x14049)));
evalcond[4]=(((x14040*x14052))+(((-1.0)*r11*x14045*x14049))+((r10*x14041))+((cj3*x14048))+(((-1.0)*r12*sj3*x14050)));
evalcond[5]=(((r21*x14035*x14041))+((sj3*x14038))+((r20*x14045))+((r22*x14051))+(((-1.0)*gconst38*x14039*x14049))+x14054);
evalcond[6]=(((r00*x14045))+(((-1.0)*x14042))+((sj3*x14047))+((r02*x14051))+((r01*x14035*x14041))+x14044+(((-1.0)*cj3*x14043*x14049)));
evalcond[7]=(((r00*x14041))+((x14043*x14052))+((cj3*x14047))+(((-1.0)*r01*x14045*x14049))+(((-1.0)*r02*sj3*x14050))+x14054);
evalcond[8]=((((-1.0)*r21*x14045*x14049))+(((-1.0)*x14044))+((cj3*x14038))+(((-1.0)*r22*sj3*x14050))+((gconst37*x14039))+x14042+((x14046*x14052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14055=gconst38*gconst38;
IkReal x14056=gconst37*gconst37;
IkReal x14057=(gconst37*r10);
IkReal x14058=(cj3*r22);
IkReal x14059=((1.0)*gconst38);
IkReal x14060=(r21*sj3);
IkReal x14061=(gconst38*r11);
IkReal x14062=(cj3*r20);
IkReal x14063=(cj3*r21);
IkReal x14064=(r20*sj3);
CheckValue<IkReal> x14065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14059*x14064))+((r12*r22*sj3))+(((-1.0)*x14057*x14059*x14060))+((r11*x14056*x14060))+((r10*x14055*x14064)))),-1);
if(!x14065.valid){
continue;
}
CheckValue<IkReal> x14066 = IKatan2WithCheck(IkReal((((x14057*x14058))+((x14058*x14061)))),IkReal((((gconst37*x14061*x14063))+((r10*x14056*x14063))+(((-1.0)*r11*x14055*x14062))+(((-1.0)*x14057*x14059*x14062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14065.value)))+(x14066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14067=IKsin(j4);
IkReal x14068=IKcos(j4);
IkReal x14069=(cj2*sj1);
IkReal x14070=(cj1*sj2);
IkReal x14071=(gconst38*r21);
IkReal x14072=(cj3*r20);
IkReal x14073=(gconst38*r10);
IkReal x14074=(cj3*gconst37);
IkReal x14075=(sj1*sj2);
IkReal x14076=(gconst38*r00);
IkReal x14077=(cj1*cj2);
IkReal x14078=(gconst37*sj3);
IkReal x14079=(gconst38*r20);
IkReal x14080=(gconst38*r01);
IkReal x14081=(gconst38*r11);
IkReal x14082=((1.0)*x14068);
IkReal x14083=((1.0)*x14067);
IkReal x14084=(cj3*x14067);
IkReal x14085=(sj3*x14068);
IkReal x14086=(gconst37*x14067);
IkReal x14087=(x14070+x14069);
evalcond[0]=((((-1.0)*r22*x14082))+((r21*x14086))+(((-1.0)*x14079*x14083)));
evalcond[1]=((((-1.0)*x14076*x14083))+((r01*x14086))+(((-1.0)*r02*x14082)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14082))+((r11*x14086))+(((-1.0)*x14073*x14083)));
evalcond[3]=(((r10*x14078))+((r12*x14084))+((r11*x14068*x14074))+(((-1.0)*cj3*x14073*x14082))+((sj3*x14081)));
evalcond[4]=((((-1.0)*r11*x14078*x14082))+(((-1.0)*r12*sj3*x14083))+((cj3*x14081))+((r10*x14074))+((x14073*x14085)));
evalcond[5]=(((r21*x14068*x14074))+(((-1.0)*gconst38*x14072*x14082))+((sj3*x14071))+((r22*x14084))+((r20*x14078))+x14087);
evalcond[6]=(((r01*x14068*x14074))+((r02*x14084))+((r00*x14078))+(((-1.0)*x14075))+(((-1.0)*cj3*x14076*x14082))+x14077+((sj3*x14080)));
evalcond[7]=(((x14076*x14085))+((r00*x14074))+(((-1.0)*r02*sj3*x14083))+(((-1.0)*r01*x14078*x14082))+((cj3*x14080))+x14087);
evalcond[8]=((((-1.0)*r22*sj3*x14083))+((gconst37*x14072))+((x14079*x14085))+(((-1.0)*x14077))+(((-1.0)*r21*x14078*x14082))+x14075+((cj3*x14071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14088=((1.0)*gconst38);
CheckValue<IkReal> x14089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14088))+(((-1.0)*gconst37*r20)))),-1);
if(!x14089.valid){
continue;
}
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14088))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14089.value)))+(x14090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14091=IKsin(j4);
IkReal x14092=IKcos(j4);
IkReal x14093=(cj2*sj1);
IkReal x14094=(cj1*sj2);
IkReal x14095=(gconst38*r21);
IkReal x14096=(cj3*r20);
IkReal x14097=(gconst38*r10);
IkReal x14098=(cj3*gconst37);
IkReal x14099=(sj1*sj2);
IkReal x14100=(gconst38*r00);
IkReal x14101=(cj1*cj2);
IkReal x14102=(gconst37*sj3);
IkReal x14103=(gconst38*r20);
IkReal x14104=(gconst38*r01);
IkReal x14105=(gconst38*r11);
IkReal x14106=((1.0)*x14092);
IkReal x14107=((1.0)*x14091);
IkReal x14108=(cj3*x14091);
IkReal x14109=(sj3*x14092);
IkReal x14110=(gconst37*x14091);
IkReal x14111=(x14094+x14093);
evalcond[0]=((((-1.0)*r22*x14106))+((r21*x14110))+(((-1.0)*x14103*x14107)));
evalcond[1]=(((r01*x14110))+(((-1.0)*x14100*x14107))+(((-1.0)*r02*x14106)));
evalcond[2]=((-1.0)+((r11*x14110))+(((-1.0)*x14097*x14107))+(((-1.0)*r12*x14106)));
evalcond[3]=(((sj3*x14105))+(((-1.0)*cj3*x14097*x14106))+((r11*x14092*x14098))+((r10*x14102))+((r12*x14108)));
evalcond[4]=((((-1.0)*r11*x14102*x14106))+((x14097*x14109))+((cj3*x14105))+((r10*x14098))+(((-1.0)*r12*sj3*x14107)));
evalcond[5]=((((-1.0)*gconst38*x14096*x14106))+((sj3*x14095))+((r22*x14108))+((r21*x14092*x14098))+x14111+((r20*x14102)));
evalcond[6]=(((sj3*x14104))+((r02*x14108))+((r00*x14102))+(((-1.0)*x14099))+((r01*x14092*x14098))+x14101+(((-1.0)*cj3*x14100*x14106)));
evalcond[7]=(((r00*x14098))+(((-1.0)*r02*sj3*x14107))+((cj3*x14104))+x14111+((x14100*x14109))+(((-1.0)*r01*x14102*x14106)));
evalcond[8]=((((-1.0)*r22*sj3*x14107))+((x14103*x14109))+(((-1.0)*x14101))+(((-1.0)*r21*x14102*x14106))+((gconst37*x14096))+((cj3*x14095))+x14099);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14113 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14113)==0){
continue;
}
IkReal x14112=pow(x14113,-0.5);
CheckValue<IkReal> x14114 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14114.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14114.value))));
IkReal gconst40=((1.0)*r01*x14112);
IkReal gconst41=((-1.0)*r00*x14112);
CheckValue<IkReal> x14115 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14115.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14115.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14118 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14118.valid){
continue;
}
IkReal x14116=((1.0)*(x14118.value));
IkReal x14117=x14112;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14116)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14116)));
IkReal gconst40=((1.0)*r01*x14117);
IkReal gconst41=((-1.0)*r00*x14117);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14121 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14121.valid){
continue;
}
IkReal x14119=((1.0)*(x14121.value));
IkReal x14120=x14112;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14119)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14119)));
IkReal gconst40=((1.0)*r01*x14120);
IkReal gconst41=((-1.0)*r00*x14120);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14122=gconst41*gconst41;
IkReal x14123=gconst40*gconst40;
IkReal x14124=(gconst40*r10);
IkReal x14125=(r22*sj3);
IkReal x14126=(r11*sj3);
IkReal x14127=((1.0)*cj3);
IkReal x14128=(gconst41*r21);
IkReal x14129=(gconst41*r20);
IkReal x14130=(r21*x14123);
IkReal x14131=((1.0)*r20*x14122);
CheckValue<IkReal> x14132 = IKatan2WithCheck(IkReal((((gconst41*r11*x14125))+((x14124*x14125)))),IkReal(((((-1.0)*sj3*x14124*x14129))+((gconst40*x14126*x14128))+((r10*sj3*x14130))+(((-1.0)*x14126*x14131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14132.valid){
continue;
}
CheckValue<IkReal> x14133=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14129))+((cj3*x14124*x14128))+(((-1.0)*r12*r22*x14127))+(((-1.0)*r11*x14127*x14130))+(((-1.0)*r10*r20*x14122*x14127)))),-1);
if(!x14133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14132.value)+(((1.5707963267949)*(x14133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14134=IKsin(j4);
IkReal x14135=IKcos(j4);
IkReal x14136=(cj2*sj1);
IkReal x14137=(cj1*sj2);
IkReal x14138=(gconst40*sj3);
IkReal x14139=(gconst41*sj3);
IkReal x14140=(gconst41*r20);
IkReal x14141=(cj3*gconst41);
IkReal x14142=(sj1*sj2);
IkReal x14143=(cj1*cj2);
IkReal x14144=(cj3*gconst40);
IkReal x14145=((1.0)*x14135);
IkReal x14146=((1.0)*x14134);
IkReal x14147=(cj3*x14134);
IkReal x14148=(gconst40*x14134);
IkReal x14149=(x14136+x14137);
IkReal x14150=(x14135*x14144);
evalcond[0]=((((-1.0)*r22*x14145))+((r21*x14148))+(((-1.0)*x14140*x14146)));
evalcond[1]=((((-1.0)*gconst41*r00*x14146))+((r01*x14148))+(((-1.0)*r02*x14145)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14146))+(((-1.0)*r12*x14145))+((r11*x14148)));
evalcond[3]=(((r11*x14139))+((r10*x14138))+((r11*x14150))+((r12*x14147))+(((-1.0)*r10*x14141*x14145)));
evalcond[4]=(((r10*x14144))+(((-1.0)*r11*x14138*x14145))+(((-1.0)*r12*sj3*x14146))+((r11*x14141))+((r10*x14135*x14139)));
evalcond[5]=(((r20*x14138))+(((-1.0)*cj3*x14140*x14145))+((r21*x14139))+((r22*x14147))+x14149+((r21*x14150)));
evalcond[6]=((((-1.0)*r00*x14141*x14145))+((r02*x14147))+((r01*x14150))+x14143+(((-1.0)*x14142))+((r00*x14138))+((r01*x14139)));
evalcond[7]=((((-1.0)*r01*x14138*x14145))+(((-1.0)*r02*sj3*x14146))+((r01*x14141))+((r00*x14144))+((r00*x14135*x14139))+x14149);
evalcond[8]=((((-1.0)*r21*x14138*x14145))+(((-1.0)*r22*sj3*x14146))+((r20*x14135*x14139))+((r21*x14141))+x14142+(((-1.0)*x14143))+((r20*x14144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14151=((1.0)*gconst41);
CheckValue<IkReal> x14152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14151))+(((-1.0)*gconst40*r20)))),-1);
if(!x14152.valid){
continue;
}
CheckValue<IkReal> x14153 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x14151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14152.value)))+(x14153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14154=IKsin(j4);
IkReal x14155=IKcos(j4);
IkReal x14156=(cj2*sj1);
IkReal x14157=(cj1*sj2);
IkReal x14158=(gconst40*sj3);
IkReal x14159=(gconst41*sj3);
IkReal x14160=(gconst41*r20);
IkReal x14161=(cj3*gconst41);
IkReal x14162=(sj1*sj2);
IkReal x14163=(cj1*cj2);
IkReal x14164=(cj3*gconst40);
IkReal x14165=((1.0)*x14155);
IkReal x14166=((1.0)*x14154);
IkReal x14167=(cj3*x14154);
IkReal x14168=(gconst40*x14154);
IkReal x14169=(x14156+x14157);
IkReal x14170=(x14155*x14164);
evalcond[0]=((((-1.0)*r22*x14165))+((r21*x14168))+(((-1.0)*x14160*x14166)));
evalcond[1]=((((-1.0)*r02*x14165))+((r01*x14168))+(((-1.0)*gconst41*r00*x14166)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14166))+(((-1.0)*r12*x14165))+((r11*x14168)));
evalcond[3]=(((r10*x14158))+((r11*x14170))+((r11*x14159))+(((-1.0)*r10*x14161*x14165))+((r12*x14167)));
evalcond[4]=(((r10*x14164))+(((-1.0)*r12*sj3*x14166))+((r11*x14161))+((r10*x14155*x14159))+(((-1.0)*r11*x14158*x14165)));
evalcond[5]=(((r21*x14170))+((r22*x14167))+(((-1.0)*cj3*x14160*x14165))+x14169+((r21*x14159))+((r20*x14158)));
evalcond[6]=(((r02*x14167))+((r01*x14170))+(((-1.0)*r00*x14161*x14165))+((r00*x14158))+((r01*x14159))+x14163+(((-1.0)*x14162)));
evalcond[7]=((((-1.0)*r02*sj3*x14166))+(((-1.0)*r01*x14158*x14165))+((r00*x14155*x14159))+((r00*x14164))+((r01*x14161))+x14169);
evalcond[8]=((((-1.0)*r22*sj3*x14166))+((r20*x14155*x14159))+x14162+((r21*x14161))+((r20*x14164))+(((-1.0)*r21*x14158*x14165))+(((-1.0)*x14163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14171 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14171.valid){
continue;
}
CheckValue<IkReal> x14172=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14171.value)+(((1.5707963267949)*(x14172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14173=IKsin(j4);
IkReal x14174=IKcos(j4);
IkReal x14175=(cj2*sj1);
IkReal x14176=(cj1*sj2);
IkReal x14177=(gconst40*sj3);
IkReal x14178=(gconst41*sj3);
IkReal x14179=(gconst41*r20);
IkReal x14180=(cj3*gconst41);
IkReal x14181=(sj1*sj2);
IkReal x14182=(cj1*cj2);
IkReal x14183=(cj3*gconst40);
IkReal x14184=((1.0)*x14174);
IkReal x14185=((1.0)*x14173);
IkReal x14186=(cj3*x14173);
IkReal x14187=(gconst40*x14173);
IkReal x14188=(x14176+x14175);
IkReal x14189=(x14174*x14183);
evalcond[0]=((((-1.0)*r22*x14184))+(((-1.0)*x14179*x14185))+((r21*x14187)));
evalcond[1]=((((-1.0)*gconst41*r00*x14185))+((r01*x14187))+(((-1.0)*r02*x14184)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14184))+((r11*x14187))+(((-1.0)*gconst41*r10*x14185)));
evalcond[3]=(((r11*x14178))+(((-1.0)*r10*x14180*x14184))+((r12*x14186))+((r11*x14189))+((r10*x14177)));
evalcond[4]=((((-1.0)*r12*sj3*x14185))+((r10*x14174*x14178))+((r11*x14180))+(((-1.0)*r11*x14177*x14184))+((r10*x14183)));
evalcond[5]=(((r21*x14178))+((r20*x14177))+((r22*x14186))+((r21*x14189))+x14188+(((-1.0)*cj3*x14179*x14184)));
evalcond[6]=(((r02*x14186))+((r01*x14178))+((r00*x14177))+(((-1.0)*r00*x14180*x14184))+((r01*x14189))+x14182+(((-1.0)*x14181)));
evalcond[7]=((((-1.0)*r01*x14177*x14184))+((r01*x14180))+(((-1.0)*r02*sj3*x14185))+((r00*x14183))+x14188+((r00*x14174*x14178)));
evalcond[8]=(((r20*x14183))+((r21*x14180))+x14181+(((-1.0)*r22*sj3*x14185))+(((-1.0)*x14182))+((r20*x14174*x14178))+(((-1.0)*r21*x14177*x14184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14190=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14190);
rxp1_1=(px*r21);
rxp1_2=(r11*x14190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14191=(r11*sj5);
IkReal x14192=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14192))+x14191);
j4eval[1]=((((-1.0)*cj3*x14192))+((cj3*x14191)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14193=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14193);
rxp1_1=(px*r21);
rxp1_2=(r11*x14193);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14194=(cj5*r10);
IkReal x14195=(r11*sj5);
j4eval[0]=((((-1.0)*x14194))+x14195);
j4eval[1]=(((sj3*x14194))+(((-1.0)*sj3*x14195)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14196=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14196);
rxp1_1=(px*r21);
rxp1_2=(r11*x14196);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14197=((1.0)*r10);
CheckValue<IkReal> x14198=IKPowWithIntegerCheck(cj3,-1);
if(!x14198.valid){
continue;
}
CheckValue<IkReal> x14199=IKPowWithIntegerCheck(r02,-1);
if(!x14199.valid){
continue;
}
CheckValue<IkReal> x14200=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14197))+((cj3*r11*sj5))),-1);
if(!x14200.valid){
continue;
}
if( IKabs(((x14198.value)*(x14199.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14200.value)*(((((-1.0)*sj3*sj5*x14197))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14198.value)*(x14199.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14200.value)*(((((-1.0)*sj3*sj5*x14197))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14198.value)*(x14199.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14200.value)*(((((-1.0)*sj3*sj5*x14197))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14201=IKsin(j4);
IkReal x14202=IKcos(j4);
IkReal x14203=(cj2*sj1);
IkReal x14204=(cj1*sj2);
IkReal x14205=(cj5*r10);
IkReal x14206=(sj1*sj2);
IkReal x14207=(cj5*sj3);
IkReal x14208=(r11*sj5);
IkReal x14209=(cj3*sj5);
IkReal x14210=(r21*sj5);
IkReal x14211=(cj1*cj2);
IkReal x14212=(cj3*cj5);
IkReal x14213=(sj3*sj5);
IkReal x14214=((1.0)*x14201);
IkReal x14215=(r20*x14202);
IkReal x14216=(cj3*x14202);
IkReal x14217=(sj3*x14202);
IkReal x14218=(x14203+x14204);
evalcond[0]=((-1.0)*r02*x14202);
evalcond[1]=((((-1.0)*cj5*r20*x14214))+((x14201*x14210)));
evalcond[2]=((((-1.0)*x14206))+((cj3*r02*x14201))+x14211);
evalcond[3]=((((-1.0)*r02*sj3*x14214))+x14218);
evalcond[4]=((-1.0)+(((-1.0)*x14205*x14214))+((x14201*x14208)));
evalcond[5]=((((-1.0)*x14205*x14216))+((r10*x14213))+((x14208*x14216))+((r11*x14207)));
evalcond[6]=(((r11*x14212))+((x14205*x14217))+((r10*x14209))+(((-1.0)*x14208*x14217)));
evalcond[7]=(((r21*x14207))+((r21*x14202*x14209))+(((-1.0)*x14212*x14215))+((r20*x14213))+x14218);
evalcond[8]=(((x14207*x14215))+((r20*x14209))+(((-1.0)*x14211))+((r21*x14212))+x14206+(((-1.0)*x14210*x14217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14219=(cj5*r10);
IkReal x14220=((1.0)*r11);
CheckValue<IkReal> x14221=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14219))),-1);
if(!x14221.valid){
continue;
}
CheckValue<IkReal> x14222=IKPowWithIntegerCheck((((sj3*x14219))+(((-1.0)*sj3*sj5*x14220))),-1);
if(!x14222.valid){
continue;
}
if( IKabs(x14221.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14222.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14220)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14221.value)+IKsqr(((x14222.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14220))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14221.value, ((x14222.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14220))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14223=IKsin(j4);
IkReal x14224=IKcos(j4);
IkReal x14225=(cj2*sj1);
IkReal x14226=(cj1*sj2);
IkReal x14227=(cj5*r10);
IkReal x14228=(sj1*sj2);
IkReal x14229=(cj5*sj3);
IkReal x14230=(r11*sj5);
IkReal x14231=(cj3*sj5);
IkReal x14232=(r21*sj5);
IkReal x14233=(cj1*cj2);
IkReal x14234=(cj3*cj5);
IkReal x14235=(sj3*sj5);
IkReal x14236=((1.0)*x14223);
IkReal x14237=(r20*x14224);
IkReal x14238=(cj3*x14224);
IkReal x14239=(sj3*x14224);
IkReal x14240=(x14226+x14225);
evalcond[0]=((-1.0)*r02*x14224);
evalcond[1]=(((x14223*x14232))+(((-1.0)*cj5*r20*x14236)));
evalcond[2]=((((-1.0)*x14228))+x14233+((cj3*r02*x14223)));
evalcond[3]=((((-1.0)*r02*sj3*x14236))+x14240);
evalcond[4]=((-1.0)+((x14223*x14230))+(((-1.0)*x14227*x14236)));
evalcond[5]=(((r10*x14235))+(((-1.0)*x14227*x14238))+((x14230*x14238))+((r11*x14229)));
evalcond[6]=(((r10*x14231))+((x14227*x14239))+(((-1.0)*x14230*x14239))+((r11*x14234)));
evalcond[7]=(((r20*x14235))+((r21*x14224*x14231))+((r21*x14229))+(((-1.0)*x14234*x14237))+x14240);
evalcond[8]=(((r20*x14231))+((x14229*x14237))+((r21*x14234))+(((-1.0)*x14233))+(((-1.0)*x14232*x14239))+x14228);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14241=((1.0)*r10);
IkReal x14242=(r11*sj5);
CheckValue<IkReal> x14243=IKPowWithIntegerCheck(((((-1.0)*cj5*x14241))+x14242),-1);
if(!x14243.valid){
continue;
}
CheckValue<IkReal> x14244=IKPowWithIntegerCheck((((cj3*x14242))+(((-1.0)*cj3*cj5*x14241))),-1);
if(!x14244.valid){
continue;
}
if( IKabs(x14243.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14244.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14241)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14243.value)+IKsqr(((x14244.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14241))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14243.value, ((x14244.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14241))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14245=IKsin(j4);
IkReal x14246=IKcos(j4);
IkReal x14247=(cj2*sj1);
IkReal x14248=(cj1*sj2);
IkReal x14249=(cj5*r10);
IkReal x14250=(sj1*sj2);
IkReal x14251=(cj5*sj3);
IkReal x14252=(r11*sj5);
IkReal x14253=(cj3*sj5);
IkReal x14254=(r21*sj5);
IkReal x14255=(cj1*cj2);
IkReal x14256=(cj3*cj5);
IkReal x14257=(sj3*sj5);
IkReal x14258=((1.0)*x14245);
IkReal x14259=(r20*x14246);
IkReal x14260=(cj3*x14246);
IkReal x14261=(sj3*x14246);
IkReal x14262=(x14247+x14248);
evalcond[0]=((-1.0)*r02*x14246);
evalcond[1]=((((-1.0)*cj5*r20*x14258))+((x14245*x14254)));
evalcond[2]=(((cj3*r02*x14245))+x14255+(((-1.0)*x14250)));
evalcond[3]=((((-1.0)*r02*sj3*x14258))+x14262);
evalcond[4]=((-1.0)+((x14245*x14252))+(((-1.0)*x14249*x14258)));
evalcond[5]=((((-1.0)*x14249*x14260))+((r10*x14257))+((r11*x14251))+((x14252*x14260)));
evalcond[6]=(((x14249*x14261))+((r10*x14253))+((r11*x14256))+(((-1.0)*x14252*x14261)));
evalcond[7]=(((r21*x14246*x14253))+((r21*x14251))+((r20*x14257))+(((-1.0)*x14256*x14259))+x14262);
evalcond[8]=(((r21*x14256))+(((-1.0)*x14254*x14261))+((x14251*x14259))+((r20*x14253))+x14250+(((-1.0)*x14255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14263=cj5*cj5;
IkReal x14264=((1.0)*cj3);
IkReal x14265=(r10*r21);
IkReal x14266=(cj5*sj5);
IkReal x14267=(r11*r21);
IkReal x14268=(r11*r20);
IkReal x14269=(r22*sj3);
IkReal x14270=(r10*r20);
IkReal x14271=((1.0)*sj3*x14263);
CheckValue<IkReal> x14272=IKPowWithIntegerCheck(IKsign((((cj3*x14263*x14267))+(((-1.0)*x14264*x14267))+((cj3*x14266*x14268))+(((-1.0)*x14263*x14264*x14270))+((cj3*x14265*x14266))+(((-1.0)*r12*r22*x14264)))),-1);
if(!x14272.valid){
continue;
}
CheckValue<IkReal> x14273 = IKatan2WithCheck(IkReal((((cj5*r11*x14269))+((r10*sj5*x14269)))),IkReal((((sj3*x14265))+(((-1.0)*x14265*x14271))+(((-1.0)*sj3*x14266*x14270))+(((-1.0)*x14268*x14271))+((sj3*x14266*x14267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14272.value)))+(x14273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14274=IKsin(j4);
IkReal x14275=IKcos(j4);
IkReal x14276=(cj2*sj1);
IkReal x14277=(cj1*sj2);
IkReal x14278=(cj5*sj3);
IkReal x14279=(cj5*r10);
IkReal x14280=(r00*sj5);
IkReal x14281=(sj1*sj2);
IkReal x14282=(r11*sj5);
IkReal x14283=(cj3*cj5);
IkReal x14284=(cj3*sj5);
IkReal x14285=(r21*sj5);
IkReal x14286=(cj1*cj2);
IkReal x14287=(sj3*sj5);
IkReal x14288=(r01*sj5);
IkReal x14289=((1.0)*x14275);
IkReal x14290=((1.0)*x14274);
IkReal x14291=(cj3*x14274);
IkReal x14292=(cj3*x14275);
IkReal x14293=(x14277+x14276);
evalcond[0]=((((-1.0)*r22*x14289))+(((-1.0)*cj5*r20*x14290))+((x14274*x14285)));
evalcond[1]=((((-1.0)*cj5*r00*x14290))+(((-1.0)*r02*x14289))+((x14274*x14288)));
evalcond[2]=((-1.0)+(((-1.0)*x14279*x14290))+(((-1.0)*r12*x14289))+((x14274*x14282)));
evalcond[3]=(((x14282*x14292))+((r10*x14287))+((r11*x14278))+((r12*x14291))+(((-1.0)*cj3*x14279*x14289)));
evalcond[4]=((((-1.0)*sj3*x14282*x14289))+((r10*x14284))+((r10*x14275*x14278))+((r11*x14283))+(((-1.0)*r12*sj3*x14290)));
evalcond[5]=(((r21*x14275*x14284))+((r21*x14278))+(((-1.0)*r20*x14283*x14289))+((r22*x14291))+x14293+((r20*x14287)));
evalcond[6]=(((r02*x14291))+((r01*x14278))+((r01*x14275*x14284))+((sj3*x14280))+(((-1.0)*x14281))+(((-1.0)*r00*x14283*x14289))+x14286);
evalcond[7]=(((r00*x14275*x14278))+((cj3*x14280))+((r01*x14283))+(((-1.0)*r02*sj3*x14290))+(((-1.0)*r01*x14287*x14289))+x14293);
evalcond[8]=(((r20*x14275*x14278))+((r21*x14283))+(((-1.0)*r22*sj3*x14290))+(((-1.0)*sj3*x14285*x14289))+(((-1.0)*x14286))+x14281+((r20*x14284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14294=((1.0)*cj5);
CheckValue<IkReal> x14295 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14295.valid){
continue;
}
CheckValue<IkReal> x14296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14294))+(((-1.0)*r20*sj5)))),-1);
if(!x14296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14295.value)+(((1.5707963267949)*(x14296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14297=IKsin(j4);
IkReal x14298=IKcos(j4);
IkReal x14299=(cj2*sj1);
IkReal x14300=(cj1*sj2);
IkReal x14301=(cj5*sj3);
IkReal x14302=(cj5*r10);
IkReal x14303=(r00*sj5);
IkReal x14304=(sj1*sj2);
IkReal x14305=(r11*sj5);
IkReal x14306=(cj3*cj5);
IkReal x14307=(cj3*sj5);
IkReal x14308=(r21*sj5);
IkReal x14309=(cj1*cj2);
IkReal x14310=(sj3*sj5);
IkReal x14311=(r01*sj5);
IkReal x14312=((1.0)*x14298);
IkReal x14313=((1.0)*x14297);
IkReal x14314=(cj3*x14297);
IkReal x14315=(cj3*x14298);
IkReal x14316=(x14300+x14299);
evalcond[0]=(((x14297*x14308))+(((-1.0)*r22*x14312))+(((-1.0)*cj5*r20*x14313)));
evalcond[1]=((((-1.0)*r02*x14312))+(((-1.0)*cj5*r00*x14313))+((x14297*x14311)));
evalcond[2]=((-1.0)+((x14297*x14305))+(((-1.0)*x14302*x14313))+(((-1.0)*r12*x14312)));
evalcond[3]=(((r11*x14301))+((x14305*x14315))+(((-1.0)*cj3*x14302*x14312))+((r12*x14314))+((r10*x14310)));
evalcond[4]=(((r11*x14306))+(((-1.0)*r12*sj3*x14313))+((r10*x14298*x14301))+((r10*x14307))+(((-1.0)*sj3*x14305*x14312)));
evalcond[5]=(((r21*x14298*x14307))+(((-1.0)*r20*x14306*x14312))+((r20*x14310))+x14316+((r21*x14301))+((r22*x14314)));
evalcond[6]=((((-1.0)*r00*x14306*x14312))+((r02*x14314))+((r01*x14298*x14307))+((r01*x14301))+(((-1.0)*x14304))+x14309+((sj3*x14303)));
evalcond[7]=((((-1.0)*r01*x14310*x14312))+((r01*x14306))+(((-1.0)*r02*sj3*x14313))+((r00*x14298*x14301))+x14316+((cj3*x14303)));
evalcond[8]=(((r20*x14307))+(((-1.0)*sj3*x14308*x14312))+((r20*x14298*x14301))+(((-1.0)*x14309))+x14304+((r21*x14306))+(((-1.0)*r22*sj3*x14313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14317 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14317.valid){
continue;
}
CheckValue<IkReal> x14318=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14317.value)+(((1.5707963267949)*(x14318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14319=IKsin(j4);
IkReal x14320=IKcos(j4);
IkReal x14321=(cj2*sj1);
IkReal x14322=(cj1*sj2);
IkReal x14323=(cj5*sj3);
IkReal x14324=(cj5*r10);
IkReal x14325=(r00*sj5);
IkReal x14326=(sj1*sj2);
IkReal x14327=(r11*sj5);
IkReal x14328=(cj3*cj5);
IkReal x14329=(cj3*sj5);
IkReal x14330=(r21*sj5);
IkReal x14331=(cj1*cj2);
IkReal x14332=(sj3*sj5);
IkReal x14333=(r01*sj5);
IkReal x14334=((1.0)*x14320);
IkReal x14335=((1.0)*x14319);
IkReal x14336=(cj3*x14319);
IkReal x14337=(cj3*x14320);
IkReal x14338=(x14322+x14321);
evalcond[0]=((((-1.0)*r22*x14334))+(((-1.0)*cj5*r20*x14335))+((x14319*x14330)));
evalcond[1]=((((-1.0)*cj5*r00*x14335))+(((-1.0)*r02*x14334))+((x14319*x14333)));
evalcond[2]=((-1.0)+((x14319*x14327))+(((-1.0)*r12*x14334))+(((-1.0)*x14324*x14335)));
evalcond[3]=((((-1.0)*cj3*x14324*x14334))+((r12*x14336))+((r11*x14323))+((r10*x14332))+((x14327*x14337)));
evalcond[4]=(((r10*x14320*x14323))+(((-1.0)*sj3*x14327*x14334))+((r10*x14329))+((r11*x14328))+(((-1.0)*r12*sj3*x14335)));
evalcond[5]=(((r20*x14332))+(((-1.0)*r20*x14328*x14334))+((r21*x14323))+((r22*x14336))+((r21*x14320*x14329))+x14338);
evalcond[6]=(((r02*x14336))+(((-1.0)*r00*x14328*x14334))+((r01*x14323))+((sj3*x14325))+((r01*x14320*x14329))+x14331+(((-1.0)*x14326)));
evalcond[7]=((((-1.0)*r02*sj3*x14335))+(((-1.0)*r01*x14332*x14334))+((r01*x14328))+((r00*x14320*x14323))+((cj3*x14325))+x14338);
evalcond[8]=(((r20*x14320*x14323))+(((-1.0)*r22*sj3*x14335))+(((-1.0)*x14331))+((r21*x14328))+((r20*x14329))+(((-1.0)*sj3*x14330*x14334))+x14326);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14339=((-1.0)*r00);
IkReal x14341 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14341)==0){
continue;
}
IkReal x14340=pow(x14341,-0.5);
CheckValue<IkReal> x14342 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14339),IKFAST_ATAN2_MAGTHRESH);
if(!x14342.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14342.value));
IkReal gconst13=(r01*x14340);
IkReal gconst14=(x14339*x14340);
CheckValue<IkReal> x14343 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14343.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14343.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14344=((-1.0)*r00);
IkReal x14345=x14340;
CheckValue<IkReal> x14347 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14344),IKFAST_ATAN2_MAGTHRESH);
if(!x14347.valid){
continue;
}
IkReal x14346=((-1.0)*(x14347.value));
sj5=gconst13;
cj5=gconst14;
j5=x14346;
IkReal gconst12=x14346;
IkReal gconst13=(r01*x14345);
IkReal gconst14=(x14344*x14345);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14348=((1.0)*sj0);
IkReal x14349=((1.0)*cj0);
CheckValue<IkReal> x14350 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14348))+(((-1.0)*r02*x14349)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14348))+(((-1.0)*gconst13*r01*x14349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14350.valid){
continue;
}
CheckValue<IkReal> x14351=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14350.value)+(((1.5707963267949)*(x14351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14352=IKsin(j4);
IkReal x14353=IKcos(j4);
IkReal x14354=((1.0)*r22);
IkReal x14355=((1.0)*r12);
IkReal x14356=(gconst13*sj3);
IkReal x14357=(gconst13*r01);
IkReal x14358=(sj1*sj2);
IkReal x14359=(gconst14*sj3);
IkReal x14360=(cj2*sj1);
IkReal x14361=((1.0)*sj0);
IkReal x14362=(cj3*gconst13);
IkReal x14363=(cj3*gconst14);
IkReal x14364=((1.0)*cj0);
IkReal x14365=((1.0)*gconst14);
IkReal x14366=(cj1*sj2);
IkReal x14367=(sj3*x14352);
IkReal x14368=((1.0)*cj1*cj2);
IkReal x14369=(cj3*x14353);
IkReal x14370=(cj3*x14352);
IkReal x14371=(gconst13*x14352);
IkReal x14372=((1.0)*x14353);
IkReal x14373=(x14352*x14365);
evalcond[0]=(((r21*x14371))+(((-1.0)*r20*x14373))+(((-1.0)*x14353*x14354)));
evalcond[1]=(cj0+(((-1.0)*r10*x14373))+((r11*x14371))+(((-1.0)*x14353*x14355)));
evalcond[2]=(((x14352*x14357))+(((-1.0)*x14361))+(((-1.0)*r02*x14372))+(((-1.0)*r00*x14373)));
evalcond[3]=(((r20*x14356))+(((-1.0)*r20*x14363*x14372))+((r22*x14370))+((r21*x14353*x14362))+((r21*x14359))+x14360+x14366);
evalcond[4]=((((-1.0)*x14368))+((r20*x14362))+((r20*x14353*x14359))+((r21*x14363))+(((-1.0)*r21*x14356*x14372))+(((-1.0)*x14354*x14367))+x14358);
evalcond[5]=(((cj0*x14358))+((r00*x14356))+((r01*x14359))+((x14357*x14369))+(((-1.0)*r00*x14363*x14372))+(((-1.0)*cj1*cj2*x14364))+((r02*x14370)));
evalcond[6]=(((r11*x14353*x14362))+((r11*x14359))+(((-1.0)*r10*x14363*x14372))+((r12*x14370))+((r10*x14356))+((sj0*x14358))+(((-1.0)*cj1*cj2*x14361)));
evalcond[7]=((((-1.0)*r02*x14367))+(((-1.0)*x14360*x14364))+(((-1.0)*x14364*x14366))+((r00*x14353*x14359))+((r01*x14363))+((r00*x14362))+(((-1.0)*r01*x14356*x14372)));
evalcond[8]=((((-1.0)*r11*x14356*x14372))+((r10*x14362))+((r11*x14363))+(((-1.0)*x14361*x14366))+((r10*x14353*x14359))+(((-1.0)*x14360*x14361))+(((-1.0)*x14355*x14367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14374=((1.0)*gconst14);
CheckValue<IkReal> x14375 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14374))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14375.valid){
continue;
}
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14374))+(((-1.0)*gconst13*r10)))),-1);
if(!x14376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14375.value)+(((1.5707963267949)*(x14376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14377=IKsin(j4);
IkReal x14378=IKcos(j4);
IkReal x14379=((1.0)*r22);
IkReal x14380=((1.0)*r12);
IkReal x14381=(gconst13*sj3);
IkReal x14382=(gconst13*r01);
IkReal x14383=(sj1*sj2);
IkReal x14384=(gconst14*sj3);
IkReal x14385=(cj2*sj1);
IkReal x14386=((1.0)*sj0);
IkReal x14387=(cj3*gconst13);
IkReal x14388=(cj3*gconst14);
IkReal x14389=((1.0)*cj0);
IkReal x14390=((1.0)*gconst14);
IkReal x14391=(cj1*sj2);
IkReal x14392=(sj3*x14377);
IkReal x14393=((1.0)*cj1*cj2);
IkReal x14394=(cj3*x14378);
IkReal x14395=(cj3*x14377);
IkReal x14396=(gconst13*x14377);
IkReal x14397=((1.0)*x14378);
IkReal x14398=(x14377*x14390);
evalcond[0]=(((r21*x14396))+(((-1.0)*r20*x14398))+(((-1.0)*x14378*x14379)));
evalcond[1]=((((-1.0)*x14378*x14380))+cj0+((r11*x14396))+(((-1.0)*r10*x14398)));
evalcond[2]=((((-1.0)*x14386))+((x14377*x14382))+(((-1.0)*r00*x14398))+(((-1.0)*r02*x14397)));
evalcond[3]=(((r20*x14381))+((r21*x14378*x14387))+((r21*x14384))+((r22*x14395))+(((-1.0)*r20*x14388*x14397))+x14385+x14391);
evalcond[4]=(((r20*x14387))+((r20*x14378*x14384))+(((-1.0)*x14379*x14392))+((r21*x14388))+(((-1.0)*r21*x14381*x14397))+x14383+(((-1.0)*x14393)));
evalcond[5]=((((-1.0)*r00*x14388*x14397))+((cj0*x14383))+(((-1.0)*cj1*cj2*x14389))+((r00*x14381))+((r01*x14384))+((x14382*x14394))+((r02*x14395)));
evalcond[6]=(((sj0*x14383))+(((-1.0)*cj1*cj2*x14386))+(((-1.0)*r10*x14388*x14397))+((r12*x14395))+((r10*x14381))+((r11*x14384))+((r11*x14378*x14387)));
evalcond[7]=(((r00*x14387))+((r01*x14388))+((r00*x14378*x14384))+(((-1.0)*x14385*x14389))+(((-1.0)*x14389*x14391))+(((-1.0)*r02*x14392))+(((-1.0)*r01*x14381*x14397)));
evalcond[8]=((((-1.0)*r11*x14381*x14397))+(((-1.0)*x14380*x14392))+((r10*x14387))+((r11*x14388))+(((-1.0)*x14385*x14386))+((r10*x14378*x14384))+(((-1.0)*x14386*x14391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14399=((-1.0)*r01);
IkReal x14401 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14401)==0){
continue;
}
IkReal x14400=pow(x14401,-0.5);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal(x14399),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14402.value))));
IkReal gconst16=(x14399*x14400);
IkReal gconst17=((1.0)*r00*x14400);
CheckValue<IkReal> x14403 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14403.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14404=((-1.0)*r01);
CheckValue<IkReal> x14407 = IKatan2WithCheck(IkReal(x14404),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14407.valid){
continue;
}
IkReal x14405=((1.0)*(x14407.value));
IkReal x14406=x14400;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14405)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14405)));
IkReal gconst16=(x14404*x14406);
IkReal gconst17=((1.0)*r00*x14406);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14408=((-1.0)*r01);
CheckValue<IkReal> x14411 = IKatan2WithCheck(IkReal(x14408),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14411.valid){
continue;
}
IkReal x14409=((1.0)*(x14411.value));
IkReal x14410=x14400;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14409)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14409)));
IkReal gconst16=(x14408*x14410);
IkReal gconst17=((1.0)*r00*x14410);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14412=((-1.0)*r01);
CheckValue<IkReal> x14415 = IKatan2WithCheck(IkReal(x14412),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14415.valid){
continue;
}
IkReal x14413=((1.0)*(x14415.value));
IkReal x14414=x14400;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14413)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14413)));
IkReal gconst16=(x14412*x14414);
IkReal gconst17=((1.0)*r00*x14414);
IkReal x14416=r02*r02;
IkReal x14417=(r12*sj0);
IkReal x14418=((1.0)*cj0);
IkReal x14419=x14400;
j4eval[0]=((IKabs(((((-1.0)*x14417))+(((-1.0)*r02*x14418)))))+(IKabs(((((-1.0)*x14418*x14419))+((cj0*x14416*x14419))+((r02*x14417*x14419))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14420=((-1.0)*r01);
CheckValue<IkReal> x14423 = IKatan2WithCheck(IkReal(x14420),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14423.valid){
continue;
}
IkReal x14421=((1.0)*(x14423.value));
IkReal x14422=x14400;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14421)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14421)));
IkReal gconst16=(x14420*x14422);
IkReal gconst17=((1.0)*r00*x14422);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14424=((-1.0)*r01);
CheckValue<IkReal> x14427 = IKatan2WithCheck(IkReal(x14424),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14427.valid){
continue;
}
IkReal x14425=((1.0)*(x14427.value));
IkReal x14426=x14400;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14425)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14425)));
IkReal gconst16=(x14424*x14426);
IkReal gconst17=((1.0)*r00*x14426);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14428=gconst16*gconst16;
IkReal x14429=gconst17*gconst17;
IkReal x14430=(r11*sj3);
IkReal x14431=(cj3*r10);
IkReal x14432=((1.0)*cj3);
IkReal x14433=(r10*sj3);
IkReal x14434=(gconst16*gconst17);
IkReal x14435=(r21*x14428);
IkReal x14436=((1.0)*r20*x14429);
CheckValue<IkReal> x14437 = IKatan2WithCheck(IkReal((((gconst17*r22*x14430))+((gconst16*r22*x14433)))),IkReal((((x14433*x14435))+((r21*x14430*x14434))+(((-1.0)*r20*x14433*x14434))+(((-1.0)*x14430*x14436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14437.valid){
continue;
}
CheckValue<IkReal> x14438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14432*x14435))+((r21*x14431*x14434))+(((-1.0)*x14431*x14436))+(((-1.0)*r12*r22*x14432))+((cj3*r11*r20*x14434)))),-1);
if(!x14438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14437.value)+(((1.5707963267949)*(x14438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14439=IKsin(j4);
IkReal x14440=IKcos(j4);
IkReal x14441=(cj2*sj1);
IkReal x14442=(cj1*sj2);
IkReal x14443=(gconst16*r21);
IkReal x14444=(cj3*gconst17);
IkReal x14445=(gconst16*r20);
IkReal x14446=(sj1*sj2);
IkReal x14447=(gconst17*r20);
IkReal x14448=(gconst17*sj3);
IkReal x14449=(gconst16*r10);
IkReal x14450=(cj1*cj2);
IkReal x14451=(gconst16*sj3);
IkReal x14452=((1.0)*x14440);
IkReal x14453=((1.0)*x14439);
IkReal x14454=(gconst16*x14439);
IkReal x14455=(cj3*x14440);
IkReal x14456=(cj3*x14439);
IkReal x14457=(x14442+x14441);
evalcond[0]=(((x14439*x14443))+(((-1.0)*r22*x14452))+(((-1.0)*x14447*x14453)));
evalcond[1]=(((r01*x14454))+(((-1.0)*gconst17*r00*x14453))+(((-1.0)*r02*x14452)));
evalcond[2]=((-1.0)+((r11*x14454))+(((-1.0)*gconst17*r10*x14453))+(((-1.0)*r12*x14452)));
evalcond[3]=(((gconst16*r11*x14455))+((r12*x14456))+((r11*x14448))+((sj3*x14449))+(((-1.0)*r10*x14444*x14452)));
evalcond[4]=((((-1.0)*r11*x14451*x14452))+((r11*x14444))+(((-1.0)*r12*sj3*x14453))+((r10*x14440*x14448))+((cj3*x14449)));
evalcond[5]=((((-1.0)*r20*x14444*x14452))+x14457+((sj3*x14445))+((r22*x14456))+((r21*x14448))+((x14443*x14455)));
evalcond[6]=(((r00*x14451))+((r01*x14448))+((gconst16*r01*x14455))+(((-1.0)*x14446))+x14450+(((-1.0)*r00*x14444*x14452))+((r02*x14456)));
evalcond[7]=(((r01*x14444))+(((-1.0)*r01*x14451*x14452))+x14457+((r00*x14440*x14448))+(((-1.0)*r02*sj3*x14453))+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14440*x14447))+(((-1.0)*r22*sj3*x14453))+(((-1.0)*x14450))+x14446+((r21*x14444))+((cj3*x14445))+(((-1.0)*sj3*x14443*x14452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14458=((1.0)*gconst17);
CheckValue<IkReal> x14459=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14458)))),-1);
if(!x14459.valid){
continue;
}
CheckValue<IkReal> x14460 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14458))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14459.value)))+(x14460.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14461=IKsin(j4);
IkReal x14462=IKcos(j4);
IkReal x14463=(cj2*sj1);
IkReal x14464=(cj1*sj2);
IkReal x14465=(gconst16*r21);
IkReal x14466=(cj3*gconst17);
IkReal x14467=(gconst16*r20);
IkReal x14468=(sj1*sj2);
IkReal x14469=(gconst17*r20);
IkReal x14470=(gconst17*sj3);
IkReal x14471=(gconst16*r10);
IkReal x14472=(cj1*cj2);
IkReal x14473=(gconst16*sj3);
IkReal x14474=((1.0)*x14462);
IkReal x14475=((1.0)*x14461);
IkReal x14476=(gconst16*x14461);
IkReal x14477=(cj3*x14462);
IkReal x14478=(cj3*x14461);
IkReal x14479=(x14463+x14464);
evalcond[0]=((((-1.0)*x14469*x14475))+((x14461*x14465))+(((-1.0)*r22*x14474)));
evalcond[1]=((((-1.0)*gconst17*r00*x14475))+((r01*x14476))+(((-1.0)*r02*x14474)));
evalcond[2]=((-1.0)+((r11*x14476))+(((-1.0)*r12*x14474))+(((-1.0)*gconst17*r10*x14475)));
evalcond[3]=(((gconst16*r11*x14477))+(((-1.0)*r10*x14466*x14474))+((sj3*x14471))+((r11*x14470))+((r12*x14478)));
evalcond[4]=((((-1.0)*r12*sj3*x14475))+((r11*x14466))+(((-1.0)*r11*x14473*x14474))+((r10*x14462*x14470))+((cj3*x14471)));
evalcond[5]=((((-1.0)*r20*x14466*x14474))+((sj3*x14467))+((r21*x14470))+((r22*x14478))+x14479+((x14465*x14477)));
evalcond[6]=(((gconst16*r01*x14477))+((r00*x14473))+((r01*x14470))+(((-1.0)*r00*x14466*x14474))+(((-1.0)*x14468))+((r02*x14478))+x14472);
evalcond[7]=(((r01*x14466))+((r00*x14462*x14470))+(((-1.0)*r02*sj3*x14475))+x14479+(((-1.0)*r01*x14473*x14474))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14467))+((r21*x14466))+(((-1.0)*r22*sj3*x14475))+(((-1.0)*x14472))+x14468+(((-1.0)*sj3*x14465*x14474))+((sj3*x14462*x14469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14480=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14480.valid){
continue;
}
CheckValue<IkReal> x14481 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14480.value)))+(x14481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14482=IKsin(j4);
IkReal x14483=IKcos(j4);
IkReal x14484=(cj2*sj1);
IkReal x14485=(cj1*sj2);
IkReal x14486=(gconst16*r21);
IkReal x14487=(cj3*gconst17);
IkReal x14488=(gconst16*r20);
IkReal x14489=(sj1*sj2);
IkReal x14490=(gconst17*r20);
IkReal x14491=(gconst17*sj3);
IkReal x14492=(gconst16*r10);
IkReal x14493=(cj1*cj2);
IkReal x14494=(gconst16*sj3);
IkReal x14495=((1.0)*x14483);
IkReal x14496=((1.0)*x14482);
IkReal x14497=(gconst16*x14482);
IkReal x14498=(cj3*x14483);
IkReal x14499=(cj3*x14482);
IkReal x14500=(x14484+x14485);
evalcond[0]=(((x14482*x14486))+(((-1.0)*x14490*x14496))+(((-1.0)*r22*x14495)));
evalcond[1]=((((-1.0)*r02*x14495))+((r01*x14497))+(((-1.0)*gconst17*r00*x14496)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14496))+((r11*x14497))+(((-1.0)*r12*x14495)));
evalcond[3]=((((-1.0)*r10*x14487*x14495))+((r12*x14499))+((r11*x14491))+((sj3*x14492))+((gconst16*r11*x14498)));
evalcond[4]=((((-1.0)*r11*x14494*x14495))+((r11*x14487))+((cj3*x14492))+(((-1.0)*r12*sj3*x14496))+((r10*x14483*x14491)));
evalcond[5]=(((r21*x14491))+((x14486*x14498))+((r22*x14499))+x14500+(((-1.0)*r20*x14487*x14495))+((sj3*x14488)));
evalcond[6]=(((gconst16*r01*x14498))+(((-1.0)*x14489))+((r02*x14499))+x14493+((r00*x14494))+((r01*x14491))+(((-1.0)*r00*x14487*x14495)));
evalcond[7]=((((-1.0)*r01*x14494*x14495))+(((-1.0)*r02*sj3*x14496))+x14500+((r00*x14483*x14491))+((r01*x14487))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14493))+((r21*x14487))+((cj3*x14488))+x14489+(((-1.0)*sj3*x14486*x14495))+((sj3*x14483*x14490))+(((-1.0)*r22*sj3*x14496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14501=((-1.0)*r01);
CheckValue<IkReal> x14504 = IKatan2WithCheck(IkReal(x14501),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14504.valid){
continue;
}
IkReal x14502=((1.0)*(x14504.value));
IkReal x14503=x14400;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14502)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14502)));
IkReal gconst16=(x14501*x14503);
IkReal gconst17=((1.0)*r00*x14503);
IkReal x14505=r02*r02;
IkReal x14506=(r12*sj0);
IkReal x14507=((1.0)*cj0);
IkReal x14508=x14400;
j4eval[0]=((IKabs(((((-1.0)*r02*x14507))+(((-1.0)*x14506)))))+(IKabs(((((-1.0)*x14507*x14508))+((cj0*x14505*x14508))+((r02*x14506*x14508))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14509=((1.0)*r12);
IkReal x14510=(sj1*sj2);
IkReal x14511=(cj1*cj2);
IkReal x14512=((1.0)*sj3);
IkReal x14513=(gconst16*r21);
IkReal x14514=(cj3*gconst16*r20);
IkReal x14515=(gconst17*r20*sj3);
IkReal x14516=(cj3*gconst17*r21);
CheckValue<IkReal> x14517=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14513))+(((-1.0)*gconst16*r11*x14512*x14513))+(((-1.0)*r10*r20*x14512*(gconst17*gconst17)))+((gconst16*r11*x14515))),-1);
if(!x14517.valid){
continue;
}
CheckValue<IkReal> x14518=IKPowWithIntegerCheck(((((-1.0)*x14512*x14513))+x14515),-1);
if(!x14518.valid){
continue;
}
if( IKabs(((x14517.value)*(((((-1.0)*x14509*x14514))+(((-1.0)*x14509*x14516))+(((-1.0)*x14509*x14510))+((cj0*sj3*x14513))+((r12*x14511))+(((-1.0)*cj0*gconst17*r20*x14512)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14518.value)*((x14511+(((-1.0)*x14510))+(((-1.0)*x14514))+(((-1.0)*x14516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14517.value)*(((((-1.0)*x14509*x14514))+(((-1.0)*x14509*x14516))+(((-1.0)*x14509*x14510))+((cj0*sj3*x14513))+((r12*x14511))+(((-1.0)*cj0*gconst17*r20*x14512))))))+IKsqr(((x14518.value)*((x14511+(((-1.0)*x14510))+(((-1.0)*x14514))+(((-1.0)*x14516))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14517.value)*(((((-1.0)*x14509*x14514))+(((-1.0)*x14509*x14516))+(((-1.0)*x14509*x14510))+((cj0*sj3*x14513))+((r12*x14511))+(((-1.0)*cj0*gconst17*r20*x14512))))), ((x14518.value)*((x14511+(((-1.0)*x14510))+(((-1.0)*x14514))+(((-1.0)*x14516))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14519=IKsin(j4);
IkReal x14520=IKcos(j4);
IkReal x14521=((1.0)*gconst17);
IkReal x14522=(gconst17*sj3);
IkReal x14523=(gconst16*r21);
IkReal x14524=(cj3*gconst17);
IkReal x14525=(sj1*sj2);
IkReal x14526=((1.0)*sj0);
IkReal x14527=(gconst16*sj3);
IkReal x14528=(cj3*gconst16);
IkReal x14529=(cj2*sj1);
IkReal x14530=((1.0)*cj0);
IkReal x14531=((1.0)*sj3);
IkReal x14532=(cj1*sj2);
IkReal x14533=(cj3*x14520);
IkReal x14534=(gconst16*x14519);
IkReal x14535=((1.0)*x14520);
IkReal x14536=((1.0)*cj1*cj2);
IkReal x14537=(r02*x14519);
IkReal x14538=(r12*x14519);
evalcond[0]=(((x14519*x14523))+(((-1.0)*r20*x14519*x14521)));
evalcond[1]=(cj0+(((-1.0)*r12*x14535))+((r11*x14534))+(((-1.0)*r10*x14519*x14521)));
evalcond[2]=((((-1.0)*r00*x14519*x14521))+((r01*x14534))+(((-1.0)*x14526))+(((-1.0)*r02*x14535)));
evalcond[3]=(((r20*x14527))+((x14523*x14533))+x14529+x14532+(((-1.0)*r20*x14521*x14533))+((r21*x14522)));
evalcond[4]=((((-1.0)*x14536))+((r20*x14520*x14522))+((r20*x14528))+x14525+((r21*x14524))+(((-1.0)*x14520*x14523*x14531)));
evalcond[5]=(((r01*x14522))+((r00*x14527))+((cj3*x14537))+((cj0*x14525))+((r01*x14520*x14528))+(((-1.0)*r00*x14521*x14533))+(((-1.0)*cj1*cj2*x14530)));
evalcond[6]=(((r11*x14520*x14528))+((cj3*x14538))+((r11*x14522))+(((-1.0)*cj1*cj2*x14526))+((sj0*x14525))+((r10*x14527))+(((-1.0)*r10*x14521*x14533)));
evalcond[7]=(((r00*x14520*x14522))+((r01*x14524))+((r00*x14528))+(((-1.0)*x14530*x14532))+(((-1.0)*r01*x14527*x14535))+(((-1.0)*x14531*x14537))+(((-1.0)*x14529*x14530)));
evalcond[8]=((((-1.0)*x14526*x14532))+(((-1.0)*r11*x14527*x14535))+(((-1.0)*x14526*x14529))+(((-1.0)*x14531*x14538))+((r11*x14524))+((r10*x14520*x14522))+((r10*x14528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14539=((1.0)*sj0);
IkReal x14540=((1.0)*cj0);
CheckValue<IkReal> x14541=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14541.valid){
continue;
}
CheckValue<IkReal> x14542 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14539))+(((-1.0)*r02*x14540)))),IkReal(((((-1.0)*gconst16*r11*x14539))+(((-1.0)*gconst16*r01*x14540))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14541.value)))+(x14542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14543=IKsin(j4);
IkReal x14544=IKcos(j4);
IkReal x14545=((1.0)*gconst17);
IkReal x14546=(gconst17*sj3);
IkReal x14547=(gconst16*r21);
IkReal x14548=(cj3*gconst17);
IkReal x14549=(sj1*sj2);
IkReal x14550=((1.0)*sj0);
IkReal x14551=(gconst16*sj3);
IkReal x14552=(cj3*gconst16);
IkReal x14553=(cj2*sj1);
IkReal x14554=((1.0)*cj0);
IkReal x14555=((1.0)*sj3);
IkReal x14556=(cj1*sj2);
IkReal x14557=(cj3*x14544);
IkReal x14558=(gconst16*x14543);
IkReal x14559=((1.0)*x14544);
IkReal x14560=((1.0)*cj1*cj2);
IkReal x14561=(r02*x14543);
IkReal x14562=(r12*x14543);
evalcond[0]=((((-1.0)*r20*x14543*x14545))+((x14543*x14547)));
evalcond[1]=(cj0+(((-1.0)*r12*x14559))+((r11*x14558))+(((-1.0)*r10*x14543*x14545)));
evalcond[2]=((((-1.0)*r02*x14559))+(((-1.0)*x14550))+((r01*x14558))+(((-1.0)*r00*x14543*x14545)));
evalcond[3]=(((r20*x14551))+((r21*x14546))+x14553+x14556+(((-1.0)*r20*x14545*x14557))+((x14547*x14557)));
evalcond[4]=(((r20*x14552))+((r21*x14548))+(((-1.0)*x14560))+(((-1.0)*x14544*x14547*x14555))+x14549+((r20*x14544*x14546)));
evalcond[5]=(((r01*x14546))+(((-1.0)*cj1*cj2*x14554))+((cj0*x14549))+((cj3*x14561))+(((-1.0)*r00*x14545*x14557))+((r00*x14551))+((r01*x14544*x14552)));
evalcond[6]=(((sj0*x14549))+((r11*x14546))+(((-1.0)*cj1*cj2*x14550))+((r11*x14544*x14552))+(((-1.0)*r10*x14545*x14557))+((cj3*x14562))+((r10*x14551)));
evalcond[7]=((((-1.0)*x14554*x14556))+(((-1.0)*r01*x14551*x14559))+((r01*x14548))+(((-1.0)*x14553*x14554))+((r00*x14544*x14546))+(((-1.0)*x14555*x14561))+((r00*x14552)));
evalcond[8]=(((r11*x14548))+(((-1.0)*x14550*x14556))+(((-1.0)*x14550*x14553))+((r10*x14544*x14546))+((r10*x14552))+(((-1.0)*r11*x14551*x14559))+(((-1.0)*x14555*x14562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14563=((1.0)*sj0);
IkReal x14564=((1.0)*cj0);
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14565.valid){
continue;
}
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14564))+(((-1.0)*r12*x14563)))),IkReal(((((-1.0)*gconst16*r01*x14564))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14565.value)))+(x14566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14567=IKsin(j4);
IkReal x14568=IKcos(j4);
IkReal x14569=(cj3*gconst17);
IkReal x14570=(gconst16*r21);
IkReal x14571=(gconst17*sj3);
IkReal x14572=(gconst16*r20);
IkReal x14573=(sj1*sj2);
IkReal x14574=(gconst16*r10);
IkReal x14575=(cj2*sj1);
IkReal x14576=(gconst16*sj3);
IkReal x14577=((1.0)*cj0);
IkReal x14578=((1.0)*sj0);
IkReal x14579=(cj1*sj2);
IkReal x14580=((1.0)*x14568);
IkReal x14581=(gconst16*x14567);
IkReal x14582=(cj3*x14568);
IkReal x14583=(cj3*x14567);
IkReal x14584=((1.0)*cj1*cj2);
IkReal x14585=((1.0)*gconst17*x14567);
IkReal x14586=((1.0)*sj3*x14567);
evalcond[0]=(((x14567*x14570))+(((-1.0)*r20*x14585))+(((-1.0)*r22*x14580)));
evalcond[1]=(cj0+(((-1.0)*r12*x14580))+(((-1.0)*r10*x14585))+((r11*x14581)));
evalcond[2]=((((-1.0)*r02*x14580))+(((-1.0)*x14578))+(((-1.0)*r00*x14585))+((r01*x14581)));
evalcond[3]=(((r21*x14571))+((x14570*x14582))+((r22*x14583))+x14575+x14579+(((-1.0)*r20*x14569*x14580))+((sj3*x14572)));
evalcond[4]=(((r21*x14569))+(((-1.0)*x14584))+((r20*x14568*x14571))+x14573+((cj3*x14572))+(((-1.0)*r22*x14586))+(((-1.0)*sj3*x14570*x14580)));
evalcond[5]=(((r02*x14583))+((cj0*x14573))+(((-1.0)*r00*x14569*x14580))+(((-1.0)*cj1*cj2*x14577))+((gconst16*r01*x14582))+((r01*x14571))+((r00*x14576)));
evalcond[6]=(((gconst16*r11*x14582))+(((-1.0)*r10*x14569*x14580))+(((-1.0)*cj1*cj2*x14578))+((r11*x14571))+((sj0*x14573))+((r12*x14583))+((sj3*x14574)));
evalcond[7]=(((r01*x14569))+(((-1.0)*r01*x14576*x14580))+(((-1.0)*r02*x14586))+(((-1.0)*x14577*x14579))+((r00*x14568*x14571))+(((-1.0)*x14575*x14577))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14576*x14580))+((r10*x14568*x14571))+(((-1.0)*r12*x14586))+(((-1.0)*x14578*x14579))+((r11*x14569))+((cj3*x14574))+(((-1.0)*x14575*x14578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14587=((1.0)*gconst17);
CheckValue<IkReal> x14588 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14587))+((gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14588.valid){
continue;
}
CheckValue<IkReal> x14589=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14587)))),-1);
if(!x14589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14588.value)+(((1.5707963267949)*(x14589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14590=IKsin(j4);
IkReal x14591=IKcos(j4);
IkReal x14592=(cj3*gconst17);
IkReal x14593=(gconst16*r21);
IkReal x14594=(gconst17*sj3);
IkReal x14595=(gconst16*r20);
IkReal x14596=(sj1*sj2);
IkReal x14597=(gconst16*r10);
IkReal x14598=(cj2*sj1);
IkReal x14599=(gconst16*sj3);
IkReal x14600=((1.0)*cj0);
IkReal x14601=((1.0)*sj0);
IkReal x14602=(cj1*sj2);
IkReal x14603=((1.0)*x14591);
IkReal x14604=(gconst16*x14590);
IkReal x14605=(cj3*x14591);
IkReal x14606=(cj3*x14590);
IkReal x14607=((1.0)*cj1*cj2);
IkReal x14608=((1.0)*gconst17*x14590);
IkReal x14609=((1.0)*sj3*x14590);
evalcond[0]=((((-1.0)*r20*x14608))+(((-1.0)*r22*x14603))+((x14590*x14593)));
evalcond[1]=(cj0+(((-1.0)*r10*x14608))+(((-1.0)*r12*x14603))+((r11*x14604)));
evalcond[2]=(((r01*x14604))+(((-1.0)*r00*x14608))+(((-1.0)*r02*x14603))+(((-1.0)*x14601)));
evalcond[3]=((((-1.0)*r20*x14592*x14603))+((x14593*x14605))+((r21*x14594))+x14598+((r22*x14606))+x14602+((sj3*x14595)));
evalcond[4]=(((cj3*x14595))+(((-1.0)*r22*x14609))+((r21*x14592))+(((-1.0)*sj3*x14593*x14603))+x14596+(((-1.0)*x14607))+((r20*x14591*x14594)));
evalcond[5]=(((r02*x14606))+((gconst16*r01*x14605))+(((-1.0)*r00*x14592*x14603))+(((-1.0)*cj1*cj2*x14600))+((r01*x14594))+((cj0*x14596))+((r00*x14599)));
evalcond[6]=(((gconst16*r11*x14605))+((sj0*x14596))+(((-1.0)*cj1*cj2*x14601))+((sj3*x14597))+((r11*x14594))+((r12*x14606))+(((-1.0)*r10*x14592*x14603)));
evalcond[7]=((((-1.0)*x14598*x14600))+(((-1.0)*x14600*x14602))+((r00*x14591*x14594))+(((-1.0)*r01*x14599*x14603))+((r01*x14592))+(((-1.0)*r02*x14609))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14598*x14601))+((cj3*x14597))+(((-1.0)*r12*x14609))+(((-1.0)*r11*x14599*x14603))+((r10*x14591*x14594))+((r11*x14592))+(((-1.0)*x14601*x14602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14610=((1.0)*gconst17);
CheckValue<IkReal> x14611=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14610)))),-1);
if(!x14611.valid){
continue;
}
CheckValue<IkReal> x14612 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14610))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14611.value)))+(x14612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14613=IKsin(j4);
IkReal x14614=IKcos(j4);
IkReal x14615=(cj3*gconst17);
IkReal x14616=(gconst16*r21);
IkReal x14617=(gconst17*sj3);
IkReal x14618=(gconst16*r20);
IkReal x14619=(sj1*sj2);
IkReal x14620=(gconst16*r10);
IkReal x14621=(cj2*sj1);
IkReal x14622=(gconst16*sj3);
IkReal x14623=((1.0)*cj0);
IkReal x14624=((1.0)*sj0);
IkReal x14625=(cj1*sj2);
IkReal x14626=((1.0)*x14614);
IkReal x14627=(gconst16*x14613);
IkReal x14628=(cj3*x14614);
IkReal x14629=(cj3*x14613);
IkReal x14630=((1.0)*cj1*cj2);
IkReal x14631=((1.0)*gconst17*x14613);
IkReal x14632=((1.0)*sj3*x14613);
evalcond[0]=((((-1.0)*r20*x14631))+((x14613*x14616))+(((-1.0)*r22*x14626)));
evalcond[1]=(cj0+((r11*x14627))+(((-1.0)*r12*x14626))+(((-1.0)*r10*x14631)));
evalcond[2]=((((-1.0)*r02*x14626))+(((-1.0)*x14624))+(((-1.0)*r00*x14631))+((r01*x14627)));
evalcond[3]=((((-1.0)*r20*x14615*x14626))+((r21*x14617))+((x14616*x14628))+x14625+x14621+((r22*x14629))+((sj3*x14618)));
evalcond[4]=((((-1.0)*r22*x14632))+((r20*x14614*x14617))+((r21*x14615))+(((-1.0)*x14630))+(((-1.0)*sj3*x14616*x14626))+((cj3*x14618))+x14619);
evalcond[5]=(((r02*x14629))+((cj0*x14619))+((gconst16*r01*x14628))+((r01*x14617))+(((-1.0)*r00*x14615*x14626))+((r00*x14622))+(((-1.0)*cj1*cj2*x14623)));
evalcond[6]=(((sj3*x14620))+((sj0*x14619))+((gconst16*r11*x14628))+((r12*x14629))+((r11*x14617))+(((-1.0)*r10*x14615*x14626))+(((-1.0)*cj1*cj2*x14624)));
evalcond[7]=((((-1.0)*r01*x14622*x14626))+(((-1.0)*x14621*x14623))+((r01*x14615))+(((-1.0)*x14623*x14625))+((cj3*gconst16*r00))+((r00*x14614*x14617))+(((-1.0)*r02*x14632)));
evalcond[8]=(((cj3*x14620))+(((-1.0)*x14621*x14624))+((r10*x14614*x14617))+(((-1.0)*r11*x14622*x14626))+((r11*x14615))+(((-1.0)*x14624*x14625))+(((-1.0)*r12*x14632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14633=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14633;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14634=((1.0)*cj5);
IkReal x14635=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14634)));
j4eval[0]=x14635;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14634))+((r21*sj5))))));
j4eval[2]=IKsign(x14635);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14636=cj5*cj5;
IkReal x14637=(cj3*r01);
IkReal x14638=(cj5*sj5);
IkReal x14639=((1.0)*cj3);
IkReal x14640=(((r21*x14636*x14637))+((r20*x14637*x14638))+(((-1.0)*r00*r20*x14636*x14639))+((cj3*r00*r21*x14638))+(((-1.0)*r21*x14637))+(((-1.0)*r02*r22*x14639)));
j4eval[0]=x14640;
j4eval[1]=IKsign(x14640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14641=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14641;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14642=((1.0)*cj5);
IkReal x14643=((((-1.0)*r11*x14642))+(((-1.0)*r10*sj5)));
j4eval[0]=x14643;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14642))))));
j4eval[2]=IKsign(x14643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14644=cj5*cj5;
IkReal x14645=r01*r01;
IkReal x14646=(r01*sj5);
IkReal x14647=(cj5*r00);
IkReal x14648=((((2.0)*x14646*x14647))+(((-1.0)*x14645))+(((-1.0)*(r02*r02)))+(((-1.0)*x14644*(r00*r00)))+((x14644*x14645)));
j4eval[0]=x14648;
j4eval[1]=IKsign(x14648);
j4eval[2]=((IKabs(((((-1.0)*x14646))+x14647)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14649=cj5*cj5;
IkReal x14650=r01*r01;
IkReal x14651=(r01*sj5);
IkReal x14652=(cj5*r00);
CheckValue<IkReal> x14653=IKPowWithIntegerCheck(IKsign(((((2.0)*x14651*x14652))+(((-1.0)*x14650))+(((-1.0)*x14649*(r00*r00)))+(((-1.0)*(r02*r02)))+((x14649*x14650)))),-1);
if(!x14653.valid){
continue;
}
CheckValue<IkReal> x14654 = IKatan2WithCheck(IkReal(((((-1.0)*x14651))+x14652)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14653.value)))+(x14654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14655=IKsin(j4);
IkReal x14656=IKcos(j4);
IkReal x14657=(cj5*r10);
IkReal x14658=(r01*sj5);
IkReal x14659=((1.0)*cj2);
IkReal x14660=(cj5*r00);
IkReal x14661=(cj5*r20);
IkReal x14662=((1.0)*x14656);
IkReal x14663=((1.0)*x14655);
IkReal x14664=(sj5*x14655);
evalcond[0]=((((-1.0)*r22*x14662))+(((-1.0)*x14661*x14663))+((r21*x14664)));
evalcond[1]=((((-1.0)*r12*x14662))+(((-1.0)*x14657*x14663))+((r11*x14664)));
evalcond[2]=(((x14656*x14660))+(((-1.0)*x14658*x14662))+(((-1.0)*r02*x14663)));
evalcond[3]=((-1.0)+(((-1.0)*x14660*x14663))+((x14655*x14658))+(((-1.0)*r02*x14662)));
evalcond[4]=((((-1.0)*r22*x14663))+((x14656*x14661))+(((-1.0)*cj1*x14659))+((sj1*sj2))+(((-1.0)*r21*sj5*x14662)));
evalcond[5]=((((-1.0)*r11*sj5*x14662))+((x14656*x14657))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14663))+(((-1.0)*sj1*x14659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14665=((1.0)*cj5);
CheckValue<IkReal> x14666=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14665)))),-1);
if(!x14666.valid){
continue;
}
CheckValue<IkReal> x14667 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14666.value)))+(x14667.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14668=IKsin(j4);
IkReal x14669=IKcos(j4);
IkReal x14670=(cj5*r10);
IkReal x14671=(r01*sj5);
IkReal x14672=((1.0)*cj2);
IkReal x14673=(cj5*r00);
IkReal x14674=(cj5*r20);
IkReal x14675=((1.0)*x14669);
IkReal x14676=((1.0)*x14668);
IkReal x14677=(sj5*x14668);
evalcond[0]=(((r21*x14677))+(((-1.0)*r22*x14675))+(((-1.0)*x14674*x14676)));
evalcond[1]=((((-1.0)*x14670*x14676))+(((-1.0)*r12*x14675))+((r11*x14677)));
evalcond[2]=((((-1.0)*x14671*x14675))+((x14669*x14673))+(((-1.0)*r02*x14676)));
evalcond[3]=((-1.0)+((x14668*x14671))+(((-1.0)*x14673*x14676))+(((-1.0)*r02*x14675)));
evalcond[4]=((((-1.0)*cj1*x14672))+(((-1.0)*r22*x14676))+((sj1*sj2))+((x14669*x14674))+(((-1.0)*r21*sj5*x14675)));
evalcond[5]=((((-1.0)*sj1*x14672))+(((-1.0)*r11*sj5*x14675))+(((-1.0)*cj1*sj2))+((x14669*x14670))+(((-1.0)*r12*x14676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14678=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14678.valid){
continue;
}
CheckValue<IkReal> x14679 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14678.value)))+(x14679.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14680=IKsin(j4);
IkReal x14681=IKcos(j4);
IkReal x14682=(cj5*r10);
IkReal x14683=(r01*sj5);
IkReal x14684=((1.0)*cj2);
IkReal x14685=(cj5*r00);
IkReal x14686=(cj5*r20);
IkReal x14687=((1.0)*x14681);
IkReal x14688=((1.0)*x14680);
IkReal x14689=(sj5*x14680);
evalcond[0]=((((-1.0)*x14686*x14688))+(((-1.0)*r22*x14687))+((r21*x14689)));
evalcond[1]=(((r11*x14689))+(((-1.0)*x14682*x14688))+(((-1.0)*r12*x14687)));
evalcond[2]=((((-1.0)*x14683*x14687))+((x14681*x14685))+(((-1.0)*r02*x14688)));
evalcond[3]=((-1.0)+((x14680*x14683))+(((-1.0)*r02*x14687))+(((-1.0)*x14685*x14688)));
evalcond[4]=((((-1.0)*cj1*x14684))+(((-1.0)*r21*sj5*x14687))+((x14681*x14686))+((sj1*sj2))+(((-1.0)*r22*x14688)));
evalcond[5]=(((x14681*x14682))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14684))+(((-1.0)*r11*sj5*x14687))+(((-1.0)*r12*x14688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14690=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14690;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14691=((1.0)*cj5);
IkReal x14692=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14691)));
j4eval[0]=x14692;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14691))))));
j4eval[2]=IKsign(x14692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14693=cj5*cj5;
IkReal x14694=r01*r01;
IkReal x14695=(cj5*r00);
IkReal x14696=(r01*sj5);
IkReal x14697=((((-1.0)*x14693*x14694))+((x14693*(r00*r00)))+x14694+(r02*r02)+(((-2.0)*x14695*x14696)));
j4eval[0]=x14697;
j4eval[1]=IKsign(x14697);
j4eval[2]=((IKabs((x14696+(((-1.0)*x14695)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14698=cj5*cj5;
IkReal x14699=r01*r01;
IkReal x14700=(r01*sj5);
IkReal x14701=(cj5*r00);
CheckValue<IkReal> x14702=IKPowWithIntegerCheck(IKsign((((x14698*(r00*r00)))+(((-1.0)*x14698*x14699))+(((-2.0)*x14700*x14701))+x14699+(r02*r02))),-1);
if(!x14702.valid){
continue;
}
CheckValue<IkReal> x14703 = IKatan2WithCheck(IkReal(((((-1.0)*x14701))+x14700)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14702.value)))+(x14703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14704=IKcos(j4);
IkReal x14705=IKsin(j4);
IkReal x14706=(cj5*r00);
IkReal x14707=(cj5*r10);
IkReal x14708=(r21*sj5);
IkReal x14709=((1.0)*cj2);
IkReal x14710=(cj5*r20);
IkReal x14711=((1.0)*x14704);
IkReal x14712=((1.0)*x14705);
IkReal x14713=(sj5*x14705);
IkReal x14714=(sj5*x14704);
evalcond[0]=((((-1.0)*x14706*x14711))+((r01*x14714))+((r02*x14705)));
evalcond[1]=((((-1.0)*r22*x14711))+((x14705*x14708))+(((-1.0)*x14710*x14712)));
evalcond[2]=(((r11*x14713))+(((-1.0)*x14707*x14712))+(((-1.0)*r12*x14711)));
evalcond[3]=((-1.0)+(((-1.0)*x14706*x14712))+(((-1.0)*r02*x14711))+((r01*x14713)));
evalcond[4]=(((x14704*x14708))+((sj1*sj2))+(((-1.0)*cj1*x14709))+(((-1.0)*x14710*x14711))+((r22*x14705)));
evalcond[5]=(((r11*x14714))+(((-1.0)*x14707*x14711))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14709))+((r12*x14705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14715=((1.0)*cj5);
CheckValue<IkReal> x14716 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14716.valid){
continue;
}
CheckValue<IkReal> x14717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14715)))),-1);
if(!x14717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14716.value)+(((1.5707963267949)*(x14717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14718=IKcos(j4);
IkReal x14719=IKsin(j4);
IkReal x14720=(cj5*r00);
IkReal x14721=(cj5*r10);
IkReal x14722=(r21*sj5);
IkReal x14723=((1.0)*cj2);
IkReal x14724=(cj5*r20);
IkReal x14725=((1.0)*x14718);
IkReal x14726=((1.0)*x14719);
IkReal x14727=(sj5*x14719);
IkReal x14728=(sj5*x14718);
evalcond[0]=(((r01*x14728))+((r02*x14719))+(((-1.0)*x14720*x14725)));
evalcond[1]=(((x14719*x14722))+(((-1.0)*r22*x14725))+(((-1.0)*x14724*x14726)));
evalcond[2]=((((-1.0)*r12*x14725))+(((-1.0)*x14721*x14726))+((r11*x14727)));
evalcond[3]=((-1.0)+((r01*x14727))+(((-1.0)*x14720*x14726))+(((-1.0)*r02*x14725)));
evalcond[4]=(((r22*x14719))+((sj1*sj2))+((x14718*x14722))+(((-1.0)*cj1*x14723))+(((-1.0)*x14724*x14725)));
evalcond[5]=(((r12*x14719))+(((-1.0)*sj1*x14723))+(((-1.0)*cj1*sj2))+(((-1.0)*x14721*x14725))+((r11*x14728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14729=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14729.valid){
continue;
}
CheckValue<IkReal> x14730 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14729.value)))+(x14730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14731=IKcos(j4);
IkReal x14732=IKsin(j4);
IkReal x14733=(cj5*r00);
IkReal x14734=(cj5*r10);
IkReal x14735=(r21*sj5);
IkReal x14736=((1.0)*cj2);
IkReal x14737=(cj5*r20);
IkReal x14738=((1.0)*x14731);
IkReal x14739=((1.0)*x14732);
IkReal x14740=(sj5*x14732);
IkReal x14741=(sj5*x14731);
evalcond[0]=(((r02*x14732))+((r01*x14741))+(((-1.0)*x14733*x14738)));
evalcond[1]=(((x14732*x14735))+(((-1.0)*x14737*x14739))+(((-1.0)*r22*x14738)));
evalcond[2]=((((-1.0)*r12*x14738))+((r11*x14740))+(((-1.0)*x14734*x14739)));
evalcond[3]=((-1.0)+((r01*x14740))+(((-1.0)*r02*x14738))+(((-1.0)*x14733*x14739)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14737*x14738))+(((-1.0)*cj1*x14736))+((r22*x14732))+((x14731*x14735)));
evalcond[5]=((((-1.0)*sj1*x14736))+((r11*x14741))+(((-1.0)*cj1*sj2))+((r12*x14732))+(((-1.0)*x14734*x14738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14743 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14743)==0){
continue;
}
IkReal x14742=pow(x14743,-0.5);
CheckValue<IkReal> x14744 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14744.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14744.value));
IkReal gconst49=((-1.0)*r21*x14742);
IkReal gconst50=(r20*x14742);
CheckValue<IkReal> x14745 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14748 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14748.valid){
continue;
}
IkReal x14746=((-1.0)*(x14748.value));
IkReal x14747=x14742;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14746;
IkReal gconst48=x14746;
IkReal gconst49=((-1.0)*r21*x14747);
IkReal gconst50=(r20*x14747);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14751 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14751.valid){
continue;
}
IkReal x14749=((-1.0)*(x14751.value));
IkReal x14750=x14742;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14749;
IkReal gconst48=x14749;
IkReal gconst49=((-1.0)*r21*x14750);
IkReal gconst50=(r20*x14750);
CheckValue<IkReal> x14759=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14759.valid){
continue;
}
IkReal x14752=x14759.value;
IkReal x14753=(sj3*x14752);
IkReal x14754=(r11*x14753);
IkReal x14755=(r00*x14753);
IkReal x14756=(r01*x14753);
IkReal x14757=(r10*x14753);
IkReal x14758=(r20*r21*x14753);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x14755*(r20*r20)))+((r01*x14754*(r21*r21)))+((r00*r20*r21*x14754))+((r10*r20*r21*x14756))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14760=gconst49*gconst49;
IkReal x14761=gconst50*gconst50;
IkReal x14762=((1.0)*cj3);
IkReal x14763=(gconst50*r01);
IkReal x14764=(gconst49*r10);
IkReal x14765=(r12*sj3);
IkReal x14766=(gconst49*r00);
IkReal x14767=(r00*sj3);
IkReal x14768=(r11*x14760);
IkReal x14769=(r10*x14761);
CheckValue<IkReal> x14770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14762*x14769))+(((-1.0)*r02*r12*x14762))+(((-1.0)*r01*x14762*x14768))+((cj3*x14763*x14764))+((cj3*gconst50*r11*x14766)))),-1);
if(!x14770.valid){
continue;
}
CheckValue<IkReal> x14771 = IKatan2WithCheck(IkReal((((x14765*x14766))+((x14763*x14765)))),IkReal(((((-1.0)*gconst50*x14764*x14767))+((x14767*x14768))+((gconst49*r11*sj3*x14763))+(((-1.0)*r01*sj3*x14769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14770.value)))+(x14771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14772=IKsin(j4);
IkReal x14773=IKcos(j4);
IkReal x14774=(sj1*sj2);
IkReal x14775=(gconst50*r20);
IkReal x14776=(gconst50*sj3);
IkReal x14777=(cj3*r01);
IkReal x14778=(gconst50*r10);
IkReal x14779=(gconst49*sj3);
IkReal x14780=((1.0)*cj2);
IkReal x14781=(cj1*sj2);
IkReal x14782=(cj3*r11);
IkReal x14783=(gconst50*r00);
IkReal x14784=(cj3*r21);
IkReal x14785=(cj3*gconst49);
IkReal x14786=(cj1*x14780);
IkReal x14787=((1.0)*x14773);
IkReal x14788=((1.0)*x14772);
IkReal x14789=(gconst49*x14772);
IkReal x14790=(gconst49*x14773);
IkReal x14791=(cj3*x14772);
evalcond[0]=(((r21*x14789))+(((-1.0)*r22*x14787))+(((-1.0)*x14775*x14788)));
evalcond[1]=((((-1.0)*x14778*x14788))+(((-1.0)*r12*x14787))+((r11*x14789)));
evalcond[2]=((-1.0)+((r01*x14789))+(((-1.0)*x14783*x14788))+(((-1.0)*r02*x14787)));
evalcond[3]=(((x14777*x14790))+((r00*x14779))+((r01*x14776))+(((-1.0)*cj3*x14783*x14787))+((r02*x14791)));
evalcond[4]=(((r00*x14785))+((r00*x14773*x14776))+(((-1.0)*r02*sj3*x14788))+(((-1.0)*r01*x14779*x14787))+((gconst50*x14777)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14775*x14787))+((r21*x14776))+((x14784*x14790))+x14781+((r22*x14791))+((r20*x14779)));
evalcond[6]=(((x14782*x14790))+((r11*x14776))+((r10*x14779))+((r12*x14791))+x14774+(((-1.0)*cj3*x14778*x14787))+(((-1.0)*x14786)));
evalcond[7]=(((gconst50*x14784))+((sj3*x14773*x14775))+(((-1.0)*r21*x14779*x14787))+(((-1.0)*r22*sj3*x14788))+((r20*x14785))+x14774+(((-1.0)*x14786)));
evalcond[8]=(((r10*x14785))+((gconst50*x14782))+(((-1.0)*x14781))+(((-1.0)*r12*sj3*x14788))+(((-1.0)*r11*x14779*x14787))+(((-1.0)*sj1*x14780))+((r10*x14773*x14776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14792=gconst49*gconst49;
IkReal x14793=gconst50*gconst50;
IkReal x14794=(cj3*r12);
IkReal x14795=(gconst49*r00);
IkReal x14796=(r01*r11);
IkReal x14797=(r00*r11);
IkReal x14798=(cj3*gconst50);
IkReal x14799=((1.0)*r01*r10);
IkReal x14800=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14801=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14799*x14800))+(((-1.0)*gconst50*r11*sj3*x14795))+((r00*r10*sj3*x14793))+((sj3*x14792*x14796)))),-1);
if(!x14801.valid){
continue;
}
CheckValue<IkReal> x14802 = IKatan2WithCheck(IkReal((((gconst50*r01*x14794))+((x14794*x14795)))),IkReal(((((-1.0)*cj3*x14793*x14799))+(((-1.0)*r10*x14795*x14798))+((cj3*x14792*x14797))+((gconst49*x14796*x14798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14801.value)))+(x14802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14803=IKsin(j4);
IkReal x14804=IKcos(j4);
IkReal x14805=(sj1*sj2);
IkReal x14806=(gconst50*r20);
IkReal x14807=(gconst50*sj3);
IkReal x14808=(cj3*r01);
IkReal x14809=(gconst50*r10);
IkReal x14810=(gconst49*sj3);
IkReal x14811=((1.0)*cj2);
IkReal x14812=(cj1*sj2);
IkReal x14813=(cj3*r11);
IkReal x14814=(gconst50*r00);
IkReal x14815=(cj3*r21);
IkReal x14816=(cj3*gconst49);
IkReal x14817=(cj1*x14811);
IkReal x14818=((1.0)*x14804);
IkReal x14819=((1.0)*x14803);
IkReal x14820=(gconst49*x14803);
IkReal x14821=(gconst49*x14804);
IkReal x14822=(cj3*x14803);
evalcond[0]=((((-1.0)*x14806*x14819))+((r21*x14820))+(((-1.0)*r22*x14818)));
evalcond[1]=((((-1.0)*r12*x14818))+(((-1.0)*x14809*x14819))+((r11*x14820)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14818))+(((-1.0)*x14814*x14819))+((r01*x14820)));
evalcond[3]=(((r02*x14822))+((x14808*x14821))+((r01*x14807))+((r00*x14810))+(((-1.0)*cj3*x14814*x14818)));
evalcond[4]=((((-1.0)*r02*sj3*x14819))+((r00*x14816))+((r00*x14804*x14807))+(((-1.0)*r01*x14810*x14818))+((gconst50*x14808)));
evalcond[5]=(((cj2*sj1))+((x14815*x14821))+((r21*x14807))+x14812+((r22*x14822))+(((-1.0)*cj3*x14806*x14818))+((r20*x14810)));
evalcond[6]=(x14805+((r10*x14810))+(((-1.0)*x14817))+((x14813*x14821))+(((-1.0)*cj3*x14809*x14818))+((r12*x14822))+((r11*x14807)));
evalcond[7]=(x14805+(((-1.0)*r21*x14810*x14818))+(((-1.0)*x14817))+((sj3*x14804*x14806))+(((-1.0)*r22*sj3*x14819))+((r20*x14816))+((gconst50*x14815)));
evalcond[8]=(((r10*x14816))+(((-1.0)*r12*sj3*x14819))+((r10*x14804*x14807))+(((-1.0)*x14812))+(((-1.0)*r11*x14810*x14818))+(((-1.0)*sj1*x14811))+((gconst50*x14813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14823=((1.0)*gconst50);
CheckValue<IkReal> x14824 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14824.valid){
continue;
}
CheckValue<IkReal> x14825=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14823)))),-1);
if(!x14825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14824.value)+(((1.5707963267949)*(x14825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14826=IKsin(j4);
IkReal x14827=IKcos(j4);
IkReal x14828=(sj1*sj2);
IkReal x14829=(gconst50*r20);
IkReal x14830=(gconst50*sj3);
IkReal x14831=(cj3*r01);
IkReal x14832=(gconst50*r10);
IkReal x14833=(gconst49*sj3);
IkReal x14834=((1.0)*cj2);
IkReal x14835=(cj1*sj2);
IkReal x14836=(cj3*r11);
IkReal x14837=(gconst50*r00);
IkReal x14838=(cj3*r21);
IkReal x14839=(cj3*gconst49);
IkReal x14840=(cj1*x14834);
IkReal x14841=((1.0)*x14827);
IkReal x14842=((1.0)*x14826);
IkReal x14843=(gconst49*x14826);
IkReal x14844=(gconst49*x14827);
IkReal x14845=(cj3*x14826);
evalcond[0]=((((-1.0)*r22*x14841))+(((-1.0)*x14829*x14842))+((r21*x14843)));
evalcond[1]=((((-1.0)*x14832*x14842))+((r11*x14843))+(((-1.0)*r12*x14841)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14841))+(((-1.0)*x14837*x14842))+((r01*x14843)));
evalcond[3]=(((r02*x14845))+((x14831*x14844))+(((-1.0)*cj3*x14837*x14841))+((r01*x14830))+((r00*x14833)));
evalcond[4]=(((gconst50*x14831))+(((-1.0)*r02*sj3*x14842))+((r00*x14827*x14830))+(((-1.0)*r01*x14833*x14841))+((r00*x14839)));
evalcond[5]=(((cj2*sj1))+x14835+((r20*x14833))+(((-1.0)*cj3*x14829*x14841))+((r21*x14830))+((r22*x14845))+((x14838*x14844)));
evalcond[6]=(((x14836*x14844))+x14828+((r11*x14830))+((r12*x14845))+(((-1.0)*x14840))+((r10*x14833))+(((-1.0)*cj3*x14832*x14841)));
evalcond[7]=(((gconst50*x14838))+x14828+((r20*x14839))+(((-1.0)*x14840))+(((-1.0)*r21*x14833*x14841))+((sj3*x14827*x14829))+(((-1.0)*r22*sj3*x14842)));
evalcond[8]=((((-1.0)*x14835))+((gconst50*x14836))+(((-1.0)*sj1*x14834))+(((-1.0)*r11*x14833*x14841))+((r10*x14839))+((r10*x14827*x14830))+(((-1.0)*r12*sj3*x14842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14847 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14847)==0){
continue;
}
IkReal x14846=pow(x14847,-0.5);
CheckValue<IkReal> x14848 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14848.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14848.value))));
IkReal gconst52=((1.0)*r21*x14846);
IkReal gconst53=((-1.0)*r20*x14846);
CheckValue<IkReal> x14849 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14849.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14849.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14852 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14852.valid){
continue;
}
IkReal x14850=((1.0)*(x14852.value));
IkReal x14851=x14846;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14850)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14850)));
IkReal gconst52=((1.0)*r21*x14851);
IkReal gconst53=((-1.0)*r20*x14851);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14855 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14855.valid){
continue;
}
IkReal x14853=((1.0)*(x14855.value));
IkReal x14854=x14846;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14853)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14853)));
IkReal gconst52=((1.0)*r21*x14854);
IkReal gconst53=((-1.0)*r20*x14854);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14858 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14858.valid){
continue;
}
IkReal x14856=((1.0)*(x14858.value));
IkReal x14857=x14846;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14856)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14856)));
IkReal gconst52=((1.0)*r21*x14857);
IkReal gconst53=((-1.0)*r20*x14857);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14859=gconst52*gconst52;
IkReal x14860=gconst53*gconst53;
IkReal x14861=(gconst53*r01);
IkReal x14862=(cj3*r20);
IkReal x14863=(r22*sj3);
IkReal x14864=((1.0)*cj3);
IkReal x14865=(gconst52*sj3);
IkReal x14866=((1.0)*r00);
IkReal x14867=(gconst52*r00);
IkReal x14868=(r21*x14859);
CheckValue<IkReal> x14869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14864))+((cj3*gconst53*r21*x14867))+(((-1.0)*x14860*x14862*x14866))+(((-1.0)*r01*x14864*x14868))+((gconst52*x14861*x14862)))),-1);
if(!x14869.valid){
continue;
}
CheckValue<IkReal> x14870 = IKatan2WithCheck(IkReal((((x14863*x14867))+((x14861*x14863)))),IkReal(((((-1.0)*gconst53*r20*x14865*x14866))+((r21*x14861*x14865))+((r00*sj3*x14868))+(((-1.0)*r01*r20*sj3*x14860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14869.value)))+(x14870.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14871=IKsin(j4);
IkReal x14872=IKcos(j4);
IkReal x14873=(sj1*sj2);
IkReal x14874=((1.0)*cj1);
IkReal x14875=(cj3*gconst52);
IkReal x14876=(gconst53*sj3);
IkReal x14877=(cj3*gconst53);
IkReal x14878=(cj2*sj1);
IkReal x14879=(gconst52*sj3);
IkReal x14880=(cj2*x14874);
IkReal x14881=((1.0)*x14872);
IkReal x14882=((1.0)*x14871);
IkReal x14883=(gconst52*x14871);
IkReal x14884=(cj3*x14871);
evalcond[0]=((((-1.0)*r22*x14881))+((r21*x14883))+(((-1.0)*gconst53*r20*x14882)));
evalcond[1]=(((r11*x14883))+(((-1.0)*gconst53*r10*x14882))+(((-1.0)*r12*x14881)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14881))+((r01*x14883))+(((-1.0)*gconst53*r00*x14882)));
evalcond[3]=(((r01*x14872*x14875))+((r00*x14879))+((r01*x14876))+(((-1.0)*r00*x14877*x14881))+((r02*x14884)));
evalcond[4]=(((r00*x14872*x14876))+((r00*x14875))+((r01*x14877))+(((-1.0)*r02*sj3*x14882))+(((-1.0)*r01*x14879*x14881)));
evalcond[5]=(((r22*x14884))+x14878+((cj1*sj2))+(((-1.0)*r20*x14877*x14881))+((r21*x14876))+((r20*x14879))+((r21*x14872*x14875)));
evalcond[6]=(((r11*x14876))+((r10*x14879))+((r12*x14884))+x14873+((r11*x14872*x14875))+(((-1.0)*x14880))+(((-1.0)*r10*x14877*x14881)));
evalcond[7]=((((-1.0)*r22*sj3*x14882))+(((-1.0)*r21*x14879*x14881))+x14873+((r21*x14877))+(((-1.0)*x14880))+((r20*x14875))+((r20*x14872*x14876)));
evalcond[8]=(((r11*x14877))+((r10*x14875))+(((-1.0)*r12*sj3*x14882))+((r10*x14872*x14876))+(((-1.0)*r11*x14879*x14881))+(((-1.0)*sj2*x14874))+(((-1.0)*x14878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14885=((1.0)*gconst53);
CheckValue<IkReal> x14886 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14886.valid){
continue;
}
CheckValue<IkReal> x14887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14885))+(((-1.0)*gconst52*r10)))),-1);
if(!x14887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14886.value)+(((1.5707963267949)*(x14887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14888=IKsin(j4);
IkReal x14889=IKcos(j4);
IkReal x14890=(sj1*sj2);
IkReal x14891=((1.0)*cj1);
IkReal x14892=(cj3*gconst52);
IkReal x14893=(gconst53*sj3);
IkReal x14894=(cj3*gconst53);
IkReal x14895=(cj2*sj1);
IkReal x14896=(gconst52*sj3);
IkReal x14897=(cj2*x14891);
IkReal x14898=((1.0)*x14889);
IkReal x14899=((1.0)*x14888);
IkReal x14900=(gconst52*x14888);
IkReal x14901=(cj3*x14888);
evalcond[0]=(((r21*x14900))+(((-1.0)*r22*x14898))+(((-1.0)*gconst53*r20*x14899)));
evalcond[1]=(((r11*x14900))+(((-1.0)*gconst53*r10*x14899))+(((-1.0)*r12*x14898)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14899))+((r01*x14900))+(((-1.0)*r02*x14898)));
evalcond[3]=((((-1.0)*r00*x14894*x14898))+((r01*x14893))+((r01*x14889*x14892))+((r00*x14896))+((r02*x14901)));
evalcond[4]=(((r00*x14889*x14893))+((r01*x14894))+((r00*x14892))+(((-1.0)*r02*sj3*x14899))+(((-1.0)*r01*x14896*x14898)));
evalcond[5]=(((r22*x14901))+(((-1.0)*r20*x14894*x14898))+((r21*x14889*x14892))+x14895+((cj1*sj2))+((r21*x14893))+((r20*x14896)));
evalcond[6]=(((r10*x14896))+((r11*x14893))+x14890+((r12*x14901))+(((-1.0)*x14897))+((r11*x14889*x14892))+(((-1.0)*r10*x14894*x14898)));
evalcond[7]=(x14890+((r21*x14894))+(((-1.0)*r21*x14896*x14898))+((r20*x14889*x14893))+(((-1.0)*x14897))+((r20*x14892))+(((-1.0)*r22*sj3*x14899)));
evalcond[8]=(((r10*x14892))+(((-1.0)*sj2*x14891))+(((-1.0)*r12*sj3*x14899))+(((-1.0)*r11*x14896*x14898))+((r11*x14894))+((r10*x14889*x14893))+(((-1.0)*x14895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14902 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14902.valid){
continue;
}
CheckValue<IkReal> x14903=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14902.value)+(((1.5707963267949)*(x14903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14904=IKsin(j4);
IkReal x14905=IKcos(j4);
IkReal x14906=(sj1*sj2);
IkReal x14907=((1.0)*cj1);
IkReal x14908=(cj3*gconst52);
IkReal x14909=(gconst53*sj3);
IkReal x14910=(cj3*gconst53);
IkReal x14911=(cj2*sj1);
IkReal x14912=(gconst52*sj3);
IkReal x14913=(cj2*x14907);
IkReal x14914=((1.0)*x14905);
IkReal x14915=((1.0)*x14904);
IkReal x14916=(gconst52*x14904);
IkReal x14917=(cj3*x14904);
evalcond[0]=(((r21*x14916))+(((-1.0)*r22*x14914))+(((-1.0)*gconst53*r20*x14915)));
evalcond[1]=((((-1.0)*r12*x14914))+((r11*x14916))+(((-1.0)*gconst53*r10*x14915)));
evalcond[2]=((-1.0)+((r01*x14916))+(((-1.0)*r02*x14914))+(((-1.0)*gconst53*r00*x14915)));
evalcond[3]=(((r00*x14912))+((r01*x14909))+((r02*x14917))+(((-1.0)*r00*x14910*x14914))+((r01*x14905*x14908)));
evalcond[4]=(((r00*x14908))+((r01*x14910))+(((-1.0)*r01*x14912*x14914))+(((-1.0)*r02*sj3*x14915))+((r00*x14905*x14909)));
evalcond[5]=(((r22*x14917))+((r21*x14909))+x14911+((cj1*sj2))+(((-1.0)*r20*x14910*x14914))+((r20*x14912))+((r21*x14905*x14908)));
evalcond[6]=(((r10*x14912))+(((-1.0)*r10*x14910*x14914))+(((-1.0)*x14913))+((r11*x14909))+x14906+((r12*x14917))+((r11*x14905*x14908)));
evalcond[7]=(((r21*x14910))+(((-1.0)*x14913))+x14906+((r20*x14905*x14909))+(((-1.0)*r22*sj3*x14915))+((r20*x14908))+(((-1.0)*r21*x14912*x14914)));
evalcond[8]=((((-1.0)*r12*sj3*x14915))+((r11*x14910))+(((-1.0)*x14911))+(((-1.0)*r11*x14912*x14914))+((r10*x14905*x14909))+((r10*x14908))+(((-1.0)*sj2*x14907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14918=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14918);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14919=(r01*sj5);
IkReal x14920=((1.0)*cj5*r00);
j4eval[0]=(x14919+(((-1.0)*x14920)));
j4eval[1]=(((cj3*x14919))+(((-1.0)*cj3*x14920)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14921=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14921);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14921);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14922=(cj5*r00);
IkReal x14923=(r01*sj5);
j4eval[0]=((((-1.0)*x14922))+x14923);
j4eval[1]=(((sj3*x14922))+(((-1.0)*sj3*x14923)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14924=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14924);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14924);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14925=((1.0)*r00);
CheckValue<IkReal> x14926=IKPowWithIntegerCheck(cj3,-1);
if(!x14926.valid){
continue;
}
CheckValue<IkReal> x14927=IKPowWithIntegerCheck(r22,-1);
if(!x14927.valid){
continue;
}
CheckValue<IkReal> x14928=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14925))),-1);
if(!x14928.valid){
continue;
}
if( IKabs(((x14926.value)*(x14927.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14928.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14925)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14926.value)*(x14927.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14928.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14925))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14926.value)*(x14927.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14928.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14925))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14929=IKsin(j4);
IkReal x14930=IKcos(j4);
IkReal x14931=(sj1*sj2);
IkReal x14932=(cj5*sj3);
IkReal x14933=(r11*sj5);
IkReal x14934=(cj3*cj5);
IkReal x14935=((1.0)*cj1);
IkReal x14936=(cj3*sj5);
IkReal x14937=(sj3*sj5);
IkReal x14938=(cj2*sj1);
IkReal x14939=(r01*sj5);
IkReal x14940=((1.0)*sj3);
IkReal x14941=(cj2*x14935);
IkReal x14942=(r10*x14930);
IkReal x14943=(r22*x14929);
IkReal x14944=(cj3*x14930);
IkReal x14945=((1.0)*cj5*x14929);
evalcond[0]=((-1.0)*r22*x14930);
evalcond[1]=(x14938+((cj1*sj2))+((cj3*x14943)));
evalcond[2]=(((x14929*x14933))+(((-1.0)*r10*x14945)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14945))+((x14929*x14939)));
evalcond[4]=((((-1.0)*x14940*x14943))+x14931+(((-1.0)*x14941)));
evalcond[5]=(((r01*x14932))+((r00*x14937))+((r01*x14930*x14936))+(((-1.0)*r00*x14930*x14934)));
evalcond[6]=((((-1.0)*r01*x14930*x14937))+((r01*x14934))+((r00*x14936))+((r00*x14930*x14932)));
evalcond[7]=((((-1.0)*x14934*x14942))+x14931+((r10*x14937))+(((-1.0)*x14941))+((x14933*x14944))+((r11*x14932)));
evalcond[8]=((((-1.0)*x14938))+(((-1.0)*x14930*x14933*x14940))+((r10*x14936))+((x14932*x14942))+(((-1.0)*sj2*x14935))+((r11*x14934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14946=((1.0)*cj3);
IkReal x14947=(cj5*r00);
IkReal x14948=(r01*sj5);
CheckValue<IkReal> x14949=IKPowWithIntegerCheck((x14948+(((-1.0)*x14947))),-1);
if(!x14949.valid){
continue;
}
CheckValue<IkReal> x14950=IKPowWithIntegerCheck((((sj3*x14947))+(((-1.0)*sj3*x14948))),-1);
if(!x14950.valid){
continue;
}
if( IKabs(x14949.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14950.value)*(((((-1.0)*cj5*r01*x14946))+(((-1.0)*r00*sj5*x14946)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14949.value)+IKsqr(((x14950.value)*(((((-1.0)*cj5*r01*x14946))+(((-1.0)*r00*sj5*x14946))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14949.value, ((x14950.value)*(((((-1.0)*cj5*r01*x14946))+(((-1.0)*r00*sj5*x14946))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14951=IKsin(j4);
IkReal x14952=IKcos(j4);
IkReal x14953=(sj1*sj2);
IkReal x14954=(cj5*sj3);
IkReal x14955=(r11*sj5);
IkReal x14956=(cj3*cj5);
IkReal x14957=((1.0)*cj1);
IkReal x14958=(cj3*sj5);
IkReal x14959=(sj3*sj5);
IkReal x14960=(cj2*sj1);
IkReal x14961=(r01*sj5);
IkReal x14962=((1.0)*sj3);
IkReal x14963=(cj2*x14957);
IkReal x14964=(r10*x14952);
IkReal x14965=(r22*x14951);
IkReal x14966=(cj3*x14952);
IkReal x14967=((1.0)*cj5*x14951);
evalcond[0]=((-1.0)*r22*x14952);
evalcond[1]=(((cj3*x14965))+x14960+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14967))+((x14951*x14955)));
evalcond[3]=((-1.0)+((x14951*x14961))+(((-1.0)*r00*x14967)));
evalcond[4]=((((-1.0)*x14962*x14965))+x14953+(((-1.0)*x14963)));
evalcond[5]=((((-1.0)*r00*x14952*x14956))+((r01*x14954))+((r00*x14959))+((r01*x14952*x14958)));
evalcond[6]=((((-1.0)*r01*x14952*x14959))+((r00*x14952*x14954))+((r01*x14956))+((r00*x14958)));
evalcond[7]=((((-1.0)*x14956*x14964))+x14953+((x14955*x14966))+((r10*x14959))+(((-1.0)*x14963))+((r11*x14954)));
evalcond[8]=((((-1.0)*x14960))+(((-1.0)*sj2*x14957))+(((-1.0)*x14952*x14955*x14962))+((r10*x14958))+((x14954*x14964))+((r11*x14956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14968=((1.0)*sj3);
IkReal x14969=(r01*sj5);
IkReal x14970=((1.0)*cj5*r00);
CheckValue<IkReal> x14971=IKPowWithIntegerCheck((x14969+(((-1.0)*x14970))),-1);
if(!x14971.valid){
continue;
}
CheckValue<IkReal> x14972=IKPowWithIntegerCheck((((cj3*x14969))+(((-1.0)*cj3*x14970))),-1);
if(!x14972.valid){
continue;
}
if( IKabs(x14971.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14972.value)*(((((-1.0)*cj5*r01*x14968))+(((-1.0)*r00*sj5*x14968)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14971.value)+IKsqr(((x14972.value)*(((((-1.0)*cj5*r01*x14968))+(((-1.0)*r00*sj5*x14968))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14971.value, ((x14972.value)*(((((-1.0)*cj5*r01*x14968))+(((-1.0)*r00*sj5*x14968))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14973=IKsin(j4);
IkReal x14974=IKcos(j4);
IkReal x14975=(sj1*sj2);
IkReal x14976=(cj5*sj3);
IkReal x14977=(r11*sj5);
IkReal x14978=(cj3*cj5);
IkReal x14979=((1.0)*cj1);
IkReal x14980=(cj3*sj5);
IkReal x14981=(sj3*sj5);
IkReal x14982=(cj2*sj1);
IkReal x14983=(r01*sj5);
IkReal x14984=((1.0)*sj3);
IkReal x14985=(cj2*x14979);
IkReal x14986=(r10*x14974);
IkReal x14987=(r22*x14973);
IkReal x14988=(cj3*x14974);
IkReal x14989=((1.0)*cj5*x14973);
evalcond[0]=((-1.0)*r22*x14974);
evalcond[1]=(x14982+((cj1*sj2))+((cj3*x14987)));
evalcond[2]=((((-1.0)*r10*x14989))+((x14973*x14977)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14989))+((x14973*x14983)));
evalcond[4]=((((-1.0)*x14984*x14987))+x14975+(((-1.0)*x14985)));
evalcond[5]=((((-1.0)*r00*x14974*x14978))+((r01*x14974*x14980))+((r00*x14981))+((r01*x14976)));
evalcond[6]=(((r00*x14974*x14976))+((r00*x14980))+(((-1.0)*r01*x14974*x14981))+((r01*x14978)));
evalcond[7]=(x14975+((x14977*x14988))+((r10*x14981))+((r11*x14976))+(((-1.0)*x14978*x14986))+(((-1.0)*x14985)));
evalcond[8]=((((-1.0)*sj2*x14979))+((x14976*x14986))+((r10*x14980))+((r11*x14978))+(((-1.0)*x14974*x14977*x14984))+(((-1.0)*x14982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14990=cj5*cj5;
IkReal x14991=(cj3*r20);
IkReal x14992=(r21*sj3);
IkReal x14993=((1.0)*cj3);
IkReal x14994=(r01*r21);
IkReal x14995=(r01*sj3);
IkReal x14996=(r00*sj5);
IkReal x14997=(cj5*r01*sj5);
IkReal x14998=((1.0)*x14990);
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14991*x14998))+(((-1.0)*r02*r22*x14993))+((cj3*x14990*x14994))+(((-1.0)*x14993*x14994))+((cj3*cj5*r21*x14996))+((x14991*x14997)))),-1);
if(!x14999.valid){
continue;
}
CheckValue<IkReal> x15000 = IKatan2WithCheck(IkReal((((cj5*r22*x14995))+((r22*sj3*x14996)))),IkReal(((((-1.0)*r20*x14995*x14998))+(((-1.0)*r00*x14992*x14998))+((r00*x14992))+(((-1.0)*cj5*r20*sj3*x14996))+((x14992*x14997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14999.value)))+(x15000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15001=IKsin(j4);
IkReal x15002=IKcos(j4);
IkReal x15003=(sj1*sj2);
IkReal x15004=(r11*sj5);
IkReal x15005=(cj5*r10);
IkReal x15006=(cj5*r01);
IkReal x15007=(cj5*r00);
IkReal x15008=((1.0)*cj1);
IkReal x15009=(cj3*sj5);
IkReal x15010=(r21*sj5);
IkReal x15011=(cj5*sj3);
IkReal x15012=(sj3*sj5);
IkReal x15013=(cj2*sj1);
IkReal x15014=(r01*sj5);
IkReal x15015=(cj3*cj5);
IkReal x15016=(cj5*r20);
IkReal x15017=(cj2*x15008);
IkReal x15018=((1.0)*x15002);
IkReal x15019=((1.0)*x15001);
IkReal x15020=(cj3*x15002);
IkReal x15021=(sj3*x15002);
IkReal x15022=(cj3*x15001);
evalcond[0]=((((-1.0)*r22*x15018))+((x15001*x15010))+(((-1.0)*x15016*x15019)));
evalcond[1]=((((-1.0)*r12*x15018))+((x15001*x15004))+(((-1.0)*x15005*x15019)));
evalcond[2]=((-1.0)+(((-1.0)*x15007*x15019))+((x15001*x15014))+(((-1.0)*r02*x15018)));
evalcond[3]=(((sj3*x15006))+((r02*x15022))+((r00*x15012))+((r01*x15002*x15009))+(((-1.0)*cj3*x15007*x15018)));
evalcond[4]=(((r00*x15009))+(((-1.0)*r01*x15012*x15018))+((cj3*x15006))+(((-1.0)*r02*sj3*x15019))+((x15007*x15021)));
evalcond[5]=((((-1.0)*r20*x15015*x15018))+((cj1*sj2))+x15013+((r21*x15011))+((r21*x15002*x15009))+((r22*x15022))+((r20*x15012)));
evalcond[6]=((((-1.0)*x15017))+((r10*x15012))+x15003+((x15004*x15020))+((r11*x15011))+(((-1.0)*cj3*x15005*x15018))+((r12*x15022)));
evalcond[7]=(((r20*x15002*x15011))+(((-1.0)*x15017))+((r20*x15009))+x15003+((r21*x15015))+(((-1.0)*sj3*x15010*x15018))+(((-1.0)*r22*sj3*x15019)));
evalcond[8]=((((-1.0)*x15013))+(((-1.0)*sj3*x15004*x15018))+(((-1.0)*sj2*x15008))+(((-1.0)*r12*sj3*x15019))+((r10*x15009))+((x15005*x15021))+((r11*x15015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15023=((1.0)*cj5);
CheckValue<IkReal> x15024 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15024.valid){
continue;
}
CheckValue<IkReal> x15025=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15023)))),-1);
if(!x15025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15024.value)+(((1.5707963267949)*(x15025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15026=IKsin(j4);
IkReal x15027=IKcos(j4);
IkReal x15028=(sj1*sj2);
IkReal x15029=(r11*sj5);
IkReal x15030=(cj5*r10);
IkReal x15031=(cj5*r01);
IkReal x15032=(cj5*r00);
IkReal x15033=((1.0)*cj1);
IkReal x15034=(cj3*sj5);
IkReal x15035=(r21*sj5);
IkReal x15036=(cj5*sj3);
IkReal x15037=(sj3*sj5);
IkReal x15038=(cj2*sj1);
IkReal x15039=(r01*sj5);
IkReal x15040=(cj3*cj5);
IkReal x15041=(cj5*r20);
IkReal x15042=(cj2*x15033);
IkReal x15043=((1.0)*x15027);
IkReal x15044=((1.0)*x15026);
IkReal x15045=(cj3*x15027);
IkReal x15046=(sj3*x15027);
IkReal x15047=(cj3*x15026);
evalcond[0]=((((-1.0)*x15041*x15044))+((x15026*x15035))+(((-1.0)*r22*x15043)));
evalcond[1]=((((-1.0)*x15030*x15044))+((x15026*x15029))+(((-1.0)*r12*x15043)));
evalcond[2]=((-1.0)+(((-1.0)*x15032*x15044))+((x15026*x15039))+(((-1.0)*r02*x15043)));
evalcond[3]=(((r02*x15047))+((r00*x15037))+((sj3*x15031))+(((-1.0)*cj3*x15032*x15043))+((r01*x15027*x15034)));
evalcond[4]=(((x15032*x15046))+((r00*x15034))+(((-1.0)*r01*x15037*x15043))+((cj3*x15031))+(((-1.0)*r02*sj3*x15044)));
evalcond[5]=(((r21*x15036))+((r22*x15047))+((cj1*sj2))+((r21*x15027*x15034))+x15038+((r20*x15037))+(((-1.0)*r20*x15040*x15043)));
evalcond[6]=((((-1.0)*x15042))+((x15029*x15045))+(((-1.0)*cj3*x15030*x15043))+((r12*x15047))+x15028+((r10*x15037))+((r11*x15036)));
evalcond[7]=((((-1.0)*x15042))+((r20*x15027*x15036))+(((-1.0)*r22*sj3*x15044))+x15028+((r20*x15034))+(((-1.0)*sj3*x15035*x15043))+((r21*x15040)));
evalcond[8]=((((-1.0)*sj2*x15033))+((r11*x15040))+(((-1.0)*r12*sj3*x15044))+(((-1.0)*x15038))+((r10*x15034))+(((-1.0)*sj3*x15029*x15043))+((x15030*x15046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15048=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15048.valid){
continue;
}
CheckValue<IkReal> x15049 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15048.value)))+(x15049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15050=IKsin(j4);
IkReal x15051=IKcos(j4);
IkReal x15052=(sj1*sj2);
IkReal x15053=(r11*sj5);
IkReal x15054=(cj5*r10);
IkReal x15055=(cj5*r01);
IkReal x15056=(cj5*r00);
IkReal x15057=((1.0)*cj1);
IkReal x15058=(cj3*sj5);
IkReal x15059=(r21*sj5);
IkReal x15060=(cj5*sj3);
IkReal x15061=(sj3*sj5);
IkReal x15062=(cj2*sj1);
IkReal x15063=(r01*sj5);
IkReal x15064=(cj3*cj5);
IkReal x15065=(cj5*r20);
IkReal x15066=(cj2*x15057);
IkReal x15067=((1.0)*x15051);
IkReal x15068=((1.0)*x15050);
IkReal x15069=(cj3*x15051);
IkReal x15070=(sj3*x15051);
IkReal x15071=(cj3*x15050);
evalcond[0]=(((x15050*x15059))+(((-1.0)*x15065*x15068))+(((-1.0)*r22*x15067)));
evalcond[1]=(((x15050*x15053))+(((-1.0)*r12*x15067))+(((-1.0)*x15054*x15068)));
evalcond[2]=((-1.0)+((x15050*x15063))+(((-1.0)*r02*x15067))+(((-1.0)*x15056*x15068)));
evalcond[3]=(((r02*x15071))+((r00*x15061))+((r01*x15051*x15058))+(((-1.0)*cj3*x15056*x15067))+((sj3*x15055)));
evalcond[4]=(((x15056*x15070))+(((-1.0)*r02*sj3*x15068))+((cj3*x15055))+(((-1.0)*r01*x15061*x15067))+((r00*x15058)));
evalcond[5]=(((r21*x15060))+((r20*x15061))+((r22*x15071))+((cj1*sj2))+x15062+((r21*x15051*x15058))+(((-1.0)*r20*x15064*x15067)));
evalcond[6]=(((r12*x15071))+((x15053*x15069))+x15052+((r11*x15060))+((r10*x15061))+(((-1.0)*x15066))+(((-1.0)*cj3*x15054*x15067)));
evalcond[7]=(((r20*x15058))+((r21*x15064))+x15052+(((-1.0)*sj3*x15059*x15067))+((r20*x15051*x15060))+(((-1.0)*x15066))+(((-1.0)*r22*sj3*x15068)));
evalcond[8]=((((-1.0)*sj3*x15053*x15067))+((x15054*x15070))+((r10*x15058))+(((-1.0)*r12*sj3*x15068))+(((-1.0)*x15062))+((r11*x15064))+(((-1.0)*sj2*x15057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15072=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15072;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15073=((1.0)*cj5);
IkReal x15074=((((-1.0)*r21*x15073))+(((-1.0)*r20*sj5)));
j4eval[0]=x15074;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x15073)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15075=cj5*cj5;
IkReal x15076=(cj3*r01);
IkReal x15077=(cj5*sj5);
IkReal x15078=((1.0)*cj3);
IkReal x15079=(((r20*x15076*x15077))+((r21*x15075*x15076))+(((-1.0)*r02*r22*x15078))+((cj3*r00*r21*x15077))+(((-1.0)*r21*x15076))+(((-1.0)*r00*r20*x15075*x15078)));
j4eval[0]=x15079;
j4eval[1]=IKsign(x15079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15080=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15080;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15081=((1.0)*cj5);
IkReal x15082=((((-1.0)*r21*x15081))+(((-1.0)*r20*sj5)));
j4eval[0]=x15082;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15081))))));
j4eval[2]=IKsign(x15082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15083=cj5*cj5;
IkReal x15084=r01*r01;
IkReal x15085=(cj5*r00);
IkReal x15086=(r01*sj5);
IkReal x15087=((((-2.0)*x15085*x15086))+(((-1.0)*x15083*x15084))+x15084+((x15083*(r00*r00)))+(r02*r02));
j4eval[0]=x15087;
j4eval[1]=((IKabs(r02))+(IKabs((x15085+(((-1.0)*x15086))))));
j4eval[2]=IKsign(x15087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15088=cj5*cj5;
IkReal x15089=r01*r01;
IkReal x15090=(r01*sj5);
IkReal x15091=(cj5*r00);
CheckValue<IkReal> x15092 = IKatan2WithCheck(IkReal((x15091+(((-1.0)*x15090)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15092.valid){
continue;
}
CheckValue<IkReal> x15093=IKPowWithIntegerCheck(IKsign((((x15088*(r00*r00)))+x15089+(((-1.0)*x15088*x15089))+(((-2.0)*x15090*x15091))+(r02*r02))),-1);
if(!x15093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15092.value)+(((1.5707963267949)*(x15093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15094=IKsin(j4);
IkReal x15095=IKcos(j4);
IkReal x15096=(cj5*r10);
IkReal x15097=(r01*sj5);
IkReal x15098=(cj5*r00);
IkReal x15099=(cj5*r20);
IkReal x15100=((1.0)*x15095);
IkReal x15101=((1.0)*x15094);
IkReal x15102=(sj5*x15094);
evalcond[0]=((((-1.0)*x15099*x15101))+((r21*x15102))+(((-1.0)*r22*x15100)));
evalcond[1]=((((-1.0)*r12*x15100))+(((-1.0)*x15096*x15101))+((r11*x15102)));
evalcond[2]=((((-1.0)*x15097*x15100))+((x15095*x15098))+(((-1.0)*r02*x15101)));
evalcond[3]=((1.0)+(((-1.0)*x15098*x15101))+(((-1.0)*r02*x15100))+((x15094*x15097)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x15101))+(((-1.0)*r11*sj5*x15100))+((cj1*sj2))+((x15095*x15096)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*r22*x15101))+((sj1*sj2))+(((-1.0)*r21*sj5*x15100))+((x15095*x15099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15103=((1.0)*cj5);
CheckValue<IkReal> x15104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15103))+(((-1.0)*r20*sj5)))),-1);
if(!x15104.valid){
continue;
}
CheckValue<IkReal> x15105 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15103))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15104.value)))+(x15105.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15106=IKsin(j4);
IkReal x15107=IKcos(j4);
IkReal x15108=(cj5*r10);
IkReal x15109=(r01*sj5);
IkReal x15110=(cj5*r00);
IkReal x15111=(cj5*r20);
IkReal x15112=((1.0)*x15107);
IkReal x15113=((1.0)*x15106);
IkReal x15114=(sj5*x15106);
evalcond[0]=((((-1.0)*x15111*x15113))+(((-1.0)*r22*x15112))+((r21*x15114)));
evalcond[1]=(((r11*x15114))+(((-1.0)*x15108*x15113))+(((-1.0)*r12*x15112)));
evalcond[2]=((((-1.0)*r02*x15113))+(((-1.0)*x15109*x15112))+((x15107*x15110)));
evalcond[3]=((1.0)+((x15106*x15109))+(((-1.0)*r02*x15112))+(((-1.0)*x15110*x15113)));
evalcond[4]=(((x15107*x15108))+((cj2*sj1))+(((-1.0)*r11*sj5*x15112))+((cj1*sj2))+(((-1.0)*r12*x15113)));
evalcond[5]=((((-1.0)*r21*sj5*x15112))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15107*x15111))+(((-1.0)*r22*x15113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15115 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15115.valid){
continue;
}
CheckValue<IkReal> x15116=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15115.value)+(((1.5707963267949)*(x15116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15117=IKsin(j4);
IkReal x15118=IKcos(j4);
IkReal x15119=(cj5*r10);
IkReal x15120=(r01*sj5);
IkReal x15121=(cj5*r00);
IkReal x15122=(cj5*r20);
IkReal x15123=((1.0)*x15118);
IkReal x15124=((1.0)*x15117);
IkReal x15125=(sj5*x15117);
evalcond[0]=(((r21*x15125))+(((-1.0)*r22*x15123))+(((-1.0)*x15122*x15124)));
evalcond[1]=((((-1.0)*x15119*x15124))+(((-1.0)*r12*x15123))+((r11*x15125)));
evalcond[2]=((((-1.0)*r02*x15124))+((x15118*x15121))+(((-1.0)*x15120*x15123)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15123))+(((-1.0)*x15121*x15124))+((x15117*x15120)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15124))+(((-1.0)*r11*sj5*x15123))+((x15118*x15119)));
evalcond[5]=((((-1.0)*r21*sj5*x15123))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15124))+((x15118*x15122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15126=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15126;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15127=((1.0)*cj5);
IkReal x15128=((((-1.0)*r21*x15127))+(((-1.0)*r20*sj5)));
j4eval[0]=x15128;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15127))+((r11*sj5))))));
j4eval[2]=IKsign(x15128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15129=cj5*cj5;
IkReal x15130=r01*r01;
IkReal x15131=(r01*sj5);
IkReal x15132=(cj5*r00);
IkReal x15133=((((-1.0)*x15129*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x15131*x15132))+((x15129*x15130))+(((-1.0)*x15130)));
j4eval[0]=x15133;
j4eval[1]=IKsign(x15133);
j4eval[2]=((IKabs((x15131+(((-1.0)*x15132)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15134=cj5*cj5;
IkReal x15135=r01*r01;
IkReal x15136=(r01*sj5);
IkReal x15137=(cj5*r00);
CheckValue<IkReal> x15138=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x15136*x15137))+((x15134*x15135))+(((-1.0)*x15135))+(((-1.0)*x15134*(r00*r00))))),-1);
if(!x15138.valid){
continue;
}
CheckValue<IkReal> x15139 = IKatan2WithCheck(IkReal((x15136+(((-1.0)*x15137)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15138.value)))+(x15139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15140=IKcos(j4);
IkReal x15141=IKsin(j4);
IkReal x15142=(cj5*r00);
IkReal x15143=(cj5*r10);
IkReal x15144=(r21*sj5);
IkReal x15145=(cj5*r20);
IkReal x15146=((1.0)*x15140);
IkReal x15147=((1.0)*x15141);
IkReal x15148=(sj5*x15141);
IkReal x15149=(sj5*x15140);
evalcond[0]=(((r02*x15141))+(((-1.0)*x15142*x15146))+((r01*x15149)));
evalcond[1]=((((-1.0)*x15145*x15147))+(((-1.0)*r22*x15146))+((x15141*x15144)));
evalcond[2]=(((r11*x15148))+(((-1.0)*x15143*x15147))+(((-1.0)*r12*x15146)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15146))+(((-1.0)*x15142*x15147))+((r01*x15148)));
evalcond[4]=(((cj2*sj1))+((r12*x15141))+((cj1*sj2))+((r11*x15149))+(((-1.0)*x15143*x15146)));
evalcond[5]=(((r22*x15141))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15145*x15146))+((x15140*x15144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15150=((1.0)*cj5);
CheckValue<IkReal> x15151 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15150))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15151.valid){
continue;
}
CheckValue<IkReal> x15152=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15150))+(((-1.0)*r20*sj5)))),-1);
if(!x15152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15151.value)+(((1.5707963267949)*(x15152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15153=IKcos(j4);
IkReal x15154=IKsin(j4);
IkReal x15155=(cj5*r00);
IkReal x15156=(cj5*r10);
IkReal x15157=(r21*sj5);
IkReal x15158=(cj5*r20);
IkReal x15159=((1.0)*x15153);
IkReal x15160=((1.0)*x15154);
IkReal x15161=(sj5*x15154);
IkReal x15162=(sj5*x15153);
evalcond[0]=((((-1.0)*x15155*x15159))+((r02*x15154))+((r01*x15162)));
evalcond[1]=(((x15154*x15157))+(((-1.0)*r22*x15159))+(((-1.0)*x15158*x15160)));
evalcond[2]=(((r11*x15161))+(((-1.0)*r12*x15159))+(((-1.0)*x15156*x15160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15159))+(((-1.0)*x15155*x15160))+((r01*x15161)));
evalcond[4]=(((cj2*sj1))+((r11*x15162))+(((-1.0)*x15156*x15159))+((cj1*sj2))+((r12*x15154)));
evalcond[5]=(((x15153*x15157))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15154))+(((-1.0)*x15158*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15163 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15163.valid){
continue;
}
CheckValue<IkReal> x15164=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15163.value)+(((1.5707963267949)*(x15164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15165=IKcos(j4);
IkReal x15166=IKsin(j4);
IkReal x15167=(cj5*r00);
IkReal x15168=(cj5*r10);
IkReal x15169=(r21*sj5);
IkReal x15170=(cj5*r20);
IkReal x15171=((1.0)*x15165);
IkReal x15172=((1.0)*x15166);
IkReal x15173=(sj5*x15166);
IkReal x15174=(sj5*x15165);
evalcond[0]=(((r02*x15166))+((r01*x15174))+(((-1.0)*x15167*x15171)));
evalcond[1]=((((-1.0)*x15170*x15172))+((x15166*x15169))+(((-1.0)*r22*x15171)));
evalcond[2]=(((r11*x15173))+(((-1.0)*r12*x15171))+(((-1.0)*x15168*x15172)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15171))+((r01*x15173))+(((-1.0)*x15167*x15172)));
evalcond[4]=(((cj2*sj1))+((r11*x15174))+((cj1*sj2))+((r12*x15166))+(((-1.0)*x15168*x15171)));
evalcond[5]=((((-1.0)*x15170*x15171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15165*x15169))+((r22*x15166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15176 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15176)==0){
continue;
}
IkReal x15175=pow(x15176,-0.5);
CheckValue<IkReal> x15177 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15177.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15177.value));
IkReal gconst61=((-1.0)*r11*x15175);
IkReal gconst62=(r10*x15175);
CheckValue<IkReal> x15178 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15178.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15178.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15181 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15181.valid){
continue;
}
IkReal x15179=((-1.0)*(x15181.value));
IkReal x15180=x15175;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15179;
IkReal gconst60=x15179;
IkReal gconst61=((-1.0)*r11*x15180);
IkReal gconst62=(r10*x15180);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15184 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15184.valid){
continue;
}
IkReal x15182=((-1.0)*(x15184.value));
IkReal x15183=x15175;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15182;
IkReal gconst60=x15182;
IkReal gconst61=((-1.0)*r11*x15183);
IkReal gconst62=(r10*x15183);
CheckValue<IkReal> x15192=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15192.valid){
continue;
}
IkReal x15185=x15192.value;
IkReal x15186=(sj3*x15185);
IkReal x15187=(r20*x15186);
IkReal x15188=(r00*x15186);
IkReal x15189=(r01*x15186);
IkReal x15190=(r21*x15186);
IkReal x15191=(r10*r11*x15186);
j4eval[0]=IKsign((((r01*r10*r11*x15187))+((r10*r11*r21*x15188))+((r00*x15187*(r10*r10)))+((r02*r22*sj3))+((r21*x15189*(r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15193=gconst61*gconst61;
IkReal x15194=gconst62*gconst62;
IkReal x15195=(cj3*r01);
IkReal x15196=(r22*sj3);
IkReal x15197=(gconst61*r00);
IkReal x15198=((1.0)*cj3);
IkReal x15199=(gconst62*r01);
IkReal x15200=((1.0)*sj3);
IkReal x15201=(gconst61*gconst62*r20);
IkReal x15202=(r21*x15193);
IkReal x15203=(r20*x15194);
CheckValue<IkReal> x15204 = IKatan2WithCheck(IkReal((((x15196*x15199))+((x15196*x15197)))),IkReal(((((-1.0)*r01*x15200*x15203))+(((-1.0)*gconst62*r20*x15197*x15200))+((gconst61*r21*sj3*x15199))+((r00*sj3*x15202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15204.valid){
continue;
}
CheckValue<IkReal> x15205=IKPowWithIntegerCheck(IKsign((((x15195*x15201))+(((-1.0)*r00*x15198*x15203))+(((-1.0)*r02*r22*x15198))+(((-1.0)*x15195*x15202))+((cj3*gconst62*r21*x15197)))),-1);
if(!x15205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15204.value)+(((1.5707963267949)*(x15205.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15206=IKsin(j4);
IkReal x15207=IKcos(j4);
IkReal x15208=(cj2*sj1);
IkReal x15209=(cj1*sj2);
IkReal x15210=(gconst61*sj3);
IkReal x15211=(cj3*gconst61);
IkReal x15212=(cj3*gconst62);
IkReal x15213=(sj1*sj2);
IkReal x15214=(gconst62*sj3);
IkReal x15215=(cj1*cj2);
IkReal x15216=((1.0)*x15207);
IkReal x15217=((1.0)*x15206);
IkReal x15218=(gconst61*x15206);
IkReal x15219=(cj3*x15206);
IkReal x15220=(x15209+x15208);
evalcond[0]=((((-1.0)*r22*x15216))+((r21*x15218))+(((-1.0)*gconst62*r20*x15217)));
evalcond[1]=(((r11*x15218))+(((-1.0)*r12*x15216))+(((-1.0)*gconst62*r10*x15217)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15216))+((r01*x15218))+(((-1.0)*gconst62*r00*x15217)));
evalcond[3]=(((r01*x15207*x15211))+((r00*x15210))+((r01*x15214))+(((-1.0)*r00*x15212*x15216))+((r02*x15219)));
evalcond[4]=(((r00*x15207*x15214))+(((-1.0)*r02*sj3*x15217))+(((-1.0)*r01*x15210*x15216))+((r00*x15211))+((r01*x15212)));
evalcond[5]=(((r20*x15210))+x15220+((r22*x15219))+(((-1.0)*r20*x15212*x15216))+((r21*x15207*x15211))+((r21*x15214)));
evalcond[6]=(((r10*x15210))+((r11*x15214))+(((-1.0)*x15213))+x15215+(((-1.0)*r10*x15212*x15216))+((r12*x15219))+((r11*x15207*x15211)));
evalcond[7]=(((r10*x15211))+((r11*x15212))+x15220+(((-1.0)*r11*x15210*x15216))+(((-1.0)*r12*sj3*x15217))+((r10*x15207*x15214)));
evalcond[8]=(((r20*x15211))+((r20*x15207*x15214))+(((-1.0)*x15215))+x15213+((r21*x15212))+(((-1.0)*r22*sj3*x15217))+(((-1.0)*r21*x15210*x15216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15221=gconst61*gconst61;
IkReal x15222=gconst62*gconst62;
IkReal x15223=(cj3*r22);
IkReal x15224=(gconst62*r01);
IkReal x15225=(gconst61*r00);
IkReal x15226=((1.0)*r20);
IkReal x15227=(cj3*r21);
IkReal x15228=(r21*sj3);
CheckValue<IkReal> x15229 = IKatan2WithCheck(IkReal((((x15223*x15224))+((x15223*x15225)))),IkReal(((((-1.0)*cj3*gconst62*x15225*x15226))+((r00*x15221*x15227))+((gconst61*x15224*x15227))+(((-1.0)*cj3*r01*x15222*x15226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15229.valid){
continue;
}
CheckValue<IkReal> x15230=IKPowWithIntegerCheck(IKsign((((r01*x15221*x15228))+((r00*r20*sj3*x15222))+(((-1.0)*gconst61*sj3*x15224*x15226))+((r02*r22*sj3))+(((-1.0)*gconst62*x15225*x15228)))),-1);
if(!x15230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15229.value)+(((1.5707963267949)*(x15230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15231=IKsin(j4);
IkReal x15232=IKcos(j4);
IkReal x15233=(cj2*sj1);
IkReal x15234=(cj1*sj2);
IkReal x15235=(gconst61*sj3);
IkReal x15236=(cj3*gconst61);
IkReal x15237=(cj3*gconst62);
IkReal x15238=(sj1*sj2);
IkReal x15239=(gconst62*sj3);
IkReal x15240=(cj1*cj2);
IkReal x15241=((1.0)*x15232);
IkReal x15242=((1.0)*x15231);
IkReal x15243=(gconst61*x15231);
IkReal x15244=(cj3*x15231);
IkReal x15245=(x15234+x15233);
evalcond[0]=((((-1.0)*gconst62*r20*x15242))+((r21*x15243))+(((-1.0)*r22*x15241)));
evalcond[1]=((((-1.0)*gconst62*r10*x15242))+(((-1.0)*r12*x15241))+((r11*x15243)));
evalcond[2]=((1.0)+((r01*x15243))+(((-1.0)*r02*x15241))+(((-1.0)*gconst62*r00*x15242)));
evalcond[3]=(((r00*x15235))+((r01*x15239))+((r01*x15232*x15236))+(((-1.0)*r00*x15237*x15241))+((r02*x15244)));
evalcond[4]=(((r00*x15236))+((r01*x15237))+(((-1.0)*r01*x15235*x15241))+(((-1.0)*r02*sj3*x15242))+((r00*x15232*x15239)));
evalcond[5]=(x15245+((r21*x15239))+((r21*x15232*x15236))+(((-1.0)*r20*x15237*x15241))+((r22*x15244))+((r20*x15235)));
evalcond[6]=((((-1.0)*x15238))+x15240+((r10*x15235))+((r12*x15244))+(((-1.0)*r10*x15237*x15241))+((r11*x15239))+((r11*x15232*x15236)));
evalcond[7]=((((-1.0)*r12*sj3*x15242))+x15245+((r10*x15232*x15239))+((r10*x15236))+(((-1.0)*r11*x15235*x15241))+((r11*x15237)));
evalcond[8]=((((-1.0)*x15240))+x15238+((r21*x15237))+(((-1.0)*r22*sj3*x15242))+((r20*x15232*x15239))+(((-1.0)*r21*x15235*x15241))+((r20*x15236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15246=((1.0)*gconst62);
CheckValue<IkReal> x15247 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15246))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15247.valid){
continue;
}
CheckValue<IkReal> x15248=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15246)))),-1);
if(!x15248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15247.value)+(((1.5707963267949)*(x15248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15249=IKsin(j4);
IkReal x15250=IKcos(j4);
IkReal x15251=(cj2*sj1);
IkReal x15252=(cj1*sj2);
IkReal x15253=(gconst61*sj3);
IkReal x15254=(cj3*gconst61);
IkReal x15255=(cj3*gconst62);
IkReal x15256=(sj1*sj2);
IkReal x15257=(gconst62*sj3);
IkReal x15258=(cj1*cj2);
IkReal x15259=((1.0)*x15250);
IkReal x15260=((1.0)*x15249);
IkReal x15261=(gconst61*x15249);
IkReal x15262=(cj3*x15249);
IkReal x15263=(x15251+x15252);
evalcond[0]=((((-1.0)*gconst62*r20*x15260))+(((-1.0)*r22*x15259))+((r21*x15261)));
evalcond[1]=((((-1.0)*r12*x15259))+(((-1.0)*gconst62*r10*x15260))+((r11*x15261)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15259))+((r01*x15261))+(((-1.0)*gconst62*r00*x15260)));
evalcond[3]=(((r00*x15253))+(((-1.0)*r00*x15255*x15259))+((r01*x15257))+((r01*x15250*x15254))+((r02*x15262)));
evalcond[4]=((((-1.0)*r01*x15253*x15259))+((r00*x15254))+((r01*x15255))+((r00*x15250*x15257))+(((-1.0)*r02*sj3*x15260)));
evalcond[5]=((((-1.0)*r20*x15255*x15259))+x15263+((r22*x15262))+((r21*x15257))+((r20*x15253))+((r21*x15250*x15254)));
evalcond[6]=(((r12*x15262))+(((-1.0)*x15256))+x15258+((r11*x15257))+(((-1.0)*r10*x15255*x15259))+((r10*x15253))+((r11*x15250*x15254)));
evalcond[7]=(((r10*x15250*x15257))+(((-1.0)*r12*sj3*x15260))+x15263+((r11*x15255))+((r10*x15254))+(((-1.0)*r11*x15253*x15259)));
evalcond[8]=((((-1.0)*x15258))+x15256+((r21*x15255))+((r20*x15254))+(((-1.0)*r22*sj3*x15260))+((r20*x15250*x15257))+(((-1.0)*r21*x15253*x15259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15265 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15265)==0){
continue;
}
IkReal x15264=pow(x15265,-0.5);
CheckValue<IkReal> x15266 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15266.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15266.value))));
IkReal gconst64=((1.0)*r11*x15264);
IkReal gconst65=((-1.0)*r10*x15264);
CheckValue<IkReal> x15267 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15267.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15267.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15270 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15270.valid){
continue;
}
IkReal x15268=((1.0)*(x15270.value));
IkReal x15269=x15264;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15268)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15268)));
IkReal gconst64=((1.0)*r11*x15269);
IkReal gconst65=((-1.0)*r10*x15269);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15271=gconst64*gconst64;
IkReal x15272=gconst65*gconst65;
IkReal x15273=(gconst65*r01);
IkReal x15274=(cj3*r22);
IkReal x15275=(gconst64*r00);
IkReal x15276=(cj3*r21);
IkReal x15277=((1.0)*gconst64*sj3);
IkReal x15278=((1.0)*cj3*r20);
CheckValue<IkReal> x15279 = IKatan2WithCheck(IkReal((((x15274*x15275))+((x15273*x15274)))),IkReal((((gconst64*x15273*x15276))+(((-1.0)*r01*x15272*x15278))+(((-1.0)*gconst65*x15275*x15278))+((r00*x15271*x15276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15279.valid){
continue;
}
CheckValue<IkReal> x15280=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst65*r21*sj3*x15275))+((r01*r21*sj3*x15271))+((r00*r20*sj3*x15272))+(((-1.0)*r20*x15273*x15277))+((r02*r22*sj3)))),-1);
if(!x15280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15279.value)+(((1.5707963267949)*(x15280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15281=IKsin(j4);
IkReal x15282=IKcos(j4);
IkReal x15283=(cj2*sj1);
IkReal x15284=(cj1*sj2);
IkReal x15285=(cj3*gconst64);
IkReal x15286=(gconst65*r21);
IkReal x15287=(sj1*sj2);
IkReal x15288=(gconst65*sj3);
IkReal x15289=(gconst64*sj3);
IkReal x15290=(cj3*gconst65);
IkReal x15291=(cj1*cj2);
IkReal x15292=((1.0)*x15282);
IkReal x15293=((1.0)*x15281);
IkReal x15294=(cj3*x15281);
IkReal x15295=(gconst64*x15281);
IkReal x15296=(x15284+x15283);
evalcond[0]=((((-1.0)*r22*x15292))+((r21*x15295))+(((-1.0)*gconst65*r20*x15293)));
evalcond[1]=(((r11*x15295))+(((-1.0)*r12*x15292))+(((-1.0)*gconst65*r10*x15293)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15293))+((r01*x15295))+(((-1.0)*r02*x15292)));
evalcond[3]=(((r01*x15288))+((r00*x15289))+(((-1.0)*r00*x15290*x15292))+((r02*x15294))+((r01*x15282*x15285)));
evalcond[4]=(((r00*x15285))+(((-1.0)*r02*sj3*x15293))+((r01*x15290))+(((-1.0)*r01*x15289*x15292))+((r00*x15282*x15288)));
evalcond[5]=(((r21*x15282*x15285))+x15296+((r22*x15294))+((r20*x15289))+(((-1.0)*r20*x15290*x15292))+((sj3*x15286)));
evalcond[6]=(((r11*x15282*x15285))+(((-1.0)*r10*x15290*x15292))+x15291+((r12*x15294))+((r10*x15289))+((r11*x15288))+(((-1.0)*x15287)));
evalcond[7]=(((r11*x15290))+x15296+(((-1.0)*r11*x15289*x15292))+((r10*x15285))+((r10*x15282*x15288))+(((-1.0)*r12*sj3*x15293)));
evalcond[8]=((((-1.0)*r21*x15289*x15292))+(((-1.0)*x15291))+x15287+((cj3*x15286))+(((-1.0)*r22*sj3*x15293))+((r20*x15285))+((r20*x15282*x15288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15297=((1.0)*gconst65);
CheckValue<IkReal> x15298 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15298.valid){
continue;
}
CheckValue<IkReal> x15299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15297))+(((-1.0)*gconst64*r20)))),-1);
if(!x15299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15298.value)+(((1.5707963267949)*(x15299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15300=IKsin(j4);
IkReal x15301=IKcos(j4);
IkReal x15302=(cj2*sj1);
IkReal x15303=(cj1*sj2);
IkReal x15304=(cj3*gconst64);
IkReal x15305=(gconst65*r21);
IkReal x15306=(sj1*sj2);
IkReal x15307=(gconst65*sj3);
IkReal x15308=(gconst64*sj3);
IkReal x15309=(cj3*gconst65);
IkReal x15310=(cj1*cj2);
IkReal x15311=((1.0)*x15301);
IkReal x15312=((1.0)*x15300);
IkReal x15313=(cj3*x15300);
IkReal x15314=(gconst64*x15300);
IkReal x15315=(x15302+x15303);
evalcond[0]=((((-1.0)*gconst65*r20*x15312))+((r21*x15314))+(((-1.0)*r22*x15311)));
evalcond[1]=(((r11*x15314))+(((-1.0)*gconst65*r10*x15312))+(((-1.0)*r12*x15311)));
evalcond[2]=((1.0)+((r01*x15314))+(((-1.0)*gconst65*r00*x15312))+(((-1.0)*r02*x15311)));
evalcond[3]=(((r00*x15308))+((r01*x15307))+((r02*x15313))+(((-1.0)*r00*x15309*x15311))+((r01*x15301*x15304)));
evalcond[4]=((((-1.0)*r01*x15308*x15311))+((r00*x15304))+((r00*x15301*x15307))+((r01*x15309))+(((-1.0)*r02*sj3*x15312)));
evalcond[5]=(((r20*x15308))+((sj3*x15305))+x15315+((r22*x15313))+((r21*x15301*x15304))+(((-1.0)*r20*x15309*x15311)));
evalcond[6]=(((r12*x15313))+(((-1.0)*x15306))+(((-1.0)*r10*x15309*x15311))+x15310+((r11*x15301*x15304))+((r10*x15308))+((r11*x15307)));
evalcond[7]=(((r10*x15301*x15307))+x15315+(((-1.0)*r12*sj3*x15312))+((r10*x15304))+(((-1.0)*r11*x15308*x15311))+((r11*x15309)));
evalcond[8]=((((-1.0)*x15310))+((r20*x15304))+x15306+(((-1.0)*r22*sj3*x15312))+((cj3*x15305))+(((-1.0)*r21*x15308*x15311))+((r20*x15301*x15307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15316=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15316);
rxp0_2=(py*r00);
rxp1_0=(r21*x15316);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15317=(r01*sj5);
IkReal x15318=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15318))+x15317);
j4eval[1]=((((-1.0)*cj3*x15318))+((cj3*x15317)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15319=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15319);
rxp0_2=(py*r00);
rxp1_0=(r21*x15319);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15320=(cj5*r00);
IkReal x15321=(r01*sj5);
j4eval[0]=((((-1.0)*x15320))+x15321);
j4eval[1]=((((-1.0)*sj3*x15321))+((sj3*x15320)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15322=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15322);
rxp0_2=(py*r00);
rxp1_0=(r21*x15322);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15323=((1.0)*r00);
CheckValue<IkReal> x15324=IKPowWithIntegerCheck(cj3,-1);
if(!x15324.valid){
continue;
}
CheckValue<IkReal> x15325=IKPowWithIntegerCheck(r12,-1);
if(!x15325.valid){
continue;
}
CheckValue<IkReal> x15326=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15323))),-1);
if(!x15326.valid){
continue;
}
if( IKabs(((x15324.value)*(x15325.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15326.value)*(((((-1.0)*sj3*sj5*x15323))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15324.value)*(x15325.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15326.value)*(((((-1.0)*sj3*sj5*x15323))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15324.value)*(x15325.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15326.value)*(((((-1.0)*sj3*sj5*x15323))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15327=IKsin(j4);
IkReal x15328=IKcos(j4);
IkReal x15329=(cj2*sj1);
IkReal x15330=(cj1*sj2);
IkReal x15331=(sj1*sj2);
IkReal x15332=(cj5*sj3);
IkReal x15333=(cj3*cj5);
IkReal x15334=(r21*sj5);
IkReal x15335=(cj1*cj2);
IkReal x15336=(r00*sj5);
IkReal x15337=(r01*sj5);
IkReal x15338=(r20*sj5);
IkReal x15339=((1.0)*x15327);
IkReal x15340=(r20*x15328);
IkReal x15341=(r00*x15328);
IkReal x15342=(cj3*x15328);
IkReal x15343=(x15330+x15329);
IkReal x15344=((1.0)*sj3*x15328);
evalcond[0]=((-1.0)*r12*x15328);
evalcond[1]=(((x15327*x15334))+(((-1.0)*cj5*r20*x15339)));
evalcond[2]=((((-1.0)*x15331))+x15335+((cj3*r12*x15327)));
evalcond[3]=((((-1.0)*r12*sj3*x15339))+x15343);
evalcond[4]=((1.0)+((x15327*x15337))+(((-1.0)*cj5*r00*x15339)));
evalcond[5]=(((r01*x15332))+((sj3*x15336))+(((-1.0)*x15333*x15341))+((x15337*x15342)));
evalcond[6]=(((cj3*x15336))+((r01*x15333))+(((-1.0)*x15337*x15344))+((x15332*x15341)));
evalcond[7]=(((sj3*x15338))+((x15334*x15342))+x15343+(((-1.0)*x15333*x15340))+((r21*x15332)));
evalcond[8]=((((-1.0)*x15335))+((cj3*x15338))+x15331+((x15332*x15340))+((r21*x15333))+(((-1.0)*x15334*x15344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15345=((1.0)*r01);
IkReal x15346=(cj5*r00);
CheckValue<IkReal> x15347=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15346))),-1);
if(!x15347.valid){
continue;
}
CheckValue<IkReal> x15348=IKPowWithIntegerCheck((((sj3*x15346))+(((-1.0)*sj3*sj5*x15345))),-1);
if(!x15348.valid){
continue;
}
if( IKabs(((-1.0)*(x15347.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15348.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15345)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15347.value)))+IKsqr(((x15348.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15345))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15347.value)), ((x15348.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15345))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15349=IKsin(j4);
IkReal x15350=IKcos(j4);
IkReal x15351=(cj2*sj1);
IkReal x15352=(cj1*sj2);
IkReal x15353=(sj1*sj2);
IkReal x15354=(cj5*sj3);
IkReal x15355=(cj3*cj5);
IkReal x15356=(r21*sj5);
IkReal x15357=(cj1*cj2);
IkReal x15358=(r00*sj5);
IkReal x15359=(r01*sj5);
IkReal x15360=(r20*sj5);
IkReal x15361=((1.0)*x15349);
IkReal x15362=(r20*x15350);
IkReal x15363=(r00*x15350);
IkReal x15364=(cj3*x15350);
IkReal x15365=(x15351+x15352);
IkReal x15366=((1.0)*sj3*x15350);
evalcond[0]=((-1.0)*r12*x15350);
evalcond[1]=(((x15349*x15356))+(((-1.0)*cj5*r20*x15361)));
evalcond[2]=(x15357+(((-1.0)*x15353))+((cj3*r12*x15349)));
evalcond[3]=((((-1.0)*r12*sj3*x15361))+x15365);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15361))+((x15349*x15359)));
evalcond[5]=(((x15359*x15364))+((sj3*x15358))+(((-1.0)*x15355*x15363))+((r01*x15354)));
evalcond[6]=(((cj3*x15358))+((x15354*x15363))+((r01*x15355))+(((-1.0)*x15359*x15366)));
evalcond[7]=(x15365+((x15356*x15364))+((sj3*x15360))+(((-1.0)*x15355*x15362))+((r21*x15354)));
evalcond[8]=(((cj3*x15360))+x15353+((x15354*x15362))+(((-1.0)*x15356*x15366))+(((-1.0)*x15357))+((r21*x15355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15367=((1.0)*r00);
IkReal x15368=(r01*sj5);
CheckValue<IkReal> x15369=IKPowWithIntegerCheck(((((-1.0)*cj5*x15367))+x15368),-1);
if(!x15369.valid){
continue;
}
CheckValue<IkReal> x15370=IKPowWithIntegerCheck((((cj3*x15368))+(((-1.0)*cj3*cj5*x15367))),-1);
if(!x15370.valid){
continue;
}
if( IKabs(((-1.0)*(x15369.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15370.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15369.value)))+IKsqr(((x15370.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15367))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15369.value)), ((x15370.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15367))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15371=IKsin(j4);
IkReal x15372=IKcos(j4);
IkReal x15373=(cj2*sj1);
IkReal x15374=(cj1*sj2);
IkReal x15375=(sj1*sj2);
IkReal x15376=(cj5*sj3);
IkReal x15377=(cj3*cj5);
IkReal x15378=(r21*sj5);
IkReal x15379=(cj1*cj2);
IkReal x15380=(r00*sj5);
IkReal x15381=(r01*sj5);
IkReal x15382=(r20*sj5);
IkReal x15383=((1.0)*x15371);
IkReal x15384=(r20*x15372);
IkReal x15385=(r00*x15372);
IkReal x15386=(cj3*x15372);
IkReal x15387=(x15373+x15374);
IkReal x15388=((1.0)*sj3*x15372);
evalcond[0]=((-1.0)*r12*x15372);
evalcond[1]=((((-1.0)*cj5*r20*x15383))+((x15371*x15378)));
evalcond[2]=((((-1.0)*x15375))+((cj3*r12*x15371))+x15379);
evalcond[3]=((((-1.0)*r12*sj3*x15383))+x15387);
evalcond[4]=((1.0)+((x15371*x15381))+(((-1.0)*cj5*r00*x15383)));
evalcond[5]=(((r01*x15376))+((x15381*x15386))+(((-1.0)*x15377*x15385))+((sj3*x15380)));
evalcond[6]=(((x15376*x15385))+((r01*x15377))+((cj3*x15380))+(((-1.0)*x15381*x15388)));
evalcond[7]=(((x15378*x15386))+((r21*x15376))+x15387+(((-1.0)*x15377*x15384))+((sj3*x15382)));
evalcond[8]=((((-1.0)*x15379))+((x15376*x15384))+((r21*x15377))+((cj3*x15382))+x15375+(((-1.0)*x15378*x15388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15389=cj5*cj5;
IkReal x15390=(cj3*r20);
IkReal x15391=(r21*sj3);
IkReal x15392=((1.0)*cj3);
IkReal x15393=(r01*r21);
IkReal x15394=(r01*sj3);
IkReal x15395=(r00*sj5);
IkReal x15396=(cj5*r01*sj5);
IkReal x15397=((1.0)*x15389);
CheckValue<IkReal> x15398 = IKatan2WithCheck(IkReal((((r22*sj3*x15395))+((cj5*r22*x15394)))),IkReal(((((-1.0)*r00*x15391*x15397))+(((-1.0)*cj5*r20*sj3*x15395))+((x15391*x15396))+(((-1.0)*r20*x15394*x15397))+((r00*x15391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15398.valid){
continue;
}
CheckValue<IkReal> x15399=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15392*x15393))+((cj3*cj5*r21*x15395))+(((-1.0)*r00*x15390*x15397))+((x15390*x15396))+(((-1.0)*r02*r22*x15392))+((cj3*x15389*x15393)))),-1);
if(!x15399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15398.value)+(((1.5707963267949)*(x15399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15400=IKsin(j4);
IkReal x15401=IKcos(j4);
IkReal x15402=(cj2*sj1);
IkReal x15403=(cj1*sj2);
IkReal x15404=(r11*sj5);
IkReal x15405=(cj5*r10);
IkReal x15406=(sj1*sj2);
IkReal x15407=(cj5*r01);
IkReal x15408=(cj5*r00);
IkReal x15409=(cj3*sj5);
IkReal x15410=(r21*sj5);
IkReal x15411=(cj1*cj2);
IkReal x15412=(cj5*sj3);
IkReal x15413=(sj3*sj5);
IkReal x15414=(r01*sj5);
IkReal x15415=(cj3*cj5);
IkReal x15416=(cj5*r20);
IkReal x15417=((1.0)*x15401);
IkReal x15418=((1.0)*x15400);
IkReal x15419=(cj3*x15401);
IkReal x15420=(sj3*x15401);
IkReal x15421=(cj3*x15400);
IkReal x15422=(x15403+x15402);
evalcond[0]=(((x15400*x15410))+(((-1.0)*x15416*x15418))+(((-1.0)*r22*x15417)));
evalcond[1]=(((x15400*x15404))+(((-1.0)*x15405*x15418))+(((-1.0)*r12*x15417)));
evalcond[2]=((1.0)+((x15400*x15414))+(((-1.0)*x15408*x15418))+(((-1.0)*r02*x15417)));
evalcond[3]=((((-1.0)*cj3*x15408*x15417))+((r02*x15421))+((sj3*x15407))+((r00*x15413))+((r01*x15401*x15409)));
evalcond[4]=(((x15408*x15420))+((r00*x15409))+(((-1.0)*r02*sj3*x15418))+(((-1.0)*r01*x15413*x15417))+((cj3*x15407)));
evalcond[5]=((((-1.0)*r20*x15415*x15417))+((r20*x15413))+((r22*x15421))+x15422+((r21*x15412))+((r21*x15401*x15409)));
evalcond[6]=(((r11*x15412))+(((-1.0)*x15406))+((r12*x15421))+((x15404*x15419))+x15411+((r10*x15413))+(((-1.0)*cj3*x15405*x15417)));
evalcond[7]=(((r11*x15415))+((x15405*x15420))+x15422+(((-1.0)*sj3*x15404*x15417))+((r10*x15409))+(((-1.0)*r12*sj3*x15418)));
evalcond[8]=((((-1.0)*x15411))+((r20*x15401*x15412))+((r20*x15409))+(((-1.0)*sj3*x15410*x15417))+x15406+(((-1.0)*r22*sj3*x15418))+((r21*x15415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15423=((1.0)*cj5);
CheckValue<IkReal> x15424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15423))+(((-1.0)*r20*sj5)))),-1);
if(!x15424.valid){
continue;
}
CheckValue<IkReal> x15425 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15424.value)))+(x15425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15426=IKsin(j4);
IkReal x15427=IKcos(j4);
IkReal x15428=(cj2*sj1);
IkReal x15429=(cj1*sj2);
IkReal x15430=(r11*sj5);
IkReal x15431=(cj5*r10);
IkReal x15432=(sj1*sj2);
IkReal x15433=(cj5*r01);
IkReal x15434=(cj5*r00);
IkReal x15435=(cj3*sj5);
IkReal x15436=(r21*sj5);
IkReal x15437=(cj1*cj2);
IkReal x15438=(cj5*sj3);
IkReal x15439=(sj3*sj5);
IkReal x15440=(r01*sj5);
IkReal x15441=(cj3*cj5);
IkReal x15442=(cj5*r20);
IkReal x15443=((1.0)*x15427);
IkReal x15444=((1.0)*x15426);
IkReal x15445=(cj3*x15427);
IkReal x15446=(sj3*x15427);
IkReal x15447=(cj3*x15426);
IkReal x15448=(x15429+x15428);
evalcond[0]=((((-1.0)*x15442*x15444))+(((-1.0)*r22*x15443))+((x15426*x15436)));
evalcond[1]=((((-1.0)*x15431*x15444))+(((-1.0)*r12*x15443))+((x15426*x15430)));
evalcond[2]=((1.0)+((x15426*x15440))+(((-1.0)*r02*x15443))+(((-1.0)*x15434*x15444)));
evalcond[3]=(((sj3*x15433))+((r01*x15427*x15435))+((r02*x15447))+(((-1.0)*cj3*x15434*x15443))+((r00*x15439)));
evalcond[4]=(((x15434*x15446))+(((-1.0)*r02*sj3*x15444))+((cj3*x15433))+(((-1.0)*r01*x15439*x15443))+((r00*x15435)));
evalcond[5]=(((r21*x15438))+((r21*x15427*x15435))+((r22*x15447))+x15448+(((-1.0)*r20*x15441*x15443))+((r20*x15439)));
evalcond[6]=(((r10*x15439))+(((-1.0)*cj3*x15431*x15443))+((x15430*x15445))+((r12*x15447))+(((-1.0)*x15432))+((r11*x15438))+x15437);
evalcond[7]=((((-1.0)*sj3*x15430*x15443))+((x15431*x15446))+((r10*x15435))+((r11*x15441))+x15448+(((-1.0)*r12*sj3*x15444)));
evalcond[8]=((((-1.0)*r22*sj3*x15444))+(((-1.0)*x15437))+x15432+((r20*x15427*x15438))+(((-1.0)*sj3*x15436*x15443))+((r20*x15435))+((r21*x15441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15449 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15449.valid){
continue;
}
CheckValue<IkReal> x15450=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15449.value)+(((1.5707963267949)*(x15450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15451=IKsin(j4);
IkReal x15452=IKcos(j4);
IkReal x15453=(cj2*sj1);
IkReal x15454=(cj1*sj2);
IkReal x15455=(r11*sj5);
IkReal x15456=(cj5*r10);
IkReal x15457=(sj1*sj2);
IkReal x15458=(cj5*r01);
IkReal x15459=(cj5*r00);
IkReal x15460=(cj3*sj5);
IkReal x15461=(r21*sj5);
IkReal x15462=(cj1*cj2);
IkReal x15463=(cj5*sj3);
IkReal x15464=(sj3*sj5);
IkReal x15465=(r01*sj5);
IkReal x15466=(cj3*cj5);
IkReal x15467=(cj5*r20);
IkReal x15468=((1.0)*x15452);
IkReal x15469=((1.0)*x15451);
IkReal x15470=(cj3*x15452);
IkReal x15471=(sj3*x15452);
IkReal x15472=(cj3*x15451);
IkReal x15473=(x15453+x15454);
evalcond[0]=((((-1.0)*r22*x15468))+(((-1.0)*x15467*x15469))+((x15451*x15461)));
evalcond[1]=((((-1.0)*x15456*x15469))+((x15451*x15455))+(((-1.0)*r12*x15468)));
evalcond[2]=((1.0)+(((-1.0)*x15459*x15469))+((x15451*x15465))+(((-1.0)*r02*x15468)));
evalcond[3]=(((r01*x15452*x15460))+((r02*x15472))+((sj3*x15458))+(((-1.0)*cj3*x15459*x15468))+((r00*x15464)));
evalcond[4]=(((cj3*x15458))+((x15459*x15471))+(((-1.0)*r01*x15464*x15468))+((r00*x15460))+(((-1.0)*r02*sj3*x15469)));
evalcond[5]=((((-1.0)*r20*x15466*x15468))+((r21*x15452*x15460))+((r22*x15472))+((r21*x15463))+x15473+((r20*x15464)));
evalcond[6]=((((-1.0)*cj3*x15456*x15468))+((x15455*x15470))+((r12*x15472))+x15462+((r11*x15463))+((r10*x15464))+(((-1.0)*x15457)));
evalcond[7]=((((-1.0)*sj3*x15455*x15468))+x15473+((x15456*x15471))+((r11*x15466))+((r10*x15460))+(((-1.0)*r12*sj3*x15469)));
evalcond[8]=((((-1.0)*x15462))+((r21*x15466))+x15457+(((-1.0)*sj3*x15461*x15468))+((r20*x15460))+((r20*x15452*x15463))+(((-1.0)*r22*sj3*x15469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15474=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15474);
rxp1_1=(px*r21);
rxp1_2=(r11*x15474);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15475=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15475);
rxp1_1=(px*r21);
rxp1_2=(r11*x15475);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15476=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15476)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15476)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15477=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15477);
rxp1_1=(px*r21);
rxp1_2=(r11*x15477);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15478=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15478);
rxp1_1=(px*r21);
rxp1_2=(r11*x15478);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15479=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15479);
rxp1_1=(px*r21);
rxp1_2=(r11*x15479);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15480=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15480);
rxp1_1=(px*r21);
rxp1_2=(r11*x15480);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15483=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15483.valid){
continue;
}
IkReal x15481=x15483.value;
IkReal x15482=(sj0*x15481);
cj4array[0]=(((cj2*sj1*x15482))+((cj1*sj2*x15482)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15484=IKsin(j4);
IkReal x15485=IKcos(j4);
IkReal x15486=(cj5*r20);
IkReal x15487=(r21*sj5);
IkReal x15488=((1.0)*x15484);
IkReal x15489=((1.0)*x15485);
evalcond[0]=((-1.0)*r02*x15484);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15489)));
evalcond[2]=((((-1.0)*x15486*x15488))+((x15484*x15487)));
evalcond[3]=((((-1.0)*cj5*r10*x15488))+((r11*sj5*x15484)));
evalcond[4]=(((x15485*x15486))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15487*x15489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15491=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15491.valid){
continue;
}
IkReal x15490=x15491.value;
cj4array[0]=(((cj1*cj2*x15490))+(((-1.0)*sj1*sj2*x15490)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15492=IKsin(j4);
IkReal x15493=IKcos(j4);
IkReal x15494=(r11*sj5);
IkReal x15495=((1.0)*sj0);
IkReal x15496=((1.0)*x15493);
IkReal x15497=((1.0)*cj5*x15492);
evalcond[0]=((-1.0)*r02*x15492);
evalcond[1]=((((-1.0)*r02*x15496))+(((-1.0)*x15495)));
evalcond[2]=((((-1.0)*r20*x15497))+((r21*sj5*x15492)));
evalcond[3]=((((-1.0)*r10*x15497))+((x15492*x15494)));
evalcond[4]=((((-1.0)*cj1*sj2*x15495))+(((-1.0)*x15494*x15496))+((cj5*r10*x15493))+(((-1.0)*cj2*sj1*x15495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15498=IKPowWithIntegerCheck(r02,-1);
if(!x15498.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15498.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15499=IKsin(j4);
IkReal x15500=IKcos(j4);
IkReal x15501=((1.0)*sj0);
IkReal x15502=(cj5*x15500);
IkReal x15503=(sj5*x15499);
IkReal x15504=((1.0)*sj5*x15500);
IkReal x15505=((1.0)*cj5*x15499);
evalcond[0]=((-1.0)*r02*x15499);
evalcond[1]=((((-1.0)*r20*x15505))+((r21*x15503)));
evalcond[2]=(((r11*x15503))+(((-1.0)*r10*x15505)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15504))+((r20*x15502)));
evalcond[4]=(((r10*x15502))+(((-1.0)*cj1*sj2*x15501))+(((-1.0)*r11*x15504))+(((-1.0)*cj2*sj1*x15501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15506=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15506);
rxp1_1=(px*r21);
rxp1_2=(r11*x15506);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15507=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15507);
rxp1_1=(px*r21);
rxp1_2=(r11*x15507);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15508=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15508);
rxp1_1=(px*r21);
rxp1_2=(r11*x15508);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15511=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15511.valid){
continue;
}
IkReal x15509=x15511.value;
IkReal x15510=(sj0*x15509);
cj4array[0]=(((cj1*sj2*x15510))+((cj2*sj1*x15510)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15512=IKsin(j4);
IkReal x15513=IKcos(j4);
IkReal x15514=(r21*sj5);
IkReal x15515=((1.0)*cj5*r20);
evalcond[0]=(r02*x15512);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15513)));
evalcond[2]=(((x15512*x15514))+(((-1.0)*x15512*x15515)));
evalcond[3]=(((r11*sj5*x15512))+(((-1.0)*cj5*r10*x15512)));
evalcond[4]=((((-1.0)*x15513*x15515))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15513*x15514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15517=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15517.valid){
continue;
}
IkReal x15516=x15517.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15516))+((cj1*cj2*x15516)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15518=IKsin(j4);
IkReal x15519=IKcos(j4);
IkReal x15520=((1.0)*sj0);
IkReal x15521=((1.0)*cj5);
IkReal x15522=(sj5*x15518);
evalcond[0]=(r02*x15518);
evalcond[1]=((((-1.0)*r02*x15519))+(((-1.0)*x15520)));
evalcond[2]=(((r21*x15522))+(((-1.0)*r20*x15518*x15521)));
evalcond[3]=((((-1.0)*r10*x15518*x15521))+((r11*x15522)));
evalcond[4]=((((-1.0)*cj2*sj1*x15520))+((r11*sj5*x15519))+(((-1.0)*r10*x15519*x15521))+(((-1.0)*cj1*sj2*x15520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15523=IKPowWithIntegerCheck(r02,-1);
if(!x15523.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15523.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15524=IKsin(j4);
IkReal x15525=IKcos(j4);
IkReal x15526=((1.0)*cj1);
IkReal x15527=(r21*sj5);
IkReal x15528=((1.0)*cj5);
IkReal x15529=(r11*sj5);
evalcond[0]=(r02*x15524);
evalcond[1]=(((x15524*x15527))+(((-1.0)*r20*x15524*x15528)));
evalcond[2]=((((-1.0)*r10*x15524*x15528))+((x15524*x15529)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x15525*x15528))+(((-1.0)*cj2*x15526))+((x15525*x15527)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15525*x15528))+(((-1.0)*sj0*sj2*x15526))+((x15525*x15529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15530 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15530.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15530.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15531 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15531.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15531.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15532=((-1.0)*r10);
CheckValue<IkReal> x15534 = IKatan2WithCheck(IkReal(x15532),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15534.valid){
continue;
}
IkReal x15533=((-1.0)*(x15534.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15532);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15533;
IkReal gconst66=x15533;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15535=((-1.0)*r10);
CheckValue<IkReal> x15537 = IKatan2WithCheck(IkReal(x15535),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15537.valid){
continue;
}
IkReal x15536=((-1.0)*(x15537.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15535);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15536;
IkReal gconst66=x15536;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15538=((-1.0)*r10);
CheckValue<IkReal> x15540 = IKatan2WithCheck(IkReal(x15538),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15540.valid){
continue;
}
IkReal x15539=((-1.0)*(x15540.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15538);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15539;
IkReal gconst66=x15539;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15541=((1.0)*gconst67);
IkReal x15542=(cj1*cj2);
IkReal x15543=((1.0)*sj1*sj2);
CheckValue<IkReal> x15544=IKPowWithIntegerCheck(cj3,-1);
if(!x15544.valid){
continue;
}
CheckValue<IkReal> x15545=IKPowWithIntegerCheck(r02,-1);
if(!x15545.valid){
continue;
}
CheckValue<IkReal> x15546=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15541))),-1);
if(!x15546.valid){
continue;
}
if( IKabs(((x15544.value)*(x15545.value)*(((((-1.0)*cj0*x15543))+((cj0*x15542)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15546.value)*(((((-1.0)*x15543))+(((-1.0)*cj3*r20*x15541))+x15542+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15544.value)*(x15545.value)*(((((-1.0)*cj0*x15543))+((cj0*x15542))))))+IKsqr(((x15546.value)*(((((-1.0)*x15543))+(((-1.0)*cj3*r20*x15541))+x15542+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15544.value)*(x15545.value)*(((((-1.0)*cj0*x15543))+((cj0*x15542))))), ((x15546.value)*(((((-1.0)*x15543))+(((-1.0)*cj3*r20*x15541))+x15542+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15547=IKsin(j4);
IkReal x15548=IKcos(j4);
IkReal x15549=(sj1*sj2);
IkReal x15550=(gconst68*sj3);
IkReal x15551=(gconst67*r11);
IkReal x15552=(gconst67*sj3);
IkReal x15553=((1.0)*gconst68);
IkReal x15554=(cj2*sj1);
IkReal x15555=((1.0)*cj0);
IkReal x15556=((1.0)*sj0);
IkReal x15557=(cj3*gconst67);
IkReal x15558=(cj3*gconst68);
IkReal x15559=(cj1*sj2);
IkReal x15560=(gconst67*r21);
IkReal x15561=((1.0)*cj1*cj2);
IkReal x15562=(cj3*x15548);
IkReal x15563=((1.0)*x15548);
IkReal x15564=(r02*x15547);
evalcond[0]=((((-1.0)*r02*x15563))+(((-1.0)*x15556)));
evalcond[1]=(((x15547*x15560))+(((-1.0)*r20*x15547*x15553)));
evalcond[2]=(((x15547*x15551))+cj0+(((-1.0)*r10*x15547*x15553)));
evalcond[3]=((((-1.0)*cj1*cj2*x15555))+((cj0*x15549))+((cj3*x15564)));
evalcond[4]=((((-1.0)*x15554*x15555))+(((-1.0)*x15555*x15559))+(((-1.0)*sj3*x15564)));
evalcond[5]=(((r21*x15550))+((r21*x15548*x15557))+((r20*x15552))+(((-1.0)*r20*x15553*x15562))+x15554+x15559);
evalcond[6]=(((r21*x15558))+((r20*x15548*x15550))+(((-1.0)*r21*x15552*x15563))+((r20*x15557))+x15549+(((-1.0)*x15561)));
evalcond[7]=(((r11*x15550))+((x15551*x15562))+((sj0*x15549))+(((-1.0)*r10*x15553*x15562))+(((-1.0)*cj1*cj2*x15556))+((r10*x15552)));
evalcond[8]=(((r11*x15558))+(((-1.0)*sj3*x15551*x15563))+((r10*x15548*x15550))+(((-1.0)*x15554*x15556))+((r10*x15557))+(((-1.0)*x15556*x15559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15567=IKPowWithIntegerCheck(r02,-1);
if(!x15567.valid){
continue;
}
IkReal x15565=x15567.value;
IkReal x15566=((1.0)*cj0);
CheckValue<IkReal> x15568=IKPowWithIntegerCheck(sj3,-1);
if(!x15568.valid){
continue;
}
if( IKabs((x15565*(x15568.value)*(((((-1.0)*cj1*sj2*x15566))+(((-1.0)*cj2*sj1*x15566)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15565)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15565*(x15568.value)*(((((-1.0)*cj1*sj2*x15566))+(((-1.0)*cj2*sj1*x15566))))))+IKsqr(((-1.0)*sj0*x15565))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15565*(x15568.value)*(((((-1.0)*cj1*sj2*x15566))+(((-1.0)*cj2*sj1*x15566))))), ((-1.0)*sj0*x15565));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15569=IKsin(j4);
IkReal x15570=IKcos(j4);
IkReal x15571=(sj1*sj2);
IkReal x15572=(gconst68*sj3);
IkReal x15573=(gconst67*r11);
IkReal x15574=(gconst67*sj3);
IkReal x15575=((1.0)*gconst68);
IkReal x15576=(cj2*sj1);
IkReal x15577=((1.0)*cj0);
IkReal x15578=((1.0)*sj0);
IkReal x15579=(cj3*gconst67);
IkReal x15580=(cj3*gconst68);
IkReal x15581=(cj1*sj2);
IkReal x15582=(gconst67*r21);
IkReal x15583=((1.0)*cj1*cj2);
IkReal x15584=(cj3*x15570);
IkReal x15585=((1.0)*x15570);
IkReal x15586=(r02*x15569);
evalcond[0]=((((-1.0)*r02*x15585))+(((-1.0)*x15578)));
evalcond[1]=((((-1.0)*r20*x15569*x15575))+((x15569*x15582)));
evalcond[2]=(cj0+(((-1.0)*r10*x15569*x15575))+((x15569*x15573)));
evalcond[3]=(((cj0*x15571))+(((-1.0)*cj1*cj2*x15577))+((cj3*x15586)));
evalcond[4]=((((-1.0)*sj3*x15586))+(((-1.0)*x15577*x15581))+(((-1.0)*x15576*x15577)));
evalcond[5]=(((r21*x15572))+((r20*x15574))+x15576+x15581+(((-1.0)*r20*x15575*x15584))+((r21*x15570*x15579)));
evalcond[6]=((((-1.0)*x15583))+(((-1.0)*r21*x15574*x15585))+((r20*x15579))+x15571+((r21*x15580))+((r20*x15570*x15572)));
evalcond[7]=(((sj0*x15571))+((r10*x15574))+(((-1.0)*cj1*cj2*x15578))+(((-1.0)*r10*x15575*x15584))+((r11*x15572))+((x15573*x15584)));
evalcond[8]=(((r11*x15580))+(((-1.0)*sj3*x15573*x15585))+((r10*x15579))+((r10*x15570*x15572))+(((-1.0)*x15578*x15581))+(((-1.0)*x15576*x15578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15588=IKPowWithIntegerCheck(r02,-1);
if(!x15588.valid){
continue;
}
IkReal x15587=x15588.value;
CheckValue<IkReal> x15589=IKPowWithIntegerCheck(cj3,-1);
if(!x15589.valid){
continue;
}
if( IKabs((x15587*(x15589.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15587)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15587*(x15589.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15587))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15587*(x15589.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15587));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15590=IKsin(j4);
IkReal x15591=IKcos(j4);
IkReal x15592=(sj1*sj2);
IkReal x15593=(gconst68*sj3);
IkReal x15594=(gconst67*r11);
IkReal x15595=(gconst67*sj3);
IkReal x15596=((1.0)*gconst68);
IkReal x15597=(cj2*sj1);
IkReal x15598=((1.0)*cj0);
IkReal x15599=((1.0)*sj0);
IkReal x15600=(cj3*gconst67);
IkReal x15601=(cj3*gconst68);
IkReal x15602=(cj1*sj2);
IkReal x15603=(gconst67*r21);
IkReal x15604=((1.0)*cj1*cj2);
IkReal x15605=(cj3*x15591);
IkReal x15606=((1.0)*x15591);
IkReal x15607=(r02*x15590);
evalcond[0]=((((-1.0)*r02*x15606))+(((-1.0)*x15599)));
evalcond[1]=((((-1.0)*r20*x15590*x15596))+((x15590*x15603)));
evalcond[2]=(((x15590*x15594))+cj0+(((-1.0)*r10*x15590*x15596)));
evalcond[3]=(((cj0*x15592))+(((-1.0)*cj1*cj2*x15598))+((cj3*x15607)));
evalcond[4]=((((-1.0)*x15597*x15598))+(((-1.0)*sj3*x15607))+(((-1.0)*x15598*x15602)));
evalcond[5]=(((r21*x15593))+((r20*x15595))+x15602+(((-1.0)*r20*x15596*x15605))+((r21*x15591*x15600))+x15597);
evalcond[6]=(((r20*x15591*x15593))+(((-1.0)*r21*x15595*x15606))+(((-1.0)*x15604))+((r20*x15600))+x15592+((r21*x15601)));
evalcond[7]=(((sj0*x15592))+(((-1.0)*r10*x15596*x15605))+(((-1.0)*cj1*cj2*x15599))+((r11*x15593))+((x15594*x15605))+((r10*x15595)));
evalcond[8]=((((-1.0)*x15597*x15599))+(((-1.0)*sj3*x15594*x15606))+((r10*x15600))+(((-1.0)*x15599*x15602))+((r10*x15591*x15593))+((r11*x15601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15608=((-1.0)*r10);
CheckValue<IkReal> x15609 = IKatan2WithCheck(IkReal(x15608),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15609.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15609.value))));
IkReal gconst70=x15608;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15610 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15610.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15610.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15611=((-1.0)*r10);
IkReal x15612=((-1.0)*r11);
CheckValue<IkReal> x15614 = IKatan2WithCheck(IkReal(x15611),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15614.valid){
continue;
}
IkReal x15613=((1.0)*(x15614.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15611);
rxp1_1=(px*r21);
rxp1_2=(px*x15612);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15613)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15613)));
IkReal gconst70=x15611;
IkReal gconst71=x15612;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15615=((-1.0)*r10);
IkReal x15616=((-1.0)*r11);
CheckValue<IkReal> x15618 = IKatan2WithCheck(IkReal(x15615),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15618.valid){
continue;
}
IkReal x15617=((1.0)*(x15618.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15615);
rxp1_1=(px*r21);
rxp1_2=(px*x15616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15617)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15617)));
IkReal gconst70=x15615;
IkReal gconst71=x15616;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15619=((-1.0)*r10);
IkReal x15620=((-1.0)*r11);
CheckValue<IkReal> x15622 = IKatan2WithCheck(IkReal(x15619),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15622.valid){
continue;
}
IkReal x15621=((1.0)*(x15622.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15619);
rxp1_1=(px*r21);
rxp1_2=(px*x15620);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15621)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15621)));
IkReal gconst70=x15619;
IkReal gconst71=x15620;
IkReal x15623=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15623))+((r10*r21*x15623)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15624=((1.0)*r21);
IkReal x15625=(cj1*cj2);
IkReal x15626=((1.0)*sj1*sj2);
CheckValue<IkReal> x15627=IKPowWithIntegerCheck(cj3,-1);
if(!x15627.valid){
continue;
}
CheckValue<IkReal> x15628=IKPowWithIntegerCheck(r02,-1);
if(!x15628.valid){
continue;
}
CheckValue<IkReal> x15629=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15624))+((gconst71*r20*sj3))),-1);
if(!x15629.valid){
continue;
}
if( IKabs(((x15627.value)*(x15628.value)*((((cj0*x15625))+(((-1.0)*cj0*x15626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15629.value)*(((((-1.0)*cj3*gconst71*x15624))+(((-1.0)*x15626))+x15625+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15627.value)*(x15628.value)*((((cj0*x15625))+(((-1.0)*cj0*x15626))))))+IKsqr(((x15629.value)*(((((-1.0)*cj3*gconst71*x15624))+(((-1.0)*x15626))+x15625+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15627.value)*(x15628.value)*((((cj0*x15625))+(((-1.0)*cj0*x15626))))), ((x15629.value)*(((((-1.0)*cj3*gconst71*x15624))+(((-1.0)*x15626))+x15625+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15630=IKsin(j4);
IkReal x15631=IKcos(j4);
IkReal x15632=(cj3*gconst70);
IkReal x15633=(sj1*sj2);
IkReal x15634=((1.0)*gconst71);
IkReal x15635=(gconst71*sj3);
IkReal x15636=(cj2*sj1);
IkReal x15637=((1.0)*sj0);
IkReal x15638=(gconst70*r11);
IkReal x15639=(gconst70*sj3);
IkReal x15640=((1.0)*cj0);
IkReal x15641=(cj3*gconst71);
IkReal x15642=(cj1*sj2);
IkReal x15643=((1.0)*cj1*cj2);
IkReal x15644=(r21*x15631);
IkReal x15645=(r10*x15631);
IkReal x15646=((1.0)*x15631);
IkReal x15647=(r02*x15630);
IkReal x15648=(r20*x15631);
evalcond[0]=((((-1.0)*r02*x15646))+(((-1.0)*x15637)));
evalcond[1]=((((-1.0)*r20*x15630*x15634))+((gconst70*r21*x15630)));
evalcond[2]=(cj0+(((-1.0)*r10*x15630*x15634))+((x15630*x15638)));
evalcond[3]=(((cj3*x15647))+((cj0*x15633))+(((-1.0)*cj1*cj2*x15640)));
evalcond[4]=((((-1.0)*sj3*x15647))+(((-1.0)*x15636*x15640))+(((-1.0)*x15640*x15642)));
evalcond[5]=(((r20*x15639))+(((-1.0)*cj3*x15634*x15648))+x15636+x15642+((r21*x15635))+((x15632*x15644)));
evalcond[6]=(((r20*x15632))+x15633+((r21*x15641))+(((-1.0)*x15643))+(((-1.0)*x15639*x15644))+((x15635*x15648)));
evalcond[7]=((((-1.0)*cj1*cj2*x15637))+(((-1.0)*cj3*x15634*x15645))+((r11*x15631*x15632))+((r11*x15635))+((sj0*x15633))+((r10*x15639)));
evalcond[8]=((((-1.0)*x15637*x15642))+(((-1.0)*sj3*x15638*x15646))+(((-1.0)*x15636*x15637))+((r11*x15641))+((r10*x15632))+((x15635*x15645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15651=IKPowWithIntegerCheck(r02,-1);
if(!x15651.valid){
continue;
}
IkReal x15649=x15651.value;
IkReal x15650=((1.0)*cj0);
CheckValue<IkReal> x15652=IKPowWithIntegerCheck(sj3,-1);
if(!x15652.valid){
continue;
}
if( IKabs((x15649*(x15652.value)*(((((-1.0)*cj2*sj1*x15650))+(((-1.0)*cj1*sj2*x15650)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15649)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15649*(x15652.value)*(((((-1.0)*cj2*sj1*x15650))+(((-1.0)*cj1*sj2*x15650))))))+IKsqr(((-1.0)*sj0*x15649))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15649*(x15652.value)*(((((-1.0)*cj2*sj1*x15650))+(((-1.0)*cj1*sj2*x15650))))), ((-1.0)*sj0*x15649));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15653=IKsin(j4);
IkReal x15654=IKcos(j4);
IkReal x15655=(cj3*gconst70);
IkReal x15656=(sj1*sj2);
IkReal x15657=((1.0)*gconst71);
IkReal x15658=(gconst71*sj3);
IkReal x15659=(cj2*sj1);
IkReal x15660=((1.0)*sj0);
IkReal x15661=(gconst70*r11);
IkReal x15662=(gconst70*sj3);
IkReal x15663=((1.0)*cj0);
IkReal x15664=(cj3*gconst71);
IkReal x15665=(cj1*sj2);
IkReal x15666=((1.0)*cj1*cj2);
IkReal x15667=(r21*x15654);
IkReal x15668=(r10*x15654);
IkReal x15669=((1.0)*x15654);
IkReal x15670=(r02*x15653);
IkReal x15671=(r20*x15654);
evalcond[0]=((((-1.0)*x15660))+(((-1.0)*r02*x15669)));
evalcond[1]=(((gconst70*r21*x15653))+(((-1.0)*r20*x15653*x15657)));
evalcond[2]=((((-1.0)*r10*x15653*x15657))+cj0+((x15653*x15661)));
evalcond[3]=(((cj3*x15670))+(((-1.0)*cj1*cj2*x15663))+((cj0*x15656)));
evalcond[4]=((((-1.0)*sj3*x15670))+(((-1.0)*x15659*x15663))+(((-1.0)*x15663*x15665)));
evalcond[5]=((((-1.0)*cj3*x15657*x15671))+((x15655*x15667))+((r20*x15662))+x15659+x15665+((r21*x15658)));
evalcond[6]=((((-1.0)*x15666))+((x15658*x15671))+x15656+((r21*x15664))+(((-1.0)*x15662*x15667))+((r20*x15655)));
evalcond[7]=(((r11*x15654*x15655))+(((-1.0)*cj3*x15657*x15668))+((r10*x15662))+((r11*x15658))+(((-1.0)*cj1*cj2*x15660))+((sj0*x15656)));
evalcond[8]=(((r10*x15655))+((x15658*x15668))+((r11*x15664))+(((-1.0)*sj3*x15661*x15669))+(((-1.0)*x15659*x15660))+(((-1.0)*x15660*x15665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15673=IKPowWithIntegerCheck(r02,-1);
if(!x15673.valid){
continue;
}
IkReal x15672=x15673.value;
CheckValue<IkReal> x15674=IKPowWithIntegerCheck(cj3,-1);
if(!x15674.valid){
continue;
}
if( IKabs((x15672*(x15674.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15672)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15672*(x15674.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15672))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15672*(x15674.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15672));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15675=IKsin(j4);
IkReal x15676=IKcos(j4);
IkReal x15677=(cj3*gconst70);
IkReal x15678=(sj1*sj2);
IkReal x15679=((1.0)*gconst71);
IkReal x15680=(gconst71*sj3);
IkReal x15681=(cj2*sj1);
IkReal x15682=((1.0)*sj0);
IkReal x15683=(gconst70*r11);
IkReal x15684=(gconst70*sj3);
IkReal x15685=((1.0)*cj0);
IkReal x15686=(cj3*gconst71);
IkReal x15687=(cj1*sj2);
IkReal x15688=((1.0)*cj1*cj2);
IkReal x15689=(r21*x15676);
IkReal x15690=(r10*x15676);
IkReal x15691=((1.0)*x15676);
IkReal x15692=(r02*x15675);
IkReal x15693=(r20*x15676);
evalcond[0]=((((-1.0)*r02*x15691))+(((-1.0)*x15682)));
evalcond[1]=(((gconst70*r21*x15675))+(((-1.0)*r20*x15675*x15679)));
evalcond[2]=((((-1.0)*r10*x15675*x15679))+cj0+((x15675*x15683)));
evalcond[3]=(((cj3*x15692))+((cj0*x15678))+(((-1.0)*cj1*cj2*x15685)));
evalcond[4]=((((-1.0)*x15685*x15687))+(((-1.0)*x15681*x15685))+(((-1.0)*sj3*x15692)));
evalcond[5]=(((r20*x15684))+x15681+x15687+((x15677*x15689))+((r21*x15680))+(((-1.0)*cj3*x15679*x15693)));
evalcond[6]=(((r20*x15677))+(((-1.0)*x15684*x15689))+x15678+((x15680*x15693))+(((-1.0)*x15688))+((r21*x15686)));
evalcond[7]=(((r10*x15684))+((sj0*x15678))+((r11*x15680))+((r11*x15676*x15677))+(((-1.0)*cj1*cj2*x15682))+(((-1.0)*cj3*x15679*x15690)));
evalcond[8]=((((-1.0)*sj3*x15683*x15691))+((r10*x15677))+((r11*x15686))+(((-1.0)*x15681*x15682))+((x15680*x15690))+(((-1.0)*x15682*x15687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15695=IKPowWithIntegerCheck(r02,-1);
if(!x15695.valid){
continue;
}
IkReal x15694=x15695.value;
CheckValue<IkReal> x15696=IKPowWithIntegerCheck(cj3,-1);
if(!x15696.valid){
continue;
}
if( IKabs((x15694*(x15696.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15694)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15694*(x15696.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15694))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15694*(x15696.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15694));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15697=IKsin(j4);
IkReal x15698=IKcos(j4);
IkReal x15699=(cj5*r10);
IkReal x15700=(sj1*sj2);
IkReal x15701=(cj5*sj3);
IkReal x15702=(r11*sj5);
IkReal x15703=(cj3*cj5);
IkReal x15704=(cj3*sj5);
IkReal x15705=(r21*sj5);
IkReal x15706=(cj2*sj1);
IkReal x15707=((1.0)*sj0);
IkReal x15708=((1.0)*cj0);
IkReal x15709=(sj3*sj5);
IkReal x15710=(cj1*sj2);
IkReal x15711=((1.0)*cj1*cj2);
IkReal x15712=((1.0)*x15697);
IkReal x15713=(r20*x15698);
IkReal x15714=(cj3*x15698);
IkReal x15715=(sj3*x15698);
evalcond[0]=((((-1.0)*x15707))+(((-1.0)*r02*x15698)));
evalcond[1]=(((x15697*x15705))+(((-1.0)*cj5*r20*x15712)));
evalcond[2]=(cj0+((x15697*x15702))+(((-1.0)*x15699*x15712)));
evalcond[3]=(((cj0*x15700))+(((-1.0)*cj1*cj2*x15708))+((cj3*r02*x15697)));
evalcond[4]=((((-1.0)*r02*sj3*x15712))+(((-1.0)*x15708*x15710))+(((-1.0)*x15706*x15708)));
evalcond[5]=(((r21*x15698*x15704))+((r20*x15709))+x15706+x15710+(((-1.0)*x15703*x15713))+((r21*x15701)));
evalcond[6]=((((-1.0)*x15711))+((r20*x15704))+x15700+(((-1.0)*x15705*x15715))+((r21*x15703))+((x15701*x15713)));
evalcond[7]=(((r11*x15701))+((sj0*x15700))+((x15702*x15714))+(((-1.0)*x15699*x15714))+(((-1.0)*cj1*cj2*x15707))+((r10*x15709)));
evalcond[8]=(((r11*x15703))+((x15699*x15715))+((r10*x15704))+(((-1.0)*x15707*x15710))+(((-1.0)*x15706*x15707))+(((-1.0)*x15702*x15715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15716=((1.0)*sj3);
IkReal x15717=((1.0)*cj5);
CheckValue<IkReal> x15718=IKPowWithIntegerCheck(((((-1.0)*r10*x15717))+((r11*sj5))),-1);
if(!x15718.valid){
continue;
}
CheckValue<IkReal> x15719=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15717))+((cj3*r21*sj5))),-1);
if(!x15719.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15718.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15719.value)*(((((-1.0)*r20*sj5*x15716))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15718.value)))+IKsqr(((x15719.value)*(((((-1.0)*r20*sj5*x15716))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15716))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15718.value)), ((x15719.value)*(((((-1.0)*r20*sj5*x15716))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj5*r21*x15716))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15720=IKsin(j4);
IkReal x15721=IKcos(j4);
IkReal x15722=(cj5*r10);
IkReal x15723=(sj1*sj2);
IkReal x15724=(cj5*sj3);
IkReal x15725=(r11*sj5);
IkReal x15726=(cj3*cj5);
IkReal x15727=(cj3*sj5);
IkReal x15728=(r21*sj5);
IkReal x15729=(cj2*sj1);
IkReal x15730=((1.0)*sj0);
IkReal x15731=((1.0)*cj0);
IkReal x15732=(sj3*sj5);
IkReal x15733=(cj1*sj2);
IkReal x15734=((1.0)*cj1*cj2);
IkReal x15735=((1.0)*x15720);
IkReal x15736=(r20*x15721);
IkReal x15737=(cj3*x15721);
IkReal x15738=(sj3*x15721);
evalcond[0]=((((-1.0)*r02*x15721))+(((-1.0)*x15730)));
evalcond[1]=(((x15720*x15728))+(((-1.0)*cj5*r20*x15735)));
evalcond[2]=(cj0+(((-1.0)*x15722*x15735))+((x15720*x15725)));
evalcond[3]=(((cj3*r02*x15720))+((cj0*x15723))+(((-1.0)*cj1*cj2*x15731)));
evalcond[4]=((((-1.0)*x15731*x15733))+(((-1.0)*r02*sj3*x15735))+(((-1.0)*x15729*x15731)));
evalcond[5]=(((r21*x15721*x15727))+((r20*x15732))+((r21*x15724))+(((-1.0)*x15726*x15736))+x15733+x15729);
evalcond[6]=((((-1.0)*x15734))+((x15724*x15736))+((r20*x15727))+(((-1.0)*x15728*x15738))+((r21*x15726))+x15723);
evalcond[7]=((((-1.0)*x15722*x15737))+((r11*x15724))+(((-1.0)*cj1*cj2*x15730))+((sj0*x15723))+((x15725*x15737))+((r10*x15732)));
evalcond[8]=(((x15722*x15738))+((r11*x15726))+(((-1.0)*x15725*x15738))+(((-1.0)*x15730*x15733))+((r10*x15727))+(((-1.0)*x15729*x15730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15739=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15739.valid){
continue;
}
CheckValue<IkReal> x15740=IKPowWithIntegerCheck(r02,-1);
if(!x15740.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15740.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15739.value)))+IKsqr(((-1.0)*sj0*(x15740.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15739.value)), ((-1.0)*sj0*(x15740.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15741=IKsin(j4);
IkReal x15742=IKcos(j4);
IkReal x15743=(cj5*r10);
IkReal x15744=(sj1*sj2);
IkReal x15745=(cj5*sj3);
IkReal x15746=(r11*sj5);
IkReal x15747=(cj3*cj5);
IkReal x15748=(cj3*sj5);
IkReal x15749=(r21*sj5);
IkReal x15750=(cj2*sj1);
IkReal x15751=((1.0)*sj0);
IkReal x15752=((1.0)*cj0);
IkReal x15753=(sj3*sj5);
IkReal x15754=(cj1*sj2);
IkReal x15755=((1.0)*cj1*cj2);
IkReal x15756=((1.0)*x15741);
IkReal x15757=(r20*x15742);
IkReal x15758=(cj3*x15742);
IkReal x15759=(sj3*x15742);
evalcond[0]=((((-1.0)*r02*x15742))+(((-1.0)*x15751)));
evalcond[1]=((((-1.0)*cj5*r20*x15756))+((x15741*x15749)));
evalcond[2]=(cj0+(((-1.0)*x15743*x15756))+((x15741*x15746)));
evalcond[3]=(((cj3*r02*x15741))+((cj0*x15744))+(((-1.0)*cj1*cj2*x15752)));
evalcond[4]=((((-1.0)*r02*sj3*x15756))+(((-1.0)*x15750*x15752))+(((-1.0)*x15752*x15754)));
evalcond[5]=(((r21*x15742*x15748))+((r20*x15753))+((r21*x15745))+x15750+x15754+(((-1.0)*x15747*x15757)));
evalcond[6]=((((-1.0)*x15755))+((r21*x15747))+x15744+((r20*x15748))+((x15745*x15757))+(((-1.0)*x15749*x15759)));
evalcond[7]=(((r10*x15753))+(((-1.0)*x15743*x15758))+((r11*x15745))+((sj0*x15744))+(((-1.0)*cj1*cj2*x15751))+((x15746*x15758)));
evalcond[8]=(((x15743*x15759))+(((-1.0)*x15750*x15751))+(((-1.0)*x15751*x15754))+((r11*x15747))+(((-1.0)*x15746*x15759))+((r10*x15748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15760=((1.0)*sj0);
IkReal x15761=((1.0)*cj0);
CheckValue<IkReal> x15762 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15761))+(((-1.0)*r12*x15760)))),IkReal(((((-1.0)*r11*sj5*x15760))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15762.valid){
continue;
}
CheckValue<IkReal> x15763=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15762.value)+(((1.5707963267949)*(x15763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15764=IKsin(j4);
IkReal x15765=IKcos(j4);
IkReal x15766=(r11*sj5);
IkReal x15767=(cj5*r10);
IkReal x15768=(sj1*sj2);
IkReal x15769=(cj5*sj3);
IkReal x15770=((1.0)*sj0);
IkReal x15771=(cj3*cj5);
IkReal x15772=(cj3*sj5);
IkReal x15773=(r21*sj5);
IkReal x15774=(cj2*sj1);
IkReal x15775=(sj3*sj5);
IkReal x15776=(r01*sj5);
IkReal x15777=((1.0)*cj0);
IkReal x15778=(cj1*sj2);
IkReal x15779=((1.0)*x15765);
IkReal x15780=((1.0)*x15764);
IkReal x15781=(cj3*x15765);
IkReal x15782=((1.0)*cj1*cj2);
IkReal x15783=(cj3*x15764);
evalcond[0]=((((-1.0)*r22*x15779))+((x15764*x15773))+(((-1.0)*cj5*r20*x15780)));
evalcond[1]=(cj0+((x15764*x15766))+(((-1.0)*r12*x15779))+(((-1.0)*x15767*x15780)));
evalcond[2]=((((-1.0)*x15770))+(((-1.0)*r02*x15779))+((x15764*x15776))+(((-1.0)*cj5*r00*x15780)));
evalcond[3]=(((r21*x15769))+((r22*x15783))+((r21*x15765*x15772))+((r20*x15775))+x15778+x15774+(((-1.0)*r20*x15771*x15779)));
evalcond[4]=((((-1.0)*sj3*x15773*x15779))+((r21*x15771))+((r20*x15765*x15769))+((r20*x15772))+(((-1.0)*r22*sj3*x15780))+x15768+(((-1.0)*x15782)));
evalcond[5]=((((-1.0)*r00*x15771*x15779))+((r01*x15769))+((r00*x15775))+((r02*x15783))+((cj0*x15768))+(((-1.0)*cj1*cj2*x15777))+((r01*x15765*x15772)));
evalcond[6]=((((-1.0)*cj3*x15767*x15779))+((r10*x15775))+((x15766*x15781))+((sj0*x15768))+((r12*x15783))+(((-1.0)*cj1*cj2*x15770))+((r11*x15769)));
evalcond[7]=((((-1.0)*r01*x15775*x15779))+((r00*x15772))+((r01*x15771))+(((-1.0)*r02*sj3*x15780))+((r00*x15765*x15769))+(((-1.0)*x15774*x15777))+(((-1.0)*x15777*x15778)));
evalcond[8]=(((r10*x15772))+(((-1.0)*x15770*x15778))+(((-1.0)*x15770*x15774))+((r11*x15771))+(((-1.0)*r12*sj3*x15780))+(((-1.0)*sj3*x15766*x15779))+((sj3*x15765*x15767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15784=((1.0)*cj5);
CheckValue<IkReal> x15785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15784)))),-1);
if(!x15785.valid){
continue;
}
CheckValue<IkReal> x15786 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15784))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15785.value)))+(x15786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15787=IKsin(j4);
IkReal x15788=IKcos(j4);
IkReal x15789=(r11*sj5);
IkReal x15790=(cj5*r10);
IkReal x15791=(sj1*sj2);
IkReal x15792=(cj5*sj3);
IkReal x15793=((1.0)*sj0);
IkReal x15794=(cj3*cj5);
IkReal x15795=(cj3*sj5);
IkReal x15796=(r21*sj5);
IkReal x15797=(cj2*sj1);
IkReal x15798=(sj3*sj5);
IkReal x15799=(r01*sj5);
IkReal x15800=((1.0)*cj0);
IkReal x15801=(cj1*sj2);
IkReal x15802=((1.0)*x15788);
IkReal x15803=((1.0)*x15787);
IkReal x15804=(cj3*x15788);
IkReal x15805=((1.0)*cj1*cj2);
IkReal x15806=(cj3*x15787);
evalcond[0]=((((-1.0)*cj5*r20*x15803))+((x15787*x15796))+(((-1.0)*r22*x15802)));
evalcond[1]=((((-1.0)*r12*x15802))+cj0+(((-1.0)*x15790*x15803))+((x15787*x15789)));
evalcond[2]=((((-1.0)*cj5*r00*x15803))+(((-1.0)*x15793))+((x15787*x15799))+(((-1.0)*r02*x15802)));
evalcond[3]=(((r20*x15798))+(((-1.0)*r20*x15794*x15802))+((r21*x15792))+x15797+((r22*x15806))+x15801+((r21*x15788*x15795)));
evalcond[4]=(((r20*x15788*x15792))+(((-1.0)*x15805))+(((-1.0)*sj3*x15796*x15802))+((r20*x15795))+((r21*x15794))+x15791+(((-1.0)*r22*sj3*x15803)));
evalcond[5]=((((-1.0)*r00*x15794*x15802))+((cj0*x15791))+((r01*x15788*x15795))+((r01*x15792))+((r02*x15806))+((r00*x15798))+(((-1.0)*cj1*cj2*x15800)));
evalcond[6]=(((r12*x15806))+((r11*x15792))+((x15789*x15804))+(((-1.0)*cj1*cj2*x15793))+((r10*x15798))+(((-1.0)*cj3*x15790*x15802))+((sj0*x15791)));
evalcond[7]=((((-1.0)*x15797*x15800))+(((-1.0)*x15800*x15801))+((r00*x15788*x15792))+(((-1.0)*r02*sj3*x15803))+((r01*x15794))+((r00*x15795))+(((-1.0)*r01*x15798*x15802)));
evalcond[8]=(((r11*x15794))+((sj3*x15788*x15790))+(((-1.0)*x15793*x15797))+((r10*x15795))+(((-1.0)*x15793*x15801))+(((-1.0)*r12*sj3*x15803))+(((-1.0)*sj3*x15789*x15802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15807=((1.0)*cj5);
CheckValue<IkReal> x15808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15807)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15808.valid){
continue;
}
CheckValue<IkReal> x15809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x15807))+(((-1.0)*r00*sj5)))),-1);
if(!x15809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15808.value)+(((1.5707963267949)*(x15809.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15810=IKsin(j4);
IkReal x15811=IKcos(j4);
IkReal x15812=(r11*sj5);
IkReal x15813=(cj5*r10);
IkReal x15814=(sj1*sj2);
IkReal x15815=(cj5*sj3);
IkReal x15816=((1.0)*sj0);
IkReal x15817=(cj3*cj5);
IkReal x15818=(cj3*sj5);
IkReal x15819=(r21*sj5);
IkReal x15820=(cj2*sj1);
IkReal x15821=(sj3*sj5);
IkReal x15822=(r01*sj5);
IkReal x15823=((1.0)*cj0);
IkReal x15824=(cj1*sj2);
IkReal x15825=((1.0)*x15811);
IkReal x15826=((1.0)*x15810);
IkReal x15827=(cj3*x15811);
IkReal x15828=((1.0)*cj1*cj2);
IkReal x15829=(cj3*x15810);
evalcond[0]=((((-1.0)*cj5*r20*x15826))+(((-1.0)*r22*x15825))+((x15810*x15819)));
evalcond[1]=(cj0+(((-1.0)*x15813*x15826))+(((-1.0)*r12*x15825))+((x15810*x15812)));
evalcond[2]=((((-1.0)*r02*x15825))+(((-1.0)*x15816))+((x15810*x15822))+(((-1.0)*cj5*r00*x15826)));
evalcond[3]=(((r20*x15821))+(((-1.0)*r20*x15817*x15825))+((r22*x15829))+((r21*x15811*x15818))+((r21*x15815))+x15820+x15824);
evalcond[4]=(((r20*x15811*x15815))+(((-1.0)*x15828))+(((-1.0)*r22*sj3*x15826))+((r21*x15817))+((r20*x15818))+x15814+(((-1.0)*sj3*x15819*x15825)));
evalcond[5]=(((r00*x15821))+((r02*x15829))+((r01*x15811*x15818))+((cj0*x15814))+(((-1.0)*cj1*cj2*x15823))+(((-1.0)*r00*x15817*x15825))+((r01*x15815)));
evalcond[6]=(((r11*x15815))+(((-1.0)*cj1*cj2*x15816))+((sj0*x15814))+((x15812*x15827))+((r10*x15821))+(((-1.0)*cj3*x15813*x15825))+((r12*x15829)));
evalcond[7]=((((-1.0)*x15823*x15824))+(((-1.0)*r02*sj3*x15826))+((r00*x15811*x15815))+(((-1.0)*r01*x15821*x15825))+((r00*x15818))+((r01*x15817))+(((-1.0)*x15820*x15823)));
evalcond[8]=(((r11*x15817))+((r10*x15818))+((sj3*x15811*x15813))+(((-1.0)*x15816*x15824))+(((-1.0)*x15816*x15820))+(((-1.0)*r12*sj3*x15826))+(((-1.0)*sj3*x15812*x15825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15830=cj5*cj5;
IkReal x15831=r21*r21;
IkReal x15832=r20*r20;
IkReal x15833=(r20*r21);
IkReal x15834=((1.0)*cj3);
IkReal x15835=((1.0)*cj5);
IkReal x15836=(cj1*sj2);
IkReal x15837=(cj5*sj5);
IkReal x15838=(sj3*sj5);
IkReal x15839=(cj2*sj1);
IkReal x15840=(r21*sj5);
CheckValue<IkReal> x15841 = IKatan2WithCheck(IkReal((((r22*x15836))+((r22*x15839))+((cj5*r21*r22*sj3))+((r20*r22*x15838)))),IkReal((((x15836*x15840))+((x15839*x15840))+(((-1.0)*r20*x15835*x15839))+(((-1.0)*r20*x15835*x15836))+((sj3*x15831*x15837))+(((-1.0)*x15832*x15835*x15838))+(((-2.0)*sj3*x15830*x15833))+((sj3*x15833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15841.valid){
continue;
}
CheckValue<IkReal> x15842=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15831*x15834))+((cj3*x15830*x15831))+(((-1.0)*x15830*x15832*x15834))+(((-1.0)*x15834*(r22*r22)))+(((2.0)*cj3*x15833*x15837)))),-1);
if(!x15842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15841.value)+(((1.5707963267949)*(x15842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15843=IKsin(j4);
IkReal x15844=IKcos(j4);
IkReal x15845=(cj3*r21);
IkReal x15846=(r21*sj5);
IkReal x15847=(r20*sj5);
IkReal x15848=(cj5*r20);
IkReal x15849=((1.0)*x15844);
IkReal x15850=((1.0)*x15843);
evalcond[0]=(((x15843*x15846))+(((-1.0)*r22*x15849))+(((-1.0)*x15848*x15850)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15848*x15849))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15847))+((cj3*r22*x15843))+((sj5*x15844*x15845)));
evalcond[2]=(((cj3*x15847))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15846*x15849))+((cj5*x15845))+(((-1.0)*r22*sj3*x15850))+((sj3*x15844*x15848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15851=(cj5*sj4);
IkReal x15852=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15851))+((r01*x15852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15851))+(((-1.0)*r11*x15852))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15851))+((r01*x15852))))+IKsqr((((r10*x15851))+(((-1.0)*r11*x15852))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x15851))+((r01*x15852))), (((r10*x15851))+(((-1.0)*r11*x15852))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15853=IKcos(j0);
IkReal x15854=IKsin(j0);
IkReal x15855=(cj5*r01);
IkReal x15856=((1.0)*sj3);
IkReal x15857=(r12*sj4);
IkReal x15858=((1.0)*cj3);
IkReal x15859=(r11*sj5);
IkReal x15860=(cj3*cj4);
IkReal x15861=(r02*sj4);
IkReal x15862=(r01*sj5);
IkReal x15863=(r10*sj5);
IkReal x15864=(cj5*r11);
IkReal x15865=(r00*sj5);
IkReal x15866=((1.0)*cj2);
IkReal x15867=((0.5723)*sj2);
IkReal x15868=((1.0)*cj4);
IkReal x15869=((0.5723)*cj2);
IkReal x15870=(cj4*cj5*r00);
IkReal x15871=((1.0)*cj1*sj2);
IkReal x15872=(cj4*cj5*r10);
IkReal x15873=(sj1*x15853);
IkReal x15874=(cj1*x15854);
IkReal x15875=((1.0)*cj5*sj4);
IkReal x15876=(cj1*x15853);
IkReal x15877=(sj1*x15854);
evalcond[0]=(((sj4*x15859))+(((-1.0)*r10*x15875))+x15853+(((-1.0)*r12*x15868)));
evalcond[1]=((((-1.0)*r02*x15868))+((sj4*x15862))+(((-1.0)*r00*x15875))+(((-1.0)*x15854)));
evalcond[2]=((((-0.163941)*x15854))+(((0.612)*x15876))+(((-0.1157)*x15865))+(((-1.0)*px))+(((-0.1157)*x15855))+(((-1.0)*x15867*x15873))+((x15869*x15876)));
evalcond[3]=((((0.612)*x15874))+(((-0.1157)*x15864))+(((-0.1157)*x15863))+(((-1.0)*py))+(((-1.0)*x15867*x15877))+((x15869*x15874))+(((0.163941)*x15853)));
evalcond[4]=(((sj3*x15865))+((x15860*x15862))+((sj3*x15855))+((sj2*x15873))+((cj3*x15861))+(((-1.0)*x15858*x15870))+(((-1.0)*x15866*x15876)));
evalcond[5]=(((cj3*x15857))+((sj3*x15863))+((sj3*x15864))+((sj2*x15877))+((x15859*x15860))+(((-1.0)*x15858*x15872))+(((-1.0)*x15866*x15874)));
evalcond[6]=(((cj3*x15855))+(((-1.0)*x15853*x15871))+(((-1.0)*cj4*x15856*x15862))+(((-1.0)*x15856*x15861))+((cj3*x15865))+((sj3*x15870))+(((-1.0)*x15866*x15873)));
evalcond[7]=((((-1.0)*x15854*x15871))+((cj3*x15863))+((cj3*x15864))+((sj3*x15872))+(((-1.0)*cj4*x15856*x15859))+(((-1.0)*x15856*x15857))+(((-1.0)*x15866*x15877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15878=cj5*cj5;
IkReal x15879=r21*r21;
IkReal x15880=r20*r20;
IkReal x15881=(r20*r21);
IkReal x15882=(sj1*sj2);
IkReal x15883=(r21*sj5);
IkReal x15884=(cj1*cj2);
IkReal x15885=(cj5*r20);
IkReal x15886=(cj5*sj5);
IkReal x15887=(cj3*r22);
IkReal x15888=(sj3*x15879);
CheckValue<IkReal> x15889=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-1.0)*x15878*x15888))+(((-2.0)*sj3*x15881*x15886))+((sj3*x15878*x15880))+x15888)),-1);
if(!x15889.valid){
continue;
}
CheckValue<IkReal> x15890 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15884))+((r20*sj5*x15887))+((cj5*r21*x15887))+((r22*x15882)))),IkReal(((((-1.0)*cj3*x15880*x15886))+(((-1.0)*x15882*x15885))+((cj3*x15879*x15886))+((cj3*x15881))+((x15882*x15883))+(((-2.0)*cj3*x15878*x15881))+(((-1.0)*x15883*x15884))+((x15884*x15885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15889.value)))+(x15890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15891=IKsin(j4);
IkReal x15892=IKcos(j4);
IkReal x15893=(cj3*r21);
IkReal x15894=(r21*sj5);
IkReal x15895=(r20*sj5);
IkReal x15896=(cj5*r20);
IkReal x15897=((1.0)*x15892);
IkReal x15898=((1.0)*x15891);
evalcond[0]=((((-1.0)*r22*x15897))+(((-1.0)*x15896*x15898))+((x15891*x15894)));
evalcond[1]=(((cj3*r22*x15891))+((cj2*sj1))+(((-1.0)*cj3*x15896*x15897))+((cj5*r21*sj3))+((cj1*sj2))+((sj5*x15892*x15893))+((sj3*x15895)));
evalcond[2]=((((-1.0)*sj3*x15894*x15897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((cj3*x15895))+((sj3*x15892*x15896))+(((-1.0)*r22*sj3*x15898))+((cj5*x15893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15899=(cj5*sj4);
IkReal x15900=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15900))+(((-1.0)*r00*x15899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15899))+((cj4*r12))+(((-1.0)*r11*x15900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15900))+(((-1.0)*r00*x15899))))+IKsqr((((r10*x15899))+((cj4*r12))+(((-1.0)*r11*x15900))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15900))+(((-1.0)*r00*x15899))), (((r10*x15899))+((cj4*r12))+(((-1.0)*r11*x15900))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15901=IKcos(j0);
IkReal x15902=IKsin(j0);
IkReal x15903=(cj5*r01);
IkReal x15904=((1.0)*sj3);
IkReal x15905=(r12*sj4);
IkReal x15906=((1.0)*cj3);
IkReal x15907=(r11*sj5);
IkReal x15908=(cj3*cj4);
IkReal x15909=(r02*sj4);
IkReal x15910=(r01*sj5);
IkReal x15911=(r10*sj5);
IkReal x15912=(cj5*r11);
IkReal x15913=(r00*sj5);
IkReal x15914=((1.0)*cj2);
IkReal x15915=((0.5723)*sj2);
IkReal x15916=((1.0)*cj4);
IkReal x15917=((0.5723)*cj2);
IkReal x15918=(cj4*cj5*r00);
IkReal x15919=((1.0)*cj1*sj2);
IkReal x15920=(cj4*cj5*r10);
IkReal x15921=(sj1*x15901);
IkReal x15922=(cj1*x15902);
IkReal x15923=((1.0)*cj5*sj4);
IkReal x15924=(cj1*x15901);
IkReal x15925=(sj1*x15902);
evalcond[0]=((((-1.0)*r10*x15923))+(((-1.0)*r12*x15916))+((sj4*x15907))+x15901);
evalcond[1]=((((-1.0)*x15902))+(((-1.0)*r02*x15916))+((sj4*x15910))+(((-1.0)*r00*x15923)));
evalcond[2]=((((-0.163941)*x15902))+(((0.612)*x15924))+(((-1.0)*x15915*x15921))+(((-1.0)*px))+(((-0.1157)*x15903))+(((-0.1157)*x15913))+((x15917*x15924)));
evalcond[3]=((((0.612)*x15922))+(((-1.0)*x15915*x15925))+(((-1.0)*py))+(((-0.1157)*x15911))+(((-0.1157)*x15912))+((x15917*x15922))+(((0.163941)*x15901)));
evalcond[4]=((((-1.0)*x15906*x15918))+((sj3*x15913))+((sj3*x15903))+((x15908*x15910))+((sj2*x15921))+(((-1.0)*x15914*x15924))+((cj3*x15909)));
evalcond[5]=(((sj3*x15911))+((sj3*x15912))+(((-1.0)*x15906*x15920))+((x15907*x15908))+((sj2*x15925))+(((-1.0)*x15914*x15922))+((cj3*x15905)));
evalcond[6]=((((-1.0)*x15904*x15909))+((sj3*x15918))+(((-1.0)*cj4*x15904*x15910))+(((-1.0)*x15914*x15921))+(((-1.0)*x15901*x15919))+((cj3*x15913))+((cj3*x15903)));
evalcond[7]=((((-1.0)*x15904*x15905))+(((-1.0)*cj4*x15904*x15907))+(((-1.0)*x15902*x15919))+((sj3*x15920))+(((-1.0)*x15914*x15925))+((cj3*x15912))+((cj3*x15911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur10 (2dfe21c55533d00254ff7c09021198bd)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
